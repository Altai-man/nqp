.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'

.HLL "nqp"

.loadlib "nqp_group"

.loadlib "nqp_ops"

.loadlib "nqp_bigint_ops"

.loadlib "trans_ops"

.loadlib "io_ops"

.namespace []
.sub "_block1417"  :anon :subid("387_1338064436.26")
    .param pmc param_1419 :slurpy
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 0
    .const 'Sub' $P2324 = "422_1338064436.26" 
    capture_lex $P2324
    .const 'Sub' $P2311 = "419_1338064436.26" 
    capture_lex $P2311
    .const 'Sub' $P2303 = "418_1338064436.26" 
    capture_lex $P2303
    .const 'Sub' $P2290 = "417_1338064436.26" 
    capture_lex $P2290
    .const 'Sub' $P2186 = "405_1338064436.26" 
    capture_lex $P2186
    .const 'Sub' $P2121 = "400_1338064436.26" 
    capture_lex $P2121
    .const 'Sub' $P1704 = "68_1338064436.26" 
    capture_lex $P1704
    .const 'Sub' $P1429 = "388_1338064436.26" 
    capture_lex $P1429
.annotate 'line', 1
    .lex "@ARGS", param_1419
    .lex "GLOBALish", $P1420
    .lex "$?PACKAGE", $P1421
    .lex "NQPCursorRole", $P1422
    .lex "NQPMatch", $P1423
    .lex "NQPCursor", $P1424
    .lex "NQPRegexMethod", $P1425
    .lex "NQPRegex", $P1426
    .lex "EXPORT", $P1427
    $P0 = find_dynamic_lex "$*CTXSAVE"
    if null $P0 goto ctxsave_done
    $I0 = can $P0, "ctxsave"
    unless $I0 goto ctxsave_done
    $P0."ctxsave"()
  ctxsave_done:
.annotate 'line', 5
    .const 'Sub' $P1429 = "388_1338064436.26" 
    capture_lex $P1429
    $P1429()
.annotate 'line', 724
    .const 'Sub' $P2121 = "400_1338064436.26" 
    capture_lex $P2121
    $P2121()
.annotate 'line', 763
    .const 'Sub' $P2186 = "405_1338064436.26" 
    capture_lex $P2186
    $P2186()
.annotate 'line', 867
    .const 'Sub' $P2290 = "417_1338064436.26" 
    capture_lex $P2290
    $P2290()
.annotate 'line', 880
    .const 'Sub' $P2303 = "418_1338064436.26" 
    capture_lex $P2303
    $P2303()
.annotate 'line', 886
    .const 'Sub' $P2311 = "419_1338064436.26" 
    capture_lex $P2311
    $P2311()
.annotate 'line', 1
    set $P101, param_1419
    if $P101, if_2319
    set $P100, $P101
    goto if_2319_end
  if_2319:
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P102, "ModuleLoader"
    getinterp $P103
    set $P104, $P103["context"]
    $P105 = $P102."set_mainline_module"($P104)
    set $P100, $P105
  if_2319_end:
    .return ($P100)
    .const 'Sub' $P2321 = "421_1338064436.26" 
    .return ($P2321)
.end


.HLL "nqp"

.namespace []
.sub "" :load :init :subid("post423") :outer("387_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 0
    .const 'Sub' $P1418 = "387_1338064436.26" 
    .local pmc block
    set block, $P1418
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P107
    get_class $P108, "LexPad"
    get_class $P109, "NQPLexPad"
    $P107."hll_map"($P108, $P109)
    nqp_create_sc $P110, "152819621F18B86657DB412D206298CA3534F307-1338064436.189"
    .local pmc cur_sc
    set cur_sc, $P110
    cur_sc."set_description"("src\\stage2\\QRegex.nqp")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P111, "ModuleLoader"
    $P112 = $P111."load_setting"("NQPCORE")
    block."set_outer_ctx"($P112)
    set $S100, ""
    new $P111, "ResizableStringArray"
    .local pmc string_heap
    set string_heap, $P111
    null $S101
    push string_heap, $S101
    push string_heap, "P6opaque"
    push string_heap, "QRegex"
    push string_heap, "NQPCursorRole"
    push string_heap, "NQPMatch"
    push string_heap, "NQPCursor"
    push string_heap, "NQPRegexMethod"
    push string_heap, "NQPRegex"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "2DEE75AFD50ED67BDF162F6BA56A80FA8956D48C-1338064435.275"
    push string_heap, "src\\stage2\\NQPCORE.setting"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "addstate"
    push string_heap, "addedge"
    push string_heap, "states"
    push string_heap, "addnode"
    push string_heap, "regex_nfa"
    push string_heap, "fate"
    push string_heap, "alt"
    push string_heap, "anchor"
    push string_heap, "cclass"
    push string_heap, "concat"
    push string_heap, "enumcharlist"
    push string_heap, "literal"
    push string_heap, "subrule"
    push string_heap, "quant"
    push string_heap, "pastnode"
    push string_heap, "subcapture"
    push string_heap, "past"
    push string_heap, "mergesubrule"
    push string_heap, "run"
    push string_heap, "$!states"
    push string_heap, "$!edges"
    push string_heap, "Uninstantiable"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "BUILD"
    push string_heap, "list"
    push string_heap, "hash"
    push string_heap, "from"
    push string_heap, "orig"
    push string_heap, "to"
    push string_heap, "CURSOR"
    push string_heap, "Bool"
    push string_heap, "chars"
    push string_heap, "!make"
    push string_heap, "ast"
    push string_heap, "!dump_str"
    push string_heap, "@!array"
    push string_heap, "%!hash"
    push string_heap, "$!orig"
    push string_heap, "$!from"
    push string_heap, "$!to"
    push string_heap, "$!ast"
    push string_heap, "$!cursor"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "MATCH"
    push string_heap, "Bool"
    push string_heap, "parse"
    push string_heap, "!INTERPOLATE"
    push string_heap, "!INTERPOLATE_REGEX"
    push string_heap, "target"
    push string_heap, "from"
    push string_heap, "pos"
    push string_heap, "CAPHASH"
    push string_heap, "!cursor_init"
    push string_heap, "!cursor_start"
    push string_heap, "!cursor_start_subcapture"
    push string_heap, "!cursor_capture"
    push string_heap, "!cursor_push_cstack"
    push string_heap, "!cursor_pass"
    push string_heap, "!cursor_fail"
    push string_heap, "!cursor_next"
    push string_heap, "!reduce"
    push string_heap, "!reduce_with_match"
    push string_heap, "!protoregex"
    push string_heap, "!protoregex_nfa"
    push string_heap, "!protoregex_table"
    push string_heap, "!BACKREF"
    push string_heap, "!LITERAL"
    push string_heap, "at"
    push string_heap, "before"
    push string_heap, "after"
    push string_heap, "ws"
    push string_heap, "ww"
    push string_heap, "wb"
    push string_heap, "ident"
    push string_heap, "alpha"
    push string_heap, "alnum"
    push string_heap, "upper"
    push string_heap, "lower"
    push string_heap, "digit"
    push string_heap, "xdigit"
    push string_heap, "space"
    push string_heap, "blank"
    push string_heap, "cntrl"
    push string_heap, "punct"
    push string_heap, "FAILGOAL"
    push string_heap, "$!orig"
    push string_heap, "$!target"
    push string_heap, "$!from"
    push string_heap, "$!pos"
    push string_heap, "$!match"
    push string_heap, "$!name"
    push string_heap, "$!bstack"
    push string_heap, "$!cstack"
    push string_heap, "$!regexsub"
    push string_heap, "$!restart"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "$!code"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "$!code"
    push string_heap, "Uninstantiable"
    push string_heap, "DEFAULT"
    push string_heap, "Uninstantiable"
    push string_heap, "__6MODEL_CORE__"
    push string_heap, "GLOBALish"
    push string_heap, "5B6BCDEB97207A8A1AF979F9510A88333D9459D9-1338064432.041"
    push string_heap, "src\\stage2\\gen\\nqp-mo.pm"
    push string_heap, "QRegex::NFA"
    push string_heap, "$!states"
    push string_heap, "$!edges"
    push string_heap, "new"
    push string_heap, "addstate"
    push string_heap, "addedge"
    push string_heap, "states"
    push string_heap, "addnode"
    push string_heap, "regex_nfa"
    push string_heap, "fate"
    push string_heap, "alt"
    push string_heap, "anchor"
    push string_heap, "cclass"
    push string_heap, "concat"
    push string_heap, "enumcharlist"
    push string_heap, "literal"
    push string_heap, "subrule"
    push string_heap, "quant"
    push string_heap, "pastnode"
    push string_heap, "subcapture"
    push string_heap, "past"
    push string_heap, "mergesubrule"
    push string_heap, "run"
    push string_heap, "__dump"
    push string_heap, "NQPCursorRole"
    push string_heap, "$!orig"
    push string_heap, "$!target"
    push string_heap, "$!from"
    push string_heap, "$!pos"
    push string_heap, "$!match"
    push string_heap, "$!name"
    push string_heap, "$!bstack"
    push string_heap, "$!cstack"
    push string_heap, "$!regexsub"
    push string_heap, "$!restart"
    push string_heap, "target"
    push string_heap, "from"
    push string_heap, "pos"
    push string_heap, "CAPHASH"
    push string_heap, "!cursor_init"
    push string_heap, "!cursor_start"
    push string_heap, "!cursor_start_subcapture"
    push string_heap, "!cursor_capture"
    push string_heap, "!cursor_push_cstack"
    push string_heap, "!cursor_pass"
    push string_heap, "!cursor_fail"
    push string_heap, "!cursor_next"
    push string_heap, "!reduce"
    push string_heap, "!reduce_with_match"
    push string_heap, "!protoregex"
    push string_heap, "!protoregex_nfa"
    push string_heap, "!protoregex_table"
    push string_heap, "!BACKREF"
    push string_heap, "!LITERAL"
    push string_heap, "at"
    push string_heap, "before"
    push string_heap, "after"
    push string_heap, "ws"
    push string_heap, "ww"
    push string_heap, "wb"
    push string_heap, "ident"
    push string_heap, "alpha"
    push string_heap, "alnum"
    push string_heap, "upper"
    push string_heap, "lower"
    push string_heap, "digit"
    push string_heap, "xdigit"
    push string_heap, "space"
    push string_heap, "blank"
    push string_heap, "cntrl"
    push string_heap, "punct"
    push string_heap, "FAILGOAL"
    push string_heap, "NQPMatch"
    push string_heap, "$!orig"
    push string_heap, "$!from"
    push string_heap, "$!to"
    push string_heap, "$!ast"
    push string_heap, "$!cursor"
    push string_heap, "from"
    push string_heap, "orig"
    push string_heap, "to"
    push string_heap, "CURSOR"
    push string_heap, "Str"
    push string_heap, "Bool"
    push string_heap, "chars"
    push string_heap, "!make"
    push string_heap, "ast"
    push string_heap, "!dump_str"
    push string_heap, "get_string"
    push string_heap, "get_integer"
    push string_heap, "get_number"
    push string_heap, "NQPCursor"
    push string_heap, "$!orig"
    push string_heap, "$!target"
    push string_heap, "$!from"
    push string_heap, "$!pos"
    push string_heap, "$!match"
    push string_heap, "$!name"
    push string_heap, "$!bstack"
    push string_heap, "$!cstack"
    push string_heap, "$!regexsub"
    push string_heap, "$!restart"
    push string_heap, "MATCH"
    push string_heap, "Bool"
    push string_heap, "parse"
    push string_heap, "!INTERPOLATE"
    push string_heap, "!INTERPOLATE_REGEX"
    push string_heap, "target"
    push string_heap, "from"
    push string_heap, "pos"
    push string_heap, "CAPHASH"
    push string_heap, "!cursor_init"
    push string_heap, "!cursor_start"
    push string_heap, "!cursor_start_subcapture"
    push string_heap, "!cursor_capture"
    push string_heap, "!cursor_push_cstack"
    push string_heap, "!cursor_pass"
    push string_heap, "!cursor_fail"
    push string_heap, "!cursor_next"
    push string_heap, "!reduce"
    push string_heap, "!reduce_with_match"
    push string_heap, "!protoregex"
    push string_heap, "!protoregex_nfa"
    push string_heap, "!protoregex_table"
    push string_heap, "!BACKREF"
    push string_heap, "!LITERAL"
    push string_heap, "at"
    push string_heap, "before"
    push string_heap, "after"
    push string_heap, "ws"
    push string_heap, "ww"
    push string_heap, "wb"
    push string_heap, "ident"
    push string_heap, "alpha"
    push string_heap, "alnum"
    push string_heap, "upper"
    push string_heap, "lower"
    push string_heap, "digit"
    push string_heap, "xdigit"
    push string_heap, "space"
    push string_heap, "blank"
    push string_heap, "cntrl"
    push string_heap, "punct"
    push string_heap, "FAILGOAL"
    push string_heap, "NQPRegexMethod"
    push string_heap, "$!code"
    push string_heap, "new"
    push string_heap, "ACCEPTS"
    push string_heap, "Str"
    push string_heap, "get_string"
    push string_heap, "invoke"
    push string_heap, "$!code"
    push string_heap, "NQPRegex"
    push string_heap, "ACCEPTS"
    push string_heap, "EXPORT"
    push string_heap, "DEFAULT"
    push string_heap, "P6opaque"
    push string_heap, "NFA"
    push string_heap, "Uninstantiable"
    push string_heap, "$!states"
    push string_heap, "$!edges"
    push string_heap, "$!orig"
    push string_heap, "$!target"
    push string_heap, "$!from"
    push string_heap, "$!pos"
    push string_heap, "$!match"
    push string_heap, "$!name"
    push string_heap, "$!bstack"
    push string_heap, "$!cstack"
    push string_heap, "$!regexsub"
    push string_heap, "$!restart"
    push string_heap, "$!orig"
    push string_heap, "$!from"
    push string_heap, "$!to"
    push string_heap, "$!ast"
    push string_heap, "$!cursor"
    push string_heap, "$!code"
    push string_heap, "$?CLASS"
    push string_heap, "$NO_CAPS"
    push string_heap, "$pass_mark"
    push string_heap, "QRegex"
    push string_heap, "NQPCursorRole"
    push string_heap, "$!orig"
    push string_heap, "$!target"
    push string_heap, "$!from"
    push string_heap, "$!pos"
    push string_heap, "$!match"
    push string_heap, "$!name"
    push string_heap, "$!bstack"
    push string_heap, "$!cstack"
    push string_heap, "$!regexsub"
    push string_heap, "$!restart"
    push string_heap, "target"
    push string_heap, "from"
    push string_heap, "pos"
    push string_heap, "CAPHASH"
    push string_heap, "!cursor_init"
    push string_heap, "!cursor_start"
    push string_heap, "!cursor_start_subcapture"
    push string_heap, "!cursor_capture"
    push string_heap, "!cursor_push_cstack"
    push string_heap, "!cursor_pass"
    push string_heap, "!cursor_fail"
    push string_heap, "!cursor_next"
    push string_heap, "!reduce"
    push string_heap, "!reduce_with_match"
    push string_heap, "!protoregex"
    push string_heap, "!protoregex_nfa"
    push string_heap, "!protoregex_table"
    push string_heap, "!BACKREF"
    push string_heap, "!LITERAL"
    push string_heap, "at"
    push string_heap, "before"
    push string_heap, "after"
    push string_heap, "ws"
    push string_heap, "ww"
    push string_heap, "wb"
    push string_heap, "ident"
    push string_heap, "alpha"
    push string_heap, "alnum"
    push string_heap, "upper"
    push string_heap, "lower"
    push string_heap, "digit"
    push string_heap, "xdigit"
    push string_heap, "space"
    push string_heap, "blank"
    push string_heap, "cntrl"
    push string_heap, "punct"
    push string_heap, "FAILGOAL"
    .const 'Sub' $P2324 = "422_1338064436.26" 
    capture_lex $P2324
    $P113 = $P2324()
    nqp_deserialize_sc $S100, cur_sc, string_heap, $P113
    .const 'LexInfo' $P2405 = "387_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 0
    $P2405."set_static_lexpad_value"("GLOBALish", $P114)
    .const 'LexInfo' $P2406 = "387_1338064436.26" 
    $P2406."finish_static_lexpad"()
    .const 'LexInfo' $P2407 = "387_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 0
    $P2407."set_static_lexpad_value"("$?PACKAGE", $P114)
    .const 'LexInfo' $P2408 = "387_1338064436.26" 
    $P2408."finish_static_lexpad"()
    .const '' $P2409 = "10_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 2
    set_sub_code_object $P2409, $P114
    .const '' $P2410 = "11_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 3
    set_sub_code_object $P2410, $P114
    .const '' $P2411 = "12_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 4
    set_sub_code_object $P2411, $P114
    .const '' $P2412 = "13_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 5
    set_sub_code_object $P2412, $P114
    .const '' $P2413 = "14_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 6
    set_sub_code_object $P2413, $P114
    .const '' $P2414 = "15_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 7
    set_sub_code_object $P2414, $P114
    .const '' $P2415 = "16_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 8
    set_sub_code_object $P2415, $P114
    .const '' $P2416 = "17_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 9
    set_sub_code_object $P2416, $P114
    .const '' $P2417 = "18_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 10
    set_sub_code_object $P2417, $P114
    .const '' $P2418 = "19_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 11
    set_sub_code_object $P2418, $P114
    .const '' $P2419 = "20_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 12
    set_sub_code_object $P2419, $P114
    .const '' $P2420 = "21_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 13
    set_sub_code_object $P2420, $P114
    .const '' $P2421 = "22_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 14
    set_sub_code_object $P2421, $P114
    .const '' $P2422 = "23_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 15
    set_sub_code_object $P2422, $P114
    .const '' $P2423 = "24_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 16
    set_sub_code_object $P2423, $P114
    .const '' $P2424 = "25_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 17
    set_sub_code_object $P2424, $P114
    .const '' $P2425 = "26_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 18
    set_sub_code_object $P2425, $P114
    .const '' $P2426 = "27_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 19
    set_sub_code_object $P2426, $P114
    .const '' $P2427 = "28_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 20
    set_sub_code_object $P2427, $P114
    .const '' $P2428 = "29_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 21
    set_sub_code_object $P2428, $P114
    .const '' $P2429 = "30_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 22
    set_sub_code_object $P2429, $P114
    .const 'LexInfo' $P2430 = "388_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 1
    $P2430."set_static_lexpad_value"("$?PACKAGE", $P114)
    .const 'LexInfo' $P2431 = "388_1338064436.26" 
    $P2431."finish_static_lexpad"()
    .const 'LexInfo' $P2432 = "388_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 1
    $P2432."set_static_lexpad_value"("$?CLASS", $P114)
    .const 'LexInfo' $P2433 = "388_1338064436.26" 
    $P2433."finish_static_lexpad"()
    .const 'LexInfo' $P2434 = "387_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 23
    $P2434."set_static_lexpad_value"("NQPCursorRole", $P114)
    .const 'LexInfo' $P2435 = "387_1338064436.26" 
    $P2435."finish_static_lexpad"()
    .const '' $P2436 = "31_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 24
    set_sub_code_object $P2436, $P114
    .const '' $P2437 = "32_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 25
    set_sub_code_object $P2437, $P114
    .const '' $P2438 = "33_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 26
    set_sub_code_object $P2438, $P114
    .const '' $P2439 = "34_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 27
    set_sub_code_object $P2439, $P114
    .const '' $P2440 = "35_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 28
    set_sub_code_object $P2440, $P114
    .const '' $P2441 = "36_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 29
    set_sub_code_object $P2441, $P114
    .const '' $P2442 = "37_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 30
    set_sub_code_object $P2442, $P114
    .const '' $P2443 = "38_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 31
    set_sub_code_object $P2443, $P114
    .const '' $P2444 = "39_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 32
    set_sub_code_object $P2444, $P114
    .const '' $P2445 = "40_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 33
    set_sub_code_object $P2445, $P114
    .const '' $P2446 = "41_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 34
    set_sub_code_object $P2446, $P114
    .const '' $P2447 = "42_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 35
    set_sub_code_object $P2447, $P114
    .const '' $P2448 = "43_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 36
    set_sub_code_object $P2448, $P114
    .const '' $P2449 = "44_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 37
    set_sub_code_object $P2449, $P114
    .const '' $P2450 = "45_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 38
    set_sub_code_object $P2450, $P114
    .const '' $P2451 = "46_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 39
    set_sub_code_object $P2451, $P114
    .const '' $P2452 = "47_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 40
    set_sub_code_object $P2452, $P114
    .const '' $P2453 = "48_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 41
    set_sub_code_object $P2453, $P114
    .const '' $P2454 = "49_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 42
    set_sub_code_object $P2454, $P114
    .const '' $P2455 = "50_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 43
    set_sub_code_object $P2455, $P114
    .const '' $P2456 = "51_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 44
    set_sub_code_object $P2456, $P114
    .const '' $P2457 = "52_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 45
    set_sub_code_object $P2457, $P114
    .const '' $P2458 = "53_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 46
    set_sub_code_object $P2458, $P114
    .const '' $P2459 = "54_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 47
    set_sub_code_object $P2459, $P114
    .const '' $P2460 = "55_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 48
    set_sub_code_object $P2460, $P114
    .const '' $P2461 = "56_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 49
    set_sub_code_object $P2461, $P114
    .const '' $P2462 = "57_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 50
    set_sub_code_object $P2462, $P114
    .const '' $P2463 = "58_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 51
    set_sub_code_object $P2463, $P114
    .const '' $P2464 = "59_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 52
    set_sub_code_object $P2464, $P114
    .const '' $P2465 = "60_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 53
    set_sub_code_object $P2465, $P114
    .const '' $P2466 = "61_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 54
    set_sub_code_object $P2466, $P114
    .const '' $P2467 = "62_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 55
    set_sub_code_object $P2467, $P114
    .const '' $P2468 = "63_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 56
    set_sub_code_object $P2468, $P114
    .const '' $P2469 = "64_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 57
    set_sub_code_object $P2469, $P114
    .const '' $P2470 = "65_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 58
    set_sub_code_object $P2470, $P114
    .const '' $P2471 = "66_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 59
    set_sub_code_object $P2471, $P114
    .const '' $P2472 = "67_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 60
    set_sub_code_object $P2472, $P114
    .const '' $P2473 = "68_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 61
    set_sub_code_object $P2473, $P114
    .const 'LexInfo' $P2474 = "68_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 23
    $P2474."set_static_lexpad_value"("$?PACKAGE", $P114)
    .const 'LexInfo' $P2475 = "68_1338064436.26" 
    $P2475."finish_static_lexpad"()
    .const 'LexInfo' $P2476 = "68_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 23
    $P2476."set_static_lexpad_value"("$?ROLE", $P114)
    .const 'LexInfo' $P2477 = "68_1338064436.26" 
    $P2477."finish_static_lexpad"()
    .const 'LexInfo' $P2478 = "387_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 62
    $P2478."set_static_lexpad_value"("NQPMatch", $P114)
    .const 'LexInfo' $P2479 = "387_1338064436.26" 
    $P2479."finish_static_lexpad"()
    .const '' $P2480 = "69_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 63
    set_sub_code_object $P2480, $P114
    .const '' $P2481 = "70_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 64
    set_sub_code_object $P2481, $P114
    .const '' $P2482 = "71_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 65
    set_sub_code_object $P2482, $P114
    .const '' $P2483 = "72_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 66
    set_sub_code_object $P2483, $P114
    .const '' $P2484 = "73_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 67
    set_sub_code_object $P2484, $P114
    .const '' $P2485 = "73_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 68
    set_sub_code_object $P2485, $P114
    .const '' $P2486 = "74_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 69
    set_sub_code_object $P2486, $P114
    .const '' $P2487 = "75_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 70
    set_sub_code_object $P2487, $P114
    .const '' $P2488 = "76_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 71
    set_sub_code_object $P2488, $P114
    .const '' $P2489 = "77_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 72
    set_sub_code_object $P2489, $P114
    .const '' $P2490 = "78_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 73
    set_sub_code_object $P2490, $P114
    .const '' $P2491 = "79_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 74
    set_sub_code_object $P2491, $P114
    .const '' $P2492 = "80_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 75
    set_sub_code_object $P2492, $P114
    .const 'LexInfo' $P2493 = "400_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 62
    $P2493."set_static_lexpad_value"("$?PACKAGE", $P114)
    .const 'LexInfo' $P2494 = "400_1338064436.26" 
    $P2494."finish_static_lexpad"()
    .const 'LexInfo' $P2495 = "400_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 62
    $P2495."set_static_lexpad_value"("$?CLASS", $P114)
    .const 'LexInfo' $P2496 = "400_1338064436.26" 
    $P2496."finish_static_lexpad"()
    .const 'LexInfo' $P2497 = "387_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 76
    $P2497."set_static_lexpad_value"("NQPCursor", $P114)
    .const 'LexInfo' $P2498 = "387_1338064436.26" 
    $P2498."finish_static_lexpad"()
    .const '' $P2499 = "81_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 77
    set_sub_code_object $P2499, $P114
    .const '' $P2500 = "82_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 78
    set_sub_code_object $P2500, $P114
    .const '' $P2501 = "83_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 79
    set_sub_code_object $P2501, $P114
    .const '' $P2502 = "84_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 80
    set_sub_code_object $P2502, $P114
    .const '' $P2503 = "85_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 81
    set_sub_code_object $P2503, $P114
    .const 'LexInfo' $P2504 = "405_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 76
    $P2504."set_static_lexpad_value"("$?PACKAGE", $P114)
    .const 'LexInfo' $P2505 = "405_1338064436.26" 
    $P2505."finish_static_lexpad"()
    .const 'LexInfo' $P2506 = "405_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 76
    $P2506."set_static_lexpad_value"("$?CLASS", $P114)
    .const 'LexInfo' $P2507 = "405_1338064436.26" 
    $P2507."finish_static_lexpad"()
    .const 'LexInfo' $P2508 = "387_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 82
    $P2508."set_static_lexpad_value"("NQPRegexMethod", $P114)
    .const 'LexInfo' $P2509 = "387_1338064436.26" 
    $P2509."finish_static_lexpad"()
    .const '' $P2510 = "383_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 83
    set_sub_code_object $P2510, $P114
    .const '' $P2511 = "384_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 84
    set_sub_code_object $P2511, $P114
    .const '' $P2512 = "385_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 85
    set_sub_code_object $P2512, $P114
    .const '' $P2513 = "385_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 86
    set_sub_code_object $P2513, $P114
    .const 'LexInfo' $P2514 = "417_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 82
    $P2514."set_static_lexpad_value"("$?PACKAGE", $P114)
    .const 'LexInfo' $P2515 = "417_1338064436.26" 
    $P2515."finish_static_lexpad"()
    .const 'LexInfo' $P2516 = "417_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 82
    $P2516."set_static_lexpad_value"("$?CLASS", $P114)
    .const 'LexInfo' $P2517 = "417_1338064436.26" 
    $P2517."finish_static_lexpad"()
    .const 'LexInfo' $P2518 = "387_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 87
    $P2518."set_static_lexpad_value"("NQPRegex", $P114)
    .const 'LexInfo' $P2519 = "387_1338064436.26" 
    $P2519."finish_static_lexpad"()
    .const '' $P2520 = "386_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 88
    set_sub_code_object $P2520, $P114
    .const 'LexInfo' $P2521 = "418_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 87
    $P2521."set_static_lexpad_value"("$?PACKAGE", $P114)
    .const 'LexInfo' $P2522 = "418_1338064436.26" 
    $P2522."finish_static_lexpad"()
    .const 'LexInfo' $P2523 = "418_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 87
    $P2523."set_static_lexpad_value"("$?CLASS", $P114)
    .const 'LexInfo' $P2524 = "418_1338064436.26" 
    $P2524."finish_static_lexpad"()
    .const 'LexInfo' $P2525 = "387_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 89
    $P2525."set_static_lexpad_value"("EXPORT", $P114)
    .const 'LexInfo' $P2526 = "387_1338064436.26" 
    $P2526."finish_static_lexpad"()
    .const 'LexInfo' $P2527 = "419_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 90
    $P2527."set_static_lexpad_value"("DEFAULT", $P114)
    .const 'LexInfo' $P2528 = "419_1338064436.26" 
    $P2528."finish_static_lexpad"()
    .const 'LexInfo' $P2529 = "420_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 90
    $P2529."set_static_lexpad_value"("$?PACKAGE", $P114)
    .const 'LexInfo' $P2530 = "420_1338064436.26" 
    $P2530."finish_static_lexpad"()
    .const 'LexInfo' $P2531 = "420_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 90
    $P2531."set_static_lexpad_value"("$?CLASS", $P114)
    .const 'LexInfo' $P2532 = "420_1338064436.26" 
    $P2532."finish_static_lexpad"()
    .const 'LexInfo' $P2533 = "419_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 89
    $P2533."set_static_lexpad_value"("$?PACKAGE", $P114)
    .const 'LexInfo' $P2534 = "419_1338064436.26" 
    $P2534."finish_static_lexpad"()
    .const 'LexInfo' $P2535 = "419_1338064436.26" 
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 89
    $P2535."set_static_lexpad_value"("$?CLASS", $P114)
    .const 'LexInfo' $P2536 = "419_1338064436.26" 
    $P2536."finish_static_lexpad"()
    nqp_get_sc_object $P114, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 0
    set_hll_global "GLOBAL", $P114
.end


.HLL "nqp"

.namespace []
.sub "_block2323"  :anon :subid("422_1338064436.26") :outer("387_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 0
    .const 'Sub' $P2325 = "10_1338064436.26" 
    .const 'Sub' $P2326 = "11_1338064436.26" 
    .const 'Sub' $P2327 = "12_1338064436.26" 
    .const 'Sub' $P2328 = "13_1338064436.26" 
    .const 'Sub' $P2329 = "14_1338064436.26" 
    .const 'Sub' $P2330 = "15_1338064436.26" 
    .const 'Sub' $P2331 = "16_1338064436.26" 
    .const 'Sub' $P2332 = "17_1338064436.26" 
    .const 'Sub' $P2333 = "18_1338064436.26" 
    .const 'Sub' $P2334 = "19_1338064436.26" 
    .const 'Sub' $P2335 = "20_1338064436.26" 
    .const 'Sub' $P2336 = "21_1338064436.26" 
    .const 'Sub' $P2337 = "22_1338064436.26" 
    .const 'Sub' $P2338 = "23_1338064436.26" 
    .const 'Sub' $P2339 = "24_1338064436.26" 
    .const 'Sub' $P2340 = "25_1338064436.26" 
    .const 'Sub' $P2341 = "26_1338064436.26" 
    .const 'Sub' $P2342 = "27_1338064436.26" 
    .const 'Sub' $P2343 = "28_1338064436.26" 
    .const 'Sub' $P2344 = "29_1338064436.26" 
    .const 'Sub' $P2345 = "30_1338064436.26" 
    .const 'Sub' $P2346 = "31_1338064436.26" 
    .const 'Sub' $P2347 = "32_1338064436.26" 
    .const 'Sub' $P2348 = "33_1338064436.26" 
    .const 'Sub' $P2349 = "34_1338064436.26" 
    .const 'Sub' $P2350 = "35_1338064436.26" 
    .const 'Sub' $P2351 = "36_1338064436.26" 
    .const 'Sub' $P2352 = "37_1338064436.26" 
    .const 'Sub' $P2353 = "38_1338064436.26" 
    .const 'Sub' $P2354 = "39_1338064436.26" 
    .const 'Sub' $P2355 = "40_1338064436.26" 
    .const 'Sub' $P2356 = "41_1338064436.26" 
    .const 'Sub' $P2357 = "42_1338064436.26" 
    .const 'Sub' $P2358 = "43_1338064436.26" 
    .const 'Sub' $P2359 = "44_1338064436.26" 
    .const 'Sub' $P2360 = "45_1338064436.26" 
    .const 'Sub' $P2361 = "46_1338064436.26" 
    .const 'Sub' $P2362 = "47_1338064436.26" 
    .const 'Sub' $P2363 = "48_1338064436.26" 
    .const 'Sub' $P2364 = "49_1338064436.26" 
    .const 'Sub' $P2365 = "50_1338064436.26" 
    .const 'Sub' $P2366 = "51_1338064436.26" 
    .const 'Sub' $P2367 = "52_1338064436.26" 
    .const 'Sub' $P2368 = "53_1338064436.26" 
    .const 'Sub' $P2369 = "54_1338064436.26" 
    .const 'Sub' $P2370 = "55_1338064436.26" 
    .const 'Sub' $P2371 = "56_1338064436.26" 
    .const 'Sub' $P2372 = "57_1338064436.26" 
    .const 'Sub' $P2373 = "58_1338064436.26" 
    .const 'Sub' $P2374 = "59_1338064436.26" 
    .const 'Sub' $P2375 = "60_1338064436.26" 
    .const 'Sub' $P2376 = "61_1338064436.26" 
    .const 'Sub' $P2377 = "62_1338064436.26" 
    .const 'Sub' $P2378 = "63_1338064436.26" 
    .const 'Sub' $P2379 = "64_1338064436.26" 
    .const 'Sub' $P2380 = "65_1338064436.26" 
    .const 'Sub' $P2381 = "66_1338064436.26" 
    .const 'Sub' $P2382 = "67_1338064436.26" 
    .const 'Sub' $P2383 = "68_1338064436.26" 
    .const 'Sub' $P2384 = "69_1338064436.26" 
    .const 'Sub' $P2385 = "70_1338064436.26" 
    .const 'Sub' $P2386 = "71_1338064436.26" 
    .const 'Sub' $P2387 = "72_1338064436.26" 
    .const 'Sub' $P2388 = "73_1338064436.26" 
    .const 'Sub' $P2389 = "74_1338064436.26" 
    .const 'Sub' $P2390 = "75_1338064436.26" 
    .const 'Sub' $P2391 = "76_1338064436.26" 
    .const 'Sub' $P2392 = "77_1338064436.26" 
    .const 'Sub' $P2393 = "78_1338064436.26" 
    .const 'Sub' $P2394 = "79_1338064436.26" 
    .const 'Sub' $P2395 = "80_1338064436.26" 
    .const 'Sub' $P2396 = "81_1338064436.26" 
    .const 'Sub' $P2397 = "82_1338064436.26" 
    .const 'Sub' $P2398 = "83_1338064436.26" 
    .const 'Sub' $P2399 = "84_1338064436.26" 
    .const 'Sub' $P2400 = "85_1338064436.26" 
    .const 'Sub' $P2401 = "383_1338064436.26" 
    .const 'Sub' $P2402 = "384_1338064436.26" 
    .const 'Sub' $P2403 = "385_1338064436.26" 
    .const 'Sub' $P2404 = "386_1338064436.26" 
    new $P112, "ResizablePMCArray"
    push $P112, $P2325
    push $P112, $P2326
    push $P112, $P2327
    push $P112, $P2328
    push $P112, $P2329
    push $P112, $P2330
    push $P112, $P2331
    push $P112, $P2332
    push $P112, $P2333
    push $P112, $P2334
    push $P112, $P2335
    push $P112, $P2336
    push $P112, $P2337
    push $P112, $P2338
    push $P112, $P2339
    push $P112, $P2340
    push $P112, $P2341
    push $P112, $P2342
    push $P112, $P2343
    push $P112, $P2344
    push $P112, $P2345
    push $P112, $P2346
    push $P112, $P2347
    push $P112, $P2348
    push $P112, $P2349
    push $P112, $P2350
    push $P112, $P2351
    push $P112, $P2352
    push $P112, $P2353
    push $P112, $P2354
    push $P112, $P2355
    push $P112, $P2356
    push $P112, $P2357
    push $P112, $P2358
    push $P112, $P2359
    push $P112, $P2360
    push $P112, $P2361
    push $P112, $P2362
    push $P112, $P2363
    push $P112, $P2364
    push $P112, $P2365
    push $P112, $P2366
    push $P112, $P2367
    push $P112, $P2368
    push $P112, $P2369
    push $P112, $P2370
    push $P112, $P2371
    push $P112, $P2372
    push $P112, $P2373
    push $P112, $P2374
    push $P112, $P2375
    push $P112, $P2376
    push $P112, $P2377
    push $P112, $P2378
    push $P112, $P2379
    push $P112, $P2380
    push $P112, $P2381
    push $P112, $P2382
    push $P112, $P2383
    push $P112, $P2384
    push $P112, $P2385
    push $P112, $P2386
    push $P112, $P2387
    push $P112, $P2388
    push $P112, $P2389
    push $P112, $P2390
    push $P112, $P2391
    push $P112, $P2392
    push $P112, $P2393
    push $P112, $P2394
    push $P112, $P2395
    push $P112, $P2396
    push $P112, $P2397
    push $P112, $P2398
    push $P112, $P2399
    push $P112, $P2400
    push $P112, $P2401
    push $P112, $P2402
    push $P112, $P2403
    push $P112, $P2404
    .return ($P112)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1428"  :subid("388_1338064436.26") :outer("387_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 5
    .const 'Sub' $P1692 = "30_1338064436.26" 
    capture_lex $P1692
    .const 'Sub' $P1688 = "29_1338064436.26" 
    capture_lex $P1688
    .const 'Sub' $P1617 = "28_1338064436.26" 
    capture_lex $P1617
    .const 'Sub' $P1607 = "27_1338064436.26" 
    capture_lex $P1607
    .const 'Sub' $P1601 = "26_1338064436.26" 
    capture_lex $P1601
    .const 'Sub' $P1594 = "25_1338064436.26" 
    capture_lex $P1594
    .const 'Sub' $P1551 = "24_1338064436.26" 
    capture_lex $P1551
    .const 'Sub' $P1532 = "23_1338064436.26" 
    capture_lex $P1532
    .const 'Sub' $P1521 = "22_1338064436.26" 
    capture_lex $P1521
    .const 'Sub' $P1513 = "21_1338064436.26" 
    capture_lex $P1513
    .const 'Sub' $P1500 = "20_1338064436.26" 
    capture_lex $P1500
    .const 'Sub' $P1494 = "19_1338064436.26" 
    capture_lex $P1494
    .const 'Sub' $P1488 = "18_1338064436.26" 
    capture_lex $P1488
    .const 'Sub' $P1476 = "17_1338064436.26" 
    capture_lex $P1476
    .const 'Sub' $P1471 = "16_1338064436.26" 
    capture_lex $P1471
    .const 'Sub' $P1461 = "15_1338064436.26" 
    capture_lex $P1461
    .const 'Sub' $P1458 = "14_1338064436.26" 
    capture_lex $P1458
    .const 'Sub' $P1456 = "13_1338064436.26" 
    capture_lex $P1456
    .const 'Sub' $P1445 = "12_1338064436.26" 
    capture_lex $P1445
    .const 'Sub' $P1441 = "11_1338064436.26" 
    capture_lex $P1441
    .const 'Sub' $P1438 = "10_1338064436.26" 
    capture_lex $P1438
    .lex "$?PACKAGE", $P1430
    .lex "$?CLASS", $P1431
.annotate 'line', 74
    box $P100, .CCLASS_ANY
    set $P101, $P1430
    get_who $P102, $P101
    set $P1432, $P102["%cclass_code"]
    unless_null $P1432, vivify_424
    $P1432 = root_new ['parrot';'Hash']
    set $P102["%cclass_code"], $P1432
  vivify_424:
    set $P1432["."], $P100
.annotate 'line', 75
    box $P100, .CCLASS_NUMERIC
    set $P101, $P1430
    get_who $P102, $P101
    set $P1433, $P102["%cclass_code"]
    unless_null $P1433, vivify_425
    $P1433 = root_new ['parrot';'Hash']
    set $P102["%cclass_code"], $P1433
  vivify_425:
    set $P1433["d"], $P100
.annotate 'line', 76
    box $P100, .CCLASS_WHITESPACE
    set $P101, $P1430
    get_who $P102, $P101
    set $P1434, $P102["%cclass_code"]
    unless_null $P1434, vivify_426
    $P1434 = root_new ['parrot';'Hash']
    set $P102["%cclass_code"], $P1434
  vivify_426:
    set $P1434["s"], $P100
.annotate 'line', 77
    box $P100, .CCLASS_WORD
    set $P101, $P1430
    get_who $P102, $P101
    set $P1435, $P102["%cclass_code"]
    unless_null $P1435, vivify_427
    $P1435 = root_new ['parrot';'Hash']
    set $P102["%cclass_code"], $P1435
  vivify_427:
    set $P1435["w"], $P100
.annotate 'line', 78
    box $P100, .CCLASS_NEWLINE
    set $P101, $P1430
    get_who $P102, $P101
    set $P1436, $P102["%cclass_code"]
    unless_null $P1436, vivify_428
    $P1436 = root_new ['parrot';'Hash']
    set $P102["%cclass_code"], $P1436
  vivify_428:
    set $P1436["n"], $P100
.annotate 'line', 79
    box $P100, .CCLASS_NEWLINE
    set $P101, $P1430
    get_who $P102, $P101
    set $P1437, $P102["%cclass_code"]
    unless_null $P1437, vivify_429
    $P1437 = root_new ['parrot';'Hash']
    set $P102["%cclass_code"], $P1437
  vivify_429:
    set $P1437["nl"], $P100
.annotate 'line', 6
    new $P100, "Float"
    assign $P100, 0
    set $P101, $P1430
    get_who $P102, $P101
    set $P102["$EDGE_FATE"], $P100
.annotate 'line', 7
    new $P100, "Float"
    assign $P100, 1
    set $P101, $P1430
    get_who $P102, $P101
    set $P102["$EDGE_EPSILON"], $P100
.annotate 'line', 8
    new $P100, "Float"
    assign $P100, 2
    set $P101, $P1430
    get_who $P102, $P101
    set $P102["$EDGE_CODEPOINT"], $P100
.annotate 'line', 9
    new $P100, "Float"
    assign $P100, 3
    set $P101, $P1430
    get_who $P102, $P101
    set $P102["$EDGE_CODEPOINT_NEG"], $P100
.annotate 'line', 10
    new $P100, "Float"
    assign $P100, 4
    set $P101, $P1430
    get_who $P102, $P101
    set $P102["$EDGE_CHARCLASS"], $P100
.annotate 'line', 11
    new $P100, "Float"
    assign $P100, 5
    set $P101, $P1430
    get_who $P102, $P101
    set $P102["$EDGE_CHARCLASS_NEG"], $P100
.annotate 'line', 12
    new $P100, "Float"
    assign $P100, 6
    set $P101, $P1430
    get_who $P102, $P101
    set $P102["$EDGE_CHARLIST"], $P100
.annotate 'line', 13
    new $P100, "Float"
    assign $P100, 7
    set $P101, $P1430
    get_who $P102, $P101
    set $P102["$EDGE_CHARLIST_NEG"], $P100
.annotate 'line', 14
    new $P100, "Float"
    assign $P100, 8
    set $P101, $P1430
    get_who $P102, $P101
    set $P102["$EDGE_SUBRULE"], $P100
.annotate 'line', 5
    set $P100, $P1430
    get_who $P101, $P100
    set $P1493, $P101["%cclass_code"]
    unless_null $P1493, vivify_475
    $P1493 = root_new ['parrot';'Hash']
  vivify_475:
.annotate 'line', 306
    .const 'Sub' $P1692 = "30_1338064436.26" 
    newclosure $P1702, $P1692
.annotate 'line', 5
    .return ($P1702)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "new" :anon :subid("10_1338064436.26") :outer("388_1338064436.26")
    .param pmc param_1439
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 19
    .lex "self", param_1439
.annotate 'line', 20
    new $P100, "Undef"
    set $P1440, $P100
    .lex "$new", $P1440
    set $P101, param_1439
    nqp_decontainerize $P102, $P101
    new $P103, "ResizablePMCArray"
    $P104 = $P102."bless"($P103 :named("state"))
    set $P1440, $P104
.annotate 'line', 21
    set $P101, $P1440
    unless_null $P101, vivify_430
    new $P101, "Undef"
  vivify_430:
    $P101."addstate"()
.annotate 'line', 22
    set $P101, $P1440
    unless_null $P101, vivify_431
    new $P101, "Undef"
  vivify_431:
    $P101."addstate"()
.annotate 'line', 19
    set $P101, $P1440
    unless_null $P101, vivify_432
    new $P101, "Undef"
  vivify_432:
    .return ($P101)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "addstate" :anon :subid("11_1338064436.26") :outer("388_1338064436.26")
    .param pmc param_1442
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 26
    .lex "self", param_1442
.annotate 'line', 27
    new $P100, "Undef"
    set $P1443, $P100
    .lex "$id", $P1443
    set $P101, param_1442
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 1
    repr_get_attr_obj $P104, $P102, $P103, "$!states", 0
    unless_null $P104, vivify_433
    new $P104, "Undef"
  vivify_433:
    set $N100, $P104
    new $P105, 'Float'
    set $P105, $N100
    set $P1443, $P105
.annotate 'line', 28
    new $P101, "ResizablePMCArray"
    set $P102, $P1443
    unless_null $P102, vivify_434
    new $P102, "Undef"
  vivify_434:
    set $I100, $P102
    set $P103, param_1442
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 1
    repr_get_attr_obj $P1444, $P104, $P105, "$!states", 0
    unless_null $P1444, vivify_435
    $P1444 = root_new ['parrot';'ResizablePMCArray']
    repr_bind_attr_obj $P104, $P105, "$!states", 0, $P1444
  vivify_435:
    set $P1444[$I100], $P101
.annotate 'line', 26
    set $P101, $P1443
    unless_null $P101, vivify_436
    new $P101, "Undef"
  vivify_436:
    .return ($P101)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "addedge" :anon :subid("12_1338064436.26") :outer("388_1338064436.26")
    .param pmc param_1446
    .param pmc param_1447
    .param pmc param_1448
    .param pmc param_1449
    .param pmc param_1450
    .param pmc param_1451 :optional :named("newedge")
    .param int has_param_1451 :opt_flag
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 32
    .lex "self", param_1446
    .lex "$from", param_1447
    .lex "$to", param_1448
    .lex "$action", param_1449
    .lex "$value", param_1450
    if has_param_1451, optparam_437
    new $P100, "Float"
    assign $P100, 1
    set param_1451, $P100
  optparam_437:
    .lex "$newedge", param_1451
.annotate 'line', 35
    new $P101, "Undef"
    set $P1452, $P101
    .lex "$st", $P1452
.annotate 'line', 33
    set $P102, param_1451
    unless_null $P102, vivify_438
    new $P102, "Undef"
  vivify_438:
    unless $P102, if_1453_end
    new $P103, "Float"
    assign $P103, 1
    set $P104, param_1446
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 1
    repr_bind_attr_obj $P105, $P106, "$!edges", 1, $P103
  if_1453_end:
.annotate 'line', 34
    set $P102, param_1448
    unless_null $P102, vivify_439
    new $P102, "Undef"
  vivify_439:
    set $N100, $P102
    set $N101, 0
    islt $I100, $N100, $N101
    unless $I100, if_1454_end
    set $P103, param_1446
    nqp_decontainerize $P104, $P103
    $P105 = $P104."addstate"()
    set param_1448, $P105
  if_1454_end:
.annotate 'line', 35
    set $P102, param_1447
    unless_null $P102, vivify_440
    new $P102, "Undef"
  vivify_440:
    set $I100, $P102
    set $P103, param_1446
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 1
    repr_get_attr_obj $P1455, $P104, $P105, "$!states", 0
    unless_null $P1455, vivify_441
    $P1455 = root_new ['parrot';'ResizablePMCArray']
  vivify_441:
    set $P106, $P1455[$I100]
    unless_null $P106, vivify_442
    new $P106, "Undef"
  vivify_442:
    set $P1452, $P106
.annotate 'line', 36
    set $P102, $P1452
    unless_null $P102, vivify_443
    new $P102, "Undef"
  vivify_443:
    set $P103, param_1449
    unless_null $P103, vivify_444
    new $P103, "Undef"
  vivify_444:
    push $P102, $P103
.annotate 'line', 37
    set $P102, $P1452
    unless_null $P102, vivify_445
    new $P102, "Undef"
  vivify_445:
    set $P103, param_1450
    unless_null $P103, vivify_446
    new $P103, "Undef"
  vivify_446:
    push $P102, $P103
.annotate 'line', 38
    set $P102, $P1452
    unless_null $P102, vivify_447
    new $P102, "Undef"
  vivify_447:
    set $P103, param_1448
    unless_null $P103, vivify_448
    new $P103, "Undef"
  vivify_448:
    add $P104, $P103, 0
    push $P102, $P104
.annotate 'line', 32
    set $P102, param_1448
    unless_null $P102, vivify_449
    new $P102, "Undef"
  vivify_449:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "states" :anon :subid("13_1338064436.26") :outer("388_1338064436.26")
    .param pmc param_1457
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 42
    .lex "self", param_1457
    set $P100, param_1457
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 1
    repr_get_attr_obj $P103, $P101, $P102, "$!states", 0
    unless_null $P103, vivify_450
    new $P103, "Undef"
  vivify_450:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "addnode" :anon :subid("14_1338064436.26") :outer("388_1338064436.26")
    .param pmc param_1459
    .param pmc param_1460
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 44
    .lex "self", param_1459
    .lex "$node", param_1460
.annotate 'line', 45
    set $P100, param_1459
    nqp_decontainerize $P101, $P100
    set $P102, param_1460
    unless_null $P102, vivify_451
    new $P102, "Undef"
  vivify_451:
    $P101."regex_nfa"($P102, 1, 0)
.annotate 'line', 44
    set $P100, param_1459
    nqp_decontainerize $P101, $P100
    .return ($P101)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "regex_nfa" :anon :subid("15_1338064436.26") :outer("388_1338064436.26")
    .param pmc param_1462
    .param pmc param_1463
    .param pmc param_1464
    .param pmc param_1465
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 49
    .lex "self", param_1462
    .lex "$node", param_1463
    .lex "$from", param_1464
    .lex "$to", param_1465
.annotate 'line', 50
    new $P100, "Undef"
    set $P1466, $P100
    .lex "$method", $P1466
    set $P101, param_1463
    unless_null $P101, vivify_452
    new $P101, "Undef"
  vivify_452:
    $P102 = $P101."rxtype"()
    set $P1467, $P102
    defined $I1469, $P1467
    if $I1469, default_1468
    new $P103, "String"
    assign $P103, "concat"
    set $P1467, $P103
  default_1468:
    set $P1466, $P1467
.annotate 'line', 51
    set $P102, param_1462
    nqp_decontainerize $P103, $P102
    get_how $P104, $P103
    set $P105, param_1462
    nqp_decontainerize $P106, $P105
    set $P107, $P1466
    unless_null $P107, vivify_453
    new $P107, "Undef"
  vivify_453:
    $P108 = $P104."can"($P106, $P107)
    if $P108, if_1470
.annotate 'line', 53
    set $P116, param_1462
    nqp_decontainerize $P117, $P116
    set $P118, param_1463
    unless_null $P118, vivify_454
    new $P118, "Undef"
  vivify_454:
    set $P119, param_1464
    unless_null $P119, vivify_455
    new $P119, "Undef"
  vivify_455:
    set $P120, param_1465
    unless_null $P120, vivify_456
    new $P120, "Undef"
  vivify_456:
    $P121 = $P117."fate"($P118, $P119, $P120)
    set $P101, $P121
.annotate 'line', 51
    goto if_1470_end
  if_1470:
.annotate 'line', 52
    set $P109, param_1462
    nqp_decontainerize $P110, $P109
    set $P111, param_1463
    unless_null $P111, vivify_457
    new $P111, "Undef"
  vivify_457:
    set $P112, param_1464
    unless_null $P112, vivify_458
    new $P112, "Undef"
  vivify_458:
    set $P113, param_1465
    unless_null $P113, vivify_459
    new $P113, "Undef"
  vivify_459:
    set $P114, $P1466
    unless_null $P114, vivify_460
    new $P114, "Undef"
  vivify_460:
    set $S100, $P114
    $P115 = $P110.$S100($P111, $P112, $P113)
    set $P101, $P115
  if_1470_end:
.annotate 'line', 49
    .return ($P101)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "fate" :anon :subid("16_1338064436.26") :outer("388_1338064436.26")
    .param pmc param_1472
    .param pmc param_1473
    .param pmc param_1474
    .param pmc param_1475
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 56
    .lex "self", param_1472
    .lex "$node", param_1473
    .lex "$from", param_1474
    .lex "$to", param_1475
.annotate 'line', 57
    set $P100, param_1472
    nqp_decontainerize $P101, $P100
    set $P102, param_1474
    unless_null $P102, vivify_461
    new $P102, "Undef"
  vivify_461:
    find_lex $P103, "$?PACKAGE"
    get_who $P104, $P103
    set $P105, $P104["$EDGE_FATE"]
    unless_null $P105, vivify_462
    new $P105, "Undef"
  vivify_462:
    $P106 = $P101."addedge"($P102, 0, $P105, 0, 0 :named("newedge"))
.annotate 'line', 56
    .return ($P106)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.include "except_types.pasm"
.sub "alt" :anon :subid("17_1338064436.26") :outer("388_1338064436.26")
    .param pmc param_1477
    .param pmc param_1478
    .param pmc param_1479
    .param pmc param_1480
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 60
    .const 'Sub' $P1482 = "389_1338064436.26" 
    capture_lex $P1482
    .lex "self", param_1477
    .lex "$node", param_1478
    .lex "$from", param_1479
    .lex "$to", param_1480
.annotate 'line', 61
    set $P101, param_1478
    unless_null $P101, vivify_463
    new $P101, "Undef"
  vivify_463:
    $P102 = $P101."list"()
    defined $I100, $P102
    unless $I100, for_undef_464
    iter $P100, $P102
    new $P106, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P106, loop1487_handler
    push_eh $P106
  loop1487_test:
    unless $P100, loop1487_done
    shift $P103, $P100
  loop1487_redo:
    .const 'Sub' $P1482 = "389_1338064436.26" 
    capture_lex $P1482
    $P1482($P103)
  loop1487_next:
    goto loop1487_test
  loop1487_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P107, exception, 'type'
    eq $P107, .CONTROL_LOOP_NEXT, loop1487_next
    eq $P107, .CONTROL_LOOP_REDO, loop1487_redo
  loop1487_done:
    pop_eh 
  for_undef_464:
.annotate 'line', 60
    set $P100, param_1480
    unless_null $P100, vivify_471
    new $P100, "Undef"
  vivify_471:
    .return ($P100)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1481"  :anon :subid("389_1338064436.26") :outer("17_1338064436.26")
    .param pmc param_1484
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 62
    new $P104, "Undef"
    set $P1483, $P104
    .lex "$st", $P1483
    .lex "$_", param_1484
    find_lex $P105, "self"
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$_"
    unless_null $P107, vivify_465
    new $P107, "Undef"
  vivify_465:
    find_lex $P108, "$from"
    unless_null $P108, vivify_466
    new $P108, "Undef"
  vivify_466:
    find_lex $P109, "$to"
    unless_null $P109, vivify_467
    new $P109, "Undef"
  vivify_467:
    $P110 = $P106."regex_nfa"($P107, $P108, $P109)
    set $P1483, $P110
.annotate 'line', 63
    find_lex $P107, "$to"
    unless_null $P107, vivify_468
    new $P107, "Undef"
  vivify_468:
    set $N100, $P107
    set $N101, 0
    islt $I101, $N100, $N101
    if $I101, if_1486
    new $P106, 'Integer'
    set $P106, $I101
    goto if_1486_end
  if_1486:
    set $P108, $P1483
    unless_null $P108, vivify_469
    new $P108, "Undef"
  vivify_469:
    set $N102, $P108
    set $N103, 0
    isgt $I102, $N102, $N103
    new $P106, 'Integer'
    set $P106, $I102
  if_1486_end:
    if $P106, if_1485
    set $P105, $P106
    goto if_1485_end
  if_1485:
    set $P109, $P1483
    unless_null $P109, vivify_470
    new $P109, "Undef"
  vivify_470:
    store_lex "$to", $P109
    set $P105, $P109
  if_1485_end:
.annotate 'line', 61
    .return ($P105)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "anchor" :anon :subid("18_1338064436.26") :outer("388_1338064436.26")
    .param pmc param_1489
    .param pmc param_1490
    .param pmc param_1491
    .param pmc param_1492
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 68
    .lex "self", param_1489
    .lex "$node", param_1490
    .lex "$from", param_1491
    .lex "$to", param_1492
.annotate 'line', 69
    set $P100, param_1489
    nqp_decontainerize $P101, $P100
    set $P102, param_1491
    unless_null $P102, vivify_472
    new $P102, "Undef"
  vivify_472:
    set $P103, param_1492
    unless_null $P103, vivify_473
    new $P103, "Undef"
  vivify_473:
    find_lex $P104, "$?PACKAGE"
    get_who $P105, $P104
    set $P106, $P105["$EDGE_EPSILON"]
    unless_null $P106, vivify_474
    new $P106, "Undef"
  vivify_474:
    $P107 = $P101."addedge"($P102, $P103, $P106, 0)
.annotate 'line', 68
    .return ($P107)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "cclass" :anon :subid("19_1338064436.26") :outer("388_1338064436.26")
    .param pmc param_1495
    .param pmc param_1496
    .param pmc param_1497
    .param pmc param_1498
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 82
    .lex "self", param_1495
    .lex "$node", param_1496
    .lex "$from", param_1497
    .lex "$to", param_1498
.annotate 'line', 83
    set $P100, param_1495
    nqp_decontainerize $P101, $P100
    set $P102, param_1497
    unless_null $P102, vivify_476
    new $P102, "Undef"
  vivify_476:
    set $P103, param_1498
    unless_null $P103, vivify_477
    new $P103, "Undef"
  vivify_477:
    find_lex $P104, "$?PACKAGE"
    get_who $P105, $P104
    set $P106, $P105["$EDGE_CHARCLASS"]
    unless_null $P106, vivify_478
    new $P106, "Undef"
  vivify_478:
    set $P107, param_1496
    unless_null $P107, vivify_479
    new $P107, "Undef"
  vivify_479:
    $P108 = $P107."negate"()
    istrue $I100, $P108
    add $P109, $P106, $I100
.annotate 'line', 84
    set $P110, param_1496
    unless_null $P110, vivify_480
    new $P110, "Undef"
  vivify_480:
    $S100 = $P110."subtype"()
    downcase $S101, $S100
    find_lex $P111, "$?PACKAGE"
    get_who $P112, $P111
    set $P1499, $P112["%cclass_code"]
    unless_null $P1499, vivify_481
    $P1499 = root_new ['parrot';'Hash']
  vivify_481:
    set $P113, $P1499[$S101]
    unless_null $P113, vivify_482
    new $P113, "Undef"
  vivify_482:
.annotate 'line', 83
    $P114 = $P101."addedge"($P102, $P103, $P109, $P113)
.annotate 'line', 82
    .return ($P114)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.include "except_types.pasm"
.sub "concat" :anon :subid("20_1338064436.26") :outer("388_1338064436.26")
    .param pmc param_1501
    .param pmc param_1502
    .param pmc param_1503
    .param pmc param_1504
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 87
    .lex "self", param_1501
    .lex "$node", param_1502
    .lex "$from", param_1503
    .lex "$to", param_1504
.annotate 'line', 88
    new $P100, "Undef"
    set $P1505, $P100
    .lex "$i", $P1505
.annotate 'line', 89
    new $P101, "Undef"
    set $P1506, $P101
    .lex "$n", $P1506
.annotate 'line', 88
    new $P102, "Float"
    assign $P102, 0
    set $P1505, $P102
.annotate 'line', 89
    set $P102, param_1502
    unless_null $P102, vivify_483
    new $P102, "Undef"
  vivify_483:
    $P103 = $P102."list"()
    set $N100, $P103
    new $P104, 'Float'
    set $P104, $N100
    sub $P105, $P104, 1
    set $P1506, $P105
.annotate 'line', 90
    new $P106, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P106, loop1509_handler
    push_eh $P106
  loop1509_test:
    set $P103, param_1503
    unless_null $P103, vivify_484
    new $P103, "Undef"
  vivify_484:
    set $N100, $P103
    set $N101, 0
    isgt $I100, $N100, $N101
    if $I100, if_1507
    new $P102, 'Integer'
    set $P102, $I100
    goto if_1507_end
  if_1507:
    set $P104, $P1505
    unless_null $P104, vivify_485
    new $P104, "Undef"
  vivify_485:
    set $N102, $P104
    set $P105, $P1506
    unless_null $P105, vivify_486
    new $P105, "Undef"
  vivify_486:
    set $N103, $P105
    islt $I101, $N102, $N103
    new $P102, 'Integer'
    set $P102, $I101
  if_1507_end:
    unless $P102, loop1509_done
  loop1509_redo:
.annotate 'line', 91
    set $P106, param_1501
    nqp_decontainerize $P107, $P106
    set $P108, $P1505
    unless_null $P108, vivify_487
    new $P108, "Undef"
  vivify_487:
    set $I102, $P108
    set $P1508, param_1502
    unless_null $P1508, vivify_488
    $P1508 = root_new ['parrot';'ResizablePMCArray']
  vivify_488:
    set $P109, $P1508[$I102]
    unless_null $P109, vivify_489
    new $P109, "Undef"
  vivify_489:
    set $P110, param_1503
    unless_null $P110, vivify_490
    new $P110, "Undef"
  vivify_490:
    $P111 = $P107."regex_nfa"($P109, $P110, -1)
    set param_1503, $P111
.annotate 'line', 92
    set $P106, $P1505
    unless_null $P106, vivify_491
    new $P106, "Undef"
  vivify_491:
    add $P107, $P106, 1
    set $P1505, $P107
  loop1509_next:
.annotate 'line', 90
    goto loop1509_test
  loop1509_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P107, exception, 'type'
    eq $P107, .CONTROL_LOOP_NEXT, loop1509_next
    eq $P107, .CONTROL_LOOP_REDO, loop1509_redo
  loop1509_done:
    pop_eh 
.annotate 'line', 94
    set $P104, param_1503
    unless_null $P104, vivify_492
    new $P104, "Undef"
  vivify_492:
    set $N100, $P104
    set $N101, 0
    isgt $I100, $N100, $N101
    if $I100, if_1511
    new $P103, 'Integer'
    set $P103, $I100
    goto if_1511_end
  if_1511:
    set $P105, $P1506
    unless_null $P105, vivify_493
    new $P105, "Undef"
  vivify_493:
    set $N102, $P105
    set $N103, 0
    isge $I101, $N102, $N103
    new $P103, 'Integer'
    set $P103, $I101
  if_1511_end:
    if $P103, if_1510
    set $P113, param_1504
    unless_null $P113, vivify_494
    new $P113, "Undef"
  vivify_494:
    set $P102, $P113
    goto if_1510_end
  if_1510:
    set $P106, param_1501
    nqp_decontainerize $P107, $P106
    set $P108, $P1505
    unless_null $P108, vivify_495
    new $P108, "Undef"
  vivify_495:
    set $I102, $P108
    set $P1512, param_1502
    unless_null $P1512, vivify_496
    $P1512 = root_new ['parrot';'ResizablePMCArray']
  vivify_496:
    set $P109, $P1512[$I102]
    unless_null $P109, vivify_497
    new $P109, "Undef"
  vivify_497:
    set $P110, param_1503
    unless_null $P110, vivify_498
    new $P110, "Undef"
  vivify_498:
    set $P111, param_1504
    unless_null $P111, vivify_499
    new $P111, "Undef"
  vivify_499:
    $P112 = $P107."regex_nfa"($P109, $P110, $P111)
    set $P102, $P112
  if_1510_end:
.annotate 'line', 87
    .return ($P102)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "enumcharlist" :anon :subid("21_1338064436.26") :outer("388_1338064436.26")
    .param pmc param_1514
    .param pmc param_1515
    .param pmc param_1516
    .param pmc param_1517
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 97
    .lex "self", param_1514
    .lex "$node", param_1515
    .lex "$from", param_1516
    .lex "$to", param_1517
.annotate 'line', 98
    new $P100, "Undef"
    set $P1518, $P100
    .lex "$charlist", $P1518
    set $P1519, param_1515
    unless_null $P1519, vivify_500
    $P1519 = root_new ['parrot';'ResizablePMCArray']
  vivify_500:
    set $P101, $P1519[0]
    unless_null $P101, vivify_501
    new $P101, "Undef"
  vivify_501:
    set $P1518, $P101
.annotate 'line', 99
    set $P102, param_1515
    unless_null $P102, vivify_502
    new $P102, "Undef"
  vivify_502:
    $S100 = $P102."subtype"()
    iseq $I100, $S100, "zerowidth"
    if $I100, if_1520
.annotate 'line', 104
    set $P103, param_1514
    nqp_decontainerize $P104, $P103
    set $P105, param_1516
    unless_null $P105, vivify_503
    new $P105, "Undef"
  vivify_503:
    set $P106, param_1517
    unless_null $P106, vivify_504
    new $P106, "Undef"
  vivify_504:
    find_lex $P107, "$?PACKAGE"
    get_who $P108, $P107
    set $P110, $P108["$EDGE_CHARLIST"]
    unless_null $P110, vivify_505
    new $P110, "Undef"
  vivify_505:
    set $P111, param_1515
    unless_null $P111, vivify_506
    new $P111, "Undef"
  vivify_506:
    $P112 = $P111."negate"()
    istrue $I101, $P112
    add $P113, $P110, $I101
    set $P114, $P1518
    unless_null $P114, vivify_507
    new $P114, "Undef"
  vivify_507:
    $P115 = $P104."addedge"($P105, $P106, $P113, $P114)
.annotate 'line', 103
    set $P101, $P115
.annotate 'line', 99
    goto if_1520_end
  if_1520:
.annotate 'line', 100
    set $P103, param_1514
    nqp_decontainerize $P104, $P103
    set $P105, param_1516
    unless_null $P105, vivify_508
    new $P105, "Undef"
  vivify_508:
    find_lex $P106, "$?PACKAGE"
    get_who $P107, $P106
    set $P108, $P107["$EDGE_CHARLIST"]
    unless_null $P108, vivify_509
    new $P108, "Undef"
  vivify_509:
    set $P109, param_1515
    unless_null $P109, vivify_510
    new $P109, "Undef"
  vivify_510:
    $P110 = $P109."negate"()
    istrue $I101, $P110
    add $P111, $P108, $I101
    set $P112, $P1518
    unless_null $P112, vivify_511
    new $P112, "Undef"
  vivify_511:
    $P113 = $P104."addedge"($P105, -1, $P111, $P112)
    set param_1516, $P113
.annotate 'line', 101
    set $P103, param_1514
    nqp_decontainerize $P104, $P103
    set $P105, param_1516
    unless_null $P105, vivify_512
    new $P105, "Undef"
  vivify_512:
    find_lex $P106, "$?PACKAGE"
    get_who $P107, $P106
    set $P108, $P107["$EDGE_FATE"]
    unless_null $P108, vivify_513
    new $P108, "Undef"
  vivify_513:
    $P109 = $P104."addedge"($P105, 0, $P108, 0)
.annotate 'line', 99
    set $P101, $P109
  if_1520_end:
.annotate 'line', 97
    .return ($P101)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.include "except_types.pasm"
.sub "literal" :anon :subid("22_1338064436.26") :outer("388_1338064436.26")
    .param pmc param_1522
    .param pmc param_1523
    .param pmc param_1524
    .param pmc param_1525
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 108
    .lex "self", param_1522
    .lex "$node", param_1523
    .lex "$from", param_1524
    .lex "$to", param_1525
.annotate 'line', 109
    new $P100, "Undef"
    set $P1526, $P100
    .lex "$litconst", $P1526
.annotate 'line', 110
    new $P101, "Undef"
    set $P1527, $P101
    .lex "$litlen", $P1527
.annotate 'line', 111
    new $P102, "Undef"
    set $P1528, $P102
    .lex "$i", $P1528
.annotate 'line', 109
    set $P1529, param_1523
    unless_null $P1529, vivify_514
    $P1529 = root_new ['parrot';'ResizablePMCArray']
  vivify_514:
    set $P103, $P1529[0]
    unless_null $P103, vivify_515
    new $P103, "Undef"
  vivify_515:
    set $P1526, $P103
.annotate 'line', 110
    set $P103, $P1526
    unless_null $P103, vivify_516
    new $P103, "Undef"
  vivify_516:
    set $S100, $P103
    length $I100, $S100
    new $P104, 'Integer'
    set $P104, $I100
    sub $P105, $P104, 1
    set $P1527, $P105
.annotate 'line', 111
    new $P103, "Float"
    assign $P103, 0
    set $P1528, $P103
.annotate 'line', 112
    set $P104, $P1527
    unless_null $P104, vivify_517
    new $P104, "Undef"
  vivify_517:
    set $N100, $P104
    set $N101, 0
    isge $I100, $N100, $N101
    if $I100, if_1530
.annotate 'line', 120
    set $P105, param_1522
    nqp_decontainerize $P106, $P105
    set $P107, param_1524
    unless_null $P107, vivify_518
    new $P107, "Undef"
  vivify_518:
    set $P108, param_1525
    unless_null $P108, vivify_519
    new $P108, "Undef"
  vivify_519:
    find_lex $P109, "$?PACKAGE"
    get_who $P110, $P109
    set $P111, $P110["$EDGE_EPSILON"]
    unless_null $P111, vivify_520
    new $P111, "Undef"
  vivify_520:
    $P112 = $P106."addedge"($P107, $P108, $P111, 0)
.annotate 'line', 119
    set $P103, $P112
.annotate 'line', 112
    goto if_1530_end
  if_1530:
.annotate 'line', 113
    new $P107, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P107, loop1531_handler
    push_eh $P107
  loop1531_test:
    set $P105, $P1528
    unless_null $P105, vivify_521
    new $P105, "Undef"
  vivify_521:
    set $N102, $P105
    set $P106, $P1527
    unless_null $P106, vivify_522
    new $P106, "Undef"
  vivify_522:
    set $N103, $P106
    islt $I101, $N102, $N103
    unless $I101, loop1531_done
  loop1531_redo:
.annotate 'line', 114
    set $P107, param_1522
    nqp_decontainerize $P108, $P107
    set $P109, param_1524
    unless_null $P109, vivify_523
    new $P109, "Undef"
  vivify_523:
    find_lex $P110, "$?PACKAGE"
    get_who $P111, $P110
    set $P112, $P111["$EDGE_CODEPOINT"]
    unless_null $P112, vivify_524
    new $P112, "Undef"
  vivify_524:
    set $P113, $P1526
    unless_null $P113, vivify_525
    new $P113, "Undef"
  vivify_525:
    set $S100, $P113
    set $P114, $P1528
    unless_null $P114, vivify_526
    new $P114, "Undef"
  vivify_526:
    set $I102, $P114
    ord $I103, $S100, $I102
    $P115 = $P108."addedge"($P109, -1, $P112, $I103)
    set param_1524, $P115
.annotate 'line', 115
    set $P107, $P1528
    unless_null $P107, vivify_527
    new $P107, "Undef"
  vivify_527:
    add $P108, $P107, 1
    set $P1528, $P108
  loop1531_next:
.annotate 'line', 113
    goto loop1531_test
  loop1531_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P108, exception, 'type'
    eq $P108, .CONTROL_LOOP_NEXT, loop1531_next
    eq $P108, .CONTROL_LOOP_REDO, loop1531_redo
  loop1531_done:
    pop_eh 
.annotate 'line', 117
    set $P105, param_1522
    nqp_decontainerize $P106, $P105
    set $P107, param_1524
    unless_null $P107, vivify_528
    new $P107, "Undef"
  vivify_528:
    set $P108, param_1525
    unless_null $P108, vivify_529
    new $P108, "Undef"
  vivify_529:
    find_lex $P109, "$?PACKAGE"
    get_who $P110, $P109
    set $P111, $P110["$EDGE_CODEPOINT"]
    unless_null $P111, vivify_530
    new $P111, "Undef"
  vivify_530:
    set $P112, $P1526
    unless_null $P112, vivify_531
    new $P112, "Undef"
  vivify_531:
    set $S100, $P112
    set $P113, $P1528
    unless_null $P113, vivify_532
    new $P113, "Undef"
  vivify_532:
    set $I101, $P113
    ord $I102, $S100, $I101
    $P114 = $P106."addedge"($P107, $P108, $P111, $I102)
.annotate 'line', 112
    set $P103, $P114
  if_1530_end:
.annotate 'line', 108
    .return ($P103)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "subrule" :anon :subid("23_1338064436.26") :outer("388_1338064436.26")
    .param pmc param_1533
    .param pmc param_1534
    .param pmc param_1535
    .param pmc param_1536
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 124
    .lex "self", param_1533
    .lex "$node", param_1534
    .lex "$from", param_1535
    .lex "$to", param_1536
.annotate 'line', 125
    new $P100, "Undef"
    set $P1537, $P100
    .lex "$subtype", $P1537
    set $P101, param_1534
    unless_null $P101, vivify_533
    new $P101, "Undef"
  vivify_533:
    $P102 = $P101."subtype"()
    set $P1537, $P102
.annotate 'line', 126
    set $P103, param_1534
    unless_null $P103, vivify_534
    new $P103, "Undef"
  vivify_534:
    $S100 = $P103."name"()
    iseq $I100, $S100, "before"
    if $I100, if_1539
    new $P102, 'Integer'
    set $P102, $I100
    goto if_1539_end
  if_1539:
    set $P104, param_1534
    unless_null $P104, vivify_535
    new $P104, "Undef"
  vivify_535:
    $P105 = $P104."negate"()
    isfalse $I101, $P105
    new $P102, 'Integer'
    set $P102, $I101
  if_1539_end:
    if $P102, if_1538
.annotate 'line', 129
    set $P107, $P1537
    unless_null $P107, vivify_536
    new $P107, "Undef"
  vivify_536:
    set $S101, $P107
    iseq $I102, $S101, "zerowidth"
    if $I102, if_1543
.annotate 'line', 135
    set $P112, $P1537
    unless_null $P112, vivify_537
    new $P112, "Undef"
  vivify_537:
    set $S102, $P112
    iseq $I103, $S102, "capture"
    if $I103, if_1546
    new $P111, 'Integer'
    set $P111, $I103
    goto if_1546_end
  if_1546:
    set $P1547, param_1534
    unless_null $P1547, vivify_538
    $P1547 = root_new ['parrot';'ResizablePMCArray']
  vivify_538:
    set $P113, $P1547[1]
    unless_null $P113, vivify_539
    new $P113, "Undef"
  vivify_539:
    set $P111, $P113
  if_1546_end:
    if $P111, if_1545
.annotate 'line', 137
    set $P120, param_1533
    nqp_decontainerize $P121, $P120
    set $P122, param_1535
    unless_null $P122, vivify_540
    new $P122, "Undef"
  vivify_540:
    set $P123, param_1536
    unless_null $P123, vivify_541
    new $P123, "Undef"
  vivify_541:
    find_lex $P124, "$?PACKAGE"
    get_who $P125, $P124
    set $P126, $P125["$EDGE_SUBRULE"]
    unless_null $P126, vivify_542
    new $P126, "Undef"
  vivify_542:
    set $P1549, param_1534
    unless_null $P1549, vivify_543
    $P1549 = root_new ['parrot';'ResizablePMCArray']
  vivify_543:
    set $P1550, $P1549[0]
    unless_null $P1550, vivify_544
    $P1550 = root_new ['parrot';'ResizablePMCArray']
  vivify_544:
    set $P127, $P1550[0]
    unless_null $P127, vivify_545
    new $P127, "Undef"
  vivify_545:
    $P128 = $P121."addedge"($P122, $P123, $P126, $P127)
    set $P109, $P128
.annotate 'line', 135
    goto if_1545_end
  if_1545:
.annotate 'line', 136
    set $P114, param_1533
    nqp_decontainerize $P115, $P114
    set $P1548, param_1534
    unless_null $P1548, vivify_546
    $P1548 = root_new ['parrot';'ResizablePMCArray']
  vivify_546:
    set $P116, $P1548[1]
    unless_null $P116, vivify_547
    new $P116, "Undef"
  vivify_547:
    set $P117, param_1535
    unless_null $P117, vivify_548
    new $P117, "Undef"
  vivify_548:
    set $P118, param_1536
    unless_null $P118, vivify_549
    new $P118, "Undef"
  vivify_549:
    $P119 = $P115."regex_nfa"($P116, $P117, $P118)
    set $P109, $P119
  if_1545_end:
.annotate 'line', 134
    set $P106, $P109
.annotate 'line', 129
    goto if_1543_end
  if_1543:
.annotate 'line', 130
    set $P109, param_1534
    unless_null $P109, vivify_550
    new $P109, "Undef"
  vivify_550:
    $P111 = $P109."negate"()
    if $P111, if_1544
.annotate 'line', 132
    set $P118, param_1533
    nqp_decontainerize $P119, $P118
    set $P120, param_1535
    unless_null $P120, vivify_551
    new $P120, "Undef"
  vivify_551:
    find_lex $P121, "$?PACKAGE"
    get_who $P122, $P121
    set $P123, $P122["$EDGE_SUBRULE"]
    unless_null $P123, vivify_552
    new $P123, "Undef"
  vivify_552:
    set $P124, param_1534
    unless_null $P124, vivify_553
    new $P124, "Undef"
  vivify_553:
    $P125 = $P124."name"()
    $P126 = $P119."addedge"($P120, 0, $P123, $P125)
    set $P108, $P126
.annotate 'line', 130
    goto if_1544_end
  if_1544:
.annotate 'line', 131
    set $P112, param_1533
    nqp_decontainerize $P113, $P112
    set $P114, param_1534
    unless_null $P114, vivify_554
    new $P114, "Undef"
  vivify_554:
    set $P115, param_1535
    unless_null $P115, vivify_555
    new $P115, "Undef"
  vivify_555:
    set $P116, param_1536
    unless_null $P116, vivify_556
    new $P116, "Undef"
  vivify_556:
    $P117 = $P113."fate"($P114, $P115, $P116)
    set $P108, $P117
  if_1544_end:
.annotate 'line', 129
    set $P106, $P108
  if_1543_end:
    set $P101, $P106
.annotate 'line', 126
    goto if_1538_end
  if_1538:
.annotate 'line', 127
    set $P106, param_1533
    nqp_decontainerize $P107, $P106
    set $P1540, param_1534
    unless_null $P1540, vivify_557
    $P1540 = root_new ['parrot';'ResizablePMCArray']
  vivify_557:
    set $P1541, $P1540[0]
    unless_null $P1541, vivify_558
    $P1541 = root_new ['parrot';'ResizablePMCArray']
  vivify_558:
    set $P1542, $P1541[1]
    unless_null $P1542, vivify_559
    $P1542 = root_new ['parrot';'Hash']
  vivify_559:
    set $P108, $P1542["orig_qast"]
    unless_null $P108, vivify_560
    new $P108, "Undef"
  vivify_560:
    set $P109, param_1535
    unless_null $P109, vivify_561
    new $P109, "Undef"
  vivify_561:
    $P110 = $P107."regex_nfa"($P108, $P109, 0)
.annotate 'line', 126
    set $P101, $P110
  if_1538_end:
.annotate 'line', 124
    .return ($P101)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.include "except_types.pasm"
.sub "quant" :anon :subid("24_1338064436.26") :outer("388_1338064436.26")
    .param pmc param_1554
    .param pmc param_1555
    .param pmc param_1556
    .param pmc param_1557
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 141
    .const 'Sub' $P1587 = "392_1338064436.26" 
    capture_lex $P1587
    .const 'Sub' $P1577 = "391_1338064436.26" 
    capture_lex $P1577
    .const 'Sub' $P1571 = "390_1338064436.26" 
    capture_lex $P1571
    new $P1553, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1553, control_1552
    push_eh $P1553
    .lex "self", param_1554
    .lex "$node", param_1555
    .lex "$from", param_1556
    .lex "$to", param_1557
.annotate 'line', 142
    new $P100, "Undef"
    set $P1558, $P100
    .lex "$min", $P1558
.annotate 'line', 143
    new $P101, "Undef"
    set $P1559, $P101
    .lex "$max", $P1559
.annotate 'line', 142
    new $P102, "Float"
    assign $P102, 0
    set $P103, param_1555
    unless_null $P103, vivify_562
    new $P103, "Undef"
  vivify_562:
    $P104 = $P103."min"()
    set $P1560, $P104
    defined $I1562, $P1560
    if $I1562, default_1561
    new $P105, "Float"
    assign $P105, 0
    set $P1560, $P105
  default_1561:
    add $P106, $P102, $P1560
    set $P1558, $P106
.annotate 'line', 143
    new $P102, "Float"
    assign $P102, 0
    set $P103, param_1555
    unless_null $P103, vivify_563
    new $P103, "Undef"
  vivify_563:
    $P104 = $P103."max"()
    set $P1563, $P104
    defined $I1565, $P1563
    if $I1565, default_1564
    new $P105, "Float"
    assign $P105, -1
    set $P1563, $P105
  default_1564:
    add $P106, $P102, $P1563
    set $P1559, $P106
.annotate 'line', 146
    set $P103, $P1559
    unless_null $P103, vivify_564
    new $P103, "Undef"
  vivify_564:
    set $N100, $P103
    set $N101, 1
    isgt $I100, $N100, $N101
    unless $I100, unless_1567
    new $P102, 'Integer'
    set $P102, $I100
    goto unless_1567_end
  unless_1567:
    set $P104, $P1558
    unless_null $P104, vivify_565
    new $P104, "Undef"
  vivify_565:
    set $N102, $P104
    set $N103, 1
    isgt $I101, $N102, $N103
    new $P102, 'Integer'
    set $P102, $I101
  unless_1567_end:
    unless $P102, if_1566_end
    new $P105, "Exception"
    set $P105['type'], .CONTROL_RETURN
    set $P106, param_1554
    nqp_decontainerize $P107, $P106
    set $P108, param_1555
    unless_null $P108, vivify_566
    new $P108, "Undef"
  vivify_566:
    set $P109, param_1556
    unless_null $P109, vivify_567
    new $P109, "Undef"
  vivify_567:
    set $P110, param_1557
    unless_null $P110, vivify_568
    new $P110, "Undef"
  vivify_568:
    $P111 = $P107."fate"($P108, $P109, $P110)
    setattribute $P105, 'payload', $P111
    throw $P105
  if_1566_end:
.annotate 'line', 147
    set $P103, $P1559
    unless_null $P103, vivify_569
    new $P103, "Undef"
  vivify_569:
    set $N100, $P103
    set $N101, -1
    iseq $I100, $N100, $N101
    if $I100, if_1568
.annotate 'line', 162
    set $P107, $P1558
    unless_null $P107, vivify_570
    new $P107, "Undef"
  vivify_570:
    set $N102, $P107
    set $N103, 0
    iseq $I101, $N102, $N103
    if $I101, if_1585
    new $P106, 'Integer'
    set $P106, $I101
    goto if_1585_end
  if_1585:
    set $P108, $P1559
    unless_null $P108, vivify_571
    new $P108, "Undef"
  vivify_571:
    set $N104, $P108
    set $N105, 1
    iseq $I102, $N104, $N105
    new $P106, 'Integer'
    set $P106, $I102
  if_1585_end:
    if $P106, if_1584
.annotate 'line', 169
    set $P112, param_1554
    nqp_decontainerize $P113, $P112
    set $P114, param_1555
    unless_null $P114, vivify_572
    new $P114, "Undef"
  vivify_572:
    set $P115, param_1556
    unless_null $P115, vivify_573
    new $P115, "Undef"
  vivify_573:
    set $P116, param_1557
    unless_null $P116, vivify_574
    new $P116, "Undef"
  vivify_574:
    $P117 = $P113."fate"($P114, $P115, $P116)
.annotate 'line', 168
    set $P105, $P117
.annotate 'line', 162
    goto if_1584_end
  if_1584:
    .const 'Sub' $P1587 = "392_1338064436.26" 
    capture_lex $P1587
    $P111 = $P1587()
    set $P105, $P111
  if_1584_end:
    set $P102, $P105
.annotate 'line', 147
    goto if_1568_end
  if_1568:
.annotate 'line', 148
    set $P104, $P1558
    unless_null $P104, vivify_589
    new $P104, "Undef"
  vivify_589:
    set $N102, $P104
    set $N103, 0
    iseq $I101, $N102, $N103
    if $I101, if_1569
.annotate 'line', 152
    .const 'Sub' $P1577 = "391_1338064436.26" 
    capture_lex $P1577
    $P1577()
    goto if_1569_end
  if_1569:
.annotate 'line', 148
    .const 'Sub' $P1571 = "390_1338064436.26" 
    capture_lex $P1571
    $P1571()
  if_1569_end:
.annotate 'line', 147
    set $P104, param_1557
    unless_null $P104, vivify_616
    new $P104, "Undef"
  vivify_616:
    set $P102, $P104
  if_1568_end:
.annotate 'line', 141
    .return ($P102)
  control_1552:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P103, exception, "payload"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1586"  :anon :subid("392_1338064436.26") :outer("24_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 163
    new $P109, "Undef"
    set $P1588, $P109
    .lex "$st", $P1588
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    find_lex $P1589, "$node"
    unless_null $P1589, vivify_575
    $P1589 = root_new ['parrot';'ResizablePMCArray']
  vivify_575:
    set $P112, $P1589[0]
    unless_null $P112, vivify_576
    new $P112, "Undef"
  vivify_576:
    find_lex $P113, "$from"
    unless_null $P113, vivify_577
    new $P113, "Undef"
  vivify_577:
    find_lex $P114, "$to"
    unless_null $P114, vivify_578
    new $P114, "Undef"
  vivify_578:
    $P115 = $P111."regex_nfa"($P112, $P113, $P114)
    set $P1588, $P115
.annotate 'line', 164
    find_lex $P111, "$to"
    unless_null $P111, vivify_579
    new $P111, "Undef"
  vivify_579:
    set $N106, $P111
    set $N107, 0
    islt $I103, $N106, $N107
    if $I103, if_1591
    new $P110, 'Integer'
    set $P110, $I103
    goto if_1591_end
  if_1591:
    set $P112, $P1588
    unless_null $P112, vivify_580
    new $P112, "Undef"
  vivify_580:
    set $N108, $P112
    set $N109, 0
    isgt $I104, $N108, $N109
    new $P110, 'Integer'
    set $P110, $I104
  if_1591_end:
    unless $P110, if_1590_end
    set $P113, $P1588
    unless_null $P113, vivify_581
    new $P113, "Undef"
  vivify_581:
    store_lex "$to", $P113
  if_1590_end:
.annotate 'line', 165
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$from"
    unless_null $P112, vivify_582
    new $P112, "Undef"
  vivify_582:
    find_lex $P113, "$to"
    unless_null $P113, vivify_583
    new $P113, "Undef"
  vivify_583:
    find_lex $P114, "$?PACKAGE"
    get_who $P115, $P114
    set $P116, $P115["$EDGE_EPSILON"]
    unless_null $P116, vivify_584
    new $P116, "Undef"
  vivify_584:
    $P117 = $P111."addedge"($P112, $P113, $P116, 0)
    set $P1588, $P117
.annotate 'line', 166
    find_lex $P111, "$to"
    unless_null $P111, vivify_585
    new $P111, "Undef"
  vivify_585:
    set $N106, $P111
    set $N107, 0
    islt $I103, $N106, $N107
    if $I103, if_1593
    new $P110, 'Integer'
    set $P110, $I103
    goto if_1593_end
  if_1593:
    set $P112, $P1588
    unless_null $P112, vivify_586
    new $P112, "Undef"
  vivify_586:
    set $N108, $P112
    set $N109, 0
    isgt $I104, $N108, $N109
    new $P110, 'Integer'
    set $P110, $I104
  if_1593_end:
    unless $P110, if_1592_end
    set $P113, $P1588
    unless_null $P113, vivify_587
    new $P113, "Undef"
  vivify_587:
    store_lex "$to", $P113
  if_1592_end:
.annotate 'line', 162
    find_lex $P110, "$to"
    unless_null $P110, vivify_588
    new $P110, "Undef"
  vivify_588:
    .return ($P110)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1576"  :anon :subid("391_1338064436.26") :outer("24_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 153
    new $P107, "Undef"
    set $P1578, $P107
    .lex "$start", $P1578
.annotate 'line', 155
    new $P108, "Undef"
    set $P1579, $P108
    .lex "$looper", $P1579
.annotate 'line', 156
    new $P109, "Undef"
    set $P1580, $P109
    .lex "$st", $P1580
.annotate 'line', 153
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    $P112 = $P111."addstate"()
    set $P1578, $P112
.annotate 'line', 154
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$from"
    unless_null $P112, vivify_590
    new $P112, "Undef"
  vivify_590:
    set $P113, $P1578
    unless_null $P113, vivify_591
    new $P113, "Undef"
  vivify_591:
    find_lex $P114, "$?PACKAGE"
    get_who $P115, $P114
    set $P116, $P115["$EDGE_EPSILON"]
    unless_null $P116, vivify_592
    new $P116, "Undef"
  vivify_592:
    $P111."addedge"($P112, $P113, $P116, 0)
.annotate 'line', 155
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    $P112 = $P111."addstate"()
    set $P1579, $P112
.annotate 'line', 156
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    find_lex $P1581, "$node"
    unless_null $P1581, vivify_593
    $P1581 = root_new ['parrot';'ResizablePMCArray']
  vivify_593:
    set $P112, $P1581[0]
    unless_null $P112, vivify_594
    new $P112, "Undef"
  vivify_594:
    set $P113, $P1578
    unless_null $P113, vivify_595
    new $P113, "Undef"
  vivify_595:
    set $P114, $P1579
    unless_null $P114, vivify_596
    new $P114, "Undef"
  vivify_596:
    $P115 = $P111."regex_nfa"($P112, $P113, $P114)
    set $P1580, $P115
.annotate 'line', 157
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    set $P112, $P1579
    unless_null $P112, vivify_597
    new $P112, "Undef"
  vivify_597:
    set $P113, $P1578
    unless_null $P113, vivify_598
    new $P113, "Undef"
  vivify_598:
    find_lex $P114, "$?PACKAGE"
    get_who $P115, $P114
    set $P116, $P115["$EDGE_EPSILON"]
    unless_null $P116, vivify_599
    new $P116, "Undef"
  vivify_599:
    $P111."addedge"($P112, $P113, $P116, 0)
.annotate 'line', 158
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    set $P112, $P1579
    unless_null $P112, vivify_600
    new $P112, "Undef"
  vivify_600:
    find_lex $P113, "$to"
    unless_null $P113, vivify_601
    new $P113, "Undef"
  vivify_601:
    find_lex $P114, "$?PACKAGE"
    get_who $P115, $P114
    set $P116, $P115["$EDGE_EPSILON"]
    unless_null $P116, vivify_602
    new $P116, "Undef"
  vivify_602:
    $P111."addedge"($P112, $P113, $P116, 0)
.annotate 'line', 159
    find_lex $P112, "$to"
    unless_null $P112, vivify_603
    new $P112, "Undef"
  vivify_603:
    set $N104, $P112
    set $N105, 0
    islt $I102, $N104, $N105
    if $I102, if_1583
    new $P111, 'Integer'
    set $P111, $I102
    goto if_1583_end
  if_1583:
    set $P113, $P1580
    unless_null $P113, vivify_604
    new $P113, "Undef"
  vivify_604:
    set $N106, $P113
    set $N107, 0
    isgt $I103, $N106, $N107
    new $P111, 'Integer'
    set $P111, $I103
  if_1583_end:
    if $P111, if_1582
    set $P110, $P111
    goto if_1582_end
  if_1582:
    set $P114, $P1580
    unless_null $P114, vivify_605
    new $P114, "Undef"
  vivify_605:
    store_lex "$to", $P114
    set $P110, $P114
  if_1582_end:
.annotate 'line', 152
    .return ($P110)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1570"  :anon :subid("390_1338064436.26") :outer("24_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 149
    new $P105, "Undef"
    set $P1572, $P105
    .lex "$st", $P1572
    find_lex $P106, "self"
    nqp_decontainerize $P107, $P106
    find_lex $P1573, "$node"
    unless_null $P1573, vivify_606
    $P1573 = root_new ['parrot';'ResizablePMCArray']
  vivify_606:
    set $P108, $P1573[0]
    unless_null $P108, vivify_607
    new $P108, "Undef"
  vivify_607:
    find_lex $P109, "$from"
    unless_null $P109, vivify_608
    new $P109, "Undef"
  vivify_608:
    find_lex $P110, "$from"
    unless_null $P110, vivify_609
    new $P110, "Undef"
  vivify_609:
    $P111 = $P107."regex_nfa"($P108, $P109, $P110)
    set $P1572, $P111
.annotate 'line', 150
    find_lex $P106, "self"
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$from"
    unless_null $P108, vivify_610
    new $P108, "Undef"
  vivify_610:
    find_lex $P109, "$to"
    unless_null $P109, vivify_611
    new $P109, "Undef"
  vivify_611:
    find_lex $P110, "$?PACKAGE"
    get_who $P111, $P110
    set $P112, $P111["$EDGE_EPSILON"]
    unless_null $P112, vivify_612
    new $P112, "Undef"
  vivify_612:
    $P113 = $P107."addedge"($P108, $P109, $P112, 0)
    set $P1572, $P113
.annotate 'line', 151
    find_lex $P108, "$to"
    unless_null $P108, vivify_613
    new $P108, "Undef"
  vivify_613:
    set $N104, $P108
    set $N105, 0
    islt $I102, $N104, $N105
    if $I102, if_1575
    new $P107, 'Integer'
    set $P107, $I102
    goto if_1575_end
  if_1575:
    set $P109, $P1572
    unless_null $P109, vivify_614
    new $P109, "Undef"
  vivify_614:
    set $N106, $P109
    set $N107, 0
    isgt $I103, $N106, $N107
    new $P107, 'Integer'
    set $P107, $I103
  if_1575_end:
    if $P107, if_1574
    set $P106, $P107
    goto if_1574_end
  if_1574:
    set $P110, $P1572
    unless_null $P110, vivify_615
    new $P110, "Undef"
  vivify_615:
    store_lex "$to", $P110
    set $P106, $P110
  if_1574_end:
.annotate 'line', 148
    .return ($P106)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "pastnode" :anon :subid("25_1338064436.26") :outer("388_1338064436.26")
    .param pmc param_1595
    .param pmc param_1596
    .param pmc param_1597
    .param pmc param_1598
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 173
    .lex "self", param_1595
    .lex "$node", param_1596
    .lex "$from", param_1597
    .lex "$to", param_1598
.annotate 'line', 174
    set $P102, param_1596
    unless_null $P102, vivify_617
    new $P102, "Undef"
  vivify_617:
    $S100 = $P102."subtype"()
    iseq $I100, $S100, "zerowidth"
    unless $I100, unless_1600
    new $P101, 'Integer'
    set $P101, $I100
    goto unless_1600_end
  unless_1600:
    set $P103, param_1596
    unless_null $P103, vivify_618
    new $P103, "Undef"
  vivify_618:
    $S101 = $P103."subtype"()
    iseq $I101, $S101, "declarative"
    new $P101, 'Integer'
    set $P101, $I101
  unless_1600_end:
    if $P101, if_1599
.annotate 'line', 176
    set $P112, param_1595
    nqp_decontainerize $P113, $P112
    set $P114, param_1596
    unless_null $P114, vivify_619
    new $P114, "Undef"
  vivify_619:
    set $P115, param_1597
    unless_null $P115, vivify_620
    new $P115, "Undef"
  vivify_620:
    set $P116, param_1598
    unless_null $P116, vivify_621
    new $P116, "Undef"
  vivify_621:
    $P117 = $P113."fate"($P114, $P115, $P116)
    set $P100, $P117
.annotate 'line', 174
    goto if_1599_end
  if_1599:
.annotate 'line', 175
    set $P104, param_1595
    nqp_decontainerize $P105, $P104
    set $P106, param_1597
    unless_null $P106, vivify_622
    new $P106, "Undef"
  vivify_622:
    set $P107, param_1598
    unless_null $P107, vivify_623
    new $P107, "Undef"
  vivify_623:
    find_lex $P108, "$?PACKAGE"
    get_who $P109, $P108
    set $P110, $P109["$EDGE_EPSILON"]
    unless_null $P110, vivify_624
    new $P110, "Undef"
  vivify_624:
    $P111 = $P105."addedge"($P106, $P107, $P110, 0)
    set $P100, $P111
  if_1599_end:
.annotate 'line', 173
    .return ($P100)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "subcapture" :anon :subid("26_1338064436.26") :outer("388_1338064436.26")
    .param pmc param_1602
    .param pmc param_1603
    .param pmc param_1604
    .param pmc param_1605
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 179
    .lex "self", param_1602
    .lex "$node", param_1603
    .lex "$from", param_1604
    .lex "$to", param_1605
.annotate 'line', 180
    set $P100, param_1602
    nqp_decontainerize $P101, $P100
    set $P1606, param_1603
    unless_null $P1606, vivify_625
    $P1606 = root_new ['parrot';'ResizablePMCArray']
  vivify_625:
    set $P102, $P1606[0]
    unless_null $P102, vivify_626
    new $P102, "Undef"
  vivify_626:
    set $P103, param_1604
    unless_null $P103, vivify_627
    new $P103, "Undef"
  vivify_627:
    set $P104, param_1605
    unless_null $P104, vivify_628
    new $P104, "Undef"
  vivify_628:
    $P105 = $P101."regex_nfa"($P102, $P103, $P104)
.annotate 'line', 179
    .return ($P105)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.include "except_types.pasm"
.sub "past" :anon :subid("27_1338064436.26") :outer("388_1338064436.26")
    .param pmc param_1610
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 183
    .const 'Sub' $P1614 = "393_1338064436.26" 
    capture_lex $P1614
    new $P1609, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1609, control_1608
    push_eh $P1609
    .lex "self", param_1610
.annotate 'line', 185
    new $P100, "Undef"
    set $P1611, $P100
    .lex "$past", $P1611
.annotate 'line', 184
    set $P101, param_1610
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 1
    repr_get_attr_obj $P104, $P102, $P103, "$!edges", 1
    unless_null $P104, vivify_629
    new $P104, "Undef"
  vivify_629:
    if $P104, unless_1612_end
    new $P105, "Exception"
    set $P105['type'], .CONTROL_RETURN
    new $P106, "Float"
    assign $P106, 0
    setattribute $P105, 'payload', $P106
    throw $P105
  unless_1612_end:
.annotate 'line', 185
    get_hll_global $P101, "GLOBAL"
    nqp_get_package_through_who $P102, $P101, "PAST"
    get_who $P103, $P102
    set $P104, $P103["Op"]
    $P105 = $P104."new"("list" :named("pasttype"))
    set $P1611, $P105
.annotate 'line', 186
    set $P102, param_1610
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 1
    repr_get_attr_obj $P105, $P103, $P104, "$!states", 0
    unless_null $P105, vivify_630
    new $P105, "Undef"
  vivify_630:
    defined $I100, $P105
    unless $I100, for_undef_631
    iter $P101, $P105
    new $P107, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P107, loop1616_handler
    push_eh $P107
  loop1616_test:
    unless $P101, loop1616_done
    shift $P106, $P101
  loop1616_redo:
    .const 'Sub' $P1614 = "393_1338064436.26" 
    capture_lex $P1614
    $P1614($P106)
  loop1616_next:
    goto loop1616_test
  loop1616_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P108, exception, 'type'
    eq $P108, .CONTROL_LOOP_NEXT, loop1616_next
    eq $P108, .CONTROL_LOOP_REDO, loop1616_redo
  loop1616_done:
    pop_eh 
  for_undef_631:
.annotate 'line', 183
    set $P101, $P1611
    unless_null $P101, vivify_634
    new $P101, "Undef"
  vivify_634:
    .return ($P101)
  control_1608:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P102, exception, "payload"
    .return ($P102)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1613"  :anon :subid("393_1338064436.26") :outer("27_1338064436.26")
    .param pmc param_1615
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 186
    .lex "$_", param_1615
.annotate 'line', 187
    find_lex $P107, "$past"
    unless_null $P107, vivify_632
    new $P107, "Undef"
  vivify_632:
    get_hll_global $P108, "GLOBAL"
    nqp_get_package_through_who $P109, $P108, "PAST"
    get_who $P110, $P109
    set $P111, $P110["Op"]
    find_lex $P112, "$_"
    unless_null $P112, vivify_633
    new $P112, "Undef"
  vivify_633:
    $P113 = $P111."new"($P112 :flat, "list" :named("pasttype"))
    $P114 = $P107."push"($P113)
.annotate 'line', 186
    .return ($P114)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "mergesubrule" :anon :subid("28_1338064436.26") :outer("388_1338064436.26")
    .param pmc param_1618
    .param pmc param_1619
    .param pmc param_1620
    .param pmc param_1621
    .param pmc param_1622
    .param pmc param_1623
    .param pmc param_1624 :optional
    .param int has_param_1624 :opt_flag
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 192
    .const 'Sub' $P1660 = "397_1338064436.26" 
    capture_lex $P1660
    .const 'Sub' $P1640 = "394_1338064436.26" 
    capture_lex $P1640
    .lex "self", param_1618
    .lex "$start", param_1619
    .lex "$to", param_1620
    .lex "$fate", param_1621
    .lex "$cursor", param_1622
    .lex "$name", param_1623
    if has_param_1624, optparam_635
    $P1625 = root_new ['parrot';'Hash']
    set param_1624, $P1625
  optparam_635:
    .lex "%caller_seen", param_1624
.annotate 'line', 194
    $P1627 = root_new ['parrot';'Hash']
    set $P1626, $P1627
    .lex "%seen", $P1626
.annotate 'line', 195
    $P1629 = root_new ['parrot';'ResizablePMCArray']
    set $P1628, $P1629
    .lex "@substates", $P1628
.annotate 'line', 194
    set $P1630, param_1624
    unless_null $P1630, vivify_636
    $P1630 = root_new ['parrot';'Hash']
  vivify_636:
    clone $P100, $P1630
    set $P1626, $P100
.annotate 'line', 192
    set $P1631, $P1628
    unless_null $P1631, vivify_637
    $P1631 = root_new ['parrot';'ResizablePMCArray']
  vivify_637:
.annotate 'line', 196
    set $P100, param_1622
    unless_null $P100, vivify_638
    new $P100, "Undef"
  vivify_638:
    set $P101, param_1623
    unless_null $P101, vivify_639
    new $P101, "Undef"
  vivify_639:
    set $S100, $P101
    can $I100, $P100, $S100
    unless $I100, if_1632_end
.annotate 'line', 197
    set $P102, param_1623
    unless_null $P102, vivify_640
    new $P102, "Undef"
  vivify_640:
    set $P1634, $P1626
    unless_null $P1634, vivify_641
    $P1634 = root_new ['parrot';'Hash']
  vivify_641:
    set $P103, $P1634[$P102]
    unless_null $P103, vivify_642
    new $P103, "Undef"
  vivify_642:
    isfalse $I101, $P103
    unless $I101, if_1633_end
.annotate 'line', 198
    set $P104, param_1622
    unless_null $P104, vivify_643
    new $P104, "Undef"
  vivify_643:
    get_how $P105, $P104
    set $P106, param_1622
    unless_null $P106, vivify_644
    new $P106, "Undef"
  vivify_644:
    set $P107, param_1623
    unless_null $P107, vivify_645
    new $P107, "Undef"
  vivify_645:
    $P108 = $P105."find_method"($P106, $P107, 1 :named("no_trace"))
    $P109 = $P108."nqpattr"("nfa")
    set $P1628, $P109
  if_1633_end:
.annotate 'line', 200
    set $P1637, $P1628
    unless_null $P1637, vivify_646
    $P1637 = root_new ['parrot';'ResizablePMCArray']
  vivify_646:
    isfalse $I101, $P1637
    if $I101, if_1636
    new $P102, 'Integer'
    set $P102, $I101
    goto if_1636_end
  if_1636:
    set $P103, param_1623
    unless_null $P103, vivify_647
    new $P103, "Undef"
  vivify_647:
    set $P1638, $P1626
    unless_null $P1638, vivify_648
    $P1638 = root_new ['parrot';'Hash']
  vivify_648:
    set $P104, $P1638[$P103]
    unless_null $P104, vivify_649
    new $P104, "Undef"
  vivify_649:
    isfalse $I102, $P104
    new $P102, 'Integer'
    set $P102, $I102
  if_1636_end:
    unless $P102, if_1635_end
    .const 'Sub' $P1640 = "394_1338064436.26" 
    capture_lex $P1640
    $P1640()
  if_1635_end:
  if_1632_end:
.annotate 'line', 215
    new $P100, "Float"
    assign $P100, 1
    set $P101, param_1623
    unless_null $P101, vivify_664
    new $P101, "Undef"
  vivify_664:
    set $P1656, $P1626
    unless_null $P1656, vivify_665
    $P1656 = root_new ['parrot';'Hash']
    set $P1626, $P1656
  vivify_665:
    set $P1656[$P101], $P100
.annotate 'line', 216
    set $P1658, $P1628
    unless_null $P1658, vivify_666
    $P1658 = root_new ['parrot';'ResizablePMCArray']
  vivify_666:
    if $P1658, if_1657
.annotate 'line', 252
    set $P106, param_1618
    nqp_decontainerize $P107, $P106
    set $P108, param_1619
    unless_null $P108, vivify_667
    new $P108, "Undef"
  vivify_667:
    find_lex $P109, "$?PACKAGE"
    get_who $P110, $P109
    set $P111, $P110["$EDGE_FATE"]
    unless_null $P111, vivify_668
    new $P111, "Undef"
  vivify_668:
    set $P112, param_1621
    unless_null $P112, vivify_669
    new $P112, "Undef"
  vivify_669:
    $P113 = $P107."addedge"($P108, 0, $P111, $P112)
.annotate 'line', 251
    set $P100, $P113
.annotate 'line', 216
    goto if_1657_end
  if_1657:
    .const 'Sub' $P1660 = "397_1338064436.26" 
    capture_lex $P1660
    $P105 = $P1660()
    set $P100, $P105
  if_1657_end:
.annotate 'line', 192
    .return ($P100)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.include "except_types.pasm"
.sub "_block1639"  :anon :subid("394_1338064436.26") :outer("28_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 200
    .const 'Sub' $P1652 = "396_1338064436.26" 
    capture_lex $P1652
    .const 'Sub' $P1646 = "395_1338064436.26" 
    capture_lex $P1646
.annotate 'line', 203
    $P1642 = root_new ['parrot';'Hash']
    set $P1641, $P1642
    .lex "%protorx", $P1641
.annotate 'line', 204
    new $P105, "Undef"
    set $P1643, $P105
    .lex "$nfa", $P1643
.annotate 'line', 205
    new $P106, "Undef"
    set $P1644, $P106
    .lex "$gotmatch", $P1644
.annotate 'line', 203
    find_lex $P107, "$cursor"
    unless_null $P107, vivify_650
    new $P107, "Undef"
  vivify_650:
    get_how $P108, $P107
    find_lex $P109, "$cursor"
    unless_null $P109, vivify_651
    new $P109, "Undef"
  vivify_651:
    .const 'Sub' $P1646 = "395_1338064436.26" 
    newclosure $P1647, $P1646
    $P110 = $P108."cache"($P109, "!protoregex_table", $P1647)
    set $P1641, $P110
.annotate 'line', 204
    get_hll_global $P107, "GLOBAL"
    nqp_get_package_through_who $P108, $P107, "QRegex"
    get_who $P109, $P108
    set $P110, $P109["NFA"]
    $P111 = $P110."new"()
    set $P1643, $P111
.annotate 'line', 205
    new $P107, "Float"
    assign $P107, 0
    set $P1644, $P107
.annotate 'line', 206
    find_lex $P107, "$name"
    unless_null $P107, vivify_653
    new $P107, "Undef"
  vivify_653:
    set $S101, $P107
    set $P1649, $P1641
    unless_null $P1649, vivify_654
    $P1649 = root_new ['parrot';'Hash']
  vivify_654:
    exists $I103, $P1649[$S101]
    unless $I103, if_1648_end
.annotate 'line', 207
    find_lex $P109, "$name"
    unless_null $P109, vivify_655
    new $P109, "Undef"
  vivify_655:
    set $P1650, $P1641
    unless_null $P1650, vivify_656
    $P1650 = root_new ['parrot';'Hash']
  vivify_656:
    set $P110, $P1650[$P109]
    unless_null $P110, vivify_657
    new $P110, "Undef"
  vivify_657:
    defined $I104, $P110
    unless $I104, for_undef_658
    iter $P108, $P110
    new $P113, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P113, loop1654_handler
    push_eh $P113
  loop1654_test:
    unless $P108, loop1654_done
    shift $P111, $P108
  loop1654_redo:
    .const 'Sub' $P1652 = "396_1338064436.26" 
    capture_lex $P1652
    $P1652($P111)
  loop1654_next:
    goto loop1654_test
  loop1654_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P114, exception, 'type'
    eq $P114, .CONTROL_LOOP_NEXT, loop1654_next
    eq $P114, .CONTROL_LOOP_REDO, loop1654_redo
  loop1654_done:
    pop_eh 
  for_undef_658:
  if_1648_end:
.annotate 'line', 212
    set $P108, $P1644
    unless_null $P108, vivify_662
    new $P108, "Undef"
  vivify_662:
    if $P108, if_1655
    set $P107, $P108
    goto if_1655_end
  if_1655:
    set $P109, $P1643
    unless_null $P109, vivify_663
    new $P109, "Undef"
  vivify_663:
    $P110 = $P109."states"()
    store_lex "@substates", $P110
    set $P107, $P110
  if_1655_end:
.annotate 'line', 200
    .return ($P107)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1645"  :anon :subid("395_1338064436.26") :outer("394_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 203
    find_lex $P110, "$cursor"
    unless_null $P110, vivify_652
    new $P110, "Undef"
  vivify_652:
    $P111 = $P110."!protoregex_table"()
    .return ($P111)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1651"  :anon :subid("396_1338064436.26") :outer("394_1338064436.26")
    .param pmc param_1653
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 207
    .lex "$rxname", param_1653
.annotate 'line', 208
    find_lex $P112, "$nfa"
    unless_null $P112, vivify_659
    new $P112, "Undef"
  vivify_659:
    find_lex $P113, "$?PACKAGE"
    get_who $P114, $P113
    set $P115, $P114["$EDGE_SUBRULE"]
    unless_null $P115, vivify_660
    new $P115, "Undef"
  vivify_660:
    set $P116, param_1653
    unless_null $P116, vivify_661
    new $P116, "Undef"
  vivify_661:
    $P112."addedge"(1, 0, $P115, $P116)
.annotate 'line', 209
    new $P112, "Float"
    assign $P112, 1
    store_lex "$gotmatch", $P112
.annotate 'line', 207
    .return ($P112)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.include "except_types.pasm"
.sub "_block1659"  :anon :subid("397_1338064436.26") :outer("28_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 216
    .const 'Sub' $P1670 = "398_1338064436.26" 
    capture_lex $P1670
.annotate 'line', 218
    new $P101, "Undef"
    set $P1661, $P101
    .lex "$substart", $P1661
.annotate 'line', 230
    new $P102, "Undef"
    set $P1662, $P102
    .lex "$subend", $P1662
.annotate 'line', 231
    new $P103, "Undef"
    set $P1663, $P103
    .lex "$i", $P1663
.annotate 'line', 218
    find_lex $P104, "self"
    nqp_decontainerize $P105, $P104
    $P106 = $P105."addstate"()
    set $P1661, $P106
.annotate 'line', 222
    find_lex $P1664, "@substates"
    unless_null $P1664, vivify_670
    $P1664 = root_new ['parrot';'ResizablePMCArray']
  vivify_670:
    clone $P104, $P1664
    store_lex "@substates", $P104
.annotate 'line', 223
    find_lex $P1665, "@substates"
    unless_null $P1665, vivify_671
    $P1665 = root_new ['parrot';'ResizablePMCArray']
  vivify_671:
    shift $P104, $P1665
.annotate 'line', 224
    new $P110, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P110, loop1668_handler
    push_eh $P110
  loop1668_test:
    find_lex $P1666, "@substates"
    unless_null $P1666, vivify_672
    $P1666 = root_new ['parrot';'ResizablePMCArray']
  vivify_672:
    unless $P1666, loop1668_done
  loop1668_redo:
    find_lex $P104, "self"
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 1
    repr_get_attr_obj $P107, $P105, $P106, "$!states", 0
    unless_null $P107, vivify_673
    new $P107, "Undef"
  vivify_673:
    find_lex $P1667, "@substates"
    unless_null $P1667, vivify_674
    $P1667 = root_new ['parrot';'ResizablePMCArray']
  vivify_674:
    shift $P108, $P1667
    clone $P109, $P108
    push $P107, $P109
  loop1668_next:
    goto loop1668_test
  loop1668_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P111, exception, 'type'
    eq $P111, .CONTROL_LOOP_NEXT, loop1668_next
    eq $P111, .CONTROL_LOOP_REDO, loop1668_redo
  loop1668_done:
    pop_eh 
.annotate 'line', 230
    find_lex $P104, "self"
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 1
    repr_get_attr_obj $P107, $P105, $P106, "$!states", 0
    unless_null $P107, vivify_675
    new $P107, "Undef"
  vivify_675:
    elements $I100, $P107
    new $P108, 'Integer'
    set $P108, $I100
    set $P1662, $P108
.annotate 'line', 231
    set $P104, $P1661
    unless_null $P104, vivify_676
    new $P104, "Undef"
  vivify_676:
    set $P1663, $P104
.annotate 'line', 232
    new $P109, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P109, loop1686_handler
    push_eh $P109
  loop1686_test:
    set $P104, $P1663
    unless_null $P104, vivify_677
    new $P104, "Undef"
  vivify_677:
    set $N100, $P104
    set $P105, $P1662
    unless_null $P105, vivify_678
    new $P105, "Undef"
  vivify_678:
    set $N101, $P105
    islt $I100, $N100, $N101
    unless $I100, loop1686_done
  loop1686_redo:
    .const 'Sub' $P1670 = "398_1338064436.26" 
    capture_lex $P1670
    $P1670()
  loop1686_next:
    goto loop1686_test
  loop1686_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P111, exception, 'type'
    eq $P111, .CONTROL_LOOP_NEXT, loop1686_next
    eq $P111, .CONTROL_LOOP_REDO, loop1686_redo
  loop1686_done:
    pop_eh 
.annotate 'line', 246
    find_lex $P104, "self"
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$start"
    unless_null $P106, vivify_714
    new $P106, "Undef"
  vivify_714:
    set $P107, $P1661
    unless_null $P107, vivify_715
    new $P107, "Undef"
  vivify_715:
    add $P108, $P107, 1
    find_lex $P109, "$?PACKAGE"
    get_who $P110, $P109
    set $P111, $P110["$EDGE_EPSILON"]
    unless_null $P111, vivify_716
    new $P111, "Undef"
  vivify_716:
    $P105."addedge"($P106, $P108, $P111, 0)
.annotate 'line', 247
    find_lex $P105, "$to"
    unless_null $P105, vivify_717
    new $P105, "Undef"
  vivify_717:
    set $N100, $P105
    set $N101, 0
    isgt $I100, $N100, $N101
    if $I100, if_1687
.annotate 'line', 249
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
    set $P116, $P1661
    unless_null $P116, vivify_718
    new $P116, "Undef"
  vivify_718:
    find_lex $P117, "$?PACKAGE"
    get_who $P118, $P117
    set $P119, $P118["$EDGE_FATE"]
    unless_null $P119, vivify_719
    new $P119, "Undef"
  vivify_719:
    find_lex $P120, "$fate"
    unless_null $P120, vivify_720
    new $P120, "Undef"
  vivify_720:
    $P121 = $P115."addedge"($P116, 0, $P119, $P120)
    set $P104, $P121
.annotate 'line', 247
    goto if_1687_end
  if_1687:
.annotate 'line', 248
    find_lex $P106, "self"
    nqp_decontainerize $P107, $P106
    set $P108, $P1661
    unless_null $P108, vivify_721
    new $P108, "Undef"
  vivify_721:
    find_lex $P109, "$to"
    unless_null $P109, vivify_722
    new $P109, "Undef"
  vivify_722:
    find_lex $P110, "$?PACKAGE"
    get_who $P111, $P110
    set $P112, $P111["$EDGE_EPSILON"]
    unless_null $P112, vivify_723
    new $P112, "Undef"
  vivify_723:
    $P113 = $P107."addedge"($P108, $P109, $P112, 0)
    set $P104, $P113
  if_1687_end:
.annotate 'line', 216
    .return ($P104)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.include "except_types.pasm"
.sub "_block1669"  :anon :subid("398_1338064436.26") :outer("397_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 233
    new $P106, "Undef"
    set $P1671, $P106
    .lex "$substate", $P1671
.annotate 'line', 234
    new $P107, "Undef"
    set $P1672, $P107
    .lex "$j", $P1672
.annotate 'line', 235
    new $P108, "Undef"
    set $P1673, $P108
    .lex "$k", $P1673
.annotate 'line', 233
    find_lex $P109, "$i"
    unless_null $P109, vivify_679
    new $P109, "Undef"
  vivify_679:
    set $I101, $P109
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    nqp_get_sc_object $P112, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 1
    repr_get_attr_obj $P1674, $P111, $P112, "$!states", 0
    unless_null $P1674, vivify_680
    $P1674 = root_new ['parrot';'ResizablePMCArray']
  vivify_680:
    set $P113, $P1674[$I101]
    unless_null $P113, vivify_681
    new $P113, "Undef"
  vivify_681:
    set $P1671, $P113
.annotate 'line', 234
    new $P109, "Float"
    assign $P109, 0
    set $P1672, $P109
.annotate 'line', 235
    set $P109, $P1671
    unless_null $P109, vivify_682
    new $P109, "Undef"
  vivify_682:
    elements $I101, $P109
    new $P110, 'Integer'
    set $P110, $I101
    set $P1673, $P110
.annotate 'line', 236
    new $P111, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P111, loop1685_handler
    push_eh $P111
  loop1685_test:
    set $P109, $P1672
    unless_null $P109, vivify_683
    new $P109, "Undef"
  vivify_683:
    set $N102, $P109
    set $P110, $P1673
    unless_null $P110, vivify_684
    new $P110, "Undef"
  vivify_684:
    set $N103, $P110
    islt $I101, $N102, $N103
    unless $I101, loop1685_done
  loop1685_redo:
.annotate 'line', 237
    set $P111, $P1672
    unless_null $P111, vivify_685
    new $P111, "Undef"
  vivify_685:
    add $P112, $P111, 2
    set $I102, $P112
    set $P1675, $P1671
    unless_null $P1675, vivify_686
    $P1675 = root_new ['parrot';'ResizablePMCArray']
  vivify_686:
    set $P113, $P1675[$I102]
    unless_null $P113, vivify_687
    new $P113, "Undef"
  vivify_687:
    find_lex $P114, "$substart"
    unless_null $P114, vivify_688
    new $P114, "Undef"
  vivify_688:
    add $P115, $P113, $P114
    set $P116, $P1672
    unless_null $P116, vivify_689
    new $P116, "Undef"
  vivify_689:
    add $P117, $P116, 2
    set $I103, $P117
    set $P1676, $P1671
    unless_null $P1676, vivify_690
    $P1676 = root_new ['parrot';'ResizablePMCArray']
    set $P1671, $P1676
  vivify_690:
    set $P1676[$I103], $P115
.annotate 'line', 239
    set $P111, $P1672
    unless_null $P111, vivify_691
    new $P111, "Undef"
  vivify_691:
    set $I102, $P111
    set $P1678, $P1671
    unless_null $P1678, vivify_692
    $P1678 = root_new ['parrot';'ResizablePMCArray']
  vivify_692:
    set $P112, $P1678[$I102]
    unless_null $P112, vivify_693
    new $P112, "Undef"
  vivify_693:
    set $N104, $P112
    find_lex $P113, "$?PACKAGE"
    get_who $P114, $P113
    set $P115, $P114["$EDGE_FATE"]
    unless_null $P115, vivify_694
    new $P115, "Undef"
  vivify_694:
    set $N105, $P115
    iseq $I103, $N104, $N105
    unless $I103, if_1677_end
.annotate 'line', 238
    find_lex $P116, "$fate"
    unless_null $P116, vivify_695
    new $P116, "Undef"
  vivify_695:
    set $P117, $P1672
    unless_null $P117, vivify_696
    new $P117, "Undef"
  vivify_696:
    add $P118, $P117, 1
    set $I104, $P118
    set $P1679, $P1671
    unless_null $P1679, vivify_697
    $P1679 = root_new ['parrot';'ResizablePMCArray']
    set $P1671, $P1679
  vivify_697:
    set $P1679[$I104], $P116
  if_1677_end:
.annotate 'line', 241
    set $P111, $P1672
    unless_null $P111, vivify_698
    new $P111, "Undef"
  vivify_698:
    set $I102, $P111
    set $P1681, $P1671
    unless_null $P1681, vivify_699
    $P1681 = root_new ['parrot';'ResizablePMCArray']
  vivify_699:
    set $P112, $P1681[$I102]
    unless_null $P112, vivify_700
    new $P112, "Undef"
  vivify_700:
    set $N104, $P112
    find_lex $P113, "$?PACKAGE"
    get_who $P114, $P113
    set $P115, $P114["$EDGE_SUBRULE"]
    unless_null $P115, vivify_701
    new $P115, "Undef"
  vivify_701:
    set $N105, $P115
    iseq $I103, $N104, $N105
    unless $I103, if_1680_end
.annotate 'line', 240
    find_lex $P116, "self"
    nqp_decontainerize $P117, $P116
    find_lex $P118, "$i"
    unless_null $P118, vivify_702
    new $P118, "Undef"
  vivify_702:
    set $P119, $P1672
    unless_null $P119, vivify_703
    new $P119, "Undef"
  vivify_703:
    add $P120, $P119, 2
    set $I104, $P120
    set $P1682, $P1671
    unless_null $P1682, vivify_704
    $P1682 = root_new ['parrot';'ResizablePMCArray']
  vivify_704:
    set $P121, $P1682[$I104]
    unless_null $P121, vivify_705
    new $P121, "Undef"
  vivify_705:
    find_lex $P122, "$fate"
    unless_null $P122, vivify_706
    new $P122, "Undef"
  vivify_706:
    find_lex $P123, "$cursor"
    unless_null $P123, vivify_707
    new $P123, "Undef"
  vivify_707:
    set $P124, $P1672
    unless_null $P124, vivify_708
    new $P124, "Undef"
  vivify_708:
    add $P125, $P124, 1
    set $I105, $P125
    set $P1683, $P1671
    unless_null $P1683, vivify_709
    $P1683 = root_new ['parrot';'ResizablePMCArray']
  vivify_709:
    set $P126, $P1683[$I105]
    unless_null $P126, vivify_710
    new $P126, "Undef"
  vivify_710:
    find_lex $P1684, "%seen"
    unless_null $P1684, vivify_711
    $P1684 = root_new ['parrot';'Hash']
  vivify_711:
    $P117."mergesubrule"($P118, $P121, $P122, $P123, $P126, $P1684)
  if_1680_end:
.annotate 'line', 242
    set $P111, $P1672
    unless_null $P111, vivify_712
    new $P111, "Undef"
  vivify_712:
    add $P112, $P111, 3
    set $P1672, $P112
  loop1685_next:
.annotate 'line', 236
    goto loop1685_test
  loop1685_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P112, exception, 'type'
    eq $P112, .CONTROL_LOOP_NEXT, loop1685_next
    eq $P112, .CONTROL_LOOP_REDO, loop1685_redo
  loop1685_done:
    pop_eh 
.annotate 'line', 244
    find_lex $P109, "$i"
    unless_null $P109, vivify_713
    new $P109, "Undef"
  vivify_713:
    add $P110, $P109, 1
    store_lex "$i", $P110
.annotate 'line', 232
    .return ($P110)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "run" :anon :subid("29_1338064436.26") :outer("388_1338064436.26")
    .param pmc param_1689
    .param pmc param_1690
    .param pmc param_1691
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 256
    .lex "self", param_1689
    .lex "$target", param_1690
    .lex "$offset", param_1691
.annotate 'line', 303
    set $P100, param_1689
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 1
    repr_get_attr_obj $P103, $P101, $P102, "$!states", 0
    unless_null $P103, vivify_724
    new $P103, "Undef"
  vivify_724:
    set $P104, param_1690
    unless_null $P104, vivify_725
    new $P104, "Undef"
  vivify_725:
    set $S100, $P104
    set $P105, param_1691
    unless_null $P105, vivify_726
    new $P105, "Undef"
  vivify_726:
    set $I100, $P105
    nqp_nfa_run_new $P106, $P103, $S100, $I100
.annotate 'line', 256
    .return ($P106)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.include "except_types.pasm"
.sub "__dump" :anon :subid("30_1338064436.26") :outer("388_1338064436.26")
    .param pmc param_1693
    .param pmc param_1694
    .param pmc param_1695
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 306
    .const 'Sub' $P1699 = "399_1338064436.26" 
    capture_lex $P1699
    .lex "self", param_1693
    .lex "$dumper", param_1694
    .lex "$label", param_1695
.annotate 'line', 307
    new $P100, "Undef"
    set $P1696, $P100
    .lex "$subindent", $P1696
.annotate 'line', 309
    new $P101, "Undef"
    set $P1697, $P101
    .lex "$st", $P1697
.annotate 'line', 307
    set $P102, param_1694
    unless_null $P102, vivify_727
    new $P102, "Undef"
  vivify_727:
    $P103 = $P102."newIndent"()
    set $P1696, $P103
.annotate 'line', 308
    "print"("[")
.annotate 'line', 309
    new $P102, "Float"
    assign $P102, 0
    set $P1697, $P102
.annotate 'line', 310
    set $P103, param_1693
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 1
    repr_get_attr_obj $P106, $P104, $P105, "$!states", 0
    unless_null $P106, vivify_728
    new $P106, "Undef"
  vivify_728:
    defined $I100, $P106
    unless $I100, for_undef_729
    iter $P102, $P106
    new $P108, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P108, loop1701_handler
    push_eh $P108
  loop1701_test:
    unless $P102, loop1701_done
    shift $P107, $P102
  loop1701_redo:
    .const 'Sub' $P1699 = "399_1338064436.26" 
    capture_lex $P1699
    $P1699($P107)
  loop1701_next:
    goto loop1701_test
  loop1701_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P110, exception, 'type'
    eq $P110, .CONTROL_LOOP_NEXT, loop1701_next
    eq $P110, .CONTROL_LOOP_REDO, loop1701_redo
  loop1701_done:
    pop_eh 
  for_undef_729:
.annotate 'line', 314
    set $P102, param_1694
    unless_null $P102, vivify_734
    new $P102, "Undef"
  vivify_734:
    $P102."deleteIndent"()
.annotate 'line', 315
    set $P102, param_1694
    unless_null $P102, vivify_735
    new $P102, "Undef"
  vivify_735:
    $P103 = $P102."indent"()
    $P104 = "print"("\n", $P103, "]")
.annotate 'line', 306
    .return ($P104)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1698"  :anon :subid("399_1338064436.26") :outer("30_1338064436.26")
    .param pmc param_1700
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 310
    .lex "$_", param_1700
.annotate 'line', 311
    new $P108, 'String'
    set $P108, "\n"
    find_lex $P109, "$subindent"
    unless_null $P109, vivify_730
    new $P109, "Undef"
  vivify_730:
    concat $P110, $P108, $P109
    concat $P111, $P110, "'%d' => [%s]"
    set $S100, $P111
    find_lex $P112, "$st"
    unless_null $P112, vivify_731
    new $P112, "Undef"
  vivify_731:
    find_lex $P113, "$_"
    unless_null $P113, vivify_732
    new $P113, "Undef"
  vivify_732:
    join $S101, ", ", $P113
    new $P114, "ResizablePMCArray"
    push $P114, $P112
    push $P114, $S101
    sprintf $S102, $S100, $P114
    "print"($S102)
.annotate 'line', 312
    find_lex $P108, "$st"
    unless_null $P108, vivify_733
    new $P108, "Undef"
  vivify_733:
    add $P109, $P108, 1
    store_lex "$st", $P109
.annotate 'line', 310
    .return ($P109)
.end


.HLL "nqp"

.loadlib "nqp_group"

.loadlib "nqp_ops"

.loadlib "nqp_bigint_ops"

.loadlib "trans_ops"

.loadlib "io_ops"

.namespace ["NQPCursorRole"]
.sub "_block1703"  :subid("68_1338064436.26") :outer("387_1338064436.26")
    .param pmc param_1705
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 321
    .const 'Sub' $P2114 = "67_1338064436.26" 
    capture_lex $P2114
    .const 'Sub' $P2104 = "66_1338064436.26" 
    capture_lex $P2104
    .const 'Sub' $P2094 = "65_1338064436.26" 
    capture_lex $P2094
    .const 'Sub' $P2084 = "64_1338064436.26" 
    capture_lex $P2084
    .const 'Sub' $P2074 = "63_1338064436.26" 
    capture_lex $P2074
    .const 'Sub' $P2064 = "62_1338064436.26" 
    capture_lex $P2064
    .const 'Sub' $P2054 = "61_1338064436.26" 
    capture_lex $P2054
    .const 'Sub' $P2044 = "60_1338064436.26" 
    capture_lex $P2044
    .const 'Sub' $P2034 = "59_1338064436.26" 
    capture_lex $P2034
    .const 'Sub' $P2021 = "58_1338064436.26" 
    capture_lex $P2021
    .const 'Sub' $P2008 = "57_1338064436.26" 
    capture_lex $P2008
    .const 'Sub' $P1993 = "56_1338064436.26" 
    capture_lex $P1993
    .const 'Sub' $P1973 = "55_1338064436.26" 
    capture_lex $P1973
    .const 'Sub' $P1958 = "54_1338064436.26" 
    capture_lex $P1958
    .const 'Sub' $P1940 = "53_1338064436.26" 
    capture_lex $P1940
    .const 'Sub' $P1929 = "52_1338064436.26" 
    capture_lex $P1929
    .const 'Sub' $P1922 = "51_1338064436.26" 
    capture_lex $P1922
    .const 'Sub' $P1915 = "50_1338064436.26" 
    capture_lex $P1915
    .const 'Sub' $P1902 = "49_1338064436.26" 
    capture_lex $P1902
    .const 'Sub' $P1879 = "48_1338064436.26" 
    capture_lex $P1879
    .const 'Sub' $P1859 = "47_1338064436.26" 
    capture_lex $P1859
    .const 'Sub' $P1838 = "46_1338064436.26" 
    capture_lex $P1838
    .const 'Sub' $P1812 = "45_1338064436.26" 
    capture_lex $P1812
    .const 'Sub' $P1805 = "44_1338064436.26" 
    capture_lex $P1805
    .const 'Sub' $P1800 = "43_1338064436.26" 
    capture_lex $P1800
    .const 'Sub' $P1794 = "42_1338064436.26" 
    capture_lex $P1794
    .const 'Sub' $P1792 = "41_1338064436.26" 
    capture_lex $P1792
    .const 'Sub' $P1785 = "40_1338064436.26" 
    capture_lex $P1785
    .const 'Sub' $P1781 = "39_1338064436.26" 
    capture_lex $P1781
    .const 'Sub' $P1775 = "38_1338064436.26" 
    capture_lex $P1775
    .const 'Sub' $P1770 = "37_1338064436.26" 
    capture_lex $P1770
    .const 'Sub' $P1759 = "36_1338064436.26" 
    capture_lex $P1759
    .const 'Sub' $P1752 = "35_1338064436.26" 
    capture_lex $P1752
    .const 'Sub' $P1717 = "34_1338064436.26" 
    capture_lex $P1717
    .const 'Sub' $P1714 = "33_1338064436.26" 
    capture_lex $P1714
    .const 'Sub' $P1711 = "32_1338064436.26" 
    capture_lex $P1711
    .const 'Sub' $P1708 = "31_1338064436.26" 
    capture_lex $P1708
    .lex "$?CLASS", param_1705
.annotate 'line', 337
    new $P100, "Undef"
    set $P1706, $P100
    .lex "$NO_CAPS", $P1706
.annotate 'line', 444
    new $P101, "Undef"
    set $P1707, $P101
    .lex "$pass_mark", $P1707
.annotate 'line', 337
    new $P102, "Hash"
    set $P1706, $P102
.annotate 'line', 444
    new $P102, "Float"
    assign $P102, 1
    set $P1707, $P102
.annotate 'line', 714
    .const 'Sub' $P2114 = "67_1338064436.26" 
    newclosure $P2119, $P2114
.annotate 'line', 321
    .return ($P2119)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "target" :anon :subid("31_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_1709
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 333
    .lex "self", param_1709
    set $P102, param_1709
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_str $S1710, $P103, $P104, "$!target", -1
    .return ($S1710)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "from" :anon :subid("32_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_1712
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 334
    .lex "self", param_1712
    set $P102, param_1712
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_int $I1713, $P103, $P104, "$!from", -1
    .return ($I1713)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "pos" :anon :subid("33_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_1715
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 335
    .lex "self", param_1715
    set $P102, param_1715
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_int $I1716, $P103, $P104, "$!pos", -1
    .return ($I1716)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.include "except_types.pasm"
.sub "CAPHASH" :anon :subid("34_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_1718
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 338
    .const 'Sub' $P1735 = "87_1338064436.26" 
    capture_lex $P1735
    .const 'Sub' $P1727 = "86_1338064436.26" 
    capture_lex $P1727
    .lex "self", param_1718
.annotate 'line', 339
    new $P102, "Undef"
    set $P1719, $P102
    .lex "$caps", $P1719
.annotate 'line', 340
    $P1721 = root_new ['parrot';'Hash']
    set $P1720, $P1721
    .lex "%caplist", $P1720
.annotate 'line', 339
    new $P103, "Hash"
    set $P1719, $P103
.annotate 'line', 340
    find_lex $P103, "$NO_CAPS"
    unless_null $P103, vivify_736
    new $P103, "Undef"
  vivify_736:
    set $P1720, $P103
.annotate 'line', 341
    set $P103, param_1718
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$?CLASS"
    repr_get_attr_obj $P106, $P104, $P105, "$!regexsub", -1
    unless_null $P106, vivify_737
    new $P106, "Undef"
  vivify_737:
    unless $P106, if_1722_end
.annotate 'line', 342
    set $P107, param_1718
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_obj $P110, $P108, $P109, "$!regexsub", -1
    unless_null $P110, vivify_738
    new $P110, "Undef"
  vivify_738:
    $P111 = $P110."nqpattr"("caps")
    set $P1720, $P111
.annotate 'line', 343
    set $P1724, $P1720
    unless_null $P1724, vivify_739
    $P1724 = root_new ['parrot';'Hash']
  vivify_739:
    unless $P1724, if_1723_end
.annotate 'line', 344
    set $P1725, $P1720
    unless_null $P1725, vivify_740
    $P1725 = root_new ['parrot';'Hash']
  vivify_740:
    defined $I100, $P1725
    unless $I100, for_undef_741
    iter $P107, $P1725
    new $P110, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P110, loop1732_handler
    push_eh $P110
  loop1732_test:
    unless $P107, loop1732_done
    shift $P108, $P107
  loop1732_redo:
    .const 'Sub' $P1727 = "86_1338064436.26" 
    capture_lex $P1727
    $P1727($P108)
  loop1732_next:
    goto loop1732_test
  loop1732_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P111, exception, 'type'
    eq $P111, .CONTROL_LOOP_NEXT, loop1732_next
    eq $P111, .CONTROL_LOOP_REDO, loop1732_redo
  loop1732_done:
    pop_eh 
  for_undef_741:
  if_1723_end:
  if_1722_end:
.annotate 'line', 349
    set $P103, param_1718
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$?CLASS"
    repr_get_attr_obj $P106, $P104, $P105, "$!cstack", -1
    unless_null $P106, vivify_747
    new $P106, "Undef"
  vivify_747:
    unless $P106, if_1733_end
.annotate 'line', 350
    set $P108, param_1718
    nqp_decontainerize $P109, $P108
    find_lex $P110, "$?CLASS"
    repr_get_attr_obj $P111, $P109, $P110, "$!cstack", -1
    unless_null $P111, vivify_748
    new $P111, "Undef"
  vivify_748:
    defined $I100, $P111
    unless $I100, for_undef_749
    iter $P107, $P111
    new $P116, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P116, loop1751_handler
    push_eh $P116
  loop1751_test:
    unless $P107, loop1751_done
    shift $P112, $P107
  loop1751_redo:
    .const 'Sub' $P1735 = "87_1338064436.26" 
    capture_lex $P1735
    $P1735($P112)
  loop1751_next:
    goto loop1751_test
  loop1751_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P117, exception, 'type'
    eq $P117, .CONTROL_LOOP_NEXT, loop1751_next
    eq $P117, .CONTROL_LOOP_REDO, loop1751_redo
  loop1751_done:
    pop_eh 
  for_undef_749:
  if_1733_end:
.annotate 'line', 338
    set $P103, $P1719
    unless_null $P103, vivify_777
    new $P103, "Undef"
  vivify_777:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block1726"  :anon :subid("86_1338064436.26") :outer("34_1338064436.26")
    .param pmc param_1728
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 344
    .lex "$_", param_1728
.annotate 'line', 345
    find_lex $P110, "$_"
    unless_null $P110, vivify_742
    new $P110, "Undef"
  vivify_742:
    set $S100, $P110
    find_lex $P1730, "%caplist"
    unless_null $P1730, vivify_743
    $P1730 = root_new ['parrot';'Hash']
  vivify_743:
    set $P111, $P1730[$S100]
    unless_null $P111, vivify_744
    new $P111, "Undef"
  vivify_744:
    set $N100, $P111
    set $N101, 2
    isge $I101, $N100, $N101
    if $I101, if_1729
    new $P109, 'Integer'
    set $P109, $I101
    goto if_1729_end
  if_1729:
    new $P112, "ResizablePMCArray"
    find_lex $P113, "$_"
    unless_null $P113, vivify_745
    new $P113, "Undef"
  vivify_745:
    set $S101, $P113
    find_lex $P1731, "$caps"
    unless_null $P1731, vivify_746
    $P1731 = root_new ['parrot';'Hash']
    store_lex "$caps", $P1731
  vivify_746:
    set $P1731[$S101], $P112
    set $P109, $P112
  if_1729_end:
.annotate 'line', 344
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.include "except_types.pasm"
.sub "_block1734"  :anon :subid("87_1338064436.26") :outer("34_1338064436.26")
    .param pmc param_1736
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 350
    .const 'Sub' $P1745 = "88_1338064436.26" 
    capture_lex $P1745
    .lex "$subcur", param_1736
.annotate 'line', 351
    new $P113, "Undef"
    set $P1737, $P113
    .lex "$submatch", $P1737
.annotate 'line', 352
    new $P114, "Undef"
    set $P1738, $P114
    .lex "$name", $P1738
.annotate 'line', 351
    set $P115, param_1736
    unless_null $P115, vivify_750
    new $P115, "Undef"
  vivify_750:
    $P116 = $P115."MATCH"()
    set $P1737, $P116
.annotate 'line', 352
    set $P115, param_1736
    unless_null $P115, vivify_751
    new $P115, "Undef"
  vivify_751:
    find_lex $P116, "$?CLASS"
    unless_null $P116, vivify_752
    new $P116, "Undef"
  vivify_752:
    getattribute $P117, $P115, $P116, "$!name"
    set $P1738, $P117
.annotate 'line', 353
    set $P116, $P1738
    unless_null $P116, vivify_753
    new $P116, "Undef"
  vivify_753:
    defined $I101, $P116
    if $I101, if_1739
    new $P115, 'Integer'
    set $P115, $I101
    goto if_1739_end
  if_1739:
.annotate 'line', 354
    set $P118, $P1738
    unless_null $P118, vivify_754
    new $P118, "Undef"
  vivify_754:
    set $S100, $P118
    index $I102, $S100, "="
    set $N100, $I102
    set $N101, 0
    islt $I103, $N100, $N101
    if $I103, if_1740
.annotate 'line', 360
    set $P121, $P1738
    unless_null $P121, vivify_755
    new $P121, "Undef"
  vivify_755:
    set $S101, $P121
    split $P122, "=", $S101
    defined $I104, $P122
    unless $I104, for_undef_756
    iter $P120, $P122
    new $P125, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P125, loop1750_handler
    push_eh $P125
  loop1750_test:
    unless $P120, loop1750_done
    shift $P123, $P120
  loop1750_redo:
    .const 'Sub' $P1745 = "88_1338064436.26" 
    capture_lex $P1745
    $P1745($P123)
  loop1750_next:
    goto loop1750_test
  loop1750_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P126, exception, 'type'
    eq $P126, .CONTROL_LOOP_NEXT, loop1750_next
    eq $P126, .CONTROL_LOOP_REDO, loop1750_redo
  loop1750_done:
    pop_eh 
  for_undef_756:
.annotate 'line', 359
    set $P117, $P120
.annotate 'line', 354
    goto if_1740_end
  if_1740:
.annotate 'line', 355
    set $P120, $P1738
    unless_null $P120, vivify_767
    new $P120, "Undef"
  vivify_767:
    find_lex $P1742, "%caplist"
    unless_null $P1742, vivify_768
    $P1742 = root_new ['parrot';'Hash']
  vivify_768:
    set $P121, $P1742[$P120]
    unless_null $P121, vivify_769
    new $P121, "Undef"
  vivify_769:
    set $N102, $P121
    set $N103, 2
    isge $I104, $N102, $N103
    if $I104, if_1741
.annotate 'line', 357
    set $P126, $P1738
    unless_null $P126, vivify_770
    new $P126, "Undef"
  vivify_770:
    set $S101, $P126
    find_lex $P125, "$caps"
    unless_null $P125, vivify_771
    new $P125, "Undef"
  vivify_771:
    set $P127, $P1737
    unless_null $P127, vivify_772
    new $P127, "Undef"
  vivify_772:
    set $P125[$S101], $P127
    set $P119, $P127
.annotate 'line', 355
    goto if_1741_end
  if_1741:
.annotate 'line', 356
    set $P122, $P1738
    unless_null $P122, vivify_773
    new $P122, "Undef"
  vivify_773:
    find_lex $P1743, "$caps"
    unless_null $P1743, vivify_774
    $P1743 = root_new ['parrot';'Hash']
  vivify_774:
    set $P123, $P1743[$P122]
    unless_null $P123, vivify_775
    new $P123, "Undef"
  vivify_775:
    set $P124, $P1737
    unless_null $P124, vivify_776
    new $P124, "Undef"
  vivify_776:
    push $P123, $P124
    set $P119, $P123
  if_1741_end:
.annotate 'line', 354
    set $P117, $P119
  if_1740_end:
.annotate 'line', 353
    set $P115, $P117
  if_1739_end:
.annotate 'line', 350
    .return ($P115)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block1744"  :anon :subid("88_1338064436.26") :outer("87_1338064436.26")
    .param pmc param_1746
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 360
    .lex "$name", param_1746
.annotate 'line', 361
    set $P125, param_1746
    unless_null $P125, vivify_757
    new $P125, "Undef"
  vivify_757:
    find_lex $P1748, "%caplist"
    unless_null $P1748, vivify_758
    $P1748 = root_new ['parrot';'Hash']
  vivify_758:
    set $P126, $P1748[$P125]
    unless_null $P126, vivify_759
    new $P126, "Undef"
  vivify_759:
    set $N102, $P126
    set $N103, 2
    isge $I105, $N102, $N103
    if $I105, if_1747
.annotate 'line', 363
    set $P131, param_1746
    unless_null $P131, vivify_760
    new $P131, "Undef"
  vivify_760:
    set $S102, $P131
    find_lex $P130, "$caps"
    unless_null $P130, vivify_761
    new $P130, "Undef"
  vivify_761:
    find_lex $P132, "$submatch"
    unless_null $P132, vivify_762
    new $P132, "Undef"
  vivify_762:
    set $P130[$S102], $P132
    set $P124, $P132
.annotate 'line', 361
    goto if_1747_end
  if_1747:
.annotate 'line', 362
    set $P127, param_1746
    unless_null $P127, vivify_763
    new $P127, "Undef"
  vivify_763:
    find_lex $P1749, "$caps"
    unless_null $P1749, vivify_764
    $P1749 = root_new ['parrot';'Hash']
  vivify_764:
    set $P128, $P1749[$P127]
    unless_null $P128, vivify_765
    new $P128, "Undef"
  vivify_765:
    find_lex $P129, "$submatch"
    unless_null $P129, vivify_766
    new $P129, "Undef"
  vivify_766:
    push $P128, $P129
    set $P124, $P128
  if_1747_end:
.annotate 'line', 360
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!cursor_init" :anon :subid("35_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_1753
    .param pmc param_1754
    .param pmc param_1755 :optional :named("p")
    .param int has_param_1755 :opt_flag
    .param pmc param_1756 :optional :named("c")
    .param int has_param_1756 :opt_flag
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 372
    .lex "self", param_1753
    .lex "$target", param_1754
    if has_param_1755, optparam_778
    new $P102, "Float"
    assign $P102, 0
    set param_1755, $P102
  optparam_778:
    .lex "$p", param_1755
    if has_param_1756, optparam_779
    new $P103, "Undef"
    set param_1756, $P103
  optparam_779:
    .lex "$c", param_1756
.annotate 'line', 373
    new $P104, "Undef"
    set $P1757, $P104
    .lex "$new", $P1757
    set $P105, param_1753
    nqp_decontainerize $P106, $P105
    $P107 = $P106."CREATE"()
    set $P1757, $P107
.annotate 'line', 374
    set $P105, $P1757
    unless_null $P105, vivify_780
    new $P105, "Undef"
  vivify_780:
    find_lex $P106, "$?CLASS"
    unless_null $P106, vivify_781
    new $P106, "Undef"
  vivify_781:
    set $P107, param_1754
    unless_null $P107, vivify_782
    new $P107, "Undef"
  vivify_782:
    setattribute $P105, $P106, "$!orig", $P107
.annotate 'line', 375
    set $P105, param_1754
    unless_null $P105, vivify_783
    new $P105, "Undef"
  vivify_783:
    set $S100, $P105
    find_encoding $I100, "ucs4"
    trans_encoding $S101, $S100, $I100
    new $P106, 'String'
    set $P106, $S101
    set param_1754, $P106
.annotate 'line', 376
    set $P105, $P1757
    unless_null $P105, vivify_784
    new $P105, "Undef"
  vivify_784:
    find_lex $P106, "$?CLASS"
    unless_null $P106, vivify_785
    new $P106, "Undef"
  vivify_785:
    set $P107, param_1754
    unless_null $P107, vivify_786
    new $P107, "Undef"
  vivify_786:
    set $S100, $P107
    repr_bind_attr_str $P105, $P106, "$!target", $S100
.annotate 'line', 377
    set $P105, param_1756
    unless_null $P105, vivify_787
    new $P105, "Undef"
  vivify_787:
    defined $I100, $P105
    if $I100, if_1758
.annotate 'line', 382
    set $P106, $P1757
    unless_null $P106, vivify_788
    new $P106, "Undef"
  vivify_788:
    find_lex $P107, "$?CLASS"
    unless_null $P107, vivify_789
    new $P107, "Undef"
  vivify_789:
    set $P108, param_1755
    unless_null $P108, vivify_790
    new $P108, "Undef"
  vivify_790:
    set $I101, $P108
    repr_bind_attr_int $P106, $P107, "$!from", $I101
.annotate 'line', 383
    set $P106, $P1757
    unless_null $P106, vivify_791
    new $P106, "Undef"
  vivify_791:
    find_lex $P107, "$?CLASS"
    unless_null $P107, vivify_792
    new $P107, "Undef"
  vivify_792:
    set $P108, param_1755
    unless_null $P108, vivify_793
    new $P108, "Undef"
  vivify_793:
    set $I101, $P108
    repr_bind_attr_int $P106, $P107, "$!pos", $I101
.annotate 'line', 381
    goto if_1758_end
  if_1758:
.annotate 'line', 378
    set $P106, $P1757
    unless_null $P106, vivify_794
    new $P106, "Undef"
  vivify_794:
    find_lex $P107, "$?CLASS"
    unless_null $P107, vivify_795
    new $P107, "Undef"
  vivify_795:
    repr_bind_attr_int $P106, $P107, "$!from", -1
.annotate 'line', 379
    set $P106, $P1757
    unless_null $P106, vivify_796
    new $P106, "Undef"
  vivify_796:
    find_lex $P107, "$?CLASS"
    unless_null $P107, vivify_797
    new $P107, "Undef"
  vivify_797:
    set $P108, param_1756
    unless_null $P108, vivify_798
    new $P108, "Undef"
  vivify_798:
    set $I101, $P108
    repr_bind_attr_int $P106, $P107, "$!pos", $I101
  if_1758_end:
.annotate 'line', 372
    set $P105, $P1757
    unless_null $P105, vivify_799
    new $P105, "Undef"
  vivify_799:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!cursor_start" :anon :subid("36_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_1760
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 388
    .lex "self", param_1760
.annotate 'line', 389
    new $P102, "Undef"
    set $P1761, $P102
    .lex "$new", $P1761
    set $P103, param_1760
    nqp_decontainerize $P104, $P103
    repr_instance_of $P105, $P104
    set $P1761, $P105
.annotate 'line', 390
    set $P103, $P1761
    unless_null $P103, vivify_800
    new $P103, "Undef"
  vivify_800:
    find_lex $P104, "$?CLASS"
    unless_null $P104, vivify_801
    new $P104, "Undef"
  vivify_801:
    set $P105, param_1760
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_get_attr_obj $P108, $P106, $P107, "$!orig", -1
    unless_null $P108, vivify_802
    new $P108, "Undef"
  vivify_802:
    setattribute $P103, $P104, "$!orig", $P108
.annotate 'line', 391
    set $P103, $P1761
    unless_null $P103, vivify_803
    new $P103, "Undef"
  vivify_803:
    find_lex $P104, "$?CLASS"
    unless_null $P104, vivify_804
    new $P104, "Undef"
  vivify_804:

            $P0 = getinterp
            $P1762 = $P0['sub';1]
        
    setattribute $P103, $P104, "$!regexsub", $P1762
.annotate 'line', 395
    set $P103, param_1760
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$?CLASS"
    repr_get_attr_obj $P106, $P104, $P105, "$!restart", -1
    unless_null $P106, vivify_805
    new $P106, "Undef"
  vivify_805:
    unless $P106, if_1763_end
.annotate 'line', 396
    set $P107, $P1761
    unless_null $P107, vivify_806
    new $P107, "Undef"
  vivify_806:
    find_lex $P108, "$?CLASS"
    unless_null $P108, vivify_807
    new $P108, "Undef"
  vivify_807:
    set $P109, param_1760
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_get_attr_int $I1764, $P110, $P111, "$!pos", -1
    repr_bind_attr_int $P107, $P108, "$!pos", $I1764
.annotate 'line', 397
    set $P107, param_1760
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_obj $P110, $P108, $P109, "$!cstack", -1
    unless_null $P110, vivify_808
    new $P110, "Undef"
  vivify_808:
    unless $P110, if_1765_end
    set $P111, $P1761
    unless_null $P111, vivify_809
    new $P111, "Undef"
  vivify_809:
    find_lex $P112, "$?CLASS"
    unless_null $P112, vivify_810
    new $P112, "Undef"
  vivify_810:
    set $P113, param_1760
    nqp_decontainerize $P114, $P113
    find_lex $P115, "$?CLASS"
    repr_get_attr_obj $P116, $P114, $P115, "$!cstack", -1
    unless_null $P116, vivify_811
    new $P116, "Undef"
  vivify_811:
    clone $P117, $P116
    setattribute $P111, $P112, "$!cstack", $P117
  if_1765_end:
.annotate 'line', 398
    set $P107, $P1761
    unless_null $P107, vivify_812
    new $P107, "Undef"
  vivify_812:
.annotate 'line', 400
    set $P108, $P1761
    unless_null $P108, vivify_813
    new $P108, "Undef"
  vivify_813:
    find_lex $P109, "$?CLASS"
    unless_null $P109, vivify_814
    new $P109, "Undef"
  vivify_814:
    set $P110, param_1760
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_str $S1766, $P111, $P112, "$!target", -1
    repr_bind_attr_str $P108, $P109, "$!target", $S1766
.annotate 'line', 401
    set $P113, $P1761
    unless_null $P113, vivify_815
    new $P113, "Undef"
  vivify_815:
    find_lex $P114, "$?CLASS"
    unless_null $P114, vivify_816
    new $P114, "Undef"
  vivify_816:
    set $P115, param_1760
    nqp_decontainerize $P116, $P115
    find_lex $P117, "$?CLASS"
    repr_get_attr_int $I1767, $P116, $P117, "$!from", -1
    repr_bind_attr_int $P113, $P114, "$!from", $I1767
    find_lex $P118, "$?CLASS"
    unless_null $P118, vivify_817
    new $P118, "Undef"
  vivify_817:
.annotate 'line', 403
    set $P119, $P1761
    unless_null $P119, vivify_818
    new $P119, "Undef"
  vivify_818:
    find_lex $P120, "$?CLASS"
    unless_null $P120, vivify_819
    new $P120, "Undef"
  vivify_819:
    set $P121, param_1760
    nqp_decontainerize $P122, $P121
    find_lex $P123, "$?CLASS"
    repr_get_attr_obj $P124, $P122, $P123, "$!bstack", -1
    unless_null $P124, vivify_820
    new $P124, "Undef"
  vivify_820:
    clone $P125, $P124
    setattribute $P119, $P120, "$!bstack", $P125
    .return ($P107, $S1766, $I1767, $P118, $P125, 1)
  if_1763_end:
.annotate 'line', 406
    set $P103, $P1761
    unless_null $P103, vivify_821
    new $P103, "Undef"
  vivify_821:
    find_lex $P104, "$?CLASS"
    unless_null $P104, vivify_822
    new $P104, "Undef"
  vivify_822:
    repr_bind_attr_int $P103, $P104, "$!pos", -3
.annotate 'line', 407
    set $P103, $P1761
    unless_null $P103, vivify_823
    new $P103, "Undef"
  vivify_823:
.annotate 'line', 409
    set $P104, $P1761
    unless_null $P104, vivify_824
    new $P104, "Undef"
  vivify_824:
    find_lex $P105, "$?CLASS"
    unless_null $P105, vivify_825
    new $P105, "Undef"
  vivify_825:
    set $P106, param_1760
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_str $S1768, $P107, $P108, "$!target", -1
    repr_bind_attr_str $P104, $P105, "$!target", $S1768
.annotate 'line', 410
    set $P109, $P1761
    unless_null $P109, vivify_826
    new $P109, "Undef"
  vivify_826:
    find_lex $P110, "$?CLASS"
    unless_null $P110, vivify_827
    new $P110, "Undef"
  vivify_827:
    set $P111, param_1760
    nqp_decontainerize $P112, $P111
    find_lex $P113, "$?CLASS"
    repr_get_attr_int $I1769, $P112, $P113, "$!pos", -1
    repr_bind_attr_int $P109, $P110, "$!from", $I1769
    find_lex $P114, "$?CLASS"
    unless_null $P114, vivify_828
    new $P114, "Undef"
  vivify_828:
.annotate 'line', 412
    set $P115, $P1761
    unless_null $P115, vivify_829
    new $P115, "Undef"
  vivify_829:
    find_lex $P116, "$?CLASS"
    unless_null $P116, vivify_830
    new $P116, "Undef"
  vivify_830:
    new $P117, "ResizableIntegerArray"
    setattribute $P115, $P116, "$!bstack", $P117
    .return ($P103, $S1768, $I1769, $P114, $P117, 0)
.annotate 'line', 388
    .return ()
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!cursor_start_subcapture" :anon :subid("37_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_1771
    .param pmc param_1772
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 417
    .lex "self", param_1771
    .lex "$from", param_1772
.annotate 'line', 418
    new $P102, "Undef"
    set $P1773, $P102
    .lex "$new", $P1773
    set $P103, param_1771
    nqp_decontainerize $P104, $P103
    repr_instance_of $P105, $P104
    set $P1773, $P105
.annotate 'line', 419
    set $P103, $P1773
    unless_null $P103, vivify_831
    new $P103, "Undef"
  vivify_831:
    find_lex $P104, "$?CLASS"
    unless_null $P104, vivify_832
    new $P104, "Undef"
  vivify_832:
    set $P105, param_1771
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_get_attr_obj $P108, $P106, $P107, "$!orig", -1
    unless_null $P108, vivify_833
    new $P108, "Undef"
  vivify_833:
    setattribute $P103, $P104, "$!orig", $P108
.annotate 'line', 420
    set $P103, $P1773
    unless_null $P103, vivify_834
    new $P103, "Undef"
  vivify_834:
    find_lex $P104, "$?CLASS"
    unless_null $P104, vivify_835
    new $P104, "Undef"
  vivify_835:
    set $P105, param_1771
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_get_attr_str $S1774, $P106, $P107, "$!target", -1
    repr_bind_attr_str $P103, $P104, "$!target", $S1774
.annotate 'line', 421
    set $P103, $P1773
    unless_null $P103, vivify_836
    new $P103, "Undef"
  vivify_836:
    find_lex $P104, "$?CLASS"
    unless_null $P104, vivify_837
    new $P104, "Undef"
  vivify_837:
    set $P105, param_1772
    unless_null $P105, vivify_838
    new $P105, "Undef"
  vivify_838:
    set $I100, $P105
    repr_bind_attr_int $P103, $P104, "$!from", $I100
.annotate 'line', 422
    set $P103, $P1773
    unless_null $P103, vivify_839
    new $P103, "Undef"
  vivify_839:
    find_lex $P104, "$?CLASS"
    unless_null $P104, vivify_840
    new $P104, "Undef"
  vivify_840:
    repr_bind_attr_int $P103, $P104, "$!pos", -3
.annotate 'line', 417
    set $P103, $P1773
    unless_null $P103, vivify_841
    new $P103, "Undef"
  vivify_841:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!cursor_capture" :anon :subid("38_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_1776
    .param pmc param_1777
    .param pmc param_1778
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 426
    .lex "self", param_1776
    .lex "$capture", param_1777
    .lex "$name", param_1778
.annotate 'line', 427
    null $P102
    set $P103, param_1776
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$?CLASS"
    repr_bind_attr_obj $P104, $P105, "$!match", -1, $P102
.annotate 'line', 428
    set $P102, param_1776
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_obj $P105, $P103, $P104, "$!cstack", -1
    unless_null $P105, vivify_842
    new $P105, "Undef"
  vivify_842:
    defined $I100, $P105
    if $I100, unless_1779_end
    new $P106, "ResizablePMCArray"
    set $P107, param_1776
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_bind_attr_obj $P108, $P109, "$!cstack", -1, $P106
  unless_1779_end:
.annotate 'line', 429
    set $P102, param_1776
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_obj $P105, $P103, $P104, "$!cstack", -1
    unless_null $P105, vivify_843
    new $P105, "Undef"
  vivify_843:
    set $P106, param_1777
    unless_null $P106, vivify_844
    new $P106, "Undef"
  vivify_844:
    push $P105, $P106
.annotate 'line', 430
    set $P102, param_1777
    unless_null $P102, vivify_845
    new $P102, "Undef"
  vivify_845:
    find_lex $P103, "$?CLASS"
    unless_null $P103, vivify_846
    new $P103, "Undef"
  vivify_846:
    set $P104, param_1778
    unless_null $P104, vivify_847
    new $P104, "Undef"
  vivify_847:
    setattribute $P102, $P103, "$!name", $P104
.annotate 'line', 431
    set $P102, param_1776
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_obj $P105, $P103, $P104, "$!bstack", -1
    unless_null $P105, vivify_848
    new $P105, "Undef"
  vivify_848:
    push $P105, 0
.annotate 'line', 432
    set $P102, param_1776
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_obj $P105, $P103, $P104, "$!bstack", -1
    unless_null $P105, vivify_849
    new $P105, "Undef"
  vivify_849:
    set $P106, param_1776
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_int $I1780, $P107, $P108, "$!pos", -1
    push $P105, $I1780
.annotate 'line', 433
    set $P102, param_1776
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_obj $P105, $P103, $P104, "$!bstack", -1
    unless_null $P105, vivify_850
    new $P105, "Undef"
  vivify_850:
    push $P105, 0
.annotate 'line', 434
    set $P102, param_1776
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_obj $P105, $P103, $P104, "$!bstack", -1
    unless_null $P105, vivify_851
    new $P105, "Undef"
  vivify_851:
    set $P106, param_1776
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_obj $P109, $P107, $P108, "$!cstack", -1
    unless_null $P109, vivify_852
    new $P109, "Undef"
  vivify_852:
    elements $I100, $P109
    push $P105, $I100
.annotate 'line', 426
    set $P102, param_1776
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_obj $P105, $P103, $P104, "$!cstack", -1
    unless_null $P105, vivify_853
    new $P105, "Undef"
  vivify_853:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!cursor_push_cstack" :anon :subid("39_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_1782
    .param pmc param_1783
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 438
    .lex "self", param_1782
    .lex "$capture", param_1783
.annotate 'line', 439
    set $P102, param_1782
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_obj $P105, $P103, $P104, "$!cstack", -1
    unless_null $P105, vivify_854
    new $P105, "Undef"
  vivify_854:
    defined $I100, $P105
    if $I100, unless_1784_end
    new $P106, "ResizablePMCArray"
    set $P107, param_1782
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_bind_attr_obj $P108, $P109, "$!cstack", -1, $P106
  unless_1784_end:
.annotate 'line', 440
    set $P102, param_1782
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_obj $P105, $P103, $P104, "$!cstack", -1
    unless_null $P105, vivify_855
    new $P105, "Undef"
  vivify_855:
    set $P106, param_1783
    unless_null $P106, vivify_856
    new $P106, "Undef"
  vivify_856:
    push $P105, $P106
.annotate 'line', 438
    set $P102, param_1782
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_obj $P105, $P103, $P104, "$!cstack", -1
    unless_null $P105, vivify_857
    new $P105, "Undef"
  vivify_857:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!cursor_pass" :anon :subid("40_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_1786
    .param pmc param_1787
    .param pmc param_1788 :optional
    .param int has_param_1788 :opt_flag
    .param pmc param_1789 :optional :named("backtrack")
    .param int has_param_1789 :opt_flag
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 445
    .lex "self", param_1786
    .lex "$pos", param_1787
    if has_param_1788, optparam_858
    new $P102, "Undef"
    set param_1788, $P102
  optparam_858:
    .lex "$name", param_1788
    if has_param_1789, optparam_859
    new $P103, "Undef"
    set param_1789, $P103
  optparam_859:
    .lex "$backtrack", param_1789
.annotate 'line', 446
    find_lex $P104, "$pass_mark"
    unless_null $P104, vivify_860
    new $P104, "Undef"
  vivify_860:
    set $P105, param_1786
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_bind_attr_obj $P106, $P107, "$!match", -1, $P104
.annotate 'line', 447
    set $P104, param_1787
    unless_null $P104, vivify_861
    new $P104, "Undef"
  vivify_861:
    set $I100, $P104
    set $P105, param_1786
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_bind_attr_int $P106, $P107, "$!pos", -1, $I100
.annotate 'line', 448
    set $P104, param_1789
    unless_null $P104, vivify_862
    new $P104, "Undef"
  vivify_862:
    unless $P104, if_1790_end
    set $P105, param_1786
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_get_attr_obj $P108, $P106, $P107, "$!regexsub", -1
    unless_null $P108, vivify_863
    new $P108, "Undef"
  vivify_863:
    set $P109, param_1786
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_bind_attr_obj $P110, $P111, "$!restart", -1, $P108
  if_1790_end:
.annotate 'line', 450
    set $P105, param_1788
    unless_null $P105, vivify_864
    new $P105, "Undef"
  vivify_864:
    if $P105, if_1791
    set $P104, $P105
    goto if_1791_end
  if_1791:
    set $P106, param_1786
    nqp_decontainerize $P107, $P106
    set $P108, param_1788
    unless_null $P108, vivify_865
    new $P108, "Undef"
  vivify_865:
    $P109 = $P107."!reduce"($P108)
    set $P104, $P109
  if_1791_end:
.annotate 'line', 445
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!cursor_fail" :anon :subid("41_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_1793
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 453
    .lex "self", param_1793
.annotate 'line', 454
    null $P102
    set $P103, param_1793
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$?CLASS"
    repr_bind_attr_obj $P104, $P105, "$!match", -1, $P102
.annotate 'line', 455
    null $P102
    set $P103, param_1793
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$?CLASS"
    repr_bind_attr_obj $P104, $P105, "$!bstack", -1, $P102
.annotate 'line', 456
    set $P102, param_1793
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_bind_attr_int $P103, $P104, "$!pos", -1, -3
.annotate 'line', 453
    .return (-3)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!cursor_next" :anon :subid("42_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_1795
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 459
    .const 'Sub' $P1798 = "89_1338064436.26" 
    capture_lex $P1798
    .lex "self", param_1795
.annotate 'line', 460
    set $P103, param_1795
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$?CLASS"
    repr_get_attr_obj $P106, $P104, $P105, "$!restart", -1
    unless_null $P106, vivify_866
    new $P106, "Undef"
  vivify_866:
    if $P106, if_1796
.annotate 'line', 463
    .const 'Sub' $P1798 = "89_1338064436.26" 
    capture_lex $P1798
    $P109 = $P1798()
    set $P102, $P109
.annotate 'line', 460
    goto if_1796_end
  if_1796:
.annotate 'line', 461
    set $P107, param_1795
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_obj $P110, $P108, $P109, "$!restart", -1
    unless_null $P110, vivify_869
    new $P110, "Undef"
  vivify_869:
    set $P111, param_1795
    nqp_decontainerize $P112, $P111
    $P113 = $P110($P112)
.annotate 'line', 460
    set $P102, $P113
  if_1796_end:
.annotate 'line', 459
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block1797"  :anon :subid("89_1338064436.26") :outer("42_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 464
    new $P107, "Undef"
    set $P1799, $P107
    .lex "$cur", $P1799
    find_lex $P108, "self"
    nqp_decontainerize $P109, $P108
    $P110 = $P109."!cursor_start"()
    set $P1799, $P110
.annotate 'line', 465
    set $P108, $P1799
    unless_null $P108, vivify_867
    new $P108, "Undef"
  vivify_867:
    $P108."!cursor_fail"()
.annotate 'line', 463
    set $P108, $P1799
    unless_null $P108, vivify_868
    new $P108, "Undef"
  vivify_868:
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!reduce" :anon :subid("43_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_1801
    .param pmc param_1802
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 470
    .lex "self", param_1801
    .lex "$name", param_1802
.annotate 'line', 471
    new $P102, "Undef"
    set $P1803, $P102
    .lex "$actions", $P1803
    find_dynamic_lex $P103, "$*ACTIONS"
    set $P1803, $P103
.annotate 'line', 473
    set $P104, $P1803
    unless_null $P104, vivify_870
    new $P104, "Undef"
  vivify_870:
    set $P105, param_1802
    unless_null $P105, vivify_871
    new $P105, "Undef"
  vivify_871:
    set $S100, $P105
    can $I100, $P104, $S100
    if $I100, if_1804
    new $P103, 'Integer'
    set $P103, $I100
    goto if_1804_end
  if_1804:
.annotate 'line', 472
    set $P106, $P1803
    unless_null $P106, vivify_872
    new $P106, "Undef"
  vivify_872:
    set $P107, param_1802
    unless_null $P107, vivify_873
    new $P107, "Undef"
  vivify_873:
    set $S101, $P107
    find_method $P108, $P106, $S101
    set $P109, $P1803
    unless_null $P109, vivify_874
    new $P109, "Undef"
  vivify_874:
    set $P110, param_1801
    nqp_decontainerize $P111, $P110
    $P112 = $P111."MATCH"()
    $P113 = $P108($P109, $P112)
    set $P103, $P113
  if_1804_end:
.annotate 'line', 470
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!reduce_with_match" :anon :subid("44_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_1806
    .param pmc param_1807
    .param pmc param_1808
    .param pmc param_1809
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 476
    .lex "self", param_1806
    .lex "$name", param_1807
    .lex "$key", param_1808
    .lex "$match", param_1809
.annotate 'line', 477
    new $P102, "Undef"
    set $P1810, $P102
    .lex "$actions", $P1810
    find_dynamic_lex $P103, "$*ACTIONS"
    set $P1810, $P103
.annotate 'line', 479
    set $P104, $P1810
    unless_null $P104, vivify_875
    new $P104, "Undef"
  vivify_875:
    set $P105, param_1807
    unless_null $P105, vivify_876
    new $P105, "Undef"
  vivify_876:
    set $S100, $P105
    can $I100, $P104, $S100
    if $I100, if_1811
    new $P103, 'Integer'
    set $P103, $I100
    goto if_1811_end
  if_1811:
.annotate 'line', 478
    set $P106, $P1810
    unless_null $P106, vivify_877
    new $P106, "Undef"
  vivify_877:
    set $P107, param_1807
    unless_null $P107, vivify_878
    new $P107, "Undef"
  vivify_878:
    set $S101, $P107
    find_method $P108, $P106, $S101
    set $P109, $P1810
    unless_null $P109, vivify_879
    new $P109, "Undef"
  vivify_879:
    set $P110, param_1809
    unless_null $P110, vivify_880
    new $P110, "Undef"
  vivify_880:
    set $P111, param_1808
    unless_null $P111, vivify_881
    new $P111, "Undef"
  vivify_881:
    $P112 = $P108($P109, $P110, $P111)
    set $P103, $P112
  if_1811_end:
.annotate 'line', 476
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.include "except_types.pasm"
.sub "!protoregex" :anon :subid("45_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_1813
    .param pmc param_1814
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 482
    .const 'Sub' $P1829 = "91_1338064436.26" 
    capture_lex $P1829
    .const 'Sub' $P1823 = "90_1338064436.26" 
    capture_lex $P1823
    .lex "self", param_1813
    .lex "$name", param_1814
.annotate 'line', 484
    new $P102, "Undef"
    set $P1815, $P102
    .lex "$nfa", $P1815
.annotate 'line', 485
    $P1817 = root_new ['parrot';'ResizablePMCArray']
    set $P1816, $P1817
    .lex "@fates", $P1816
.annotate 'line', 488
    $P1819 = root_new ['parrot';'ResizablePMCArray']
    set $P1818, $P1819
    .lex "@rxfate", $P1818
.annotate 'line', 489
    new $P103, "Undef"
    set $P1820, $P103
    .lex "$cur", $P1820
.annotate 'line', 490
    new $P104, "Undef"
    set $P1821, $P104
    .lex "$i", $P1821
.annotate 'line', 484
    set $P105, param_1813
    nqp_decontainerize $P106, $P105
    get_how $P107, $P106
    set $P108, param_1813
    nqp_decontainerize $P109, $P108
    set $P110, param_1814
    unless_null $P110, vivify_882
    new $P110, "Undef"
  vivify_882:
    .const 'Sub' $P1823 = "90_1338064436.26" 
    newclosure $P1824, $P1823
    $P111 = $P107."cache"($P109, $P110, $P1824)
    set $P1815, $P111
.annotate 'line', 485
    set $P105, $P1815
    unless_null $P105, vivify_884
    new $P105, "Undef"
  vivify_884:
    set $P106, param_1813
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_str $S1825, $P107, $P108, "$!target", -1
    set $P109, param_1813
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_get_attr_int $I1826, $P110, $P111, "$!pos", -1
    $P112 = $P105."run"($S1825, $I1826)
    set $P1816, $P112
.annotate 'line', 488
    set $P105, $P1815
    unless_null $P105, vivify_885
    new $P105, "Undef"
  vivify_885:
    $P106 = $P105."states"()
    set $P107, $P106[0]
    unless_null $P107, vivify_886
    new $P107, "Undef"
  vivify_886:
    set $P1818, $P107
.annotate 'line', 482
    set $P105, $P1820
    unless_null $P105, vivify_887
    new $P105, "Undef"
  vivify_887:
.annotate 'line', 490
    set $P1827, $P1816
    unless_null $P1827, vivify_888
    $P1827 = root_new ['parrot';'ResizablePMCArray']
  vivify_888:
    elements $I100, $P1827
    new $P105, 'Integer'
    set $P105, $I100
    set $P1821, $P105
.annotate 'line', 491
    new $P108, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P108, loop1834_handler
    push_eh $P108
  loop1834_test:
    set $P105, $P1821
    unless_null $P105, vivify_889
    new $P105, "Undef"
  vivify_889:
    set $N100, $P105
    set $N101, 0
    isgt $I100, $N100, $N101
    unless $I100, loop1834_done
  loop1834_redo:
    .const 'Sub' $P1829 = "91_1338064436.26" 
    capture_lex $P1829
    $P1829()
  loop1834_next:
    goto loop1834_test
  loop1834_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P109, exception, 'type'
    eq $P109, .CONTROL_LOOP_NEXT, loop1834_next
    eq $P109, .CONTROL_LOOP_REDO, loop1834_redo
  loop1834_done:
    pop_eh 
.annotate 'line', 498
    set $P105, $P1820
    unless_null $P105, vivify_897
    new $P105, "Undef"
  vivify_897:
    set $P1835, $P105
    defined $I1837, $P1835
    if $I1837, default_1836
    set $P106, param_1813
    nqp_decontainerize $P107, $P106
    $P108 = $P107."!cursor_start"()
    set $P1835, $P108
  default_1836:
.annotate 'line', 482
    .return ($P1835)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block1822"  :anon :subid("90_1338064436.26") :outer("45_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 484
    find_lex $P111, "self"
    nqp_decontainerize $P112, $P111
    find_lex $P113, "$name"
    unless_null $P113, vivify_883
    new $P113, "Undef"
  vivify_883:
    $P114 = $P112."!protoregex_nfa"($P113)
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block1828"  :anon :subid("91_1338064436.26") :outer("45_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 493
    new $P106, "Undef"
    set $P1830, $P106
    .lex "$rxname", $P1830
.annotate 'line', 492
    find_lex $P107, "$i"
    unless_null $P107, vivify_890
    new $P107, "Undef"
  vivify_890:
    sub $P108, $P107, 1
    store_lex "$i", $P108
.annotate 'line', 493
    find_lex $P107, "$i"
    unless_null $P107, vivify_891
    new $P107, "Undef"
  vivify_891:
    set $I101, $P107
    find_lex $P1832, "@fates"
    unless_null $P1832, vivify_892
    $P1832 = root_new ['parrot';'ResizablePMCArray']
  vivify_892:
    set $I102, $P1832[$I101]
    find_lex $P1831, "@rxfate"
    unless_null $P1831, vivify_893
    $P1831 = root_new ['parrot';'ResizablePMCArray']
  vivify_893:
    set $P108, $P1831[$I102]
    set $P1830, $P108
.annotate 'line', 495
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    set $P109, $P1830
    unless_null $P109, vivify_894
    new $P109, "Undef"
  vivify_894:
    set $S100, $P109
    $P110 = $P108.$S100()
    store_lex "$cur", $P110
.annotate 'line', 496
    find_lex $P108, "$cur"
    unless_null $P108, vivify_895
    new $P108, "Undef"
  vivify_895:
    find_lex $P109, "$?CLASS"
    unless_null $P109, vivify_896
    new $P109, "Undef"
  vivify_896:
    repr_get_attr_int $I101, $P108, $P109, "$!pos"
    set $N102, $I101
    set $N103, 0
    isge $I102, $N102, $N103
    if $I102, if_1833
    new $P107, 'Integer'
    set $P107, $I102
    goto if_1833_end
  if_1833:
    die 0, .CONTROL_LOOP_LAST
  if_1833_end:
.annotate 'line', 491
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.include "except_types.pasm"
.sub "!protoregex_nfa" :anon :subid("46_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_1839
    .param pmc param_1840
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 501
    .const 'Sub' $P1855 = "93_1338064436.26" 
    capture_lex $P1855
    .const 'Sub' $P1849 = "92_1338064436.26" 
    capture_lex $P1849
    .lex "self", param_1839
    .lex "$name", param_1840
.annotate 'line', 502
    $P1842 = root_new ['parrot';'Hash']
    set $P1841, $P1842
    .lex "%protorx", $P1841
.annotate 'line', 503
    new $P102, "Undef"
    set $P1843, $P102
    .lex "$nfa", $P1843
.annotate 'line', 504
    $P1845 = root_new ['parrot';'ResizablePMCArray']
    set $P1844, $P1845
    .lex "@fates", $P1844
.annotate 'line', 505
    new $P103, "Undef"
    set $P1846, $P103
    .lex "$start", $P1846
.annotate 'line', 506
    new $P104, "Undef"
    set $P1847, $P104
    .lex "$fate", $P1847
.annotate 'line', 502
    set $P105, param_1839
    nqp_decontainerize $P106, $P105
    get_how $P107, $P106
    set $P108, param_1839
    nqp_decontainerize $P109, $P108
    .const 'Sub' $P1849 = "92_1338064436.26" 
    newclosure $P1850, $P1849
    $P110 = $P107."cache"($P109, "!protoregex_table", $P1850)
    set $P1841, $P110
.annotate 'line', 503
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "QRegex"
    get_who $P107, $P106
    set $P108, $P107["NFA"]
    $P109 = $P108."new"()
    set $P1843, $P109
.annotate 'line', 504
    set $P105, $P1843
    unless_null $P105, vivify_898
    new $P105, "Undef"
  vivify_898:
    $P106 = $P105."states"()
    set $P107, $P106[0]
    unless_null $P107, vivify_899
    new $P107, "Undef"
  vivify_899:
    set $P1844, $P107
.annotate 'line', 505
    new $P105, "Float"
    assign $P105, 1
    set $P1846, $P105
.annotate 'line', 506
    new $P105, "Float"
    assign $P105, 0
    set $P1847, $P105
.annotate 'line', 507
    set $P105, param_1840
    unless_null $P105, vivify_900
    new $P105, "Undef"
  vivify_900:
    set $S100, $P105
    set $P1852, $P1841
    unless_null $P1852, vivify_901
    $P1852 = root_new ['parrot';'Hash']
  vivify_901:
    exists $I100, $P1852[$S100]
    unless $I100, if_1851_end
.annotate 'line', 508
    set $P107, param_1840
    unless_null $P107, vivify_902
    new $P107, "Undef"
  vivify_902:
    set $P1853, $P1841
    unless_null $P1853, vivify_903
    $P1853 = root_new ['parrot';'Hash']
  vivify_903:
    set $P108, $P1853[$P107]
    unless_null $P108, vivify_904
    new $P108, "Undef"
  vivify_904:
    defined $I101, $P108
    unless $I101, for_undef_905
    iter $P106, $P108
    new $P110, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P110, loop1858_handler
    push_eh $P110
  loop1858_test:
    unless $P106, loop1858_done
    shift $P109, $P106
  loop1858_redo:
    .const 'Sub' $P1855 = "93_1338064436.26" 
    capture_lex $P1855
    $P1855($P109)
  loop1858_next:
    goto loop1858_test
  loop1858_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P111, exception, 'type'
    eq $P111, .CONTROL_LOOP_NEXT, loop1858_next
    eq $P111, .CONTROL_LOOP_REDO, loop1858_redo
  loop1858_done:
    pop_eh 
  for_undef_905:
  if_1851_end:
.annotate 'line', 501
    set $P105, $P1843
    unless_null $P105, vivify_914
    new $P105, "Undef"
  vivify_914:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block1848"  :anon :subid("92_1338064436.26") :outer("46_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 502
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    $P112 = $P111."!protoregex_table"()
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block1854"  :anon :subid("93_1338064436.26") :outer("46_1338064436.26")
    .param pmc param_1856
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 508
    .lex "$rxname", param_1856
.annotate 'line', 509
    find_lex $P110, "$fate"
    unless_null $P110, vivify_906
    new $P110, "Undef"
  vivify_906:
    add $P111, $P110, 1
    store_lex "$fate", $P111
.annotate 'line', 510
    set $P110, param_1856
    unless_null $P110, vivify_907
    new $P110, "Undef"
  vivify_907:
    find_lex $P111, "$fate"
    unless_null $P111, vivify_908
    new $P111, "Undef"
  vivify_908:
    set $I102, $P111
    find_lex $P1857, "@fates"
    unless_null $P1857, vivify_909
    $P1857 = root_new ['parrot';'ResizablePMCArray']
    store_lex "@fates", $P1857
  vivify_909:
    set $P1857[$I102], $P110
.annotate 'line', 511
    find_lex $P110, "$nfa"
    unless_null $P110, vivify_910
    new $P110, "Undef"
  vivify_910:
    find_lex $P111, "$start"
    unless_null $P111, vivify_911
    new $P111, "Undef"
  vivify_911:
    find_lex $P112, "$fate"
    unless_null $P112, vivify_912
    new $P112, "Undef"
  vivify_912:
    find_lex $P113, "self"
    nqp_decontainerize $P114, $P113
    set $P115, param_1856
    unless_null $P115, vivify_913
    new $P115, "Undef"
  vivify_913:
    $P116 = $P110."mergesubrule"($P111, 0, $P112, $P114, $P115)
.annotate 'line', 508
    .return ($P116)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.include "except_types.pasm"
.sub "!protoregex_table" :anon :subid("47_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_1860
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 517
    .const 'Sub' $P1865 = "94_1338064436.26" 
    capture_lex $P1865
    .lex "self", param_1860
.annotate 'line', 518
    $P1862 = root_new ['parrot';'Hash']
    set $P1861, $P1862
    .lex "%protorx", $P1861
.annotate 'line', 517
    set $P1863, $P1861
    unless_null $P1863, vivify_915
    $P1863 = root_new ['parrot';'Hash']
  vivify_915:
.annotate 'line', 519
    set $P103, param_1860
    nqp_decontainerize $P104, $P103
    get_how $P105, $P104
    set $P106, param_1860
    nqp_decontainerize $P107, $P106
    $P108 = $P105."methods"($P107)
    defined $I100, $P108
    unless $I100, for_undef_916
    iter $P102, $P108
    new $P113, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P113, loop1877_handler
    push_eh $P113
  loop1877_test:
    unless $P102, loop1877_done
    shift $P109, $P102
  loop1877_redo:
    .const 'Sub' $P1865 = "94_1338064436.26" 
    capture_lex $P1865
    $P1865($P109)
  loop1877_next:
    goto loop1877_test
  loop1877_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P114, exception, 'type'
    eq $P114, .CONTROL_LOOP_NEXT, loop1877_next
    eq $P114, .CONTROL_LOOP_REDO, loop1877_redo
  loop1877_done:
    pop_eh 
  for_undef_916:
.annotate 'line', 517
    set $P1878, $P1861
    unless_null $P1878, vivify_930
    $P1878 = root_new ['parrot';'Hash']
  vivify_930:
    .return ($P1878)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block1864"  :anon :subid("94_1338064436.26") :outer("47_1338064436.26")
    .param pmc param_1866
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 519
    .const 'Sub' $P1871 = "95_1338064436.26" 
    capture_lex $P1871
    .lex "$meth", param_1866
.annotate 'line', 520
    new $P110, "Undef"
    set $P1867, $P110
    .lex "$methname", $P1867
.annotate 'line', 521
    new $P111, "Undef"
    set $P1868, $P111
    .lex "$sympos", $P1868
.annotate 'line', 520
    set $P112, param_1866
    unless_null $P112, vivify_917
    new $P112, "Undef"
  vivify_917:
    set $S100, $P112
    new $P113, 'String'
    set $P113, $S100
    set $P1867, $P113
.annotate 'line', 521
    set $P112, $P1867
    unless_null $P112, vivify_918
    new $P112, "Undef"
  vivify_918:
    set $S100, $P112
    index $I101, $S100, ":sym<"
    new $P113, 'Integer'
    set $P113, $I101
    set $P1868, $P113
.annotate 'line', 522
    set $P113, $P1868
    unless_null $P113, vivify_919
    new $P113, "Undef"
  vivify_919:
    set $N100, $P113
    set $N101, 0
    isgt $I101, $N100, $N101
    if $I101, if_1869
    new $P112, 'Integer'
    set $P112, $I101
    goto if_1869_end
  if_1869:
    .const 'Sub' $P1871 = "95_1338064436.26" 
    capture_lex $P1871
    $P115 = $P1871()
    set $P112, $P115
  if_1869_end:
.annotate 'line', 519
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block1870"  :anon :subid("95_1338064436.26") :outer("94_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 523
    new $P114, "Undef"
    set $P1872, $P114
    .lex "$prefix", $P1872
    find_lex $P115, "$methname"
    unless_null $P115, vivify_920
    new $P115, "Undef"
  vivify_920:
    set $S100, $P115
    find_lex $P116, "$sympos"
    unless_null $P116, vivify_921
    new $P116, "Undef"
  vivify_921:
    set $I102, $P116
    substr $S101, $S100, 0, $I102
    new $P117, 'String'
    set $P117, $S101
    set $P1872, $P117
.annotate 'line', 524
    set $P115, $P1872
    unless_null $P115, vivify_922
    new $P115, "Undef"
  vivify_922:
    set $S100, $P115
    find_lex $P1874, "%protorx"
    unless_null $P1874, vivify_923
    $P1874 = root_new ['parrot';'Hash']
  vivify_923:
    exists $I102, $P1874[$S100]
    if $I102, unless_1873_end
    new $P116, "ResizablePMCArray"
    set $P117, $P1872
    unless_null $P117, vivify_924
    new $P117, "Undef"
  vivify_924:
    find_lex $P1875, "%protorx"
    unless_null $P1875, vivify_925
    $P1875 = root_new ['parrot';'Hash']
    store_lex "%protorx", $P1875
  vivify_925:
    set $P1875[$P117], $P116
  unless_1873_end:
.annotate 'line', 525
    set $P115, $P1872
    unless_null $P115, vivify_926
    new $P115, "Undef"
  vivify_926:
    find_lex $P1876, "%protorx"
    unless_null $P1876, vivify_927
    $P1876 = root_new ['parrot';'Hash']
  vivify_927:
    set $P116, $P1876[$P115]
    unless_null $P116, vivify_928
    new $P116, "Undef"
  vivify_928:
    find_lex $P117, "$methname"
    unless_null $P117, vivify_929
    new $P117, "Undef"
  vivify_929:
    push $P116, $P117
.annotate 'line', 522
    .return ($P116)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.include "except_types.pasm"
.sub "!BACKREF" :anon :subid("48_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_1880
    .param pmc param_1881
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 531
    .const 'Sub' $P1893 = "96_1338064436.26" 
    capture_lex $P1893
    .lex "self", param_1880
    .lex "$name", param_1881
.annotate 'line', 532
    new $P102, "Undef"
    set $P1882, $P102
    .lex "$cur", $P1882
.annotate 'line', 533
    new $P103, "Undef"
    set $P1883, $P103
    .lex "$n", $P1883
.annotate 'line', 532
    set $P104, param_1880
    nqp_decontainerize $P105, $P104
    $P106 = $P105."!cursor_start"()
    set $P1882, $P106
.annotate 'line', 533
    set $P105, param_1880
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_get_attr_obj $P108, $P106, $P107, "$!cstack", -1
    unless_null $P108, vivify_931
    new $P108, "Undef"
  vivify_931:
    if $P108, if_1884
    new $P115, "Float"
    assign $P115, -1
    set $P104, $P115
    goto if_1884_end
  if_1884:
    set $P109, param_1880
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_get_attr_obj $P112, $P110, $P111, "$!cstack", -1
    unless_null $P112, vivify_932
    new $P112, "Undef"
  vivify_932:
    elements $I100, $P112
    new $P113, 'Integer'
    set $P113, $I100
    sub $P114, $P113, 1
    set $P104, $P114
  if_1884_end:
    set $P1883, $P104
.annotate 'line', 534
    new $P123, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P123, loop1890_handler
    push_eh $P123
  loop1890_test:
    set $P105, $P1883
    unless_null $P105, vivify_933
    new $P105, "Undef"
  vivify_933:
    set $N100, $P105
    set $N101, 0
    isge $I100, $N100, $N101
    if $I100, if_1885
    new $P104, 'Integer'
    set $P104, $I100
    goto if_1885_end
  if_1885:
    set $P107, $P1883
    unless_null $P107, vivify_934
    new $P107, "Undef"
  vivify_934:
    set $I101, $P107
    set $P108, param_1880
    nqp_decontainerize $P109, $P108
    find_lex $P110, "$?CLASS"
    repr_get_attr_obj $P1887, $P109, $P110, "$!cstack", -1
    unless_null $P1887, vivify_935
    $P1887 = root_new ['parrot';'ResizablePMCArray']
  vivify_935:
    set $P111, $P1887[$I101]
    unless_null $P111, vivify_936
    new $P111, "Undef"
  vivify_936:
    find_lex $P112, "$?CLASS"
    unless_null $P112, vivify_937
    new $P112, "Undef"
  vivify_937:
    getattribute $P113, $P111, $P112, "$!name"
    isnull $I102, $P113
    unless $I102, unless_1886
    new $P106, 'Integer'
    set $P106, $I102
    goto unless_1886_end
  unless_1886:
.annotate 'line', 535
    set $P114, $P1883
    unless_null $P114, vivify_938
    new $P114, "Undef"
  vivify_938:
    set $I103, $P114
    set $P115, param_1880
    nqp_decontainerize $P116, $P115
    find_lex $P117, "$?CLASS"
    repr_get_attr_obj $P1888, $P116, $P117, "$!cstack", -1
    unless_null $P1888, vivify_939
    $P1888 = root_new ['parrot';'ResizablePMCArray']
  vivify_939:
    set $P118, $P1888[$I103]
    unless_null $P118, vivify_940
    new $P118, "Undef"
  vivify_940:
    find_lex $P119, "$?CLASS"
    unless_null $P119, vivify_941
    new $P119, "Undef"
  vivify_941:
    getattribute $P120, $P118, $P119, "$!name"
    set $S100, $P120
    set $P121, param_1881
    unless_null $P121, vivify_942
    new $P121, "Undef"
  vivify_942:
    set $S101, $P121
    isne $I104, $S100, $S101
    new $P106, 'Integer'
    set $P106, $I104
  unless_1886_end:
.annotate 'line', 534
    set $P104, $P106
  if_1885_end:
    unless $P104, loop1890_done
  loop1890_redo:
    set $P122, $P1883
    unless_null $P122, vivify_943
    new $P122, "Undef"
  vivify_943:
    clone $P1889, $P122
    dec $P122
  loop1890_next:
    goto loop1890_test
  loop1890_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P124, exception, 'type'
    eq $P124, .CONTROL_LOOP_NEXT, loop1890_next
    eq $P124, .CONTROL_LOOP_REDO, loop1890_redo
  loop1890_done:
    pop_eh 
.annotate 'line', 536
    set $P104, $P1883
    unless_null $P104, vivify_944
    new $P104, "Undef"
  vivify_944:
    set $N100, $P104
    set $N101, 0
    isge $I100, $N100, $N101
    unless $I100, if_1891_end
    .const 'Sub' $P1893 = "96_1338064436.26" 
    capture_lex $P1893
    $P1893()
  if_1891_end:
.annotate 'line', 531
    set $P104, $P1882
    unless_null $P104, vivify_955
    new $P104, "Undef"
  vivify_955:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block1892"  :anon :subid("96_1338064436.26") :outer("48_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 537
    new $P105, "Undef"
    set $P1894, $P105
    .lex "$subcur", $P1894
.annotate 'line', 538
    new $P106, "Undef"
    set $P1895, $P106
    .lex "$litlen", $P1895
.annotate 'line', 537
    find_lex $P107, "$n"
    unless_null $P107, vivify_945
    new $P107, "Undef"
  vivify_945:
    set $I101, $P107
    find_lex $P108, "self"
    nqp_decontainerize $P109, $P108
    find_lex $P110, "$?CLASS"
    repr_get_attr_obj $P1896, $P109, $P110, "$!cstack", -1
    unless_null $P1896, vivify_946
    $P1896 = root_new ['parrot';'ResizablePMCArray']
  vivify_946:
    set $P111, $P1896[$I101]
    unless_null $P111, vivify_947
    new $P111, "Undef"
  vivify_947:
    set $P1894, $P111
.annotate 'line', 538
    set $P107, $P1894
    unless_null $P107, vivify_948
    new $P107, "Undef"
  vivify_948:
    $P108 = $P107."pos"()
    set $P109, $P1894
    unless_null $P109, vivify_949
    new $P109, "Undef"
  vivify_949:
    $N102 = $P109."from"()
    sub $P110, $P108, $N102
    set $P1895, $P110
.annotate 'line', 540
    find_lex $P108, "self"
    nqp_decontainerize $P109, $P108
    find_lex $P110, "$?CLASS"
    repr_get_attr_str $S1898, $P109, $P110, "$!target", -1
    find_lex $P111, "self"
    nqp_decontainerize $P112, $P111
    find_lex $P113, "$?CLASS"
    repr_get_attr_int $I1899, $P112, $P113, "$!pos", -1
    set $P114, $P1895
    unless_null $P114, vivify_950
    new $P114, "Undef"
  vivify_950:
    set $I101, $P114
    substr $S100, $S1898, $I1899, $I101
.annotate 'line', 541
    find_lex $P115, "self"
    nqp_decontainerize $P116, $P115
    find_lex $P117, "$?CLASS"
    repr_get_attr_str $S1900, $P116, $P117, "$!target", -1
    set $P118, $P1894
    unless_null $P118, vivify_951
    new $P118, "Undef"
  vivify_951:
    $I102 = $P118."from"()
    set $P119, $P1895
    unless_null $P119, vivify_952
    new $P119, "Undef"
  vivify_952:
    set $I103, $P119
    substr $S101, $S1900, $I102, $I103
    iseq $I104, $S100, $S101
    if $I104, if_1897
    new $P107, 'Integer'
    set $P107, $I104
    goto if_1897_end
  if_1897:
.annotate 'line', 539
    find_lex $P120, "$cur"
    unless_null $P120, vivify_953
    new $P120, "Undef"
  vivify_953:
    find_lex $P121, "self"
    nqp_decontainerize $P122, $P121
    find_lex $P123, "$?CLASS"
    repr_get_attr_int $I1901, $P122, $P123, "$!pos", -1
    new $P124, 'Integer'
    set $P124, $I1901
    set $P125, $P1895
    unless_null $P125, vivify_954
    new $P125, "Undef"
  vivify_954:
    add $P126, $P124, $P125
    $P127 = $P120."!cursor_pass"($P126, "")
    set $P107, $P127
  if_1897_end:
.annotate 'line', 536
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!LITERAL" :anon :subid("49_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_1903
    .param pmc param_1904
    .param pmc param_1905 :optional
    .param int has_param_1905 :opt_flag
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 546
    .lex "self", param_1903
    .lex "$str", param_1904
    if has_param_1905, optparam_956
    new $P102, "Float"
    assign $P102, 0
    set param_1905, $P102
  optparam_956:
    .lex "$i", param_1905
.annotate 'line', 547
    new $P103, "Undef"
    set $P1906, $P103
    .lex "$cur", $P1906
.annotate 'line', 548
    new $P104, "Undef"
    set $P1907, $P104
    .lex "$litlen", $P1907
.annotate 'line', 547
    set $P105, param_1903
    nqp_decontainerize $P106, $P105
    $P107 = $P106."!cursor_start"()
    set $P1906, $P107
.annotate 'line', 548
    set $P105, param_1904
    unless_null $P105, vivify_957
    new $P105, "Undef"
  vivify_957:
    set $S100, $P105
    length $I100, $S100
    new $P106, 'Integer'
    set $P106, $I100
    set $P1907, $P106
.annotate 'line', 551
    set $P106, param_1905
    unless_null $P106, vivify_958
    new $P106, "Undef"
  vivify_958:
    if $P106, if_1909
.annotate 'line', 552
    set $P115, param_1903
    nqp_decontainerize $P116, $P115
    find_lex $P117, "$?CLASS"
    repr_get_attr_str $S1912, $P116, $P117, "$!target", -1
    set $P118, param_1903
    nqp_decontainerize $P119, $P118
    find_lex $P120, "$?CLASS"
    repr_get_attr_int $I1913, $P119, $P120, "$!pos", -1
    set $P121, $P1907
    unless_null $P121, vivify_959
    new $P121, "Undef"
  vivify_959:
    set $I102, $P121
    substr $S104, $S1912, $I1913, $I102
    set $P122, param_1904
    unless_null $P122, vivify_960
    new $P122, "Undef"
  vivify_960:
    set $S105, $P122
    iseq $I103, $S104, $S105
    new $P105, 'Integer'
    set $P105, $I103
.annotate 'line', 551
    goto if_1909_end
  if_1909:
    set $P107, param_1903
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_str $S1910, $P108, $P109, "$!target", -1
    set $P110, param_1903
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_int $I1911, $P111, $P112, "$!pos", -1
    set $P113, $P1907
    unless_null $P113, vivify_961
    new $P113, "Undef"
  vivify_961:
    set $I100, $P113
    substr $S100, $S1910, $I1911, $I100
    downcase $S101, $S100
    set $P114, param_1904
    unless_null $P114, vivify_962
    new $P114, "Undef"
  vivify_962:
    set $S102, $P114
    downcase $S103, $S102
    iseq $I101, $S101, $S103
    new $P105, 'Integer'
    set $P105, $I101
  if_1909_end:
    unless $P105, if_1908_end
.annotate 'line', 549
    set $P123, $P1906
    unless_null $P123, vivify_963
    new $P123, "Undef"
  vivify_963:
    set $P124, param_1903
    nqp_decontainerize $P125, $P124
    find_lex $P126, "$?CLASS"
    repr_get_attr_int $I1914, $P125, $P126, "$!pos", -1
    new $P127, 'Integer'
    set $P127, $I1914
    set $P128, $P1907
    unless_null $P128, vivify_964
    new $P128, "Undef"
  vivify_964:
    add $P129, $P127, $P128
    $P123."!cursor_pass"($P129)
  if_1908_end:
.annotate 'line', 546
    set $P105, $P1906
    unless_null $P105, vivify_965
    new $P105, "Undef"
  vivify_965:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "at" :anon :subid("50_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_1916
    .param pmc param_1917
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 556
    .lex "self", param_1916
    .lex "$pos", param_1917
.annotate 'line', 557
    new $P102, "Undef"
    set $P1918, $P102
    .lex "$cur", $P1918
    set $P103, param_1916
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P1918, $P105
.annotate 'line', 558
    set $P103, param_1917
    unless_null $P103, vivify_966
    new $P103, "Undef"
  vivify_966:
    set $N100, $P103
    set $P104, param_1916
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_int $I1920, $P105, $P106, "$!pos", -1
    set $N101, $I1920
    iseq $I100, $N100, $N101
    unless $I100, if_1919_end
    set $P107, $P1918
    unless_null $P107, vivify_967
    new $P107, "Undef"
  vivify_967:
    set $P108, param_1916
    nqp_decontainerize $P109, $P108
    find_lex $P110, "$?CLASS"
    repr_get_attr_int $I1921, $P109, $P110, "$!pos", -1
    $P107."!cursor_pass"($I1921)
  if_1919_end:
.annotate 'line', 556
    set $P103, $P1918
    unless_null $P103, vivify_968
    new $P103, "Undef"
  vivify_968:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "before" :anon :subid("51_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_1923
    .param pmc param_1924
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 562
    .lex "self", param_1923
    .lex "$regex", param_1924
.annotate 'line', 563
    new $P102, "Undef"
    set $P1925, $P102
    .lex "$cur", $P1925
    set $P103, param_1923
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P1925, $P105
.annotate 'line', 564
    set $P103, $P1925
    unless_null $P103, vivify_969
    new $P103, "Undef"
  vivify_969:
    find_lex $P104, "$?CLASS"
    unless_null $P104, vivify_970
    new $P104, "Undef"
  vivify_970:
    set $P105, param_1923
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_get_attr_int $I1926, $P106, $P107, "$!pos", -1
    repr_bind_attr_int $P103, $P104, "$!pos", $I1926
.annotate 'line', 565
    set $P103, param_1924
    unless_null $P103, vivify_971
    new $P103, "Undef"
  vivify_971:
    set $P104, $P1925
    unless_null $P104, vivify_972
    new $P104, "Undef"
  vivify_972:
    $P105 = $P103($P104)
    find_lex $P106, "$?CLASS"
    unless_null $P106, vivify_973
    new $P106, "Undef"
  vivify_973:
    repr_get_attr_int $I100, $P105, $P106, "$!pos"
    set $N100, $I100
    set $N101, 0
    isge $I101, $N100, $N101
    if $I101, if_1927
.annotate 'line', 567
    set $P111, $P1925
    unless_null $P111, vivify_974
    new $P111, "Undef"
  vivify_974:
    find_lex $P112, "$?CLASS"
    unless_null $P112, vivify_975
    new $P112, "Undef"
  vivify_975:
    repr_bind_attr_int $P111, $P112, "$!pos", -3
    goto if_1927_end
  if_1927:
.annotate 'line', 566
    set $P107, $P1925
    unless_null $P107, vivify_976
    new $P107, "Undef"
  vivify_976:
    set $P108, param_1923
    nqp_decontainerize $P109, $P108
    find_lex $P110, "$?CLASS"
    repr_get_attr_int $I1928, $P109, $P110, "$!pos", -1
    $P107."!cursor_pass"($I1928, "before")
  if_1927_end:
.annotate 'line', 562
    set $P103, $P1925
    unless_null $P103, vivify_977
    new $P103, "Undef"
  vivify_977:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "after" :anon :subid("52_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_1930
    .param pmc param_1931
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 573
    .lex "self", param_1930
    .lex "$regex", param_1931
.annotate 'line', 574
    new $P102, "Undef"
    set $P1932, $P102
    .lex "$cur", $P1932
    set $P103, param_1930
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P1932, $P105
.annotate 'line', 575
    set $P103, $P1932
    unless_null $P103, vivify_978
    new $P103, "Undef"
  vivify_978:
    find_lex $P104, "$?CLASS"
    unless_null $P104, vivify_979
    new $P104, "Undef"
  vivify_979:
    set $P105, param_1930
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_get_attr_str $S1933, $P106, $P107, "$!target", -1
    new $P108, 'String'
    set $P108, $S1933
    $S100 = $P108."reverse"()
    repr_bind_attr_str $P103, $P104, "$!target", $S100
.annotate 'line', 576
    set $P103, $P1932
    unless_null $P103, vivify_980
    new $P103, "Undef"
  vivify_980:
    find_lex $P104, "$?CLASS"
    unless_null $P104, vivify_981
    new $P104, "Undef"
  vivify_981:
    set $P105, param_1930
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_get_attr_str $S1934, $P106, $P107, "$!target", -1
    length $I100, $S1934
    new $P108, 'Integer'
    set $P108, $I100
    set $P109, param_1930
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_get_attr_int $I1935, $P110, $P111, "$!pos", -1
    sub $P112, $P108, $I1935
    set $I101, $P112
    repr_bind_attr_int $P103, $P104, "$!from", $I101
.annotate 'line', 577
    set $P103, $P1932
    unless_null $P103, vivify_982
    new $P103, "Undef"
  vivify_982:
    find_lex $P104, "$?CLASS"
    unless_null $P104, vivify_983
    new $P104, "Undef"
  vivify_983:
    set $P105, param_1930
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_get_attr_str $S1936, $P106, $P107, "$!target", -1
    length $I100, $S1936
    new $P108, 'Integer'
    set $P108, $I100
    set $P109, param_1930
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_get_attr_int $I1937, $P110, $P111, "$!pos", -1
    sub $P112, $P108, $I1937
    set $I101, $P112
    repr_bind_attr_int $P103, $P104, "$!pos", $I101
.annotate 'line', 578
    set $P103, param_1931
    unless_null $P103, vivify_984
    new $P103, "Undef"
  vivify_984:
    set $P104, $P1932
    unless_null $P104, vivify_985
    new $P104, "Undef"
  vivify_985:
    $P105 = $P103($P104)
    find_lex $P106, "$?CLASS"
    unless_null $P106, vivify_986
    new $P106, "Undef"
  vivify_986:
    repr_get_attr_int $I100, $P105, $P106, "$!pos"
    set $N100, $I100
    set $N101, 0
    isge $I101, $N100, $N101
    if $I101, if_1938
.annotate 'line', 580
    set $P111, $P1932
    unless_null $P111, vivify_987
    new $P111, "Undef"
  vivify_987:
    find_lex $P112, "$?CLASS"
    unless_null $P112, vivify_988
    new $P112, "Undef"
  vivify_988:
    repr_bind_attr_int $P111, $P112, "$!pos", -3
    goto if_1938_end
  if_1938:
.annotate 'line', 579
    set $P107, $P1932
    unless_null $P107, vivify_989
    new $P107, "Undef"
  vivify_989:
    set $P108, param_1930
    nqp_decontainerize $P109, $P108
    find_lex $P110, "$?CLASS"
    repr_get_attr_int $I1939, $P109, $P110, "$!pos", -1
    $P107."!cursor_pass"($I1939, "after")
  if_1938_end:
.annotate 'line', 573
    set $P103, $P1932
    unless_null $P103, vivify_990
    new $P103, "Undef"
  vivify_990:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "ws" :anon :subid("53_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_1941
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 584
    .lex "self", param_1941
.annotate 'line', 586
    new $P102, "Undef"
    set $P1942, $P102
    .lex "$cur", $P1942
    set $P103, param_1941
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P1942, $P105
.annotate 'line', 587
    set $P103, param_1941
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$?CLASS"
    repr_get_attr_int $I1944, $P104, $P105, "$!pos", -1
    set $N100, $I1944
    set $P106, param_1941
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_str $S1945, $P107, $P108, "$!target", -1
    length $I100, $S1945
    set $N101, $I100
    isge $I101, $N100, $N101
    if $I101, if_1943
.annotate 'line', 589
    set $P115, param_1941
    nqp_decontainerize $P116, $P115
    find_lex $P117, "$?CLASS"
    repr_get_attr_int $I1950, $P116, $P117, "$!pos", -1
    set $N102, $I1950
    set $N103, 1
    islt $I102, $N102, $N103
    unless $I102, unless_1949
    new $P114, 'Integer'
    set $P114, $I102
    goto unless_1949_end
  unless_1949:
.annotate 'line', 590
    set $P118, param_1941
    nqp_decontainerize $P119, $P118
    find_lex $P120, "$?CLASS"
    repr_get_attr_str $S1951, $P119, $P120, "$!target", -1
    set $P121, param_1941
    nqp_decontainerize $P122, $P121
    find_lex $P123, "$?CLASS"
    repr_get_attr_int $I1952, $P122, $P123, "$!pos", -1
    is_cclass $I103, .CCLASS_WORD, $S1951, $I1952
    new $P124, 'Integer'
    set $P124, $I103
    isfalse $I104, $P124
    new $P114, 'Integer'
    set $P114, $I104
  unless_1949_end:
    unless $P114, unless_1948
    set $P113, $P114
    goto unless_1948_end
  unless_1948:
.annotate 'line', 591
    set $P125, param_1941
    nqp_decontainerize $P126, $P125
    find_lex $P127, "$?CLASS"
    repr_get_attr_str $S1953, $P126, $P127, "$!target", -1
    set $P128, param_1941
    nqp_decontainerize $P129, $P128
    find_lex $P130, "$?CLASS"
    repr_get_attr_int $I1954, $P129, $P130, "$!pos", -1
    new $P131, 'Integer'
    set $P131, $I1954
    sub $P132, $P131, 1
    set $I105, $P132
    is_cclass $I106, .CCLASS_WORD, $S1953, $I105
    new $P133, 'Integer'
    set $P133, $I106
    isfalse $I107, $P133
    new $P113, 'Integer'
    set $P113, $I107
  unless_1948_end:
    unless $P113, if_1947_end
.annotate 'line', 592
    set $P134, $P1942
    unless_null $P134, vivify_991
    new $P134, "Undef"
  vivify_991:
.annotate 'line', 594
    set $P135, param_1941
    nqp_decontainerize $P136, $P135
    find_lex $P137, "$?CLASS"
    repr_get_attr_str $S1955, $P136, $P137, "$!target", -1
    set $P138, param_1941
    nqp_decontainerize $P139, $P138
    find_lex $P140, "$?CLASS"
    repr_get_attr_int $I1956, $P139, $P140, "$!pos", -1
    set $P141, param_1941
    nqp_decontainerize $P142, $P141
    find_lex $P143, "$?CLASS"
    repr_get_attr_str $S1957, $P142, $P143, "$!target", -1
    length $I108, $S1957
    find_not_cclass $I109, .CCLASS_WHITESPACE, $S1955, $I1956, $I108
.annotate 'line', 593
    $P134."!cursor_pass"($I109, "ws")
  if_1947_end:
.annotate 'line', 592
    goto if_1943_end
  if_1943:
.annotate 'line', 588
    set $P109, $P1942
    unless_null $P109, vivify_992
    new $P109, "Undef"
  vivify_992:
    set $P110, param_1941
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_int $I1946, $P111, $P112, "$!pos", -1
    $P109."!cursor_pass"($I1946, "ws")
  if_1943_end:
.annotate 'line', 584
    set $P103, $P1942
    unless_null $P103, vivify_993
    new $P103, "Undef"
  vivify_993:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "ww" :anon :subid("54_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_1959
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 599
    .lex "self", param_1959
.annotate 'line', 600
    new $P102, "Undef"
    set $P1960, $P102
    .lex "$cur", $P1960
    set $P103, param_1959
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P1960, $P105
.annotate 'line', 602
    set $P106, param_1959
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_int $I1965, $P107, $P108, "$!pos", -1
    set $N100, $I1965
    set $N101, 0
    isgt $I100, $N100, $N101
    if $I100, if_1964
    new $P105, 'Integer'
    set $P105, $I100
    goto if_1964_end
  if_1964:
.annotate 'line', 603
    set $P109, param_1959
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_get_attr_int $I1966, $P110, $P111, "$!pos", -1
    set $N102, $I1966
    set $P112, param_1959
    nqp_decontainerize $P113, $P112
    find_lex $P114, "$?CLASS"
    repr_get_attr_str $S1967, $P113, $P114, "$!target", -1
    length $I101, $S1967
    set $N103, $I101
    isne $I102, $N102, $N103
    new $P105, 'Integer'
    set $P105, $I102
  if_1964_end:
    if $P105, if_1963
    set $P104, $P105
    goto if_1963_end
  if_1963:
.annotate 'line', 604
    set $P115, param_1959
    nqp_decontainerize $P116, $P115
    find_lex $P117, "$?CLASS"
    repr_get_attr_str $S1968, $P116, $P117, "$!target", -1
    set $P118, param_1959
    nqp_decontainerize $P119, $P118
    find_lex $P120, "$?CLASS"
    repr_get_attr_int $I1969, $P119, $P120, "$!pos", -1
    is_cclass $I103, .CCLASS_WORD, $S1968, $I1969
    new $P104, 'Integer'
    set $P104, $I103
  if_1963_end:
    if $P104, if_1962
    set $P103, $P104
    goto if_1962_end
  if_1962:
.annotate 'line', 605
    set $P121, param_1959
    nqp_decontainerize $P122, $P121
    find_lex $P123, "$?CLASS"
    repr_get_attr_str $S1970, $P122, $P123, "$!target", -1
    set $P124, param_1959
    nqp_decontainerize $P125, $P124
    find_lex $P126, "$?CLASS"
    repr_get_attr_int $I1971, $P125, $P126, "$!pos", -1
    new $P127, 'Integer'
    set $P127, $I1971
    sub $P128, $P127, 1
    set $I104, $P128
    is_cclass $I105, .CCLASS_WORD, $S1970, $I104
    new $P103, 'Integer'
    set $P103, $I105
  if_1962_end:
    unless $P103, if_1961_end
.annotate 'line', 601
    set $P129, $P1960
    unless_null $P129, vivify_994
    new $P129, "Undef"
  vivify_994:
    set $P130, param_1959
    nqp_decontainerize $P131, $P130
    find_lex $P132, "$?CLASS"
    repr_get_attr_int $I1972, $P131, $P132, "$!pos", -1
    $P129."!cursor_pass"($I1972, "ww")
  if_1961_end:
.annotate 'line', 599
    set $P103, $P1960
    unless_null $P103, vivify_995
    new $P103, "Undef"
  vivify_995:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "wb" :anon :subid("55_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_1974
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 609
    .lex "self", param_1974
.annotate 'line', 610
    new $P102, "Undef"
    set $P1975, $P102
    .lex "$cur", $P1975
    set $P103, param_1974
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P1975, $P105
.annotate 'line', 612
    set $P106, param_1974
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_int $I1980, $P107, $P108, "$!pos", -1
    set $N100, $I1980
    set $N101, 0
    iseq $I100, $N100, $N101
    if $I100, if_1979
    new $P105, 'Integer'
    set $P105, $I100
    goto if_1979_end
  if_1979:
    set $P109, param_1974
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_get_attr_str $S1981, $P110, $P111, "$!target", -1
    set $P112, param_1974
    nqp_decontainerize $P113, $P112
    find_lex $P114, "$?CLASS"
    repr_get_attr_int $I1982, $P113, $P114, "$!pos", -1
    is_cclass $I101, .CCLASS_WORD, $S1981, $I1982
    new $P105, 'Integer'
    set $P105, $I101
  if_1979_end:
    unless $P105, unless_1978
    set $P104, $P105
    goto unless_1978_end
  unless_1978:
.annotate 'line', 613
    set $P116, param_1974
    nqp_decontainerize $P117, $P116
    find_lex $P118, "$?CLASS"
    repr_get_attr_int $I1984, $P117, $P118, "$!pos", -1
    set $N102, $I1984
    set $P119, param_1974
    nqp_decontainerize $P120, $P119
    find_lex $P121, "$?CLASS"
    repr_get_attr_str $S1985, $P120, $P121, "$!target", -1
    length $I102, $S1985
    set $N103, $I102
    iseq $I103, $N102, $N103
    if $I103, if_1983
    new $P115, 'Integer'
    set $P115, $I103
    goto if_1983_end
  if_1983:
.annotate 'line', 614
    set $P122, param_1974
    nqp_decontainerize $P123, $P122
    find_lex $P124, "$?CLASS"
    repr_get_attr_str $S1986, $P123, $P124, "$!target", -1
    set $P125, param_1974
    nqp_decontainerize $P126, $P125
    find_lex $P127, "$?CLASS"
    repr_get_attr_int $I1987, $P126, $P127, "$!pos", -1
    new $P128, 'Integer'
    set $P128, $I1987
    sub $P129, $P128, 1
    set $I104, $P129
    is_cclass $I105, .CCLASS_WORD, $S1986, $I104
    new $P115, 'Integer'
    set $P115, $I105
  if_1983_end:
    set $P104, $P115
  unless_1978_end:
.annotate 'line', 613
    unless $P104, unless_1977
    set $P103, $P104
    goto unless_1977_end
  unless_1977:
.annotate 'line', 615
    set $P130, param_1974
    nqp_decontainerize $P131, $P130
    find_lex $P132, "$?CLASS"
    repr_get_attr_str $S1988, $P131, $P132, "$!target", -1
    set $P133, param_1974
    nqp_decontainerize $P134, $P133
    find_lex $P135, "$?CLASS"
    repr_get_attr_int $I1989, $P134, $P135, "$!pos", -1
    new $P136, 'Integer'
    set $P136, $I1989
    sub $P137, $P136, 1
    set $I106, $P137
    is_cclass $I107, .CCLASS_WORD, $S1988, $I106
    set $N104, $I107
.annotate 'line', 616
    set $P138, param_1974
    nqp_decontainerize $P139, $P138
    find_lex $P140, "$?CLASS"
    repr_get_attr_str $S1990, $P139, $P140, "$!target", -1
    set $P141, param_1974
    nqp_decontainerize $P142, $P141
    find_lex $P143, "$?CLASS"
    repr_get_attr_int $I1991, $P142, $P143, "$!pos", -1
    is_cclass $I108, .CCLASS_WORD, $S1990, $I1991
    set $N105, $I108
    isne $I109, $N104, $N105
    new $P103, 'Integer'
    set $P103, $I109
  unless_1977_end:
.annotate 'line', 615
    unless $P103, if_1976_end
.annotate 'line', 611
    set $P144, $P1975
    unless_null $P144, vivify_996
    new $P144, "Undef"
  vivify_996:
    set $P145, param_1974
    nqp_decontainerize $P146, $P145
    find_lex $P147, "$?CLASS"
    repr_get_attr_int $I1992, $P146, $P147, "$!pos", -1
    $P144."!cursor_pass"($I1992, "wb")
  if_1976_end:
.annotate 'line', 609
    set $P103, $P1975
    unless_null $P103, vivify_997
    new $P103, "Undef"
  vivify_997:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "ident" :anon :subid("56_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_1994
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 620
    .lex "self", param_1994
.annotate 'line', 621
    new $P102, "Undef"
    set $P1995, $P102
    .lex "$cur", $P1995
    set $P103, param_1994
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P1995, $P105
.annotate 'line', 626
    set $P104, param_1994
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_int $I1998, $P105, $P106, "$!pos", -1
    set $N100, $I1998
    set $P107, param_1994
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_str $S1999, $P108, $P109, "$!target", -1
    length $I100, $S1999
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_1997
    new $P103, 'Integer'
    set $P103, $I101
    goto if_1997_end
  if_1997:
.annotate 'line', 627
    set $P111, param_1994
    nqp_decontainerize $P112, $P111
    find_lex $P113, "$?CLASS"
    repr_get_attr_str $S2001, $P112, $P113, "$!target", -1
    set $P114, param_1994
    nqp_decontainerize $P115, $P114
    find_lex $P116, "$?CLASS"
    repr_get_attr_int $I2002, $P115, $P116, "$!pos", -1
    ord $I102, $S2001, $I2002
    set $N102, $I102
    set $N103, 95
    iseq $I103, $N102, $N103
    unless $I103, unless_2000
    new $P110, 'Integer'
    set $P110, $I103
    goto unless_2000_end
  unless_2000:
.annotate 'line', 628
    set $P117, param_1994
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$?CLASS"
    repr_get_attr_str $S2003, $P118, $P119, "$!target", -1
    set $P120, param_1994
    nqp_decontainerize $P121, $P120
    find_lex $P122, "$?CLASS"
    repr_get_attr_int $I2004, $P121, $P122, "$!pos", -1
    is_cclass $I104, .CCLASS_ALPHABETIC, $S2003, $I2004
    new $P110, 'Integer'
    set $P110, $I104
  unless_2000_end:
    set $P103, $P110
  if_1997_end:
.annotate 'line', 626
    unless $P103, if_1996_end
.annotate 'line', 622
    set $P123, $P1995
    unless_null $P123, vivify_998
    new $P123, "Undef"
  vivify_998:
.annotate 'line', 624
    set $P124, param_1994
    nqp_decontainerize $P125, $P124
    find_lex $P126, "$?CLASS"
    repr_get_attr_str $S2005, $P125, $P126, "$!target", -1
    set $P127, param_1994
    nqp_decontainerize $P128, $P127
    find_lex $P129, "$?CLASS"
    repr_get_attr_int $I2006, $P128, $P129, "$!pos", -1
.annotate 'line', 625
    set $P130, param_1994
    nqp_decontainerize $P131, $P130
    find_lex $P132, "$?CLASS"
    repr_get_attr_str $S2007, $P131, $P132, "$!target", -1
    length $I105, $S2007
    find_not_cclass $I106, .CCLASS_WORD, $S2005, $I2006, $I105
.annotate 'line', 623
    $P123."!cursor_pass"($I106)
  if_1996_end:
.annotate 'line', 620
    set $P103, $P1995
    unless_null $P103, vivify_999
    new $P103, "Undef"
  vivify_999:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "alpha" :anon :subid("57_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_2009
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 632
    .lex "self", param_2009
.annotate 'line', 633
    new $P102, "Undef"
    set $P2010, $P102
    .lex "$cur", $P2010
    set $P103, param_2009
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P2010, $P105
.annotate 'line', 635
    set $P104, param_2009
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_int $I2013, $P105, $P106, "$!pos", -1
    set $N100, $I2013
    set $P107, param_2009
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_str $S2014, $P108, $P109, "$!target", -1
    length $I100, $S2014
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2012
    new $P103, 'Integer'
    set $P103, $I101
    goto if_2012_end
  if_2012:
.annotate 'line', 636
    set $P111, param_2009
    nqp_decontainerize $P112, $P111
    find_lex $P113, "$?CLASS"
    repr_get_attr_str $S2016, $P112, $P113, "$!target", -1
    set $P114, param_2009
    nqp_decontainerize $P115, $P114
    find_lex $P116, "$?CLASS"
    repr_get_attr_int $I2017, $P115, $P116, "$!pos", -1
    is_cclass $I102, .CCLASS_ALPHABETIC, $S2016, $I2017
    unless $I102, unless_2015
    new $P110, 'Integer'
    set $P110, $I102
    goto unless_2015_end
  unless_2015:
.annotate 'line', 637
    set $P117, param_2009
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$?CLASS"
    repr_get_attr_str $S2018, $P118, $P119, "$!target", -1
    set $P120, param_2009
    nqp_decontainerize $P121, $P120
    find_lex $P122, "$?CLASS"
    repr_get_attr_int $I2019, $P121, $P122, "$!pos", -1
    ord $I103, $S2018, $I2019
    set $N102, $I103
    set $N103, 95
    iseq $I104, $N102, $N103
    new $P110, 'Integer'
    set $P110, $I104
  unless_2015_end:
    set $P103, $P110
  if_2012_end:
.annotate 'line', 636
    unless $P103, if_2011_end
.annotate 'line', 634
    set $P123, $P2010
    unless_null $P123, vivify_1000
    new $P123, "Undef"
  vivify_1000:
    set $P124, param_2009
    nqp_decontainerize $P125, $P124
    find_lex $P126, "$?CLASS"
    repr_get_attr_int $I2020, $P125, $P126, "$!pos", -1
    new $P127, 'Integer'
    set $P127, $I2020
    add $P128, $P127, 1
    $P123."!cursor_pass"($P128, "alpha")
  if_2011_end:
.annotate 'line', 632
    set $P103, $P2010
    unless_null $P103, vivify_1001
    new $P103, "Undef"
  vivify_1001:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "alnum" :anon :subid("58_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_2022
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 641
    .lex "self", param_2022
.annotate 'line', 642
    new $P102, "Undef"
    set $P2023, $P102
    .lex "$cur", $P2023
    set $P103, param_2022
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P2023, $P105
.annotate 'line', 644
    set $P104, param_2022
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_int $I2026, $P105, $P106, "$!pos", -1
    set $N100, $I2026
    set $P107, param_2022
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_str $S2027, $P108, $P109, "$!target", -1
    length $I100, $S2027
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2025
    new $P103, 'Integer'
    set $P103, $I101
    goto if_2025_end
  if_2025:
.annotate 'line', 645
    set $P111, param_2022
    nqp_decontainerize $P112, $P111
    find_lex $P113, "$?CLASS"
    repr_get_attr_str $S2029, $P112, $P113, "$!target", -1
    set $P114, param_2022
    nqp_decontainerize $P115, $P114
    find_lex $P116, "$?CLASS"
    repr_get_attr_int $I2030, $P115, $P116, "$!pos", -1
    is_cclass $I102, .CCLASS_ALPHANUMERIC, $S2029, $I2030
    unless $I102, unless_2028
    new $P110, 'Integer'
    set $P110, $I102
    goto unless_2028_end
  unless_2028:
.annotate 'line', 646
    set $P117, param_2022
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$?CLASS"
    repr_get_attr_str $S2031, $P118, $P119, "$!target", -1
    set $P120, param_2022
    nqp_decontainerize $P121, $P120
    find_lex $P122, "$?CLASS"
    repr_get_attr_int $I2032, $P121, $P122, "$!pos", -1
    ord $I103, $S2031, $I2032
    set $N102, $I103
    set $N103, 95
    iseq $I104, $N102, $N103
    new $P110, 'Integer'
    set $P110, $I104
  unless_2028_end:
    set $P103, $P110
  if_2025_end:
.annotate 'line', 645
    unless $P103, if_2024_end
.annotate 'line', 643
    set $P123, $P2023
    unless_null $P123, vivify_1002
    new $P123, "Undef"
  vivify_1002:
    set $P124, param_2022
    nqp_decontainerize $P125, $P124
    find_lex $P126, "$?CLASS"
    repr_get_attr_int $I2033, $P125, $P126, "$!pos", -1
    new $P127, 'Integer'
    set $P127, $I2033
    add $P128, $P127, 1
    $P123."!cursor_pass"($P128, "alnum")
  if_2024_end:
.annotate 'line', 641
    set $P103, $P2023
    unless_null $P103, vivify_1003
    new $P103, "Undef"
  vivify_1003:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "upper" :anon :subid("59_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_2035
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 650
    .lex "self", param_2035
.annotate 'line', 651
    new $P102, "Undef"
    set $P2036, $P102
    .lex "$cur", $P2036
    set $P103, param_2035
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P2036, $P105
.annotate 'line', 653
    set $P104, param_2035
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_int $I2039, $P105, $P106, "$!pos", -1
    set $N100, $I2039
    set $P107, param_2035
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_str $S2040, $P108, $P109, "$!target", -1
    length $I100, $S2040
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2038
    new $P103, 'Integer'
    set $P103, $I101
    goto if_2038_end
  if_2038:
.annotate 'line', 654
    set $P110, param_2035
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_str $S2041, $P111, $P112, "$!target", -1
    set $P113, param_2035
    nqp_decontainerize $P114, $P113
    find_lex $P115, "$?CLASS"
    repr_get_attr_int $I2042, $P114, $P115, "$!pos", -1
    is_cclass $I102, .CCLASS_UPPERCASE, $S2041, $I2042
    new $P103, 'Integer'
    set $P103, $I102
  if_2038_end:
    unless $P103, if_2037_end
.annotate 'line', 652
    set $P116, $P2036
    unless_null $P116, vivify_1004
    new $P116, "Undef"
  vivify_1004:
    set $P117, param_2035
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$?CLASS"
    repr_get_attr_int $I2043, $P118, $P119, "$!pos", -1
    new $P120, 'Integer'
    set $P120, $I2043
    add $P121, $P120, 1
    $P116."!cursor_pass"($P121, "upper")
  if_2037_end:
.annotate 'line', 650
    set $P103, $P2036
    unless_null $P103, vivify_1005
    new $P103, "Undef"
  vivify_1005:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "lower" :anon :subid("60_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_2045
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 658
    .lex "self", param_2045
.annotate 'line', 659
    new $P102, "Undef"
    set $P2046, $P102
    .lex "$cur", $P2046
    set $P103, param_2045
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P2046, $P105
.annotate 'line', 661
    set $P104, param_2045
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_int $I2049, $P105, $P106, "$!pos", -1
    set $N100, $I2049
    set $P107, param_2045
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_str $S2050, $P108, $P109, "$!target", -1
    length $I100, $S2050
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2048
    new $P103, 'Integer'
    set $P103, $I101
    goto if_2048_end
  if_2048:
.annotate 'line', 662
    set $P110, param_2045
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_str $S2051, $P111, $P112, "$!target", -1
    set $P113, param_2045
    nqp_decontainerize $P114, $P113
    find_lex $P115, "$?CLASS"
    repr_get_attr_int $I2052, $P114, $P115, "$!pos", -1
    is_cclass $I102, .CCLASS_LOWERCASE, $S2051, $I2052
    new $P103, 'Integer'
    set $P103, $I102
  if_2048_end:
    unless $P103, if_2047_end
.annotate 'line', 660
    set $P116, $P2046
    unless_null $P116, vivify_1006
    new $P116, "Undef"
  vivify_1006:
    set $P117, param_2045
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$?CLASS"
    repr_get_attr_int $I2053, $P118, $P119, "$!pos", -1
    new $P120, 'Integer'
    set $P120, $I2053
    add $P121, $P120, 1
    $P116."!cursor_pass"($P121, "lower")
  if_2047_end:
.annotate 'line', 658
    set $P103, $P2046
    unless_null $P103, vivify_1007
    new $P103, "Undef"
  vivify_1007:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "digit" :anon :subid("61_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_2055
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 666
    .lex "self", param_2055
.annotate 'line', 667
    new $P102, "Undef"
    set $P2056, $P102
    .lex "$cur", $P2056
    set $P103, param_2055
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P2056, $P105
.annotate 'line', 669
    set $P104, param_2055
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_int $I2059, $P105, $P106, "$!pos", -1
    set $N100, $I2059
    set $P107, param_2055
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_str $S2060, $P108, $P109, "$!target", -1
    length $I100, $S2060
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2058
    new $P103, 'Integer'
    set $P103, $I101
    goto if_2058_end
  if_2058:
.annotate 'line', 670
    set $P110, param_2055
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_str $S2061, $P111, $P112, "$!target", -1
    set $P113, param_2055
    nqp_decontainerize $P114, $P113
    find_lex $P115, "$?CLASS"
    repr_get_attr_int $I2062, $P114, $P115, "$!pos", -1
    is_cclass $I102, .CCLASS_NUMERIC, $S2061, $I2062
    new $P103, 'Integer'
    set $P103, $I102
  if_2058_end:
    unless $P103, if_2057_end
.annotate 'line', 668
    set $P116, $P2056
    unless_null $P116, vivify_1008
    new $P116, "Undef"
  vivify_1008:
    set $P117, param_2055
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$?CLASS"
    repr_get_attr_int $I2063, $P118, $P119, "$!pos", -1
    new $P120, 'Integer'
    set $P120, $I2063
    add $P121, $P120, 1
    $P116."!cursor_pass"($P121, "digit")
  if_2057_end:
.annotate 'line', 666
    set $P103, $P2056
    unless_null $P103, vivify_1009
    new $P103, "Undef"
  vivify_1009:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "xdigit" :anon :subid("62_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_2065
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 674
    .lex "self", param_2065
.annotate 'line', 675
    new $P102, "Undef"
    set $P2066, $P102
    .lex "$cur", $P2066
    set $P103, param_2065
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P2066, $P105
.annotate 'line', 677
    set $P104, param_2065
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_int $I2069, $P105, $P106, "$!pos", -1
    set $N100, $I2069
    set $P107, param_2065
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_str $S2070, $P108, $P109, "$!target", -1
    length $I100, $S2070
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2068
    new $P103, 'Integer'
    set $P103, $I101
    goto if_2068_end
  if_2068:
.annotate 'line', 678
    set $P110, param_2065
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_str $S2071, $P111, $P112, "$!target", -1
    set $P113, param_2065
    nqp_decontainerize $P114, $P113
    find_lex $P115, "$?CLASS"
    repr_get_attr_int $I2072, $P114, $P115, "$!pos", -1
    is_cclass $I102, .CCLASS_HEXADECIMAL, $S2071, $I2072
    new $P103, 'Integer'
    set $P103, $I102
  if_2068_end:
    unless $P103, if_2067_end
.annotate 'line', 676
    set $P116, $P2066
    unless_null $P116, vivify_1010
    new $P116, "Undef"
  vivify_1010:
    set $P117, param_2065
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$?CLASS"
    repr_get_attr_int $I2073, $P118, $P119, "$!pos", -1
    new $P120, 'Integer'
    set $P120, $I2073
    add $P121, $P120, 1
    $P116."!cursor_pass"($P121, "xdigit")
  if_2067_end:
.annotate 'line', 674
    set $P103, $P2066
    unless_null $P103, vivify_1011
    new $P103, "Undef"
  vivify_1011:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "space" :anon :subid("63_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_2075
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 682
    .lex "self", param_2075
.annotate 'line', 683
    new $P102, "Undef"
    set $P2076, $P102
    .lex "$cur", $P2076
    set $P103, param_2075
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P2076, $P105
.annotate 'line', 685
    set $P104, param_2075
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_int $I2079, $P105, $P106, "$!pos", -1
    set $N100, $I2079
    set $P107, param_2075
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_str $S2080, $P108, $P109, "$!target", -1
    length $I100, $S2080
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2078
    new $P103, 'Integer'
    set $P103, $I101
    goto if_2078_end
  if_2078:
.annotate 'line', 686
    set $P110, param_2075
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_str $S2081, $P111, $P112, "$!target", -1
    set $P113, param_2075
    nqp_decontainerize $P114, $P113
    find_lex $P115, "$?CLASS"
    repr_get_attr_int $I2082, $P114, $P115, "$!pos", -1
    is_cclass $I102, .CCLASS_WHITESPACE, $S2081, $I2082
    new $P103, 'Integer'
    set $P103, $I102
  if_2078_end:
    unless $P103, if_2077_end
.annotate 'line', 684
    set $P116, $P2076
    unless_null $P116, vivify_1012
    new $P116, "Undef"
  vivify_1012:
    set $P117, param_2075
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$?CLASS"
    repr_get_attr_int $I2083, $P118, $P119, "$!pos", -1
    new $P120, 'Integer'
    set $P120, $I2083
    add $P121, $P120, 1
    $P116."!cursor_pass"($P121, "space")
  if_2077_end:
.annotate 'line', 682
    set $P103, $P2076
    unless_null $P103, vivify_1013
    new $P103, "Undef"
  vivify_1013:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "blank" :anon :subid("64_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_2085
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 690
    .lex "self", param_2085
.annotate 'line', 691
    new $P102, "Undef"
    set $P2086, $P102
    .lex "$cur", $P2086
    set $P103, param_2085
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P2086, $P105
.annotate 'line', 693
    set $P104, param_2085
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_int $I2089, $P105, $P106, "$!pos", -1
    set $N100, $I2089
    set $P107, param_2085
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_str $S2090, $P108, $P109, "$!target", -1
    length $I100, $S2090
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2088
    new $P103, 'Integer'
    set $P103, $I101
    goto if_2088_end
  if_2088:
.annotate 'line', 694
    set $P110, param_2085
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_str $S2091, $P111, $P112, "$!target", -1
    set $P113, param_2085
    nqp_decontainerize $P114, $P113
    find_lex $P115, "$?CLASS"
    repr_get_attr_int $I2092, $P114, $P115, "$!pos", -1
    is_cclass $I102, .CCLASS_BLANK, $S2091, $I2092
    new $P103, 'Integer'
    set $P103, $I102
  if_2088_end:
    unless $P103, if_2087_end
.annotate 'line', 692
    set $P116, $P2086
    unless_null $P116, vivify_1014
    new $P116, "Undef"
  vivify_1014:
    set $P117, param_2085
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$?CLASS"
    repr_get_attr_int $I2093, $P118, $P119, "$!pos", -1
    new $P120, 'Integer'
    set $P120, $I2093
    add $P121, $P120, 1
    $P116."!cursor_pass"($P121, "blank")
  if_2087_end:
.annotate 'line', 690
    set $P103, $P2086
    unless_null $P103, vivify_1015
    new $P103, "Undef"
  vivify_1015:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "cntrl" :anon :subid("65_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_2095
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 698
    .lex "self", param_2095
.annotate 'line', 699
    new $P102, "Undef"
    set $P2096, $P102
    .lex "$cur", $P2096
    set $P103, param_2095
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P2096, $P105
.annotate 'line', 701
    set $P104, param_2095
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_int $I2099, $P105, $P106, "$!pos", -1
    set $N100, $I2099
    set $P107, param_2095
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_str $S2100, $P108, $P109, "$!target", -1
    length $I100, $S2100
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2098
    new $P103, 'Integer'
    set $P103, $I101
    goto if_2098_end
  if_2098:
.annotate 'line', 702
    set $P110, param_2095
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_str $S2101, $P111, $P112, "$!target", -1
    set $P113, param_2095
    nqp_decontainerize $P114, $P113
    find_lex $P115, "$?CLASS"
    repr_get_attr_int $I2102, $P114, $P115, "$!pos", -1
    is_cclass $I102, .CCLASS_CONTROL, $S2101, $I2102
    new $P103, 'Integer'
    set $P103, $I102
  if_2098_end:
    unless $P103, if_2097_end
.annotate 'line', 700
    set $P116, $P2096
    unless_null $P116, vivify_1016
    new $P116, "Undef"
  vivify_1016:
    set $P117, param_2095
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$?CLASS"
    repr_get_attr_int $I2103, $P118, $P119, "$!pos", -1
    new $P120, 'Integer'
    set $P120, $I2103
    add $P121, $P120, 1
    $P116."!cursor_pass"($P121, "cntrl")
  if_2097_end:
.annotate 'line', 698
    set $P103, $P2096
    unless_null $P103, vivify_1017
    new $P103, "Undef"
  vivify_1017:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "punct" :anon :subid("66_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_2105
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 706
    .lex "self", param_2105
.annotate 'line', 707
    new $P102, "Undef"
    set $P2106, $P102
    .lex "$cur", $P2106
    set $P103, param_2105
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P2106, $P105
.annotate 'line', 709
    set $P104, param_2105
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_int $I2109, $P105, $P106, "$!pos", -1
    set $N100, $I2109
    set $P107, param_2105
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_str $S2110, $P108, $P109, "$!target", -1
    length $I100, $S2110
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2108
    new $P103, 'Integer'
    set $P103, $I101
    goto if_2108_end
  if_2108:
.annotate 'line', 710
    set $P110, param_2105
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_str $S2111, $P111, $P112, "$!target", -1
    set $P113, param_2105
    nqp_decontainerize $P114, $P113
    find_lex $P115, "$?CLASS"
    repr_get_attr_int $I2112, $P114, $P115, "$!pos", -1
    is_cclass $I102, .CCLASS_PUNCTUATION, $S2111, $I2112
    new $P103, 'Integer'
    set $P103, $I102
  if_2108_end:
    unless $P103, if_2107_end
.annotate 'line', 708
    set $P116, $P2106
    unless_null $P116, vivify_1018
    new $P116, "Undef"
  vivify_1018:
    set $P117, param_2105
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$?CLASS"
    repr_get_attr_int $I2113, $P118, $P119, "$!pos", -1
    new $P120, 'Integer'
    set $P120, $I2113
    add $P121, $P120, 1
    $P116."!cursor_pass"($P121, "punct")
  if_2107_end:
.annotate 'line', 706
    set $P103, $P2106
    unless_null $P103, vivify_1019
    new $P103, "Undef"
  vivify_1019:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "FAILGOAL" :anon :subid("67_1338064436.26") :outer("68_1338064436.26")
    .param pmc param_2115
    .param pmc param_2116
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 714
    .lex "self", param_2115
    .lex "$goal", param_2116
.annotate 'line', 715
    new $P102, "Undef"
    set $P2117, $P102
    .lex "$sub", $P2117

            $P2118 = getinterp
            $P2118 = $P2118['sub';1]
        
    set $P2117, $P2118
.annotate 'line', 719
    new $P103, "String"
    assign $P103, "Unable to parse "
    set $P104, $P2117
    unless_null $P104, vivify_1020
    new $P104, "Undef"
  vivify_1020:
    set $S100, $P104
    concat $P105, $P103, $S100
    new $P106, 'String'
    set $P106, ", couldn't find final "
    set $P107, param_2116
    unless_null $P107, vivify_1021
    new $P107, "Undef"
  vivify_1021:
    concat $P108, $P106, $P107
    concat $P109, $P105, $P108
    die $P109
.annotate 'line', 714
    .return ()
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "_block2120"  :subid("400_1338064436.26") :outer("387_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 724
    .const 'Sub' $P2161 = "80_1338064436.26" 
    capture_lex $P2161
    .const 'Sub' $P2159 = "79_1338064436.26" 
    capture_lex $P2159
    .const 'Sub' $P2156 = "78_1338064436.26" 
    capture_lex $P2156
    .const 'Sub' $P2149 = "77_1338064436.26" 
    capture_lex $P2149
    .const 'Sub' $P2145 = "76_1338064436.26" 
    capture_lex $P2145
    .const 'Sub' $P2143 = "75_1338064436.26" 
    capture_lex $P2143
    .const 'Sub' $P2140 = "74_1338064436.26" 
    capture_lex $P2140
    .const 'Sub' $P2134 = "73_1338064436.26" 
    capture_lex $P2134
    .const 'Sub' $P2132 = "72_1338064436.26" 
    capture_lex $P2132
    .const 'Sub' $P2129 = "71_1338064436.26" 
    capture_lex $P2129
    .const 'Sub' $P2127 = "70_1338064436.26" 
    capture_lex $P2127
    .const 'Sub' $P2124 = "69_1338064436.26" 
    capture_lex $P2124
    .lex "$?PACKAGE", $P2122
    .lex "$?CLASS", $P2123
.annotate 'line', 744
    .const 'Sub' $P2161 = "80_1338064436.26" 
    newclosure $P2184, $P2161
.annotate 'line', 724
    .return ($P2184)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "from" :anon :subid("69_1338064436.26") :outer("400_1338064436.26")
    .param pmc param_2125
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 731
    .lex "self", param_2125
    set $P100, param_2125
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 62
    repr_get_attr_int $I2126, $P101, $P102, "$!from", 3
    .return ($I2126)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "orig" :anon :subid("70_1338064436.26") :outer("400_1338064436.26")
    .param pmc param_2128
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 732
    .lex "self", param_2128
    set $P100, param_2128
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 62
    repr_get_attr_obj $P103, $P101, $P102, "$!orig", 2
    unless_null $P103, vivify_1022
    new $P103, "Undef"
  vivify_1022:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "to" :anon :subid("71_1338064436.26") :outer("400_1338064436.26")
    .param pmc param_2130
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 733
    .lex "self", param_2130
    set $P100, param_2130
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 62
    repr_get_attr_int $I2131, $P101, $P102, "$!to", 4
    .return ($I2131)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "CURSOR" :anon :subid("72_1338064436.26") :outer("400_1338064436.26")
    .param pmc param_2133
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 734
    .lex "self", param_2133
    set $P100, param_2133
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 62
    repr_get_attr_obj $P103, $P101, $P102, "$!cursor", 6
    unless_null $P103, vivify_1023
    new $P103, "Undef"
  vivify_1023:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "Str" :anon :subid("73_1338064436.26") :outer("400_1338064436.26")
    .param pmc param_2135
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 735
    .lex "self", param_2135
    set $P100, param_2135
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 62
    repr_get_attr_obj $P103, $P101, $P102, "$!orig", 2
    unless_null $P103, vivify_1024
    new $P103, "Undef"
  vivify_1024:
    set $S100, $P103
    set $P104, param_2135
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 62
    repr_get_attr_int $I2136, $P105, $P106, "$!from", 3
    set $P107, param_2135
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 62
    repr_get_attr_int $I2137, $P108, $P109, "$!to", 4
    new $P110, 'Integer'
    set $P110, $I2137
    set $P111, param_2135
    nqp_decontainerize $P112, $P111
    nqp_get_sc_object $P113, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 62
    repr_get_attr_int $I2138, $P112, $P113, "$!from", 3
    sub $P114, $P110, $I2138
    set $I100, $P114
    substr $S101, $S100, $I2136, $I100
    .return ($S101)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "_block2139"  :anon :subid("74_1338064436.26") :outer("400_1338064436.26")
    .param pmc param_2141
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 736
    .lex "self", param_2141
    set $P100, param_2141
    nqp_decontainerize $P101, $P100
    $P102 = $P101."Str"()
    set $N100, $P102
    .return ($N100)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "_block2142"  :anon :subid("75_1338064436.26") :outer("400_1338064436.26")
    .param pmc param_2144
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 737
    .lex "self", param_2144
    set $P100, param_2144
    nqp_decontainerize $P101, $P100
    $P102 = $P101."Str"()
    set $N100, $P102
    .return ($N100)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "Bool" :anon :subid("76_1338064436.26") :outer("400_1338064436.26")
    .param pmc param_2146
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 738
    .lex "self", param_2146
    set $P100, param_2146
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 62
    repr_get_attr_int $I2147, $P101, $P102, "$!to", 4
    set $N100, $I2147
    set $P103, param_2146
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 62
    repr_get_attr_int $I2148, $P104, $P105, "$!from", 3
    set $N101, $I2148
    isge $I100, $N100, $N101
    .return ($I100)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "chars" :anon :subid("77_1338064436.26") :outer("400_1338064436.26")
    .param pmc param_2150
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 739
    .lex "self", param_2150
    set $P101, param_2150
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 62
    repr_get_attr_int $I2152, $P102, $P103, "$!to", 4
    set $N100, $I2152
    set $P104, param_2150
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 62
    repr_get_attr_int $I2153, $P105, $P106, "$!from", 3
    set $N101, $I2153
    isge $I100, $N100, $N101
    if $I100, if_2151
    new $P115, "Float"
    assign $P115, 0
    set $P100, $P115
    goto if_2151_end
  if_2151:
    set $P107, param_2150
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 62
    repr_get_attr_int $I2154, $P108, $P109, "$!to", 4
    new $P110, 'Integer'
    set $P110, $I2154
    set $P111, param_2150
    nqp_decontainerize $P112, $P111
    nqp_get_sc_object $P113, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 62
    repr_get_attr_int $I2155, $P112, $P113, "$!from", 3
    sub $P114, $P110, $I2155
    set $P100, $P114
  if_2151_end:
    .return ($P100)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "!make" :anon :subid("78_1338064436.26") :outer("400_1338064436.26")
    .param pmc param_2157
    .param pmc param_2158
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 741
    .lex "self", param_2157
    .lex "$ast", param_2158
    set $P100, param_2158
    unless_null $P100, vivify_1025
    new $P100, "Undef"
  vivify_1025:
    set $P101, param_2157
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 62
    repr_bind_attr_obj $P102, $P103, "$!ast", 5, $P100
    .return ($P100)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "ast" :anon :subid("79_1338064436.26") :outer("400_1338064436.26")
    .param pmc param_2160
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 742
    .lex "self", param_2160
    set $P100, param_2160
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 62
    repr_get_attr_obj $P103, $P101, $P102, "$!ast", 5
    unless_null $P103, vivify_1026
    new $P103, "Undef"
  vivify_1026:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.include "except_types.pasm"
.sub "!dump_str" :anon :subid("80_1338064436.26") :outer("400_1338064436.26")
    .param pmc param_2162
    .param pmc param_2163
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 744
    .const 'Sub' $P2181 = "404_1338064436.26" 
    capture_lex $P2181
    .const 'Sub' $P2165 = "401_1338064436.26" 
    capture_lex $P2165
    .lex "self", param_2162
    .lex "$key", param_2163
.annotate 'line', 745
    .const 'Sub' $P2165 = "401_1338064436.26" 
    newclosure $P2178, $P2165
    set $P2164, $P2178
    .lex "dump_array", $P2164
.annotate 'line', 756
    new $P102, "Undef"
    set $P2179, $P102
    .lex "$str", $P2179
.annotate 'line', 744
    set $P103, $P2164
.annotate 'line', 756
    set $P103, param_2163
    unless_null $P103, vivify_1039
    new $P103, "Undef"
  vivify_1039:
    concat $P104, $P103, ": "
    set $P105, param_2162
    nqp_decontainerize $P106, $P105
    $S100 = $P106."Str"()
    escape $S101, $S100
    concat $P107, $P104, $S101
    concat $P108, $P107, " @ "
    set $P109, param_2162
    nqp_decontainerize $P110, $P109
    $S102 = $P110."from"()
    concat $P111, $P108, $S102
    concat $P112, $P111, "\n"
    set $P2179, $P112
.annotate 'line', 757
    set $P103, $P2179
    unless_null $P103, vivify_1040
    new $P103, "Undef"
  vivify_1040:
    set $P104, param_2163
    unless_null $P104, vivify_1041
    new $P104, "Undef"
  vivify_1041:
    set $P105, param_2162
    nqp_decontainerize $P106, $P105
    $P107 = $P106."list"()
    $S100 = "dump_array"($P104, $P107)
    concat $P108, $P103, $S100
    set $P2179, $P108
.annotate 'line', 758
    set $P104, param_2162
    nqp_decontainerize $P105, $P104
    $P106 = $P105."hash"()
    defined $I100, $P106
    unless $I100, for_undef_1042
    iter $P103, $P106
    new $P108, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P108, loop2183_handler
    push_eh $P108
  loop2183_test:
    unless $P103, loop2183_done
    shift $P107, $P103
  loop2183_redo:
    .const 'Sub' $P2181 = "404_1338064436.26" 
    capture_lex $P2181
    $P2181($P107)
  loop2183_next:
    goto loop2183_test
  loop2183_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P109, exception, 'type'
    eq $P109, .CONTROL_LOOP_NEXT, loop2183_next
    eq $P109, .CONTROL_LOOP_REDO, loop2183_redo
  loop2183_done:
    pop_eh 
  for_undef_1042:
.annotate 'line', 744
    set $P103, $P2179
    unless_null $P103, vivify_1047
    new $P103, "Undef"
  vivify_1047:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "dump_array"  :subid("401_1338064436.26") :outer("80_1338064436.26")
    .param pmc param_2166
    .param pmc param_2167
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 745
    .const 'Sub' $P2171 = "402_1338064436.26" 
    capture_lex $P2171
    .lex "$key", param_2166
    .lex "$item", param_2167
.annotate 'line', 746
    new $P100, "Undef"
    set $P2168, $P100
    .lex "$str", $P2168
    new $P101, "String"
    assign $P101, ""
    set $P2168, $P101
.annotate 'line', 747
    find_lex $P101, "NQPCapture"
    set $P102, param_2167
    unless_null $P102, vivify_1027
    new $P102, "Undef"
  vivify_1027:
    $P103 = $P101."ACCEPTS"($P102)
    if $P103, if_2169
.annotate 'line', 750
    .const 'Sub' $P2171 = "402_1338064436.26" 
    capture_lex $P2171
    $P2171()
    goto if_2169_end
  if_2169:
.annotate 'line', 748
    set $P104, $P2168
    unless_null $P104, vivify_1035
    new $P104, "Undef"
  vivify_1035:
    set $P105, param_2167
    unless_null $P105, vivify_1036
    new $P105, "Undef"
  vivify_1036:
    set $P106, param_2166
    unless_null $P106, vivify_1037
    new $P106, "Undef"
  vivify_1037:
    $S100 = $P105."!dump_str"($P106)
    concat $P107, $P104, $S100
    set $P2168, $P107
  if_2169_end:
.annotate 'line', 745
    set $P101, $P2168
    unless_null $P101, vivify_1038
    new $P101, "Undef"
  vivify_1038:
    .return ($P101)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.include "except_types.pasm"
.sub "_block2170"  :anon :subid("402_1338064436.26") :outer("401_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 750
    .const 'Sub' $P2174 = "403_1338064436.26" 
    capture_lex $P2174
.annotate 'line', 751
    new $P104, "Undef"
    set $P2172, $P104
    .lex "$n", $P2172
    new $P105, "Float"
    assign $P105, 0
    set $P2172, $P105
.annotate 'line', 752
    find_lex $P106, "$item"
    unless_null $P106, vivify_1028
    new $P106, "Undef"
  vivify_1028:
    defined $I100, $P106
    unless $I100, for_undef_1029
    iter $P105, $P106
    new $P108, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P108, loop2177_handler
    push_eh $P108
  loop2177_test:
    unless $P105, loop2177_done
    shift $P107, $P105
  loop2177_redo:
    .const 'Sub' $P2174 = "403_1338064436.26" 
    capture_lex $P2174
    $P2174($P107)
  loop2177_next:
    goto loop2177_test
  loop2177_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P109, exception, 'type'
    eq $P109, .CONTROL_LOOP_NEXT, loop2177_next
    eq $P109, .CONTROL_LOOP_REDO, loop2177_redo
  loop2177_done:
    pop_eh 
  for_undef_1029:
.annotate 'line', 750
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "_block2173"  :anon :subid("403_1338064436.26") :outer("402_1338064436.26")
    .param pmc param_2175
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 752
    .lex "$_", param_2175
    find_lex $P108, "$str"
    unless_null $P108, vivify_1030
    new $P108, "Undef"
  vivify_1030:
    find_lex $P109, "$key"
    unless_null $P109, vivify_1031
    new $P109, "Undef"
  vivify_1031:
    new $P110, 'String'
    set $P110, "["
    find_lex $P111, "$n"
    unless_null $P111, vivify_1032
    new $P111, "Undef"
  vivify_1032:
    concat $P112, $P110, $P111
    concat $P113, $P112, "]"
    concat $P114, $P109, $P113
    find_lex $P115, "$_"
    unless_null $P115, vivify_1033
    new $P115, "Undef"
  vivify_1033:
    $S100 = "dump_array"($P114, $P115)
    concat $P116, $P108, $S100
    store_lex "$str", $P116
    find_lex $P108, "$n"
    unless_null $P108, vivify_1034
    new $P108, "Undef"
  vivify_1034:
    clone $P2176, $P108
    inc $P108
    .return ($P2176)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "_block2180"  :anon :subid("404_1338064436.26") :outer("80_1338064436.26")
    .param pmc param_2182
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 758
    .lex "$_", param_2182
    find_lex $P108, "$str"
    unless_null $P108, vivify_1043
    new $P108, "Undef"
  vivify_1043:
    find_lex $P109, "$key"
    unless_null $P109, vivify_1044
    new $P109, "Undef"
  vivify_1044:
    concat $P110, $P109, "<"
    find_lex $P111, "$_"
    unless_null $P111, vivify_1045
    new $P111, "Undef"
  vivify_1045:
    $S100 = $P111."key"()
    concat $P112, $P110, $S100
    concat $P113, $P112, ">"
    find_lex $P114, "$_"
    unless_null $P114, vivify_1046
    new $P114, "Undef"
  vivify_1046:
    $P115 = $P114."value"()
    $S101 = "dump_array"($P113, $P115)
    concat $P116, $P108, $S101
    store_lex "$str", $P116
    .return ($P116)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "_block2185"  :subid("405_1338064436.26") :outer("387_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 763
    .const 'Sub' $P2269 = "85_1338064436.26" 
    capture_lex $P2269
    .const 'Sub' $P2226 = "84_1338064436.26" 
    capture_lex $P2226
    .const 'Sub' $P2216 = "83_1338064436.26" 
    capture_lex $P2216
    .const 'Sub' $P2213 = "82_1338064436.26" 
    capture_lex $P2213
    .const 'Sub' $P2191 = "81_1338064436.26" 
    capture_lex $P2191
.annotate 'line', 764
    new $P100, "Undef"
    set $P2187, $P100
    .lex "$EMPTY_MATCH_LIST", $P2187
.annotate 'line', 765
    new $P101, "Undef"
    set $P2188, $P101
    .lex "$EMPTY_MATCH_HASH", $P2188
    .lex "$?PACKAGE", $P2189
    .lex "$?CLASS", $P2190
.annotate 'line', 764
    new $P102, "ResizablePMCArray"
    set $P2187, $P102
.annotate 'line', 765
    new $P102, "Hash"
    set $P2188, $P102
.annotate 'line', 847
    .const 'Sub' $P2269 = "85_1338064436.26" 
    newclosure $P2288, $P2269
.annotate 'line', 763
    .return ($P2288)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "MATCH" :anon :subid("81_1338064436.26") :outer("405_1338064436.26")
    .param pmc param_2192
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 766
    .const 'Sub' $P2197 = "406_1338064436.26" 
    capture_lex $P2197
    .lex "self", param_2192
.annotate 'line', 767
    new $P102, "Undef"
    set $P2193, $P102
    .lex "$match", $P2193
    set $P103, param_2192
    nqp_decontainerize $P104, $P103
    find_lex $P105, "NQPCursor"
    getattribute $P106, $P104, $P105, "$!match"
    set $P2193, $P106
.annotate 'line', 768
    set $P104, $P2193
    unless_null $P104, vivify_1048
    new $P104, "Undef"
  vivify_1048:
    find_lex $P105, "NQPMatch"
    type_check $I100, $P104, $P105
    unless $I100, unless_2195
    new $P103, 'Integer'
    set $P103, $I100
    goto unless_2195_end
  unless_2195:
    set $P106, $P2193
    unless_null $P106, vivify_1049
    new $P106, "Undef"
  vivify_1049:
    isa $I101, $P106, "Hash"
    new $P103, 'Integer'
    set $P103, $I101
  unless_2195_end:
    if $P103, unless_2194_end
    .const 'Sub' $P2197 = "406_1338064436.26" 
    capture_lex $P2197
    $P2197()
  unless_2194_end:
.annotate 'line', 766
    set $P103, $P2193
    unless_null $P103, vivify_1077
    new $P103, "Undef"
  vivify_1077:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.include "except_types.pasm"
.sub "_block2196"  :anon :subid("406_1338064436.26") :outer("81_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 768
    .const 'Sub' $P2204 = "407_1338064436.26" 
    capture_lex $P2204
.annotate 'line', 769
    new $P107, "Undef"
    set $P2198, $P107
    .lex "$list", $P2198
.annotate 'line', 770
    new $P108, "Undef"
    set $P2199, $P108
    .lex "$hash", $P2199
.annotate 'line', 777
    $P2201 = root_new ['parrot';'Hash']
    set $P2200, $P2201
    .lex "%ch", $P2200
.annotate 'line', 769
    find_lex $P109, "$EMPTY_MATCH_LIST"
    unless_null $P109, vivify_1050
    new $P109, "Undef"
  vivify_1050:
    set $P2198, $P109
.annotate 'line', 770
    find_lex $P109, "$EMPTY_MATCH_HASH"
    unless_null $P109, vivify_1051
    new $P109, "Undef"
  vivify_1051:
    set $P2199, $P109
.annotate 'line', 771
    find_lex $P109, "NQPMatch"
    repr_instance_of $P110, $P109
    store_lex "$match", $P110
.annotate 'line', 772
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    find_lex $P111, "NQPCursor"
    find_lex $P112, "$match"
    unless_null $P112, vivify_1052
    new $P112, "Undef"
  vivify_1052:
    setattribute $P110, $P111, "$!match", $P112
.annotate 'line', 773
    find_lex $P109, "$match"
    unless_null $P109, vivify_1053
    new $P109, "Undef"
  vivify_1053:
    find_lex $P110, "NQPMatch"
    find_lex $P111, "self"
    nqp_decontainerize $P112, $P111
    setattribute $P109, $P110, "$!cursor", $P112
.annotate 'line', 774
    find_lex $P109, "$match"
    unless_null $P109, vivify_1054
    new $P109, "Undef"
  vivify_1054:
    find_lex $P110, "NQPMatch"
    find_lex $P111, "self"
    nqp_decontainerize $P112, $P111
    find_lex $P113, "NQPCursor"
    getattribute $P114, $P112, $P113, "$!orig"
    setattribute $P109, $P110, "$!orig", $P114
.annotate 'line', 775
    find_lex $P109, "$match"
    unless_null $P109, vivify_1055
    new $P109, "Undef"
  vivify_1055:
    find_lex $P110, "NQPMatch"
    find_lex $P111, "self"
    nqp_decontainerize $P112, $P111
    find_lex $P113, "NQPCursor"
    repr_get_attr_int $I102, $P112, $P113, "$!from"
    repr_bind_attr_int $P109, $P110, "$!from", $I102
.annotate 'line', 776
    find_lex $P109, "$match"
    unless_null $P109, vivify_1056
    new $P109, "Undef"
  vivify_1056:
    find_lex $P110, "NQPMatch"
    find_lex $P111, "self"
    nqp_decontainerize $P112, $P111
    find_lex $P113, "NQPCursor"
    repr_get_attr_int $I102, $P112, $P113, "$!pos"
    repr_bind_attr_int $P109, $P110, "$!to", $I102
.annotate 'line', 777
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    $P111 = $P110."CAPHASH"()
    set $P2200, $P111
.annotate 'line', 778
    set $P2202, $P2200
    unless_null $P2202, vivify_1057
    $P2202 = root_new ['parrot';'Hash']
  vivify_1057:
    defined $I102, $P2202
    unless $I102, for_undef_1058
    iter $P109, $P2202
    new $P113, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P113, loop2212_handler
    push_eh $P113
  loop2212_test:
    unless $P109, loop2212_done
    shift $P110, $P109
  loop2212_redo:
    .const 'Sub' $P2204 = "407_1338064436.26" 
    capture_lex $P2204
    $P2204($P110)
  loop2212_next:
    goto loop2212_test
  loop2212_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P114, exception, 'type'
    eq $P114, .CONTROL_LOOP_NEXT, loop2212_next
    eq $P114, .CONTROL_LOOP_REDO, loop2212_redo
  loop2212_done:
    pop_eh 
  for_undef_1058:
.annotate 'line', 789
    find_lex $P109, "$match"
    unless_null $P109, vivify_1073
    new $P109, "Undef"
  vivify_1073:
    find_lex $P110, "NQPCapture"
    set $P111, $P2198
    unless_null $P111, vivify_1074
    new $P111, "Undef"
  vivify_1074:
    setattribute $P109, $P110, "@!array", $P111
.annotate 'line', 790
    find_lex $P109, "$match"
    unless_null $P109, vivify_1075
    new $P109, "Undef"
  vivify_1075:
    find_lex $P110, "NQPCapture"
    set $P111, $P2199
    unless_null $P111, vivify_1076
    new $P111, "Undef"
  vivify_1076:
    setattribute $P109, $P110, "%!hash", $P111
.annotate 'line', 768
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "_block2203"  :anon :subid("407_1338064436.26") :outer("406_1338064436.26")
    .param pmc param_2206
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 779
    new $P111, "Undef"
    set $P2205, $P111
    .lex "$key", $P2205
    .lex "$_", param_2206
    find_lex $P112, "$_"
    unless_null $P112, vivify_1059
    new $P112, "Undef"
  vivify_1059:
    set $S100, $P112
    new $P113, 'String'
    set $P113, $S100
    set $P2205, $P113
.annotate 'line', 780
    set $P113, $P2205
    unless_null $P113, vivify_1060
    new $P113, "Undef"
  vivify_1060:
    set $S100, $P113
    is_cclass $I103, .CCLASS_NUMERIC, $S100, 0
    if $I103, if_2207
.annotate 'line', 785
    find_lex $P114, "$hash"
    unless_null $P114, vivify_1061
    new $P114, "Undef"
  vivify_1061:
    if $P114, unless_2210_end
    new $P115, "Hash"
    store_lex "$hash", $P115
  unless_2210_end:
.annotate 'line', 786
    set $P115, $P2205
    unless_null $P115, vivify_1062
    new $P115, "Undef"
  vivify_1062:
    set $S101, $P115
    find_lex $P114, "$hash"
    unless_null $P114, vivify_1063
    new $P114, "Undef"
  vivify_1063:
    set $P116, $P2205
    unless_null $P116, vivify_1064
    new $P116, "Undef"
  vivify_1064:
    find_lex $P2211, "%ch"
    unless_null $P2211, vivify_1065
    $P2211 = root_new ['parrot';'Hash']
  vivify_1065:
    set $P118, $P2211[$P116]
    unless_null $P118, vivify_1066
    new $P118, "Undef"
  vivify_1066:
    set $P114[$S101], $P118
.annotate 'line', 784
    set $P112, $P118
.annotate 'line', 780
    goto if_2207_end
  if_2207:
.annotate 'line', 781
    find_lex $P114, "$list"
    unless_null $P114, vivify_1067
    new $P114, "Undef"
  vivify_1067:
    if $P114, unless_2208_end
    new $P115, "ResizablePMCArray"
    store_lex "$list", $P115
  unless_2208_end:
.annotate 'line', 782
    set $P115, $P2205
    unless_null $P115, vivify_1068
    new $P115, "Undef"
  vivify_1068:
    set $I104, $P115
    find_lex $P114, "$list"
    unless_null $P114, vivify_1069
    new $P114, "Undef"
  vivify_1069:
    set $P116, $P2205
    unless_null $P116, vivify_1070
    new $P116, "Undef"
  vivify_1070:
    find_lex $P2209, "%ch"
    unless_null $P2209, vivify_1071
    $P2209 = root_new ['parrot';'Hash']
  vivify_1071:
    set $P117, $P2209[$P116]
    unless_null $P117, vivify_1072
    new $P117, "Undef"
  vivify_1072:
    set $P114[$I104], $P117
.annotate 'line', 780
    set $P112, $P117
  if_2207_end:
.annotate 'line', 778
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "Bool" :anon :subid("82_1338064436.26") :outer("405_1338064436.26")
    .param pmc param_2214
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 795
    .lex "self", param_2214
.annotate 'line', 796
    set $P103, param_2214
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$?CLASS"
    unless_null $P105, vivify_1078
    new $P105, "Undef"
  vivify_1078:
    getattribute $P106, $P104, $P105, "$!match"
    isnull $I100, $P106
    new $P107, 'Integer'
    set $P107, $I100
    isfalse $I101, $P107
    if $I101, if_2215
    new $P102, 'Integer'
    set $P102, $I101
    goto if_2215_end
  if_2215:
.annotate 'line', 797
    set $P108, param_2214
    nqp_decontainerize $P109, $P108
    find_lex $P110, "$?CLASS"
    unless_null $P110, vivify_1079
    new $P110, "Undef"
  vivify_1079:
    getattribute $P111, $P109, $P110, "$!match"
    istrue $I102, $P111
    new $P102, 'Integer'
    set $P102, $I102
  if_2215_end:
.annotate 'line', 795
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "parse" :anon :subid("83_1338064436.26") :outer("405_1338064436.26")
    .param pmc param_2217
    .param pmc param_2218
    .param pmc param_2219 :optional :named("rule")
    .param int has_param_2219 :opt_flag
    .param pmc param_2220 :optional :named("actions")
    .param int has_param_2220 :opt_flag
    .param pmc param_2221 :slurpy :named
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 800
    .lex "self", param_2217
    .lex "$target", param_2218
    if has_param_2219, optparam_1080
    new $P102, "String"
    assign $P102, "TOP"
    set param_2219, $P102
  optparam_1080:
    .lex "$rule", param_2219
    if has_param_2220, optparam_1081
    new $P103, "Undef"
    set param_2220, $P103
  optparam_1081:
    .lex "$actions", param_2220
    .lex "%options", param_2221
.annotate 'line', 801
    new $P104, "Undef"
    set $P2222, $P104
    .lex "$*ACTIONS", $P2222
.annotate 'line', 802
    new $P105, "Undef"
    set $P2223, $P105
    .lex "$cur", $P2223
.annotate 'line', 801
    set $P106, param_2220
    unless_null $P106, vivify_1082
    new $P106, "Undef"
  vivify_1082:
    set $P2222, $P106
.annotate 'line', 802
    set $P106, param_2217
    nqp_decontainerize $P107, $P106
    set $P108, param_2218
    unless_null $P108, vivify_1083
    new $P108, "Undef"
  vivify_1083:
    set $P2224, param_2221
    unless_null $P2224, vivify_1084
    $P2224 = root_new ['parrot';'Hash']
  vivify_1084:
    $P109 = $P107."!cursor_init"($P108, $P2224 :flat)
    set $P2223, $P109
.annotate 'line', 803
    set $P107, param_2219
    unless_null $P107, vivify_1085
    new $P107, "Undef"
  vivify_1085:
    is_invokable $I100, $P107
    if $I100, if_2225
.annotate 'line', 805
    set $P112, $P2223
    unless_null $P112, vivify_1086
    new $P112, "Undef"
  vivify_1086:
    set $P113, param_2219
    unless_null $P113, vivify_1087
    new $P113, "Undef"
  vivify_1087:
    set $S100, $P113
    find_method $P114, $P112, $S100
    set $P115, $P2223
    unless_null $P115, vivify_1088
    new $P115, "Undef"
  vivify_1088:
    $P116 = $P114($P115)
    $P117 = $P116."MATCH"()
    set $P106, $P117
.annotate 'line', 803
    goto if_2225_end
  if_2225:
.annotate 'line', 804
    set $P108, param_2219
    unless_null $P108, vivify_1089
    new $P108, "Undef"
  vivify_1089:
    set $P109, $P2223
    unless_null $P109, vivify_1090
    new $P109, "Undef"
  vivify_1090:
    $P110 = $P108($P109)
    $P111 = $P110."MATCH"()
    set $P106, $P111
  if_2225_end:
.annotate 'line', 800
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.include "except_types.pasm"
.sub "!INTERPOLATE" :anon :subid("84_1338064436.26") :outer("405_1338064436.26")
    .param pmc param_2229
    .param pmc param_2230
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 808
    .const 'Sub' $P2260 = "413_1338064436.26" 
    capture_lex $P2260
    .const 'Sub' $P2233 = "408_1338064436.26" 
    capture_lex $P2233
    new $P2228, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2228, control_2227
    push_eh $P2228
    .lex "self", param_2229
    .lex "$var", param_2230
.annotate 'line', 809
    set $P103, param_2230
    unless_null $P103, vivify_1091
    new $P103, "Undef"
  vivify_1091:
    does $I100, $P103, "array"
    if $I100, if_2231
.annotate 'line', 833
    .const 'Sub' $P2260 = "413_1338064436.26" 
    capture_lex $P2260
    $P115 = $P2260()
    set $P102, $P115
.annotate 'line', 809
    goto if_2231_end
  if_2231:
    .const 'Sub' $P2233 = "408_1338064436.26" 
    capture_lex $P2233
    $P109 = $P2233()
    set $P102, $P109
  if_2231_end:
.annotate 'line', 808
    .return ($P102)
  control_2227:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P103, exception, "payload"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.include "except_types.pasm"
.sub "_block2259"  :anon :subid("413_1338064436.26") :outer("84_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 835
    new $P110, "Undef"
    set $P2261, $P110
    .lex "$cur", $P2261
.annotate 'line', 836
    new $P111, "Undef"
    set $P2262, $P111
    .lex "$pos", $P2262
.annotate 'line', 837
    new $P112, "Undef"
    set $P2263, $P112
    .lex "$tgt", $P2263
.annotate 'line', 838
    new $P113, "Undef"
    set $P2264, $P113
    .lex "$len", $P2264
.annotate 'line', 839
    new $P114, "Undef"
    set $P2265, $P114
    .lex "$adv", $P2265
.annotate 'line', 834
    find_lex $P115, "$var"
    unless_null $P115, vivify_1092
    new $P115, "Undef"
  vivify_1092:
    is_invokable $I101, $P115
    unless $I101, if_2266_end
    new $P116, "Exception"
    set $P116['type'], .CONTROL_RETURN
    find_lex $P117, "$var"
    unless_null $P117, vivify_1093
    new $P117, "Undef"
  vivify_1093:
    find_lex $P118, "self"
    nqp_decontainerize $P119, $P118
    $P120 = $P117($P119)
    setattribute $P116, 'payload', $P120
    throw $P116
  if_2266_end:
.annotate 'line', 835
    find_lex $P115, "self"
    nqp_decontainerize $P116, $P115
    $P117 = $P116."!cursor_start"()
    set $P2261, $P117
.annotate 'line', 836
    set $P115, $P2261
    unless_null $P115, vivify_1094
    new $P115, "Undef"
  vivify_1094:
    find_lex $P116, "$?CLASS"
    unless_null $P116, vivify_1095
    new $P116, "Undef"
  vivify_1095:
    repr_get_attr_int $I101, $P115, $P116, "$!from"
    new $P117, 'Integer'
    set $P117, $I101
    set $P2262, $P117
.annotate 'line', 837
    set $P115, $P2261
    unless_null $P115, vivify_1096
    new $P115, "Undef"
  vivify_1096:
    $P116 = $P115."target"()
    set $P2263, $P116
.annotate 'line', 838
    find_lex $P115, "$var"
    unless_null $P115, vivify_1097
    new $P115, "Undef"
  vivify_1097:
    set $S100, $P115
    length $I101, $S100
    new $P116, 'Integer'
    set $P116, $I101
    set $P2264, $P116
.annotate 'line', 839
    set $P115, $P2262
    unless_null $P115, vivify_1098
    new $P115, "Undef"
  vivify_1098:
    set $P116, $P2264
    unless_null $P116, vivify_1099
    new $P116, "Undef"
  vivify_1099:
    add $P117, $P115, $P116
    set $P2265, $P117
.annotate 'line', 840
    set $P116, $P2265
    unless_null $P116, vivify_1100
    new $P116, "Undef"
  vivify_1100:
    set $N100, $P116
    set $P117, $P2263
    unless_null $P117, vivify_1101
    new $P117, "Undef"
  vivify_1101:
    set $S100, $P117
    length $I101, $S100
    set $N101, $I101
    isgt $I102, $N100, $N101
    unless $I102, unless_2268
    new $P115, 'Integer'
    set $P115, $I102
    goto unless_2268_end
  unless_2268:
.annotate 'line', 841
    set $P118, $P2263
    unless_null $P118, vivify_1102
    new $P118, "Undef"
  vivify_1102:
    set $S101, $P118
    set $P119, $P2262
    unless_null $P119, vivify_1103
    new $P119, "Undef"
  vivify_1103:
    set $I103, $P119
    set $P120, $P2264
    unless_null $P120, vivify_1104
    new $P120, "Undef"
  vivify_1104:
    set $I104, $P120
    substr $S102, $S101, $I103, $I104
    find_lex $P121, "$var"
    unless_null $P121, vivify_1105
    new $P121, "Undef"
  vivify_1105:
    set $S103, $P121
    isne $I105, $S102, $S103
    new $P115, 'Integer'
    set $P115, $I105
  unless_2268_end:
    unless $P115, if_2267_end
.annotate 'line', 840
    new $P122, "Exception"
    set $P122['type'], .CONTROL_RETURN
    set $P123, $P2261
    unless_null $P123, vivify_1106
    new $P123, "Undef"
  vivify_1106:
    setattribute $P122, 'payload', $P123
    throw $P122
  if_2267_end:
.annotate 'line', 842
    set $P115, $P2261
    unless_null $P115, vivify_1107
    new $P115, "Undef"
  vivify_1107:
    set $P116, $P2265
    unless_null $P116, vivify_1108
    new $P116, "Undef"
  vivify_1108:
    $P115."!cursor_pass"($P116, "")
.annotate 'line', 843
    new $P115, "Exception"
    set $P115['type'], .CONTROL_RETURN
    set $P116, $P2261
    unless_null $P116, vivify_1109
    new $P116, "Undef"
  vivify_1109:
    setattribute $P115, 'payload', $P116
    throw $P115
.annotate 'line', 833
    .return ()
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.include "except_types.pasm"
.sub "_block2232"  :anon :subid("408_1338064436.26") :outer("84_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 809
    .const 'Sub' $P2240 = "409_1338064436.26" 
    capture_lex $P2240
.annotate 'line', 810
    new $P104, "Undef"
    set $P2234, $P104
    .lex "$maxlen", $P2234
.annotate 'line', 811
    new $P105, "Undef"
    set $P2235, $P105
    .lex "$cur", $P2235
.annotate 'line', 812
    new $P106, "Undef"
    set $P2236, $P106
    .lex "$pos", $P2236
.annotate 'line', 813
    new $P107, "Undef"
    set $P2237, $P107
    .lex "$tgt", $P2237
.annotate 'line', 814
    new $P108, "Undef"
    set $P2238, $P108
    .lex "$eos", $P2238
.annotate 'line', 810
    new $P109, "Float"
    assign $P109, -1
    set $P2234, $P109
.annotate 'line', 811
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    $P111 = $P110."!cursor_start"()
    set $P2235, $P111
.annotate 'line', 812
    set $P109, $P2235
    unless_null $P109, vivify_1110
    new $P109, "Undef"
  vivify_1110:
    find_lex $P110, "$?CLASS"
    unless_null $P110, vivify_1111
    new $P110, "Undef"
  vivify_1111:
    repr_get_attr_int $I101, $P109, $P110, "$!from"
    new $P111, 'Integer'
    set $P111, $I101
    set $P2236, $P111
.annotate 'line', 813
    set $P109, $P2235
    unless_null $P109, vivify_1112
    new $P109, "Undef"
  vivify_1112:
    $P110 = $P109."target"()
    set $P2237, $P110
.annotate 'line', 814
    set $P109, $P2237
    unless_null $P109, vivify_1113
    new $P109, "Undef"
  vivify_1113:
    set $S100, $P109
    length $I101, $S100
    new $P110, 'Integer'
    set $P110, $I101
    set $P2238, $P110
.annotate 'line', 815
    find_lex $P110, "$var"
    unless_null $P110, vivify_1114
    new $P110, "Undef"
  vivify_1114:
    defined $I101, $P110
    unless $I101, for_undef_1115
    iter $P109, $P110
    new $P113, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P113, loop2257_handler
    push_eh $P113
  loop2257_test:
    unless $P109, loop2257_done
    shift $P111, $P109
  loop2257_redo:
    .const 'Sub' $P2240 = "409_1338064436.26" 
    capture_lex $P2240
    $P2240($P111)
  loop2257_next:
    goto loop2257_test
  loop2257_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P114, exception, 'type'
    eq $P114, .CONTROL_LOOP_NEXT, loop2257_next
    eq $P114, .CONTROL_LOOP_REDO, loop2257_redo
  loop2257_done:
    pop_eh 
  for_undef_1115:
.annotate 'line', 830
    set $P109, $P2234
    unless_null $P109, vivify_1137
    new $P109, "Undef"
  vivify_1137:
    set $N100, $P109
    set $N101, 0
    isge $I101, $N100, $N101
    unless $I101, if_2258_end
    set $P110, $P2235
    unless_null $P110, vivify_1138
    new $P110, "Undef"
  vivify_1138:
    set $P111, $P2236
    unless_null $P111, vivify_1139
    new $P111, "Undef"
  vivify_1139:
    set $P112, $P2234
    unless_null $P112, vivify_1140
    new $P112, "Undef"
  vivify_1140:
    add $P113, $P111, $P112
    $P110."!cursor_pass"($P113, "")
  if_2258_end:
.annotate 'line', 831
    new $P109, "Exception"
    set $P109['type'], .CONTROL_RETURN
    set $P110, $P2235
    unless_null $P110, vivify_1141
    new $P110, "Undef"
  vivify_1141:
    setattribute $P109, 'payload', $P110
    throw $P109
.annotate 'line', 809
    .return ()
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "_block2239"  :anon :subid("409_1338064436.26") :outer("408_1338064436.26")
    .param pmc param_2241
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 815
    .const 'Sub' $P2252 = "412_1338064436.26" 
    capture_lex $P2252
    .const 'Sub' $P2244 = "410_1338064436.26" 
    capture_lex $P2244
    .lex "$_", param_2241
.annotate 'line', 816
    find_lex $P113, "$_"
    unless_null $P113, vivify_1116
    new $P113, "Undef"
  vivify_1116:
    is_invokable $I102, $P113
    if $I102, if_2242
.annotate 'line', 824
    .const 'Sub' $P2252 = "412_1338064436.26" 
    capture_lex $P2252
    $P119 = $P2252()
    set $P112, $P119
.annotate 'line', 816
    goto if_2242_end
  if_2242:
    .const 'Sub' $P2244 = "410_1338064436.26" 
    capture_lex $P2244
    $P116 = $P2244()
    set $P112, $P116
  if_2242_end:
.annotate 'line', 815
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "_block2251"  :anon :subid("412_1338064436.26") :outer("409_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 825
    new $P117, "Undef"
    set $P2253, $P117
    .lex "$len", $P2253
    find_lex $P118, "$_"
    unless_null $P118, vivify_1117
    new $P118, "Undef"
  vivify_1117:
    set $S100, $P118
    length $I103, $S100
    new $P119, 'Integer'
    set $P119, $I103
    set $P2253, $P119
.annotate 'line', 826
    set $P121, $P2253
    unless_null $P121, vivify_1118
    new $P121, "Undef"
  vivify_1118:
    set $N100, $P121
    find_lex $P122, "$maxlen"
    unless_null $P122, vivify_1119
    new $P122, "Undef"
  vivify_1119:
    set $N101, $P122
    isgt $I103, $N100, $N101
    if $I103, if_2256
    new $P120, 'Integer'
    set $P120, $I103
    goto if_2256_end
  if_2256:
    find_lex $P123, "$pos"
    unless_null $P123, vivify_1120
    new $P123, "Undef"
  vivify_1120:
    set $P124, $P2253
    unless_null $P124, vivify_1121
    new $P124, "Undef"
  vivify_1121:
    add $P125, $P123, $P124
    set $N102, $P125
    find_lex $P126, "$eos"
    unless_null $P126, vivify_1122
    new $P126, "Undef"
  vivify_1122:
    set $N103, $P126
    isle $I104, $N102, $N103
    new $P120, 'Integer'
    set $P120, $I104
  if_2256_end:
    if $P120, if_2255
    set $P119, $P120
    goto if_2255_end
  if_2255:
.annotate 'line', 827
    find_lex $P127, "$tgt"
    unless_null $P127, vivify_1123
    new $P127, "Undef"
  vivify_1123:
    set $S100, $P127
    find_lex $P128, "$pos"
    unless_null $P128, vivify_1124
    new $P128, "Undef"
  vivify_1124:
    set $I105, $P128
    set $P129, $P2253
    unless_null $P129, vivify_1125
    new $P129, "Undef"
  vivify_1125:
    set $I106, $P129
    substr $S101, $S100, $I105, $I106
    find_lex $P130, "$_"
    unless_null $P130, vivify_1126
    new $P130, "Undef"
  vivify_1126:
    set $S102, $P130
    iseq $I107, $S101, $S102
    new $P119, 'Integer'
    set $P119, $I107
  if_2255_end:
    if $P119, if_2254
    set $P118, $P119
    goto if_2254_end
  if_2254:
.annotate 'line', 826
    set $P131, $P2253
    unless_null $P131, vivify_1127
    new $P131, "Undef"
  vivify_1127:
    store_lex "$maxlen", $P131
    set $P118, $P131
  if_2254_end:
.annotate 'line', 824
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "_block2243"  :anon :subid("410_1338064436.26") :outer("409_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 816
    .const 'Sub' $P2248 = "411_1338064436.26" 
    capture_lex $P2248
.annotate 'line', 817
    new $P114, "Undef"
    set $P2245, $P114
    .lex "$res", $P2245
    find_lex $P115, "$_"
    unless_null $P115, vivify_1128
    new $P115, "Undef"
  vivify_1128:
    find_lex $P116, "self"
    nqp_decontainerize $P117, $P116
    $P118 = $P115($P117)
    set $P2245, $P118
.annotate 'line', 818
    set $P116, $P2245
    unless_null $P116, vivify_1129
    new $P116, "Undef"
  vivify_1129:
    if $P116, if_2246
    set $P115, $P116
    goto if_2246_end
  if_2246:
    .const 'Sub' $P2248 = "411_1338064436.26" 
    capture_lex $P2248
    $P119 = $P2248()
    set $P115, $P119
  if_2246_end:
.annotate 'line', 816
    .return ($P115)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "_block2247"  :anon :subid("411_1338064436.26") :outer("410_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 819
    new $P117, "Undef"
    set $P2249, $P117
    .lex "$adv", $P2249
    find_lex $P118, "$res"
    unless_null $P118, vivify_1130
    new $P118, "Undef"
  vivify_1130:
    find_lex $P119, "$?CLASS"
    unless_null $P119, vivify_1131
    new $P119, "Undef"
  vivify_1131:
    repr_get_attr_int $I103, $P118, $P119, "$!pos"
    new $P120, 'Integer'
    set $P120, $I103
    set $P2249, $P120
.annotate 'line', 820
    set $P118, $P2249
    unless_null $P118, vivify_1132
    new $P118, "Undef"
  vivify_1132:
    find_lex $P119, "$pos"
    unless_null $P119, vivify_1133
    new $P119, "Undef"
  vivify_1133:
    sub $P120, $P118, $P119
    set $P2249, $P120
.annotate 'line', 821
    set $P119, $P2249
    unless_null $P119, vivify_1134
    new $P119, "Undef"
  vivify_1134:
    set $N100, $P119
    find_lex $P120, "$maxlen"
    unless_null $P120, vivify_1135
    new $P120, "Undef"
  vivify_1135:
    set $N101, $P120
    isgt $I103, $N100, $N101
    if $I103, if_2250
    new $P118, 'Integer'
    set $P118, $I103
    goto if_2250_end
  if_2250:
    set $P121, $P2249
    unless_null $P121, vivify_1136
    new $P121, "Undef"
  vivify_1136:
    store_lex "$maxlen", $P121
    set $P118, $P121
  if_2250_end:
.annotate 'line', 818
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.include "except_types.pasm"
.sub "!INTERPOLATE_REGEX" :anon :subid("85_1338064436.26") :outer("405_1338064436.26")
    .param pmc param_2272
    .param pmc param_2273
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 847
    .const 'Sub' $P2276 = "414_1338064436.26" 
    capture_lex $P2276
    new $P2271, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2271, control_2270
    push_eh $P2271
    .lex "self", param_2272
    .lex "$var", param_2273
.annotate 'line', 848
    set $P102, param_2273
    unless_null $P102, vivify_1142
    new $P102, "Undef"
  vivify_1142:
    is_invokable $I100, $P102
    if $I100, unless_2274_end
    .const 'Sub' $P2276 = "414_1338064436.26" 
    capture_lex $P2276
    $P2276()
  unless_2274_end:
.annotate 'line', 863
    new $P102, "Exception"
    set $P102['type'], .CONTROL_RETURN
    set $P103, param_2272
    nqp_decontainerize $P104, $P103
    set $P105, param_2273
    unless_null $P105, vivify_1155
    new $P105, "Undef"
  vivify_1155:
    $P106 = $P104."!INTERPOLATE"($P105)
    setattribute $P102, 'payload', $P106
    throw $P102
.annotate 'line', 847
    .return ()
  control_2270:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P102, exception, "payload"
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "_block2275"  :anon :subid("414_1338064436.26") :outer("85_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 848
    .const 'Sub' $P2280 = "415_1338064436.26" 
    capture_lex $P2280
.annotate 'line', 849
    new $P103, "Undef"
    set $P2277, $P103
    .lex "$rxcompiler", $P2277
    compreg $P104, "QRegex::P6Regex"
    set $P2277, $P104
.annotate 'line', 850
    find_lex $P105, "$var"
    unless_null $P105, vivify_1143
    new $P105, "Undef"
  vivify_1143:
    does $I101, $P105, "array"
    if $I101, if_2278
.annotate 'line', 860
    set $P109, $P2277
    unless_null $P109, vivify_1144
    new $P109, "Undef"
  vivify_1144:
    find_lex $P110, "$var"
    unless_null $P110, vivify_1145
    new $P110, "Undef"
  vivify_1145:
    $P111 = $P109."compile"($P110)
    store_lex "$var", $P111
.annotate 'line', 859
    set $P104, $P111
.annotate 'line', 850
    goto if_2278_end
  if_2278:
    .const 'Sub' $P2280 = "415_1338064436.26" 
    capture_lex $P2280
    $P108 = $P2280()
    set $P104, $P108
  if_2278_end:
.annotate 'line', 848
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.include "except_types.pasm"
.sub "_block2279"  :anon :subid("415_1338064436.26") :outer("414_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 850
    .const 'Sub' $P2283 = "416_1338064436.26" 
    capture_lex $P2283
.annotate 'line', 851
    new $P106, "Undef"
    set $P2281, $P106
    .lex "$res", $P2281
    new $P107, "ResizablePMCArray"
    set $P2281, $P107
.annotate 'line', 852
    find_lex $P108, "$var"
    unless_null $P108, vivify_1146
    new $P108, "Undef"
  vivify_1146:
    defined $I102, $P108
    unless $I102, for_undef_1147
    iter $P107, $P108
    new $P112, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P112, loop2287_handler
    push_eh $P112
  loop2287_test:
    unless $P107, loop2287_done
    shift $P109, $P107
  loop2287_redo:
    .const 'Sub' $P2283 = "416_1338064436.26" 
    capture_lex $P2283
    $P2283($P109)
  loop2287_next:
    goto loop2287_test
  loop2287_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P113, exception, 'type'
    eq $P113, .CONTROL_LOOP_NEXT, loop2287_next
    eq $P113, .CONTROL_LOOP_REDO, loop2287_redo
  loop2287_done:
    pop_eh 
  for_undef_1147:
.annotate 'line', 857
    set $P107, $P2281
    unless_null $P107, vivify_1154
    new $P107, "Undef"
  vivify_1154:
    store_lex "$var", $P107
.annotate 'line', 850
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "_block2282"  :anon :subid("416_1338064436.26") :outer("415_1338064436.26")
    .param pmc param_2285
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 853
    new $P110, "Undef"
    set $P2284, $P110
    .lex "$elem", $P2284
    .lex "$_", param_2285
    find_lex $P111, "$_"
    unless_null $P111, vivify_1148
    new $P111, "Undef"
  vivify_1148:
    set $P2284, $P111
.annotate 'line', 854
    set $P111, $P2284
    unless_null $P111, vivify_1149
    new $P111, "Undef"
  vivify_1149:
    is_invokable $I103, $P111
    if $I103, unless_2286_end
    find_lex $P112, "$rxcompiler"
    unless_null $P112, vivify_1150
    new $P112, "Undef"
  vivify_1150:
    set $P113, $P2284
    unless_null $P113, vivify_1151
    new $P113, "Undef"
  vivify_1151:
    $P114 = $P112."compile"($P113)
    set $P2284, $P114
  unless_2286_end:
.annotate 'line', 855
    find_lex $P111, "$res"
    unless_null $P111, vivify_1152
    new $P111, "Undef"
  vivify_1152:
    set $P112, $P2284
    unless_null $P112, vivify_1153
    new $P112, "Undef"
  vivify_1153:
    push $P111, $P112
.annotate 'line', 852
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQPRegexMethod"]
.sub "_block2289"  :subid("417_1338064436.26") :outer("387_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 867
    .const 'Sub' $P2299 = "385_1338064436.26" 
    capture_lex $P2299
    .const 'Sub' $P2296 = "384_1338064436.26" 
    capture_lex $P2296
    .const 'Sub' $P2293 = "383_1338064436.26" 
    capture_lex $P2293
    .lex "$?PACKAGE", $P2291
    .lex "$?CLASS", $P2292
.annotate 'line', 875
    .const 'Sub' $P2299 = "385_1338064436.26" 
    newclosure $P2301, $P2299
.annotate 'line', 867
    .return ($P2301)
.end


.HLL "nqp"

.namespace ["NQPRegexMethod"]
.sub "new" :anon :subid("383_1338064436.26") :outer("417_1338064436.26")
    .param pmc param_2294
    .param pmc param_2295
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 869
    .lex "self", param_2294
    .lex "$code", param_2295
.annotate 'line', 870
    set $P100, param_2294
    nqp_decontainerize $P101, $P100
    set $P102, param_2295
    unless_null $P102, vivify_1156
    new $P102, "Undef"
  vivify_1156:
    $P103 = $P101."bless"($P102 :named("code"))
.annotate 'line', 869
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPRegexMethod"]
.sub "ACCEPTS" :anon :subid("384_1338064436.26") :outer("417_1338064436.26")
    .param pmc param_2297
    .param pmc param_2298
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 872
    .lex "self", param_2297
    .lex "$target", param_2298
.annotate 'line', 873
    find_lex $P100, "NQPCursor"
    set $P101, param_2298
    unless_null $P101, vivify_1157
    new $P101, "Undef"
  vivify_1157:
    set $P102, param_2297
    nqp_decontainerize $P103, $P102
    $P104 = $P100."parse"($P101, $P103 :named("rule"))
.annotate 'line', 872
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQPRegexMethod"]
.sub "Str" :anon :subid("385_1338064436.26") :outer("417_1338064436.26")
    .param pmc param_2300
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 875
    .lex "self", param_2300
.annotate 'line', 876
    set $P100, param_2300
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "152819621F18B86657DB412D206298CA3534F307-1338064436.189", 82
    repr_get_attr_obj $P103, $P101, $P102, "$!code", 0
    unless_null $P103, vivify_1158
    new $P103, "Undef"
  vivify_1158:
    set $S100, $P103
.annotate 'line', 875
    .return ($S100)
.end


.HLL "nqp"

.namespace ["NQPRegex"]
.sub "_block2302"  :subid("418_1338064436.26") :outer("387_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 880
    .const 'Sub' $P2306 = "386_1338064436.26" 
    capture_lex $P2306
    .lex "$?PACKAGE", $P2304
    .lex "$?CLASS", $P2305
.annotate 'line', 881
    .const 'Sub' $P2306 = "386_1338064436.26" 
    newclosure $P2309, $P2306
.annotate 'line', 880
    .return ($P2309)
.end


.HLL "nqp"

.namespace ["NQPRegex"]
.sub "ACCEPTS" :anon :subid("386_1338064436.26") :outer("418_1338064436.26")
    .param pmc param_2307
    .param pmc param_2308
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 881
    .lex "self", param_2307
    .lex "$target", param_2308
.annotate 'line', 882
    find_lex $P100, "NQPCursor"
    set $P101, param_2308
    unless_null $P101, vivify_1159
    new $P101, "Undef"
  vivify_1159:
    set $P102, param_2307
    nqp_decontainerize $P103, $P102
    $P104 = $P100."parse"($P101, $P103 :named("rule"), 0 :named("c"))
.annotate 'line', 881
    .return ($P104)
.end


.HLL "nqp"

.namespace []
.sub "_block2310"  :anon :subid("419_1338064436.26") :outer("387_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 886
    .const 'Sub' $P2316 = "420_1338064436.26" 
    capture_lex $P2316
    .lex "DEFAULT", $P2312
    .lex "$?PACKAGE", $P2313
    .lex "$?CLASS", $P2314
.annotate 'line', 887
    .const 'Sub' $P2316 = "420_1338064436.26" 
    capture_lex $P2316
    $P101 = $P2316()
.annotate 'line', 886
    .return ($P101)
.end


.HLL "nqp"

.namespace ["DEFAULT"]
.sub "_block2315"  :subid("420_1338064436.26") :outer("419_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 887
    .lex "$?PACKAGE", $P2317
    .lex "$?CLASS", $P2318
.annotate 'line', 888
    find_lex $P100, "NQPCursorRole"
    set $P101, $P2317
    unless_null $P101, vivify_1160
    new $P101, "Undef"
    set $P2317, $P101
  vivify_1160:
    get_who $P102, $P101
    set $P102["NQPCursorRole"], $P100
.annotate 'line', 887
    .return ($P100)
.end


.HLL "nqp"

.namespace []
.sub "_block2320" :load :anon :subid("421_1338064436.26")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 1
    .const '' $P2322 = "387_1338064436.26" 
    $P106 = $P2322()
    .return ($P106)
.end

