.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'

.HLL "nqp"

.loadlib "nqp_group"

.loadlib "nqp_ops"

.loadlib "nqp_bigint_ops"

.loadlib "trans_ops"

.loadlib "io_ops"

.namespace []
.sub "_block1426"  :anon :subid("391_1337965216.259")
    .param pmc param_1428 :slurpy
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 0
    .const 'Sub' $P2335 = "426_1337965216.259" 
    capture_lex $P2335
    .const 'Sub' $P2322 = "423_1337965216.259" 
    capture_lex $P2322
    .const 'Sub' $P2314 = "422_1337965216.259" 
    capture_lex $P2314
    .const 'Sub' $P2301 = "421_1337965216.259" 
    capture_lex $P2301
    .const 'Sub' $P2201 = "409_1337965216.259" 
    capture_lex $P2201
    .const 'Sub' $P2136 = "404_1337965216.259" 
    capture_lex $P2136
    .const 'Sub' $P1710 = "68_1337965216.259" 
    capture_lex $P1710
    .const 'Sub' $P1438 = "392_1337965216.259" 
    capture_lex $P1438
.annotate 'line', 1
    .lex "@ARGS", param_1428
    .lex "GLOBALish", $P1429
    .lex "$?PACKAGE", $P1430
    .lex "NQPCursorRole", $P1431
    .lex "NQPMatch", $P1432
    .lex "NQPCursor", $P1433
    .lex "NQPRegexMethod", $P1434
    .lex "NQPRegex", $P1435
    .lex "EXPORT", $P1436
    $P0 = find_dynamic_lex "$*CTXSAVE"
    if null $P0 goto ctxsave_done
    $I0 = can $P0, "ctxsave"
    unless $I0 goto ctxsave_done
    $P0."ctxsave"()
  ctxsave_done:
.annotate 'line', 5
    .const 'Sub' $P1438 = "392_1337965216.259" 
    capture_lex $P1438
    $P1438()
.annotate 'line', 716
    .const 'Sub' $P2136 = "404_1337965216.259" 
    capture_lex $P2136
    $P2136()
.annotate 'line', 755
    .const 'Sub' $P2201 = "409_1337965216.259" 
    capture_lex $P2201
    $P2201()
.annotate 'line', 852
    .const 'Sub' $P2301 = "421_1337965216.259" 
    capture_lex $P2301
    $P2301()
.annotate 'line', 865
    .const 'Sub' $P2314 = "422_1337965216.259" 
    capture_lex $P2314
    $P2314()
.annotate 'line', 871
    .const 'Sub' $P2322 = "423_1337965216.259" 
    capture_lex $P2322
    $P2322()
.annotate 'line', 1
    set $P101, param_1428
    if $P101, if_2330
    set $P100, $P101
    goto if_2330_end
  if_2330:
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P102, "ModuleLoader"
    getinterp $P103
    set $P104, $P103["context"]
    $P105 = $P102."set_mainline_module"($P104)
    set $P100, $P105
  if_2330_end:
    .return ($P100)
    .const 'Sub' $P2332 = "425_1337965216.259" 
    .return ($P2332)
.end


.HLL "nqp"

.namespace []
.sub "" :load :init :subid("post427") :outer("391_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 0
    .const 'Sub' $P1427 = "391_1337965216.259" 
    .local pmc block
    set block, $P1427
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P107
    get_class $P108, "LexPad"
    get_class $P109, "NQPLexPad"
    $P107."hll_map"($P108, $P109)
    nqp_create_sc $P110, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224"
    .local pmc cur_sc
    set cur_sc, $P110
    cur_sc."set_description"("src\\stage2\\QRegex.nqp")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P111, "ModuleLoader"
    $P112 = $P111."load_setting"("NQPCORE")
    block."set_outer_ctx"($P112)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P111, "ModuleLoader"
    $P111."load_module"("NQPRegex")
    set $S100, ""
    new $P111, "ResizableStringArray"
    .local pmc string_heap
    set string_heap, $P111
    null $S101
    push string_heap, $S101
    push string_heap, "P6opaque"
    push string_heap, "Regex"
    push string_heap, "PAST"
    push string_heap, "__REGEX_CORE_SC__"
    push string_heap, "_dumper"
    push string_heap, "QRegex"
    push string_heap, "NQPCursorRole"
    push string_heap, "NQPMatch"
    push string_heap, "NQPCursor"
    push string_heap, "NQPRegexMethod"
    push string_heap, "NQPRegex"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "2DEE75AFD50ED67BDF162F6BA56A80FA8956D48C-1337965215.466"
    push string_heap, "src\\stage2\\NQPCORE.setting"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "addstate"
    push string_heap, "addedge"
    push string_heap, "states"
    push string_heap, "addnode"
    push string_heap, "regex_nfa"
    push string_heap, "fate"
    push string_heap, "alt"
    push string_heap, "anchor"
    push string_heap, "cclass"
    push string_heap, "concat"
    push string_heap, "enumcharlist"
    push string_heap, "literal"
    push string_heap, "subrule"
    push string_heap, "quant"
    push string_heap, "pastnode"
    push string_heap, "subcapture"
    push string_heap, "past"
    push string_heap, "mergesubrule"
    push string_heap, "run"
    push string_heap, "$!states"
    push string_heap, "$!edges"
    push string_heap, "Uninstantiable"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "BUILD"
    push string_heap, "list"
    push string_heap, "hash"
    push string_heap, "from"
    push string_heap, "orig"
    push string_heap, "to"
    push string_heap, "CURSOR"
    push string_heap, "Bool"
    push string_heap, "chars"
    push string_heap, "!make"
    push string_heap, "ast"
    push string_heap, "!dump_str"
    push string_heap, "@!array"
    push string_heap, "%!hash"
    push string_heap, "$!orig"
    push string_heap, "$!from"
    push string_heap, "$!to"
    push string_heap, "$!ast"
    push string_heap, "$!cursor"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "MATCH"
    push string_heap, "Bool"
    push string_heap, "parse"
    push string_heap, "!INTERPOLATE"
    push string_heap, "!INTERPOLATE_REGEX"
    push string_heap, "target"
    push string_heap, "from"
    push string_heap, "pos"
    push string_heap, "CAPHASH"
    push string_heap, "!cursor_init"
    push string_heap, "!cursor_start"
    push string_heap, "!cursor_start_subcapture"
    push string_heap, "!cursor_capture"
    push string_heap, "!cursor_push_cstack"
    push string_heap, "!cursor_pass"
    push string_heap, "!cursor_fail"
    push string_heap, "!cursor_next"
    push string_heap, "!reduce"
    push string_heap, "!reduce_with_match"
    push string_heap, "!protoregex"
    push string_heap, "!protoregex_nfa"
    push string_heap, "!protoregex_table"
    push string_heap, "!BACKREF"
    push string_heap, "!LITERAL"
    push string_heap, "at"
    push string_heap, "before"
    push string_heap, "after"
    push string_heap, "ws"
    push string_heap, "ww"
    push string_heap, "wb"
    push string_heap, "ident"
    push string_heap, "alpha"
    push string_heap, "alnum"
    push string_heap, "upper"
    push string_heap, "lower"
    push string_heap, "digit"
    push string_heap, "xdigit"
    push string_heap, "space"
    push string_heap, "blank"
    push string_heap, "cntrl"
    push string_heap, "punct"
    push string_heap, "FAILGOAL"
    push string_heap, "$!orig"
    push string_heap, "$!target"
    push string_heap, "$!from"
    push string_heap, "$!pos"
    push string_heap, "$!match"
    push string_heap, "$!name"
    push string_heap, "$!bstack"
    push string_heap, "$!cstack"
    push string_heap, "$!regexsub"
    push string_heap, "$!restart"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "$!code"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "$!code"
    push string_heap, "Uninstantiable"
    push string_heap, "DEFAULT"
    push string_heap, "Uninstantiable"
    push string_heap, "__6MODEL_CORE__"
    push string_heap, "GLOBALish"
    push string_heap, "5B6BCDEB97207A8A1AF979F9510A88333D9459D9-1337965212.796"
    push string_heap, "src\\stage2\\gen\\nqp-mo.pm"
    push string_heap, "QRegex::NFA"
    push string_heap, "$!states"
    push string_heap, "$!edges"
    push string_heap, "new"
    push string_heap, "addstate"
    push string_heap, "addedge"
    push string_heap, "states"
    push string_heap, "addnode"
    push string_heap, "regex_nfa"
    push string_heap, "fate"
    push string_heap, "alt"
    push string_heap, "anchor"
    push string_heap, "cclass"
    push string_heap, "concat"
    push string_heap, "enumcharlist"
    push string_heap, "literal"
    push string_heap, "subrule"
    push string_heap, "quant"
    push string_heap, "pastnode"
    push string_heap, "subcapture"
    push string_heap, "past"
    push string_heap, "mergesubrule"
    push string_heap, "run"
    push string_heap, "__dump"
    push string_heap, "NQPCursorRole"
    push string_heap, "$!orig"
    push string_heap, "$!target"
    push string_heap, "$!from"
    push string_heap, "$!pos"
    push string_heap, "$!match"
    push string_heap, "$!name"
    push string_heap, "$!bstack"
    push string_heap, "$!cstack"
    push string_heap, "$!regexsub"
    push string_heap, "$!restart"
    push string_heap, "target"
    push string_heap, "from"
    push string_heap, "pos"
    push string_heap, "CAPHASH"
    push string_heap, "!cursor_init"
    push string_heap, "!cursor_start"
    push string_heap, "!cursor_start_subcapture"
    push string_heap, "!cursor_capture"
    push string_heap, "!cursor_push_cstack"
    push string_heap, "!cursor_pass"
    push string_heap, "!cursor_fail"
    push string_heap, "!cursor_next"
    push string_heap, "!reduce"
    push string_heap, "!reduce_with_match"
    push string_heap, "!protoregex"
    push string_heap, "!protoregex_nfa"
    push string_heap, "!protoregex_table"
    push string_heap, "!BACKREF"
    push string_heap, "!LITERAL"
    push string_heap, "at"
    push string_heap, "before"
    push string_heap, "after"
    push string_heap, "ws"
    push string_heap, "ww"
    push string_heap, "wb"
    push string_heap, "ident"
    push string_heap, "alpha"
    push string_heap, "alnum"
    push string_heap, "upper"
    push string_heap, "lower"
    push string_heap, "digit"
    push string_heap, "xdigit"
    push string_heap, "space"
    push string_heap, "blank"
    push string_heap, "cntrl"
    push string_heap, "punct"
    push string_heap, "FAILGOAL"
    push string_heap, "NQPMatch"
    push string_heap, "$!orig"
    push string_heap, "$!from"
    push string_heap, "$!to"
    push string_heap, "$!ast"
    push string_heap, "$!cursor"
    push string_heap, "from"
    push string_heap, "orig"
    push string_heap, "to"
    push string_heap, "CURSOR"
    push string_heap, "Str"
    push string_heap, "Bool"
    push string_heap, "chars"
    push string_heap, "!make"
    push string_heap, "ast"
    push string_heap, "!dump_str"
    push string_heap, "get_string"
    push string_heap, "get_integer"
    push string_heap, "get_number"
    push string_heap, "NQPCursor"
    push string_heap, "$!orig"
    push string_heap, "$!target"
    push string_heap, "$!from"
    push string_heap, "$!pos"
    push string_heap, "$!match"
    push string_heap, "$!name"
    push string_heap, "$!bstack"
    push string_heap, "$!cstack"
    push string_heap, "$!regexsub"
    push string_heap, "$!restart"
    push string_heap, "MATCH"
    push string_heap, "Bool"
    push string_heap, "parse"
    push string_heap, "!INTERPOLATE"
    push string_heap, "!INTERPOLATE_REGEX"
    push string_heap, "target"
    push string_heap, "from"
    push string_heap, "pos"
    push string_heap, "CAPHASH"
    push string_heap, "!cursor_init"
    push string_heap, "!cursor_start"
    push string_heap, "!cursor_start_subcapture"
    push string_heap, "!cursor_capture"
    push string_heap, "!cursor_push_cstack"
    push string_heap, "!cursor_pass"
    push string_heap, "!cursor_fail"
    push string_heap, "!cursor_next"
    push string_heap, "!reduce"
    push string_heap, "!reduce_with_match"
    push string_heap, "!protoregex"
    push string_heap, "!protoregex_nfa"
    push string_heap, "!protoregex_table"
    push string_heap, "!BACKREF"
    push string_heap, "!LITERAL"
    push string_heap, "at"
    push string_heap, "before"
    push string_heap, "after"
    push string_heap, "ws"
    push string_heap, "ww"
    push string_heap, "wb"
    push string_heap, "ident"
    push string_heap, "alpha"
    push string_heap, "alnum"
    push string_heap, "upper"
    push string_heap, "lower"
    push string_heap, "digit"
    push string_heap, "xdigit"
    push string_heap, "space"
    push string_heap, "blank"
    push string_heap, "cntrl"
    push string_heap, "punct"
    push string_heap, "FAILGOAL"
    push string_heap, "NQPRegexMethod"
    push string_heap, "$!code"
    push string_heap, "new"
    push string_heap, "ACCEPTS"
    push string_heap, "Str"
    push string_heap, "get_string"
    push string_heap, "invoke"
    push string_heap, "$!code"
    push string_heap, "NQPRegex"
    push string_heap, "ACCEPTS"
    push string_heap, "EXPORT"
    push string_heap, "DEFAULT"
    push string_heap, "P6opaque"
    push string_heap, "Cursor"
    push string_heap, "Match"
    push string_heap, "Method"
    push string_heap, "Regex"
    push string_heap, "P6opaque"
    push string_heap, "NFA"
    push string_heap, "Uninstantiable"
    push string_heap, "$!states"
    push string_heap, "$!edges"
    push string_heap, "$!orig"
    push string_heap, "$!target"
    push string_heap, "$!from"
    push string_heap, "$!pos"
    push string_heap, "$!match"
    push string_heap, "$!name"
    push string_heap, "$!bstack"
    push string_heap, "$!cstack"
    push string_heap, "$!regexsub"
    push string_heap, "$!restart"
    push string_heap, "$!orig"
    push string_heap, "$!from"
    push string_heap, "$!to"
    push string_heap, "$!ast"
    push string_heap, "$!cursor"
    push string_heap, "$!code"
    push string_heap, "$?CLASS"
    push string_heap, "$pass_mark"
    push string_heap, "Regex"
    push string_heap, "QRegex"
    push string_heap, "NQPCursorRole"
    push string_heap, "$!orig"
    push string_heap, "$!target"
    push string_heap, "$!from"
    push string_heap, "$!pos"
    push string_heap, "$!match"
    push string_heap, "$!name"
    push string_heap, "$!bstack"
    push string_heap, "$!cstack"
    push string_heap, "$!regexsub"
    push string_heap, "$!restart"
    push string_heap, "target"
    push string_heap, "from"
    push string_heap, "pos"
    push string_heap, "CAPHASH"
    push string_heap, "!cursor_init"
    push string_heap, "!cursor_start"
    push string_heap, "!cursor_start_subcapture"
    push string_heap, "!cursor_capture"
    push string_heap, "!cursor_push_cstack"
    push string_heap, "!cursor_pass"
    push string_heap, "!cursor_fail"
    push string_heap, "!cursor_next"
    push string_heap, "!reduce"
    push string_heap, "!reduce_with_match"
    push string_heap, "!protoregex"
    push string_heap, "!protoregex_nfa"
    push string_heap, "!protoregex_table"
    push string_heap, "!BACKREF"
    push string_heap, "!LITERAL"
    push string_heap, "at"
    push string_heap, "before"
    push string_heap, "after"
    push string_heap, "ws"
    push string_heap, "ww"
    push string_heap, "wb"
    push string_heap, "ident"
    push string_heap, "alpha"
    push string_heap, "alnum"
    push string_heap, "upper"
    push string_heap, "lower"
    push string_heap, "digit"
    push string_heap, "xdigit"
    push string_heap, "space"
    push string_heap, "blank"
    push string_heap, "cntrl"
    push string_heap, "punct"
    push string_heap, "FAILGOAL"
    .const 'Sub' $P2335 = "426_1337965216.259" 
    capture_lex $P2335
    $P113 = $P2335()
    nqp_deserialize_sc $S100, cur_sc, string_heap, $P113
    .const 'LexInfo' $P2416 = "391_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 0
    $P2416."set_static_lexpad_value"("GLOBALish", $P114)
    .const 'LexInfo' $P2417 = "391_1337965216.259" 
    $P2417."finish_static_lexpad"()
    .const 'LexInfo' $P2418 = "391_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 0
    $P2418."set_static_lexpad_value"("$?PACKAGE", $P114)
    .const 'LexInfo' $P2419 = "391_1337965216.259" 
    $P2419."finish_static_lexpad"()
    .const '' $P2420 = "10_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 2
    set_sub_code_object $P2420, $P114
    .const '' $P2421 = "11_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 3
    set_sub_code_object $P2421, $P114
    .const '' $P2422 = "12_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 4
    set_sub_code_object $P2422, $P114
    .const '' $P2423 = "13_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 5
    set_sub_code_object $P2423, $P114
    .const '' $P2424 = "14_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 6
    set_sub_code_object $P2424, $P114
    .const '' $P2425 = "15_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 7
    set_sub_code_object $P2425, $P114
    .const '' $P2426 = "16_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 8
    set_sub_code_object $P2426, $P114
    .const '' $P2427 = "17_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 9
    set_sub_code_object $P2427, $P114
    .const '' $P2428 = "18_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 10
    set_sub_code_object $P2428, $P114
    .const '' $P2429 = "19_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 11
    set_sub_code_object $P2429, $P114
    .const '' $P2430 = "20_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 12
    set_sub_code_object $P2430, $P114
    .const '' $P2431 = "21_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 13
    set_sub_code_object $P2431, $P114
    .const '' $P2432 = "22_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 14
    set_sub_code_object $P2432, $P114
    .const '' $P2433 = "23_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 15
    set_sub_code_object $P2433, $P114
    .const '' $P2434 = "24_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 16
    set_sub_code_object $P2434, $P114
    .const '' $P2435 = "25_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 17
    set_sub_code_object $P2435, $P114
    .const '' $P2436 = "26_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 18
    set_sub_code_object $P2436, $P114
    .const '' $P2437 = "27_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 19
    set_sub_code_object $P2437, $P114
    .const '' $P2438 = "28_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 20
    set_sub_code_object $P2438, $P114
    .const '' $P2439 = "29_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 21
    set_sub_code_object $P2439, $P114
    .const '' $P2440 = "30_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 22
    set_sub_code_object $P2440, $P114
    .const 'LexInfo' $P2441 = "392_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 1
    $P2441."set_static_lexpad_value"("$?PACKAGE", $P114)
    .const 'LexInfo' $P2442 = "392_1337965216.259" 
    $P2442."finish_static_lexpad"()
    .const 'LexInfo' $P2443 = "392_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 1
    $P2443."set_static_lexpad_value"("$?CLASS", $P114)
    .const 'LexInfo' $P2444 = "392_1337965216.259" 
    $P2444."finish_static_lexpad"()
    .const 'LexInfo' $P2445 = "391_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 23
    $P2445."set_static_lexpad_value"("NQPCursorRole", $P114)
    .const 'LexInfo' $P2446 = "391_1337965216.259" 
    $P2446."finish_static_lexpad"()
    .const '' $P2447 = "31_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 24
    set_sub_code_object $P2447, $P114
    .const '' $P2448 = "32_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 25
    set_sub_code_object $P2448, $P114
    .const '' $P2449 = "33_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 26
    set_sub_code_object $P2449, $P114
    .const '' $P2450 = "34_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 27
    set_sub_code_object $P2450, $P114
    .const '' $P2451 = "35_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 28
    set_sub_code_object $P2451, $P114
    .const '' $P2452 = "36_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 29
    set_sub_code_object $P2452, $P114
    .const '' $P2453 = "37_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 30
    set_sub_code_object $P2453, $P114
    .const '' $P2454 = "38_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 31
    set_sub_code_object $P2454, $P114
    .const '' $P2455 = "39_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 32
    set_sub_code_object $P2455, $P114
    .const '' $P2456 = "40_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 33
    set_sub_code_object $P2456, $P114
    .const '' $P2457 = "41_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 34
    set_sub_code_object $P2457, $P114
    .const '' $P2458 = "42_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 35
    set_sub_code_object $P2458, $P114
    .const '' $P2459 = "43_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 36
    set_sub_code_object $P2459, $P114
    .const '' $P2460 = "44_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 37
    set_sub_code_object $P2460, $P114
    .const '' $P2461 = "45_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 38
    set_sub_code_object $P2461, $P114
    .const '' $P2462 = "46_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 39
    set_sub_code_object $P2462, $P114
    .const '' $P2463 = "47_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 40
    set_sub_code_object $P2463, $P114
    .const '' $P2464 = "48_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 41
    set_sub_code_object $P2464, $P114
    .const '' $P2465 = "49_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 42
    set_sub_code_object $P2465, $P114
    .const '' $P2466 = "50_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 43
    set_sub_code_object $P2466, $P114
    .const '' $P2467 = "51_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 44
    set_sub_code_object $P2467, $P114
    .const '' $P2468 = "52_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 45
    set_sub_code_object $P2468, $P114
    .const '' $P2469 = "53_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 46
    set_sub_code_object $P2469, $P114
    .const '' $P2470 = "54_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 47
    set_sub_code_object $P2470, $P114
    .const '' $P2471 = "55_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 48
    set_sub_code_object $P2471, $P114
    .const '' $P2472 = "56_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 49
    set_sub_code_object $P2472, $P114
    .const '' $P2473 = "57_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 50
    set_sub_code_object $P2473, $P114
    .const '' $P2474 = "58_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 51
    set_sub_code_object $P2474, $P114
    .const '' $P2475 = "59_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 52
    set_sub_code_object $P2475, $P114
    .const '' $P2476 = "60_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 53
    set_sub_code_object $P2476, $P114
    .const '' $P2477 = "61_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 54
    set_sub_code_object $P2477, $P114
    .const '' $P2478 = "62_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 55
    set_sub_code_object $P2478, $P114
    .const '' $P2479 = "63_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 56
    set_sub_code_object $P2479, $P114
    .const '' $P2480 = "64_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 57
    set_sub_code_object $P2480, $P114
    .const '' $P2481 = "65_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 58
    set_sub_code_object $P2481, $P114
    .const '' $P2482 = "66_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 59
    set_sub_code_object $P2482, $P114
    .const '' $P2483 = "67_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 60
    set_sub_code_object $P2483, $P114
    .const '' $P2484 = "68_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 61
    set_sub_code_object $P2484, $P114
    .const 'LexInfo' $P2485 = "68_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 23
    $P2485."set_static_lexpad_value"("$?PACKAGE", $P114)
    .const 'LexInfo' $P2486 = "68_1337965216.259" 
    $P2486."finish_static_lexpad"()
    .const 'LexInfo' $P2487 = "68_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 23
    $P2487."set_static_lexpad_value"("$?ROLE", $P114)
    .const 'LexInfo' $P2488 = "68_1337965216.259" 
    $P2488."finish_static_lexpad"()
    .const 'LexInfo' $P2489 = "391_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 62
    $P2489."set_static_lexpad_value"("NQPMatch", $P114)
    .const 'LexInfo' $P2490 = "391_1337965216.259" 
    $P2490."finish_static_lexpad"()
    .const '' $P2491 = "69_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 63
    set_sub_code_object $P2491, $P114
    .const '' $P2492 = "70_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 64
    set_sub_code_object $P2492, $P114
    .const '' $P2493 = "71_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 65
    set_sub_code_object $P2493, $P114
    .const '' $P2494 = "72_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 66
    set_sub_code_object $P2494, $P114
    .const '' $P2495 = "73_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 67
    set_sub_code_object $P2495, $P114
    .const '' $P2496 = "73_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 68
    set_sub_code_object $P2496, $P114
    .const '' $P2497 = "74_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 69
    set_sub_code_object $P2497, $P114
    .const '' $P2498 = "75_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 70
    set_sub_code_object $P2498, $P114
    .const '' $P2499 = "76_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 71
    set_sub_code_object $P2499, $P114
    .const '' $P2500 = "77_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 72
    set_sub_code_object $P2500, $P114
    .const '' $P2501 = "78_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 73
    set_sub_code_object $P2501, $P114
    .const '' $P2502 = "79_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 74
    set_sub_code_object $P2502, $P114
    .const '' $P2503 = "80_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 75
    set_sub_code_object $P2503, $P114
    .const 'LexInfo' $P2504 = "404_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 62
    $P2504."set_static_lexpad_value"("$?PACKAGE", $P114)
    .const 'LexInfo' $P2505 = "404_1337965216.259" 
    $P2505."finish_static_lexpad"()
    .const 'LexInfo' $P2506 = "404_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 62
    $P2506."set_static_lexpad_value"("$?CLASS", $P114)
    .const 'LexInfo' $P2507 = "404_1337965216.259" 
    $P2507."finish_static_lexpad"()
    .const 'LexInfo' $P2508 = "391_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 76
    $P2508."set_static_lexpad_value"("NQPCursor", $P114)
    .const 'LexInfo' $P2509 = "391_1337965216.259" 
    $P2509."finish_static_lexpad"()
    .const '' $P2510 = "81_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 77
    set_sub_code_object $P2510, $P114
    .const '' $P2511 = "82_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 78
    set_sub_code_object $P2511, $P114
    .const '' $P2512 = "83_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 79
    set_sub_code_object $P2512, $P114
    .const '' $P2513 = "84_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 80
    set_sub_code_object $P2513, $P114
    .const '' $P2514 = "85_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 81
    set_sub_code_object $P2514, $P114
    .const 'LexInfo' $P2515 = "409_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 76
    $P2515."set_static_lexpad_value"("$?PACKAGE", $P114)
    .const 'LexInfo' $P2516 = "409_1337965216.259" 
    $P2516."finish_static_lexpad"()
    .const 'LexInfo' $P2517 = "409_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 76
    $P2517."set_static_lexpad_value"("$?CLASS", $P114)
    .const 'LexInfo' $P2518 = "409_1337965216.259" 
    $P2518."finish_static_lexpad"()
    .const 'LexInfo' $P2519 = "391_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 82
    $P2519."set_static_lexpad_value"("NQPRegexMethod", $P114)
    .const 'LexInfo' $P2520 = "391_1337965216.259" 
    $P2520."finish_static_lexpad"()
    .const '' $P2521 = "387_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 83
    set_sub_code_object $P2521, $P114
    .const '' $P2522 = "388_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 84
    set_sub_code_object $P2522, $P114
    .const '' $P2523 = "389_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 85
    set_sub_code_object $P2523, $P114
    .const '' $P2524 = "389_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 86
    set_sub_code_object $P2524, $P114
    .const 'LexInfo' $P2525 = "421_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 82
    $P2525."set_static_lexpad_value"("$?PACKAGE", $P114)
    .const 'LexInfo' $P2526 = "421_1337965216.259" 
    $P2526."finish_static_lexpad"()
    .const 'LexInfo' $P2527 = "421_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 82
    $P2527."set_static_lexpad_value"("$?CLASS", $P114)
    .const 'LexInfo' $P2528 = "421_1337965216.259" 
    $P2528."finish_static_lexpad"()
    .const 'LexInfo' $P2529 = "391_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 87
    $P2529."set_static_lexpad_value"("NQPRegex", $P114)
    .const 'LexInfo' $P2530 = "391_1337965216.259" 
    $P2530."finish_static_lexpad"()
    .const '' $P2531 = "390_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 88
    set_sub_code_object $P2531, $P114
    .const 'LexInfo' $P2532 = "422_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 87
    $P2532."set_static_lexpad_value"("$?PACKAGE", $P114)
    .const 'LexInfo' $P2533 = "422_1337965216.259" 
    $P2533."finish_static_lexpad"()
    .const 'LexInfo' $P2534 = "422_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 87
    $P2534."set_static_lexpad_value"("$?CLASS", $P114)
    .const 'LexInfo' $P2535 = "422_1337965216.259" 
    $P2535."finish_static_lexpad"()
    .const 'LexInfo' $P2536 = "391_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 89
    $P2536."set_static_lexpad_value"("EXPORT", $P114)
    .const 'LexInfo' $P2537 = "391_1337965216.259" 
    $P2537."finish_static_lexpad"()
    .const 'LexInfo' $P2538 = "423_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 90
    $P2538."set_static_lexpad_value"("DEFAULT", $P114)
    .const 'LexInfo' $P2539 = "423_1337965216.259" 
    $P2539."finish_static_lexpad"()
    .const 'LexInfo' $P2540 = "424_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 90
    $P2540."set_static_lexpad_value"("$?PACKAGE", $P114)
    .const 'LexInfo' $P2541 = "424_1337965216.259" 
    $P2541."finish_static_lexpad"()
    .const 'LexInfo' $P2542 = "424_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 90
    $P2542."set_static_lexpad_value"("$?CLASS", $P114)
    .const 'LexInfo' $P2543 = "424_1337965216.259" 
    $P2543."finish_static_lexpad"()
    .const 'LexInfo' $P2544 = "423_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 89
    $P2544."set_static_lexpad_value"("$?PACKAGE", $P114)
    .const 'LexInfo' $P2545 = "423_1337965216.259" 
    $P2545."finish_static_lexpad"()
    .const 'LexInfo' $P2546 = "423_1337965216.259" 
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 89
    $P2546."set_static_lexpad_value"("$?CLASS", $P114)
    .const 'LexInfo' $P2547 = "423_1337965216.259" 
    $P2547."finish_static_lexpad"()
    nqp_get_sc_object $P114, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 0
    set_hll_global "GLOBAL", $P114
.end


.HLL "nqp"

.namespace []
.sub "_block2334"  :anon :subid("426_1337965216.259") :outer("391_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 0
    .const 'Sub' $P2336 = "10_1337965216.259" 
    .const 'Sub' $P2337 = "11_1337965216.259" 
    .const 'Sub' $P2338 = "12_1337965216.259" 
    .const 'Sub' $P2339 = "13_1337965216.259" 
    .const 'Sub' $P2340 = "14_1337965216.259" 
    .const 'Sub' $P2341 = "15_1337965216.259" 
    .const 'Sub' $P2342 = "16_1337965216.259" 
    .const 'Sub' $P2343 = "17_1337965216.259" 
    .const 'Sub' $P2344 = "18_1337965216.259" 
    .const 'Sub' $P2345 = "19_1337965216.259" 
    .const 'Sub' $P2346 = "20_1337965216.259" 
    .const 'Sub' $P2347 = "21_1337965216.259" 
    .const 'Sub' $P2348 = "22_1337965216.259" 
    .const 'Sub' $P2349 = "23_1337965216.259" 
    .const 'Sub' $P2350 = "24_1337965216.259" 
    .const 'Sub' $P2351 = "25_1337965216.259" 
    .const 'Sub' $P2352 = "26_1337965216.259" 
    .const 'Sub' $P2353 = "27_1337965216.259" 
    .const 'Sub' $P2354 = "28_1337965216.259" 
    .const 'Sub' $P2355 = "29_1337965216.259" 
    .const 'Sub' $P2356 = "30_1337965216.259" 
    .const 'Sub' $P2357 = "31_1337965216.259" 
    .const 'Sub' $P2358 = "32_1337965216.259" 
    .const 'Sub' $P2359 = "33_1337965216.259" 
    .const 'Sub' $P2360 = "34_1337965216.259" 
    .const 'Sub' $P2361 = "35_1337965216.259" 
    .const 'Sub' $P2362 = "36_1337965216.259" 
    .const 'Sub' $P2363 = "37_1337965216.259" 
    .const 'Sub' $P2364 = "38_1337965216.259" 
    .const 'Sub' $P2365 = "39_1337965216.259" 
    .const 'Sub' $P2366 = "40_1337965216.259" 
    .const 'Sub' $P2367 = "41_1337965216.259" 
    .const 'Sub' $P2368 = "42_1337965216.259" 
    .const 'Sub' $P2369 = "43_1337965216.259" 
    .const 'Sub' $P2370 = "44_1337965216.259" 
    .const 'Sub' $P2371 = "45_1337965216.259" 
    .const 'Sub' $P2372 = "46_1337965216.259" 
    .const 'Sub' $P2373 = "47_1337965216.259" 
    .const 'Sub' $P2374 = "48_1337965216.259" 
    .const 'Sub' $P2375 = "49_1337965216.259" 
    .const 'Sub' $P2376 = "50_1337965216.259" 
    .const 'Sub' $P2377 = "51_1337965216.259" 
    .const 'Sub' $P2378 = "52_1337965216.259" 
    .const 'Sub' $P2379 = "53_1337965216.259" 
    .const 'Sub' $P2380 = "54_1337965216.259" 
    .const 'Sub' $P2381 = "55_1337965216.259" 
    .const 'Sub' $P2382 = "56_1337965216.259" 
    .const 'Sub' $P2383 = "57_1337965216.259" 
    .const 'Sub' $P2384 = "58_1337965216.259" 
    .const 'Sub' $P2385 = "59_1337965216.259" 
    .const 'Sub' $P2386 = "60_1337965216.259" 
    .const 'Sub' $P2387 = "61_1337965216.259" 
    .const 'Sub' $P2388 = "62_1337965216.259" 
    .const 'Sub' $P2389 = "63_1337965216.259" 
    .const 'Sub' $P2390 = "64_1337965216.259" 
    .const 'Sub' $P2391 = "65_1337965216.259" 
    .const 'Sub' $P2392 = "66_1337965216.259" 
    .const 'Sub' $P2393 = "67_1337965216.259" 
    .const 'Sub' $P2394 = "68_1337965216.259" 
    .const 'Sub' $P2395 = "69_1337965216.259" 
    .const 'Sub' $P2396 = "70_1337965216.259" 
    .const 'Sub' $P2397 = "71_1337965216.259" 
    .const 'Sub' $P2398 = "72_1337965216.259" 
    .const 'Sub' $P2399 = "73_1337965216.259" 
    .const 'Sub' $P2400 = "74_1337965216.259" 
    .const 'Sub' $P2401 = "75_1337965216.259" 
    .const 'Sub' $P2402 = "76_1337965216.259" 
    .const 'Sub' $P2403 = "77_1337965216.259" 
    .const 'Sub' $P2404 = "78_1337965216.259" 
    .const 'Sub' $P2405 = "79_1337965216.259" 
    .const 'Sub' $P2406 = "80_1337965216.259" 
    .const 'Sub' $P2407 = "81_1337965216.259" 
    .const 'Sub' $P2408 = "82_1337965216.259" 
    .const 'Sub' $P2409 = "83_1337965216.259" 
    .const 'Sub' $P2410 = "84_1337965216.259" 
    .const 'Sub' $P2411 = "85_1337965216.259" 
    .const 'Sub' $P2412 = "387_1337965216.259" 
    .const 'Sub' $P2413 = "388_1337965216.259" 
    .const 'Sub' $P2414 = "389_1337965216.259" 
    .const 'Sub' $P2415 = "390_1337965216.259" 
    new $P112, "ResizablePMCArray"
    push $P112, $P2336
    push $P112, $P2337
    push $P112, $P2338
    push $P112, $P2339
    push $P112, $P2340
    push $P112, $P2341
    push $P112, $P2342
    push $P112, $P2343
    push $P112, $P2344
    push $P112, $P2345
    push $P112, $P2346
    push $P112, $P2347
    push $P112, $P2348
    push $P112, $P2349
    push $P112, $P2350
    push $P112, $P2351
    push $P112, $P2352
    push $P112, $P2353
    push $P112, $P2354
    push $P112, $P2355
    push $P112, $P2356
    push $P112, $P2357
    push $P112, $P2358
    push $P112, $P2359
    push $P112, $P2360
    push $P112, $P2361
    push $P112, $P2362
    push $P112, $P2363
    push $P112, $P2364
    push $P112, $P2365
    push $P112, $P2366
    push $P112, $P2367
    push $P112, $P2368
    push $P112, $P2369
    push $P112, $P2370
    push $P112, $P2371
    push $P112, $P2372
    push $P112, $P2373
    push $P112, $P2374
    push $P112, $P2375
    push $P112, $P2376
    push $P112, $P2377
    push $P112, $P2378
    push $P112, $P2379
    push $P112, $P2380
    push $P112, $P2381
    push $P112, $P2382
    push $P112, $P2383
    push $P112, $P2384
    push $P112, $P2385
    push $P112, $P2386
    push $P112, $P2387
    push $P112, $P2388
    push $P112, $P2389
    push $P112, $P2390
    push $P112, $P2391
    push $P112, $P2392
    push $P112, $P2393
    push $P112, $P2394
    push $P112, $P2395
    push $P112, $P2396
    push $P112, $P2397
    push $P112, $P2398
    push $P112, $P2399
    push $P112, $P2400
    push $P112, $P2401
    push $P112, $P2402
    push $P112, $P2403
    push $P112, $P2404
    push $P112, $P2405
    push $P112, $P2406
    push $P112, $P2407
    push $P112, $P2408
    push $P112, $P2409
    push $P112, $P2410
    push $P112, $P2411
    push $P112, $P2412
    push $P112, $P2413
    push $P112, $P2414
    push $P112, $P2415
    .return ($P112)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1437"  :subid("392_1337965216.259") :outer("391_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 5
    .const 'Sub' $P1698 = "30_1337965216.259" 
    capture_lex $P1698
    .const 'Sub' $P1694 = "29_1337965216.259" 
    capture_lex $P1694
    .const 'Sub' $P1621 = "28_1337965216.259" 
    capture_lex $P1621
    .const 'Sub' $P1611 = "27_1337965216.259" 
    capture_lex $P1611
    .const 'Sub' $P1605 = "26_1337965216.259" 
    capture_lex $P1605
    .const 'Sub' $P1598 = "25_1337965216.259" 
    capture_lex $P1598
    .const 'Sub' $P1555 = "24_1337965216.259" 
    capture_lex $P1555
    .const 'Sub' $P1541 = "23_1337965216.259" 
    capture_lex $P1541
    .const 'Sub' $P1530 = "22_1337965216.259" 
    capture_lex $P1530
    .const 'Sub' $P1522 = "21_1337965216.259" 
    capture_lex $P1522
    .const 'Sub' $P1509 = "20_1337965216.259" 
    capture_lex $P1509
    .const 'Sub' $P1503 = "19_1337965216.259" 
    capture_lex $P1503
    .const 'Sub' $P1497 = "18_1337965216.259" 
    capture_lex $P1497
    .const 'Sub' $P1485 = "17_1337965216.259" 
    capture_lex $P1485
    .const 'Sub' $P1480 = "16_1337965216.259" 
    capture_lex $P1480
    .const 'Sub' $P1470 = "15_1337965216.259" 
    capture_lex $P1470
    .const 'Sub' $P1467 = "14_1337965216.259" 
    capture_lex $P1467
    .const 'Sub' $P1465 = "13_1337965216.259" 
    capture_lex $P1465
    .const 'Sub' $P1454 = "12_1337965216.259" 
    capture_lex $P1454
    .const 'Sub' $P1450 = "11_1337965216.259" 
    capture_lex $P1450
    .const 'Sub' $P1447 = "10_1337965216.259" 
    capture_lex $P1447
    .lex "$?PACKAGE", $P1439
    .lex "$?CLASS", $P1440
.annotate 'line', 74
    box $P100, .CCLASS_ANY
    set $P101, $P1439
    get_who $P102, $P101
    set $P1441, $P102["%cclass_code"]
    unless_null $P1441, vivify_428
    $P1441 = root_new ['parrot';'Hash']
    set $P102["%cclass_code"], $P1441
  vivify_428:
    set $P1441["."], $P100
.annotate 'line', 75
    box $P100, .CCLASS_NUMERIC
    set $P101, $P1439
    get_who $P102, $P101
    set $P1442, $P102["%cclass_code"]
    unless_null $P1442, vivify_429
    $P1442 = root_new ['parrot';'Hash']
    set $P102["%cclass_code"], $P1442
  vivify_429:
    set $P1442["d"], $P100
.annotate 'line', 76
    box $P100, .CCLASS_WHITESPACE
    set $P101, $P1439
    get_who $P102, $P101
    set $P1443, $P102["%cclass_code"]
    unless_null $P1443, vivify_430
    $P1443 = root_new ['parrot';'Hash']
    set $P102["%cclass_code"], $P1443
  vivify_430:
    set $P1443["s"], $P100
.annotate 'line', 77
    box $P100, .CCLASS_WORD
    set $P101, $P1439
    get_who $P102, $P101
    set $P1444, $P102["%cclass_code"]
    unless_null $P1444, vivify_431
    $P1444 = root_new ['parrot';'Hash']
    set $P102["%cclass_code"], $P1444
  vivify_431:
    set $P1444["w"], $P100
.annotate 'line', 78
    box $P100, .CCLASS_NEWLINE
    set $P101, $P1439
    get_who $P102, $P101
    set $P1445, $P102["%cclass_code"]
    unless_null $P1445, vivify_432
    $P1445 = root_new ['parrot';'Hash']
    set $P102["%cclass_code"], $P1445
  vivify_432:
    set $P1445["n"], $P100
.annotate 'line', 79
    box $P100, .CCLASS_NEWLINE
    set $P101, $P1439
    get_who $P102, $P101
    set $P1446, $P102["%cclass_code"]
    unless_null $P1446, vivify_433
    $P1446 = root_new ['parrot';'Hash']
    set $P102["%cclass_code"], $P1446
  vivify_433:
    set $P1446["nl"], $P100
.annotate 'line', 6
    new $P100, "Float"
    assign $P100, 0
    set $P101, $P1439
    get_who $P102, $P101
    set $P102["$EDGE_FATE"], $P100
.annotate 'line', 7
    new $P100, "Float"
    assign $P100, 1
    set $P101, $P1439
    get_who $P102, $P101
    set $P102["$EDGE_EPSILON"], $P100
.annotate 'line', 8
    new $P100, "Float"
    assign $P100, 2
    set $P101, $P1439
    get_who $P102, $P101
    set $P102["$EDGE_CODEPOINT"], $P100
.annotate 'line', 9
    new $P100, "Float"
    assign $P100, 3
    set $P101, $P1439
    get_who $P102, $P101
    set $P102["$EDGE_CODEPOINT_NEG"], $P100
.annotate 'line', 10
    new $P100, "Float"
    assign $P100, 4
    set $P101, $P1439
    get_who $P102, $P101
    set $P102["$EDGE_CHARCLASS"], $P100
.annotate 'line', 11
    new $P100, "Float"
    assign $P100, 5
    set $P101, $P1439
    get_who $P102, $P101
    set $P102["$EDGE_CHARCLASS_NEG"], $P100
.annotate 'line', 12
    new $P100, "Float"
    assign $P100, 6
    set $P101, $P1439
    get_who $P102, $P101
    set $P102["$EDGE_CHARLIST"], $P100
.annotate 'line', 13
    new $P100, "Float"
    assign $P100, 7
    set $P101, $P1439
    get_who $P102, $P101
    set $P102["$EDGE_CHARLIST_NEG"], $P100
.annotate 'line', 14
    new $P100, "Float"
    assign $P100, 8
    set $P101, $P1439
    get_who $P102, $P101
    set $P102["$EDGE_SUBRULE"], $P100
.annotate 'line', 5
    set $P100, $P1439
    get_who $P101, $P100
    set $P1502, $P101["%cclass_code"]
    unless_null $P1502, vivify_479
    $P1502 = root_new ['parrot';'Hash']
  vivify_479:
.annotate 'line', 303
    .const 'Sub' $P1698 = "30_1337965216.259" 
    newclosure $P1708, $P1698
.annotate 'line', 5
    .return ($P1708)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "new" :anon :subid("10_1337965216.259") :outer("392_1337965216.259")
    .param pmc param_1448
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 19
    .lex "self", param_1448
.annotate 'line', 20
    new $P100, "Undef"
    set $P1449, $P100
    .lex "$new", $P1449
    set $P101, param_1448
    nqp_decontainerize $P102, $P101
    new $P103, "ResizablePMCArray"
    $P104 = $P102."bless"($P103 :named("state"))
    set $P1449, $P104
.annotate 'line', 21
    set $P101, $P1449
    unless_null $P101, vivify_434
    new $P101, "Undef"
  vivify_434:
    $P101."addstate"()
.annotate 'line', 22
    set $P101, $P1449
    unless_null $P101, vivify_435
    new $P101, "Undef"
  vivify_435:
    $P101."addstate"()
.annotate 'line', 19
    set $P101, $P1449
    unless_null $P101, vivify_436
    new $P101, "Undef"
  vivify_436:
    .return ($P101)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "addstate" :anon :subid("11_1337965216.259") :outer("392_1337965216.259")
    .param pmc param_1451
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 26
    .lex "self", param_1451
.annotate 'line', 27
    new $P100, "Undef"
    set $P1452, $P100
    .lex "$id", $P1452
    set $P101, param_1451
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 1
    repr_get_attr_obj $P104, $P102, $P103, "$!states", 0
    unless_null $P104, vivify_437
    new $P104, "Undef"
  vivify_437:
    set $N100, $P104
    new $P105, 'Float'
    set $P105, $N100
    set $P1452, $P105
.annotate 'line', 28
    new $P101, "ResizablePMCArray"
    set $P102, $P1452
    unless_null $P102, vivify_438
    new $P102, "Undef"
  vivify_438:
    set $I100, $P102
    set $P103, param_1451
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 1
    repr_get_attr_obj $P1453, $P104, $P105, "$!states", 0
    unless_null $P1453, vivify_439
    $P1453 = root_new ['parrot';'ResizablePMCArray']
    repr_bind_attr_obj $P104, $P105, "$!states", 0, $P1453
  vivify_439:
    set $P1453[$I100], $P101
.annotate 'line', 26
    set $P101, $P1452
    unless_null $P101, vivify_440
    new $P101, "Undef"
  vivify_440:
    .return ($P101)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "addedge" :anon :subid("12_1337965216.259") :outer("392_1337965216.259")
    .param pmc param_1455
    .param pmc param_1456
    .param pmc param_1457
    .param pmc param_1458
    .param pmc param_1459
    .param pmc param_1460 :optional :named("newedge")
    .param int has_param_1460 :opt_flag
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 32
    .lex "self", param_1455
    .lex "$from", param_1456
    .lex "$to", param_1457
    .lex "$action", param_1458
    .lex "$value", param_1459
    if has_param_1460, optparam_441
    new $P100, "Float"
    assign $P100, 1
    set param_1460, $P100
  optparam_441:
    .lex "$newedge", param_1460
.annotate 'line', 35
    new $P101, "Undef"
    set $P1461, $P101
    .lex "$st", $P1461
.annotate 'line', 33
    set $P102, param_1460
    unless_null $P102, vivify_442
    new $P102, "Undef"
  vivify_442:
    unless $P102, if_1462_end
    new $P103, "Float"
    assign $P103, 1
    set $P104, param_1455
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 1
    repr_bind_attr_obj $P105, $P106, "$!edges", 1, $P103
  if_1462_end:
.annotate 'line', 34
    set $P102, param_1457
    unless_null $P102, vivify_443
    new $P102, "Undef"
  vivify_443:
    set $N100, $P102
    set $N101, 0
    islt $I100, $N100, $N101
    unless $I100, if_1463_end
    set $P103, param_1455
    nqp_decontainerize $P104, $P103
    $P105 = $P104."addstate"()
    set param_1457, $P105
  if_1463_end:
.annotate 'line', 35
    set $P102, param_1456
    unless_null $P102, vivify_444
    new $P102, "Undef"
  vivify_444:
    set $I100, $P102
    set $P103, param_1455
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 1
    repr_get_attr_obj $P1464, $P104, $P105, "$!states", 0
    unless_null $P1464, vivify_445
    $P1464 = root_new ['parrot';'ResizablePMCArray']
  vivify_445:
    set $P106, $P1464[$I100]
    unless_null $P106, vivify_446
    new $P106, "Undef"
  vivify_446:
    set $P1461, $P106
.annotate 'line', 36
    set $P102, $P1461
    unless_null $P102, vivify_447
    new $P102, "Undef"
  vivify_447:
    set $P103, param_1458
    unless_null $P103, vivify_448
    new $P103, "Undef"
  vivify_448:
    push $P102, $P103
.annotate 'line', 37
    set $P102, $P1461
    unless_null $P102, vivify_449
    new $P102, "Undef"
  vivify_449:
    set $P103, param_1459
    unless_null $P103, vivify_450
    new $P103, "Undef"
  vivify_450:
    push $P102, $P103
.annotate 'line', 38
    set $P102, $P1461
    unless_null $P102, vivify_451
    new $P102, "Undef"
  vivify_451:
    set $P103, param_1457
    unless_null $P103, vivify_452
    new $P103, "Undef"
  vivify_452:
    add $P104, $P103, 0
    push $P102, $P104
.annotate 'line', 32
    set $P102, param_1457
    unless_null $P102, vivify_453
    new $P102, "Undef"
  vivify_453:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "states" :anon :subid("13_1337965216.259") :outer("392_1337965216.259")
    .param pmc param_1466
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 42
    .lex "self", param_1466
    set $P100, param_1466
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 1
    repr_get_attr_obj $P103, $P101, $P102, "$!states", 0
    unless_null $P103, vivify_454
    new $P103, "Undef"
  vivify_454:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "addnode" :anon :subid("14_1337965216.259") :outer("392_1337965216.259")
    .param pmc param_1468
    .param pmc param_1469
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 44
    .lex "self", param_1468
    .lex "$node", param_1469
.annotate 'line', 45
    set $P100, param_1468
    nqp_decontainerize $P101, $P100
    set $P102, param_1469
    unless_null $P102, vivify_455
    new $P102, "Undef"
  vivify_455:
    $P101."regex_nfa"($P102, 1, 0)
.annotate 'line', 44
    set $P100, param_1468
    nqp_decontainerize $P101, $P100
    .return ($P101)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "regex_nfa" :anon :subid("15_1337965216.259") :outer("392_1337965216.259")
    .param pmc param_1471
    .param pmc param_1472
    .param pmc param_1473
    .param pmc param_1474
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 49
    .lex "self", param_1471
    .lex "$node", param_1472
    .lex "$from", param_1473
    .lex "$to", param_1474
.annotate 'line', 50
    new $P100, "Undef"
    set $P1475, $P100
    .lex "$method", $P1475
    set $P101, param_1472
    unless_null $P101, vivify_456
    new $P101, "Undef"
  vivify_456:
    $P102 = $P101."rxtype"()
    set $P1476, $P102
    defined $I1478, $P1476
    if $I1478, default_1477
    new $P103, "String"
    assign $P103, "concat"
    set $P1476, $P103
  default_1477:
    set $P1475, $P1476
.annotate 'line', 51
    set $P102, param_1471
    nqp_decontainerize $P103, $P102
    get_how $P104, $P103
    set $P105, param_1471
    nqp_decontainerize $P106, $P105
    set $P107, $P1475
    unless_null $P107, vivify_457
    new $P107, "Undef"
  vivify_457:
    $P108 = $P104."can"($P106, $P107)
    if $P108, if_1479
.annotate 'line', 53
    set $P116, param_1471
    nqp_decontainerize $P117, $P116
    set $P118, param_1472
    unless_null $P118, vivify_458
    new $P118, "Undef"
  vivify_458:
    set $P119, param_1473
    unless_null $P119, vivify_459
    new $P119, "Undef"
  vivify_459:
    set $P120, param_1474
    unless_null $P120, vivify_460
    new $P120, "Undef"
  vivify_460:
    $P121 = $P117."fate"($P118, $P119, $P120)
    set $P101, $P121
.annotate 'line', 51
    goto if_1479_end
  if_1479:
.annotate 'line', 52
    set $P109, param_1471
    nqp_decontainerize $P110, $P109
    set $P111, param_1472
    unless_null $P111, vivify_461
    new $P111, "Undef"
  vivify_461:
    set $P112, param_1473
    unless_null $P112, vivify_462
    new $P112, "Undef"
  vivify_462:
    set $P113, param_1474
    unless_null $P113, vivify_463
    new $P113, "Undef"
  vivify_463:
    set $P114, $P1475
    unless_null $P114, vivify_464
    new $P114, "Undef"
  vivify_464:
    set $S100, $P114
    $P115 = $P110.$S100($P111, $P112, $P113)
    set $P101, $P115
  if_1479_end:
.annotate 'line', 49
    .return ($P101)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "fate" :anon :subid("16_1337965216.259") :outer("392_1337965216.259")
    .param pmc param_1481
    .param pmc param_1482
    .param pmc param_1483
    .param pmc param_1484
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 56
    .lex "self", param_1481
    .lex "$node", param_1482
    .lex "$from", param_1483
    .lex "$to", param_1484
.annotate 'line', 57
    set $P100, param_1481
    nqp_decontainerize $P101, $P100
    set $P102, param_1483
    unless_null $P102, vivify_465
    new $P102, "Undef"
  vivify_465:
    find_lex $P103, "$?PACKAGE"
    get_who $P104, $P103
    set $P105, $P104["$EDGE_FATE"]
    unless_null $P105, vivify_466
    new $P105, "Undef"
  vivify_466:
    $P106 = $P101."addedge"($P102, 0, $P105, 0, 0 :named("newedge"))
.annotate 'line', 56
    .return ($P106)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.include "except_types.pasm"
.sub "alt" :anon :subid("17_1337965216.259") :outer("392_1337965216.259")
    .param pmc param_1486
    .param pmc param_1487
    .param pmc param_1488
    .param pmc param_1489
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 60
    .const 'Sub' $P1491 = "393_1337965216.259" 
    capture_lex $P1491
    .lex "self", param_1486
    .lex "$node", param_1487
    .lex "$from", param_1488
    .lex "$to", param_1489
.annotate 'line', 61
    set $P101, param_1487
    unless_null $P101, vivify_467
    new $P101, "Undef"
  vivify_467:
    $P102 = $P101."list"()
    defined $I100, $P102
    unless $I100, for_undef_468
    iter $P100, $P102
    new $P106, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P106, loop1496_handler
    push_eh $P106
  loop1496_test:
    unless $P100, loop1496_done
    shift $P103, $P100
  loop1496_redo:
    .const 'Sub' $P1491 = "393_1337965216.259" 
    capture_lex $P1491
    $P1491($P103)
  loop1496_next:
    goto loop1496_test
  loop1496_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P107, exception, 'type'
    eq $P107, .CONTROL_LOOP_NEXT, loop1496_next
    eq $P107, .CONTROL_LOOP_REDO, loop1496_redo
  loop1496_done:
    pop_eh 
  for_undef_468:
.annotate 'line', 60
    set $P100, param_1489
    unless_null $P100, vivify_475
    new $P100, "Undef"
  vivify_475:
    .return ($P100)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1490"  :anon :subid("393_1337965216.259") :outer("17_1337965216.259")
    .param pmc param_1493
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 62
    new $P104, "Undef"
    set $P1492, $P104
    .lex "$st", $P1492
    .lex "$_", param_1493
    find_lex $P105, "self"
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$_"
    unless_null $P107, vivify_469
    new $P107, "Undef"
  vivify_469:
    find_lex $P108, "$from"
    unless_null $P108, vivify_470
    new $P108, "Undef"
  vivify_470:
    find_lex $P109, "$to"
    unless_null $P109, vivify_471
    new $P109, "Undef"
  vivify_471:
    $P110 = $P106."regex_nfa"($P107, $P108, $P109)
    set $P1492, $P110
.annotate 'line', 63
    find_lex $P107, "$to"
    unless_null $P107, vivify_472
    new $P107, "Undef"
  vivify_472:
    set $N100, $P107
    set $N101, 0
    islt $I101, $N100, $N101
    if $I101, if_1495
    new $P106, 'Integer'
    set $P106, $I101
    goto if_1495_end
  if_1495:
    set $P108, $P1492
    unless_null $P108, vivify_473
    new $P108, "Undef"
  vivify_473:
    set $N102, $P108
    set $N103, 0
    isgt $I102, $N102, $N103
    new $P106, 'Integer'
    set $P106, $I102
  if_1495_end:
    if $P106, if_1494
    set $P105, $P106
    goto if_1494_end
  if_1494:
    set $P109, $P1492
    unless_null $P109, vivify_474
    new $P109, "Undef"
  vivify_474:
    store_lex "$to", $P109
    set $P105, $P109
  if_1494_end:
.annotate 'line', 61
    .return ($P105)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "anchor" :anon :subid("18_1337965216.259") :outer("392_1337965216.259")
    .param pmc param_1498
    .param pmc param_1499
    .param pmc param_1500
    .param pmc param_1501
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 68
    .lex "self", param_1498
    .lex "$node", param_1499
    .lex "$from", param_1500
    .lex "$to", param_1501
.annotate 'line', 69
    set $P100, param_1498
    nqp_decontainerize $P101, $P100
    set $P102, param_1500
    unless_null $P102, vivify_476
    new $P102, "Undef"
  vivify_476:
    set $P103, param_1501
    unless_null $P103, vivify_477
    new $P103, "Undef"
  vivify_477:
    find_lex $P104, "$?PACKAGE"
    get_who $P105, $P104
    set $P106, $P105["$EDGE_EPSILON"]
    unless_null $P106, vivify_478
    new $P106, "Undef"
  vivify_478:
    $P107 = $P101."addedge"($P102, $P103, $P106, 0)
.annotate 'line', 68
    .return ($P107)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "cclass" :anon :subid("19_1337965216.259") :outer("392_1337965216.259")
    .param pmc param_1504
    .param pmc param_1505
    .param pmc param_1506
    .param pmc param_1507
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 82
    .lex "self", param_1504
    .lex "$node", param_1505
    .lex "$from", param_1506
    .lex "$to", param_1507
.annotate 'line', 83
    set $P100, param_1504
    nqp_decontainerize $P101, $P100
    set $P102, param_1506
    unless_null $P102, vivify_480
    new $P102, "Undef"
  vivify_480:
    set $P103, param_1507
    unless_null $P103, vivify_481
    new $P103, "Undef"
  vivify_481:
    find_lex $P104, "$?PACKAGE"
    get_who $P105, $P104
    set $P106, $P105["$EDGE_CHARCLASS"]
    unless_null $P106, vivify_482
    new $P106, "Undef"
  vivify_482:
    set $P107, param_1505
    unless_null $P107, vivify_483
    new $P107, "Undef"
  vivify_483:
    $P108 = $P107."negate"()
    istrue $I100, $P108
    add $P109, $P106, $I100
.annotate 'line', 84
    set $P110, param_1505
    unless_null $P110, vivify_484
    new $P110, "Undef"
  vivify_484:
    $S100 = $P110."subtype"()
    downcase $S101, $S100
    find_lex $P111, "$?PACKAGE"
    get_who $P112, $P111
    set $P1508, $P112["%cclass_code"]
    unless_null $P1508, vivify_485
    $P1508 = root_new ['parrot';'Hash']
  vivify_485:
    set $P113, $P1508[$S101]
    unless_null $P113, vivify_486
    new $P113, "Undef"
  vivify_486:
.annotate 'line', 83
    $P114 = $P101."addedge"($P102, $P103, $P109, $P113)
.annotate 'line', 82
    .return ($P114)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.include "except_types.pasm"
.sub "concat" :anon :subid("20_1337965216.259") :outer("392_1337965216.259")
    .param pmc param_1510
    .param pmc param_1511
    .param pmc param_1512
    .param pmc param_1513
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 87
    .lex "self", param_1510
    .lex "$node", param_1511
    .lex "$from", param_1512
    .lex "$to", param_1513
.annotate 'line', 88
    new $P100, "Undef"
    set $P1514, $P100
    .lex "$i", $P1514
.annotate 'line', 89
    new $P101, "Undef"
    set $P1515, $P101
    .lex "$n", $P1515
.annotate 'line', 88
    new $P102, "Float"
    assign $P102, 0
    set $P1514, $P102
.annotate 'line', 89
    set $P102, param_1511
    unless_null $P102, vivify_487
    new $P102, "Undef"
  vivify_487:
    $P103 = $P102."list"()
    set $N100, $P103
    new $P104, 'Float'
    set $P104, $N100
    sub $P105, $P104, 1
    set $P1515, $P105
.annotate 'line', 90
    new $P106, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P106, loop1518_handler
    push_eh $P106
  loop1518_test:
    set $P103, param_1512
    unless_null $P103, vivify_488
    new $P103, "Undef"
  vivify_488:
    set $N100, $P103
    set $N101, 0
    isgt $I100, $N100, $N101
    if $I100, if_1516
    new $P102, 'Integer'
    set $P102, $I100
    goto if_1516_end
  if_1516:
    set $P104, $P1514
    unless_null $P104, vivify_489
    new $P104, "Undef"
  vivify_489:
    set $N102, $P104
    set $P105, $P1515
    unless_null $P105, vivify_490
    new $P105, "Undef"
  vivify_490:
    set $N103, $P105
    islt $I101, $N102, $N103
    new $P102, 'Integer'
    set $P102, $I101
  if_1516_end:
    unless $P102, loop1518_done
  loop1518_redo:
.annotate 'line', 91
    set $P106, param_1510
    nqp_decontainerize $P107, $P106
    set $P108, $P1514
    unless_null $P108, vivify_491
    new $P108, "Undef"
  vivify_491:
    set $I102, $P108
    set $P1517, param_1511
    unless_null $P1517, vivify_492
    $P1517 = root_new ['parrot';'ResizablePMCArray']
  vivify_492:
    set $P109, $P1517[$I102]
    unless_null $P109, vivify_493
    new $P109, "Undef"
  vivify_493:
    set $P110, param_1512
    unless_null $P110, vivify_494
    new $P110, "Undef"
  vivify_494:
    $P111 = $P107."regex_nfa"($P109, $P110, -1)
    set param_1512, $P111
.annotate 'line', 92
    set $P106, $P1514
    unless_null $P106, vivify_495
    new $P106, "Undef"
  vivify_495:
    add $P107, $P106, 1
    set $P1514, $P107
  loop1518_next:
.annotate 'line', 90
    goto loop1518_test
  loop1518_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P107, exception, 'type'
    eq $P107, .CONTROL_LOOP_NEXT, loop1518_next
    eq $P107, .CONTROL_LOOP_REDO, loop1518_redo
  loop1518_done:
    pop_eh 
.annotate 'line', 94
    set $P104, param_1512
    unless_null $P104, vivify_496
    new $P104, "Undef"
  vivify_496:
    set $N100, $P104
    set $N101, 0
    isgt $I100, $N100, $N101
    if $I100, if_1520
    new $P103, 'Integer'
    set $P103, $I100
    goto if_1520_end
  if_1520:
    set $P105, $P1515
    unless_null $P105, vivify_497
    new $P105, "Undef"
  vivify_497:
    set $N102, $P105
    set $N103, 0
    isge $I101, $N102, $N103
    new $P103, 'Integer'
    set $P103, $I101
  if_1520_end:
    if $P103, if_1519
    set $P113, param_1513
    unless_null $P113, vivify_498
    new $P113, "Undef"
  vivify_498:
    set $P102, $P113
    goto if_1519_end
  if_1519:
    set $P106, param_1510
    nqp_decontainerize $P107, $P106
    set $P108, $P1514
    unless_null $P108, vivify_499
    new $P108, "Undef"
  vivify_499:
    set $I102, $P108
    set $P1521, param_1511
    unless_null $P1521, vivify_500
    $P1521 = root_new ['parrot';'ResizablePMCArray']
  vivify_500:
    set $P109, $P1521[$I102]
    unless_null $P109, vivify_501
    new $P109, "Undef"
  vivify_501:
    set $P110, param_1512
    unless_null $P110, vivify_502
    new $P110, "Undef"
  vivify_502:
    set $P111, param_1513
    unless_null $P111, vivify_503
    new $P111, "Undef"
  vivify_503:
    $P112 = $P107."regex_nfa"($P109, $P110, $P111)
    set $P102, $P112
  if_1519_end:
.annotate 'line', 87
    .return ($P102)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "enumcharlist" :anon :subid("21_1337965216.259") :outer("392_1337965216.259")
    .param pmc param_1523
    .param pmc param_1524
    .param pmc param_1525
    .param pmc param_1526
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 97
    .lex "self", param_1523
    .lex "$node", param_1524
    .lex "$from", param_1525
    .lex "$to", param_1526
.annotate 'line', 98
    new $P100, "Undef"
    set $P1527, $P100
    .lex "$charlist", $P1527
    set $P1528, param_1524
    unless_null $P1528, vivify_504
    $P1528 = root_new ['parrot';'ResizablePMCArray']
  vivify_504:
    set $P101, $P1528[0]
    unless_null $P101, vivify_505
    new $P101, "Undef"
  vivify_505:
    set $P1527, $P101
.annotate 'line', 99
    set $P102, param_1524
    unless_null $P102, vivify_506
    new $P102, "Undef"
  vivify_506:
    $S100 = $P102."subtype"()
    iseq $I100, $S100, "zerowidth"
    if $I100, if_1529
.annotate 'line', 104
    set $P103, param_1523
    nqp_decontainerize $P104, $P103
    set $P105, param_1525
    unless_null $P105, vivify_507
    new $P105, "Undef"
  vivify_507:
    set $P106, param_1526
    unless_null $P106, vivify_508
    new $P106, "Undef"
  vivify_508:
    find_lex $P107, "$?PACKAGE"
    get_who $P108, $P107
    set $P110, $P108["$EDGE_CHARLIST"]
    unless_null $P110, vivify_509
    new $P110, "Undef"
  vivify_509:
    set $P111, param_1524
    unless_null $P111, vivify_510
    new $P111, "Undef"
  vivify_510:
    $P112 = $P111."negate"()
    istrue $I101, $P112
    add $P113, $P110, $I101
    set $P114, $P1527
    unless_null $P114, vivify_511
    new $P114, "Undef"
  vivify_511:
    $P115 = $P104."addedge"($P105, $P106, $P113, $P114)
.annotate 'line', 103
    set $P101, $P115
.annotate 'line', 99
    goto if_1529_end
  if_1529:
.annotate 'line', 100
    set $P103, param_1523
    nqp_decontainerize $P104, $P103
    set $P105, param_1525
    unless_null $P105, vivify_512
    new $P105, "Undef"
  vivify_512:
    find_lex $P106, "$?PACKAGE"
    get_who $P107, $P106
    set $P108, $P107["$EDGE_CHARLIST"]
    unless_null $P108, vivify_513
    new $P108, "Undef"
  vivify_513:
    set $P109, param_1524
    unless_null $P109, vivify_514
    new $P109, "Undef"
  vivify_514:
    $P110 = $P109."negate"()
    istrue $I101, $P110
    add $P111, $P108, $I101
    set $P112, $P1527
    unless_null $P112, vivify_515
    new $P112, "Undef"
  vivify_515:
    $P113 = $P104."addedge"($P105, -1, $P111, $P112)
    set param_1525, $P113
.annotate 'line', 101
    set $P103, param_1523
    nqp_decontainerize $P104, $P103
    set $P105, param_1525
    unless_null $P105, vivify_516
    new $P105, "Undef"
  vivify_516:
    find_lex $P106, "$?PACKAGE"
    get_who $P107, $P106
    set $P108, $P107["$EDGE_FATE"]
    unless_null $P108, vivify_517
    new $P108, "Undef"
  vivify_517:
    $P109 = $P104."addedge"($P105, 0, $P108, 0)
.annotate 'line', 99
    set $P101, $P109
  if_1529_end:
.annotate 'line', 97
    .return ($P101)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.include "except_types.pasm"
.sub "literal" :anon :subid("22_1337965216.259") :outer("392_1337965216.259")
    .param pmc param_1531
    .param pmc param_1532
    .param pmc param_1533
    .param pmc param_1534
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 108
    .lex "self", param_1531
    .lex "$node", param_1532
    .lex "$from", param_1533
    .lex "$to", param_1534
.annotate 'line', 109
    new $P100, "Undef"
    set $P1535, $P100
    .lex "$litconst", $P1535
.annotate 'line', 110
    new $P101, "Undef"
    set $P1536, $P101
    .lex "$litlen", $P1536
.annotate 'line', 111
    new $P102, "Undef"
    set $P1537, $P102
    .lex "$i", $P1537
.annotate 'line', 109
    set $P1538, param_1532
    unless_null $P1538, vivify_518
    $P1538 = root_new ['parrot';'ResizablePMCArray']
  vivify_518:
    set $P103, $P1538[0]
    unless_null $P103, vivify_519
    new $P103, "Undef"
  vivify_519:
    set $P1535, $P103
.annotate 'line', 110
    set $P103, $P1535
    unless_null $P103, vivify_520
    new $P103, "Undef"
  vivify_520:
    set $S100, $P103
    length $I100, $S100
    new $P104, 'Integer'
    set $P104, $I100
    sub $P105, $P104, 1
    set $P1536, $P105
.annotate 'line', 111
    new $P103, "Float"
    assign $P103, 0
    set $P1537, $P103
.annotate 'line', 112
    set $P104, $P1536
    unless_null $P104, vivify_521
    new $P104, "Undef"
  vivify_521:
    set $N100, $P104
    set $N101, 0
    isge $I100, $N100, $N101
    if $I100, if_1539
.annotate 'line', 120
    set $P105, param_1531
    nqp_decontainerize $P106, $P105
    set $P107, param_1533
    unless_null $P107, vivify_522
    new $P107, "Undef"
  vivify_522:
    set $P108, param_1534
    unless_null $P108, vivify_523
    new $P108, "Undef"
  vivify_523:
    find_lex $P109, "$?PACKAGE"
    get_who $P110, $P109
    set $P111, $P110["$EDGE_EPSILON"]
    unless_null $P111, vivify_524
    new $P111, "Undef"
  vivify_524:
    $P112 = $P106."addedge"($P107, $P108, $P111, 0)
.annotate 'line', 119
    set $P103, $P112
.annotate 'line', 112
    goto if_1539_end
  if_1539:
.annotate 'line', 113
    new $P107, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P107, loop1540_handler
    push_eh $P107
  loop1540_test:
    set $P105, $P1537
    unless_null $P105, vivify_525
    new $P105, "Undef"
  vivify_525:
    set $N102, $P105
    set $P106, $P1536
    unless_null $P106, vivify_526
    new $P106, "Undef"
  vivify_526:
    set $N103, $P106
    islt $I101, $N102, $N103
    unless $I101, loop1540_done
  loop1540_redo:
.annotate 'line', 114
    set $P107, param_1531
    nqp_decontainerize $P108, $P107
    set $P109, param_1533
    unless_null $P109, vivify_527
    new $P109, "Undef"
  vivify_527:
    find_lex $P110, "$?PACKAGE"
    get_who $P111, $P110
    set $P112, $P111["$EDGE_CODEPOINT"]
    unless_null $P112, vivify_528
    new $P112, "Undef"
  vivify_528:
    set $P113, $P1535
    unless_null $P113, vivify_529
    new $P113, "Undef"
  vivify_529:
    set $S100, $P113
    set $P114, $P1537
    unless_null $P114, vivify_530
    new $P114, "Undef"
  vivify_530:
    set $I102, $P114
    ord $I103, $S100, $I102
    $P115 = $P108."addedge"($P109, -1, $P112, $I103)
    set param_1533, $P115
.annotate 'line', 115
    set $P107, $P1537
    unless_null $P107, vivify_531
    new $P107, "Undef"
  vivify_531:
    add $P108, $P107, 1
    set $P1537, $P108
  loop1540_next:
.annotate 'line', 113
    goto loop1540_test
  loop1540_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P108, exception, 'type'
    eq $P108, .CONTROL_LOOP_NEXT, loop1540_next
    eq $P108, .CONTROL_LOOP_REDO, loop1540_redo
  loop1540_done:
    pop_eh 
.annotate 'line', 117
    set $P105, param_1531
    nqp_decontainerize $P106, $P105
    set $P107, param_1533
    unless_null $P107, vivify_532
    new $P107, "Undef"
  vivify_532:
    set $P108, param_1534
    unless_null $P108, vivify_533
    new $P108, "Undef"
  vivify_533:
    find_lex $P109, "$?PACKAGE"
    get_who $P110, $P109
    set $P111, $P110["$EDGE_CODEPOINT"]
    unless_null $P111, vivify_534
    new $P111, "Undef"
  vivify_534:
    set $P112, $P1535
    unless_null $P112, vivify_535
    new $P112, "Undef"
  vivify_535:
    set $S100, $P112
    set $P113, $P1537
    unless_null $P113, vivify_536
    new $P113, "Undef"
  vivify_536:
    set $I101, $P113
    ord $I102, $S100, $I101
    $P114 = $P106."addedge"($P107, $P108, $P111, $I102)
.annotate 'line', 112
    set $P103, $P114
  if_1539_end:
.annotate 'line', 108
    .return ($P103)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "subrule" :anon :subid("23_1337965216.259") :outer("392_1337965216.259")
    .param pmc param_1542
    .param pmc param_1543
    .param pmc param_1544
    .param pmc param_1545
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 124
    .lex "self", param_1542
    .lex "$node", param_1543
    .lex "$from", param_1544
    .lex "$to", param_1545
.annotate 'line', 125
    new $P100, "Undef"
    set $P1546, $P100
    .lex "$subtype", $P1546
    set $P101, param_1543
    unless_null $P101, vivify_537
    new $P101, "Undef"
  vivify_537:
    $P102 = $P101."subtype"()
    set $P1546, $P102
.annotate 'line', 126
    set $P102, $P1546
    unless_null $P102, vivify_538
    new $P102, "Undef"
  vivify_538:
    set $S100, $P102
    iseq $I100, $S100, "zerowidth"
    if $I100, if_1547
.annotate 'line', 130
    set $P123, $P1546
    unless_null $P123, vivify_539
    new $P123, "Undef"
  vivify_539:
    set $S101, $P123
    iseq $I101, $S101, "capture"
    if $I101, if_1550
    new $P122, 'Integer'
    set $P122, $I101
    goto if_1550_end
  if_1550:
    set $P1551, param_1543
    unless_null $P1551, vivify_540
    $P1551 = root_new ['parrot';'ResizablePMCArray']
  vivify_540:
    set $P124, $P1551[1]
    unless_null $P124, vivify_541
    new $P124, "Undef"
  vivify_541:
    set $P122, $P124
  if_1550_end:
    if $P122, if_1549
.annotate 'line', 132
    set $P131, param_1542
    nqp_decontainerize $P132, $P131
    set $P133, param_1544
    unless_null $P133, vivify_542
    new $P133, "Undef"
  vivify_542:
    set $P134, param_1545
    unless_null $P134, vivify_543
    new $P134, "Undef"
  vivify_543:
    find_lex $P135, "$?PACKAGE"
    get_who $P136, $P135
    set $P137, $P136["$EDGE_SUBRULE"]
    unless_null $P137, vivify_544
    new $P137, "Undef"
  vivify_544:
    set $P1553, param_1543
    unless_null $P1553, vivify_545
    $P1553 = root_new ['parrot';'ResizablePMCArray']
  vivify_545:
    set $P1554, $P1553[0]
    unless_null $P1554, vivify_546
    $P1554 = root_new ['parrot';'ResizablePMCArray']
  vivify_546:
    set $P138, $P1554[0]
    unless_null $P138, vivify_547
    new $P138, "Undef"
  vivify_547:
    $P139 = $P132."addedge"($P133, $P134, $P137, $P138)
    set $P121, $P139
.annotate 'line', 130
    goto if_1549_end
  if_1549:
.annotate 'line', 131
    set $P125, param_1542
    nqp_decontainerize $P126, $P125
    set $P1552, param_1543
    unless_null $P1552, vivify_548
    $P1552 = root_new ['parrot';'ResizablePMCArray']
  vivify_548:
    set $P127, $P1552[1]
    unless_null $P127, vivify_549
    new $P127, "Undef"
  vivify_549:
    set $P128, param_1544
    unless_null $P128, vivify_550
    new $P128, "Undef"
  vivify_550:
    set $P129, param_1545
    unless_null $P129, vivify_551
    new $P129, "Undef"
  vivify_551:
    $P130 = $P126."regex_nfa"($P127, $P128, $P129)
    set $P121, $P130
  if_1549_end:
    set $P101, $P121
.annotate 'line', 126
    goto if_1547_end
  if_1547:
.annotate 'line', 127
    set $P104, param_1543
    unless_null $P104, vivify_552
    new $P104, "Undef"
  vivify_552:
    $P105 = $P104."negate"()
    if $P105, if_1548
.annotate 'line', 129
    set $P112, param_1542
    nqp_decontainerize $P113, $P112
    set $P114, param_1544
    unless_null $P114, vivify_553
    new $P114, "Undef"
  vivify_553:
    find_lex $P115, "$?PACKAGE"
    get_who $P116, $P115
    set $P117, $P116["$EDGE_SUBRULE"]
    unless_null $P117, vivify_554
    new $P117, "Undef"
  vivify_554:
    set $P118, param_1543
    unless_null $P118, vivify_555
    new $P118, "Undef"
  vivify_555:
    $P119 = $P118."name"()
    $P120 = $P113."addedge"($P114, 0, $P117, $P119)
    set $P103, $P120
.annotate 'line', 127
    goto if_1548_end
  if_1548:
.annotate 'line', 128
    set $P106, param_1542
    nqp_decontainerize $P107, $P106
    set $P108, param_1543
    unless_null $P108, vivify_556
    new $P108, "Undef"
  vivify_556:
    set $P109, param_1544
    unless_null $P109, vivify_557
    new $P109, "Undef"
  vivify_557:
    set $P110, param_1545
    unless_null $P110, vivify_558
    new $P110, "Undef"
  vivify_558:
    $P111 = $P107."fate"($P108, $P109, $P110)
    set $P103, $P111
  if_1548_end:
    set $P101, $P103
  if_1547_end:
.annotate 'line', 124
    .return ($P101)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.include "except_types.pasm"
.sub "quant" :anon :subid("24_1337965216.259") :outer("392_1337965216.259")
    .param pmc param_1558
    .param pmc param_1559
    .param pmc param_1560
    .param pmc param_1561
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 135
    .const 'Sub' $P1591 = "396_1337965216.259" 
    capture_lex $P1591
    .const 'Sub' $P1581 = "395_1337965216.259" 
    capture_lex $P1581
    .const 'Sub' $P1575 = "394_1337965216.259" 
    capture_lex $P1575
    new $P1557, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1557, control_1556
    push_eh $P1557
    .lex "self", param_1558
    .lex "$node", param_1559
    .lex "$from", param_1560
    .lex "$to", param_1561
.annotate 'line', 136
    new $P100, "Undef"
    set $P1562, $P100
    .lex "$min", $P1562
.annotate 'line', 137
    new $P101, "Undef"
    set $P1563, $P101
    .lex "$max", $P1563
.annotate 'line', 136
    new $P102, "Float"
    assign $P102, 0
    set $P103, param_1559
    unless_null $P103, vivify_559
    new $P103, "Undef"
  vivify_559:
    $P104 = $P103."min"()
    set $P1564, $P104
    defined $I1566, $P1564
    if $I1566, default_1565
    new $P105, "Float"
    assign $P105, 0
    set $P1564, $P105
  default_1565:
    add $P106, $P102, $P1564
    set $P1562, $P106
.annotate 'line', 137
    new $P102, "Float"
    assign $P102, 0
    set $P103, param_1559
    unless_null $P103, vivify_560
    new $P103, "Undef"
  vivify_560:
    $P104 = $P103."max"()
    set $P1567, $P104
    defined $I1569, $P1567
    if $I1569, default_1568
    new $P105, "Float"
    assign $P105, -1
    set $P1567, $P105
  default_1568:
    add $P106, $P102, $P1567
    set $P1563, $P106
.annotate 'line', 140
    set $P103, $P1563
    unless_null $P103, vivify_561
    new $P103, "Undef"
  vivify_561:
    set $N100, $P103
    set $N101, 1
    isgt $I100, $N100, $N101
    unless $I100, unless_1571
    new $P102, 'Integer'
    set $P102, $I100
    goto unless_1571_end
  unless_1571:
    set $P104, $P1562
    unless_null $P104, vivify_562
    new $P104, "Undef"
  vivify_562:
    set $N102, $P104
    set $N103, 1
    isgt $I101, $N102, $N103
    new $P102, 'Integer'
    set $P102, $I101
  unless_1571_end:
    unless $P102, if_1570_end
    new $P105, "Exception"
    set $P105['type'], .CONTROL_RETURN
    set $P106, param_1558
    nqp_decontainerize $P107, $P106
    set $P108, param_1559
    unless_null $P108, vivify_563
    new $P108, "Undef"
  vivify_563:
    set $P109, param_1560
    unless_null $P109, vivify_564
    new $P109, "Undef"
  vivify_564:
    set $P110, param_1561
    unless_null $P110, vivify_565
    new $P110, "Undef"
  vivify_565:
    $P111 = $P107."fate"($P108, $P109, $P110)
    setattribute $P105, 'payload', $P111
    throw $P105
  if_1570_end:
.annotate 'line', 141
    set $P103, $P1563
    unless_null $P103, vivify_566
    new $P103, "Undef"
  vivify_566:
    set $N100, $P103
    set $N101, -1
    iseq $I100, $N100, $N101
    if $I100, if_1572
.annotate 'line', 156
    set $P107, $P1562
    unless_null $P107, vivify_567
    new $P107, "Undef"
  vivify_567:
    set $N102, $P107
    set $N103, 0
    iseq $I101, $N102, $N103
    if $I101, if_1589
    new $P106, 'Integer'
    set $P106, $I101
    goto if_1589_end
  if_1589:
    set $P108, $P1563
    unless_null $P108, vivify_568
    new $P108, "Undef"
  vivify_568:
    set $N104, $P108
    set $N105, 1
    iseq $I102, $N104, $N105
    new $P106, 'Integer'
    set $P106, $I102
  if_1589_end:
    if $P106, if_1588
.annotate 'line', 163
    set $P112, param_1558
    nqp_decontainerize $P113, $P112
    set $P114, param_1559
    unless_null $P114, vivify_569
    new $P114, "Undef"
  vivify_569:
    set $P115, param_1560
    unless_null $P115, vivify_570
    new $P115, "Undef"
  vivify_570:
    set $P116, param_1561
    unless_null $P116, vivify_571
    new $P116, "Undef"
  vivify_571:
    $P117 = $P113."fate"($P114, $P115, $P116)
.annotate 'line', 162
    set $P105, $P117
.annotate 'line', 156
    goto if_1588_end
  if_1588:
    .const 'Sub' $P1591 = "396_1337965216.259" 
    capture_lex $P1591
    $P111 = $P1591()
    set $P105, $P111
  if_1588_end:
    set $P102, $P105
.annotate 'line', 141
    goto if_1572_end
  if_1572:
.annotate 'line', 142
    set $P104, $P1562
    unless_null $P104, vivify_586
    new $P104, "Undef"
  vivify_586:
    set $N102, $P104
    set $N103, 0
    iseq $I101, $N102, $N103
    if $I101, if_1573
.annotate 'line', 146
    .const 'Sub' $P1581 = "395_1337965216.259" 
    capture_lex $P1581
    $P1581()
    goto if_1573_end
  if_1573:
.annotate 'line', 142
    .const 'Sub' $P1575 = "394_1337965216.259" 
    capture_lex $P1575
    $P1575()
  if_1573_end:
.annotate 'line', 141
    set $P104, param_1561
    unless_null $P104, vivify_613
    new $P104, "Undef"
  vivify_613:
    set $P102, $P104
  if_1572_end:
.annotate 'line', 135
    .return ($P102)
  control_1556:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P103, exception, "payload"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1590"  :anon :subid("396_1337965216.259") :outer("24_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 157
    new $P109, "Undef"
    set $P1592, $P109
    .lex "$st", $P1592
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    find_lex $P1593, "$node"
    unless_null $P1593, vivify_572
    $P1593 = root_new ['parrot';'ResizablePMCArray']
  vivify_572:
    set $P112, $P1593[0]
    unless_null $P112, vivify_573
    new $P112, "Undef"
  vivify_573:
    find_lex $P113, "$from"
    unless_null $P113, vivify_574
    new $P113, "Undef"
  vivify_574:
    find_lex $P114, "$to"
    unless_null $P114, vivify_575
    new $P114, "Undef"
  vivify_575:
    $P115 = $P111."regex_nfa"($P112, $P113, $P114)
    set $P1592, $P115
.annotate 'line', 158
    find_lex $P111, "$to"
    unless_null $P111, vivify_576
    new $P111, "Undef"
  vivify_576:
    set $N106, $P111
    set $N107, 0
    islt $I103, $N106, $N107
    if $I103, if_1595
    new $P110, 'Integer'
    set $P110, $I103
    goto if_1595_end
  if_1595:
    set $P112, $P1592
    unless_null $P112, vivify_577
    new $P112, "Undef"
  vivify_577:
    set $N108, $P112
    set $N109, 0
    isgt $I104, $N108, $N109
    new $P110, 'Integer'
    set $P110, $I104
  if_1595_end:
    unless $P110, if_1594_end
    set $P113, $P1592
    unless_null $P113, vivify_578
    new $P113, "Undef"
  vivify_578:
    store_lex "$to", $P113
  if_1594_end:
.annotate 'line', 159
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$from"
    unless_null $P112, vivify_579
    new $P112, "Undef"
  vivify_579:
    find_lex $P113, "$to"
    unless_null $P113, vivify_580
    new $P113, "Undef"
  vivify_580:
    find_lex $P114, "$?PACKAGE"
    get_who $P115, $P114
    set $P116, $P115["$EDGE_EPSILON"]
    unless_null $P116, vivify_581
    new $P116, "Undef"
  vivify_581:
    $P117 = $P111."addedge"($P112, $P113, $P116, 0)
    set $P1592, $P117
.annotate 'line', 160
    find_lex $P111, "$to"
    unless_null $P111, vivify_582
    new $P111, "Undef"
  vivify_582:
    set $N106, $P111
    set $N107, 0
    islt $I103, $N106, $N107
    if $I103, if_1597
    new $P110, 'Integer'
    set $P110, $I103
    goto if_1597_end
  if_1597:
    set $P112, $P1592
    unless_null $P112, vivify_583
    new $P112, "Undef"
  vivify_583:
    set $N108, $P112
    set $N109, 0
    isgt $I104, $N108, $N109
    new $P110, 'Integer'
    set $P110, $I104
  if_1597_end:
    unless $P110, if_1596_end
    set $P113, $P1592
    unless_null $P113, vivify_584
    new $P113, "Undef"
  vivify_584:
    store_lex "$to", $P113
  if_1596_end:
.annotate 'line', 156
    find_lex $P110, "$to"
    unless_null $P110, vivify_585
    new $P110, "Undef"
  vivify_585:
    .return ($P110)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1580"  :anon :subid("395_1337965216.259") :outer("24_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 147
    new $P107, "Undef"
    set $P1582, $P107
    .lex "$start", $P1582
.annotate 'line', 149
    new $P108, "Undef"
    set $P1583, $P108
    .lex "$looper", $P1583
.annotate 'line', 150
    new $P109, "Undef"
    set $P1584, $P109
    .lex "$st", $P1584
.annotate 'line', 147
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    $P112 = $P111."addstate"()
    set $P1582, $P112
.annotate 'line', 148
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$from"
    unless_null $P112, vivify_587
    new $P112, "Undef"
  vivify_587:
    set $P113, $P1582
    unless_null $P113, vivify_588
    new $P113, "Undef"
  vivify_588:
    find_lex $P114, "$?PACKAGE"
    get_who $P115, $P114
    set $P116, $P115["$EDGE_EPSILON"]
    unless_null $P116, vivify_589
    new $P116, "Undef"
  vivify_589:
    $P111."addedge"($P112, $P113, $P116, 0)
.annotate 'line', 149
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    $P112 = $P111."addstate"()
    set $P1583, $P112
.annotate 'line', 150
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    find_lex $P1585, "$node"
    unless_null $P1585, vivify_590
    $P1585 = root_new ['parrot';'ResizablePMCArray']
  vivify_590:
    set $P112, $P1585[0]
    unless_null $P112, vivify_591
    new $P112, "Undef"
  vivify_591:
    set $P113, $P1582
    unless_null $P113, vivify_592
    new $P113, "Undef"
  vivify_592:
    set $P114, $P1583
    unless_null $P114, vivify_593
    new $P114, "Undef"
  vivify_593:
    $P115 = $P111."regex_nfa"($P112, $P113, $P114)
    set $P1584, $P115
.annotate 'line', 151
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    set $P112, $P1583
    unless_null $P112, vivify_594
    new $P112, "Undef"
  vivify_594:
    set $P113, $P1582
    unless_null $P113, vivify_595
    new $P113, "Undef"
  vivify_595:
    find_lex $P114, "$?PACKAGE"
    get_who $P115, $P114
    set $P116, $P115["$EDGE_EPSILON"]
    unless_null $P116, vivify_596
    new $P116, "Undef"
  vivify_596:
    $P111."addedge"($P112, $P113, $P116, 0)
.annotate 'line', 152
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    set $P112, $P1583
    unless_null $P112, vivify_597
    new $P112, "Undef"
  vivify_597:
    find_lex $P113, "$to"
    unless_null $P113, vivify_598
    new $P113, "Undef"
  vivify_598:
    find_lex $P114, "$?PACKAGE"
    get_who $P115, $P114
    set $P116, $P115["$EDGE_EPSILON"]
    unless_null $P116, vivify_599
    new $P116, "Undef"
  vivify_599:
    $P111."addedge"($P112, $P113, $P116, 0)
.annotate 'line', 153
    find_lex $P112, "$to"
    unless_null $P112, vivify_600
    new $P112, "Undef"
  vivify_600:
    set $N104, $P112
    set $N105, 0
    islt $I102, $N104, $N105
    if $I102, if_1587
    new $P111, 'Integer'
    set $P111, $I102
    goto if_1587_end
  if_1587:
    set $P113, $P1584
    unless_null $P113, vivify_601
    new $P113, "Undef"
  vivify_601:
    set $N106, $P113
    set $N107, 0
    isgt $I103, $N106, $N107
    new $P111, 'Integer'
    set $P111, $I103
  if_1587_end:
    if $P111, if_1586
    set $P110, $P111
    goto if_1586_end
  if_1586:
    set $P114, $P1584
    unless_null $P114, vivify_602
    new $P114, "Undef"
  vivify_602:
    store_lex "$to", $P114
    set $P110, $P114
  if_1586_end:
.annotate 'line', 146
    .return ($P110)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1574"  :anon :subid("394_1337965216.259") :outer("24_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 143
    new $P105, "Undef"
    set $P1576, $P105
    .lex "$st", $P1576
    find_lex $P106, "self"
    nqp_decontainerize $P107, $P106
    find_lex $P1577, "$node"
    unless_null $P1577, vivify_603
    $P1577 = root_new ['parrot';'ResizablePMCArray']
  vivify_603:
    set $P108, $P1577[0]
    unless_null $P108, vivify_604
    new $P108, "Undef"
  vivify_604:
    find_lex $P109, "$from"
    unless_null $P109, vivify_605
    new $P109, "Undef"
  vivify_605:
    find_lex $P110, "$from"
    unless_null $P110, vivify_606
    new $P110, "Undef"
  vivify_606:
    $P111 = $P107."regex_nfa"($P108, $P109, $P110)
    set $P1576, $P111
.annotate 'line', 144
    find_lex $P106, "self"
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$from"
    unless_null $P108, vivify_607
    new $P108, "Undef"
  vivify_607:
    find_lex $P109, "$to"
    unless_null $P109, vivify_608
    new $P109, "Undef"
  vivify_608:
    find_lex $P110, "$?PACKAGE"
    get_who $P111, $P110
    set $P112, $P111["$EDGE_EPSILON"]
    unless_null $P112, vivify_609
    new $P112, "Undef"
  vivify_609:
    $P113 = $P107."addedge"($P108, $P109, $P112, 0)
    set $P1576, $P113
.annotate 'line', 145
    find_lex $P108, "$to"
    unless_null $P108, vivify_610
    new $P108, "Undef"
  vivify_610:
    set $N104, $P108
    set $N105, 0
    islt $I102, $N104, $N105
    if $I102, if_1579
    new $P107, 'Integer'
    set $P107, $I102
    goto if_1579_end
  if_1579:
    set $P109, $P1576
    unless_null $P109, vivify_611
    new $P109, "Undef"
  vivify_611:
    set $N106, $P109
    set $N107, 0
    isgt $I103, $N106, $N107
    new $P107, 'Integer'
    set $P107, $I103
  if_1579_end:
    if $P107, if_1578
    set $P106, $P107
    goto if_1578_end
  if_1578:
    set $P110, $P1576
    unless_null $P110, vivify_612
    new $P110, "Undef"
  vivify_612:
    store_lex "$to", $P110
    set $P106, $P110
  if_1578_end:
.annotate 'line', 142
    .return ($P106)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "pastnode" :anon :subid("25_1337965216.259") :outer("392_1337965216.259")
    .param pmc param_1599
    .param pmc param_1600
    .param pmc param_1601
    .param pmc param_1602
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 167
    .lex "self", param_1599
    .lex "$node", param_1600
    .lex "$from", param_1601
    .lex "$to", param_1602
.annotate 'line', 168
    set $P102, param_1600
    unless_null $P102, vivify_614
    new $P102, "Undef"
  vivify_614:
    $S100 = $P102."subtype"()
    iseq $I100, $S100, "zerowidth"
    unless $I100, unless_1604
    new $P101, 'Integer'
    set $P101, $I100
    goto unless_1604_end
  unless_1604:
    set $P103, param_1600
    unless_null $P103, vivify_615
    new $P103, "Undef"
  vivify_615:
    $S101 = $P103."subtype"()
    iseq $I101, $S101, "declarative"
    new $P101, 'Integer'
    set $P101, $I101
  unless_1604_end:
    if $P101, if_1603
.annotate 'line', 170
    set $P112, param_1599
    nqp_decontainerize $P113, $P112
    set $P114, param_1600
    unless_null $P114, vivify_616
    new $P114, "Undef"
  vivify_616:
    set $P115, param_1601
    unless_null $P115, vivify_617
    new $P115, "Undef"
  vivify_617:
    set $P116, param_1602
    unless_null $P116, vivify_618
    new $P116, "Undef"
  vivify_618:
    $P117 = $P113."fate"($P114, $P115, $P116)
    set $P100, $P117
.annotate 'line', 168
    goto if_1603_end
  if_1603:
.annotate 'line', 169
    set $P104, param_1599
    nqp_decontainerize $P105, $P104
    set $P106, param_1601
    unless_null $P106, vivify_619
    new $P106, "Undef"
  vivify_619:
    set $P107, param_1602
    unless_null $P107, vivify_620
    new $P107, "Undef"
  vivify_620:
    find_lex $P108, "$?PACKAGE"
    get_who $P109, $P108
    set $P110, $P109["$EDGE_EPSILON"]
    unless_null $P110, vivify_621
    new $P110, "Undef"
  vivify_621:
    $P111 = $P105."addedge"($P106, $P107, $P110, 0)
    set $P100, $P111
  if_1603_end:
.annotate 'line', 167
    .return ($P100)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "subcapture" :anon :subid("26_1337965216.259") :outer("392_1337965216.259")
    .param pmc param_1606
    .param pmc param_1607
    .param pmc param_1608
    .param pmc param_1609
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 173
    .lex "self", param_1606
    .lex "$node", param_1607
    .lex "$from", param_1608
    .lex "$to", param_1609
.annotate 'line', 174
    set $P100, param_1606
    nqp_decontainerize $P101, $P100
    set $P1610, param_1607
    unless_null $P1610, vivify_622
    $P1610 = root_new ['parrot';'ResizablePMCArray']
  vivify_622:
    set $P102, $P1610[0]
    unless_null $P102, vivify_623
    new $P102, "Undef"
  vivify_623:
    set $P103, param_1608
    unless_null $P103, vivify_624
    new $P103, "Undef"
  vivify_624:
    set $P104, param_1609
    unless_null $P104, vivify_625
    new $P104, "Undef"
  vivify_625:
    $P105 = $P101."regex_nfa"($P102, $P103, $P104)
.annotate 'line', 173
    .return ($P105)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.include "except_types.pasm"
.sub "past" :anon :subid("27_1337965216.259") :outer("392_1337965216.259")
    .param pmc param_1614
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 177
    .const 'Sub' $P1618 = "397_1337965216.259" 
    capture_lex $P1618
    new $P1613, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1613, control_1612
    push_eh $P1613
    .lex "self", param_1614
.annotate 'line', 179
    new $P100, "Undef"
    set $P1615, $P100
    .lex "$past", $P1615
.annotate 'line', 178
    set $P101, param_1614
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 1
    repr_get_attr_obj $P104, $P102, $P103, "$!edges", 1
    unless_null $P104, vivify_626
    new $P104, "Undef"
  vivify_626:
    if $P104, unless_1616_end
    new $P105, "Exception"
    set $P105['type'], .CONTROL_RETURN
    new $P106, "Float"
    assign $P106, 0
    setattribute $P105, 'payload', $P106
    throw $P105
  unless_1616_end:
.annotate 'line', 179
    get_hll_global $P101, "GLOBAL"
    nqp_get_package_through_who $P102, $P101, "PAST"
    get_who $P103, $P102
    set $P104, $P103["Op"]
    $P105 = $P104."new"("list" :named("pasttype"))
    set $P1615, $P105
.annotate 'line', 180
    set $P102, param_1614
    nqp_decontainerize $P103, $P102
    nqp_get_sc_object $P104, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 1
    repr_get_attr_obj $P105, $P103, $P104, "$!states", 0
    unless_null $P105, vivify_627
    new $P105, "Undef"
  vivify_627:
    defined $I100, $P105
    unless $I100, for_undef_628
    iter $P101, $P105
    new $P107, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P107, loop1620_handler
    push_eh $P107
  loop1620_test:
    unless $P101, loop1620_done
    shift $P106, $P101
  loop1620_redo:
    .const 'Sub' $P1618 = "397_1337965216.259" 
    capture_lex $P1618
    $P1618($P106)
  loop1620_next:
    goto loop1620_test
  loop1620_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P108, exception, 'type'
    eq $P108, .CONTROL_LOOP_NEXT, loop1620_next
    eq $P108, .CONTROL_LOOP_REDO, loop1620_redo
  loop1620_done:
    pop_eh 
  for_undef_628:
.annotate 'line', 177
    set $P101, $P1615
    unless_null $P101, vivify_631
    new $P101, "Undef"
  vivify_631:
    .return ($P101)
  control_1612:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P102, exception, "payload"
    .return ($P102)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1617"  :anon :subid("397_1337965216.259") :outer("27_1337965216.259")
    .param pmc param_1619
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 180
    .lex "$_", param_1619
.annotate 'line', 181
    find_lex $P107, "$past"
    unless_null $P107, vivify_629
    new $P107, "Undef"
  vivify_629:
    get_hll_global $P108, "GLOBAL"
    nqp_get_package_through_who $P109, $P108, "PAST"
    get_who $P110, $P109
    set $P111, $P110["Op"]
    find_lex $P112, "$_"
    unless_null $P112, vivify_630
    new $P112, "Undef"
  vivify_630:
    $P113 = $P111."new"($P112 :flat, "list" :named("pasttype"))
    $P114 = $P107."push"($P113)
.annotate 'line', 180
    .return ($P114)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "mergesubrule" :anon :subid("28_1337965216.259") :outer("392_1337965216.259")
    .param pmc param_1622
    .param pmc param_1623
    .param pmc param_1624
    .param pmc param_1625
    .param pmc param_1626
    .param pmc param_1627
    .param pmc param_1628 :optional
    .param int has_param_1628 :opt_flag
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 186
    .const 'Sub' $P1666 = "401_1337965216.259" 
    capture_lex $P1666
    .const 'Sub' $P1644 = "398_1337965216.259" 
    capture_lex $P1644
    .lex "self", param_1622
    .lex "$start", param_1623
    .lex "$to", param_1624
    .lex "$fate", param_1625
    .lex "$cursor", param_1626
    .lex "$name", param_1627
    if has_param_1628, optparam_632
    $P1629 = root_new ['parrot';'Hash']
    set param_1628, $P1629
  optparam_632:
    .lex "%caller_seen", param_1628
.annotate 'line', 188
    $P1631 = root_new ['parrot';'Hash']
    set $P1630, $P1631
    .lex "%seen", $P1630
.annotate 'line', 189
    $P1633 = root_new ['parrot';'ResizablePMCArray']
    set $P1632, $P1633
    .lex "@substates", $P1632
.annotate 'line', 188
    set $P1634, param_1628
    unless_null $P1634, vivify_633
    $P1634 = root_new ['parrot';'Hash']
  vivify_633:
    clone $P100, $P1634
    set $P1630, $P100
.annotate 'line', 186
    set $P1635, $P1632
    unless_null $P1635, vivify_634
    $P1635 = root_new ['parrot';'ResizablePMCArray']
  vivify_634:
.annotate 'line', 190
    set $P100, param_1626
    unless_null $P100, vivify_635
    new $P100, "Undef"
  vivify_635:
    set $P101, param_1627
    unless_null $P101, vivify_636
    new $P101, "Undef"
  vivify_636:
    set $S100, $P101
    can $I100, $P100, $S100
    unless $I100, if_1636_end
.annotate 'line', 191
    set $P102, param_1627
    unless_null $P102, vivify_637
    new $P102, "Undef"
  vivify_637:
    set $P1638, $P1630
    unless_null $P1638, vivify_638
    $P1638 = root_new ['parrot';'Hash']
  vivify_638:
    set $P103, $P1638[$P102]
    unless_null $P103, vivify_639
    new $P103, "Undef"
  vivify_639:
    isfalse $I101, $P103
    unless $I101, if_1637_end
.annotate 'line', 192
    set $P104, param_1626
    unless_null $P104, vivify_640
    new $P104, "Undef"
  vivify_640:
    get_how $P105, $P104
    set $P106, param_1626
    unless_null $P106, vivify_641
    new $P106, "Undef"
  vivify_641:
    set $P107, param_1627
    unless_null $P107, vivify_642
    new $P107, "Undef"
  vivify_642:
    $P108 = $P105."find_method"($P106, $P107, 1 :named("no_trace"))
    $P109 = $P108."nqpattr"("nfa")
    set $P1632, $P109
  if_1637_end:
.annotate 'line', 194
    set $P1641, $P1632
    unless_null $P1641, vivify_643
    $P1641 = root_new ['parrot';'ResizablePMCArray']
  vivify_643:
    isfalse $I101, $P1641
    if $I101, if_1640
    new $P102, 'Integer'
    set $P102, $I101
    goto if_1640_end
  if_1640:
    set $P103, param_1627
    unless_null $P103, vivify_644
    new $P103, "Undef"
  vivify_644:
    set $P1642, $P1630
    unless_null $P1642, vivify_645
    $P1642 = root_new ['parrot';'Hash']
  vivify_645:
    set $P104, $P1642[$P103]
    unless_null $P104, vivify_646
    new $P104, "Undef"
  vivify_646:
    isfalse $I102, $P104
    new $P102, 'Integer'
    set $P102, $I102
  if_1640_end:
    unless $P102, if_1639_end
    .const 'Sub' $P1644 = "398_1337965216.259" 
    capture_lex $P1644
    $P1644()
  if_1639_end:
  if_1636_end:
.annotate 'line', 212
    new $P100, "Float"
    assign $P100, 1
    set $P101, param_1627
    unless_null $P101, vivify_663
    new $P101, "Undef"
  vivify_663:
    set $P1662, $P1630
    unless_null $P1662, vivify_664
    $P1662 = root_new ['parrot';'Hash']
    set $P1630, $P1662
  vivify_664:
    set $P1662[$P101], $P100
.annotate 'line', 213
    set $P1664, $P1632
    unless_null $P1664, vivify_665
    $P1664 = root_new ['parrot';'ResizablePMCArray']
  vivify_665:
    if $P1664, if_1663
.annotate 'line', 249
    set $P106, param_1622
    nqp_decontainerize $P107, $P106
    set $P108, param_1623
    unless_null $P108, vivify_666
    new $P108, "Undef"
  vivify_666:
    find_lex $P109, "$?PACKAGE"
    get_who $P110, $P109
    set $P111, $P110["$EDGE_FATE"]
    unless_null $P111, vivify_667
    new $P111, "Undef"
  vivify_667:
    set $P112, param_1625
    unless_null $P112, vivify_668
    new $P112, "Undef"
  vivify_668:
    $P113 = $P107."addedge"($P108, 0, $P111, $P112)
.annotate 'line', 248
    set $P100, $P113
.annotate 'line', 213
    goto if_1663_end
  if_1663:
    .const 'Sub' $P1666 = "401_1337965216.259" 
    capture_lex $P1666
    $P105 = $P1666()
    set $P100, $P105
  if_1663_end:
.annotate 'line', 186
    .return ($P100)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.include "except_types.pasm"
.sub "_block1643"  :anon :subid("398_1337965216.259") :outer("28_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 194
    .const 'Sub' $P1656 = "400_1337965216.259" 
    capture_lex $P1656
    .const 'Sub' $P1652 = "399_1337965216.259" 
    capture_lex $P1652
.annotate 'line', 197
    $P1646 = root_new ['parrot';'Hash']
    set $P1645, $P1646
    .lex "%protorx", $P1645
.annotate 'line', 198
    new $P105, "Undef"
    set $P1647, $P105
    .lex "$nfa", $P1647
.annotate 'line', 199
    new $P106, "Undef"
    set $P1648, $P106
    .lex "$prefix", $P1648
.annotate 'line', 200
    new $P107, "Undef"
    set $P1649, $P107
    .lex "$prefixchars", $P1649
.annotate 'line', 201
    new $P108, "Undef"
    set $P1650, $P108
    .lex "$gotmatch", $P1650
.annotate 'line', 197
    find_lex $P109, "$cursor"
    unless_null $P109, vivify_647
    new $P109, "Undef"
  vivify_647:
    get_how $P110, $P109
    find_lex $P111, "$cursor"
    unless_null $P111, vivify_648
    new $P111, "Undef"
  vivify_648:
    .const 'Sub' $P1652 = "399_1337965216.259" 
    newclosure $P1653, $P1652
    $P112 = $P110."cache"($P111, "!protoregex_table", $P1653)
    set $P1645, $P112
.annotate 'line', 198
    get_hll_global $P109, "GLOBAL"
    nqp_get_package_through_who $P110, $P109, "QRegex"
    get_who $P111, $P110
    set $P112, $P111["NFA"]
    $P113 = $P112."new"()
    set $P1647, $P113
.annotate 'line', 199
    find_lex $P109, "$name"
    unless_null $P109, vivify_650
    new $P109, "Undef"
  vivify_650:
    concat $P110, $P109, ":sym<"
    set $P1648, $P110
.annotate 'line', 200
    set $P109, $P1648
    unless_null $P109, vivify_651
    new $P109, "Undef"
  vivify_651:
    set $S101, $P109
    length $I103, $S101
    new $P110, 'Integer'
    set $P110, $I103
    set $P1649, $P110
.annotate 'line', 201
    new $P109, "Float"
    assign $P109, 0
    set $P1650, $P109
.annotate 'line', 202
    set $P1654, $P1645
    unless_null $P1654, vivify_652
    $P1654 = root_new ['parrot';'Hash']
  vivify_652:
    defined $I103, $P1654
    unless $I103, for_undef_653
    iter $P109, $P1654
    new $P113, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P113, loop1660_handler
    push_eh $P113
  loop1660_test:
    unless $P109, loop1660_done
    shift $P110, $P109
  loop1660_redo:
    .const 'Sub' $P1656 = "400_1337965216.259" 
    capture_lex $P1656
    $P1656($P110)
  loop1660_next:
    goto loop1660_test
  loop1660_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P114, exception, 'type'
    eq $P114, .CONTROL_LOOP_NEXT, loop1660_next
    eq $P114, .CONTROL_LOOP_REDO, loop1660_redo
  loop1660_done:
    pop_eh 
  for_undef_653:
.annotate 'line', 209
    set $P110, $P1650
    unless_null $P110, vivify_661
    new $P110, "Undef"
  vivify_661:
    if $P110, if_1661
    set $P109, $P110
    goto if_1661_end
  if_1661:
    set $P111, $P1647
    unless_null $P111, vivify_662
    new $P111, "Undef"
  vivify_662:
    $P112 = $P111."states"()
    store_lex "@substates", $P112
    set $P109, $P112
  if_1661_end:
.annotate 'line', 194
    .return ($P109)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1651"  :anon :subid("399_1337965216.259") :outer("398_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 197
    find_lex $P112, "$cursor"
    unless_null $P112, vivify_649
    new $P112, "Undef"
  vivify_649:
    $P113 = $P112."!protoregex_table"()
    .return ($P113)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1655"  :anon :subid("400_1337965216.259") :outer("398_1337965216.259")
    .param pmc param_1658
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 203
    new $P111, "Undef"
    set $P1657, $P111
    .lex "$rxname", $P1657
    .lex "$_", param_1658
    find_lex $P112, "$_"
    unless_null $P112, vivify_654
    new $P112, "Undef"
  vivify_654:
    set $S101, $P112
    new $P113, 'String'
    set $P113, $S101
    set $P1657, $P113
.annotate 'line', 204
    set $P113, $P1657
    unless_null $P113, vivify_655
    new $P113, "Undef"
  vivify_655:
    set $S101, $P113
    find_lex $P114, "$prefixchars"
    unless_null $P114, vivify_656
    new $P114, "Undef"
  vivify_656:
    set $I104, $P114
    substr $S102, $S101, 0, $I104
    find_lex $P115, "$prefix"
    unless_null $P115, vivify_657
    new $P115, "Undef"
  vivify_657:
    set $S103, $P115
    iseq $I105, $S102, $S103
    if $I105, if_1659
    new $P112, 'Integer'
    set $P112, $I105
    goto if_1659_end
  if_1659:
.annotate 'line', 205
    find_lex $P116, "$nfa"
    unless_null $P116, vivify_658
    new $P116, "Undef"
  vivify_658:
    find_lex $P117, "$?PACKAGE"
    get_who $P118, $P117
    set $P119, $P118["$EDGE_SUBRULE"]
    unless_null $P119, vivify_659
    new $P119, "Undef"
  vivify_659:
    set $P120, $P1657
    unless_null $P120, vivify_660
    new $P120, "Undef"
  vivify_660:
    $P116."addedge"(1, 0, $P119, $P120)
.annotate 'line', 206
    new $P116, "Float"
    assign $P116, 1
    store_lex "$gotmatch", $P116
.annotate 'line', 204
    set $P112, $P116
  if_1659_end:
.annotate 'line', 202
    .return ($P112)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.include "except_types.pasm"
.sub "_block1665"  :anon :subid("401_1337965216.259") :outer("28_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 213
    .const 'Sub' $P1676 = "402_1337965216.259" 
    capture_lex $P1676
.annotate 'line', 215
    new $P101, "Undef"
    set $P1667, $P101
    .lex "$substart", $P1667
.annotate 'line', 227
    new $P102, "Undef"
    set $P1668, $P102
    .lex "$subend", $P1668
.annotate 'line', 228
    new $P103, "Undef"
    set $P1669, $P103
    .lex "$i", $P1669
.annotate 'line', 215
    find_lex $P104, "self"
    nqp_decontainerize $P105, $P104
    $P106 = $P105."addstate"()
    set $P1667, $P106
.annotate 'line', 219
    find_lex $P1670, "@substates"
    unless_null $P1670, vivify_669
    $P1670 = root_new ['parrot';'ResizablePMCArray']
  vivify_669:
    clone $P104, $P1670
    store_lex "@substates", $P104
.annotate 'line', 220
    find_lex $P1671, "@substates"
    unless_null $P1671, vivify_670
    $P1671 = root_new ['parrot';'ResizablePMCArray']
  vivify_670:
    shift $P104, $P1671
.annotate 'line', 221
    new $P110, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P110, loop1674_handler
    push_eh $P110
  loop1674_test:
    find_lex $P1672, "@substates"
    unless_null $P1672, vivify_671
    $P1672 = root_new ['parrot';'ResizablePMCArray']
  vivify_671:
    unless $P1672, loop1674_done
  loop1674_redo:
    find_lex $P104, "self"
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 1
    repr_get_attr_obj $P107, $P105, $P106, "$!states", 0
    unless_null $P107, vivify_672
    new $P107, "Undef"
  vivify_672:
    find_lex $P1673, "@substates"
    unless_null $P1673, vivify_673
    $P1673 = root_new ['parrot';'ResizablePMCArray']
  vivify_673:
    shift $P108, $P1673
    clone $P109, $P108
    push $P107, $P109
  loop1674_next:
    goto loop1674_test
  loop1674_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P111, exception, 'type'
    eq $P111, .CONTROL_LOOP_NEXT, loop1674_next
    eq $P111, .CONTROL_LOOP_REDO, loop1674_redo
  loop1674_done:
    pop_eh 
.annotate 'line', 227
    find_lex $P104, "self"
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 1
    repr_get_attr_obj $P107, $P105, $P106, "$!states", 0
    unless_null $P107, vivify_674
    new $P107, "Undef"
  vivify_674:
    elements $I100, $P107
    new $P108, 'Integer'
    set $P108, $I100
    set $P1668, $P108
.annotate 'line', 228
    set $P104, $P1667
    unless_null $P104, vivify_675
    new $P104, "Undef"
  vivify_675:
    set $P1669, $P104
.annotate 'line', 229
    new $P109, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P109, loop1692_handler
    push_eh $P109
  loop1692_test:
    set $P104, $P1669
    unless_null $P104, vivify_676
    new $P104, "Undef"
  vivify_676:
    set $N100, $P104
    set $P105, $P1668
    unless_null $P105, vivify_677
    new $P105, "Undef"
  vivify_677:
    set $N101, $P105
    islt $I100, $N100, $N101
    unless $I100, loop1692_done
  loop1692_redo:
    .const 'Sub' $P1676 = "402_1337965216.259" 
    capture_lex $P1676
    $P1676()
  loop1692_next:
    goto loop1692_test
  loop1692_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P111, exception, 'type'
    eq $P111, .CONTROL_LOOP_NEXT, loop1692_next
    eq $P111, .CONTROL_LOOP_REDO, loop1692_redo
  loop1692_done:
    pop_eh 
.annotate 'line', 243
    find_lex $P104, "self"
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$start"
    unless_null $P106, vivify_713
    new $P106, "Undef"
  vivify_713:
    set $P107, $P1667
    unless_null $P107, vivify_714
    new $P107, "Undef"
  vivify_714:
    add $P108, $P107, 1
    find_lex $P109, "$?PACKAGE"
    get_who $P110, $P109
    set $P111, $P110["$EDGE_EPSILON"]
    unless_null $P111, vivify_715
    new $P111, "Undef"
  vivify_715:
    $P105."addedge"($P106, $P108, $P111, 0)
.annotate 'line', 244
    find_lex $P105, "$to"
    unless_null $P105, vivify_716
    new $P105, "Undef"
  vivify_716:
    set $N100, $P105
    set $N101, 0
    isgt $I100, $N100, $N101
    if $I100, if_1693
.annotate 'line', 246
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
    set $P116, $P1667
    unless_null $P116, vivify_717
    new $P116, "Undef"
  vivify_717:
    find_lex $P117, "$?PACKAGE"
    get_who $P118, $P117
    set $P119, $P118["$EDGE_FATE"]
    unless_null $P119, vivify_718
    new $P119, "Undef"
  vivify_718:
    find_lex $P120, "$fate"
    unless_null $P120, vivify_719
    new $P120, "Undef"
  vivify_719:
    $P121 = $P115."addedge"($P116, 0, $P119, $P120)
    set $P104, $P121
.annotate 'line', 244
    goto if_1693_end
  if_1693:
.annotate 'line', 245
    find_lex $P106, "self"
    nqp_decontainerize $P107, $P106
    set $P108, $P1667
    unless_null $P108, vivify_720
    new $P108, "Undef"
  vivify_720:
    find_lex $P109, "$to"
    unless_null $P109, vivify_721
    new $P109, "Undef"
  vivify_721:
    find_lex $P110, "$?PACKAGE"
    get_who $P111, $P110
    set $P112, $P111["$EDGE_EPSILON"]
    unless_null $P112, vivify_722
    new $P112, "Undef"
  vivify_722:
    $P113 = $P107."addedge"($P108, $P109, $P112, 0)
    set $P104, $P113
  if_1693_end:
.annotate 'line', 213
    .return ($P104)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.include "except_types.pasm"
.sub "_block1675"  :anon :subid("402_1337965216.259") :outer("401_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 230
    new $P106, "Undef"
    set $P1677, $P106
    .lex "$substate", $P1677
.annotate 'line', 231
    new $P107, "Undef"
    set $P1678, $P107
    .lex "$j", $P1678
.annotate 'line', 232
    new $P108, "Undef"
    set $P1679, $P108
    .lex "$k", $P1679
.annotate 'line', 230
    find_lex $P109, "$i"
    unless_null $P109, vivify_678
    new $P109, "Undef"
  vivify_678:
    set $I101, $P109
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    nqp_get_sc_object $P112, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 1
    repr_get_attr_obj $P1680, $P111, $P112, "$!states", 0
    unless_null $P1680, vivify_679
    $P1680 = root_new ['parrot';'ResizablePMCArray']
  vivify_679:
    set $P113, $P1680[$I101]
    unless_null $P113, vivify_680
    new $P113, "Undef"
  vivify_680:
    set $P1677, $P113
.annotate 'line', 231
    new $P109, "Float"
    assign $P109, 0
    set $P1678, $P109
.annotate 'line', 232
    set $P109, $P1677
    unless_null $P109, vivify_681
    new $P109, "Undef"
  vivify_681:
    elements $I101, $P109
    new $P110, 'Integer'
    set $P110, $I101
    set $P1679, $P110
.annotate 'line', 233
    new $P111, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P111, loop1691_handler
    push_eh $P111
  loop1691_test:
    set $P109, $P1678
    unless_null $P109, vivify_682
    new $P109, "Undef"
  vivify_682:
    set $N102, $P109
    set $P110, $P1679
    unless_null $P110, vivify_683
    new $P110, "Undef"
  vivify_683:
    set $N103, $P110
    islt $I101, $N102, $N103
    unless $I101, loop1691_done
  loop1691_redo:
.annotate 'line', 234
    set $P111, $P1678
    unless_null $P111, vivify_684
    new $P111, "Undef"
  vivify_684:
    add $P112, $P111, 2
    set $I102, $P112
    set $P1681, $P1677
    unless_null $P1681, vivify_685
    $P1681 = root_new ['parrot';'ResizablePMCArray']
  vivify_685:
    set $P113, $P1681[$I102]
    unless_null $P113, vivify_686
    new $P113, "Undef"
  vivify_686:
    find_lex $P114, "$substart"
    unless_null $P114, vivify_687
    new $P114, "Undef"
  vivify_687:
    add $P115, $P113, $P114
    set $P116, $P1678
    unless_null $P116, vivify_688
    new $P116, "Undef"
  vivify_688:
    add $P117, $P116, 2
    set $I103, $P117
    set $P1682, $P1677
    unless_null $P1682, vivify_689
    $P1682 = root_new ['parrot';'ResizablePMCArray']
    set $P1677, $P1682
  vivify_689:
    set $P1682[$I103], $P115
.annotate 'line', 236
    set $P111, $P1678
    unless_null $P111, vivify_690
    new $P111, "Undef"
  vivify_690:
    set $I102, $P111
    set $P1684, $P1677
    unless_null $P1684, vivify_691
    $P1684 = root_new ['parrot';'ResizablePMCArray']
  vivify_691:
    set $P112, $P1684[$I102]
    unless_null $P112, vivify_692
    new $P112, "Undef"
  vivify_692:
    set $N104, $P112
    find_lex $P113, "$?PACKAGE"
    get_who $P114, $P113
    set $P115, $P114["$EDGE_FATE"]
    unless_null $P115, vivify_693
    new $P115, "Undef"
  vivify_693:
    set $N105, $P115
    iseq $I103, $N104, $N105
    unless $I103, if_1683_end
.annotate 'line', 235
    find_lex $P116, "$fate"
    unless_null $P116, vivify_694
    new $P116, "Undef"
  vivify_694:
    set $P117, $P1678
    unless_null $P117, vivify_695
    new $P117, "Undef"
  vivify_695:
    add $P118, $P117, 1
    set $I104, $P118
    set $P1685, $P1677
    unless_null $P1685, vivify_696
    $P1685 = root_new ['parrot';'ResizablePMCArray']
    set $P1677, $P1685
  vivify_696:
    set $P1685[$I104], $P116
  if_1683_end:
.annotate 'line', 238
    set $P111, $P1678
    unless_null $P111, vivify_697
    new $P111, "Undef"
  vivify_697:
    set $I102, $P111
    set $P1687, $P1677
    unless_null $P1687, vivify_698
    $P1687 = root_new ['parrot';'ResizablePMCArray']
  vivify_698:
    set $P112, $P1687[$I102]
    unless_null $P112, vivify_699
    new $P112, "Undef"
  vivify_699:
    set $N104, $P112
    find_lex $P113, "$?PACKAGE"
    get_who $P114, $P113
    set $P115, $P114["$EDGE_SUBRULE"]
    unless_null $P115, vivify_700
    new $P115, "Undef"
  vivify_700:
    set $N105, $P115
    iseq $I103, $N104, $N105
    unless $I103, if_1686_end
.annotate 'line', 237
    find_lex $P116, "self"
    nqp_decontainerize $P117, $P116
    find_lex $P118, "$i"
    unless_null $P118, vivify_701
    new $P118, "Undef"
  vivify_701:
    set $P119, $P1678
    unless_null $P119, vivify_702
    new $P119, "Undef"
  vivify_702:
    add $P120, $P119, 2
    set $I104, $P120
    set $P1688, $P1677
    unless_null $P1688, vivify_703
    $P1688 = root_new ['parrot';'ResizablePMCArray']
  vivify_703:
    set $P121, $P1688[$I104]
    unless_null $P121, vivify_704
    new $P121, "Undef"
  vivify_704:
    find_lex $P122, "$fate"
    unless_null $P122, vivify_705
    new $P122, "Undef"
  vivify_705:
    find_lex $P123, "$cursor"
    unless_null $P123, vivify_706
    new $P123, "Undef"
  vivify_706:
    set $P124, $P1678
    unless_null $P124, vivify_707
    new $P124, "Undef"
  vivify_707:
    add $P125, $P124, 1
    set $I105, $P125
    set $P1689, $P1677
    unless_null $P1689, vivify_708
    $P1689 = root_new ['parrot';'ResizablePMCArray']
  vivify_708:
    set $P126, $P1689[$I105]
    unless_null $P126, vivify_709
    new $P126, "Undef"
  vivify_709:
    find_lex $P1690, "%seen"
    unless_null $P1690, vivify_710
    $P1690 = root_new ['parrot';'Hash']
  vivify_710:
    $P117."mergesubrule"($P118, $P121, $P122, $P123, $P126, $P1690)
  if_1686_end:
.annotate 'line', 239
    set $P111, $P1678
    unless_null $P111, vivify_711
    new $P111, "Undef"
  vivify_711:
    add $P112, $P111, 3
    set $P1678, $P112
  loop1691_next:
.annotate 'line', 233
    goto loop1691_test
  loop1691_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P112, exception, 'type'
    eq $P112, .CONTROL_LOOP_NEXT, loop1691_next
    eq $P112, .CONTROL_LOOP_REDO, loop1691_redo
  loop1691_done:
    pop_eh 
.annotate 'line', 241
    find_lex $P109, "$i"
    unless_null $P109, vivify_712
    new $P109, "Undef"
  vivify_712:
    add $P110, $P109, 1
    store_lex "$i", $P110
.annotate 'line', 229
    .return ($P110)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "run" :anon :subid("29_1337965216.259") :outer("392_1337965216.259")
    .param pmc param_1695
    .param pmc param_1696
    .param pmc param_1697
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 253
    .lex "self", param_1695
    .lex "$target", param_1696
    .lex "$offset", param_1697
.annotate 'line', 300
    set $P100, param_1695
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 1
    repr_get_attr_obj $P103, $P101, $P102, "$!states", 0
    unless_null $P103, vivify_723
    new $P103, "Undef"
  vivify_723:
    set $P104, param_1696
    unless_null $P104, vivify_724
    new $P104, "Undef"
  vivify_724:
    set $S100, $P104
    set $P105, param_1697
    unless_null $P105, vivify_725
    new $P105, "Undef"
  vivify_725:
    set $I100, $P105
    nqp_nfa_run $P106, $P103, $S100, $I100
.annotate 'line', 253
    .return ($P106)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.include "except_types.pasm"
.sub "__dump" :anon :subid("30_1337965216.259") :outer("392_1337965216.259")
    .param pmc param_1699
    .param pmc param_1700
    .param pmc param_1701
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 303
    .const 'Sub' $P1705 = "403_1337965216.259" 
    capture_lex $P1705
    .lex "self", param_1699
    .lex "$dumper", param_1700
    .lex "$label", param_1701
.annotate 'line', 304
    new $P100, "Undef"
    set $P1702, $P100
    .lex "$subindent", $P1702
.annotate 'line', 306
    new $P101, "Undef"
    set $P1703, $P101
    .lex "$st", $P1703
.annotate 'line', 304
    set $P102, param_1700
    unless_null $P102, vivify_726
    new $P102, "Undef"
  vivify_726:
    $P103 = $P102."newIndent"()
    set $P1702, $P103
.annotate 'line', 305
    "print"("[")
.annotate 'line', 306
    new $P102, "Float"
    assign $P102, 0
    set $P1703, $P102
.annotate 'line', 307
    set $P103, param_1699
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 1
    repr_get_attr_obj $P106, $P104, $P105, "$!states", 0
    unless_null $P106, vivify_727
    new $P106, "Undef"
  vivify_727:
    defined $I100, $P106
    unless $I100, for_undef_728
    iter $P102, $P106
    new $P108, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P108, loop1707_handler
    push_eh $P108
  loop1707_test:
    unless $P102, loop1707_done
    shift $P107, $P102
  loop1707_redo:
    .const 'Sub' $P1705 = "403_1337965216.259" 
    capture_lex $P1705
    $P1705($P107)
  loop1707_next:
    goto loop1707_test
  loop1707_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P110, exception, 'type'
    eq $P110, .CONTROL_LOOP_NEXT, loop1707_next
    eq $P110, .CONTROL_LOOP_REDO, loop1707_redo
  loop1707_done:
    pop_eh 
  for_undef_728:
.annotate 'line', 311
    set $P102, param_1700
    unless_null $P102, vivify_733
    new $P102, "Undef"
  vivify_733:
    $P102."deleteIndent"()
.annotate 'line', 312
    set $P102, param_1700
    unless_null $P102, vivify_734
    new $P102, "Undef"
  vivify_734:
    $P103 = $P102."indent"()
    $P104 = "print"("\n", $P103, "]")
.annotate 'line', 303
    .return ($P104)
.end


.HLL "nqp"

.namespace ["QRegex";"NFA"]
.sub "_block1704"  :anon :subid("403_1337965216.259") :outer("30_1337965216.259")
    .param pmc param_1706
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 307
    .lex "$_", param_1706
.annotate 'line', 308
    new $P108, 'String'
    set $P108, "\n"
    find_lex $P109, "$subindent"
    unless_null $P109, vivify_729
    new $P109, "Undef"
  vivify_729:
    concat $P110, $P108, $P109
    concat $P111, $P110, "'%d' => [%s]"
    set $S100, $P111
    find_lex $P112, "$st"
    unless_null $P112, vivify_730
    new $P112, "Undef"
  vivify_730:
    find_lex $P113, "$_"
    unless_null $P113, vivify_731
    new $P113, "Undef"
  vivify_731:
    join $S101, ", ", $P113
    new $P114, "ResizablePMCArray"
    push $P114, $P112
    push $P114, $S101
    sprintf $S102, $S100, $P114
    "print"($S102)
.annotate 'line', 309
    find_lex $P108, "$st"
    unless_null $P108, vivify_732
    new $P108, "Undef"
  vivify_732:
    add $P109, $P108, 1
    store_lex "$st", $P109
.annotate 'line', 307
    .return ($P109)
.end


.HLL "nqp"

.loadlib "nqp_group"

.loadlib "nqp_ops"

.loadlib "nqp_bigint_ops"

.loadlib "trans_ops"

.loadlib "io_ops"

.namespace ["NQPCursorRole"]
.sub "_block1709"  :subid("68_1337965216.259") :outer("391_1337965216.259")
    .param pmc param_1711
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 318
    .const 'Sub' $P2129 = "67_1337965216.259" 
    capture_lex $P2129
    .const 'Sub' $P2119 = "66_1337965216.259" 
    capture_lex $P2119
    .const 'Sub' $P2109 = "65_1337965216.259" 
    capture_lex $P2109
    .const 'Sub' $P2099 = "64_1337965216.259" 
    capture_lex $P2099
    .const 'Sub' $P2089 = "63_1337965216.259" 
    capture_lex $P2089
    .const 'Sub' $P2079 = "62_1337965216.259" 
    capture_lex $P2079
    .const 'Sub' $P2069 = "61_1337965216.259" 
    capture_lex $P2069
    .const 'Sub' $P2059 = "60_1337965216.259" 
    capture_lex $P2059
    .const 'Sub' $P2049 = "59_1337965216.259" 
    capture_lex $P2049
    .const 'Sub' $P2036 = "58_1337965216.259" 
    capture_lex $P2036
    .const 'Sub' $P2023 = "57_1337965216.259" 
    capture_lex $P2023
    .const 'Sub' $P2011 = "56_1337965216.259" 
    capture_lex $P2011
    .const 'Sub' $P1991 = "55_1337965216.259" 
    capture_lex $P1991
    .const 'Sub' $P1976 = "54_1337965216.259" 
    capture_lex $P1976
    .const 'Sub' $P1958 = "53_1337965216.259" 
    capture_lex $P1958
    .const 'Sub' $P1947 = "52_1337965216.259" 
    capture_lex $P1947
    .const 'Sub' $P1940 = "51_1337965216.259" 
    capture_lex $P1940
    .const 'Sub' $P1933 = "50_1337965216.259" 
    capture_lex $P1933
    .const 'Sub' $P1920 = "49_1337965216.259" 
    capture_lex $P1920
    .const 'Sub' $P1897 = "48_1337965216.259" 
    capture_lex $P1897
    .const 'Sub' $P1884 = "47_1337965216.259" 
    capture_lex $P1884
    .const 'Sub' $P1861 = "46_1337965216.259" 
    capture_lex $P1861
    .const 'Sub' $P1811 = "45_1337965216.259" 
    capture_lex $P1811
    .const 'Sub' $P1804 = "44_1337965216.259" 
    capture_lex $P1804
    .const 'Sub' $P1799 = "43_1337965216.259" 
    capture_lex $P1799
    .const 'Sub' $P1793 = "42_1337965216.259" 
    capture_lex $P1793
    .const 'Sub' $P1791 = "41_1337965216.259" 
    capture_lex $P1791
    .const 'Sub' $P1784 = "40_1337965216.259" 
    capture_lex $P1784
    .const 'Sub' $P1780 = "39_1337965216.259" 
    capture_lex $P1780
    .const 'Sub' $P1774 = "38_1337965216.259" 
    capture_lex $P1774
    .const 'Sub' $P1769 = "37_1337965216.259" 
    capture_lex $P1769
    .const 'Sub' $P1758 = "36_1337965216.259" 
    capture_lex $P1758
    .const 'Sub' $P1751 = "35_1337965216.259" 
    capture_lex $P1751
    .const 'Sub' $P1722 = "34_1337965216.259" 
    capture_lex $P1722
    .const 'Sub' $P1719 = "33_1337965216.259" 
    capture_lex $P1719
    .const 'Sub' $P1716 = "32_1337965216.259" 
    capture_lex $P1716
    .const 'Sub' $P1713 = "31_1337965216.259" 
    capture_lex $P1713
    .lex "$?CLASS", param_1711
.annotate 'line', 428
    new $P100, "Undef"
    set $P1712, $P100
    .lex "$pass_mark", $P1712
    new $P101, "Float"
    assign $P101, 1
    set $P1712, $P101
.annotate 'line', 706
    .const 'Sub' $P2129 = "67_1337965216.259" 
    newclosure $P2134, $P2129
.annotate 'line', 318
    .return ($P2134)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "target" :anon :subid("31_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_1714
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 330
    .lex "self", param_1714
    set $P101, param_1714
    nqp_decontainerize $P102, $P101
    find_lex $P103, "$?CLASS"
    repr_get_attr_str $S1715, $P102, $P103, "$!target", -1
    .return ($S1715)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "from" :anon :subid("32_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_1717
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 331
    .lex "self", param_1717
    set $P101, param_1717
    nqp_decontainerize $P102, $P101
    find_lex $P103, "$?CLASS"
    repr_get_attr_int $I1718, $P102, $P103, "$!from", -1
    .return ($I1718)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "pos" :anon :subid("33_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_1720
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 332
    .lex "self", param_1720
    set $P101, param_1720
    nqp_decontainerize $P102, $P101
    find_lex $P103, "$?CLASS"
    repr_get_attr_int $I1721, $P102, $P103, "$!pos", -1
    .return ($I1721)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.include "except_types.pasm"
.sub "CAPHASH" :anon :subid("34_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_1723
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 334
    .const 'Sub' $P1738 = "87_1337965216.259" 
    capture_lex $P1738
    .const 'Sub' $P1730 = "86_1337965216.259" 
    capture_lex $P1730
    .lex "self", param_1723
.annotate 'line', 335
    new $P101, "Undef"
    set $P1724, $P101
    .lex "$caps", $P1724
.annotate 'line', 336
    $P1726 = root_new ['parrot';'Hash']
    set $P1725, $P1726
    .lex "%caplist", $P1725
.annotate 'line', 335
    new $P102, "Hash"
    set $P1724, $P102
.annotate 'line', 336
    set $P103, param_1723
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$?CLASS"
    repr_get_attr_obj $P106, $P104, $P105, "$!regexsub", -1
    unless_null $P106, vivify_735
    new $P106, "Undef"
  vivify_735:
    if $P106, if_1727
    new $P112, "Hash"
    set $P102, $P112
    goto if_1727_end
  if_1727:
    set $P107, param_1723
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_obj $P110, $P108, $P109, "$!regexsub", -1
    unless_null $P110, vivify_736
    new $P110, "Undef"
  vivify_736:
    $P111 = $P110."nqpattr"("caps")
    set $P102, $P111
  if_1727_end:
    set $P1725, $P102
.annotate 'line', 337
    set $P1728, $P1725
    unless_null $P1728, vivify_737
    $P1728 = root_new ['parrot';'Hash']
  vivify_737:
    defined $I100, $P1728
    unless $I100, for_undef_738
    iter $P102, $P1728
    new $P105, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P105, loop1735_handler
    push_eh $P105
  loop1735_test:
    unless $P102, loop1735_done
    shift $P103, $P102
  loop1735_redo:
    .const 'Sub' $P1730 = "86_1337965216.259" 
    capture_lex $P1730
    $P1730($P103)
  loop1735_next:
    goto loop1735_test
  loop1735_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P106, exception, 'type'
    eq $P106, .CONTROL_LOOP_NEXT, loop1735_next
    eq $P106, .CONTROL_LOOP_REDO, loop1735_redo
  loop1735_done:
    pop_eh 
  for_undef_738:
.annotate 'line', 340
    set $P102, param_1723
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_obj $P105, $P103, $P104, "$!cstack", -1
    unless_null $P105, vivify_744
    new $P105, "Undef"
  vivify_744:
    unless $P105, if_1736_end
.annotate 'line', 341
    set $P107, param_1723
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_obj $P110, $P108, $P109, "$!cstack", -1
    unless_null $P110, vivify_745
    new $P110, "Undef"
  vivify_745:
    defined $I100, $P110
    unless $I100, for_undef_746
    iter $P106, $P110
    new $P115, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P115, loop1750_handler
    push_eh $P115
  loop1750_test:
    unless $P106, loop1750_done
    shift $P111, $P106
  loop1750_redo:
    .const 'Sub' $P1738 = "87_1337965216.259" 
    capture_lex $P1738
    $P1738($P111)
  loop1750_next:
    goto loop1750_test
  loop1750_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P116, exception, 'type'
    eq $P116, .CONTROL_LOOP_NEXT, loop1750_next
    eq $P116, .CONTROL_LOOP_REDO, loop1750_redo
  loop1750_done:
    pop_eh 
  for_undef_746:
  if_1736_end:
.annotate 'line', 334
    set $P102, $P1724
    unless_null $P102, vivify_763
    new $P102, "Undef"
  vivify_763:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block1729"  :anon :subid("86_1337965216.259") :outer("34_1337965216.259")
    .param pmc param_1731
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 337
    .lex "$_", param_1731
.annotate 'line', 338
    find_lex $P105, "$_"
    unless_null $P105, vivify_739
    new $P105, "Undef"
  vivify_739:
    set $S100, $P105
    find_lex $P1733, "%caplist"
    unless_null $P1733, vivify_740
    $P1733 = root_new ['parrot';'Hash']
  vivify_740:
    set $P106, $P1733[$S100]
    unless_null $P106, vivify_741
    new $P106, "Undef"
  vivify_741:
    set $N100, $P106
    set $N101, 2
    isge $I101, $N100, $N101
    if $I101, if_1732
    new $P104, 'Integer'
    set $P104, $I101
    goto if_1732_end
  if_1732:
    new $P107, "ResizablePMCArray"
    find_lex $P108, "$_"
    unless_null $P108, vivify_742
    new $P108, "Undef"
  vivify_742:
    set $S101, $P108
    find_lex $P1734, "$caps"
    unless_null $P1734, vivify_743
    $P1734 = root_new ['parrot';'Hash']
    store_lex "$caps", $P1734
  vivify_743:
    set $P1734[$S101], $P107
    set $P104, $P107
  if_1732_end:
.annotate 'line', 337
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.include "except_types.pasm"
.sub "_block1737"  :anon :subid("87_1337965216.259") :outer("34_1337965216.259")
    .param pmc param_1739
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 341
    .const 'Sub' $P1744 = "88_1337965216.259" 
    capture_lex $P1744
    .lex "$subcur", param_1739
.annotate 'line', 342
    new $P112, "Undef"
    set $P1740, $P112
    .lex "$submatch", $P1740
.annotate 'line', 343
    new $P113, "Undef"
    set $P1741, $P113
    .lex "$name", $P1741
.annotate 'line', 342
    set $P114, param_1739
    unless_null $P114, vivify_747
    new $P114, "Undef"
  vivify_747:
    $P115 = $P114."MATCH"()
    set $P1740, $P115
.annotate 'line', 343
    set $P114, param_1739
    unless_null $P114, vivify_748
    new $P114, "Undef"
  vivify_748:
    find_lex $P115, "$?CLASS"
    unless_null $P115, vivify_749
    new $P115, "Undef"
  vivify_749:
    getattribute $P116, $P114, $P115, "$!name"
    set $P1741, $P116
.annotate 'line', 344
    set $P115, $P1741
    unless_null $P115, vivify_750
    new $P115, "Undef"
  vivify_750:
    defined $I101, $P115
    if $I101, if_1742
    new $P114, 'Integer'
    set $P114, $I101
    goto if_1742_end
  if_1742:
.annotate 'line', 345
    set $P117, $P1741
    unless_null $P117, vivify_751
    new $P117, "Undef"
  vivify_751:
    set $S100, $P117
    split $P118, "=", $S100
    defined $I102, $P118
    unless $I102, for_undef_752
    iter $P116, $P118
    new $P121, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P121, loop1749_handler
    push_eh $P121
  loop1749_test:
    unless $P116, loop1749_done
    shift $P119, $P116
  loop1749_redo:
    .const 'Sub' $P1744 = "88_1337965216.259" 
    capture_lex $P1744
    $P1744($P119)
  loop1749_next:
    goto loop1749_test
  loop1749_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P122, exception, 'type'
    eq $P122, .CONTROL_LOOP_NEXT, loop1749_next
    eq $P122, .CONTROL_LOOP_REDO, loop1749_redo
  loop1749_done:
    pop_eh 
  for_undef_752:
.annotate 'line', 344
    set $P114, $P116
  if_1742_end:
.annotate 'line', 341
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block1743"  :anon :subid("88_1337965216.259") :outer("87_1337965216.259")
    .param pmc param_1745
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 345
    .lex "$name", param_1745
.annotate 'line', 346
    set $P121, param_1745
    unless_null $P121, vivify_753
    new $P121, "Undef"
  vivify_753:
    find_lex $P1747, "%caplist"
    unless_null $P1747, vivify_754
    $P1747 = root_new ['parrot';'Hash']
  vivify_754:
    set $P122, $P1747[$P121]
    unless_null $P122, vivify_755
    new $P122, "Undef"
  vivify_755:
    set $N100, $P122
    set $N101, 2
    isge $I103, $N100, $N101
    if $I103, if_1746
.annotate 'line', 348
    set $P127, param_1745
    unless_null $P127, vivify_756
    new $P127, "Undef"
  vivify_756:
    set $S101, $P127
    find_lex $P126, "$caps"
    unless_null $P126, vivify_757
    new $P126, "Undef"
  vivify_757:
    find_lex $P128, "$submatch"
    unless_null $P128, vivify_758
    new $P128, "Undef"
  vivify_758:
    set $P126[$S101], $P128
    set $P120, $P128
.annotate 'line', 346
    goto if_1746_end
  if_1746:
.annotate 'line', 347
    set $P123, param_1745
    unless_null $P123, vivify_759
    new $P123, "Undef"
  vivify_759:
    find_lex $P1748, "$caps"
    unless_null $P1748, vivify_760
    $P1748 = root_new ['parrot';'Hash']
  vivify_760:
    set $P124, $P1748[$P123]
    unless_null $P124, vivify_761
    new $P124, "Undef"
  vivify_761:
    find_lex $P125, "$submatch"
    unless_null $P125, vivify_762
    new $P125, "Undef"
  vivify_762:
    push $P124, $P125
    set $P120, $P124
  if_1746_end:
.annotate 'line', 345
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!cursor_init" :anon :subid("35_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_1752
    .param pmc param_1753
    .param pmc param_1754 :optional :named("p")
    .param int has_param_1754 :opt_flag
    .param pmc param_1755 :optional :named("c")
    .param int has_param_1755 :opt_flag
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 356
    .lex "self", param_1752
    .lex "$target", param_1753
    if has_param_1754, optparam_764
    new $P101, "Float"
    assign $P101, 0
    set param_1754, $P101
  optparam_764:
    .lex "$p", param_1754
    if has_param_1755, optparam_765
    new $P102, "Undef"
    set param_1755, $P102
  optparam_765:
    .lex "$c", param_1755
.annotate 'line', 357
    new $P103, "Undef"
    set $P1756, $P103
    .lex "$new", $P1756
    set $P104, param_1752
    nqp_decontainerize $P105, $P104
    $P106 = $P105."CREATE"()
    set $P1756, $P106
.annotate 'line', 358
    set $P104, $P1756
    unless_null $P104, vivify_766
    new $P104, "Undef"
  vivify_766:
    find_lex $P105, "$?CLASS"
    unless_null $P105, vivify_767
    new $P105, "Undef"
  vivify_767:
    set $P106, param_1753
    unless_null $P106, vivify_768
    new $P106, "Undef"
  vivify_768:
    setattribute $P104, $P105, "$!orig", $P106
.annotate 'line', 359
    set $P104, param_1753
    unless_null $P104, vivify_769
    new $P104, "Undef"
  vivify_769:
    set $S100, $P104
    find_encoding $I100, "ucs4"
    trans_encoding $S101, $S100, $I100
    new $P105, 'String'
    set $P105, $S101
    set param_1753, $P105
.annotate 'line', 360
    set $P104, $P1756
    unless_null $P104, vivify_770
    new $P104, "Undef"
  vivify_770:
    find_lex $P105, "$?CLASS"
    unless_null $P105, vivify_771
    new $P105, "Undef"
  vivify_771:
    set $P106, param_1753
    unless_null $P106, vivify_772
    new $P106, "Undef"
  vivify_772:
    set $S100, $P106
    repr_bind_attr_str $P104, $P105, "$!target", $S100
.annotate 'line', 361
    set $P104, param_1755
    unless_null $P104, vivify_773
    new $P104, "Undef"
  vivify_773:
    defined $I100, $P104
    if $I100, if_1757
.annotate 'line', 366
    set $P105, $P1756
    unless_null $P105, vivify_774
    new $P105, "Undef"
  vivify_774:
    find_lex $P106, "$?CLASS"
    unless_null $P106, vivify_775
    new $P106, "Undef"
  vivify_775:
    set $P107, param_1754
    unless_null $P107, vivify_776
    new $P107, "Undef"
  vivify_776:
    set $I101, $P107
    repr_bind_attr_int $P105, $P106, "$!from", $I101
.annotate 'line', 367
    set $P105, $P1756
    unless_null $P105, vivify_777
    new $P105, "Undef"
  vivify_777:
    find_lex $P106, "$?CLASS"
    unless_null $P106, vivify_778
    new $P106, "Undef"
  vivify_778:
    set $P107, param_1754
    unless_null $P107, vivify_779
    new $P107, "Undef"
  vivify_779:
    set $I101, $P107
    repr_bind_attr_int $P105, $P106, "$!pos", $I101
.annotate 'line', 365
    goto if_1757_end
  if_1757:
.annotate 'line', 362
    set $P105, $P1756
    unless_null $P105, vivify_780
    new $P105, "Undef"
  vivify_780:
    find_lex $P106, "$?CLASS"
    unless_null $P106, vivify_781
    new $P106, "Undef"
  vivify_781:
    repr_bind_attr_int $P105, $P106, "$!from", -1
.annotate 'line', 363
    set $P105, $P1756
    unless_null $P105, vivify_782
    new $P105, "Undef"
  vivify_782:
    find_lex $P106, "$?CLASS"
    unless_null $P106, vivify_783
    new $P106, "Undef"
  vivify_783:
    set $P107, param_1755
    unless_null $P107, vivify_784
    new $P107, "Undef"
  vivify_784:
    set $I101, $P107
    repr_bind_attr_int $P105, $P106, "$!pos", $I101
  if_1757_end:
.annotate 'line', 356
    set $P104, $P1756
    unless_null $P104, vivify_785
    new $P104, "Undef"
  vivify_785:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!cursor_start" :anon :subid("36_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_1759
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 372
    .lex "self", param_1759
.annotate 'line', 373
    new $P101, "Undef"
    set $P1760, $P101
    .lex "$new", $P1760
    set $P102, param_1759
    nqp_decontainerize $P103, $P102
    repr_instance_of $P104, $P103
    set $P1760, $P104
.annotate 'line', 374
    set $P102, $P1760
    unless_null $P102, vivify_786
    new $P102, "Undef"
  vivify_786:
    find_lex $P103, "$?CLASS"
    unless_null $P103, vivify_787
    new $P103, "Undef"
  vivify_787:
    set $P104, param_1759
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_obj $P107, $P105, $P106, "$!orig", -1
    unless_null $P107, vivify_788
    new $P107, "Undef"
  vivify_788:
    setattribute $P102, $P103, "$!orig", $P107
.annotate 'line', 375
    set $P102, $P1760
    unless_null $P102, vivify_789
    new $P102, "Undef"
  vivify_789:
    find_lex $P103, "$?CLASS"
    unless_null $P103, vivify_790
    new $P103, "Undef"
  vivify_790:

            $P0 = getinterp
            $P1761 = $P0['sub';1]
        
    setattribute $P102, $P103, "$!regexsub", $P1761
.annotate 'line', 379
    set $P102, param_1759
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_obj $P105, $P103, $P104, "$!restart", -1
    unless_null $P105, vivify_791
    new $P105, "Undef"
  vivify_791:
    unless $P105, if_1762_end
.annotate 'line', 380
    set $P106, $P1760
    unless_null $P106, vivify_792
    new $P106, "Undef"
  vivify_792:
    find_lex $P107, "$?CLASS"
    unless_null $P107, vivify_793
    new $P107, "Undef"
  vivify_793:
    set $P108, param_1759
    nqp_decontainerize $P109, $P108
    find_lex $P110, "$?CLASS"
    repr_get_attr_int $I1763, $P109, $P110, "$!pos", -1
    repr_bind_attr_int $P106, $P107, "$!pos", $I1763
.annotate 'line', 381
    set $P106, param_1759
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_obj $P109, $P107, $P108, "$!cstack", -1
    unless_null $P109, vivify_794
    new $P109, "Undef"
  vivify_794:
    unless $P109, if_1764_end
    set $P110, $P1760
    unless_null $P110, vivify_795
    new $P110, "Undef"
  vivify_795:
    find_lex $P111, "$?CLASS"
    unless_null $P111, vivify_796
    new $P111, "Undef"
  vivify_796:
    set $P112, param_1759
    nqp_decontainerize $P113, $P112
    find_lex $P114, "$?CLASS"
    repr_get_attr_obj $P115, $P113, $P114, "$!cstack", -1
    unless_null $P115, vivify_797
    new $P115, "Undef"
  vivify_797:
    clone $P116, $P115
    setattribute $P110, $P111, "$!cstack", $P116
  if_1764_end:
.annotate 'line', 382
    set $P106, $P1760
    unless_null $P106, vivify_798
    new $P106, "Undef"
  vivify_798:
.annotate 'line', 384
    set $P107, $P1760
    unless_null $P107, vivify_799
    new $P107, "Undef"
  vivify_799:
    find_lex $P108, "$?CLASS"
    unless_null $P108, vivify_800
    new $P108, "Undef"
  vivify_800:
    set $P109, param_1759
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_get_attr_str $S1765, $P110, $P111, "$!target", -1
    repr_bind_attr_str $P107, $P108, "$!target", $S1765
.annotate 'line', 385
    set $P112, $P1760
    unless_null $P112, vivify_801
    new $P112, "Undef"
  vivify_801:
    find_lex $P113, "$?CLASS"
    unless_null $P113, vivify_802
    new $P113, "Undef"
  vivify_802:
    set $P114, param_1759
    nqp_decontainerize $P115, $P114
    find_lex $P116, "$?CLASS"
    repr_get_attr_int $I1766, $P115, $P116, "$!from", -1
    repr_bind_attr_int $P112, $P113, "$!from", $I1766
    find_lex $P117, "$?CLASS"
    unless_null $P117, vivify_803
    new $P117, "Undef"
  vivify_803:
.annotate 'line', 387
    set $P118, $P1760
    unless_null $P118, vivify_804
    new $P118, "Undef"
  vivify_804:
    find_lex $P119, "$?CLASS"
    unless_null $P119, vivify_805
    new $P119, "Undef"
  vivify_805:
    set $P120, param_1759
    nqp_decontainerize $P121, $P120
    find_lex $P122, "$?CLASS"
    repr_get_attr_obj $P123, $P121, $P122, "$!bstack", -1
    unless_null $P123, vivify_806
    new $P123, "Undef"
  vivify_806:
    clone $P124, $P123
    setattribute $P118, $P119, "$!bstack", $P124
    .return ($P106, $S1765, $I1766, $P117, $P124, 1)
  if_1762_end:
.annotate 'line', 390
    set $P102, $P1760
    unless_null $P102, vivify_807
    new $P102, "Undef"
  vivify_807:
    find_lex $P103, "$?CLASS"
    unless_null $P103, vivify_808
    new $P103, "Undef"
  vivify_808:
    repr_bind_attr_int $P102, $P103, "$!pos", -3
.annotate 'line', 391
    set $P102, $P1760
    unless_null $P102, vivify_809
    new $P102, "Undef"
  vivify_809:
.annotate 'line', 393
    set $P103, $P1760
    unless_null $P103, vivify_810
    new $P103, "Undef"
  vivify_810:
    find_lex $P104, "$?CLASS"
    unless_null $P104, vivify_811
    new $P104, "Undef"
  vivify_811:
    set $P105, param_1759
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_get_attr_str $S1767, $P106, $P107, "$!target", -1
    repr_bind_attr_str $P103, $P104, "$!target", $S1767
.annotate 'line', 394
    set $P108, $P1760
    unless_null $P108, vivify_812
    new $P108, "Undef"
  vivify_812:
    find_lex $P109, "$?CLASS"
    unless_null $P109, vivify_813
    new $P109, "Undef"
  vivify_813:
    set $P110, param_1759
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_int $I1768, $P111, $P112, "$!pos", -1
    repr_bind_attr_int $P108, $P109, "$!from", $I1768
    find_lex $P113, "$?CLASS"
    unless_null $P113, vivify_814
    new $P113, "Undef"
  vivify_814:
.annotate 'line', 396
    set $P114, $P1760
    unless_null $P114, vivify_815
    new $P114, "Undef"
  vivify_815:
    find_lex $P115, "$?CLASS"
    unless_null $P115, vivify_816
    new $P115, "Undef"
  vivify_816:
    new $P116, "ResizableIntegerArray"
    setattribute $P114, $P115, "$!bstack", $P116
    .return ($P102, $S1767, $I1768, $P113, $P116, 0)
.annotate 'line', 372
    .return ()
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!cursor_start_subcapture" :anon :subid("37_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_1770
    .param pmc param_1771
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 401
    .lex "self", param_1770
    .lex "$from", param_1771
.annotate 'line', 402
    new $P101, "Undef"
    set $P1772, $P101
    .lex "$new", $P1772
    set $P102, param_1770
    nqp_decontainerize $P103, $P102
    repr_instance_of $P104, $P103
    set $P1772, $P104
.annotate 'line', 403
    set $P102, $P1772
    unless_null $P102, vivify_817
    new $P102, "Undef"
  vivify_817:
    find_lex $P103, "$?CLASS"
    unless_null $P103, vivify_818
    new $P103, "Undef"
  vivify_818:
    set $P104, param_1770
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_obj $P107, $P105, $P106, "$!orig", -1
    unless_null $P107, vivify_819
    new $P107, "Undef"
  vivify_819:
    setattribute $P102, $P103, "$!orig", $P107
.annotate 'line', 404
    set $P102, $P1772
    unless_null $P102, vivify_820
    new $P102, "Undef"
  vivify_820:
    find_lex $P103, "$?CLASS"
    unless_null $P103, vivify_821
    new $P103, "Undef"
  vivify_821:
    set $P104, param_1770
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_str $S1773, $P105, $P106, "$!target", -1
    repr_bind_attr_str $P102, $P103, "$!target", $S1773
.annotate 'line', 405
    set $P102, $P1772
    unless_null $P102, vivify_822
    new $P102, "Undef"
  vivify_822:
    find_lex $P103, "$?CLASS"
    unless_null $P103, vivify_823
    new $P103, "Undef"
  vivify_823:
    set $P104, param_1771
    unless_null $P104, vivify_824
    new $P104, "Undef"
  vivify_824:
    set $I100, $P104
    repr_bind_attr_int $P102, $P103, "$!from", $I100
.annotate 'line', 406
    set $P102, $P1772
    unless_null $P102, vivify_825
    new $P102, "Undef"
  vivify_825:
    find_lex $P103, "$?CLASS"
    unless_null $P103, vivify_826
    new $P103, "Undef"
  vivify_826:
    repr_bind_attr_int $P102, $P103, "$!pos", -3
.annotate 'line', 401
    set $P102, $P1772
    unless_null $P102, vivify_827
    new $P102, "Undef"
  vivify_827:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!cursor_capture" :anon :subid("38_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_1775
    .param pmc param_1776
    .param pmc param_1777
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 410
    .lex "self", param_1775
    .lex "$capture", param_1776
    .lex "$name", param_1777
.annotate 'line', 411
    null $P101
    set $P102, param_1775
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_bind_attr_obj $P103, $P104, "$!match", -1, $P101
.annotate 'line', 412
    set $P101, param_1775
    nqp_decontainerize $P102, $P101
    find_lex $P103, "$?CLASS"
    repr_get_attr_obj $P104, $P102, $P103, "$!cstack", -1
    unless_null $P104, vivify_828
    new $P104, "Undef"
  vivify_828:
    defined $I100, $P104
    if $I100, unless_1778_end
    new $P105, "ResizablePMCArray"
    set $P106, param_1775
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_bind_attr_obj $P107, $P108, "$!cstack", -1, $P105
  unless_1778_end:
.annotate 'line', 413
    set $P101, param_1775
    nqp_decontainerize $P102, $P101
    find_lex $P103, "$?CLASS"
    repr_get_attr_obj $P104, $P102, $P103, "$!cstack", -1
    unless_null $P104, vivify_829
    new $P104, "Undef"
  vivify_829:
    set $P105, param_1776
    unless_null $P105, vivify_830
    new $P105, "Undef"
  vivify_830:
    push $P104, $P105
.annotate 'line', 414
    set $P101, param_1776
    unless_null $P101, vivify_831
    new $P101, "Undef"
  vivify_831:
    find_lex $P102, "$?CLASS"
    unless_null $P102, vivify_832
    new $P102, "Undef"
  vivify_832:
    set $P103, param_1777
    unless_null $P103, vivify_833
    new $P103, "Undef"
  vivify_833:
    setattribute $P101, $P102, "$!name", $P103
.annotate 'line', 415
    set $P101, param_1775
    nqp_decontainerize $P102, $P101
    find_lex $P103, "$?CLASS"
    repr_get_attr_obj $P104, $P102, $P103, "$!bstack", -1
    unless_null $P104, vivify_834
    new $P104, "Undef"
  vivify_834:
    push $P104, 0
.annotate 'line', 416
    set $P101, param_1775
    nqp_decontainerize $P102, $P101
    find_lex $P103, "$?CLASS"
    repr_get_attr_obj $P104, $P102, $P103, "$!bstack", -1
    unless_null $P104, vivify_835
    new $P104, "Undef"
  vivify_835:
    set $P105, param_1775
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_get_attr_int $I1779, $P106, $P107, "$!pos", -1
    push $P104, $I1779
.annotate 'line', 417
    set $P101, param_1775
    nqp_decontainerize $P102, $P101
    find_lex $P103, "$?CLASS"
    repr_get_attr_obj $P104, $P102, $P103, "$!bstack", -1
    unless_null $P104, vivify_836
    new $P104, "Undef"
  vivify_836:
    push $P104, 0
.annotate 'line', 418
    set $P101, param_1775
    nqp_decontainerize $P102, $P101
    find_lex $P103, "$?CLASS"
    repr_get_attr_obj $P104, $P102, $P103, "$!bstack", -1
    unless_null $P104, vivify_837
    new $P104, "Undef"
  vivify_837:
    set $P105, param_1775
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_get_attr_obj $P108, $P106, $P107, "$!cstack", -1
    unless_null $P108, vivify_838
    new $P108, "Undef"
  vivify_838:
    elements $I100, $P108
    push $P104, $I100
.annotate 'line', 410
    set $P101, param_1775
    nqp_decontainerize $P102, $P101
    find_lex $P103, "$?CLASS"
    repr_get_attr_obj $P104, $P102, $P103, "$!cstack", -1
    unless_null $P104, vivify_839
    new $P104, "Undef"
  vivify_839:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!cursor_push_cstack" :anon :subid("39_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_1781
    .param pmc param_1782
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 422
    .lex "self", param_1781
    .lex "$capture", param_1782
.annotate 'line', 423
    set $P101, param_1781
    nqp_decontainerize $P102, $P101
    find_lex $P103, "$?CLASS"
    repr_get_attr_obj $P104, $P102, $P103, "$!cstack", -1
    unless_null $P104, vivify_840
    new $P104, "Undef"
  vivify_840:
    defined $I100, $P104
    if $I100, unless_1783_end
    new $P105, "ResizablePMCArray"
    set $P106, param_1781
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_bind_attr_obj $P107, $P108, "$!cstack", -1, $P105
  unless_1783_end:
.annotate 'line', 424
    set $P101, param_1781
    nqp_decontainerize $P102, $P101
    find_lex $P103, "$?CLASS"
    repr_get_attr_obj $P104, $P102, $P103, "$!cstack", -1
    unless_null $P104, vivify_841
    new $P104, "Undef"
  vivify_841:
    set $P105, param_1782
    unless_null $P105, vivify_842
    new $P105, "Undef"
  vivify_842:
    push $P104, $P105
.annotate 'line', 422
    set $P101, param_1781
    nqp_decontainerize $P102, $P101
    find_lex $P103, "$?CLASS"
    repr_get_attr_obj $P104, $P102, $P103, "$!cstack", -1
    unless_null $P104, vivify_843
    new $P104, "Undef"
  vivify_843:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!cursor_pass" :anon :subid("40_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_1785
    .param pmc param_1786
    .param pmc param_1787 :optional
    .param int has_param_1787 :opt_flag
    .param pmc param_1788 :optional :named("backtrack")
    .param int has_param_1788 :opt_flag
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 429
    .lex "self", param_1785
    .lex "$pos", param_1786
    if has_param_1787, optparam_844
    new $P101, "Undef"
    set param_1787, $P101
  optparam_844:
    .lex "$name", param_1787
    if has_param_1788, optparam_845
    new $P102, "Undef"
    set param_1788, $P102
  optparam_845:
    .lex "$backtrack", param_1788
.annotate 'line', 430
    find_lex $P103, "$pass_mark"
    unless_null $P103, vivify_846
    new $P103, "Undef"
  vivify_846:
    set $P104, param_1785
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_bind_attr_obj $P105, $P106, "$!match", -1, $P103
.annotate 'line', 431
    set $P103, param_1786
    unless_null $P103, vivify_847
    new $P103, "Undef"
  vivify_847:
    set $I100, $P103
    set $P104, param_1785
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_bind_attr_int $P105, $P106, "$!pos", -1, $I100
.annotate 'line', 432
    set $P103, param_1788
    unless_null $P103, vivify_848
    new $P103, "Undef"
  vivify_848:
    unless $P103, if_1789_end
    set $P104, param_1785
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_obj $P107, $P105, $P106, "$!regexsub", -1
    unless_null $P107, vivify_849
    new $P107, "Undef"
  vivify_849:
    set $P108, param_1785
    nqp_decontainerize $P109, $P108
    find_lex $P110, "$?CLASS"
    repr_bind_attr_obj $P109, $P110, "$!restart", -1, $P107
  if_1789_end:
.annotate 'line', 434
    set $P104, param_1787
    unless_null $P104, vivify_850
    new $P104, "Undef"
  vivify_850:
    if $P104, if_1790
    set $P103, $P104
    goto if_1790_end
  if_1790:
    set $P105, param_1785
    nqp_decontainerize $P106, $P105
    set $P107, param_1787
    unless_null $P107, vivify_851
    new $P107, "Undef"
  vivify_851:
    $P108 = $P106."!reduce"($P107)
    set $P103, $P108
  if_1790_end:
.annotate 'line', 429
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!cursor_fail" :anon :subid("41_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_1792
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 437
    .lex "self", param_1792
.annotate 'line', 438
    null $P101
    set $P102, param_1792
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_bind_attr_obj $P103, $P104, "$!match", -1, $P101
.annotate 'line', 439
    null $P101
    set $P102, param_1792
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_bind_attr_obj $P103, $P104, "$!bstack", -1, $P101
.annotate 'line', 440
    set $P101, param_1792
    nqp_decontainerize $P102, $P101
    find_lex $P103, "$?CLASS"
    repr_bind_attr_int $P102, $P103, "$!pos", -1, -3
.annotate 'line', 437
    .return (-3)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!cursor_next" :anon :subid("42_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_1794
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 443
    .const 'Sub' $P1797 = "89_1337965216.259" 
    capture_lex $P1797
    .lex "self", param_1794
.annotate 'line', 444
    set $P102, param_1794
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_obj $P105, $P103, $P104, "$!restart", -1
    unless_null $P105, vivify_852
    new $P105, "Undef"
  vivify_852:
    if $P105, if_1795
.annotate 'line', 447
    .const 'Sub' $P1797 = "89_1337965216.259" 
    capture_lex $P1797
    $P108 = $P1797()
    set $P101, $P108
.annotate 'line', 444
    goto if_1795_end
  if_1795:
.annotate 'line', 445
    set $P106, param_1794
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_obj $P109, $P107, $P108, "$!restart", -1
    unless_null $P109, vivify_855
    new $P109, "Undef"
  vivify_855:
    set $P110, param_1794
    nqp_decontainerize $P111, $P110
    $P112 = $P109($P111)
.annotate 'line', 444
    set $P101, $P112
  if_1795_end:
.annotate 'line', 443
    .return ($P101)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block1796"  :anon :subid("89_1337965216.259") :outer("42_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 448
    new $P106, "Undef"
    set $P1798, $P106
    .lex "$cur", $P1798
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    $P109 = $P108."!cursor_start"()
    set $P1798, $P109
.annotate 'line', 449
    set $P107, $P1798
    unless_null $P107, vivify_853
    new $P107, "Undef"
  vivify_853:
    $P107."!cursor_fail"()
.annotate 'line', 447
    set $P107, $P1798
    unless_null $P107, vivify_854
    new $P107, "Undef"
  vivify_854:
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!reduce" :anon :subid("43_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_1800
    .param pmc param_1801
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 454
    .lex "self", param_1800
    .lex "$name", param_1801
.annotate 'line', 455
    new $P101, "Undef"
    set $P1802, $P101
    .lex "$actions", $P1802
    find_dynamic_lex $P102, "$*ACTIONS"
    set $P1802, $P102
.annotate 'line', 457
    set $P103, $P1802
    unless_null $P103, vivify_856
    new $P103, "Undef"
  vivify_856:
    set $P104, param_1801
    unless_null $P104, vivify_857
    new $P104, "Undef"
  vivify_857:
    set $S100, $P104
    can $I100, $P103, $S100
    if $I100, if_1803
    new $P102, 'Integer'
    set $P102, $I100
    goto if_1803_end
  if_1803:
.annotate 'line', 456
    set $P105, $P1802
    unless_null $P105, vivify_858
    new $P105, "Undef"
  vivify_858:
    set $P106, param_1801
    unless_null $P106, vivify_859
    new $P106, "Undef"
  vivify_859:
    set $S101, $P106
    find_method $P107, $P105, $S101
    set $P108, $P1802
    unless_null $P108, vivify_860
    new $P108, "Undef"
  vivify_860:
    set $P109, param_1800
    nqp_decontainerize $P110, $P109
    $P111 = $P110."MATCH"()
    $P112 = $P107($P108, $P111)
    set $P102, $P112
  if_1803_end:
.annotate 'line', 454
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!reduce_with_match" :anon :subid("44_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_1805
    .param pmc param_1806
    .param pmc param_1807
    .param pmc param_1808
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 460
    .lex "self", param_1805
    .lex "$name", param_1806
    .lex "$key", param_1807
    .lex "$match", param_1808
.annotate 'line', 461
    new $P101, "Undef"
    set $P1809, $P101
    .lex "$actions", $P1809
    find_dynamic_lex $P102, "$*ACTIONS"
    set $P1809, $P102
.annotate 'line', 463
    set $P103, $P1809
    unless_null $P103, vivify_861
    new $P103, "Undef"
  vivify_861:
    set $P104, param_1806
    unless_null $P104, vivify_862
    new $P104, "Undef"
  vivify_862:
    set $S100, $P104
    can $I100, $P103, $S100
    if $I100, if_1810
    new $P102, 'Integer'
    set $P102, $I100
    goto if_1810_end
  if_1810:
.annotate 'line', 462
    set $P105, $P1809
    unless_null $P105, vivify_863
    new $P105, "Undef"
  vivify_863:
    set $P106, param_1806
    unless_null $P106, vivify_864
    new $P106, "Undef"
  vivify_864:
    set $S101, $P106
    find_method $P107, $P105, $S101
    set $P108, $P1809
    unless_null $P108, vivify_865
    new $P108, "Undef"
  vivify_865:
    set $P109, param_1808
    unless_null $P109, vivify_866
    new $P109, "Undef"
  vivify_866:
    set $P110, param_1807
    unless_null $P110, vivify_867
    new $P110, "Undef"
  vivify_867:
    $P111 = $P107($P108, $P109, $P110)
    set $P102, $P111
  if_1810_end:
.annotate 'line', 460
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!protoregex" :anon :subid("45_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_1812
    .param pmc param_1813
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 466
    .const 'Sub' $P1826 = "91_1337965216.259" 
    capture_lex $P1826
    .const 'Sub' $P1819 = "90_1337965216.259" 
    capture_lex $P1819
    .lex "self", param_1812
    .lex "$name", param_1813
.annotate 'line', 467
    new $P101, "Undef"
    set $P1814, $P101
    .lex "$nfa", $P1814
.annotate 'line', 468
    $P1816 = root_new ['parrot';'ResizablePMCArray']
    set $P1815, $P1816
    .lex "@fatepos", $P1815
.annotate 'line', 469
    new $P102, "Undef"
    set $P1817, $P102
    .lex "$cur", $P1817
.annotate 'line', 467
    set $P103, param_1812
    nqp_decontainerize $P104, $P103
    get_how $P105, $P104
    set $P106, param_1812
    nqp_decontainerize $P107, $P106
    set $P108, param_1813
    unless_null $P108, vivify_868
    new $P108, "Undef"
  vivify_868:
    .const 'Sub' $P1819 = "90_1337965216.259" 
    newclosure $P1820, $P1819
    $P109 = $P105."cache"($P107, $P108, $P1820)
    set $P1814, $P109
.annotate 'line', 468
    set $P103, $P1814
    unless_null $P103, vivify_870
    new $P103, "Undef"
  vivify_870:
    set $P104, param_1812
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_str $S1821, $P105, $P106, "$!target", -1
    set $P107, param_1812
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_int $I1822, $P108, $P109, "$!pos", -1
    $P110 = $P103."run"($S1821, $I1822)
    set $P1815, $P110
.annotate 'line', 466
    set $P103, $P1817
    unless_null $P103, vivify_871
    new $P103, "Undef"
  vivify_871:
.annotate 'line', 470
    set $P1824, $P1815
    unless_null $P1824, vivify_872
    $P1824 = root_new ['parrot';'ResizablePMCArray']
  vivify_872:
    unless $P1824, if_1823_end
    .const 'Sub' $P1826 = "91_1337965216.259" 
    capture_lex $P1826
    $P1826()
  if_1823_end:
.annotate 'line', 493
    set $P103, $P1817
    unless_null $P103, vivify_904
    new $P103, "Undef"
  vivify_904:
    set $P1858, $P103
    defined $I1860, $P1858
    if $I1860, default_1859
    set $P104, param_1812
    nqp_decontainerize $P105, $P104
    $P106 = $P105."!cursor_start"()
    set $P1858, $P106
  default_1859:
.annotate 'line', 466
    .return ($P1858)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block1818"  :anon :subid("90_1337965216.259") :outer("45_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 467
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$name"
    unless_null $P111, vivify_869
    new $P111, "Undef"
  vivify_869:
    $P112 = $P110."!protoregex_nfa"($P111)
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.include "except_types.pasm"
.sub "_block1825"  :anon :subid("91_1337965216.259") :outer("45_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 470
    .const 'Sub' $P1852 = "94_1337965216.259" 
    capture_lex $P1852
    .const 'Sub' $P1835 = "92_1337965216.259" 
    capture_lex $P1835
.annotate 'line', 471
    new $P103, "Undef"
    set $P1827, $P103
    .lex "$fate", $P1827
.annotate 'line', 472
    $P1829 = root_new ['parrot';'ResizablePMCArray']
    set $P1828, $P1829
    .lex "@fatesort", $P1828
.annotate 'line', 473
    $P1831 = root_new ['parrot';'ResizablePMCArray']
    set $P1830, $P1831
    .lex "@rxfate", $P1830
.annotate 'line', 471
    new $P104, "Float"
    assign $P104, 0
    set $P1827, $P104
.annotate 'line', 470
    set $P1832, $P1828
    unless_null $P1832, vivify_873
    $P1832 = root_new ['parrot';'ResizablePMCArray']
  vivify_873:
.annotate 'line', 473
    find_lex $P104, "$nfa"
    unless_null $P104, vivify_874
    new $P104, "Undef"
  vivify_874:
    $P105 = $P104."states"()
    set $P106, $P105[0]
    unless_null $P106, vivify_875
    new $P106, "Undef"
  vivify_875:
    set $P1830, $P106
.annotate 'line', 474
    new $P106, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P106, loop1849_handler
    push_eh $P106
  loop1849_test:
    set $P104, $P1827
    unless_null $P104, vivify_876
    new $P104, "Undef"
  vivify_876:
    set $N100, $P104
    find_lex $P1833, "@fatepos"
    unless_null $P1833, vivify_877
    $P1833 = root_new ['parrot';'ResizablePMCArray']
  vivify_877:
    set $N101, $P1833
    islt $I100, $N100, $N101
    unless $I100, loop1849_done
  loop1849_redo:
    .const 'Sub' $P1835 = "92_1337965216.259" 
    capture_lex $P1835
    $P1835()
  loop1849_next:
    goto loop1849_test
  loop1849_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P108, exception, 'type'
    eq $P108, .CONTROL_LOOP_NEXT, loop1849_next
    eq $P108, .CONTROL_LOOP_REDO, loop1849_redo
  loop1849_done:
    pop_eh 
.annotate 'line', 486
    new $P106, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P106, loop1857_handler
    push_eh $P106
  loop1857_test:
    set $P1850, $P1828
    unless_null $P1850, vivify_897
    $P1850 = root_new ['parrot';'ResizablePMCArray']
  vivify_897:
    unless $P1850, loop1857_done
  loop1857_redo:
    .const 'Sub' $P1852 = "94_1337965216.259" 
    capture_lex $P1852
    $P1852()
  loop1857_next:
    goto loop1857_test
  loop1857_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P107, exception, 'type'
    eq $P107, .CONTROL_LOOP_NEXT, loop1857_next
    eq $P107, .CONTROL_LOOP_REDO, loop1857_redo
  loop1857_done:
    pop_eh 
.annotate 'line', 470
    .return ($P1850)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block1834"  :anon :subid("92_1337965216.259") :outer("91_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 474
    .const 'Sub' $P1840 = "93_1337965216.259" 
    capture_lex $P1840
.annotate 'line', 475
    new $P105, "Undef"
    set $P1836, $P105
    .lex "$pos", $P1836
    find_lex $P106, "$fate"
    unless_null $P106, vivify_878
    new $P106, "Undef"
  vivify_878:
    set $I101, $P106
    find_lex $P1837, "@fatepos"
    unless_null $P1837, vivify_879
    $P1837 = root_new ['parrot';'ResizablePMCArray']
  vivify_879:
    set $P107, $P1837[$I101]
    unless_null $P107, vivify_880
    new $P107, "Undef"
  vivify_880:
    set $P1836, $P107
.annotate 'line', 476
    set $P106, $P1836
    unless_null $P106, vivify_881
    new $P106, "Undef"
  vivify_881:
    defined $I101, $P106
    unless $I101, if_1838_end
    .const 'Sub' $P1840 = "93_1337965216.259" 
    capture_lex $P1840
    $P1840()
  if_1838_end:
.annotate 'line', 484
    find_lex $P106, "$fate"
    unless_null $P106, vivify_896
    new $P106, "Undef"
  vivify_896:
    add $P107, $P106, 1
    store_lex "$fate", $P107
.annotate 'line', 474
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.include "except_types.pasm"
.sub "_block1839"  :anon :subid("93_1337965216.259") :outer("92_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 477
    new $P107, "Undef"
    set $P1841, $P107
    .lex "$n", $P1841
    find_lex $P1842, "@fatesort"
    unless_null $P1842, vivify_882
    $P1842 = root_new ['parrot';'ResizablePMCArray']
  vivify_882:
    elements $I102, $P1842
    new $P108, 'Integer'
    set $P108, $I102
    sub $P109, $P108, 1
    set $P1841, $P109
.annotate 'line', 478
    new $P115, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P115, loop1847_handler
    push_eh $P115
  loop1847_test:
    set $P109, $P1841
    unless_null $P109, vivify_883
    new $P109, "Undef"
  vivify_883:
    set $N102, $P109
    set $N103, 0
    isge $I102, $N102, $N103
    if $I102, if_1843
    new $P108, 'Integer'
    set $P108, $I102
    goto if_1843_end
  if_1843:
.annotate 'line', 479
    set $P110, $P1841
    unless_null $P110, vivify_884
    new $P110, "Undef"
  vivify_884:
    set $I103, $P110
    find_lex $P1844, "@fatesort"
    unless_null $P1844, vivify_885
    $P1844 = root_new ['parrot';'ResizablePMCArray']
  vivify_885:
    set $P111, $P1844[$I103]
    unless_null $P111, vivify_886
    new $P111, "Undef"
  vivify_886:
    set $I104, $P111
    find_lex $P1845, "@fatepos"
    unless_null $P1845, vivify_887
    $P1845 = root_new ['parrot';'ResizablePMCArray']
  vivify_887:
    set $P112, $P1845[$I104]
    unless_null $P112, vivify_888
    new $P112, "Undef"
  vivify_888:
    set $N104, $P112
    find_lex $P113, "$fate"
    unless_null $P113, vivify_889
    new $P113, "Undef"
  vivify_889:
    set $I105, $P113
    find_lex $P1846, "@fatepos"
    unless_null $P1846, vivify_890
    $P1846 = root_new ['parrot';'ResizablePMCArray']
  vivify_890:
    set $P114, $P1846[$I105]
    unless_null $P114, vivify_891
    new $P114, "Undef"
  vivify_891:
    set $N105, $P114
    isge $I106, $N104, $N105
    new $P108, 'Integer'
    set $P108, $I106
  if_1843_end:
    unless $P108, loop1847_done
  loop1847_redo:
.annotate 'line', 480
    set $P115, $P1841
    unless_null $P115, vivify_892
    new $P115, "Undef"
  vivify_892:
    sub $P116, $P115, 1
    set $P1841, $P116
  loop1847_next:
.annotate 'line', 479
    goto loop1847_test
  loop1847_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P116, exception, 'type'
    eq $P116, .CONTROL_LOOP_NEXT, loop1847_next
    eq $P116, .CONTROL_LOOP_REDO, loop1847_redo
  loop1847_done:
    pop_eh 
.annotate 'line', 482
    find_lex $P1848, "@fatesort"
    unless_null $P1848, vivify_893
    $P1848 = root_new ['parrot';'ResizablePMCArray']
  vivify_893:
    find_lex $P108, "$fate"
    unless_null $P108, vivify_894
    new $P108, "Undef"
  vivify_894:
    new $P109, "ResizablePMCArray"
    push $P109, $P108
    set $P110, $P1841
    unless_null $P110, vivify_895
    new $P110, "Undef"
  vivify_895:
    add $P111, $P110, 1
    set $I102, $P111
    splice $P1848, $P109, $I102, 0
.annotate 'line', 476
    .return ($P1848)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block1851"  :anon :subid("94_1337965216.259") :outer("91_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 487
    new $P104, "Undef"
    set $P1853, $P104
    .lex "$rxname", $P1853
    find_lex $P1854, "@fatesort"
    unless_null $P1854, vivify_898
    $P1854 = root_new ['parrot';'ResizablePMCArray']
  vivify_898:
    pop $P105, $P1854
    set $I100, $P105
    find_lex $P1855, "@rxfate"
    unless_null $P1855, vivify_899
    $P1855 = root_new ['parrot';'ResizablePMCArray']
  vivify_899:
    set $P106, $P1855[$I100]
    unless_null $P106, vivify_900
    new $P106, "Undef"
  vivify_900:
    set $P1853, $P106
.annotate 'line', 489
    find_lex $P105, "self"
    nqp_decontainerize $P106, $P105
    set $P107, $P1853
    unless_null $P107, vivify_901
    new $P107, "Undef"
  vivify_901:
    set $S100, $P107
    $P108 = $P106.$S100()
    store_lex "$cur", $P108
.annotate 'line', 490
    find_lex $P106, "$cur"
    unless_null $P106, vivify_902
    new $P106, "Undef"
  vivify_902:
    find_lex $P107, "$?CLASS"
    unless_null $P107, vivify_903
    new $P107, "Undef"
  vivify_903:
    repr_get_attr_int $I100, $P106, $P107, "$!pos"
    set $N100, $I100
    set $N101, 0
    isge $I101, $N100, $N101
    if $I101, if_1856
    new $P105, 'Integer'
    set $P105, $I101
    goto if_1856_end
  if_1856:
    die 0, .CONTROL_LOOP_LAST
  if_1856_end:
.annotate 'line', 486
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.include "except_types.pasm"
.sub "!protoregex_nfa" :anon :subid("46_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_1862
    .param pmc param_1863
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 496
    .const 'Sub' $P1878 = "96_1337965216.259" 
    capture_lex $P1878
    .const 'Sub' $P1874 = "95_1337965216.259" 
    capture_lex $P1874
    .lex "self", param_1862
    .lex "$name", param_1863
.annotate 'line', 497
    $P1865 = root_new ['parrot';'Hash']
    set $P1864, $P1865
    .lex "%protorx", $P1864
.annotate 'line', 498
    new $P101, "Undef"
    set $P1866, $P101
    .lex "$nfa", $P1866
.annotate 'line', 499
    $P1868 = root_new ['parrot';'ResizablePMCArray']
    set $P1867, $P1868
    .lex "@fates", $P1867
.annotate 'line', 500
    new $P102, "Undef"
    set $P1869, $P102
    .lex "$start", $P1869
.annotate 'line', 501
    new $P103, "Undef"
    set $P1870, $P103
    .lex "$fate", $P1870
.annotate 'line', 502
    new $P104, "Undef"
    set $P1871, $P104
    .lex "$prefix", $P1871
.annotate 'line', 503
    new $P105, "Undef"
    set $P1872, $P105
    .lex "$prefixchars", $P1872
.annotate 'line', 497
    set $P106, param_1862
    nqp_decontainerize $P107, $P106
    get_how $P108, $P107
    set $P109, param_1862
    nqp_decontainerize $P110, $P109
    .const 'Sub' $P1874 = "95_1337965216.259" 
    newclosure $P1875, $P1874
    $P111 = $P108."cache"($P110, "!protoregex_table", $P1875)
    set $P1864, $P111
.annotate 'line', 498
    get_hll_global $P106, "GLOBAL"
    nqp_get_package_through_who $P107, $P106, "QRegex"
    get_who $P108, $P107
    set $P109, $P108["NFA"]
    $P110 = $P109."new"()
    set $P1866, $P110
.annotate 'line', 499
    set $P106, $P1866
    unless_null $P106, vivify_905
    new $P106, "Undef"
  vivify_905:
    $P107 = $P106."states"()
    set $P108, $P107[0]
    unless_null $P108, vivify_906
    new $P108, "Undef"
  vivify_906:
    set $P1867, $P108
.annotate 'line', 500
    new $P106, "Float"
    assign $P106, 1
    set $P1869, $P106
.annotate 'line', 501
    new $P106, "Float"
    assign $P106, 0
    set $P1870, $P106
.annotate 'line', 502
    set $P106, param_1863
    unless_null $P106, vivify_907
    new $P106, "Undef"
  vivify_907:
    concat $P107, $P106, ":sym<"
    set $P1871, $P107
.annotate 'line', 503
    set $P106, $P1871
    unless_null $P106, vivify_908
    new $P106, "Undef"
  vivify_908:
    set $S100, $P106
    length $I100, $S100
    new $P107, 'Integer'
    set $P107, $I100
    set $P1872, $P107
.annotate 'line', 504
    set $P1876, $P1864
    unless_null $P1876, vivify_909
    $P1876 = root_new ['parrot';'Hash']
  vivify_909:
    defined $I100, $P1876
    unless $I100, for_undef_910
    iter $P106, $P1876
    new $P110, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P110, loop1883_handler
    push_eh $P110
  loop1883_test:
    unless $P106, loop1883_done
    shift $P107, $P106
  loop1883_redo:
    .const 'Sub' $P1878 = "96_1337965216.259" 
    capture_lex $P1878
    $P1878($P107)
  loop1883_next:
    goto loop1883_test
  loop1883_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P111, exception, 'type'
    eq $P111, .CONTROL_LOOP_NEXT, loop1883_next
    eq $P111, .CONTROL_LOOP_REDO, loop1883_redo
  loop1883_done:
    pop_eh 
  for_undef_910:
.annotate 'line', 496
    set $P106, $P1866
    unless_null $P106, vivify_923
    new $P106, "Undef"
  vivify_923:
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block1873"  :anon :subid("95_1337965216.259") :outer("46_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 497
    find_lex $P111, "self"
    nqp_decontainerize $P112, $P111
    $P113 = $P112."!protoregex_table"()
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block1877"  :anon :subid("96_1337965216.259") :outer("46_1337965216.259")
    .param pmc param_1880
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 505
    new $P108, "Undef"
    set $P1879, $P108
    .lex "$rxname", $P1879
    .lex "$_", param_1880
    find_lex $P109, "$_"
    unless_null $P109, vivify_911
    new $P109, "Undef"
  vivify_911:
    set $S100, $P109
    new $P110, 'String'
    set $P110, $S100
    set $P1879, $P110
.annotate 'line', 506
    set $P110, $P1879
    unless_null $P110, vivify_912
    new $P110, "Undef"
  vivify_912:
    set $S100, $P110
    find_lex $P111, "$prefixchars"
    unless_null $P111, vivify_913
    new $P111, "Undef"
  vivify_913:
    set $I101, $P111
    substr $S101, $S100, 0, $I101
    find_lex $P112, "$prefix"
    unless_null $P112, vivify_914
    new $P112, "Undef"
  vivify_914:
    set $S102, $P112
    iseq $I102, $S101, $S102
    if $I102, if_1881
    new $P109, 'Integer'
    set $P109, $I102
    goto if_1881_end
  if_1881:
.annotate 'line', 507
    find_lex $P113, "$fate"
    unless_null $P113, vivify_915
    new $P113, "Undef"
  vivify_915:
    add $P114, $P113, 1
    store_lex "$fate", $P114
.annotate 'line', 508
    set $P113, $P1879
    unless_null $P113, vivify_916
    new $P113, "Undef"
  vivify_916:
    find_lex $P114, "$fate"
    unless_null $P114, vivify_917
    new $P114, "Undef"
  vivify_917:
    set $I103, $P114
    find_lex $P1882, "@fates"
    unless_null $P1882, vivify_918
    $P1882 = root_new ['parrot';'ResizablePMCArray']
    store_lex "@fates", $P1882
  vivify_918:
    set $P1882[$I103], $P113
.annotate 'line', 509
    find_lex $P113, "$nfa"
    unless_null $P113, vivify_919
    new $P113, "Undef"
  vivify_919:
    find_lex $P114, "$start"
    unless_null $P114, vivify_920
    new $P114, "Undef"
  vivify_920:
    find_lex $P115, "$fate"
    unless_null $P115, vivify_921
    new $P115, "Undef"
  vivify_921:
    find_lex $P116, "self"
    nqp_decontainerize $P117, $P116
    set $P118, $P1879
    unless_null $P118, vivify_922
    new $P118, "Undef"
  vivify_922:
    $P119 = $P113."mergesubrule"($P114, 0, $P115, $P117, $P118)
.annotate 'line', 506
    set $P109, $P119
  if_1881_end:
.annotate 'line', 504
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.include "except_types.pasm"
.sub "!protoregex_table" :anon :subid("47_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_1885
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 515
    .const 'Sub' $P1890 = "97_1337965216.259" 
    capture_lex $P1890
    .lex "self", param_1885
.annotate 'line', 516
    $P1887 = root_new ['parrot';'Hash']
    set $P1886, $P1887
    .lex "%protorx", $P1886
.annotate 'line', 515
    set $P1888, $P1886
    unless_null $P1888, vivify_924
    $P1888 = root_new ['parrot';'Hash']
  vivify_924:
.annotate 'line', 517
    set $P102, param_1885
    nqp_decontainerize $P103, $P102
    get_how $P104, $P103
    set $P105, param_1885
    nqp_decontainerize $P106, $P105
    $P107 = $P104."methods"($P106)
    defined $I100, $P107
    unless $I100, for_undef_925
    iter $P101, $P107
    new $P111, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P111, loop1895_handler
    push_eh $P111
  loop1895_test:
    unless $P101, loop1895_done
    shift $P108, $P101
  loop1895_redo:
    .const 'Sub' $P1890 = "97_1337965216.259" 
    capture_lex $P1890
    $P1890($P108)
  loop1895_next:
    goto loop1895_test
  loop1895_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P112, exception, 'type'
    eq $P112, .CONTROL_LOOP_NEXT, loop1895_next
    eq $P112, .CONTROL_LOOP_REDO, loop1895_redo
  loop1895_done:
    pop_eh 
  for_undef_925:
.annotate 'line', 515
    set $P1896, $P1886
    unless_null $P1896, vivify_931
    $P1896 = root_new ['parrot';'Hash']
  vivify_931:
    .return ($P1896)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block1889"  :anon :subid("97_1337965216.259") :outer("47_1337965216.259")
    .param pmc param_1891
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 517
    .lex "$meth", param_1891
.annotate 'line', 518
    new $P109, "Undef"
    set $P1892, $P109
    .lex "$methname", $P1892
    set $P110, param_1891
    unless_null $P110, vivify_926
    new $P110, "Undef"
  vivify_926:
    set $S100, $P110
    new $P111, 'String'
    set $P111, $S100
    set $P1892, $P111
.annotate 'line', 519
    set $P111, $P1892
    unless_null $P111, vivify_927
    new $P111, "Undef"
  vivify_927:
    set $S100, $P111
    index $I101, $S100, ":sym<"
    set $N100, $I101
    set $N101, 0
    isgt $I102, $N100, $N101
    if $I102, if_1893
    new $P110, 'Integer'
    set $P110, $I102
    goto if_1893_end
  if_1893:
    set $P112, param_1891
    unless_null $P112, vivify_928
    new $P112, "Undef"
  vivify_928:
    set $P113, $P1892
    unless_null $P113, vivify_929
    new $P113, "Undef"
  vivify_929:
    find_lex $P1894, "%protorx"
    unless_null $P1894, vivify_930
    $P1894 = root_new ['parrot';'Hash']
    store_lex "%protorx", $P1894
  vivify_930:
    set $P1894[$P113], $P112
    set $P110, $P112
  if_1893_end:
.annotate 'line', 517
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.include "except_types.pasm"
.sub "!BACKREF" :anon :subid("48_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_1898
    .param pmc param_1899
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 524
    .const 'Sub' $P1911 = "98_1337965216.259" 
    capture_lex $P1911
    .lex "self", param_1898
    .lex "$name", param_1899
.annotate 'line', 525
    new $P101, "Undef"
    set $P1900, $P101
    .lex "$cur", $P1900
.annotate 'line', 526
    new $P102, "Undef"
    set $P1901, $P102
    .lex "$n", $P1901
.annotate 'line', 525
    set $P103, param_1898
    nqp_decontainerize $P104, $P103
    $P105 = $P104."!cursor_start"()
    set $P1900, $P105
.annotate 'line', 526
    set $P104, param_1898
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_obj $P107, $P105, $P106, "$!cstack", -1
    unless_null $P107, vivify_932
    new $P107, "Undef"
  vivify_932:
    if $P107, if_1902
    new $P114, "Float"
    assign $P114, -1
    set $P103, $P114
    goto if_1902_end
  if_1902:
    set $P108, param_1898
    nqp_decontainerize $P109, $P108
    find_lex $P110, "$?CLASS"
    repr_get_attr_obj $P111, $P109, $P110, "$!cstack", -1
    unless_null $P111, vivify_933
    new $P111, "Undef"
  vivify_933:
    elements $I100, $P111
    new $P112, 'Integer'
    set $P112, $I100
    sub $P113, $P112, 1
    set $P103, $P113
  if_1902_end:
    set $P1901, $P103
.annotate 'line', 527
    new $P122, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P122, loop1908_handler
    push_eh $P122
  loop1908_test:
    set $P104, $P1901
    unless_null $P104, vivify_934
    new $P104, "Undef"
  vivify_934:
    set $N100, $P104
    set $N101, 0
    isge $I100, $N100, $N101
    if $I100, if_1903
    new $P103, 'Integer'
    set $P103, $I100
    goto if_1903_end
  if_1903:
    set $P106, $P1901
    unless_null $P106, vivify_935
    new $P106, "Undef"
  vivify_935:
    set $I101, $P106
    set $P107, param_1898
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_obj $P1905, $P108, $P109, "$!cstack", -1
    unless_null $P1905, vivify_936
    $P1905 = root_new ['parrot';'ResizablePMCArray']
  vivify_936:
    set $P110, $P1905[$I101]
    unless_null $P110, vivify_937
    new $P110, "Undef"
  vivify_937:
    find_lex $P111, "$?CLASS"
    unless_null $P111, vivify_938
    new $P111, "Undef"
  vivify_938:
    getattribute $P112, $P110, $P111, "$!name"
    isnull $I102, $P112
    unless $I102, unless_1904
    new $P105, 'Integer'
    set $P105, $I102
    goto unless_1904_end
  unless_1904:
.annotate 'line', 528
    set $P113, $P1901
    unless_null $P113, vivify_939
    new $P113, "Undef"
  vivify_939:
    set $I103, $P113
    set $P114, param_1898
    nqp_decontainerize $P115, $P114
    find_lex $P116, "$?CLASS"
    repr_get_attr_obj $P1906, $P115, $P116, "$!cstack", -1
    unless_null $P1906, vivify_940
    $P1906 = root_new ['parrot';'ResizablePMCArray']
  vivify_940:
    set $P117, $P1906[$I103]
    unless_null $P117, vivify_941
    new $P117, "Undef"
  vivify_941:
    find_lex $P118, "$?CLASS"
    unless_null $P118, vivify_942
    new $P118, "Undef"
  vivify_942:
    getattribute $P119, $P117, $P118, "$!name"
    set $S100, $P119
    set $P120, param_1899
    unless_null $P120, vivify_943
    new $P120, "Undef"
  vivify_943:
    set $S101, $P120
    isne $I104, $S100, $S101
    new $P105, 'Integer'
    set $P105, $I104
  unless_1904_end:
.annotate 'line', 527
    set $P103, $P105
  if_1903_end:
    unless $P103, loop1908_done
  loop1908_redo:
    set $P121, $P1901
    unless_null $P121, vivify_944
    new $P121, "Undef"
  vivify_944:
    clone $P1907, $P121
    dec $P121
  loop1908_next:
    goto loop1908_test
  loop1908_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P123, exception, 'type'
    eq $P123, .CONTROL_LOOP_NEXT, loop1908_next
    eq $P123, .CONTROL_LOOP_REDO, loop1908_redo
  loop1908_done:
    pop_eh 
.annotate 'line', 529
    set $P103, $P1901
    unless_null $P103, vivify_945
    new $P103, "Undef"
  vivify_945:
    set $N100, $P103
    set $N101, 0
    isge $I100, $N100, $N101
    unless $I100, if_1909_end
    .const 'Sub' $P1911 = "98_1337965216.259" 
    capture_lex $P1911
    $P1911()
  if_1909_end:
.annotate 'line', 524
    set $P103, $P1900
    unless_null $P103, vivify_956
    new $P103, "Undef"
  vivify_956:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "_block1910"  :anon :subid("98_1337965216.259") :outer("48_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 530
    new $P104, "Undef"
    set $P1912, $P104
    .lex "$subcur", $P1912
.annotate 'line', 531
    new $P105, "Undef"
    set $P1913, $P105
    .lex "$litlen", $P1913
.annotate 'line', 530
    find_lex $P106, "$n"
    unless_null $P106, vivify_946
    new $P106, "Undef"
  vivify_946:
    set $I101, $P106
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_obj $P1914, $P108, $P109, "$!cstack", -1
    unless_null $P1914, vivify_947
    $P1914 = root_new ['parrot';'ResizablePMCArray']
  vivify_947:
    set $P110, $P1914[$I101]
    unless_null $P110, vivify_948
    new $P110, "Undef"
  vivify_948:
    set $P1912, $P110
.annotate 'line', 531
    set $P106, $P1912
    unless_null $P106, vivify_949
    new $P106, "Undef"
  vivify_949:
    $P107 = $P106."pos"()
    set $P108, $P1912
    unless_null $P108, vivify_950
    new $P108, "Undef"
  vivify_950:
    $N102 = $P108."from"()
    sub $P109, $P107, $N102
    set $P1913, $P109
.annotate 'line', 533
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_str $S1916, $P108, $P109, "$!target", -1
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_int $I1917, $P111, $P112, "$!pos", -1
    set $P113, $P1913
    unless_null $P113, vivify_951
    new $P113, "Undef"
  vivify_951:
    set $I101, $P113
    substr $S100, $S1916, $I1917, $I101
.annotate 'line', 534
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
    find_lex $P116, "$?CLASS"
    repr_get_attr_str $S1918, $P115, $P116, "$!target", -1
    set $P117, $P1912
    unless_null $P117, vivify_952
    new $P117, "Undef"
  vivify_952:
    $I102 = $P117."from"()
    set $P118, $P1913
    unless_null $P118, vivify_953
    new $P118, "Undef"
  vivify_953:
    set $I103, $P118
    substr $S101, $S1918, $I102, $I103
    iseq $I104, $S100, $S101
    if $I104, if_1915
    new $P106, 'Integer'
    set $P106, $I104
    goto if_1915_end
  if_1915:
.annotate 'line', 532
    find_lex $P119, "$cur"
    unless_null $P119, vivify_954
    new $P119, "Undef"
  vivify_954:
    find_lex $P120, "self"
    nqp_decontainerize $P121, $P120
    find_lex $P122, "$?CLASS"
    repr_get_attr_int $I1919, $P121, $P122, "$!pos", -1
    new $P123, 'Integer'
    set $P123, $I1919
    set $P124, $P1913
    unless_null $P124, vivify_955
    new $P124, "Undef"
  vivify_955:
    add $P125, $P123, $P124
    $P126 = $P119."!cursor_pass"($P125, "")
    set $P106, $P126
  if_1915_end:
.annotate 'line', 529
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "!LITERAL" :anon :subid("49_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_1921
    .param pmc param_1922
    .param pmc param_1923 :optional
    .param int has_param_1923 :opt_flag
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 539
    .lex "self", param_1921
    .lex "$str", param_1922
    if has_param_1923, optparam_957
    new $P101, "Float"
    assign $P101, 0
    set param_1923, $P101
  optparam_957:
    .lex "$i", param_1923
.annotate 'line', 540
    new $P102, "Undef"
    set $P1924, $P102
    .lex "$cur", $P1924
.annotate 'line', 541
    new $P103, "Undef"
    set $P1925, $P103
    .lex "$litlen", $P1925
.annotate 'line', 540
    set $P104, param_1921
    nqp_decontainerize $P105, $P104
    $P106 = $P105."!cursor_start"()
    set $P1924, $P106
.annotate 'line', 541
    set $P104, param_1922
    unless_null $P104, vivify_958
    new $P104, "Undef"
  vivify_958:
    set $S100, $P104
    length $I100, $S100
    new $P105, 'Integer'
    set $P105, $I100
    set $P1925, $P105
.annotate 'line', 544
    set $P105, param_1923
    unless_null $P105, vivify_959
    new $P105, "Undef"
  vivify_959:
    if $P105, if_1927
.annotate 'line', 545
    set $P114, param_1921
    nqp_decontainerize $P115, $P114
    find_lex $P116, "$?CLASS"
    repr_get_attr_str $S1930, $P115, $P116, "$!target", -1
    set $P117, param_1921
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$?CLASS"
    repr_get_attr_int $I1931, $P118, $P119, "$!pos", -1
    set $P120, $P1925
    unless_null $P120, vivify_960
    new $P120, "Undef"
  vivify_960:
    set $I102, $P120
    substr $S104, $S1930, $I1931, $I102
    set $P121, param_1922
    unless_null $P121, vivify_961
    new $P121, "Undef"
  vivify_961:
    set $S105, $P121
    iseq $I103, $S104, $S105
    new $P104, 'Integer'
    set $P104, $I103
.annotate 'line', 544
    goto if_1927_end
  if_1927:
    set $P106, param_1921
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_str $S1928, $P107, $P108, "$!target", -1
    set $P109, param_1921
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_get_attr_int $I1929, $P110, $P111, "$!pos", -1
    set $P112, $P1925
    unless_null $P112, vivify_962
    new $P112, "Undef"
  vivify_962:
    set $I100, $P112
    substr $S100, $S1928, $I1929, $I100
    downcase $S101, $S100
    set $P113, param_1922
    unless_null $P113, vivify_963
    new $P113, "Undef"
  vivify_963:
    set $S102, $P113
    downcase $S103, $S102
    iseq $I101, $S101, $S103
    new $P104, 'Integer'
    set $P104, $I101
  if_1927_end:
    unless $P104, if_1926_end
.annotate 'line', 542
    set $P122, $P1924
    unless_null $P122, vivify_964
    new $P122, "Undef"
  vivify_964:
    set $P123, param_1921
    nqp_decontainerize $P124, $P123
    find_lex $P125, "$?CLASS"
    repr_get_attr_int $I1932, $P124, $P125, "$!pos", -1
    new $P126, 'Integer'
    set $P126, $I1932
    set $P127, $P1925
    unless_null $P127, vivify_965
    new $P127, "Undef"
  vivify_965:
    add $P128, $P126, $P127
    $P122."!cursor_pass"($P128)
  if_1926_end:
.annotate 'line', 539
    set $P104, $P1924
    unless_null $P104, vivify_966
    new $P104, "Undef"
  vivify_966:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "at" :anon :subid("50_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_1934
    .param pmc param_1935
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 549
    .lex "self", param_1934
    .lex "$pos", param_1935
.annotate 'line', 550
    new $P101, "Undef"
    set $P1936, $P101
    .lex "$cur", $P1936
    set $P102, param_1934
    nqp_decontainerize $P103, $P102
    $P104 = $P103."!cursor_start"()
    set $P1936, $P104
.annotate 'line', 551
    set $P102, param_1935
    unless_null $P102, vivify_967
    new $P102, "Undef"
  vivify_967:
    set $N100, $P102
    set $P103, param_1934
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$?CLASS"
    repr_get_attr_int $I1938, $P104, $P105, "$!pos", -1
    set $N101, $I1938
    iseq $I100, $N100, $N101
    unless $I100, if_1937_end
    set $P106, $P1936
    unless_null $P106, vivify_968
    new $P106, "Undef"
  vivify_968:
    set $P107, param_1934
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_int $I1939, $P108, $P109, "$!pos", -1
    $P106."!cursor_pass"($I1939)
  if_1937_end:
.annotate 'line', 549
    set $P102, $P1936
    unless_null $P102, vivify_969
    new $P102, "Undef"
  vivify_969:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "before" :anon :subid("51_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_1941
    .param pmc param_1942
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 555
    .lex "self", param_1941
    .lex "$regex", param_1942
.annotate 'line', 556
    new $P101, "Undef"
    set $P1943, $P101
    .lex "$cur", $P1943
    set $P102, param_1941
    nqp_decontainerize $P103, $P102
    $P104 = $P103."!cursor_start"()
    set $P1943, $P104
.annotate 'line', 557
    set $P102, $P1943
    unless_null $P102, vivify_970
    new $P102, "Undef"
  vivify_970:
    find_lex $P103, "$?CLASS"
    unless_null $P103, vivify_971
    new $P103, "Undef"
  vivify_971:
    set $P104, param_1941
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_int $I1944, $P105, $P106, "$!pos", -1
    repr_bind_attr_int $P102, $P103, "$!pos", $I1944
.annotate 'line', 558
    set $P102, param_1942
    unless_null $P102, vivify_972
    new $P102, "Undef"
  vivify_972:
    set $P103, $P1943
    unless_null $P103, vivify_973
    new $P103, "Undef"
  vivify_973:
    $P104 = $P102($P103)
    find_lex $P105, "$?CLASS"
    unless_null $P105, vivify_974
    new $P105, "Undef"
  vivify_974:
    repr_get_attr_int $I100, $P104, $P105, "$!pos"
    set $N100, $I100
    set $N101, 0
    isge $I101, $N100, $N101
    if $I101, if_1945
.annotate 'line', 560
    set $P110, $P1943
    unless_null $P110, vivify_975
    new $P110, "Undef"
  vivify_975:
    find_lex $P111, "$?CLASS"
    unless_null $P111, vivify_976
    new $P111, "Undef"
  vivify_976:
    repr_bind_attr_int $P110, $P111, "$!pos", -3
    goto if_1945_end
  if_1945:
.annotate 'line', 559
    set $P106, $P1943
    unless_null $P106, vivify_977
    new $P106, "Undef"
  vivify_977:
    set $P107, param_1941
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_int $I1946, $P108, $P109, "$!pos", -1
    $P106."!cursor_pass"($I1946, "before")
  if_1945_end:
.annotate 'line', 555
    set $P102, $P1943
    unless_null $P102, vivify_978
    new $P102, "Undef"
  vivify_978:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "after" :anon :subid("52_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_1948
    .param pmc param_1949
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 566
    .lex "self", param_1948
    .lex "$regex", param_1949
.annotate 'line', 567
    new $P101, "Undef"
    set $P1950, $P101
    .lex "$cur", $P1950
    set $P102, param_1948
    nqp_decontainerize $P103, $P102
    $P104 = $P103."!cursor_start"()
    set $P1950, $P104
.annotate 'line', 568
    set $P102, $P1950
    unless_null $P102, vivify_979
    new $P102, "Undef"
  vivify_979:
    find_lex $P103, "$?CLASS"
    unless_null $P103, vivify_980
    new $P103, "Undef"
  vivify_980:
    set $P104, param_1948
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_str $S1951, $P105, $P106, "$!target", -1
    new $P107, 'String'
    set $P107, $S1951
    $S100 = $P107."reverse"()
    repr_bind_attr_str $P102, $P103, "$!target", $S100
.annotate 'line', 569
    set $P102, $P1950
    unless_null $P102, vivify_981
    new $P102, "Undef"
  vivify_981:
    find_lex $P103, "$?CLASS"
    unless_null $P103, vivify_982
    new $P103, "Undef"
  vivify_982:
    set $P104, param_1948
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_str $S1952, $P105, $P106, "$!target", -1
    length $I100, $S1952
    new $P107, 'Integer'
    set $P107, $I100
    set $P108, param_1948
    nqp_decontainerize $P109, $P108
    find_lex $P110, "$?CLASS"
    repr_get_attr_int $I1953, $P109, $P110, "$!pos", -1
    sub $P111, $P107, $I1953
    set $I101, $P111
    repr_bind_attr_int $P102, $P103, "$!from", $I101
.annotate 'line', 570
    set $P102, $P1950
    unless_null $P102, vivify_983
    new $P102, "Undef"
  vivify_983:
    find_lex $P103, "$?CLASS"
    unless_null $P103, vivify_984
    new $P103, "Undef"
  vivify_984:
    set $P104, param_1948
    nqp_decontainerize $P105, $P104
    find_lex $P106, "$?CLASS"
    repr_get_attr_str $S1954, $P105, $P106, "$!target", -1
    length $I100, $S1954
    new $P107, 'Integer'
    set $P107, $I100
    set $P108, param_1948
    nqp_decontainerize $P109, $P108
    find_lex $P110, "$?CLASS"
    repr_get_attr_int $I1955, $P109, $P110, "$!pos", -1
    sub $P111, $P107, $I1955
    set $I101, $P111
    repr_bind_attr_int $P102, $P103, "$!pos", $I101
.annotate 'line', 571
    set $P102, param_1949
    unless_null $P102, vivify_985
    new $P102, "Undef"
  vivify_985:
    set $P103, $P1950
    unless_null $P103, vivify_986
    new $P103, "Undef"
  vivify_986:
    $P104 = $P102($P103)
    find_lex $P105, "$?CLASS"
    unless_null $P105, vivify_987
    new $P105, "Undef"
  vivify_987:
    repr_get_attr_int $I100, $P104, $P105, "$!pos"
    set $N100, $I100
    set $N101, 0
    isge $I101, $N100, $N101
    if $I101, if_1956
.annotate 'line', 573
    set $P110, $P1950
    unless_null $P110, vivify_988
    new $P110, "Undef"
  vivify_988:
    find_lex $P111, "$?CLASS"
    unless_null $P111, vivify_989
    new $P111, "Undef"
  vivify_989:
    repr_bind_attr_int $P110, $P111, "$!pos", -3
    goto if_1956_end
  if_1956:
.annotate 'line', 572
    set $P106, $P1950
    unless_null $P106, vivify_990
    new $P106, "Undef"
  vivify_990:
    set $P107, param_1948
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_int $I1957, $P108, $P109, "$!pos", -1
    $P106."!cursor_pass"($I1957, "after")
  if_1956_end:
.annotate 'line', 566
    set $P102, $P1950
    unless_null $P102, vivify_991
    new $P102, "Undef"
  vivify_991:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "ws" :anon :subid("53_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_1959
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 577
    .lex "self", param_1959
.annotate 'line', 579
    new $P101, "Undef"
    set $P1960, $P101
    .lex "$cur", $P1960
    set $P102, param_1959
    nqp_decontainerize $P103, $P102
    $P104 = $P103."!cursor_start"()
    set $P1960, $P104
.annotate 'line', 580
    set $P102, param_1959
    nqp_decontainerize $P103, $P102
    find_lex $P104, "$?CLASS"
    repr_get_attr_int $I1962, $P103, $P104, "$!pos", -1
    set $N100, $I1962
    set $P105, param_1959
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_get_attr_str $S1963, $P106, $P107, "$!target", -1
    length $I100, $S1963
    set $N101, $I100
    isge $I101, $N100, $N101
    if $I101, if_1961
.annotate 'line', 582
    set $P114, param_1959
    nqp_decontainerize $P115, $P114
    find_lex $P116, "$?CLASS"
    repr_get_attr_int $I1968, $P115, $P116, "$!pos", -1
    set $N102, $I1968
    set $N103, 1
    islt $I102, $N102, $N103
    unless $I102, unless_1967
    new $P113, 'Integer'
    set $P113, $I102
    goto unless_1967_end
  unless_1967:
.annotate 'line', 583
    set $P117, param_1959
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$?CLASS"
    repr_get_attr_str $S1969, $P118, $P119, "$!target", -1
    set $P120, param_1959
    nqp_decontainerize $P121, $P120
    find_lex $P122, "$?CLASS"
    repr_get_attr_int $I1970, $P121, $P122, "$!pos", -1
    is_cclass $I103, .CCLASS_WORD, $S1969, $I1970
    new $P123, 'Integer'
    set $P123, $I103
    isfalse $I104, $P123
    new $P113, 'Integer'
    set $P113, $I104
  unless_1967_end:
    unless $P113, unless_1966
    set $P112, $P113
    goto unless_1966_end
  unless_1966:
.annotate 'line', 584
    set $P124, param_1959
    nqp_decontainerize $P125, $P124
    find_lex $P126, "$?CLASS"
    repr_get_attr_str $S1971, $P125, $P126, "$!target", -1
    set $P127, param_1959
    nqp_decontainerize $P128, $P127
    find_lex $P129, "$?CLASS"
    repr_get_attr_int $I1972, $P128, $P129, "$!pos", -1
    new $P130, 'Integer'
    set $P130, $I1972
    sub $P131, $P130, 1
    set $I105, $P131
    is_cclass $I106, .CCLASS_WORD, $S1971, $I105
    new $P132, 'Integer'
    set $P132, $I106
    isfalse $I107, $P132
    new $P112, 'Integer'
    set $P112, $I107
  unless_1966_end:
    unless $P112, if_1965_end
.annotate 'line', 585
    set $P133, $P1960
    unless_null $P133, vivify_992
    new $P133, "Undef"
  vivify_992:
.annotate 'line', 587
    set $P134, param_1959
    nqp_decontainerize $P135, $P134
    find_lex $P136, "$?CLASS"
    repr_get_attr_str $S1973, $P135, $P136, "$!target", -1
    set $P137, param_1959
    nqp_decontainerize $P138, $P137
    find_lex $P139, "$?CLASS"
    repr_get_attr_int $I1974, $P138, $P139, "$!pos", -1
    set $P140, param_1959
    nqp_decontainerize $P141, $P140
    find_lex $P142, "$?CLASS"
    repr_get_attr_str $S1975, $P141, $P142, "$!target", -1
    length $I108, $S1975
    find_not_cclass $I109, .CCLASS_WHITESPACE, $S1973, $I1974, $I108
.annotate 'line', 586
    $P133."!cursor_pass"($I109, "ws")
  if_1965_end:
.annotate 'line', 585
    goto if_1961_end
  if_1961:
.annotate 'line', 581
    set $P108, $P1960
    unless_null $P108, vivify_993
    new $P108, "Undef"
  vivify_993:
    set $P109, param_1959
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_get_attr_int $I1964, $P110, $P111, "$!pos", -1
    $P108."!cursor_pass"($I1964, "ws")
  if_1961_end:
.annotate 'line', 577
    set $P102, $P1960
    unless_null $P102, vivify_994
    new $P102, "Undef"
  vivify_994:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "ww" :anon :subid("54_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_1977
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 592
    .lex "self", param_1977
.annotate 'line', 593
    new $P101, "Undef"
    set $P1978, $P101
    .lex "$cur", $P1978
    set $P102, param_1977
    nqp_decontainerize $P103, $P102
    $P104 = $P103."!cursor_start"()
    set $P1978, $P104
.annotate 'line', 595
    set $P105, param_1977
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_get_attr_int $I1983, $P106, $P107, "$!pos", -1
    set $N100, $I1983
    set $N101, 0
    isgt $I100, $N100, $N101
    if $I100, if_1982
    new $P104, 'Integer'
    set $P104, $I100
    goto if_1982_end
  if_1982:
.annotate 'line', 596
    set $P108, param_1977
    nqp_decontainerize $P109, $P108
    find_lex $P110, "$?CLASS"
    repr_get_attr_int $I1984, $P109, $P110, "$!pos", -1
    set $N102, $I1984
    set $P111, param_1977
    nqp_decontainerize $P112, $P111
    find_lex $P113, "$?CLASS"
    repr_get_attr_str $S1985, $P112, $P113, "$!target", -1
    length $I101, $S1985
    set $N103, $I101
    isne $I102, $N102, $N103
    new $P104, 'Integer'
    set $P104, $I102
  if_1982_end:
    if $P104, if_1981
    set $P103, $P104
    goto if_1981_end
  if_1981:
.annotate 'line', 597
    set $P114, param_1977
    nqp_decontainerize $P115, $P114
    find_lex $P116, "$?CLASS"
    repr_get_attr_str $S1986, $P115, $P116, "$!target", -1
    set $P117, param_1977
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$?CLASS"
    repr_get_attr_int $I1987, $P118, $P119, "$!pos", -1
    is_cclass $I103, .CCLASS_WORD, $S1986, $I1987
    new $P103, 'Integer'
    set $P103, $I103
  if_1981_end:
    if $P103, if_1980
    set $P102, $P103
    goto if_1980_end
  if_1980:
.annotate 'line', 598
    set $P120, param_1977
    nqp_decontainerize $P121, $P120
    find_lex $P122, "$?CLASS"
    repr_get_attr_str $S1988, $P121, $P122, "$!target", -1
    set $P123, param_1977
    nqp_decontainerize $P124, $P123
    find_lex $P125, "$?CLASS"
    repr_get_attr_int $I1989, $P124, $P125, "$!pos", -1
    new $P126, 'Integer'
    set $P126, $I1989
    sub $P127, $P126, 1
    set $I104, $P127
    is_cclass $I105, .CCLASS_WORD, $S1988, $I104
    new $P102, 'Integer'
    set $P102, $I105
  if_1980_end:
    unless $P102, if_1979_end
.annotate 'line', 594
    set $P128, $P1978
    unless_null $P128, vivify_995
    new $P128, "Undef"
  vivify_995:
    set $P129, param_1977
    nqp_decontainerize $P130, $P129
    find_lex $P131, "$?CLASS"
    repr_get_attr_int $I1990, $P130, $P131, "$!pos", -1
    $P128."!cursor_pass"($I1990, "ww")
  if_1979_end:
.annotate 'line', 592
    set $P102, $P1978
    unless_null $P102, vivify_996
    new $P102, "Undef"
  vivify_996:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "wb" :anon :subid("55_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_1992
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 602
    .lex "self", param_1992
.annotate 'line', 603
    new $P101, "Undef"
    set $P1993, $P101
    .lex "$cur", $P1993
    set $P102, param_1992
    nqp_decontainerize $P103, $P102
    $P104 = $P103."!cursor_start"()
    set $P1993, $P104
.annotate 'line', 605
    set $P105, param_1992
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_get_attr_int $I1998, $P106, $P107, "$!pos", -1
    set $N100, $I1998
    set $N101, 0
    iseq $I100, $N100, $N101
    if $I100, if_1997
    new $P104, 'Integer'
    set $P104, $I100
    goto if_1997_end
  if_1997:
    set $P108, param_1992
    nqp_decontainerize $P109, $P108
    find_lex $P110, "$?CLASS"
    repr_get_attr_str $S1999, $P109, $P110, "$!target", -1
    set $P111, param_1992
    nqp_decontainerize $P112, $P111
    find_lex $P113, "$?CLASS"
    repr_get_attr_int $I2000, $P112, $P113, "$!pos", -1
    is_cclass $I101, .CCLASS_WORD, $S1999, $I2000
    new $P104, 'Integer'
    set $P104, $I101
  if_1997_end:
    unless $P104, unless_1996
    set $P103, $P104
    goto unless_1996_end
  unless_1996:
.annotate 'line', 606
    set $P115, param_1992
    nqp_decontainerize $P116, $P115
    find_lex $P117, "$?CLASS"
    repr_get_attr_int $I2002, $P116, $P117, "$!pos", -1
    set $N102, $I2002
    set $P118, param_1992
    nqp_decontainerize $P119, $P118
    find_lex $P120, "$?CLASS"
    repr_get_attr_str $S2003, $P119, $P120, "$!target", -1
    length $I102, $S2003
    set $N103, $I102
    iseq $I103, $N102, $N103
    if $I103, if_2001
    new $P114, 'Integer'
    set $P114, $I103
    goto if_2001_end
  if_2001:
.annotate 'line', 607
    set $P121, param_1992
    nqp_decontainerize $P122, $P121
    find_lex $P123, "$?CLASS"
    repr_get_attr_str $S2004, $P122, $P123, "$!target", -1
    set $P124, param_1992
    nqp_decontainerize $P125, $P124
    find_lex $P126, "$?CLASS"
    repr_get_attr_int $I2005, $P125, $P126, "$!pos", -1
    new $P127, 'Integer'
    set $P127, $I2005
    sub $P128, $P127, 1
    set $I104, $P128
    is_cclass $I105, .CCLASS_WORD, $S2004, $I104
    new $P114, 'Integer'
    set $P114, $I105
  if_2001_end:
    set $P103, $P114
  unless_1996_end:
.annotate 'line', 606
    unless $P103, unless_1995
    set $P102, $P103
    goto unless_1995_end
  unless_1995:
.annotate 'line', 608
    set $P129, param_1992
    nqp_decontainerize $P130, $P129
    find_lex $P131, "$?CLASS"
    repr_get_attr_str $S2006, $P130, $P131, "$!target", -1
    set $P132, param_1992
    nqp_decontainerize $P133, $P132
    find_lex $P134, "$?CLASS"
    repr_get_attr_int $I2007, $P133, $P134, "$!pos", -1
    new $P135, 'Integer'
    set $P135, $I2007
    sub $P136, $P135, 1
    set $I106, $P136
    is_cclass $I107, .CCLASS_WORD, $S2006, $I106
    set $N104, $I107
.annotate 'line', 609
    set $P137, param_1992
    nqp_decontainerize $P138, $P137
    find_lex $P139, "$?CLASS"
    repr_get_attr_str $S2008, $P138, $P139, "$!target", -1
    set $P140, param_1992
    nqp_decontainerize $P141, $P140
    find_lex $P142, "$?CLASS"
    repr_get_attr_int $I2009, $P141, $P142, "$!pos", -1
    is_cclass $I108, .CCLASS_WORD, $S2008, $I2009
    set $N105, $I108
    isne $I109, $N104, $N105
    new $P102, 'Integer'
    set $P102, $I109
  unless_1995_end:
.annotate 'line', 608
    unless $P102, if_1994_end
.annotate 'line', 604
    set $P143, $P1993
    unless_null $P143, vivify_997
    new $P143, "Undef"
  vivify_997:
    set $P144, param_1992
    nqp_decontainerize $P145, $P144
    find_lex $P146, "$?CLASS"
    repr_get_attr_int $I2010, $P145, $P146, "$!pos", -1
    $P143."!cursor_pass"($I2010, "wb")
  if_1994_end:
.annotate 'line', 602
    set $P102, $P1993
    unless_null $P102, vivify_998
    new $P102, "Undef"
  vivify_998:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "ident" :anon :subid("56_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_2012
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 613
    .lex "self", param_2012
.annotate 'line', 614
    new $P101, "Undef"
    set $P2013, $P101
    .lex "$cur", $P2013
    set $P102, param_2012
    nqp_decontainerize $P103, $P102
    $P104 = $P103."!cursor_start"()
    set $P2013, $P104
.annotate 'line', 619
    set $P103, param_2012
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$?CLASS"
    repr_get_attr_str $S2016, $P104, $P105, "$!target", -1
    set $P106, param_2012
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_int $I2017, $P107, $P108, "$!pos", -1
    ord $I100, $S2016, $I2017
    set $N100, $I100
    set $N101, 95
    iseq $I101, $N100, $N101
    unless $I101, unless_2015
    new $P102, 'Integer'
    set $P102, $I101
    goto unless_2015_end
  unless_2015:
.annotate 'line', 620
    set $P109, param_2012
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_get_attr_str $S2018, $P110, $P111, "$!target", -1
    set $P112, param_2012
    nqp_decontainerize $P113, $P112
    find_lex $P114, "$?CLASS"
    repr_get_attr_int $I2019, $P113, $P114, "$!pos", -1
    is_cclass $I102, .CCLASS_ALPHABETIC, $S2018, $I2019
    new $P102, 'Integer'
    set $P102, $I102
  unless_2015_end:
    unless $P102, if_2014_end
.annotate 'line', 615
    set $P115, $P2013
    unless_null $P115, vivify_999
    new $P115, "Undef"
  vivify_999:
.annotate 'line', 617
    set $P116, param_2012
    nqp_decontainerize $P117, $P116
    find_lex $P118, "$?CLASS"
    repr_get_attr_str $S2020, $P117, $P118, "$!target", -1
    set $P119, param_2012
    nqp_decontainerize $P120, $P119
    find_lex $P121, "$?CLASS"
    repr_get_attr_int $I2021, $P120, $P121, "$!pos", -1
.annotate 'line', 618
    set $P122, param_2012
    nqp_decontainerize $P123, $P122
    find_lex $P124, "$?CLASS"
    repr_get_attr_str $S2022, $P123, $P124, "$!target", -1
    length $I103, $S2022
    find_not_cclass $I104, .CCLASS_WORD, $S2020, $I2021, $I103
.annotate 'line', 616
    $P115."!cursor_pass"($I104)
  if_2014_end:
.annotate 'line', 613
    set $P102, $P2013
    unless_null $P102, vivify_1000
    new $P102, "Undef"
  vivify_1000:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "alpha" :anon :subid("57_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_2024
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 624
    .lex "self", param_2024
.annotate 'line', 625
    new $P101, "Undef"
    set $P2025, $P101
    .lex "$cur", $P2025
    set $P102, param_2024
    nqp_decontainerize $P103, $P102
    $P104 = $P103."!cursor_start"()
    set $P2025, $P104
.annotate 'line', 627
    set $P103, param_2024
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$?CLASS"
    repr_get_attr_int $I2028, $P104, $P105, "$!pos", -1
    set $N100, $I2028
    set $P106, param_2024
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_str $S2029, $P107, $P108, "$!target", -1
    length $I100, $S2029
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2027
    new $P102, 'Integer'
    set $P102, $I101
    goto if_2027_end
  if_2027:
.annotate 'line', 628
    set $P110, param_2024
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_str $S2031, $P111, $P112, "$!target", -1
    set $P113, param_2024
    nqp_decontainerize $P114, $P113
    find_lex $P115, "$?CLASS"
    repr_get_attr_int $I2032, $P114, $P115, "$!pos", -1
    is_cclass $I102, .CCLASS_ALPHABETIC, $S2031, $I2032
    unless $I102, unless_2030
    new $P109, 'Integer'
    set $P109, $I102
    goto unless_2030_end
  unless_2030:
.annotate 'line', 629
    set $P116, param_2024
    nqp_decontainerize $P117, $P116
    find_lex $P118, "$?CLASS"
    repr_get_attr_str $S2033, $P117, $P118, "$!target", -1
    set $P119, param_2024
    nqp_decontainerize $P120, $P119
    find_lex $P121, "$?CLASS"
    repr_get_attr_int $I2034, $P120, $P121, "$!pos", -1
    ord $I103, $S2033, $I2034
    set $N102, $I103
    set $N103, 95
    iseq $I104, $N102, $N103
    new $P109, 'Integer'
    set $P109, $I104
  unless_2030_end:
    set $P102, $P109
  if_2027_end:
.annotate 'line', 628
    unless $P102, if_2026_end
.annotate 'line', 626
    set $P122, $P2025
    unless_null $P122, vivify_1001
    new $P122, "Undef"
  vivify_1001:
    set $P123, param_2024
    nqp_decontainerize $P124, $P123
    find_lex $P125, "$?CLASS"
    repr_get_attr_int $I2035, $P124, $P125, "$!pos", -1
    new $P126, 'Integer'
    set $P126, $I2035
    add $P127, $P126, 1
    $P122."!cursor_pass"($P127, "alpha")
  if_2026_end:
.annotate 'line', 624
    set $P102, $P2025
    unless_null $P102, vivify_1002
    new $P102, "Undef"
  vivify_1002:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "alnum" :anon :subid("58_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_2037
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 633
    .lex "self", param_2037
.annotate 'line', 634
    new $P101, "Undef"
    set $P2038, $P101
    .lex "$cur", $P2038
    set $P102, param_2037
    nqp_decontainerize $P103, $P102
    $P104 = $P103."!cursor_start"()
    set $P2038, $P104
.annotate 'line', 636
    set $P103, param_2037
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$?CLASS"
    repr_get_attr_int $I2041, $P104, $P105, "$!pos", -1
    set $N100, $I2041
    set $P106, param_2037
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_str $S2042, $P107, $P108, "$!target", -1
    length $I100, $S2042
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2040
    new $P102, 'Integer'
    set $P102, $I101
    goto if_2040_end
  if_2040:
.annotate 'line', 637
    set $P110, param_2037
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_str $S2044, $P111, $P112, "$!target", -1
    set $P113, param_2037
    nqp_decontainerize $P114, $P113
    find_lex $P115, "$?CLASS"
    repr_get_attr_int $I2045, $P114, $P115, "$!pos", -1
    is_cclass $I102, .CCLASS_ALPHANUMERIC, $S2044, $I2045
    unless $I102, unless_2043
    new $P109, 'Integer'
    set $P109, $I102
    goto unless_2043_end
  unless_2043:
.annotate 'line', 638
    set $P116, param_2037
    nqp_decontainerize $P117, $P116
    find_lex $P118, "$?CLASS"
    repr_get_attr_str $S2046, $P117, $P118, "$!target", -1
    set $P119, param_2037
    nqp_decontainerize $P120, $P119
    find_lex $P121, "$?CLASS"
    repr_get_attr_int $I2047, $P120, $P121, "$!pos", -1
    ord $I103, $S2046, $I2047
    set $N102, $I103
    set $N103, 95
    iseq $I104, $N102, $N103
    new $P109, 'Integer'
    set $P109, $I104
  unless_2043_end:
    set $P102, $P109
  if_2040_end:
.annotate 'line', 637
    unless $P102, if_2039_end
.annotate 'line', 635
    set $P122, $P2038
    unless_null $P122, vivify_1003
    new $P122, "Undef"
  vivify_1003:
    set $P123, param_2037
    nqp_decontainerize $P124, $P123
    find_lex $P125, "$?CLASS"
    repr_get_attr_int $I2048, $P124, $P125, "$!pos", -1
    new $P126, 'Integer'
    set $P126, $I2048
    add $P127, $P126, 1
    $P122."!cursor_pass"($P127, "alnum")
  if_2039_end:
.annotate 'line', 633
    set $P102, $P2038
    unless_null $P102, vivify_1004
    new $P102, "Undef"
  vivify_1004:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "upper" :anon :subid("59_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_2050
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 642
    .lex "self", param_2050
.annotate 'line', 643
    new $P101, "Undef"
    set $P2051, $P101
    .lex "$cur", $P2051
    set $P102, param_2050
    nqp_decontainerize $P103, $P102
    $P104 = $P103."!cursor_start"()
    set $P2051, $P104
.annotate 'line', 645
    set $P103, param_2050
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$?CLASS"
    repr_get_attr_int $I2054, $P104, $P105, "$!pos", -1
    set $N100, $I2054
    set $P106, param_2050
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_str $S2055, $P107, $P108, "$!target", -1
    length $I100, $S2055
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2053
    new $P102, 'Integer'
    set $P102, $I101
    goto if_2053_end
  if_2053:
.annotate 'line', 646
    set $P109, param_2050
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_get_attr_str $S2056, $P110, $P111, "$!target", -1
    set $P112, param_2050
    nqp_decontainerize $P113, $P112
    find_lex $P114, "$?CLASS"
    repr_get_attr_int $I2057, $P113, $P114, "$!pos", -1
    is_cclass $I102, .CCLASS_UPPERCASE, $S2056, $I2057
    new $P102, 'Integer'
    set $P102, $I102
  if_2053_end:
    unless $P102, if_2052_end
.annotate 'line', 644
    set $P115, $P2051
    unless_null $P115, vivify_1005
    new $P115, "Undef"
  vivify_1005:
    set $P116, param_2050
    nqp_decontainerize $P117, $P116
    find_lex $P118, "$?CLASS"
    repr_get_attr_int $I2058, $P117, $P118, "$!pos", -1
    new $P119, 'Integer'
    set $P119, $I2058
    add $P120, $P119, 1
    $P115."!cursor_pass"($P120, "upper")
  if_2052_end:
.annotate 'line', 642
    set $P102, $P2051
    unless_null $P102, vivify_1006
    new $P102, "Undef"
  vivify_1006:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "lower" :anon :subid("60_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_2060
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 650
    .lex "self", param_2060
.annotate 'line', 651
    new $P101, "Undef"
    set $P2061, $P101
    .lex "$cur", $P2061
    set $P102, param_2060
    nqp_decontainerize $P103, $P102
    $P104 = $P103."!cursor_start"()
    set $P2061, $P104
.annotate 'line', 653
    set $P103, param_2060
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$?CLASS"
    repr_get_attr_int $I2064, $P104, $P105, "$!pos", -1
    set $N100, $I2064
    set $P106, param_2060
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_str $S2065, $P107, $P108, "$!target", -1
    length $I100, $S2065
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2063
    new $P102, 'Integer'
    set $P102, $I101
    goto if_2063_end
  if_2063:
.annotate 'line', 654
    set $P109, param_2060
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_get_attr_str $S2066, $P110, $P111, "$!target", -1
    set $P112, param_2060
    nqp_decontainerize $P113, $P112
    find_lex $P114, "$?CLASS"
    repr_get_attr_int $I2067, $P113, $P114, "$!pos", -1
    is_cclass $I102, .CCLASS_LOWERCASE, $S2066, $I2067
    new $P102, 'Integer'
    set $P102, $I102
  if_2063_end:
    unless $P102, if_2062_end
.annotate 'line', 652
    set $P115, $P2061
    unless_null $P115, vivify_1007
    new $P115, "Undef"
  vivify_1007:
    set $P116, param_2060
    nqp_decontainerize $P117, $P116
    find_lex $P118, "$?CLASS"
    repr_get_attr_int $I2068, $P117, $P118, "$!pos", -1
    new $P119, 'Integer'
    set $P119, $I2068
    add $P120, $P119, 1
    $P115."!cursor_pass"($P120, "lower")
  if_2062_end:
.annotate 'line', 650
    set $P102, $P2061
    unless_null $P102, vivify_1008
    new $P102, "Undef"
  vivify_1008:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "digit" :anon :subid("61_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_2070
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 658
    .lex "self", param_2070
.annotate 'line', 659
    new $P101, "Undef"
    set $P2071, $P101
    .lex "$cur", $P2071
    set $P102, param_2070
    nqp_decontainerize $P103, $P102
    $P104 = $P103."!cursor_start"()
    set $P2071, $P104
.annotate 'line', 661
    set $P103, param_2070
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$?CLASS"
    repr_get_attr_int $I2074, $P104, $P105, "$!pos", -1
    set $N100, $I2074
    set $P106, param_2070
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_str $S2075, $P107, $P108, "$!target", -1
    length $I100, $S2075
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2073
    new $P102, 'Integer'
    set $P102, $I101
    goto if_2073_end
  if_2073:
.annotate 'line', 662
    set $P109, param_2070
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_get_attr_str $S2076, $P110, $P111, "$!target", -1
    set $P112, param_2070
    nqp_decontainerize $P113, $P112
    find_lex $P114, "$?CLASS"
    repr_get_attr_int $I2077, $P113, $P114, "$!pos", -1
    is_cclass $I102, .CCLASS_NUMERIC, $S2076, $I2077
    new $P102, 'Integer'
    set $P102, $I102
  if_2073_end:
    unless $P102, if_2072_end
.annotate 'line', 660
    set $P115, $P2071
    unless_null $P115, vivify_1009
    new $P115, "Undef"
  vivify_1009:
    set $P116, param_2070
    nqp_decontainerize $P117, $P116
    find_lex $P118, "$?CLASS"
    repr_get_attr_int $I2078, $P117, $P118, "$!pos", -1
    new $P119, 'Integer'
    set $P119, $I2078
    add $P120, $P119, 1
    $P115."!cursor_pass"($P120, "digit")
  if_2072_end:
.annotate 'line', 658
    set $P102, $P2071
    unless_null $P102, vivify_1010
    new $P102, "Undef"
  vivify_1010:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "xdigit" :anon :subid("62_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_2080
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 666
    .lex "self", param_2080
.annotate 'line', 667
    new $P101, "Undef"
    set $P2081, $P101
    .lex "$cur", $P2081
    set $P102, param_2080
    nqp_decontainerize $P103, $P102
    $P104 = $P103."!cursor_start"()
    set $P2081, $P104
.annotate 'line', 669
    set $P103, param_2080
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$?CLASS"
    repr_get_attr_int $I2084, $P104, $P105, "$!pos", -1
    set $N100, $I2084
    set $P106, param_2080
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_str $S2085, $P107, $P108, "$!target", -1
    length $I100, $S2085
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2083
    new $P102, 'Integer'
    set $P102, $I101
    goto if_2083_end
  if_2083:
.annotate 'line', 670
    set $P109, param_2080
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_get_attr_str $S2086, $P110, $P111, "$!target", -1
    set $P112, param_2080
    nqp_decontainerize $P113, $P112
    find_lex $P114, "$?CLASS"
    repr_get_attr_int $I2087, $P113, $P114, "$!pos", -1
    is_cclass $I102, .CCLASS_HEXADECIMAL, $S2086, $I2087
    new $P102, 'Integer'
    set $P102, $I102
  if_2083_end:
    unless $P102, if_2082_end
.annotate 'line', 668
    set $P115, $P2081
    unless_null $P115, vivify_1011
    new $P115, "Undef"
  vivify_1011:
    set $P116, param_2080
    nqp_decontainerize $P117, $P116
    find_lex $P118, "$?CLASS"
    repr_get_attr_int $I2088, $P117, $P118, "$!pos", -1
    new $P119, 'Integer'
    set $P119, $I2088
    add $P120, $P119, 1
    $P115."!cursor_pass"($P120, "xdigit")
  if_2082_end:
.annotate 'line', 666
    set $P102, $P2081
    unless_null $P102, vivify_1012
    new $P102, "Undef"
  vivify_1012:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "space" :anon :subid("63_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_2090
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 674
    .lex "self", param_2090
.annotate 'line', 675
    new $P101, "Undef"
    set $P2091, $P101
    .lex "$cur", $P2091
    set $P102, param_2090
    nqp_decontainerize $P103, $P102
    $P104 = $P103."!cursor_start"()
    set $P2091, $P104
.annotate 'line', 677
    set $P103, param_2090
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$?CLASS"
    repr_get_attr_int $I2094, $P104, $P105, "$!pos", -1
    set $N100, $I2094
    set $P106, param_2090
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_str $S2095, $P107, $P108, "$!target", -1
    length $I100, $S2095
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2093
    new $P102, 'Integer'
    set $P102, $I101
    goto if_2093_end
  if_2093:
.annotate 'line', 678
    set $P109, param_2090
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_get_attr_str $S2096, $P110, $P111, "$!target", -1
    set $P112, param_2090
    nqp_decontainerize $P113, $P112
    find_lex $P114, "$?CLASS"
    repr_get_attr_int $I2097, $P113, $P114, "$!pos", -1
    is_cclass $I102, .CCLASS_WHITESPACE, $S2096, $I2097
    new $P102, 'Integer'
    set $P102, $I102
  if_2093_end:
    unless $P102, if_2092_end
.annotate 'line', 676
    set $P115, $P2091
    unless_null $P115, vivify_1013
    new $P115, "Undef"
  vivify_1013:
    set $P116, param_2090
    nqp_decontainerize $P117, $P116
    find_lex $P118, "$?CLASS"
    repr_get_attr_int $I2098, $P117, $P118, "$!pos", -1
    new $P119, 'Integer'
    set $P119, $I2098
    add $P120, $P119, 1
    $P115."!cursor_pass"($P120, "space")
  if_2092_end:
.annotate 'line', 674
    set $P102, $P2091
    unless_null $P102, vivify_1014
    new $P102, "Undef"
  vivify_1014:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "blank" :anon :subid("64_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_2100
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 682
    .lex "self", param_2100
.annotate 'line', 683
    new $P101, "Undef"
    set $P2101, $P101
    .lex "$cur", $P2101
    set $P102, param_2100
    nqp_decontainerize $P103, $P102
    $P104 = $P103."!cursor_start"()
    set $P2101, $P104
.annotate 'line', 685
    set $P103, param_2100
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$?CLASS"
    repr_get_attr_int $I2104, $P104, $P105, "$!pos", -1
    set $N100, $I2104
    set $P106, param_2100
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_str $S2105, $P107, $P108, "$!target", -1
    length $I100, $S2105
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2103
    new $P102, 'Integer'
    set $P102, $I101
    goto if_2103_end
  if_2103:
.annotate 'line', 686
    set $P109, param_2100
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_get_attr_str $S2106, $P110, $P111, "$!target", -1
    set $P112, param_2100
    nqp_decontainerize $P113, $P112
    find_lex $P114, "$?CLASS"
    repr_get_attr_int $I2107, $P113, $P114, "$!pos", -1
    is_cclass $I102, .CCLASS_BLANK, $S2106, $I2107
    new $P102, 'Integer'
    set $P102, $I102
  if_2103_end:
    unless $P102, if_2102_end
.annotate 'line', 684
    set $P115, $P2101
    unless_null $P115, vivify_1015
    new $P115, "Undef"
  vivify_1015:
    set $P116, param_2100
    nqp_decontainerize $P117, $P116
    find_lex $P118, "$?CLASS"
    repr_get_attr_int $I2108, $P117, $P118, "$!pos", -1
    new $P119, 'Integer'
    set $P119, $I2108
    add $P120, $P119, 1
    $P115."!cursor_pass"($P120, "blank")
  if_2102_end:
.annotate 'line', 682
    set $P102, $P2101
    unless_null $P102, vivify_1016
    new $P102, "Undef"
  vivify_1016:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "cntrl" :anon :subid("65_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_2110
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 690
    .lex "self", param_2110
.annotate 'line', 691
    new $P101, "Undef"
    set $P2111, $P101
    .lex "$cur", $P2111
    set $P102, param_2110
    nqp_decontainerize $P103, $P102
    $P104 = $P103."!cursor_start"()
    set $P2111, $P104
.annotate 'line', 693
    set $P103, param_2110
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$?CLASS"
    repr_get_attr_int $I2114, $P104, $P105, "$!pos", -1
    set $N100, $I2114
    set $P106, param_2110
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_str $S2115, $P107, $P108, "$!target", -1
    length $I100, $S2115
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2113
    new $P102, 'Integer'
    set $P102, $I101
    goto if_2113_end
  if_2113:
.annotate 'line', 694
    set $P109, param_2110
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_get_attr_str $S2116, $P110, $P111, "$!target", -1
    set $P112, param_2110
    nqp_decontainerize $P113, $P112
    find_lex $P114, "$?CLASS"
    repr_get_attr_int $I2117, $P113, $P114, "$!pos", -1
    is_cclass $I102, .CCLASS_CONTROL, $S2116, $I2117
    new $P102, 'Integer'
    set $P102, $I102
  if_2113_end:
    unless $P102, if_2112_end
.annotate 'line', 692
    set $P115, $P2111
    unless_null $P115, vivify_1017
    new $P115, "Undef"
  vivify_1017:
    set $P116, param_2110
    nqp_decontainerize $P117, $P116
    find_lex $P118, "$?CLASS"
    repr_get_attr_int $I2118, $P117, $P118, "$!pos", -1
    new $P119, 'Integer'
    set $P119, $I2118
    add $P120, $P119, 1
    $P115."!cursor_pass"($P120, "cntrl")
  if_2112_end:
.annotate 'line', 690
    set $P102, $P2111
    unless_null $P102, vivify_1018
    new $P102, "Undef"
  vivify_1018:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "punct" :anon :subid("66_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_2120
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 698
    .lex "self", param_2120
.annotate 'line', 699
    new $P101, "Undef"
    set $P2121, $P101
    .lex "$cur", $P2121
    set $P102, param_2120
    nqp_decontainerize $P103, $P102
    $P104 = $P103."!cursor_start"()
    set $P2121, $P104
.annotate 'line', 701
    set $P103, param_2120
    nqp_decontainerize $P104, $P103
    find_lex $P105, "$?CLASS"
    repr_get_attr_int $I2124, $P104, $P105, "$!pos", -1
    set $N100, $I2124
    set $P106, param_2120
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_str $S2125, $P107, $P108, "$!target", -1
    length $I100, $S2125
    set $N101, $I100
    islt $I101, $N100, $N101
    if $I101, if_2123
    new $P102, 'Integer'
    set $P102, $I101
    goto if_2123_end
  if_2123:
.annotate 'line', 702
    set $P109, param_2120
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_get_attr_str $S2126, $P110, $P111, "$!target", -1
    set $P112, param_2120
    nqp_decontainerize $P113, $P112
    find_lex $P114, "$?CLASS"
    repr_get_attr_int $I2127, $P113, $P114, "$!pos", -1
    is_cclass $I102, .CCLASS_PUNCTUATION, $S2126, $I2127
    new $P102, 'Integer'
    set $P102, $I102
  if_2123_end:
    unless $P102, if_2122_end
.annotate 'line', 700
    set $P115, $P2121
    unless_null $P115, vivify_1019
    new $P115, "Undef"
  vivify_1019:
    set $P116, param_2120
    nqp_decontainerize $P117, $P116
    find_lex $P118, "$?CLASS"
    repr_get_attr_int $I2128, $P117, $P118, "$!pos", -1
    new $P119, 'Integer'
    set $P119, $I2128
    add $P120, $P119, 1
    $P115."!cursor_pass"($P120, "punct")
  if_2122_end:
.annotate 'line', 698
    set $P102, $P2121
    unless_null $P102, vivify_1020
    new $P102, "Undef"
  vivify_1020:
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQPCursorRole"]
.sub "FAILGOAL" :anon :subid("67_1337965216.259") :outer("68_1337965216.259")
    .param pmc param_2130
    .param pmc param_2131
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 706
    .lex "self", param_2130
    .lex "$goal", param_2131
.annotate 'line', 707
    new $P101, "Undef"
    set $P2132, $P101
    .lex "$sub", $P2132

            $P2133 = getinterp
            $P2133 = $P2133['sub';1]
        
    set $P2132, $P2133
.annotate 'line', 711
    new $P102, "String"
    assign $P102, "Unable to parse "
    set $P103, $P2132
    unless_null $P103, vivify_1021
    new $P103, "Undef"
  vivify_1021:
    set $S100, $P103
    concat $P104, $P102, $S100
    new $P105, 'String'
    set $P105, ", couldn't find final "
    set $P106, param_2131
    unless_null $P106, vivify_1022
    new $P106, "Undef"
  vivify_1022:
    concat $P107, $P105, $P106
    concat $P108, $P104, $P107
    die $P108
.annotate 'line', 706
    .return ()
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "_block2135"  :subid("404_1337965216.259") :outer("391_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 716
    .const 'Sub' $P2176 = "80_1337965216.259" 
    capture_lex $P2176
    .const 'Sub' $P2174 = "79_1337965216.259" 
    capture_lex $P2174
    .const 'Sub' $P2171 = "78_1337965216.259" 
    capture_lex $P2171
    .const 'Sub' $P2164 = "77_1337965216.259" 
    capture_lex $P2164
    .const 'Sub' $P2160 = "76_1337965216.259" 
    capture_lex $P2160
    .const 'Sub' $P2158 = "75_1337965216.259" 
    capture_lex $P2158
    .const 'Sub' $P2155 = "74_1337965216.259" 
    capture_lex $P2155
    .const 'Sub' $P2149 = "73_1337965216.259" 
    capture_lex $P2149
    .const 'Sub' $P2147 = "72_1337965216.259" 
    capture_lex $P2147
    .const 'Sub' $P2144 = "71_1337965216.259" 
    capture_lex $P2144
    .const 'Sub' $P2142 = "70_1337965216.259" 
    capture_lex $P2142
    .const 'Sub' $P2139 = "69_1337965216.259" 
    capture_lex $P2139
    .lex "$?PACKAGE", $P2137
    .lex "$?CLASS", $P2138
.annotate 'line', 736
    .const 'Sub' $P2176 = "80_1337965216.259" 
    newclosure $P2199, $P2176
.annotate 'line', 716
    .return ($P2199)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "from" :anon :subid("69_1337965216.259") :outer("404_1337965216.259")
    .param pmc param_2140
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 723
    .lex "self", param_2140
    set $P100, param_2140
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 62
    repr_get_attr_int $I2141, $P101, $P102, "$!from", 3
    .return ($I2141)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "orig" :anon :subid("70_1337965216.259") :outer("404_1337965216.259")
    .param pmc param_2143
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 724
    .lex "self", param_2143
    set $P100, param_2143
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 62
    repr_get_attr_obj $P103, $P101, $P102, "$!orig", 2
    unless_null $P103, vivify_1023
    new $P103, "Undef"
  vivify_1023:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "to" :anon :subid("71_1337965216.259") :outer("404_1337965216.259")
    .param pmc param_2145
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 725
    .lex "self", param_2145
    set $P100, param_2145
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 62
    repr_get_attr_int $I2146, $P101, $P102, "$!to", 4
    .return ($I2146)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "CURSOR" :anon :subid("72_1337965216.259") :outer("404_1337965216.259")
    .param pmc param_2148
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 726
    .lex "self", param_2148
    set $P100, param_2148
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 62
    repr_get_attr_obj $P103, $P101, $P102, "$!cursor", 6
    unless_null $P103, vivify_1024
    new $P103, "Undef"
  vivify_1024:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "Str" :anon :subid("73_1337965216.259") :outer("404_1337965216.259")
    .param pmc param_2150
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 727
    .lex "self", param_2150
    set $P100, param_2150
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 62
    repr_get_attr_obj $P103, $P101, $P102, "$!orig", 2
    unless_null $P103, vivify_1025
    new $P103, "Undef"
  vivify_1025:
    set $S100, $P103
    set $P104, param_2150
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 62
    repr_get_attr_int $I2151, $P105, $P106, "$!from", 3
    set $P107, param_2150
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 62
    repr_get_attr_int $I2152, $P108, $P109, "$!to", 4
    new $P110, 'Integer'
    set $P110, $I2152
    set $P111, param_2150
    nqp_decontainerize $P112, $P111
    nqp_get_sc_object $P113, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 62
    repr_get_attr_int $I2153, $P112, $P113, "$!from", 3
    sub $P114, $P110, $I2153
    set $I100, $P114
    substr $S101, $S100, $I2151, $I100
    .return ($S101)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "_block2154"  :anon :subid("74_1337965216.259") :outer("404_1337965216.259")
    .param pmc param_2156
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 728
    .lex "self", param_2156
    set $P100, param_2156
    nqp_decontainerize $P101, $P100
    $P102 = $P101."Str"()
    set $N100, $P102
    .return ($N100)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "_block2157"  :anon :subid("75_1337965216.259") :outer("404_1337965216.259")
    .param pmc param_2159
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 729
    .lex "self", param_2159
    set $P100, param_2159
    nqp_decontainerize $P101, $P100
    $P102 = $P101."Str"()
    set $N100, $P102
    .return ($N100)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "Bool" :anon :subid("76_1337965216.259") :outer("404_1337965216.259")
    .param pmc param_2161
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 730
    .lex "self", param_2161
    set $P100, param_2161
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 62
    repr_get_attr_int $I2162, $P101, $P102, "$!to", 4
    set $N100, $I2162
    set $P103, param_2161
    nqp_decontainerize $P104, $P103
    nqp_get_sc_object $P105, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 62
    repr_get_attr_int $I2163, $P104, $P105, "$!from", 3
    set $N101, $I2163
    isge $I100, $N100, $N101
    .return ($I100)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "chars" :anon :subid("77_1337965216.259") :outer("404_1337965216.259")
    .param pmc param_2165
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 731
    .lex "self", param_2165
    set $P101, param_2165
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 62
    repr_get_attr_int $I2167, $P102, $P103, "$!to", 4
    set $N100, $I2167
    set $P104, param_2165
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 62
    repr_get_attr_int $I2168, $P105, $P106, "$!from", 3
    set $N101, $I2168
    isge $I100, $N100, $N101
    if $I100, if_2166
    new $P115, "Float"
    assign $P115, 0
    set $P100, $P115
    goto if_2166_end
  if_2166:
    set $P107, param_2165
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 62
    repr_get_attr_int $I2169, $P108, $P109, "$!to", 4
    new $P110, 'Integer'
    set $P110, $I2169
    set $P111, param_2165
    nqp_decontainerize $P112, $P111
    nqp_get_sc_object $P113, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 62
    repr_get_attr_int $I2170, $P112, $P113, "$!from", 3
    sub $P114, $P110, $I2170
    set $P100, $P114
  if_2166_end:
    .return ($P100)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "!make" :anon :subid("78_1337965216.259") :outer("404_1337965216.259")
    .param pmc param_2172
    .param pmc param_2173
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 733
    .lex "self", param_2172
    .lex "$ast", param_2173
    set $P100, param_2173
    unless_null $P100, vivify_1026
    new $P100, "Undef"
  vivify_1026:
    set $P101, param_2172
    nqp_decontainerize $P102, $P101
    nqp_get_sc_object $P103, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 62
    repr_bind_attr_obj $P102, $P103, "$!ast", 5, $P100
    .return ($P100)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "ast" :anon :subid("79_1337965216.259") :outer("404_1337965216.259")
    .param pmc param_2175
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 734
    .lex "self", param_2175
    set $P100, param_2175
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 62
    repr_get_attr_obj $P103, $P101, $P102, "$!ast", 5
    unless_null $P103, vivify_1027
    new $P103, "Undef"
  vivify_1027:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.include "except_types.pasm"
.sub "!dump_str" :anon :subid("80_1337965216.259") :outer("404_1337965216.259")
    .param pmc param_2177
    .param pmc param_2178
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 736
    .const 'Sub' $P2196 = "408_1337965216.259" 
    capture_lex $P2196
    .const 'Sub' $P2180 = "405_1337965216.259" 
    capture_lex $P2180
    .lex "self", param_2177
    .lex "$key", param_2178
.annotate 'line', 737
    .const 'Sub' $P2180 = "405_1337965216.259" 
    newclosure $P2193, $P2180
    set $P2179, $P2193
    .lex "dump_array", $P2179
.annotate 'line', 748
    new $P102, "Undef"
    set $P2194, $P102
    .lex "$str", $P2194
.annotate 'line', 736
    set $P103, $P2179
.annotate 'line', 748
    set $P103, param_2178
    unless_null $P103, vivify_1040
    new $P103, "Undef"
  vivify_1040:
    concat $P104, $P103, ": "
    set $P105, param_2177
    nqp_decontainerize $P106, $P105
    $S100 = $P106."Str"()
    escape $S101, $S100
    concat $P107, $P104, $S101
    concat $P108, $P107, " @ "
    set $P109, param_2177
    nqp_decontainerize $P110, $P109
    $S102 = $P110."from"()
    concat $P111, $P108, $S102
    concat $P112, $P111, "\n"
    set $P2194, $P112
.annotate 'line', 749
    set $P103, $P2194
    unless_null $P103, vivify_1041
    new $P103, "Undef"
  vivify_1041:
    set $P104, param_2178
    unless_null $P104, vivify_1042
    new $P104, "Undef"
  vivify_1042:
    set $P105, param_2177
    nqp_decontainerize $P106, $P105
    $P107 = $P106."list"()
    $S100 = "dump_array"($P104, $P107)
    concat $P108, $P103, $S100
    set $P2194, $P108
.annotate 'line', 750
    set $P104, param_2177
    nqp_decontainerize $P105, $P104
    $P106 = $P105."hash"()
    defined $I100, $P106
    unless $I100, for_undef_1043
    iter $P103, $P106
    new $P108, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P108, loop2198_handler
    push_eh $P108
  loop2198_test:
    unless $P103, loop2198_done
    shift $P107, $P103
  loop2198_redo:
    .const 'Sub' $P2196 = "408_1337965216.259" 
    capture_lex $P2196
    $P2196($P107)
  loop2198_next:
    goto loop2198_test
  loop2198_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P109, exception, 'type'
    eq $P109, .CONTROL_LOOP_NEXT, loop2198_next
    eq $P109, .CONTROL_LOOP_REDO, loop2198_redo
  loop2198_done:
    pop_eh 
  for_undef_1043:
.annotate 'line', 736
    set $P103, $P2194
    unless_null $P103, vivify_1048
    new $P103, "Undef"
  vivify_1048:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "dump_array"  :subid("405_1337965216.259") :outer("80_1337965216.259")
    .param pmc param_2181
    .param pmc param_2182
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 737
    .const 'Sub' $P2186 = "406_1337965216.259" 
    capture_lex $P2186
    .lex "$key", param_2181
    .lex "$item", param_2182
.annotate 'line', 738
    new $P100, "Undef"
    set $P2183, $P100
    .lex "$str", $P2183
    new $P101, "String"
    assign $P101, ""
    set $P2183, $P101
.annotate 'line', 739
    find_lex $P101, "NQPCapture"
    set $P102, param_2182
    unless_null $P102, vivify_1028
    new $P102, "Undef"
  vivify_1028:
    $P103 = $P101."ACCEPTS"($P102)
    if $P103, if_2184
.annotate 'line', 742
    .const 'Sub' $P2186 = "406_1337965216.259" 
    capture_lex $P2186
    $P2186()
    goto if_2184_end
  if_2184:
.annotate 'line', 740
    set $P104, $P2183
    unless_null $P104, vivify_1036
    new $P104, "Undef"
  vivify_1036:
    set $P105, param_2182
    unless_null $P105, vivify_1037
    new $P105, "Undef"
  vivify_1037:
    set $P106, param_2181
    unless_null $P106, vivify_1038
    new $P106, "Undef"
  vivify_1038:
    $S100 = $P105."!dump_str"($P106)
    concat $P107, $P104, $S100
    set $P2183, $P107
  if_2184_end:
.annotate 'line', 737
    set $P101, $P2183
    unless_null $P101, vivify_1039
    new $P101, "Undef"
  vivify_1039:
    .return ($P101)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.include "except_types.pasm"
.sub "_block2185"  :anon :subid("406_1337965216.259") :outer("405_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 742
    .const 'Sub' $P2189 = "407_1337965216.259" 
    capture_lex $P2189
.annotate 'line', 743
    new $P104, "Undef"
    set $P2187, $P104
    .lex "$n", $P2187
    new $P105, "Float"
    assign $P105, 0
    set $P2187, $P105
.annotate 'line', 744
    find_lex $P106, "$item"
    unless_null $P106, vivify_1029
    new $P106, "Undef"
  vivify_1029:
    defined $I100, $P106
    unless $I100, for_undef_1030
    iter $P105, $P106
    new $P108, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P108, loop2192_handler
    push_eh $P108
  loop2192_test:
    unless $P105, loop2192_done
    shift $P107, $P105
  loop2192_redo:
    .const 'Sub' $P2189 = "407_1337965216.259" 
    capture_lex $P2189
    $P2189($P107)
  loop2192_next:
    goto loop2192_test
  loop2192_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P109, exception, 'type'
    eq $P109, .CONTROL_LOOP_NEXT, loop2192_next
    eq $P109, .CONTROL_LOOP_REDO, loop2192_redo
  loop2192_done:
    pop_eh 
  for_undef_1030:
.annotate 'line', 742
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "_block2188"  :anon :subid("407_1337965216.259") :outer("406_1337965216.259")
    .param pmc param_2190
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 744
    .lex "$_", param_2190
    find_lex $P108, "$str"
    unless_null $P108, vivify_1031
    new $P108, "Undef"
  vivify_1031:
    find_lex $P109, "$key"
    unless_null $P109, vivify_1032
    new $P109, "Undef"
  vivify_1032:
    new $P110, 'String'
    set $P110, "["
    find_lex $P111, "$n"
    unless_null $P111, vivify_1033
    new $P111, "Undef"
  vivify_1033:
    concat $P112, $P110, $P111
    concat $P113, $P112, "]"
    concat $P114, $P109, $P113
    find_lex $P115, "$_"
    unless_null $P115, vivify_1034
    new $P115, "Undef"
  vivify_1034:
    $S100 = "dump_array"($P114, $P115)
    concat $P116, $P108, $S100
    store_lex "$str", $P116
    find_lex $P108, "$n"
    unless_null $P108, vivify_1035
    new $P108, "Undef"
  vivify_1035:
    clone $P2191, $P108
    inc $P108
    .return ($P2191)
.end


.HLL "nqp"

.namespace ["NQPMatch"]
.sub "_block2195"  :anon :subid("408_1337965216.259") :outer("80_1337965216.259")
    .param pmc param_2197
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 750
    .lex "$_", param_2197
    find_lex $P108, "$str"
    unless_null $P108, vivify_1044
    new $P108, "Undef"
  vivify_1044:
    find_lex $P109, "$key"
    unless_null $P109, vivify_1045
    new $P109, "Undef"
  vivify_1045:
    concat $P110, $P109, "<"
    find_lex $P111, "$_"
    unless_null $P111, vivify_1046
    new $P111, "Undef"
  vivify_1046:
    $S100 = $P111."key"()
    concat $P112, $P110, $S100
    concat $P113, $P112, ">"
    find_lex $P114, "$_"
    unless_null $P114, vivify_1047
    new $P114, "Undef"
  vivify_1047:
    $P115 = $P114."value"()
    $S101 = "dump_array"($P113, $P115)
    concat $P116, $P108, $S101
    store_lex "$str", $P116
    .return ($P116)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "_block2200"  :subid("409_1337965216.259") :outer("391_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 755
    .const 'Sub' $P2280 = "85_1337965216.259" 
    capture_lex $P2280
    .const 'Sub' $P2237 = "84_1337965216.259" 
    capture_lex $P2237
    .const 'Sub' $P2227 = "83_1337965216.259" 
    capture_lex $P2227
    .const 'Sub' $P2224 = "82_1337965216.259" 
    capture_lex $P2224
    .const 'Sub' $P2204 = "81_1337965216.259" 
    capture_lex $P2204
    .lex "$?PACKAGE", $P2202
    .lex "$?CLASS", $P2203
.annotate 'line', 832
    .const 'Sub' $P2280 = "85_1337965216.259" 
    newclosure $P2299, $P2280
.annotate 'line', 755
    .return ($P2299)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "MATCH" :anon :subid("81_1337965216.259") :outer("409_1337965216.259")
    .param pmc param_2205
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 756
    .const 'Sub' $P2210 = "410_1337965216.259" 
    capture_lex $P2210
    .lex "self", param_2205
.annotate 'line', 757
    new $P100, "Undef"
    set $P2206, $P100
    .lex "$match", $P2206
    set $P101, param_2205
    nqp_decontainerize $P102, $P101
    find_lex $P103, "NQPCursor"
    getattribute $P104, $P102, $P103, "$!match"
    set $P2206, $P104
.annotate 'line', 758
    set $P102, $P2206
    unless_null $P102, vivify_1049
    new $P102, "Undef"
  vivify_1049:
    isa $I100, $P102, "Hash"
    unless $I100, unless_2208
    new $P101, 'Integer'
    set $P101, $I100
    goto unless_2208_end
  unless_2208:
    set $P103, $P2206
    unless_null $P103, vivify_1050
    new $P103, "Undef"
  vivify_1050:
    find_lex $P104, "NQPMatch"
    type_check $I101, $P103, $P104
    new $P101, 'Integer'
    set $P101, $I101
  unless_2208_end:
    if $P101, unless_2207_end
    .const 'Sub' $P2210 = "410_1337965216.259" 
    capture_lex $P2210
    $P2210()
  unless_2207_end:
.annotate 'line', 756
    set $P101, $P2206
    unless_null $P101, vivify_1074
    new $P101, "Undef"
  vivify_1074:
    .return ($P101)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.include "except_types.pasm"
.sub "_block2209"  :anon :subid("410_1337965216.259") :outer("81_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 758
    .const 'Sub' $P2217 = "411_1337965216.259" 
    capture_lex $P2217
.annotate 'line', 759
    new $P105, "Undef"
    set $P2211, $P105
    .lex "$list", $P2211
.annotate 'line', 760
    new $P106, "Undef"
    set $P2212, $P106
    .lex "$hash", $P2212
.annotate 'line', 769
    $P2214 = root_new ['parrot';'Hash']
    set $P2213, $P2214
    .lex "%ch", $P2213
.annotate 'line', 759
    new $P107, "ResizablePMCArray"
    set $P2211, $P107
.annotate 'line', 760
    new $P107, "Hash"
    set $P2212, $P107
.annotate 'line', 761
    find_lex $P107, "NQPMatch"
    repr_instance_of $P108, $P107
    store_lex "$match", $P108
.annotate 'line', 762
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    find_lex $P109, "NQPCursor"
    find_lex $P110, "$match"
    unless_null $P110, vivify_1051
    new $P110, "Undef"
  vivify_1051:
    setattribute $P108, $P109, "$!match", $P110
.annotate 'line', 763
    find_lex $P107, "$match"
    unless_null $P107, vivify_1052
    new $P107, "Undef"
  vivify_1052:
    find_lex $P108, "NQPCapture"
    set $P109, $P2211
    unless_null $P109, vivify_1053
    new $P109, "Undef"
  vivify_1053:
    setattribute $P107, $P108, "@!array", $P109
.annotate 'line', 764
    find_lex $P107, "$match"
    unless_null $P107, vivify_1054
    new $P107, "Undef"
  vivify_1054:
    find_lex $P108, "NQPCapture"
    set $P109, $P2212
    unless_null $P109, vivify_1055
    new $P109, "Undef"
  vivify_1055:
    setattribute $P107, $P108, "%!hash", $P109
.annotate 'line', 765
    find_lex $P107, "$match"
    unless_null $P107, vivify_1056
    new $P107, "Undef"
  vivify_1056:
    find_lex $P108, "NQPMatch"
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    setattribute $P107, $P108, "$!cursor", $P110
.annotate 'line', 766
    find_lex $P107, "$match"
    unless_null $P107, vivify_1057
    new $P107, "Undef"
  vivify_1057:
    find_lex $P108, "NQPMatch"
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    find_lex $P111, "NQPCursor"
    getattribute $P112, $P110, $P111, "$!orig"
    setattribute $P107, $P108, "$!orig", $P112
.annotate 'line', 767
    find_lex $P107, "$match"
    unless_null $P107, vivify_1058
    new $P107, "Undef"
  vivify_1058:
    find_lex $P108, "NQPMatch"
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    find_lex $P111, "NQPCursor"
    repr_get_attr_int $I102, $P110, $P111, "$!from"
    repr_bind_attr_int $P107, $P108, "$!from", $I102
.annotate 'line', 768
    find_lex $P107, "$match"
    unless_null $P107, vivify_1059
    new $P107, "Undef"
  vivify_1059:
    find_lex $P108, "NQPMatch"
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    find_lex $P111, "NQPCursor"
    repr_get_attr_int $I102, $P110, $P111, "$!pos"
    repr_bind_attr_int $P107, $P108, "$!to", $I102
.annotate 'line', 769
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    $P109 = $P108."CAPHASH"()
    set $P2213, $P109
.annotate 'line', 770
    set $P2215, $P2213
    unless_null $P2215, vivify_1060
    $P2215 = root_new ['parrot';'Hash']
  vivify_1060:
    defined $I102, $P2215
    unless $I102, for_undef_1061
    iter $P107, $P2215
    new $P111, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P111, loop2223_handler
    push_eh $P111
  loop2223_test:
    unless $P107, loop2223_done
    shift $P108, $P107
  loop2223_redo:
    .const 'Sub' $P2217 = "411_1337965216.259" 
    capture_lex $P2217
    $P2217($P108)
  loop2223_next:
    goto loop2223_test
  loop2223_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P112, exception, 'type'
    eq $P112, .CONTROL_LOOP_NEXT, loop2223_next
    eq $P112, .CONTROL_LOOP_REDO, loop2223_redo
  loop2223_done:
    pop_eh 
  for_undef_1061:
.annotate 'line', 758
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "_block2216"  :anon :subid("411_1337965216.259") :outer("410_1337965216.259")
    .param pmc param_2219
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 771
    new $P109, "Undef"
    set $P2218, $P109
    .lex "$key", $P2218
    .lex "$_", param_2219
    find_lex $P110, "$_"
    unless_null $P110, vivify_1062
    new $P110, "Undef"
  vivify_1062:
    set $S100, $P110
    new $P111, 'String'
    set $P111, $S100
    set $P2218, $P111
.annotate 'line', 772
    set $P111, $P2218
    unless_null $P111, vivify_1063
    new $P111, "Undef"
  vivify_1063:
    set $S100, $P111
    is_cclass $I103, .CCLASS_NUMERIC, $S100, 0
    if $I103, if_2220
.annotate 'line', 774
    set $P117, $P2218
    unless_null $P117, vivify_1064
    new $P117, "Undef"
  vivify_1064:
    set $S101, $P117
    find_lex $P116, "$hash"
    unless_null $P116, vivify_1065
    new $P116, "Undef"
  vivify_1065:
    set $P118, $P2218
    unless_null $P118, vivify_1066
    new $P118, "Undef"
  vivify_1066:
    find_lex $P2222, "%ch"
    unless_null $P2222, vivify_1067
    $P2222 = root_new ['parrot';'Hash']
  vivify_1067:
    set $P119, $P2222[$P118]
    unless_null $P119, vivify_1068
    new $P119, "Undef"
  vivify_1068:
    set $P116[$S101], $P119
    set $P110, $P119
.annotate 'line', 772
    goto if_2220_end
  if_2220:
.annotate 'line', 773
    set $P113, $P2218
    unless_null $P113, vivify_1069
    new $P113, "Undef"
  vivify_1069:
    set $I104, $P113
    find_lex $P112, "$list"
    unless_null $P112, vivify_1070
    new $P112, "Undef"
  vivify_1070:
    set $P114, $P2218
    unless_null $P114, vivify_1071
    new $P114, "Undef"
  vivify_1071:
    find_lex $P2221, "%ch"
    unless_null $P2221, vivify_1072
    $P2221 = root_new ['parrot';'Hash']
  vivify_1072:
    set $P115, $P2221[$P114]
    unless_null $P115, vivify_1073
    new $P115, "Undef"
  vivify_1073:
    set $P112[$I104], $P115
    set $P110, $P115
  if_2220_end:
.annotate 'line', 770
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "Bool" :anon :subid("82_1337965216.259") :outer("409_1337965216.259")
    .param pmc param_2225
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 780
    .lex "self", param_2225
.annotate 'line', 781
    set $P101, param_2225
    nqp_decontainerize $P102, $P101
    find_lex $P103, "$?CLASS"
    unless_null $P103, vivify_1075
    new $P103, "Undef"
  vivify_1075:
    getattribute $P104, $P102, $P103, "$!match"
    isnull $I100, $P104
    new $P105, 'Integer'
    set $P105, $I100
    isfalse $I101, $P105
    if $I101, if_2226
    new $P100, 'Integer'
    set $P100, $I101
    goto if_2226_end
  if_2226:
.annotate 'line', 782
    set $P106, param_2225
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    unless_null $P108, vivify_1076
    new $P108, "Undef"
  vivify_1076:
    getattribute $P109, $P107, $P108, "$!match"
    istrue $I102, $P109
    new $P100, 'Integer'
    set $P100, $I102
  if_2226_end:
.annotate 'line', 780
    .return ($P100)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "parse" :anon :subid("83_1337965216.259") :outer("409_1337965216.259")
    .param pmc param_2228
    .param pmc param_2229
    .param pmc param_2230 :optional :named("rule")
    .param int has_param_2230 :opt_flag
    .param pmc param_2231 :optional :named("actions")
    .param int has_param_2231 :opt_flag
    .param pmc param_2232 :slurpy :named
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 785
    .lex "self", param_2228
    .lex "$target", param_2229
    if has_param_2230, optparam_1077
    new $P100, "String"
    assign $P100, "TOP"
    set param_2230, $P100
  optparam_1077:
    .lex "$rule", param_2230
    if has_param_2231, optparam_1078
    new $P101, "Undef"
    set param_2231, $P101
  optparam_1078:
    .lex "$actions", param_2231
    .lex "%options", param_2232
.annotate 'line', 786
    new $P102, "Undef"
    set $P2233, $P102
    .lex "$*ACTIONS", $P2233
.annotate 'line', 787
    new $P103, "Undef"
    set $P2234, $P103
    .lex "$cur", $P2234
.annotate 'line', 786
    set $P104, param_2231
    unless_null $P104, vivify_1079
    new $P104, "Undef"
  vivify_1079:
    set $P2233, $P104
.annotate 'line', 787
    set $P104, param_2228
    nqp_decontainerize $P105, $P104
    set $P106, param_2229
    unless_null $P106, vivify_1080
    new $P106, "Undef"
  vivify_1080:
    set $P2235, param_2232
    unless_null $P2235, vivify_1081
    $P2235 = root_new ['parrot';'Hash']
  vivify_1081:
    $P107 = $P105."!cursor_init"($P106, $P2235 :flat)
    set $P2234, $P107
.annotate 'line', 788
    set $P105, param_2230
    unless_null $P105, vivify_1082
    new $P105, "Undef"
  vivify_1082:
    is_invokable $I100, $P105
    if $I100, if_2236
.annotate 'line', 790
    set $P110, $P2234
    unless_null $P110, vivify_1083
    new $P110, "Undef"
  vivify_1083:
    set $P111, param_2230
    unless_null $P111, vivify_1084
    new $P111, "Undef"
  vivify_1084:
    set $S100, $P111
    find_method $P112, $P110, $S100
    set $P113, $P2234
    unless_null $P113, vivify_1085
    new $P113, "Undef"
  vivify_1085:
    $P114 = $P112($P113)
    $P115 = $P114."MATCH"()
    set $P104, $P115
.annotate 'line', 788
    goto if_2236_end
  if_2236:
.annotate 'line', 789
    set $P106, param_2230
    unless_null $P106, vivify_1086
    new $P106, "Undef"
  vivify_1086:
    set $P107, $P2234
    unless_null $P107, vivify_1087
    new $P107, "Undef"
  vivify_1087:
    $P108 = $P106($P107)
    $P109 = $P108."MATCH"()
    set $P104, $P109
  if_2236_end:
.annotate 'line', 785
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.include "except_types.pasm"
.sub "!INTERPOLATE" :anon :subid("84_1337965216.259") :outer("409_1337965216.259")
    .param pmc param_2240
    .param pmc param_2241
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 793
    .const 'Sub' $P2271 = "417_1337965216.259" 
    capture_lex $P2271
    .const 'Sub' $P2244 = "412_1337965216.259" 
    capture_lex $P2244
    new $P2239, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2239, control_2238
    push_eh $P2239
    .lex "self", param_2240
    .lex "$var", param_2241
.annotate 'line', 794
    set $P101, param_2241
    unless_null $P101, vivify_1088
    new $P101, "Undef"
  vivify_1088:
    does $I100, $P101, "array"
    if $I100, if_2242
.annotate 'line', 818
    .const 'Sub' $P2271 = "417_1337965216.259" 
    capture_lex $P2271
    $P113 = $P2271()
    set $P100, $P113
.annotate 'line', 794
    goto if_2242_end
  if_2242:
    .const 'Sub' $P2244 = "412_1337965216.259" 
    capture_lex $P2244
    $P107 = $P2244()
    set $P100, $P107
  if_2242_end:
.annotate 'line', 793
    .return ($P100)
  control_2238:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P101, exception, "payload"
    .return ($P101)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.include "except_types.pasm"
.sub "_block2270"  :anon :subid("417_1337965216.259") :outer("84_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 820
    new $P108, "Undef"
    set $P2272, $P108
    .lex "$cur", $P2272
.annotate 'line', 821
    new $P109, "Undef"
    set $P2273, $P109
    .lex "$pos", $P2273
.annotate 'line', 822
    new $P110, "Undef"
    set $P2274, $P110
    .lex "$tgt", $P2274
.annotate 'line', 823
    new $P111, "Undef"
    set $P2275, $P111
    .lex "$len", $P2275
.annotate 'line', 824
    new $P112, "Undef"
    set $P2276, $P112
    .lex "$adv", $P2276
.annotate 'line', 819
    find_lex $P113, "$var"
    unless_null $P113, vivify_1089
    new $P113, "Undef"
  vivify_1089:
    is_invokable $I101, $P113
    unless $I101, if_2277_end
    new $P114, "Exception"
    set $P114['type'], .CONTROL_RETURN
    find_lex $P115, "$var"
    unless_null $P115, vivify_1090
    new $P115, "Undef"
  vivify_1090:
    find_lex $P116, "self"
    nqp_decontainerize $P117, $P116
    $P118 = $P115($P117)
    setattribute $P114, 'payload', $P118
    throw $P114
  if_2277_end:
.annotate 'line', 820
    find_lex $P113, "self"
    nqp_decontainerize $P114, $P113
    $P115 = $P114."!cursor_start"()
    set $P2272, $P115
.annotate 'line', 821
    set $P113, $P2272
    unless_null $P113, vivify_1091
    new $P113, "Undef"
  vivify_1091:
    find_lex $P114, "$?CLASS"
    unless_null $P114, vivify_1092
    new $P114, "Undef"
  vivify_1092:
    repr_get_attr_int $I101, $P113, $P114, "$!from"
    new $P115, 'Integer'
    set $P115, $I101
    set $P2273, $P115
.annotate 'line', 822
    set $P113, $P2272
    unless_null $P113, vivify_1093
    new $P113, "Undef"
  vivify_1093:
    $P114 = $P113."target"()
    set $P2274, $P114
.annotate 'line', 823
    find_lex $P113, "$var"
    unless_null $P113, vivify_1094
    new $P113, "Undef"
  vivify_1094:
    set $S100, $P113
    length $I101, $S100
    new $P114, 'Integer'
    set $P114, $I101
    set $P2275, $P114
.annotate 'line', 824
    set $P113, $P2273
    unless_null $P113, vivify_1095
    new $P113, "Undef"
  vivify_1095:
    set $P114, $P2275
    unless_null $P114, vivify_1096
    new $P114, "Undef"
  vivify_1096:
    add $P115, $P113, $P114
    set $P2276, $P115
.annotate 'line', 825
    set $P114, $P2276
    unless_null $P114, vivify_1097
    new $P114, "Undef"
  vivify_1097:
    set $N100, $P114
    set $P115, $P2274
    unless_null $P115, vivify_1098
    new $P115, "Undef"
  vivify_1098:
    set $S100, $P115
    length $I101, $S100
    set $N101, $I101
    isgt $I102, $N100, $N101
    unless $I102, unless_2279
    new $P113, 'Integer'
    set $P113, $I102
    goto unless_2279_end
  unless_2279:
.annotate 'line', 826
    set $P116, $P2274
    unless_null $P116, vivify_1099
    new $P116, "Undef"
  vivify_1099:
    set $S101, $P116
    set $P117, $P2273
    unless_null $P117, vivify_1100
    new $P117, "Undef"
  vivify_1100:
    set $I103, $P117
    set $P118, $P2275
    unless_null $P118, vivify_1101
    new $P118, "Undef"
  vivify_1101:
    set $I104, $P118
    substr $S102, $S101, $I103, $I104
    find_lex $P119, "$var"
    unless_null $P119, vivify_1102
    new $P119, "Undef"
  vivify_1102:
    set $S103, $P119
    isne $I105, $S102, $S103
    new $P113, 'Integer'
    set $P113, $I105
  unless_2279_end:
    unless $P113, if_2278_end
.annotate 'line', 825
    new $P120, "Exception"
    set $P120['type'], .CONTROL_RETURN
    set $P121, $P2272
    unless_null $P121, vivify_1103
    new $P121, "Undef"
  vivify_1103:
    setattribute $P120, 'payload', $P121
    throw $P120
  if_2278_end:
.annotate 'line', 827
    set $P113, $P2272
    unless_null $P113, vivify_1104
    new $P113, "Undef"
  vivify_1104:
    set $P114, $P2276
    unless_null $P114, vivify_1105
    new $P114, "Undef"
  vivify_1105:
    $P113."!cursor_pass"($P114, "")
.annotate 'line', 828
    new $P113, "Exception"
    set $P113['type'], .CONTROL_RETURN
    set $P114, $P2272
    unless_null $P114, vivify_1106
    new $P114, "Undef"
  vivify_1106:
    setattribute $P113, 'payload', $P114
    throw $P113
.annotate 'line', 818
    .return ()
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.include "except_types.pasm"
.sub "_block2243"  :anon :subid("412_1337965216.259") :outer("84_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 794
    .const 'Sub' $P2251 = "413_1337965216.259" 
    capture_lex $P2251
.annotate 'line', 795
    new $P102, "Undef"
    set $P2245, $P102
    .lex "$maxlen", $P2245
.annotate 'line', 796
    new $P103, "Undef"
    set $P2246, $P103
    .lex "$cur", $P2246
.annotate 'line', 797
    new $P104, "Undef"
    set $P2247, $P104
    .lex "$pos", $P2247
.annotate 'line', 798
    new $P105, "Undef"
    set $P2248, $P105
    .lex "$tgt", $P2248
.annotate 'line', 799
    new $P106, "Undef"
    set $P2249, $P106
    .lex "$eos", $P2249
.annotate 'line', 795
    new $P107, "Float"
    assign $P107, -1
    set $P2245, $P107
.annotate 'line', 796
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    $P109 = $P108."!cursor_start"()
    set $P2246, $P109
.annotate 'line', 797
    set $P107, $P2246
    unless_null $P107, vivify_1107
    new $P107, "Undef"
  vivify_1107:
    find_lex $P108, "$?CLASS"
    unless_null $P108, vivify_1108
    new $P108, "Undef"
  vivify_1108:
    repr_get_attr_int $I101, $P107, $P108, "$!from"
    new $P109, 'Integer'
    set $P109, $I101
    set $P2247, $P109
.annotate 'line', 798
    set $P107, $P2246
    unless_null $P107, vivify_1109
    new $P107, "Undef"
  vivify_1109:
    $P108 = $P107."target"()
    set $P2248, $P108
.annotate 'line', 799
    set $P107, $P2248
    unless_null $P107, vivify_1110
    new $P107, "Undef"
  vivify_1110:
    set $S100, $P107
    length $I101, $S100
    new $P108, 'Integer'
    set $P108, $I101
    set $P2249, $P108
.annotate 'line', 800
    find_lex $P108, "$var"
    unless_null $P108, vivify_1111
    new $P108, "Undef"
  vivify_1111:
    defined $I101, $P108
    unless $I101, for_undef_1112
    iter $P107, $P108
    new $P111, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P111, loop2268_handler
    push_eh $P111
  loop2268_test:
    unless $P107, loop2268_done
    shift $P109, $P107
  loop2268_redo:
    .const 'Sub' $P2251 = "413_1337965216.259" 
    capture_lex $P2251
    $P2251($P109)
  loop2268_next:
    goto loop2268_test
  loop2268_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P112, exception, 'type'
    eq $P112, .CONTROL_LOOP_NEXT, loop2268_next
    eq $P112, .CONTROL_LOOP_REDO, loop2268_redo
  loop2268_done:
    pop_eh 
  for_undef_1112:
.annotate 'line', 815
    set $P107, $P2245
    unless_null $P107, vivify_1134
    new $P107, "Undef"
  vivify_1134:
    set $N100, $P107
    set $N101, 0
    isge $I101, $N100, $N101
    unless $I101, if_2269_end
    set $P108, $P2246
    unless_null $P108, vivify_1135
    new $P108, "Undef"
  vivify_1135:
    set $P109, $P2247
    unless_null $P109, vivify_1136
    new $P109, "Undef"
  vivify_1136:
    set $P110, $P2245
    unless_null $P110, vivify_1137
    new $P110, "Undef"
  vivify_1137:
    add $P111, $P109, $P110
    $P108."!cursor_pass"($P111, "")
  if_2269_end:
.annotate 'line', 816
    new $P107, "Exception"
    set $P107['type'], .CONTROL_RETURN
    set $P108, $P2246
    unless_null $P108, vivify_1138
    new $P108, "Undef"
  vivify_1138:
    setattribute $P107, 'payload', $P108
    throw $P107
.annotate 'line', 794
    .return ()
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "_block2250"  :anon :subid("413_1337965216.259") :outer("412_1337965216.259")
    .param pmc param_2252
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 800
    .const 'Sub' $P2263 = "416_1337965216.259" 
    capture_lex $P2263
    .const 'Sub' $P2255 = "414_1337965216.259" 
    capture_lex $P2255
    .lex "$_", param_2252
.annotate 'line', 801
    find_lex $P111, "$_"
    unless_null $P111, vivify_1113
    new $P111, "Undef"
  vivify_1113:
    is_invokable $I102, $P111
    if $I102, if_2253
.annotate 'line', 809
    .const 'Sub' $P2263 = "416_1337965216.259" 
    capture_lex $P2263
    $P117 = $P2263()
    set $P110, $P117
.annotate 'line', 801
    goto if_2253_end
  if_2253:
    .const 'Sub' $P2255 = "414_1337965216.259" 
    capture_lex $P2255
    $P114 = $P2255()
    set $P110, $P114
  if_2253_end:
.annotate 'line', 800
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "_block2262"  :anon :subid("416_1337965216.259") :outer("413_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 810
    new $P115, "Undef"
    set $P2264, $P115
    .lex "$len", $P2264
    find_lex $P116, "$_"
    unless_null $P116, vivify_1114
    new $P116, "Undef"
  vivify_1114:
    set $S100, $P116
    length $I103, $S100
    new $P117, 'Integer'
    set $P117, $I103
    set $P2264, $P117
.annotate 'line', 811
    set $P119, $P2264
    unless_null $P119, vivify_1115
    new $P119, "Undef"
  vivify_1115:
    set $N100, $P119
    find_lex $P120, "$maxlen"
    unless_null $P120, vivify_1116
    new $P120, "Undef"
  vivify_1116:
    set $N101, $P120
    isgt $I103, $N100, $N101
    if $I103, if_2267
    new $P118, 'Integer'
    set $P118, $I103
    goto if_2267_end
  if_2267:
    find_lex $P121, "$pos"
    unless_null $P121, vivify_1117
    new $P121, "Undef"
  vivify_1117:
    set $P122, $P2264
    unless_null $P122, vivify_1118
    new $P122, "Undef"
  vivify_1118:
    add $P123, $P121, $P122
    set $N102, $P123
    find_lex $P124, "$eos"
    unless_null $P124, vivify_1119
    new $P124, "Undef"
  vivify_1119:
    set $N103, $P124
    isle $I104, $N102, $N103
    new $P118, 'Integer'
    set $P118, $I104
  if_2267_end:
    if $P118, if_2266
    set $P117, $P118
    goto if_2266_end
  if_2266:
.annotate 'line', 812
    find_lex $P125, "$tgt"
    unless_null $P125, vivify_1120
    new $P125, "Undef"
  vivify_1120:
    set $S100, $P125
    find_lex $P126, "$pos"
    unless_null $P126, vivify_1121
    new $P126, "Undef"
  vivify_1121:
    set $I105, $P126
    set $P127, $P2264
    unless_null $P127, vivify_1122
    new $P127, "Undef"
  vivify_1122:
    set $I106, $P127
    substr $S101, $S100, $I105, $I106
    find_lex $P128, "$_"
    unless_null $P128, vivify_1123
    new $P128, "Undef"
  vivify_1123:
    set $S102, $P128
    iseq $I107, $S101, $S102
    new $P117, 'Integer'
    set $P117, $I107
  if_2266_end:
    if $P117, if_2265
    set $P116, $P117
    goto if_2265_end
  if_2265:
.annotate 'line', 811
    set $P129, $P2264
    unless_null $P129, vivify_1124
    new $P129, "Undef"
  vivify_1124:
    store_lex "$maxlen", $P129
    set $P116, $P129
  if_2265_end:
.annotate 'line', 809
    .return ($P116)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "_block2254"  :anon :subid("414_1337965216.259") :outer("413_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 801
    .const 'Sub' $P2259 = "415_1337965216.259" 
    capture_lex $P2259
.annotate 'line', 802
    new $P112, "Undef"
    set $P2256, $P112
    .lex "$res", $P2256
    find_lex $P113, "$_"
    unless_null $P113, vivify_1125
    new $P113, "Undef"
  vivify_1125:
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
    $P116 = $P113($P115)
    set $P2256, $P116
.annotate 'line', 803
    set $P114, $P2256
    unless_null $P114, vivify_1126
    new $P114, "Undef"
  vivify_1126:
    if $P114, if_2257
    set $P113, $P114
    goto if_2257_end
  if_2257:
    .const 'Sub' $P2259 = "415_1337965216.259" 
    capture_lex $P2259
    $P117 = $P2259()
    set $P113, $P117
  if_2257_end:
.annotate 'line', 801
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "_block2258"  :anon :subid("415_1337965216.259") :outer("414_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 804
    new $P115, "Undef"
    set $P2260, $P115
    .lex "$adv", $P2260
    find_lex $P116, "$res"
    unless_null $P116, vivify_1127
    new $P116, "Undef"
  vivify_1127:
    find_lex $P117, "$?CLASS"
    unless_null $P117, vivify_1128
    new $P117, "Undef"
  vivify_1128:
    repr_get_attr_int $I103, $P116, $P117, "$!pos"
    new $P118, 'Integer'
    set $P118, $I103
    set $P2260, $P118
.annotate 'line', 805
    set $P116, $P2260
    unless_null $P116, vivify_1129
    new $P116, "Undef"
  vivify_1129:
    find_lex $P117, "$pos"
    unless_null $P117, vivify_1130
    new $P117, "Undef"
  vivify_1130:
    sub $P118, $P116, $P117
    set $P2260, $P118
.annotate 'line', 806
    set $P117, $P2260
    unless_null $P117, vivify_1131
    new $P117, "Undef"
  vivify_1131:
    set $N100, $P117
    find_lex $P118, "$maxlen"
    unless_null $P118, vivify_1132
    new $P118, "Undef"
  vivify_1132:
    set $N101, $P118
    isgt $I103, $N100, $N101
    if $I103, if_2261
    new $P116, 'Integer'
    set $P116, $I103
    goto if_2261_end
  if_2261:
    set $P119, $P2260
    unless_null $P119, vivify_1133
    new $P119, "Undef"
  vivify_1133:
    store_lex "$maxlen", $P119
    set $P116, $P119
  if_2261_end:
.annotate 'line', 803
    .return ($P116)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.include "except_types.pasm"
.sub "!INTERPOLATE_REGEX" :anon :subid("85_1337965216.259") :outer("409_1337965216.259")
    .param pmc param_2283
    .param pmc param_2284
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 832
    .const 'Sub' $P2287 = "418_1337965216.259" 
    capture_lex $P2287
    new $P2282, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2282, control_2281
    push_eh $P2282
    .lex "self", param_2283
    .lex "$var", param_2284
.annotate 'line', 833
    set $P100, param_2284
    unless_null $P100, vivify_1139
    new $P100, "Undef"
  vivify_1139:
    is_invokable $I100, $P100
    if $I100, unless_2285_end
    .const 'Sub' $P2287 = "418_1337965216.259" 
    capture_lex $P2287
    $P2287()
  unless_2285_end:
.annotate 'line', 848
    new $P100, "Exception"
    set $P100['type'], .CONTROL_RETURN
    set $P101, param_2283
    nqp_decontainerize $P102, $P101
    set $P103, param_2284
    unless_null $P103, vivify_1152
    new $P103, "Undef"
  vivify_1152:
    $P104 = $P102."!INTERPOLATE"($P103)
    setattribute $P100, 'payload', $P104
    throw $P100
.annotate 'line', 832
    .return ()
  control_2281:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P100, exception, "payload"
    .return ($P100)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "_block2286"  :anon :subid("418_1337965216.259") :outer("85_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 833
    .const 'Sub' $P2291 = "419_1337965216.259" 
    capture_lex $P2291
.annotate 'line', 834
    new $P101, "Undef"
    set $P2288, $P101
    .lex "$rxcompiler", $P2288
    compreg $P102, "QRegex::P6Regex"
    set $P2288, $P102
.annotate 'line', 835
    find_lex $P103, "$var"
    unless_null $P103, vivify_1140
    new $P103, "Undef"
  vivify_1140:
    does $I101, $P103, "array"
    if $I101, if_2289
.annotate 'line', 845
    set $P107, $P2288
    unless_null $P107, vivify_1141
    new $P107, "Undef"
  vivify_1141:
    find_lex $P108, "$var"
    unless_null $P108, vivify_1142
    new $P108, "Undef"
  vivify_1142:
    $P109 = $P107."compile"($P108)
    store_lex "$var", $P109
.annotate 'line', 844
    set $P102, $P109
.annotate 'line', 835
    goto if_2289_end
  if_2289:
    .const 'Sub' $P2291 = "419_1337965216.259" 
    capture_lex $P2291
    $P106 = $P2291()
    set $P102, $P106
  if_2289_end:
.annotate 'line', 833
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.include "except_types.pasm"
.sub "_block2290"  :anon :subid("419_1337965216.259") :outer("418_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 835
    .const 'Sub' $P2294 = "420_1337965216.259" 
    capture_lex $P2294
.annotate 'line', 836
    new $P104, "Undef"
    set $P2292, $P104
    .lex "$res", $P2292
    new $P105, "ResizablePMCArray"
    set $P2292, $P105
.annotate 'line', 837
    find_lex $P106, "$var"
    unless_null $P106, vivify_1143
    new $P106, "Undef"
  vivify_1143:
    defined $I102, $P106
    unless $I102, for_undef_1144
    iter $P105, $P106
    new $P110, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P110, loop2298_handler
    push_eh $P110
  loop2298_test:
    unless $P105, loop2298_done
    shift $P107, $P105
  loop2298_redo:
    .const 'Sub' $P2294 = "420_1337965216.259" 
    capture_lex $P2294
    $P2294($P107)
  loop2298_next:
    goto loop2298_test
  loop2298_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P111, exception, 'type'
    eq $P111, .CONTROL_LOOP_NEXT, loop2298_next
    eq $P111, .CONTROL_LOOP_REDO, loop2298_redo
  loop2298_done:
    pop_eh 
  for_undef_1144:
.annotate 'line', 842
    set $P105, $P2292
    unless_null $P105, vivify_1151
    new $P105, "Undef"
  vivify_1151:
    store_lex "$var", $P105
.annotate 'line', 835
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQPCursor"]
.sub "_block2293"  :anon :subid("420_1337965216.259") :outer("419_1337965216.259")
    .param pmc param_2296
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 838
    new $P108, "Undef"
    set $P2295, $P108
    .lex "$elem", $P2295
    .lex "$_", param_2296
    find_lex $P109, "$_"
    unless_null $P109, vivify_1145
    new $P109, "Undef"
  vivify_1145:
    set $P2295, $P109
.annotate 'line', 839
    set $P109, $P2295
    unless_null $P109, vivify_1146
    new $P109, "Undef"
  vivify_1146:
    is_invokable $I103, $P109
    if $I103, unless_2297_end
    find_lex $P110, "$rxcompiler"
    unless_null $P110, vivify_1147
    new $P110, "Undef"
  vivify_1147:
    set $P111, $P2295
    unless_null $P111, vivify_1148
    new $P111, "Undef"
  vivify_1148:
    $P112 = $P110."compile"($P111)
    set $P2295, $P112
  unless_2297_end:
.annotate 'line', 840
    find_lex $P109, "$res"
    unless_null $P109, vivify_1149
    new $P109, "Undef"
  vivify_1149:
    set $P110, $P2295
    unless_null $P110, vivify_1150
    new $P110, "Undef"
  vivify_1150:
    push $P109, $P110
.annotate 'line', 837
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQPRegexMethod"]
.sub "_block2300"  :subid("421_1337965216.259") :outer("391_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 852
    .const 'Sub' $P2310 = "389_1337965216.259" 
    capture_lex $P2310
    .const 'Sub' $P2307 = "388_1337965216.259" 
    capture_lex $P2307
    .const 'Sub' $P2304 = "387_1337965216.259" 
    capture_lex $P2304
    .lex "$?PACKAGE", $P2302
    .lex "$?CLASS", $P2303
.annotate 'line', 860
    .const 'Sub' $P2310 = "389_1337965216.259" 
    newclosure $P2312, $P2310
.annotate 'line', 852
    .return ($P2312)
.end


.HLL "nqp"

.namespace ["NQPRegexMethod"]
.sub "new" :anon :subid("387_1337965216.259") :outer("421_1337965216.259")
    .param pmc param_2305
    .param pmc param_2306
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 854
    .lex "self", param_2305
    .lex "$code", param_2306
.annotate 'line', 855
    set $P100, param_2305
    nqp_decontainerize $P101, $P100
    set $P102, param_2306
    unless_null $P102, vivify_1153
    new $P102, "Undef"
  vivify_1153:
    $P103 = $P101."bless"($P102 :named("code"))
.annotate 'line', 854
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQPRegexMethod"]
.sub "ACCEPTS" :anon :subid("388_1337965216.259") :outer("421_1337965216.259")
    .param pmc param_2308
    .param pmc param_2309
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 857
    .lex "self", param_2308
    .lex "$target", param_2309
.annotate 'line', 858
    find_lex $P100, "NQPCursor"
    set $P101, param_2309
    unless_null $P101, vivify_1154
    new $P101, "Undef"
  vivify_1154:
    set $P102, param_2308
    nqp_decontainerize $P103, $P102
    $P104 = $P100."parse"($P101, $P103 :named("rule"))
.annotate 'line', 857
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQPRegexMethod"]
.sub "Str" :anon :subid("389_1337965216.259") :outer("421_1337965216.259")
    .param pmc param_2311
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 860
    .lex "self", param_2311
.annotate 'line', 861
    set $P100, param_2311
    nqp_decontainerize $P101, $P100
    nqp_get_sc_object $P102, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337965216.224", 82
    repr_get_attr_obj $P103, $P101, $P102, "$!code", 0
    unless_null $P103, vivify_1155
    new $P103, "Undef"
  vivify_1155:
    set $S100, $P103
.annotate 'line', 860
    .return ($S100)
.end


.HLL "nqp"

.namespace ["NQPRegex"]
.sub "_block2313"  :subid("422_1337965216.259") :outer("391_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 865
    .const 'Sub' $P2317 = "390_1337965216.259" 
    capture_lex $P2317
    .lex "$?PACKAGE", $P2315
    .lex "$?CLASS", $P2316
.annotate 'line', 866
    .const 'Sub' $P2317 = "390_1337965216.259" 
    newclosure $P2320, $P2317
.annotate 'line', 865
    .return ($P2320)
.end


.HLL "nqp"

.namespace ["NQPRegex"]
.sub "ACCEPTS" :anon :subid("390_1337965216.259") :outer("422_1337965216.259")
    .param pmc param_2318
    .param pmc param_2319
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 866
    .lex "self", param_2318
    .lex "$target", param_2319
.annotate 'line', 867
    find_lex $P100, "NQPCursor"
    set $P101, param_2319
    unless_null $P101, vivify_1156
    new $P101, "Undef"
  vivify_1156:
    set $P102, param_2318
    nqp_decontainerize $P103, $P102
    $P104 = $P100."parse"($P101, $P103 :named("rule"), 0 :named("c"))
.annotate 'line', 866
    .return ($P104)
.end


.HLL "nqp"

.namespace []
.sub "_block2321"  :anon :subid("423_1337965216.259") :outer("391_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 871
    .const 'Sub' $P2327 = "424_1337965216.259" 
    capture_lex $P2327
    .lex "DEFAULT", $P2323
    .lex "$?PACKAGE", $P2324
    .lex "$?CLASS", $P2325
.annotate 'line', 872
    .const 'Sub' $P2327 = "424_1337965216.259" 
    capture_lex $P2327
    $P101 = $P2327()
.annotate 'line', 871
    .return ($P101)
.end


.HLL "nqp"

.namespace ["DEFAULT"]
.sub "_block2326"  :subid("424_1337965216.259") :outer("423_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 872
    .lex "$?PACKAGE", $P2328
    .lex "$?CLASS", $P2329
.annotate 'line', 873
    find_lex $P100, "NQPCursorRole"
    set $P101, $P2328
    unless_null $P101, vivify_1157
    new $P101, "Undef"
    set $P2328, $P101
  vivify_1157:
    get_who $P102, $P101
    set $P102["NQPCursorRole"], $P100
.annotate 'line', 872
    .return ($P100)
.end


.HLL "nqp"

.namespace []
.sub "_block2331" :load :anon :subid("425_1337965216.259")
.annotate 'file', "src\\stage2\\QRegex.nqp"
.annotate 'line', 1
    .const '' $P2333 = "391_1337965216.259" 
    $P106 = $P2333()
    .return ($P106)
.end

