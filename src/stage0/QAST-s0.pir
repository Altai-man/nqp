.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'
.include 'libpaths.pasm'
.loadlib "nqp_group"
.loadlib "nqp_ops"
.loadlib "nqp_bigint_ops"
.loadlib "trans_ops"
.loadlib "io_ops"
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_145_1359572548.257") :anon :lex
.annotate 'file', "src\\stage2\\QAST.nqp"
    .param pmc _lex_param_0 :slurpy 
    .const 'Sub' $P6726 = 'cuid_144_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_146_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_147_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_153_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_158_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_161_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_170_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_177_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_179_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_181_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_183_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_185_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_187_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_189_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_190_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_197_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_198_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_203_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_205_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_207_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_209_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_213_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_215_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_218_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_221_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_222_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_223_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_224_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_225_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_226_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_227_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_228_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_229_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_231_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_239_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_240_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_241_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_242_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_243_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_244_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_246_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_248_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_249_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_250_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_251_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_252_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_253_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_254_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_255_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_256_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_257_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_258_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_259_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_260_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_261_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_262_1359572548.257' 
    capture_lex $P6726 
    .const 'Sub' $P6726 = 'cuid_264_1359572548.257' 
    capture_lex $P6726 
    .lex "GLOBALish", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "EXPORT", $P103 
    .lex "&handle_arg", $P104 
    .lex "$exc_exclude", $P105 
    .lex "$exc_include", $P106 
    .lex "%handler_names", $P107 
    .lex "%control_map", $P108 
    .lex "@ARGS", _lex_param_0 
    .local pmc ctxsave 
    .const 'Sub' $P5001 = 'cuid_144_1359572548.257' 
    capture_lex $P5001
    set $P104, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P105, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P106, $P5003
    new $P5004, 'Hash'
    set $P107, $P5004
    new $P5005, 'Hash'
    set $P108, $P5005
    find_dynamic_lex $P5006, "$*CTXSAVE"
    set ctxsave, $P5006
    isnull $I5001, ctxsave
    if $I5001 goto unless15_end22 
    can $I5002, ctxsave, "ctxsave"
    box $P5009, $I5002
    set $P5008, $P5009
    unless $I5002 goto if16_end24 
    $P5007 = ctxsave."ctxsave"()
    set $P5008, $P5007
  if16_end24:
  unless15_end22:
.annotate 'line', 1
    .const 'Sub' $P5010 = 'cuid_146_1359572548.257' 
    capture_lex $P5010
    $P5011 = $P5010()
    .const 'Sub' $P5012 = 'cuid_147_1359572548.257' 
    capture_lex $P5012
    $P5013 = $P5012()
    .const 'Sub' $P5014 = 'cuid_153_1359572548.257' 
    capture_lex $P5014
    $P5015 = $P5014()
    .const 'Sub' $P5016 = 'cuid_158_1359572548.257' 
    capture_lex $P5016
    $P5017 = $P5016()
    .const 'Sub' $P5018 = 'cuid_161_1359572548.257' 
    capture_lex $P5018
    $P5019 = $P5018()
    .const 'Sub' $P5020 = 'cuid_170_1359572548.257' 
    capture_lex $P5020
    $P5021 = $P5020()
.annotate 'line', 587
    nqp_get_sc_object $P5025, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Operations"]
    unless_null $P5022, fallback341
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5022, $P5026
  fallback341:
    .const 'Sub' $P5028 = 'cuid_177_1359572548.257' 
    capture_lex $P5028
    newclosure $P5027, $P5028
    $P5022."add_core_op"("list", $P5027, 1 :named("inlinable"))
.annotate 'line', 603
    nqp_get_sc_object $P5032, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Operations"]
    unless_null $P5029, fallback349
    nqp_get_sc_object $P5033, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5029, $P5033
  fallback349:
    .const 'Sub' $P5035 = 'cuid_179_1359572548.257' 
    capture_lex $P5035
    newclosure $P5034, $P5035
    $P5029."add_core_op"("qlist", $P5034, 1 :named("inlinable"))
.annotate 'line', 619
    nqp_get_sc_object $P5039, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Operations"]
    unless_null $P5036, fallback357
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5036, $P5040
  fallback357:
    .const 'Sub' $P5042 = 'cuid_181_1359572548.257' 
    capture_lex $P5042
    newclosure $P5041, $P5042
    $P5036."add_core_op"("list_i", $P5041, 1 :named("inlinable"))
.annotate 'line', 635
    nqp_get_sc_object $P5046, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Operations"]
    unless_null $P5043, fallback365
    nqp_get_sc_object $P5047, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5043, $P5047
  fallback365:
    .const 'Sub' $P5049 = 'cuid_183_1359572548.257' 
    capture_lex $P5049
    newclosure $P5048, $P5049
    $P5043."add_core_op"("list_s", $P5048, 1 :named("inlinable"))
.annotate 'line', 651
    nqp_get_sc_object $P5053, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5052, $P5053, "QAST"
    get_who $P5051, $P5052
    set $P5050, $P5051["Operations"]
    unless_null $P5050, fallback373
    nqp_get_sc_object $P5054, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5050, $P5054
  fallback373:
    .const 'Sub' $P5056 = 'cuid_185_1359572548.257' 
    capture_lex $P5056
    newclosure $P5055, $P5056
    $P5050."add_core_op"("list_b", $P5055, 1 :named("inlinable"))
.annotate 'line', 668
    nqp_get_sc_object $P5060, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5059, $P5060, "QAST"
    get_who $P5058, $P5059
    set $P5057, $P5058["Operations"]
    unless_null $P5057, fallback384
    nqp_get_sc_object $P5061, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5057, $P5061
  fallback384:
    .const 'Sub' $P5063 = 'cuid_187_1359572548.257' 
    capture_lex $P5063
    newclosure $P5062, $P5063
    $P5057."add_core_op"("hash", $P5062, 1 :named("inlinable"))
.annotate 'line', 693
    nqp_get_sc_object $P5067, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5066, $P5067, "QAST"
    get_who $P5065, $P5066
    set $P5064, $P5065["Operations"]
    unless_null $P5064, fallback396
    nqp_get_sc_object $P5068, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5064, $P5068
  fallback396:
    .const 'Sub' $P5070 = 'cuid_189_1359572548.257' 
    capture_lex $P5070
    newclosure $P5069, $P5070
    $P5064."add_core_op"("chain", $P5069, 1 :named("inlinable"))
.annotate 'line', 735
    nqp_get_sc_object $P5074, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5073, $P5074, "QAST"
    get_who $P5072, $P5073
    set $P5071, $P5072["Operations"]
    unless_null $P5071, fallback420
    nqp_get_sc_object $P5075, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5071, $P5075
  fallback420:
    .const 'Sub' $P5077 = 'cuid_190_1359572548.257' 
    capture_lex $P5077
    newclosure $P5076, $P5077
    $P5071."add_core_op"("stmts", $P5076, 1 :named("inlinable"))
    new $P5081, 'ResizablePMCArray'
    box $P5082, "if"
    push $P5081, $P5082
    box $P5083, "unless"
    push $P5081, $P5083
    set $P5078, $P5081
    iter $P5080, $P5081
  for_next499:
    unless $P5080, for_done501
    shift $P5085, $P5080
  for_redo500:
    .const 'Sub' $P5084 = 'cuid_197_1359572548.257' 
    capture_lex $P5084
    $P5078 = $P5084($P5085)
    goto for_next499
  for_done501:
.annotate 'line', 837
    nqp_get_sc_object $P5089, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5088, $P5089, "QAST"
    get_who $P5087, $P5088
    set $P5086, $P5087["Operations"]
    unless_null $P5086, fallback502
    nqp_get_sc_object $P5090, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5086, $P5090
  fallback502:
    .const 'Sub' $P5092 = 'cuid_198_1359572548.257' 
    capture_lex $P5092
    newclosure $P5091, $P5092
    $P5086."add_core_op"("ifnull", $P5091, 1 :named("inlinable"))
    new $P5096, 'ResizablePMCArray'
    box $P5097, ""
    push $P5096, $P5097
    box $P5098, "repeat_"
    push $P5096, $P5098
    set $P5093, $P5096
    iter $P5095, $P5096
  for_next579:
    unless $P5095, for_done581
    shift $P5100, $P5095
  for_redo580:
    .const 'Sub' $P5099 = 'cuid_203_1359572548.257' 
    capture_lex $P5099
    $P5093 = $P5099($P5100)
    goto for_next579
  for_done581:
.annotate 'line', 964
    nqp_get_sc_object $P5104, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5103, $P5104, "QAST"
    get_who $P5102, $P5103
    set $P5101, $P5102["Operations"]
    unless_null $P5101, fallback582
    nqp_get_sc_object $P5105, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5101, $P5105
  fallback582:
    .const 'Sub' $P5107 = 'cuid_205_1359572548.257' 
    capture_lex $P5107
    newclosure $P5106, $P5107
    $P5101."add_core_op"("for", $P5106, 1 :named("inlinable"))
.annotate 'line', 1052
    nqp_get_sc_object $P5111, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5110, $P5111, "QAST"
    get_who $P5109, $P5110
    set $P5108, $P5109["Operations"]
    unless_null $P5108, fallback632
    nqp_get_sc_object $P5112, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5108, $P5112
  fallback632:
    .const 'Sub' $P5114 = 'cuid_207_1359572548.257' 
    capture_lex $P5114
    newclosure $P5113, $P5114
    $P5108."add_core_op"("defor", $P5113, 1 :named("inlinable"))
.annotate 'line', 1073
    nqp_get_sc_object $P5118, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5117, $P5118, "QAST"
    get_who $P5116, $P5117
    set $P5115, $P5116["Operations"]
    unless_null $P5115, fallback645
    nqp_get_sc_object $P5119, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5115, $P5119
  fallback645:
    .const 'Sub' $P5121 = 'cuid_209_1359572548.257' 
    capture_lex $P5121
    newclosure $P5120, $P5121
    $P5115."add_core_op"("xor", $P5120, 1 :named("inlinable"))
.annotate 'line', 1142
    nqp_get_sc_object $P5125, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5124, $P5125, "QAST"
    get_who $P5123, $P5124
    set $P5122, $P5123["Operations"]
    unless_null $P5122, fallback676
    nqp_get_sc_object $P5126, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5122, $P5126
  fallback676:
    .const 'Sub' $P5128 = 'cuid_213_1359572548.257' 
    capture_lex $P5128
    newclosure $P5127, $P5128
    $P5122."add_core_op"("bind", $P5127, 1 :named("inlinable"))
.annotate 'line', 1183
    nqp_get_sc_object $P5132, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5131, $P5132, "QAST"
    get_who $P5130, $P5131
    set $P5129, $P5130["Operations"]
    unless_null $P5129, fallback685
    nqp_get_sc_object $P5133, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5129, $P5133
  fallback685:
    .const 'Sub' $P5135 = 'cuid_215_1359572548.257' 
    capture_lex $P5135
    newclosure $P5134, $P5135
    $P5129."add_core_op"("call", $P5134)
.annotate 'line', 1219
    nqp_get_sc_object $P5139, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5138, $P5139, "QAST"
    get_who $P5137, $P5138
    set $P5136, $P5137["Operations"]
    unless_null $P5136, fallback705
    nqp_get_sc_object $P5140, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5136, $P5140
  fallback705:
    .const 'Sub' $P5142 = 'cuid_218_1359572548.257' 
    capture_lex $P5142
    newclosure $P5141, $P5142
    $P5136."add_core_op"("callmethod", $P5141, 1 :named("inlinable"))
.annotate 'line', 1271
    nqp_get_sc_object $P5146, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5145, $P5146, "QAST"
    get_who $P5144, $P5145
    set $P5143, $P5144["Operations"]
    unless_null $P5143, fallback729
    nqp_get_sc_object $P5147, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5143, $P5147
  fallback729:
    .const 'Sub' $P5149 = 'cuid_221_1359572548.257' 
    capture_lex $P5149
    newclosure $P5148, $P5149
    $P5143."add_core_op"("lexotic", $P5148)
.annotate 'line', 1295
    nqp_get_sc_object $P5153, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5152, $P5153, "QAST"
    get_who $P5151, $P5152
    set $P5150, $P5151["Operations"]
    unless_null $P5150, fallback736
    nqp_get_sc_object $P5154, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5150, $P5154
  fallback736:
    .const 'Sub' $P5156 = 'cuid_222_1359572548.257' 
    capture_lex $P5156
    newclosure $P5155, $P5156
    $P5150."add_core_op"("ctx", $P5155)
.annotate 'line', 1303
    nqp_get_sc_object $P5160, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5159, $P5160, "QAST"
    get_who $P5158, $P5159
    set $P5157, $P5158["Operations"]
    unless_null $P5157, fallback741
    nqp_get_sc_object $P5161, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5157, $P5161
  fallback741:
    .const 'Sub' $P5163 = 'cuid_223_1359572548.257' 
    capture_lex $P5163
    newclosure $P5162, $P5163
    $P5157."add_core_op"("ctxouter", $P5162)
.annotate 'line', 1312
    nqp_get_sc_object $P5167, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5166, $P5167, "QAST"
    get_who $P5165, $P5166
    set $P5164, $P5165["Operations"]
    unless_null $P5164, fallback747
    nqp_get_sc_object $P5168, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5164, $P5168
  fallback747:
    .const 'Sub' $P5170 = 'cuid_224_1359572548.257' 
    capture_lex $P5170
    newclosure $P5169, $P5170
    $P5164."add_core_op"("ctxcaller", $P5169)
.annotate 'line', 1321
    nqp_get_sc_object $P5174, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5173, $P5174, "QAST"
    get_who $P5172, $P5173
    set $P5171, $P5172["Operations"]
    unless_null $P5171, fallback753
    nqp_get_sc_object $P5175, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5171, $P5175
  fallback753:
    .const 'Sub' $P5177 = 'cuid_225_1359572548.257' 
    capture_lex $P5177
    newclosure $P5176, $P5177
    $P5171."add_core_op"("ctxlexpad", $P5176)
.annotate 'line', 1330
    nqp_get_sc_object $P5181, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5180, $P5181, "QAST"
    get_who $P5179, $P5180
    set $P5178, $P5179["Operations"]
    unless_null $P5178, fallback759
    nqp_get_sc_object $P5182, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5178, $P5182
  fallback759:
    .const 'Sub' $P5184 = 'cuid_226_1359572548.257' 
    capture_lex $P5184
    newclosure $P5183, $P5184
    $P5178."add_core_op"("curlexpad", $P5183)
.annotate 'line', 1338
    nqp_get_sc_object $P5188, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5187, $P5188, "QAST"
    get_who $P5186, $P5187
    set $P5185, $P5186["Operations"]
    unless_null $P5185, fallback764
    nqp_get_sc_object $P5189, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5185, $P5189
  fallback764:
    .const 'Sub' $P5191 = 'cuid_227_1359572548.257' 
    capture_lex $P5191
    newclosure $P5190, $P5191
    $P5185."add_core_op"("curcode", $P5190)
.annotate 'line', 1346
    nqp_get_sc_object $P5195, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5194, $P5195, "QAST"
    get_who $P5193, $P5194
    set $P5192, $P5193["Operations"]
    unless_null $P5192, fallback769
    nqp_get_sc_object $P5196, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5192, $P5196
  fallback769:
    .const 'Sub' $P5198 = 'cuid_228_1359572548.257' 
    capture_lex $P5198
    newclosure $P5197, $P5198
    $P5192."add_core_op"("callercode", $P5197)
.annotate 'line', 1354
    nqp_get_sc_object $P5202, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5201, $P5202, "QAST"
    get_who $P5200, $P5201
    set $P5199, $P5200["Operations"]
    unless_null $P5199, fallback774
    nqp_get_sc_object $P5203, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5199, $P5203
  fallback774:
    .const 'Sub' $P5205 = 'cuid_229_1359572548.257' 
    capture_lex $P5205
    newclosure $P5204, $P5205
    $P5199."add_core_op"("lexprimspec", $P5204)
    box $P5206, 0
    set $P105, $P5206
    box $P5207, 1
    set $P106, $P5207
    new $P5208, 'Hash'
    box $P5209, ".CONTROL_ALL"
    set $P5208["CATCH"], $P5209
    box $P5210, ".CONTROL_ALL"
    set $P5208["CONTROL"], $P5210
    box $P5211, ".CONTROL_LOOP_NEXT"
    set $P5208["NEXT"], $P5211
    box $P5212, ".CONTROL_LOOP_LAST"
    set $P5208["LAST"], $P5212
    box $P5213, ".CONTROL_LOOP_REDO"
    set $P5208["REDO"], $P5213
    box $P5214, ".CONTROL_TAKE"
    set $P5208["TAKE"], $P5214
    box $P5215, ".CONTROL_BREAK"
    set $P5208["SUCCEED"], $P5215
    box $P5216, ".CONTROL_CONTINUE"
    set $P5208["PROCEED"], $P5216
    set $P107, $P5208
.annotate 'line', 1377
    nqp_get_sc_object $P5220, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5219, $P5220, "QAST"
    get_who $P5218, $P5219
    set $P5217, $P5218["Operations"]
    unless_null $P5217, fallback780
    nqp_get_sc_object $P5221, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5217, $P5221
  fallback780:
    .const 'Sub' $P5223 = 'cuid_231_1359572548.257' 
    capture_lex $P5223
    newclosure $P5222, $P5223
    $P5217."add_core_op"("handle", $P5222)
.annotate 'line', 1518
    nqp_get_sc_object $P5227, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5226, $P5227, "QAST"
    get_who $P5225, $P5226
    set $P5224, $P5225["Operations"]
    unless_null $P5224, fallback846
    nqp_get_sc_object $P5228, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5224, $P5228
  fallback846:
    .const 'Sub' $P5230 = 'cuid_239_1359572548.257' 
    capture_lex $P5230
    newclosure $P5229, $P5230
    $P5224."add_core_op"("exception", $P5229)
.annotate 'line', 1527
    nqp_get_sc_object $P5234, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5233, $P5234, "QAST"
    get_who $P5232, $P5233
    set $P5231, $P5232["Operations"]
    unless_null $P5231, fallback855
    nqp_get_sc_object $P5235, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5231, $P5235
  fallback855:
    .const 'Sub' $P5237 = 'cuid_240_1359572548.257' 
    capture_lex $P5237
    newclosure $P5236, $P5237
    $P5231."add_core_op"("getpayload", $P5236)
.annotate 'line', 1539
    nqp_get_sc_object $P5241, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5240, $P5241, "QAST"
    get_who $P5239, $P5240
    set $P5238, $P5239["Operations"]
    unless_null $P5238, fallback863
    nqp_get_sc_object $P5242, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5238, $P5242
  fallback863:
    .const 'Sub' $P5244 = 'cuid_241_1359572548.257' 
    capture_lex $P5244
    newclosure $P5243, $P5244
    $P5238."add_core_op"("setpayload", $P5243)
.annotate 'line', 1550
    nqp_get_sc_object $P5248, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5247, $P5248, "QAST"
    get_who $P5246, $P5247
    set $P5245, $P5246["Operations"]
    unless_null $P5245, fallback869
    nqp_get_sc_object $P5249, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5245, $P5249
  fallback869:
    .const 'Sub' $P5251 = 'cuid_242_1359572548.257' 
    capture_lex $P5251
    newclosure $P5250, $P5251
    $P5245."add_core_op"("getmessage", $P5250)
.annotate 'line', 1564
    nqp_get_sc_object $P5255, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5254, $P5255, "QAST"
    get_who $P5253, $P5254
    set $P5252, $P5253["Operations"]
    unless_null $P5252, fallback880
    nqp_get_sc_object $P5256, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5252, $P5256
  fallback880:
    .const 'Sub' $P5258 = 'cuid_243_1359572548.257' 
    capture_lex $P5258
    newclosure $P5257, $P5258
    $P5252."add_core_op"("setmessage", $P5257)
.annotate 'line', 1579
    nqp_get_sc_object $P5262, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5261, $P5262, "QAST"
    get_who $P5260, $P5261
    set $P5259, $P5260["Operations"]
    unless_null $P5259, fallback889
    nqp_get_sc_object $P5263, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5259, $P5263
  fallback889:
    .const 'Sub' $P5265 = 'cuid_244_1359572548.257' 
    capture_lex $P5265
    newclosure $P5264, $P5265
    $P5259."add_core_op"("newexception", $P5264)
.annotate 'line', 1589
    nqp_get_sc_object $P5269, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5268, $P5269, "QAST"
    get_who $P5267, $P5268
    set $P5266, $P5267["Operations"]
    unless_null $P5266, fallback896
    nqp_get_sc_object $P5270, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5266, $P5270
  fallback896:
    $P5266."add_core_pirop_mapping"("die_s", "die", "0s")
.annotate 'line', 1590
    nqp_get_sc_object $P5274, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5273, $P5274, "QAST"
    get_who $P5272, $P5273
    set $P5271, $P5272["Operations"]
    unless_null $P5271, fallback897
    nqp_get_sc_object $P5275, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5271, $P5275
  fallback897:
    $P5271."add_core_pirop_mapping"("die", "die", "0P")
.annotate 'line', 1591
    nqp_get_sc_object $P5279, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5278, $P5279, "QAST"
    get_who $P5277, $P5278
    set $P5276, $P5277["Operations"]
    unless_null $P5276, fallback898
    nqp_get_sc_object $P5280, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5276, $P5280
  fallback898:
    $P5276."add_core_pirop_mapping"("throw", "throw", "0P")
.annotate 'line', 1592
    nqp_get_sc_object $P5284, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5283, $P5284, "QAST"
    get_who $P5282, $P5283
    set $P5281, $P5282["Operations"]
    unless_null $P5281, fallback899
    nqp_get_sc_object $P5285, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5281, $P5285
  fallback899:
    $P5281."add_core_pirop_mapping"("rethrow", "rethrow", "0P")
    new $P5286, 'Hash'
    box $P5287, ".CONTROL_LOOP_NEXT"
    set $P5286["next"], $P5287
    box $P5288, ".CONTROL_LOOP_LAST"
    set $P5286["last"], $P5288
    box $P5289, ".CONTROL_LOOP_REDO"
    set $P5286["redo"], $P5289
    set $P108, $P5286
.annotate 'line', 1600
    nqp_get_sc_object $P5293, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5292, $P5293, "QAST"
    get_who $P5291, $P5292
    set $P5290, $P5291["Operations"]
    unless_null $P5290, fallback900
    nqp_get_sc_object $P5294, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5290, $P5294
  fallback900:
    .const 'Sub' $P5296 = 'cuid_246_1359572548.257' 
    capture_lex $P5296
    newclosure $P5295, $P5296
    $P5290."add_core_op"("control", $P5295)
    new $P5300, 'ResizablePMCArray'
    box $P5301, "i"
    push $P5300, $P5301
    box $P5302, "n"
    push $P5300, $P5302
    box $P5303, "s"
    push $P5300, $P5303
    set $P5297, $P5300
    iter $P5299, $P5300
  for_next910:
    unless $P5299, for_done912
    shift $P5305, $P5299
  for_redo911:
    .const 'Sub' $P5304 = 'cuid_248_1359572548.257' 
    capture_lex $P5304
    $P5297 = $P5304($P5305)
    goto for_next910
  for_done912:
.annotate 'line', 1623
    nqp_get_sc_object $P5309, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5308, $P5309, "QAST"
    get_who $P5307, $P5308
    set $P5306, $P5307["Operations"]
    unless_null $P5306, fallback913
    nqp_get_sc_object $P5310, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5306, $P5310
  fallback913:
    .const 'Sub' $P5312 = 'cuid_249_1359572548.257' 
    capture_lex $P5312
    newclosure $P5311, $P5312
    $P5306."add_hll_unbox"("nqp", "i", $P5311)
.annotate 'line', 1631
    nqp_get_sc_object $P5316, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5315, $P5316, "QAST"
    get_who $P5314, $P5315
    set $P5313, $P5314["Operations"]
    unless_null $P5313, fallback918
    nqp_get_sc_object $P5317, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5313, $P5317
  fallback918:
    .const 'Sub' $P5319 = 'cuid_250_1359572548.257' 
    capture_lex $P5319
    newclosure $P5318, $P5319
    $P5313."add_hll_unbox"("nqp", "n", $P5318)
.annotate 'line', 1639
    nqp_get_sc_object $P5323, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5322, $P5323, "QAST"
    get_who $P5321, $P5322
    set $P5320, $P5321["Operations"]
    unless_null $P5320, fallback923
    nqp_get_sc_object $P5324, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5320, $P5324
  fallback923:
    .const 'Sub' $P5326 = 'cuid_251_1359572548.257' 
    capture_lex $P5326
    newclosure $P5325, $P5326
    $P5320."add_hll_unbox"("nqp", "s", $P5325)
.annotate 'line', 1649
    nqp_get_sc_object $P5330, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5329, $P5330, "QAST"
    get_who $P5328, $P5329
    set $P5327, $P5328["Operations"]
    unless_null $P5327, fallback928
    nqp_get_sc_object $P5331, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5327, $P5331
  fallback928:
    $P5327."add_core_pirop_mapping"("positional_get", "set", "PQi", 1 :named("inlinable"))
.annotate 'line', 1650
    nqp_get_sc_object $P5335, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5334, $P5335, "QAST"
    get_who $P5333, $P5334
    set $P5332, $P5333["Operations"]
    unless_null $P5332, fallback929
    nqp_get_sc_object $P5336, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5332, $P5336
  fallback929:
    $P5332."add_core_pirop_mapping"("positional_bind", "set", "1QiP", 1 :named("inlinable"))
.annotate 'line', 1651
    nqp_get_sc_object $P5340, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5339, $P5340, "QAST"
    get_who $P5338, $P5339
    set $P5337, $P5338["Operations"]
    unless_null $P5337, fallback930
    nqp_get_sc_object $P5341, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5337, $P5341
  fallback930:
    $P5337."add_core_pirop_mapping"("associative_get", "set", "PQs", 1 :named("inlinable"))
.annotate 'line', 1652
    nqp_get_sc_object $P5345, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5344, $P5345, "QAST"
    get_who $P5343, $P5344
    set $P5342, $P5343["Operations"]
    unless_null $P5342, fallback931
    nqp_get_sc_object $P5346, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5342, $P5346
  fallback931:
    $P5342."add_core_pirop_mapping"("associative_bind", "set", "1QsP", 1 :named("inlinable"))
.annotate 'line', 1655
    nqp_get_sc_object $P5350, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5349, $P5350, "QAST"
    get_who $P5348, $P5349
    set $P5347, $P5348["Operations"]
    unless_null $P5347, fallback932
    nqp_get_sc_object $P5351, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5347, $P5351
  fallback932:
    $P5347."add_core_pirop_mapping"("print", "print", "0s", 1 :named("inlinable"))
.annotate 'line', 1656
    nqp_get_sc_object $P5355, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5354, $P5355, "QAST"
    get_who $P5353, $P5354
    set $P5352, $P5353["Operations"]
    unless_null $P5352, fallback933
    nqp_get_sc_object $P5356, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5352, $P5356
  fallback933:
    $P5352."add_core_pirop_mapping"("say", "say", "0s", 1 :named("inlinable"))
.annotate 'line', 1657
    nqp_get_sc_object $P5360, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5359, $P5360, "QAST"
    get_who $P5358, $P5359
    set $P5357, $P5358["Operations"]
    unless_null $P5357, fallback934
    nqp_get_sc_object $P5361, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5357, $P5361
  fallback934:
    $P5357."add_core_pirop_mapping"("stat", "stat", "Isi", 1 :named("inlinable"))
.annotate 'line', 1658
    nqp_get_sc_object $P5365, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5364, $P5365, "QAST"
    get_who $P5363, $P5364
    set $P5362, $P5363["Operations"]
    unless_null $P5362, fallback935
    nqp_get_sc_object $P5366, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5362, $P5366
  fallback935:
    $P5362."add_core_pirop_mapping"("open", "open", "Pss", 1 :named("inlinable"))
.annotate 'line', 1661
    nqp_get_sc_object $P5370, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5369, $P5370, "QAST"
    get_who $P5368, $P5369
    set $P5367, $P5368["Operations"]
    unless_null $P5367, fallback936
    nqp_get_sc_object $P5371, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5367, $P5371
  fallback936:
    $P5367."add_core_pirop_mapping"("time_i", "time", "I", 1 :named("inlinable"))
.annotate 'line', 1662
    nqp_get_sc_object $P5375, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5374, $P5375, "QAST"
    get_who $P5373, $P5374
    set $P5372, $P5373["Operations"]
    unless_null $P5372, fallback937
    nqp_get_sc_object $P5376, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5372, $P5376
  fallback937:
    $P5372."add_core_pirop_mapping"("time_n", "time", "N", 1 :named("inlinable"))
.annotate 'line', 1665
    nqp_get_sc_object $P5380, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5379, $P5380, "QAST"
    get_who $P5378, $P5379
    set $P5377, $P5378["Operations"]
    unless_null $P5377, fallback938
    nqp_get_sc_object $P5381, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5377, $P5381
  fallback938:
    $P5377."add_core_pirop_mapping"("add_i", "add", "Iii", 1 :named("inlinable"))
.annotate 'line', 1666
    nqp_get_sc_object $P5385, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5384, $P5385, "QAST"
    get_who $P5383, $P5384
    set $P5382, $P5383["Operations"]
    unless_null $P5382, fallback939
    nqp_get_sc_object $P5386, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5382, $P5386
  fallback939:
    $P5382."add_core_pirop_mapping"("add_I", "nqp_bigint_add", "PPPP", 1 :named("inlinable"))
.annotate 'line', 1667
    nqp_get_sc_object $P5390, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5389, $P5390, "QAST"
    get_who $P5388, $P5389
    set $P5387, $P5388["Operations"]
    unless_null $P5387, fallback940
    nqp_get_sc_object $P5391, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5387, $P5391
  fallback940:
    $P5387."add_core_pirop_mapping"("add_n", "add", "Nnn", 1 :named("inlinable"))
.annotate 'line', 1668
    nqp_get_sc_object $P5395, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5394, $P5395, "QAST"
    get_who $P5393, $P5394
    set $P5392, $P5393["Operations"]
    unless_null $P5392, fallback941
    nqp_get_sc_object $P5396, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5392, $P5396
  fallback941:
    $P5392."add_core_pirop_mapping"("sub_i", "sub", "Iii", 1 :named("inlinable"))
.annotate 'line', 1669
    nqp_get_sc_object $P5400, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5399, $P5400, "QAST"
    get_who $P5398, $P5399
    set $P5397, $P5398["Operations"]
    unless_null $P5397, fallback942
    nqp_get_sc_object $P5401, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5397, $P5401
  fallback942:
    $P5397."add_core_pirop_mapping"("sub_I", "nqp_bigint_sub", "PPPP", 1 :named("inlinable"))
.annotate 'line', 1670
    nqp_get_sc_object $P5405, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5404, $P5405, "QAST"
    get_who $P5403, $P5404
    set $P5402, $P5403["Operations"]
    unless_null $P5402, fallback943
    nqp_get_sc_object $P5406, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5402, $P5406
  fallback943:
    $P5402."add_core_pirop_mapping"("sub_n", "sub", "Nnn", 1 :named("inlinable"))
.annotate 'line', 1671
    nqp_get_sc_object $P5410, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5409, $P5410, "QAST"
    get_who $P5408, $P5409
    set $P5407, $P5408["Operations"]
    unless_null $P5407, fallback944
    nqp_get_sc_object $P5411, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5407, $P5411
  fallback944:
    $P5407."add_core_pirop_mapping"("mul_i", "mul", "Iii", 1 :named("inlinable"))
.annotate 'line', 1672
    nqp_get_sc_object $P5415, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5414, $P5415, "QAST"
    get_who $P5413, $P5414
    set $P5412, $P5413["Operations"]
    unless_null $P5412, fallback945
    nqp_get_sc_object $P5416, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5412, $P5416
  fallback945:
    $P5412."add_core_pirop_mapping"("mul_I", "nqp_bigint_mul", "PPPP", 1 :named("inlinable"))
.annotate 'line', 1673
    nqp_get_sc_object $P5420, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5419, $P5420, "QAST"
    get_who $P5418, $P5419
    set $P5417, $P5418["Operations"]
    unless_null $P5417, fallback946
    nqp_get_sc_object $P5421, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5417, $P5421
  fallback946:
    $P5417."add_core_pirop_mapping"("mul_n", "mul", "Nnn", 1 :named("inlinable"))
.annotate 'line', 1674
    nqp_get_sc_object $P5425, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5424, $P5425, "QAST"
    get_who $P5423, $P5424
    set $P5422, $P5423["Operations"]
    unless_null $P5422, fallback947
    nqp_get_sc_object $P5426, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5422, $P5426
  fallback947:
    $P5422."add_core_pirop_mapping"("div_i", "div", "Iii", 1 :named("inlinable"))
.annotate 'line', 1675
    nqp_get_sc_object $P5430, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5429, $P5430, "QAST"
    get_who $P5428, $P5429
    set $P5427, $P5428["Operations"]
    unless_null $P5427, fallback948
    nqp_get_sc_object $P5431, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5427, $P5431
  fallback948:
    $P5427."add_core_pirop_mapping"("div_I", "nqp_bigint_div", "PPPP", 1 :named("inlinable"))
.annotate 'line', 1676
    nqp_get_sc_object $P5435, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5434, $P5435, "QAST"
    get_who $P5433, $P5434
    set $P5432, $P5433["Operations"]
    unless_null $P5432, fallback949
    nqp_get_sc_object $P5436, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5432, $P5436
  fallback949:
    $P5432."add_core_pirop_mapping"("div_In", "nqp_bigint_div_num", "NPP", 1 :named("inlinable"))
.annotate 'line', 1677
    nqp_get_sc_object $P5440, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5439, $P5440, "QAST"
    get_who $P5438, $P5439
    set $P5437, $P5438["Operations"]
    unless_null $P5437, fallback950
    nqp_get_sc_object $P5441, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5437, $P5441
  fallback950:
    $P5437."add_core_pirop_mapping"("div_n", "div", "Nnn", 1 :named("inlinable"))
.annotate 'line', 1678
    nqp_get_sc_object $P5445, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5444, $P5445, "QAST"
    get_who $P5443, $P5444
    set $P5442, $P5443["Operations"]
    unless_null $P5442, fallback951
    nqp_get_sc_object $P5446, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5442, $P5446
  fallback951:
    $P5442."add_core_pirop_mapping"("mod_i", "mod", "Iii", 1 :named("inlinable"))
.annotate 'line', 1679
    nqp_get_sc_object $P5450, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5449, $P5450, "QAST"
    get_who $P5448, $P5449
    set $P5447, $P5448["Operations"]
    unless_null $P5447, fallback952
    nqp_get_sc_object $P5451, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5447, $P5451
  fallback952:
    $P5447."add_core_pirop_mapping"("mod_I", "nqp_bigint_mod", "PPPP", 1 :named("inlinable"))
.annotate 'line', 1680
    nqp_get_sc_object $P5455, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5454, $P5455, "QAST"
    get_who $P5453, $P5454
    set $P5452, $P5453["Operations"]
    unless_null $P5452, fallback953
    nqp_get_sc_object $P5456, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5452, $P5456
  fallback953:
    $P5452."add_core_pirop_mapping"("expmod_I", "nqp_bigint_exp_mod", "PPPPP", 1 :named("inlinable"))
.annotate 'line', 1681
    nqp_get_sc_object $P5460, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5459, $P5460, "QAST"
    get_who $P5458, $P5459
    set $P5457, $P5458["Operations"]
    unless_null $P5457, fallback954
    nqp_get_sc_object $P5461, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5457, $P5461
  fallback954:
    $P5457."add_core_pirop_mapping"("isprime_I", "nqp_bigint_is_prime", "IPi", 1 :named("inlinable"))
.annotate 'line', 1682
    nqp_get_sc_object $P5465, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5464, $P5465, "QAST"
    get_who $P5463, $P5464
    set $P5462, $P5463["Operations"]
    unless_null $P5462, fallback955
    nqp_get_sc_object $P5466, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5462, $P5466
  fallback955:
    $P5462."add_core_pirop_mapping"("rand_I", "nqp_bigint_rand", "PPP", 1 :named("inlinable"))
.annotate 'line', 1683
    nqp_get_sc_object $P5470, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5469, $P5470, "QAST"
    get_who $P5468, $P5469
    set $P5467, $P5468["Operations"]
    unless_null $P5467, fallback956
    nqp_get_sc_object $P5471, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5467, $P5471
  fallback956:
    $P5467."add_core_pirop_mapping"("mod_n", "mod", "Nnn", 1 :named("inlinable"))
.annotate 'line', 1684
    nqp_get_sc_object $P5475, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5474, $P5475, "QAST"
    get_who $P5473, $P5474
    set $P5472, $P5473["Operations"]
    unless_null $P5472, fallback957
    nqp_get_sc_object $P5476, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5472, $P5476
  fallback957:
    $P5472."add_core_pirop_mapping"("pow_n", "pow", "Nnn", 1 :named("inlinable"))
.annotate 'line', 1685
    nqp_get_sc_object $P5480, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5479, $P5480, "QAST"
    get_who $P5478, $P5479
    set $P5477, $P5478["Operations"]
    unless_null $P5477, fallback958
    nqp_get_sc_object $P5481, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5477, $P5481
  fallback958:
    $P5477."add_core_pirop_mapping"("pow_I", "nqp_bigint_pow", "PPPPP", 1 :named("inlinable"))
.annotate 'line', 1686
    nqp_get_sc_object $P5485, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5484, $P5485, "QAST"
    get_who $P5483, $P5484
    set $P5482, $P5483["Operations"]
    unless_null $P5482, fallback959
    nqp_get_sc_object $P5486, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5482, $P5486
  fallback959:
    $P5482."add_core_pirop_mapping"("neg_i", "neg", "Ii", 1 :named("inlinable"))
.annotate 'line', 1687
    nqp_get_sc_object $P5490, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5489, $P5490, "QAST"
    get_who $P5488, $P5489
    set $P5487, $P5488["Operations"]
    unless_null $P5487, fallback960
    nqp_get_sc_object $P5491, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5487, $P5491
  fallback960:
    $P5487."add_core_pirop_mapping"("neg_I", "nqp_bigint_neg", "PPP", 1 :named("inlinable"))
.annotate 'line', 1688
    nqp_get_sc_object $P5495, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5494, $P5495, "QAST"
    get_who $P5493, $P5494
    set $P5492, $P5493["Operations"]
    unless_null $P5492, fallback961
    nqp_get_sc_object $P5496, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5492, $P5496
  fallback961:
    $P5492."add_core_pirop_mapping"("neg_n", "neg", "Nn", 1 :named("inlinable"))
.annotate 'line', 1689
    nqp_get_sc_object $P5500, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5499, $P5500, "QAST"
    get_who $P5498, $P5499
    set $P5497, $P5498["Operations"]
    unless_null $P5497, fallback962
    nqp_get_sc_object $P5501, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5497, $P5501
  fallback962:
    $P5497."add_core_pirop_mapping"("abs_i", "abs", "Ii", 1 :named("inlinable"))
.annotate 'line', 1690
    nqp_get_sc_object $P5505, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5504, $P5505, "QAST"
    get_who $P5503, $P5504
    set $P5502, $P5503["Operations"]
    unless_null $P5502, fallback963
    nqp_get_sc_object $P5506, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5502, $P5506
  fallback963:
    $P5502."add_core_pirop_mapping"("abs_I", "nqp_bigint_abs", "PPP", 1 :named("inlinable"))
.annotate 'line', 1691
    nqp_get_sc_object $P5510, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5509, $P5510, "QAST"
    get_who $P5508, $P5509
    set $P5507, $P5508["Operations"]
    unless_null $P5507, fallback964
    nqp_get_sc_object $P5511, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5507, $P5511
  fallback964:
    $P5507."add_core_pirop_mapping"("abs_n", "abs", "Nn", 1 :named("inlinable"))
.annotate 'line', 1693
    nqp_get_sc_object $P5515, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5514, $P5515, "QAST"
    get_who $P5513, $P5514
    set $P5512, $P5513["Operations"]
    unless_null $P5512, fallback965
    nqp_get_sc_object $P5516, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5512, $P5516
  fallback965:
    $P5512."add_core_pirop_mapping"("gcd_i", "gcd", "Iii", 1 :named("inlinable"))
.annotate 'line', 1694
    nqp_get_sc_object $P5520, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5519, $P5520, "QAST"
    get_who $P5518, $P5519
    set $P5517, $P5518["Operations"]
    unless_null $P5517, fallback966
    nqp_get_sc_object $P5521, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5517, $P5521
  fallback966:
    $P5517."add_core_pirop_mapping"("gcd_I", "nqp_bigint_gcd", "PPPP", 1 :named("inlinable"))
.annotate 'line', 1695
    nqp_get_sc_object $P5525, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5524, $P5525, "QAST"
    get_who $P5523, $P5524
    set $P5522, $P5523["Operations"]
    unless_null $P5522, fallback967
    nqp_get_sc_object $P5526, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5522, $P5526
  fallback967:
    $P5522."add_core_pirop_mapping"("lcm_i", "lcm", "Iii", 1 :named("inlinable"))
.annotate 'line', 1696
    nqp_get_sc_object $P5530, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5529, $P5530, "QAST"
    get_who $P5528, $P5529
    set $P5527, $P5528["Operations"]
    unless_null $P5527, fallback968
    nqp_get_sc_object $P5531, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5527, $P5531
  fallback968:
    $P5527."add_core_pirop_mapping"("lcm_I", "nqp_bigint_lcm", "PPPP", 1 :named("inlinable"))
.annotate 'line', 1698
    nqp_get_sc_object $P5535, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5534, $P5535, "QAST"
    get_who $P5533, $P5534
    set $P5532, $P5533["Operations"]
    unless_null $P5532, fallback969
    nqp_get_sc_object $P5536, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5532, $P5536
  fallback969:
    $P5532."add_core_pirop_mapping"("ceil_n", "ceil", "Nn", 1 :named("inlinable"))
.annotate 'line', 1699
    nqp_get_sc_object $P5540, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5539, $P5540, "QAST"
    get_who $P5538, $P5539
    set $P5537, $P5538["Operations"]
    unless_null $P5537, fallback970
    nqp_get_sc_object $P5541, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5537, $P5541
  fallback970:
    $P5537."add_core_pirop_mapping"("floor_n", "floor", "NN", 1 :named("inlinable"))
.annotate 'line', 1700
    nqp_get_sc_object $P5545, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5544, $P5545, "QAST"
    get_who $P5543, $P5544
    set $P5542, $P5543["Operations"]
    unless_null $P5542, fallback971
    nqp_get_sc_object $P5546, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5542, $P5546
  fallback971:
    $P5542."add_core_pirop_mapping"("ln_n", "ln", "Nn", 1 :named("inlinable"))
.annotate 'line', 1701
    nqp_get_sc_object $P5550, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5549, $P5550, "QAST"
    get_who $P5548, $P5549
    set $P5547, $P5548["Operations"]
    unless_null $P5547, fallback972
    nqp_get_sc_object $P5551, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5547, $P5551
  fallback972:
    $P5547."add_core_pirop_mapping"("sqrt_n", "sqrt", "Nn", 1 :named("inlinable"))
.annotate 'line', 1702
    nqp_get_sc_object $P5555, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5554, $P5555, "QAST"
    get_who $P5553, $P5554
    set $P5552, $P5553["Operations"]
    unless_null $P5552, fallback973
    nqp_get_sc_object $P5556, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5552, $P5556
  fallback973:
    $P5552."add_core_pirop_mapping"("radix", "nqp_radix", "Pisii", 1 :named("inlinable"))
.annotate 'line', 1703
    nqp_get_sc_object $P5560, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5559, $P5560, "QAST"
    get_who $P5558, $P5559
    set $P5557, $P5558["Operations"]
    unless_null $P5557, fallback974
    nqp_get_sc_object $P5561, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5557, $P5561
  fallback974:
    $P5557."add_core_pirop_mapping"("radix_I", "nqp_bigint_radix", "PisiiP", 1 :named("inlinable"))
.annotate 'line', 1704
    nqp_get_sc_object $P5565, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5564, $P5565, "QAST"
    get_who $P5563, $P5564
    set $P5562, $P5563["Operations"]
    unless_null $P5562, fallback975
    nqp_get_sc_object $P5566, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5562, $P5566
  fallback975:
    $P5562."add_core_pirop_mapping"("log_n", "ln", "NN", 1 :named("inlinable"))
.annotate 'line', 1705
    nqp_get_sc_object $P5570, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5569, $P5570, "QAST"
    get_who $P5568, $P5569
    set $P5567, $P5568["Operations"]
    unless_null $P5567, fallback976
    nqp_get_sc_object $P5571, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5567, $P5571
  fallback976:
    $P5567."add_core_pirop_mapping"("exp_n", "exp", "Nn", 1 :named("inlinable"))
.annotate 'line', 1706
    nqp_get_sc_object $P5575, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5574, $P5575, "QAST"
    get_who $P5573, $P5574
    set $P5572, $P5573["Operations"]
    unless_null $P5572, fallback977
    nqp_get_sc_object $P5576, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5572, $P5576
  fallback977:
    $P5572."add_core_pirop_mapping"("isnanorinf", "is_inf_or_nan", "In", 1 :named("inlinable"))
.annotate 'line', 1709
    nqp_get_sc_object $P5580, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5579, $P5580, "QAST"
    get_who $P5578, $P5579
    set $P5577, $P5578["Operations"]
    unless_null $P5577, fallback978
    nqp_get_sc_object $P5581, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5577, $P5581
  fallback978:
    $P5577."add_core_pirop_mapping"("sin_n", "sin", "NN", 1 :named("inlinable"))
.annotate 'line', 1710
    nqp_get_sc_object $P5585, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5584, $P5585, "QAST"
    get_who $P5583, $P5584
    set $P5582, $P5583["Operations"]
    unless_null $P5582, fallback979
    nqp_get_sc_object $P5586, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5582, $P5586
  fallback979:
    $P5582."add_core_pirop_mapping"("asin_n", "asin", "NN", 1 :named("inlinable"))
.annotate 'line', 1711
    nqp_get_sc_object $P5590, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5589, $P5590, "QAST"
    get_who $P5588, $P5589
    set $P5587, $P5588["Operations"]
    unless_null $P5587, fallback980
    nqp_get_sc_object $P5591, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5587, $P5591
  fallback980:
    $P5587."add_core_pirop_mapping"("cos_n", "cos", "NN", 1 :named("inlinable"))
.annotate 'line', 1712
    nqp_get_sc_object $P5595, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5594, $P5595, "QAST"
    get_who $P5593, $P5594
    set $P5592, $P5593["Operations"]
    unless_null $P5592, fallback981
    nqp_get_sc_object $P5596, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5592, $P5596
  fallback981:
    $P5592."add_core_pirop_mapping"("acos_n", "acos", "NN", 1 :named("inlinable"))
.annotate 'line', 1713
    nqp_get_sc_object $P5600, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5599, $P5600, "QAST"
    get_who $P5598, $P5599
    set $P5597, $P5598["Operations"]
    unless_null $P5597, fallback982
    nqp_get_sc_object $P5601, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5597, $P5601
  fallback982:
    $P5597."add_core_pirop_mapping"("tan_n", "tan", "NN", 1 :named("inlinable"))
.annotate 'line', 1714
    nqp_get_sc_object $P5605, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5604, $P5605, "QAST"
    get_who $P5603, $P5604
    set $P5602, $P5603["Operations"]
    unless_null $P5602, fallback983
    nqp_get_sc_object $P5606, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5602, $P5606
  fallback983:
    $P5602."add_core_pirop_mapping"("atan_n", "atan", "NN", 1 :named("inlinable"))
.annotate 'line', 1715
    nqp_get_sc_object $P5610, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5609, $P5610, "QAST"
    get_who $P5608, $P5609
    set $P5607, $P5608["Operations"]
    unless_null $P5607, fallback984
    nqp_get_sc_object $P5611, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5607, $P5611
  fallback984:
    $P5607."add_core_pirop_mapping"("atan2_n", "atan", "NNN", 1 :named("inlinable"))
.annotate 'line', 1716
    nqp_get_sc_object $P5615, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5614, $P5615, "QAST"
    get_who $P5613, $P5614
    set $P5612, $P5613["Operations"]
    unless_null $P5612, fallback985
    nqp_get_sc_object $P5616, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5612, $P5616
  fallback985:
    $P5612."add_core_pirop_mapping"("sec_n", "sec", "NN", 1 :named("inlinable"))
.annotate 'line', 1717
    nqp_get_sc_object $P5620, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5619, $P5620, "QAST"
    get_who $P5618, $P5619
    set $P5617, $P5618["Operations"]
    unless_null $P5617, fallback986
    nqp_get_sc_object $P5621, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5617, $P5621
  fallback986:
    $P5617."add_core_pirop_mapping"("asec_n", "asec", "NN", 1 :named("inlinable"))
.annotate 'line', 1718
    nqp_get_sc_object $P5625, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5624, $P5625, "QAST"
    get_who $P5623, $P5624
    set $P5622, $P5623["Operations"]
    unless_null $P5622, fallback987
    nqp_get_sc_object $P5626, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5622, $P5626
  fallback987:
    $P5622."add_core_pirop_mapping"("sin_n", "sin", "NN", 1 :named("inlinable"))
.annotate 'line', 1719
    nqp_get_sc_object $P5630, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5629, $P5630, "QAST"
    get_who $P5628, $P5629
    set $P5627, $P5628["Operations"]
    unless_null $P5627, fallback988
    nqp_get_sc_object $P5631, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5627, $P5631
  fallback988:
    $P5627."add_core_pirop_mapping"("asin_n", "asin", "NN", 1 :named("inlinable"))
.annotate 'line', 1720
    nqp_get_sc_object $P5635, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5634, $P5635, "QAST"
    get_who $P5633, $P5634
    set $P5632, $P5633["Operations"]
    unless_null $P5632, fallback989
    nqp_get_sc_object $P5636, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5632, $P5636
  fallback989:
    $P5632."add_core_pirop_mapping"("sinh_n", "sinh", "NN", 1 :named("inlinable"))
.annotate 'line', 1721
    nqp_get_sc_object $P5640, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5639, $P5640, "QAST"
    get_who $P5638, $P5639
    set $P5637, $P5638["Operations"]
    unless_null $P5637, fallback990
    nqp_get_sc_object $P5641, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5637, $P5641
  fallback990:
    $P5637."add_core_pirop_mapping"("cosh_n", "cosh", "NN", 1 :named("inlinable"))
.annotate 'line', 1722
    nqp_get_sc_object $P5645, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5644, $P5645, "QAST"
    get_who $P5643, $P5644
    set $P5642, $P5643["Operations"]
    unless_null $P5642, fallback991
    nqp_get_sc_object $P5646, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5642, $P5646
  fallback991:
    $P5642."add_core_pirop_mapping"("tanh_n", "tanh", "NN", 1 :named("inlinable"))
.annotate 'line', 1723
    nqp_get_sc_object $P5650, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5649, $P5650, "QAST"
    get_who $P5648, $P5649
    set $P5647, $P5648["Operations"]
    unless_null $P5647, fallback992
    nqp_get_sc_object $P5651, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5647, $P5651
  fallback992:
    $P5647."add_core_pirop_mapping"("sech_n", "sech", "NN", 1 :named("inlinable"))
.annotate 'line', 1726
    nqp_get_sc_object $P5655, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5654, $P5655, "QAST"
    get_who $P5653, $P5654
    set $P5652, $P5653["Operations"]
    unless_null $P5652, fallback993
    nqp_get_sc_object $P5656, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5652, $P5656
  fallback993:
    $P5652."add_core_pirop_mapping"("bitor_i", "bor", "Iii", 1 :named("inlinable"))
.annotate 'line', 1727
    nqp_get_sc_object $P5660, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5659, $P5660, "QAST"
    get_who $P5658, $P5659
    set $P5657, $P5658["Operations"]
    unless_null $P5657, fallback994
    nqp_get_sc_object $P5661, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5657, $P5661
  fallback994:
    $P5657."add_core_pirop_mapping"("bitor_I", "nqp_bigint_bor", "PPPP", 1 :named("inlinable"))
.annotate 'line', 1728
    nqp_get_sc_object $P5665, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5664, $P5665, "QAST"
    get_who $P5663, $P5664
    set $P5662, $P5663["Operations"]
    unless_null $P5662, fallback995
    nqp_get_sc_object $P5666, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5662, $P5666
  fallback995:
    $P5662."add_core_pirop_mapping"("bitxor_i", "bxor", "Iii", 1 :named("inlinable"))
.annotate 'line', 1729
    nqp_get_sc_object $P5670, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5669, $P5670, "QAST"
    get_who $P5668, $P5669
    set $P5667, $P5668["Operations"]
    unless_null $P5667, fallback996
    nqp_get_sc_object $P5671, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5667, $P5671
  fallback996:
    $P5667."add_core_pirop_mapping"("bitxor_I", "nqp_bigint_bxor", "PPPP", 1 :named("inlinable"))
.annotate 'line', 1730
    nqp_get_sc_object $P5675, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5674, $P5675, "QAST"
    get_who $P5673, $P5674
    set $P5672, $P5673["Operations"]
    unless_null $P5672, fallback997
    nqp_get_sc_object $P5676, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5672, $P5676
  fallback997:
    $P5672."add_core_pirop_mapping"("bitand_i", "band", "Iii", 1 :named("inlinable"))
.annotate 'line', 1731
    nqp_get_sc_object $P5680, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5679, $P5680, "QAST"
    get_who $P5678, $P5679
    set $P5677, $P5678["Operations"]
    unless_null $P5677, fallback998
    nqp_get_sc_object $P5681, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5677, $P5681
  fallback998:
    $P5677."add_core_pirop_mapping"("bitand_I", "nqp_bigint_band", "PPPP", 1 :named("inlinable"))
.annotate 'line', 1732
    nqp_get_sc_object $P5685, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5684, $P5685, "QAST"
    get_who $P5683, $P5684
    set $P5682, $P5683["Operations"]
    unless_null $P5682, fallback999
    nqp_get_sc_object $P5686, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5682, $P5686
  fallback999:
    $P5682."add_core_pirop_mapping"("bitneg_i", "bnot", "Ii", 1 :named("inlinable"))
.annotate 'line', 1733
    nqp_get_sc_object $P5690, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5689, $P5690, "QAST"
    get_who $P5688, $P5689
    set $P5687, $P5688["Operations"]
    unless_null $P5687, fallback1000
    nqp_get_sc_object $P5691, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5687, $P5691
  fallback1000:
    $P5687."add_core_pirop_mapping"("bitneg_I", "nqp_bigint_bnot", "PPP", 1 :named("inlinable"))
.annotate 'line', 1734
    nqp_get_sc_object $P5695, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5694, $P5695, "QAST"
    get_who $P5693, $P5694
    set $P5692, $P5693["Operations"]
    unless_null $P5692, fallback1001
    nqp_get_sc_object $P5696, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5692, $P5696
  fallback1001:
    $P5692."add_core_pirop_mapping"("bitshiftl_i", "shl", "Iii", 1 :named("inlinable"))
.annotate 'line', 1735
    nqp_get_sc_object $P5700, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5699, $P5700, "QAST"
    get_who $P5698, $P5699
    set $P5697, $P5698["Operations"]
    unless_null $P5697, fallback1002
    nqp_get_sc_object $P5701, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5697, $P5701
  fallback1002:
    $P5697."add_core_pirop_mapping"("bitshiftl_I", "nqp_bigint_shl", "PPIP", 1 :named("inlinable"))
.annotate 'line', 1736
    nqp_get_sc_object $P5705, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5704, $P5705, "QAST"
    get_who $P5703, $P5704
    set $P5702, $P5703["Operations"]
    unless_null $P5702, fallback1003
    nqp_get_sc_object $P5706, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5702, $P5706
  fallback1003:
    $P5702."add_core_pirop_mapping"("bitshiftr_i", "shr", "Iii", 1 :named("inlinable"))
.annotate 'line', 1737
    nqp_get_sc_object $P5710, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5709, $P5710, "QAST"
    get_who $P5708, $P5709
    set $P5707, $P5708["Operations"]
    unless_null $P5707, fallback1004
    nqp_get_sc_object $P5711, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5707, $P5711
  fallback1004:
    $P5707."add_core_pirop_mapping"("bitshiftr_I", "nqp_bigint_shr", "PPIP", 1 :named("inlinable"))
.annotate 'line', 1740
    nqp_get_sc_object $P5715, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5714, $P5715, "QAST"
    get_who $P5713, $P5714
    set $P5712, $P5713["Operations"]
    unless_null $P5712, fallback1005
    nqp_get_sc_object $P5716, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5712, $P5716
  fallback1005:
    $P5712."add_core_pirop_mapping"("bitor_s", "bors", "Sss", 1 :named("inlinable"))
.annotate 'line', 1741
    nqp_get_sc_object $P5720, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5719, $P5720, "QAST"
    get_who $P5718, $P5719
    set $P5717, $P5718["Operations"]
    unless_null $P5717, fallback1006
    nqp_get_sc_object $P5721, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5717, $P5721
  fallback1006:
    $P5717."add_core_pirop_mapping"("bitxor_s", "bxors", "Sss", 1 :named("inlinable"))
.annotate 'line', 1742
    nqp_get_sc_object $P5725, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5724, $P5725, "QAST"
    get_who $P5723, $P5724
    set $P5722, $P5723["Operations"]
    unless_null $P5722, fallback1007
    nqp_get_sc_object $P5726, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5722, $P5726
  fallback1007:
    $P5722."add_core_pirop_mapping"("bitand_s", "bands", "Sss", 1 :named("inlinable"))
.annotate 'line', 1745
    nqp_get_sc_object $P5730, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5729, $P5730, "QAST"
    get_who $P5728, $P5729
    set $P5727, $P5728["Operations"]
    unless_null $P5727, fallback1008
    nqp_get_sc_object $P5731, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5727, $P5731
  fallback1008:
    $P5727."add_core_pirop_mapping"("chars", "length", "Is", 1 :named("inlinable"))
.annotate 'line', 1746
    nqp_get_sc_object $P5735, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5734, $P5735, "QAST"
    get_who $P5733, $P5734
    set $P5732, $P5733["Operations"]
    unless_null $P5732, fallback1009
    nqp_get_sc_object $P5736, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5732, $P5736
  fallback1009:
    $P5732."add_core_pirop_mapping"("concat", "concat", "Sss", 1 :named("inlinable"))
.annotate 'line', 1747
    nqp_get_sc_object $P5740, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5739, $P5740, "QAST"
    get_who $P5738, $P5739
    set $P5737, $P5738["Operations"]
    unless_null $P5737, fallback1010
    nqp_get_sc_object $P5741, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5737, $P5741
  fallback1010:
    $P5737."add_core_pirop_mapping"("concat_s", "concat", "Sss", 1 :named("inlinable"))
.annotate 'line', 1748
    nqp_get_sc_object $P5745, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5744, $P5745, "QAST"
    get_who $P5743, $P5744
    set $P5742, $P5743["Operations"]
    unless_null $P5742, fallback1011
    nqp_get_sc_object $P5746, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5742, $P5746
  fallback1011:
    $P5742."add_core_pirop_mapping"("join", "join", "SsP", 1 :named("inlinable"))
.annotate 'line', 1749
    nqp_get_sc_object $P5750, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5749, $P5750, "QAST"
    get_who $P5748, $P5749
    set $P5747, $P5748["Operations"]
    unless_null $P5747, fallback1012
    nqp_get_sc_object $P5751, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5747, $P5751
  fallback1012:
    $P5747."add_core_pirop_mapping"("split", "split", "Pss", 1 :named("inlinable"))
.annotate 'line', 1750
    nqp_get_sc_object $P5755, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5754, $P5755, "QAST"
    get_who $P5753, $P5754
    set $P5752, $P5753["Operations"]
    unless_null $P5752, fallback1013
    nqp_get_sc_object $P5756, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5752, $P5756
  fallback1013:
    $P5752."add_core_pirop_mapping"("chr", "chr", "Si", 1 :named("inlinable"))
.annotate 'line', 1751
    nqp_get_sc_object $P5760, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5759, $P5760, "QAST"
    get_who $P5758, $P5759
    set $P5757, $P5758["Operations"]
    unless_null $P5757, fallback1014
    nqp_get_sc_object $P5761, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5757, $P5761
  fallback1014:
    $P5757."add_core_pirop_mapping"("lc", "downcase", "Ss", 1 :named("inlinable"))
.annotate 'line', 1752
    nqp_get_sc_object $P5765, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5764, $P5765, "QAST"
    get_who $P5763, $P5764
    set $P5762, $P5763["Operations"]
    unless_null $P5762, fallback1015
    nqp_get_sc_object $P5766, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5762, $P5766
  fallback1015:
    $P5762."add_core_pirop_mapping"("uc", "upcase", "Ss", 1 :named("inlinable"))
.annotate 'line', 1753
    nqp_get_sc_object $P5770, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5769, $P5770, "QAST"
    get_who $P5768, $P5769
    set $P5767, $P5768["Operations"]
    unless_null $P5767, fallback1016
    nqp_get_sc_object $P5771, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5767, $P5771
  fallback1016:
    $P5767."add_core_pirop_mapping"("x", "repeat", "Ssi", 1 :named("inlinable"))
.annotate 'line', 1754
    nqp_get_sc_object $P5775, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5774, $P5775, "QAST"
    get_who $P5773, $P5774
    set $P5772, $P5773["Operations"]
    unless_null $P5772, fallback1017
    nqp_get_sc_object $P5776, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5772, $P5776
  fallback1017:
    $P5772."add_core_pirop_mapping"("iscclass", "is_cclass", "Iisi", 1 :named("inlinable"))
.annotate 'line', 1755
    nqp_get_sc_object $P5780, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5779, $P5780, "QAST"
    get_who $P5778, $P5779
    set $P5777, $P5778["Operations"]
    unless_null $P5777, fallback1018
    nqp_get_sc_object $P5781, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5777, $P5781
  fallback1018:
    $P5777."add_core_pirop_mapping"("findcclass", "find_cclass", "Iisii", 1 :named("inlinable"))
.annotate 'line', 1756
    nqp_get_sc_object $P5785, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5784, $P5785, "QAST"
    get_who $P5783, $P5784
    set $P5782, $P5783["Operations"]
    unless_null $P5782, fallback1019
    nqp_get_sc_object $P5786, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5782, $P5786
  fallback1019:
    $P5782."add_core_pirop_mapping"("findnotcclass", "find_not_cclass", "Iisii", 1 :named("inlinable"))
.annotate 'line', 1757
    nqp_get_sc_object $P5790, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5789, $P5790, "QAST"
    get_who $P5788, $P5789
    set $P5787, $P5788["Operations"]
    unless_null $P5787, fallback1020
    nqp_get_sc_object $P5791, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5787, $P5791
  fallback1020:
    $P5787."add_core_pirop_mapping"("sprintf", "sprintf", "SsP", 1 :named("inlinable"))
.annotate 'line', 1760
    nqp_get_sc_object $P5795, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5794, $P5795, "QAST"
    get_who $P5793, $P5794
    set $P5792, $P5793["Operations"]
    unless_null $P5792, fallback1021
    nqp_get_sc_object $P5796, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5792, $P5796
  fallback1021:
    $P5792."add_core_pirop_mapping"("substr2", "substr", "Ssi", 1 :named("inlinable"))
.annotate 'line', 1761
    nqp_get_sc_object $P5800, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5799, $P5800, "QAST"
    get_who $P5798, $P5799
    set $P5797, $P5798["Operations"]
    unless_null $P5797, fallback1022
    nqp_get_sc_object $P5801, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5797, $P5801
  fallback1022:
    $P5797."add_core_pirop_mapping"("substr3", "substr", "Ssii", 1 :named("inlinable"))
.annotate 'line', 1762
    nqp_get_sc_object $P5805, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5804, $P5805, "QAST"
    get_who $P5803, $P5804
    set $P5802, $P5803["Operations"]
    unless_null $P5802, fallback1023
    nqp_get_sc_object $P5806, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5802, $P5806
  fallback1023:
    .const 'Sub' $P5808 = 'cuid_252_1359572548.257' 
    capture_lex $P5808
    newclosure $P5807, $P5808
    $P5802."add_core_op"("substr", $P5807, 1 :named("inlinable"))
.annotate 'line', 1770
    nqp_get_sc_object $P5812, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5811, $P5812, "QAST"
    get_who $P5810, $P5811
    set $P5809, $P5810["Operations"]
    unless_null $P5809, fallback1028
    nqp_get_sc_object $P5813, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5809, $P5813
  fallback1028:
    $P5809."add_core_pirop_mapping"("ordfirst", "ord", "Is", 1 :named("inlinable"))
.annotate 'line', 1771
    nqp_get_sc_object $P5817, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5816, $P5817, "QAST"
    get_who $P5815, $P5816
    set $P5814, $P5815["Operations"]
    unless_null $P5814, fallback1029
    nqp_get_sc_object $P5818, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5814, $P5818
  fallback1029:
    $P5814."add_core_pirop_mapping"("ordat", "ord", "Isi", 1 :named("inlinable"))
.annotate 'line', 1772
    nqp_get_sc_object $P5822, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5821, $P5822, "QAST"
    get_who $P5820, $P5821
    set $P5819, $P5820["Operations"]
    unless_null $P5819, fallback1030
    nqp_get_sc_object $P5823, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5819, $P5823
  fallback1030:
    .const 'Sub' $P5825 = 'cuid_253_1359572548.257' 
    capture_lex $P5825
    newclosure $P5824, $P5825
    $P5819."add_core_op"("ord", $P5824, 1 :named("inlinable"))
.annotate 'line', 1780
    nqp_get_sc_object $P5829, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5828, $P5829, "QAST"
    get_who $P5827, $P5828
    set $P5826, $P5827["Operations"]
    unless_null $P5826, fallback1035
    nqp_get_sc_object $P5830, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5826, $P5830
  fallback1035:
    $P5826."add_core_pirop_mapping"("indexfrom", "index", "Issi", 1 :named("inlinable"))
.annotate 'line', 1781
    nqp_get_sc_object $P5834, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5833, $P5834, "QAST"
    get_who $P5832, $P5833
    set $P5831, $P5832["Operations"]
    unless_null $P5831, fallback1036
    nqp_get_sc_object $P5835, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5831, $P5835
  fallback1036:
    .const 'Sub' $P5837 = 'cuid_254_1359572548.257' 
    capture_lex $P5837
    newclosure $P5836, $P5837
    $P5831."add_core_op"("index", $P5836, 1 :named("inlinable"))
.annotate 'line', 1787
    nqp_get_sc_object $P5841, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5840, $P5841, "QAST"
    get_who $P5839, $P5840
    set $P5838, $P5839["Operations"]
    unless_null $P5838, fallback1042
    nqp_get_sc_object $P5842, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5838, $P5842
  fallback1042:
    $P5838."add_core_pirop_mapping"("rindexfrom", "rindex", "Issi", 1 :named("inlinable"))
.annotate 'line', 1788
    nqp_get_sc_object $P5846, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5845, $P5846, "QAST"
    get_who $P5844, $P5845
    set $P5843, $P5844["Operations"]
    unless_null $P5843, fallback1043
    nqp_get_sc_object $P5847, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5843, $P5847
  fallback1043:
    $P5843."add_core_pirop_mapping"("rindexfromend", "rindex", "Iss", 1 :named("inlinable"))
.annotate 'line', 1789
    nqp_get_sc_object $P5851, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5850, $P5851, "QAST"
    get_who $P5849, $P5850
    set $P5848, $P5849["Operations"]
    unless_null $P5848, fallback1044
    nqp_get_sc_object $P5852, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5848, $P5852
  fallback1044:
    .const 'Sub' $P5854 = 'cuid_255_1359572548.257' 
    capture_lex $P5854
    newclosure $P5853, $P5854
    $P5848."add_core_op"("rindex", $P5853, 1 :named("inlinable"))
.annotate 'line', 1797
    nqp_get_sc_object $P5858, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5857, $P5858, "QAST"
    get_who $P5856, $P5857
    set $P5855, $P5856["Operations"]
    unless_null $P5855, fallback1049
    nqp_get_sc_object $P5859, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5855, $P5859
  fallback1049:
    $P5855."add_core_pirop_mapping"("cmp_i", "cmp", "Iii", 1 :named("inlinable"))
.annotate 'line', 1798
    nqp_get_sc_object $P5863, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5862, $P5863, "QAST"
    get_who $P5861, $P5862
    set $P5860, $P5861["Operations"]
    unless_null $P5860, fallback1050
    nqp_get_sc_object $P5864, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5860, $P5864
  fallback1050:
    $P5860."add_core_pirop_mapping"("iseq_i", "iseq", "Iii", 1 :named("inlinable"))
.annotate 'line', 1799
    nqp_get_sc_object $P5868, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5867, $P5868, "QAST"
    get_who $P5866, $P5867
    set $P5865, $P5866["Operations"]
    unless_null $P5865, fallback1051
    nqp_get_sc_object $P5869, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5865, $P5869
  fallback1051:
    $P5865."add_core_pirop_mapping"("isne_i", "isne", "Iii", 1 :named("inlinable"))
.annotate 'line', 1800
    nqp_get_sc_object $P5873, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5872, $P5873, "QAST"
    get_who $P5871, $P5872
    set $P5870, $P5871["Operations"]
    unless_null $P5870, fallback1052
    nqp_get_sc_object $P5874, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5870, $P5874
  fallback1052:
    $P5870."add_core_pirop_mapping"("islt_i", "islt", "Iii", 1 :named("inlinable"))
.annotate 'line', 1801
    nqp_get_sc_object $P5878, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5877, $P5878, "QAST"
    get_who $P5876, $P5877
    set $P5875, $P5876["Operations"]
    unless_null $P5875, fallback1053
    nqp_get_sc_object $P5879, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5875, $P5879
  fallback1053:
    $P5875."add_core_pirop_mapping"("isle_i", "isle", "Iii", 1 :named("inlinable"))
.annotate 'line', 1802
    nqp_get_sc_object $P5883, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5882, $P5883, "QAST"
    get_who $P5881, $P5882
    set $P5880, $P5881["Operations"]
    unless_null $P5880, fallback1054
    nqp_get_sc_object $P5884, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5880, $P5884
  fallback1054:
    $P5880."add_core_pirop_mapping"("isgt_i", "isgt", "Iii", 1 :named("inlinable"))
.annotate 'line', 1803
    nqp_get_sc_object $P5888, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5887, $P5888, "QAST"
    get_who $P5886, $P5887
    set $P5885, $P5886["Operations"]
    unless_null $P5885, fallback1055
    nqp_get_sc_object $P5889, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5885, $P5889
  fallback1055:
    $P5885."add_core_pirop_mapping"("isge_i", "isge", "Iii", 1 :named("inlinable"))
.annotate 'line', 1805
    nqp_get_sc_object $P5893, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5892, $P5893, "QAST"
    get_who $P5891, $P5892
    set $P5890, $P5891["Operations"]
    unless_null $P5890, fallback1056
    nqp_get_sc_object $P5894, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5890, $P5894
  fallback1056:
    $P5890."add_core_pirop_mapping"("bool_I", "nqp_bigint_bool", "IP", 1 :named("inlinable"))
.annotate 'line', 1806
    nqp_get_sc_object $P5898, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5897, $P5898, "QAST"
    get_who $P5896, $P5897
    set $P5895, $P5896["Operations"]
    unless_null $P5895, fallback1057
    nqp_get_sc_object $P5899, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5895, $P5899
  fallback1057:
    $P5895."add_core_pirop_mapping"("cmp_I", "nqp_bigint_cmp", "IPP", 1 :named("inlinable"))
.annotate 'line', 1807
    nqp_get_sc_object $P5903, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5902, $P5903, "QAST"
    get_who $P5901, $P5902
    set $P5900, $P5901["Operations"]
    unless_null $P5900, fallback1058
    nqp_get_sc_object $P5904, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5900, $P5904
  fallback1058:
    $P5900."add_core_pirop_mapping"("iseq_I", "nqp_bigint_eq", "IPP", 1 :named("inlinable"))
.annotate 'line', 1808
    nqp_get_sc_object $P5908, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5907, $P5908, "QAST"
    get_who $P5906, $P5907
    set $P5905, $P5906["Operations"]
    unless_null $P5905, fallback1059
    nqp_get_sc_object $P5909, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5905, $P5909
  fallback1059:
    $P5905."add_core_pirop_mapping"("isne_I", "nqp_bigint_ne", "IPP", 1 :named("inlinable"))
.annotate 'line', 1809
    nqp_get_sc_object $P5913, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5912, $P5913, "QAST"
    get_who $P5911, $P5912
    set $P5910, $P5911["Operations"]
    unless_null $P5910, fallback1060
    nqp_get_sc_object $P5914, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5910, $P5914
  fallback1060:
    $P5910."add_core_pirop_mapping"("islt_I", "nqp_bigint_lt", "IPP", 1 :named("inlinable"))
.annotate 'line', 1810
    nqp_get_sc_object $P5918, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5917, $P5918, "QAST"
    get_who $P5916, $P5917
    set $P5915, $P5916["Operations"]
    unless_null $P5915, fallback1061
    nqp_get_sc_object $P5919, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5915, $P5919
  fallback1061:
    $P5915."add_core_pirop_mapping"("isle_I", "nqp_bigint_le", "IPP", 1 :named("inlinable"))
.annotate 'line', 1811
    nqp_get_sc_object $P5923, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5922, $P5923, "QAST"
    get_who $P5921, $P5922
    set $P5920, $P5921["Operations"]
    unless_null $P5920, fallback1062
    nqp_get_sc_object $P5924, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5920, $P5924
  fallback1062:
    $P5920."add_core_pirop_mapping"("isgt_I", "nqp_bigint_gt", "IPP", 1 :named("inlinable"))
.annotate 'line', 1812
    nqp_get_sc_object $P5928, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5927, $P5928, "QAST"
    get_who $P5926, $P5927
    set $P5925, $P5926["Operations"]
    unless_null $P5925, fallback1063
    nqp_get_sc_object $P5929, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5925, $P5929
  fallback1063:
    $P5925."add_core_pirop_mapping"("isge_I", "nqp_bigint_ge", "IPP", 1 :named("inlinable"))
.annotate 'line', 1814
    nqp_get_sc_object $P5933, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5932, $P5933, "QAST"
    get_who $P5931, $P5932
    set $P5930, $P5931["Operations"]
    unless_null $P5930, fallback1064
    nqp_get_sc_object $P5934, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5930, $P5934
  fallback1064:
    $P5930."add_core_pirop_mapping"("cmp_n", "cmp", "Inn", 1 :named("inlinable"))
.annotate 'line', 1815
    nqp_get_sc_object $P5938, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5937, $P5938, "QAST"
    get_who $P5936, $P5937
    set $P5935, $P5936["Operations"]
    unless_null $P5935, fallback1065
    nqp_get_sc_object $P5939, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5935, $P5939
  fallback1065:
    $P5935."add_core_pirop_mapping"("iseq_n", "iseq", "Inn", 1 :named("inlinable"))
.annotate 'line', 1816
    nqp_get_sc_object $P5943, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5942, $P5943, "QAST"
    get_who $P5941, $P5942
    set $P5940, $P5941["Operations"]
    unless_null $P5940, fallback1066
    nqp_get_sc_object $P5944, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5940, $P5944
  fallback1066:
    $P5940."add_core_pirop_mapping"("isne_n", "isne", "Inn", 1 :named("inlinable"))
.annotate 'line', 1817
    nqp_get_sc_object $P5948, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5947, $P5948, "QAST"
    get_who $P5946, $P5947
    set $P5945, $P5946["Operations"]
    unless_null $P5945, fallback1067
    nqp_get_sc_object $P5949, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5945, $P5949
  fallback1067:
    $P5945."add_core_pirop_mapping"("islt_n", "islt", "Inn", 1 :named("inlinable"))
.annotate 'line', 1818
    nqp_get_sc_object $P5953, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5952, $P5953, "QAST"
    get_who $P5951, $P5952
    set $P5950, $P5951["Operations"]
    unless_null $P5950, fallback1068
    nqp_get_sc_object $P5954, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5950, $P5954
  fallback1068:
    $P5950."add_core_pirop_mapping"("isle_n", "isle", "Inn", 1 :named("inlinable"))
.annotate 'line', 1819
    nqp_get_sc_object $P5958, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5957, $P5958, "QAST"
    get_who $P5956, $P5957
    set $P5955, $P5956["Operations"]
    unless_null $P5955, fallback1069
    nqp_get_sc_object $P5959, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5955, $P5959
  fallback1069:
    $P5955."add_core_pirop_mapping"("isgt_n", "isgt", "Inn", 1 :named("inlinable"))
.annotate 'line', 1820
    nqp_get_sc_object $P5963, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5962, $P5963, "QAST"
    get_who $P5961, $P5962
    set $P5960, $P5961["Operations"]
    unless_null $P5960, fallback1070
    nqp_get_sc_object $P5964, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5960, $P5964
  fallback1070:
    $P5960."add_core_pirop_mapping"("isge_n", "isge", "Inn", 1 :named("inlinable"))
.annotate 'line', 1822
    nqp_get_sc_object $P5968, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5967, $P5968, "QAST"
    get_who $P5966, $P5967
    set $P5965, $P5966["Operations"]
    unless_null $P5965, fallback1071
    nqp_get_sc_object $P5969, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5965, $P5969
  fallback1071:
    $P5965."add_core_pirop_mapping"("cmp_s", "cmp", "Iss", 1 :named("inlinable"))
.annotate 'line', 1823
    nqp_get_sc_object $P5973, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5972, $P5973, "QAST"
    get_who $P5971, $P5972
    set $P5970, $P5971["Operations"]
    unless_null $P5970, fallback1072
    nqp_get_sc_object $P5974, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5970, $P5974
  fallback1072:
    $P5970."add_core_pirop_mapping"("iseq_s", "iseq", "Iss", 1 :named("inlinable"))
.annotate 'line', 1824
    nqp_get_sc_object $P5978, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5977, $P5978, "QAST"
    get_who $P5976, $P5977
    set $P5975, $P5976["Operations"]
    unless_null $P5975, fallback1073
    nqp_get_sc_object $P5979, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5975, $P5979
  fallback1073:
    $P5975."add_core_pirop_mapping"("isne_s", "isne", "Iss", 1 :named("inlinable"))
.annotate 'line', 1825
    nqp_get_sc_object $P5983, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5982, $P5983, "QAST"
    get_who $P5981, $P5982
    set $P5980, $P5981["Operations"]
    unless_null $P5980, fallback1074
    nqp_get_sc_object $P5984, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5980, $P5984
  fallback1074:
    $P5980."add_core_pirop_mapping"("islt_s", "islt", "Iss", 1 :named("inlinable"))
.annotate 'line', 1826
    nqp_get_sc_object $P5988, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5987, $P5988, "QAST"
    get_who $P5986, $P5987
    set $P5985, $P5986["Operations"]
    unless_null $P5985, fallback1075
    nqp_get_sc_object $P5989, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5985, $P5989
  fallback1075:
    $P5985."add_core_pirop_mapping"("isle_s", "isle", "Iss", 1 :named("inlinable"))
.annotate 'line', 1827
    nqp_get_sc_object $P5993, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5992, $P5993, "QAST"
    get_who $P5991, $P5992
    set $P5990, $P5991["Operations"]
    unless_null $P5990, fallback1076
    nqp_get_sc_object $P5994, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5990, $P5994
  fallback1076:
    $P5990."add_core_pirop_mapping"("isgt_s", "isgt", "Iss", 1 :named("inlinable"))
.annotate 'line', 1828
    nqp_get_sc_object $P5998, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5997, $P5998, "QAST"
    get_who $P5996, $P5997
    set $P5995, $P5996["Operations"]
    unless_null $P5995, fallback1077
    nqp_get_sc_object $P5999, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5995, $P5999
  fallback1077:
    $P5995."add_core_pirop_mapping"("isge_s", "isge", "Iss", 1 :named("inlinable"))
.annotate 'line', 1831
    nqp_get_sc_object $P6003, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6002, $P6003, "QAST"
    get_who $P6001, $P6002
    set $P6000, $P6001["Operations"]
    unless_null $P6000, fallback1078
    nqp_get_sc_object $P6004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6000, $P6004
  fallback1078:
    $P6000."add_core_pirop_mapping"("fromstr_I", "nqp_bigint_from_str", "PsP", 1 :named("inlinable"))
.annotate 'line', 1832
    nqp_get_sc_object $P6008, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6007, $P6008, "QAST"
    get_who $P6006, $P6007
    set $P6005, $P6006["Operations"]
    unless_null $P6005, fallback1079
    nqp_get_sc_object $P6009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6005, $P6009
  fallback1079:
    $P6005."add_core_pirop_mapping"("tostr_I", "nqp_bigint_to_str", "SP", 1 :named("inlinable"))
.annotate 'line', 1833
    nqp_get_sc_object $P6013, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6012, $P6013, "QAST"
    get_who $P6011, $P6012
    set $P6010, $P6011["Operations"]
    unless_null $P6010, fallback1080
    nqp_get_sc_object $P6014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6010, $P6014
  fallback1080:
    $P6010."add_core_pirop_mapping"("base_I", "nqp_bigint_to_str_base", "SPI", 1 :named("inlinable"))
.annotate 'line', 1834
    nqp_get_sc_object $P6018, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6017, $P6018, "QAST"
    get_who $P6016, $P6017
    set $P6015, $P6016["Operations"]
    unless_null $P6015, fallback1081
    nqp_get_sc_object $P6019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6015, $P6019
  fallback1081:
    $P6015."add_core_pirop_mapping"("isbig_I", "nqp_bigint_is_big", "IP", 1 :named("inlinable"))
.annotate 'line', 1835
    nqp_get_sc_object $P6023, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6022, $P6023, "QAST"
    get_who $P6021, $P6022
    set $P6020, $P6021["Operations"]
    unless_null $P6020, fallback1082
    nqp_get_sc_object $P6024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6020, $P6024
  fallback1082:
    $P6020."add_core_pirop_mapping"("fromnum_I", "nqp_bigint_from_num", "PNP", 1 :named("inlinable"))
.annotate 'line', 1836
    nqp_get_sc_object $P6028, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6027, $P6028, "QAST"
    get_who $P6026, $P6027
    set $P6025, $P6026["Operations"]
    unless_null $P6025, fallback1083
    nqp_get_sc_object $P6029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6025, $P6029
  fallback1083:
    $P6025."add_core_pirop_mapping"("tonum_I", "nqp_bigint_to_num", "NP", 1 :named("inlinable"))
.annotate 'line', 1839
    nqp_get_sc_object $P6033, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6032, $P6033, "QAST"
    get_who $P6031, $P6032
    set $P6030, $P6031["Operations"]
    unless_null $P6030, fallback1084
    nqp_get_sc_object $P6034, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6030, $P6034
  fallback1084:
    $P6030."add_core_pirop_mapping"("buildnativecall", "nqp_native_call_build", "vPsssPP")
.annotate 'line', 1840
    nqp_get_sc_object $P6038, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6037, $P6038, "QAST"
    get_who $P6036, $P6037
    set $P6035, $P6036["Operations"]
    unless_null $P6035, fallback1085
    nqp_get_sc_object $P6039, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6035, $P6039
  fallback1085:
    $P6035."add_core_pirop_mapping"("nativecall", "nqp_native_call", "PPPP")
.annotate 'line', 1841
    nqp_get_sc_object $P6043, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6042, $P6043, "QAST"
    get_who $P6041, $P6042
    set $P6040, $P6041["Operations"]
    unless_null $P6040, fallback1086
    nqp_get_sc_object $P6044, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6040, $P6044
  fallback1086:
    $P6040."add_core_pirop_mapping"("nativecallrefresh", "nqp_native_call_wb", "vP")
.annotate 'line', 1844
    nqp_get_sc_object $P6048, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6047, $P6048, "QAST"
    get_who $P6046, $P6047
    set $P6045, $P6046["Operations"]
    unless_null $P6045, fallback1087
    nqp_get_sc_object $P6049, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6045, $P6049
  fallback1087:
    $P6045."add_core_pirop_mapping"("not_i", "not", "Ii", 1 :named("inlinable"))
.annotate 'line', 1847
    nqp_get_sc_object $P6053, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6052, $P6053, "QAST"
    get_who $P6051, $P6052
    set $P6050, $P6051["Operations"]
    unless_null $P6050, fallback1088
    nqp_get_sc_object $P6054, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6050, $P6054
  fallback1088:
    $P6050."add_core_pirop_mapping"("atkey", "set", "PQs", 1 :named("inlinable"))
.annotate 'line', 1848
    nqp_get_sc_object $P6058, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6057, $P6058, "QAST"
    get_who $P6056, $P6057
    set $P6055, $P6056["Operations"]
    unless_null $P6055, fallback1089
    nqp_get_sc_object $P6059, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6055, $P6059
  fallback1089:
    $P6055."add_core_pirop_mapping"("atkey_i", "set", "IQs", 1 :named("inlinable"))
.annotate 'line', 1849
    nqp_get_sc_object $P6063, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6062, $P6063, "QAST"
    get_who $P6061, $P6062
    set $P6060, $P6061["Operations"]
    unless_null $P6060, fallback1090
    nqp_get_sc_object $P6064, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6060, $P6064
  fallback1090:
    $P6060."add_core_pirop_mapping"("atkey_n", "set", "NQs", 1 :named("inlinable"))
.annotate 'line', 1850
    nqp_get_sc_object $P6068, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6067, $P6068, "QAST"
    get_who $P6066, $P6067
    set $P6065, $P6066["Operations"]
    unless_null $P6065, fallback1091
    nqp_get_sc_object $P6069, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6065, $P6069
  fallback1091:
    $P6065."add_core_pirop_mapping"("atkey_s", "set", "SQs", 1 :named("inlinable"))
.annotate 'line', 1851
    nqp_get_sc_object $P6073, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6072, $P6073, "QAST"
    get_who $P6071, $P6072
    set $P6070, $P6071["Operations"]
    unless_null $P6070, fallback1092
    nqp_get_sc_object $P6074, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6070, $P6074
  fallback1092:
    $P6070."add_core_pirop_mapping"("atpos", "set", "PQi", 1 :named("inlinable"))
.annotate 'line', 1852
    nqp_get_sc_object $P6078, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6077, $P6078, "QAST"
    get_who $P6076, $P6077
    set $P6075, $P6076["Operations"]
    unless_null $P6075, fallback1093
    nqp_get_sc_object $P6079, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6075, $P6079
  fallback1093:
    $P6075."add_core_pirop_mapping"("atpos_i", "set", "IQi", 1 :named("inlinable"))
.annotate 'line', 1853
    nqp_get_sc_object $P6083, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6082, $P6083, "QAST"
    get_who $P6081, $P6082
    set $P6080, $P6081["Operations"]
    unless_null $P6080, fallback1094
    nqp_get_sc_object $P6084, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6080, $P6084
  fallback1094:
    $P6080."add_core_pirop_mapping"("atpos_n", "set", "NQi", 1 :named("inlinable"))
.annotate 'line', 1854
    nqp_get_sc_object $P6088, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6087, $P6088, "QAST"
    get_who $P6086, $P6087
    set $P6085, $P6086["Operations"]
    unless_null $P6085, fallback1095
    nqp_get_sc_object $P6089, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6085, $P6089
  fallback1095:
    $P6085."add_core_pirop_mapping"("atpos_s", "set", "SQi", 1 :named("inlinable"))
.annotate 'line', 1855
    nqp_get_sc_object $P6093, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6092, $P6093, "QAST"
    get_who $P6091, $P6092
    set $P6090, $P6091["Operations"]
    unless_null $P6090, fallback1096
    nqp_get_sc_object $P6094, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6090, $P6094
  fallback1096:
    $P6090."add_core_pirop_mapping"("bindkey", "set", "1QsP", 1 :named("inlinable"))
.annotate 'line', 1856
    nqp_get_sc_object $P6098, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6097, $P6098, "QAST"
    get_who $P6096, $P6097
    set $P6095, $P6096["Operations"]
    unless_null $P6095, fallback1097
    nqp_get_sc_object $P6099, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6095, $P6099
  fallback1097:
    $P6095."add_core_pirop_mapping"("bindkey_i", "set", "1QsI", 1 :named("inlinable"))
.annotate 'line', 1857
    nqp_get_sc_object $P6103, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6102, $P6103, "QAST"
    get_who $P6101, $P6102
    set $P6100, $P6101["Operations"]
    unless_null $P6100, fallback1098
    nqp_get_sc_object $P6104, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6100, $P6104
  fallback1098:
    $P6100."add_core_pirop_mapping"("bindkey_n", "set", "1QsN", 1 :named("inlinable"))
.annotate 'line', 1858
    nqp_get_sc_object $P6108, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6107, $P6108, "QAST"
    get_who $P6106, $P6107
    set $P6105, $P6106["Operations"]
    unless_null $P6105, fallback1099
    nqp_get_sc_object $P6109, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6105, $P6109
  fallback1099:
    $P6105."add_core_pirop_mapping"("bindkey_s", "set", "1QsS", 1 :named("inlinable"))
.annotate 'line', 1859
    nqp_get_sc_object $P6113, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6112, $P6113, "QAST"
    get_who $P6111, $P6112
    set $P6110, $P6111["Operations"]
    unless_null $P6110, fallback1100
    nqp_get_sc_object $P6114, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6110, $P6114
  fallback1100:
    $P6110."add_core_pirop_mapping"("bindpos", "set", "1QiP", 1 :named("inlinable"))
.annotate 'line', 1860
    nqp_get_sc_object $P6118, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6117, $P6118, "QAST"
    get_who $P6116, $P6117
    set $P6115, $P6116["Operations"]
    unless_null $P6115, fallback1101
    nqp_get_sc_object $P6119, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6115, $P6119
  fallback1101:
    $P6115."add_core_pirop_mapping"("bindpos_i", "set", "1Qii", 1 :named("inlinable"))
.annotate 'line', 1861
    nqp_get_sc_object $P6123, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6122, $P6123, "QAST"
    get_who $P6121, $P6122
    set $P6120, $P6121["Operations"]
    unless_null $P6120, fallback1102
    nqp_get_sc_object $P6124, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6120, $P6124
  fallback1102:
    $P6120."add_core_pirop_mapping"("bindpos_n", "set", "1Qin", 1 :named("inlinable"))
.annotate 'line', 1862
    nqp_get_sc_object $P6128, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6127, $P6128, "QAST"
    get_who $P6126, $P6127
    set $P6125, $P6126["Operations"]
    unless_null $P6125, fallback1103
    nqp_get_sc_object $P6129, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6125, $P6129
  fallback1103:
    $P6125."add_core_pirop_mapping"("bindpos_s", "set", "1Qis", 1 :named("inlinable"))
.annotate 'line', 1863
    nqp_get_sc_object $P6133, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6132, $P6133, "QAST"
    get_who $P6131, $P6132
    set $P6130, $P6131["Operations"]
    unless_null $P6130, fallback1104
    nqp_get_sc_object $P6134, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6130, $P6134
  fallback1104:
    $P6130."add_core_pirop_mapping"("deletekey", "delete", "0Qs", 1 :named("inlinable"))
.annotate 'line', 1864
    nqp_get_sc_object $P6138, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6137, $P6138, "QAST"
    get_who $P6136, $P6137
    set $P6135, $P6136["Operations"]
    unless_null $P6135, fallback1105
    nqp_get_sc_object $P6139, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6135, $P6139
  fallback1105:
    $P6135."add_core_pirop_mapping"("deletepos", "delete", "0Qi", 1 :named("inlinable"))
.annotate 'line', 1865
    nqp_get_sc_object $P6143, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6142, $P6143, "QAST"
    get_who $P6141, $P6142
    set $P6140, $P6141["Operations"]
    unless_null $P6140, fallback1106
    nqp_get_sc_object $P6144, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6140, $P6144
  fallback1106:
    $P6140."add_core_pirop_mapping"("existskey", "exists", "IQs", 1 :named("inlinable"))
.annotate 'line', 1866
    nqp_get_sc_object $P6148, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6147, $P6148, "QAST"
    get_who $P6146, $P6147
    set $P6145, $P6146["Operations"]
    unless_null $P6145, fallback1107
    nqp_get_sc_object $P6149, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6145, $P6149
  fallback1107:
    $P6145."add_core_pirop_mapping"("existspos", "exists", "IQi", 1 :named("inlinable"))
.annotate 'line', 1867
    nqp_get_sc_object $P6153, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6152, $P6153, "QAST"
    get_who $P6151, $P6152
    set $P6150, $P6151["Operations"]
    unless_null $P6150, fallback1108
    nqp_get_sc_object $P6154, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6150, $P6154
  fallback1108:
    $P6150."add_core_pirop_mapping"("elems", "elements", "IP", 1 :named("inlinable"))
.annotate 'line', 1868
    nqp_get_sc_object $P6158, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6157, $P6158, "QAST"
    get_who $P6156, $P6157
    set $P6155, $P6156["Operations"]
    unless_null $P6155, fallback1109
    nqp_get_sc_object $P6159, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6155, $P6159
  fallback1109:
    $P6155."add_core_pirop_mapping"("push", "push", "0PP", 1 :named("inlinable"))
.annotate 'line', 1869
    nqp_get_sc_object $P6163, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6162, $P6163, "QAST"
    get_who $P6161, $P6162
    set $P6160, $P6161["Operations"]
    unless_null $P6160, fallback1110
    nqp_get_sc_object $P6164, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6160, $P6164
  fallback1110:
    $P6160."add_core_pirop_mapping"("push_s", "push", "0Ps", 1 :named("inlinable"))
.annotate 'line', 1870
    nqp_get_sc_object $P6168, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6167, $P6168, "QAST"
    get_who $P6166, $P6167
    set $P6165, $P6166["Operations"]
    unless_null $P6165, fallback1111
    nqp_get_sc_object $P6169, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6165, $P6169
  fallback1111:
    $P6165."add_core_pirop_mapping"("push_i", "push", "0Pi", 1 :named("inlinable"))
.annotate 'line', 1871
    nqp_get_sc_object $P6173, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6172, $P6173, "QAST"
    get_who $P6171, $P6172
    set $P6170, $P6171["Operations"]
    unless_null $P6170, fallback1112
    nqp_get_sc_object $P6174, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6170, $P6174
  fallback1112:
    $P6170."add_core_pirop_mapping"("push_n", "push", "0Pn", 1 :named("inlinable"))
.annotate 'line', 1872
    nqp_get_sc_object $P6178, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6177, $P6178, "QAST"
    get_who $P6176, $P6177
    set $P6175, $P6176["Operations"]
    unless_null $P6175, fallback1113
    nqp_get_sc_object $P6179, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6175, $P6179
  fallback1113:
    $P6175."add_core_pirop_mapping"("pop", "pop", "PP", 1 :named("inlinable"))
.annotate 'line', 1873
    nqp_get_sc_object $P6183, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6182, $P6183, "QAST"
    get_who $P6181, $P6182
    set $P6180, $P6181["Operations"]
    unless_null $P6180, fallback1114
    nqp_get_sc_object $P6184, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6180, $P6184
  fallback1114:
    $P6180."add_core_pirop_mapping"("pop_s", "pop", "SP", 1 :named("inlinable"))
.annotate 'line', 1874
    nqp_get_sc_object $P6188, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6187, $P6188, "QAST"
    get_who $P6186, $P6187
    set $P6185, $P6186["Operations"]
    unless_null $P6185, fallback1115
    nqp_get_sc_object $P6189, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6185, $P6189
  fallback1115:
    $P6185."add_core_pirop_mapping"("pop_i", "pop", "IP", 1 :named("inlinable"))
.annotate 'line', 1875
    nqp_get_sc_object $P6193, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6192, $P6193, "QAST"
    get_who $P6191, $P6192
    set $P6190, $P6191["Operations"]
    unless_null $P6190, fallback1116
    nqp_get_sc_object $P6194, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6190, $P6194
  fallback1116:
    $P6190."add_core_pirop_mapping"("pop_n", "pop", "NP", 1 :named("inlinable"))
.annotate 'line', 1876
    nqp_get_sc_object $P6198, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6197, $P6198, "QAST"
    get_who $P6196, $P6197
    set $P6195, $P6196["Operations"]
    unless_null $P6195, fallback1117
    nqp_get_sc_object $P6199, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6195, $P6199
  fallback1117:
    $P6195."add_core_pirop_mapping"("shift", "shift", "PP", 1 :named("inlinable"))
.annotate 'line', 1877
    nqp_get_sc_object $P6203, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6202, $P6203, "QAST"
    get_who $P6201, $P6202
    set $P6200, $P6201["Operations"]
    unless_null $P6200, fallback1118
    nqp_get_sc_object $P6204, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6200, $P6204
  fallback1118:
    $P6200."add_core_pirop_mapping"("shift_s", "shift", "SP", 1 :named("inlinable"))
.annotate 'line', 1878
    nqp_get_sc_object $P6208, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6207, $P6208, "QAST"
    get_who $P6206, $P6207
    set $P6205, $P6206["Operations"]
    unless_null $P6205, fallback1119
    nqp_get_sc_object $P6209, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6205, $P6209
  fallback1119:
    $P6205."add_core_pirop_mapping"("shift_i", "shift", "IP", 1 :named("inlinable"))
.annotate 'line', 1879
    nqp_get_sc_object $P6213, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6212, $P6213, "QAST"
    get_who $P6211, $P6212
    set $P6210, $P6211["Operations"]
    unless_null $P6210, fallback1120
    nqp_get_sc_object $P6214, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6210, $P6214
  fallback1120:
    $P6210."add_core_pirop_mapping"("shift_n", "shift", "NP", 1 :named("inlinable"))
.annotate 'line', 1880
    nqp_get_sc_object $P6218, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6217, $P6218, "QAST"
    get_who $P6216, $P6217
    set $P6215, $P6216["Operations"]
    unless_null $P6215, fallback1121
    nqp_get_sc_object $P6219, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6215, $P6219
  fallback1121:
    $P6215."add_core_pirop_mapping"("unshift", "unshift", "0PP", 1 :named("inlinable"))
.annotate 'line', 1881
    nqp_get_sc_object $P6223, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6222, $P6223, "QAST"
    get_who $P6221, $P6222
    set $P6220, $P6221["Operations"]
    unless_null $P6220, fallback1122
    nqp_get_sc_object $P6224, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6220, $P6224
  fallback1122:
    $P6220."add_core_pirop_mapping"("unshift_s", "unshift", "0Ps", 1 :named("inlinable"))
.annotate 'line', 1882
    nqp_get_sc_object $P6228, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6227, $P6228, "QAST"
    get_who $P6226, $P6227
    set $P6225, $P6226["Operations"]
    unless_null $P6225, fallback1123
    nqp_get_sc_object $P6229, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6225, $P6229
  fallback1123:
    $P6225."add_core_pirop_mapping"("unshift_i", "unshift", "0Pi", 1 :named("inlinable"))
.annotate 'line', 1883
    nqp_get_sc_object $P6233, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6232, $P6233, "QAST"
    get_who $P6231, $P6232
    set $P6230, $P6231["Operations"]
    unless_null $P6230, fallback1124
    nqp_get_sc_object $P6234, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6230, $P6234
  fallback1124:
    $P6230."add_core_pirop_mapping"("unshift_n", "unshift", "0Pn", 1 :named("inlinable"))
.annotate 'line', 1884
    nqp_get_sc_object $P6238, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6237, $P6238, "QAST"
    get_who $P6236, $P6237
    set $P6235, $P6236["Operations"]
    unless_null $P6235, fallback1125
    nqp_get_sc_object $P6239, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6235, $P6239
  fallback1125:
    $P6235."add_core_pirop_mapping"("splice", "splice", "0PPii", 1 :named("inlinable"))
.annotate 'line', 1885
    nqp_get_sc_object $P6243, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6242, $P6243, "QAST"
    get_who $P6241, $P6242
    set $P6240, $P6241["Operations"]
    unless_null $P6240, fallback1126
    nqp_get_sc_object $P6244, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6240, $P6244
  fallback1126:
    $P6240."add_core_pirop_mapping"("islist", "nqp_islist", "IP", 1 :named("inlinable"))
.annotate 'line', 1886
    nqp_get_sc_object $P6248, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6247, $P6248, "QAST"
    get_who $P6246, $P6247
    set $P6245, $P6246["Operations"]
    unless_null $P6245, fallback1127
    nqp_get_sc_object $P6249, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6245, $P6249
  fallback1127:
    $P6245."add_core_pirop_mapping"("ishash", "nqp_ishash", "IP", 1 :named("inlinable"))
.annotate 'line', 1887
    nqp_get_sc_object $P6253, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6252, $P6253, "QAST"
    get_who $P6251, $P6252
    set $P6250, $P6251["Operations"]
    unless_null $P6250, fallback1128
    nqp_get_sc_object $P6254, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6250, $P6254
  fallback1128:
    $P6250."add_core_pirop_mapping"("isinvokable", "is_invokable", "IP", 1 :named("inlinable"))
.annotate 'line', 1888
    nqp_get_sc_object $P6258, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6257, $P6258, "QAST"
    get_who $P6256, $P6257
    set $P6255, $P6256["Operations"]
    unless_null $P6255, fallback1129
    nqp_get_sc_object $P6259, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6255, $P6259
  fallback1129:
    $P6255."add_core_pirop_mapping"("iterator", "iter", "PP", 1 :named("inlinable"))
.annotate 'line', 1889
    nqp_get_sc_object $P6263, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6262, $P6263, "QAST"
    get_who $P6261, $P6262
    set $P6260, $P6261["Operations"]
    unless_null $P6260, fallback1130
    nqp_get_sc_object $P6264, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6260, $P6264
  fallback1130:
    .const 'Sub' $P6266 = 'cuid_256_1359572548.257' 
    capture_lex $P6266
    newclosure $P6265, $P6266
    $P6260."add_core_op"("iterkey_s", $P6265)
.annotate 'line', 1892
    nqp_get_sc_object $P6270, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6269, $P6270, "QAST"
    get_who $P6268, $P6269
    set $P6267, $P6268["Operations"]
    unless_null $P6267, fallback1133
    nqp_get_sc_object $P6271, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6267, $P6271
  fallback1133:
    .const 'Sub' $P6273 = 'cuid_257_1359572548.257' 
    capture_lex $P6273
    newclosure $P6272, $P6273
    $P6267."add_core_op"("iterval", $P6272)
.annotate 'line', 1897
    nqp_get_sc_object $P6277, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6276, $P6277, "QAST"
    get_who $P6275, $P6276
    set $P6274, $P6275["Operations"]
    unless_null $P6274, fallback1136
    nqp_get_sc_object $P6278, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6274, $P6278
  fallback1136:
    $P6274."add_core_pirop_mapping"("r_atpos", "repr_at_pos_obj", "PPi", 1 :named("inlinable"))
.annotate 'line', 1898
    nqp_get_sc_object $P6282, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6281, $P6282, "QAST"
    get_who $P6280, $P6281
    set $P6279, $P6280["Operations"]
    unless_null $P6279, fallback1137
    nqp_get_sc_object $P6283, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6279, $P6283
  fallback1137:
    $P6279."add_core_pirop_mapping"("r_atpos_i", "repr_at_pos_int", "IPi", 1 :named("inlinable"))
.annotate 'line', 1899
    nqp_get_sc_object $P6287, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6286, $P6287, "QAST"
    get_who $P6285, $P6286
    set $P6284, $P6285["Operations"]
    unless_null $P6284, fallback1138
    nqp_get_sc_object $P6288, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6284, $P6288
  fallback1138:
    $P6284."add_core_pirop_mapping"("r_atpos_n", "repr_at_pos_num", "NPi", 1 :named("inlinable"))
.annotate 'line', 1900
    nqp_get_sc_object $P6292, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6291, $P6292, "QAST"
    get_who $P6290, $P6291
    set $P6289, $P6290["Operations"]
    unless_null $P6289, fallback1139
    nqp_get_sc_object $P6293, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6289, $P6293
  fallback1139:
    $P6289."add_core_pirop_mapping"("r_bindpos", "repr_bind_pos_obj", "2PiP", 1 :named("inlinable"))
.annotate 'line', 1901
    nqp_get_sc_object $P6297, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6296, $P6297, "QAST"
    get_who $P6295, $P6296
    set $P6294, $P6295["Operations"]
    unless_null $P6294, fallback1140
    nqp_get_sc_object $P6298, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6294, $P6298
  fallback1140:
    $P6294."add_core_pirop_mapping"("r_bindpos_i", "repr_bind_pos_int", "2Pii", 1 :named("inlinable"))
.annotate 'line', 1902
    nqp_get_sc_object $P6302, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6301, $P6302, "QAST"
    get_who $P6300, $P6301
    set $P6299, $P6300["Operations"]
    unless_null $P6299, fallback1141
    nqp_get_sc_object $P6303, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6299, $P6303
  fallback1141:
    $P6299."add_core_pirop_mapping"("r_bindpos_n", "repr_bind_pos_num", "2Pin", 1 :named("inlinable"))
.annotate 'line', 1903
    nqp_get_sc_object $P6307, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6306, $P6307, "QAST"
    get_who $P6305, $P6306
    set $P6304, $P6305["Operations"]
    unless_null $P6304, fallback1142
    nqp_get_sc_object $P6308, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6304, $P6308
  fallback1142:
    $P6304."add_core_pirop_mapping"("r_elems", "repr_elems", "IP", 1 :named("inlinable"))
.annotate 'line', 1906
    nqp_get_sc_object $P6312, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6311, $P6312, "QAST"
    get_who $P6310, $P6311
    set $P6309, $P6310["Operations"]
    unless_null $P6309, fallback1143
    nqp_get_sc_object $P6313, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6309, $P6313
  fallback1143:
    $P6309."add_core_pirop_mapping"("bindattr", "setattribute", "3PPsP", 1 :named("inlinable"))
.annotate 'line', 1907
    nqp_get_sc_object $P6317, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6316, $P6317, "QAST"
    get_who $P6315, $P6316
    set $P6314, $P6315["Operations"]
    unless_null $P6314, fallback1144
    nqp_get_sc_object $P6318, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6314, $P6318
  fallback1144:
    $P6314."add_core_pirop_mapping"("bindattr_i", "repr_bind_attr_int", "3PPsi", 1 :named("inlinable"))
.annotate 'line', 1908
    nqp_get_sc_object $P6322, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6321, $P6322, "QAST"
    get_who $P6320, $P6321
    set $P6319, $P6320["Operations"]
    unless_null $P6319, fallback1145
    nqp_get_sc_object $P6323, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6319, $P6323
  fallback1145:
    $P6319."add_core_pirop_mapping"("bindattr_n", "repr_bind_attr_num", "3PPsn", 1 :named("inlinable"))
.annotate 'line', 1909
    nqp_get_sc_object $P6327, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6326, $P6327, "QAST"
    get_who $P6325, $P6326
    set $P6324, $P6325["Operations"]
    unless_null $P6324, fallback1146
    nqp_get_sc_object $P6328, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6324, $P6328
  fallback1146:
    $P6324."add_core_pirop_mapping"("bindattr_s", "repr_bind_attr_str", "3PPss", 1 :named("inlinable"))
.annotate 'line', 1910
    nqp_get_sc_object $P6332, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6331, $P6332, "QAST"
    get_who $P6330, $P6331
    set $P6329, $P6330["Operations"]
    unless_null $P6329, fallback1147
    nqp_get_sc_object $P6333, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6329, $P6333
  fallback1147:
    $P6329."add_core_pirop_mapping"("getattr", "getattribute", "PPPs", 1 :named("inlinable"))
.annotate 'line', 1911
    nqp_get_sc_object $P6337, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6336, $P6337, "QAST"
    get_who $P6335, $P6336
    set $P6334, $P6335["Operations"]
    unless_null $P6334, fallback1148
    nqp_get_sc_object $P6338, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6334, $P6338
  fallback1148:
    $P6334."add_core_pirop_mapping"("getattr_i", "repr_get_attr_int", "IPPs", 1 :named("inlinable"))
.annotate 'line', 1912
    nqp_get_sc_object $P6342, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6341, $P6342, "QAST"
    get_who $P6340, $P6341
    set $P6339, $P6340["Operations"]
    unless_null $P6339, fallback1149
    nqp_get_sc_object $P6343, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6339, $P6343
  fallback1149:
    $P6339."add_core_pirop_mapping"("getattr_n", "repr_get_attr_num", "NPPs", 1 :named("inlinable"))
.annotate 'line', 1913
    nqp_get_sc_object $P6347, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6346, $P6347, "QAST"
    get_who $P6345, $P6346
    set $P6344, $P6345["Operations"]
    unless_null $P6344, fallback1150
    nqp_get_sc_object $P6348, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6344, $P6348
  fallback1150:
    $P6344."add_core_pirop_mapping"("getattr_s", "repr_get_attr_str", "SPPs", 1 :named("inlinable"))
.annotate 'line', 1914
    nqp_get_sc_object $P6352, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6351, $P6352, "QAST"
    get_who $P6350, $P6351
    set $P6349, $P6350["Operations"]
    unless_null $P6349, fallback1151
    nqp_get_sc_object $P6353, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6349, $P6353
  fallback1151:
    $P6349."add_core_pirop_mapping"("attrinited", "repr_is_attr_initialized", "IPPs", 1 :named("inlinable"))
.annotate 'line', 1915
    nqp_get_sc_object $P6357, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6356, $P6357, "QAST"
    get_who $P6355, $P6356
    set $P6354, $P6355["Operations"]
    unless_null $P6354, fallback1152
    nqp_get_sc_object $P6358, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6354, $P6358
  fallback1152:
    $P6354."add_core_pirop_mapping"("create", "repr_instance_of", "PP", 1 :named("inlinable"))
.annotate 'line', 1916
    nqp_get_sc_object $P6362, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6361, $P6362, "QAST"
    get_who $P6360, $P6361
    set $P6359, $P6360["Operations"]
    unless_null $P6359, fallback1153
    nqp_get_sc_object $P6363, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6359, $P6363
  fallback1153:
    $P6359."add_core_pirop_mapping"("clone", "clone", "PP", 1 :named("inlinable"))
.annotate 'line', 1917
    nqp_get_sc_object $P6367, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6366, $P6367, "QAST"
    get_who $P6365, $P6366
    set $P6364, $P6365["Operations"]
    unless_null $P6364, fallback1154
    nqp_get_sc_object $P6368, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6364, $P6368
  fallback1154:
    $P6364."add_core_pirop_mapping"("isconcrete", "repr_defined", "IP", 1 :named("inlinable"))
.annotate 'line', 1918
    nqp_get_sc_object $P6372, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6371, $P6372, "QAST"
    get_who $P6370, $P6371
    set $P6369, $P6370["Operations"]
    unless_null $P6369, fallback1155
    nqp_get_sc_object $P6373, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6369, $P6373
  fallback1155:
    $P6369."add_core_pirop_mapping"("iscont", "is_container", "IP", 1 :named("inlinable"))
.annotate 'line', 1919
    nqp_get_sc_object $P6377, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6376, $P6377, "QAST"
    get_who $P6375, $P6376
    set $P6374, $P6375["Operations"]
    unless_null $P6374, fallback1156
    nqp_get_sc_object $P6378, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6374, $P6378
  fallback1156:
    $P6374."add_core_pirop_mapping"("decont", "nqp_decontainerize", "PP", 1 :named("inlinable"))
.annotate 'line', 1920
    nqp_get_sc_object $P6382, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6381, $P6382, "QAST"
    get_who $P6380, $P6381
    set $P6379, $P6380["Operations"]
    unless_null $P6379, fallback1157
    nqp_get_sc_object $P6383, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6379, $P6383
  fallback1157:
    $P6379."add_core_pirop_mapping"("isnull", "isnull", "IP", 1 :named("inlinable"))
.annotate 'line', 1921
    nqp_get_sc_object $P6387, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6386, $P6387, "QAST"
    get_who $P6385, $P6386
    set $P6384, $P6385["Operations"]
    unless_null $P6384, fallback1158
    nqp_get_sc_object $P6388, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6384, $P6388
  fallback1158:
    $P6384."add_core_pirop_mapping"("isnull_s", "isnull", "IS", 1 :named("inlinable"))
.annotate 'line', 1922
    nqp_get_sc_object $P6392, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6391, $P6392, "QAST"
    get_who $P6390, $P6391
    set $P6389, $P6390["Operations"]
    unless_null $P6389, fallback1159
    nqp_get_sc_object $P6393, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6389, $P6393
  fallback1159:
    $P6389."add_core_pirop_mapping"("istrue", "istrue", "IP", 1 :named("inlinable"))
.annotate 'line', 1923
    nqp_get_sc_object $P6397, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6396, $P6397, "QAST"
    get_who $P6395, $P6396
    set $P6394, $P6395["Operations"]
    unless_null $P6394, fallback1160
    nqp_get_sc_object $P6398, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6394, $P6398
  fallback1160:
    $P6394."add_core_pirop_mapping"("isfalse", "isfalse", "IP", 1 :named("inlinable"))
.annotate 'line', 1924
    nqp_get_sc_object $P6402, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6401, $P6402, "QAST"
    get_who $P6400, $P6401
    set $P6399, $P6400["Operations"]
    unless_null $P6399, fallback1161
    nqp_get_sc_object $P6403, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6399, $P6403
  fallback1161:
    $P6399."add_core_pirop_mapping"("istype", "type_check", "IPP", 1 :named("inlinable"))
.annotate 'line', 1925
    nqp_get_sc_object $P6407, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6406, $P6407, "QAST"
    get_who $P6405, $P6406
    set $P6404, $P6405["Operations"]
    unless_null $P6404, fallback1162
    nqp_get_sc_object $P6408, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6404, $P6408
  fallback1162:
    $P6404."add_core_pirop_mapping"("null", "null", "P", 1 :named("inlinable"))
.annotate 'line', 1926
    nqp_get_sc_object $P6412, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6411, $P6412, "QAST"
    get_who $P6410, $P6411
    set $P6409, $P6410["Operations"]
    unless_null $P6409, fallback1163
    nqp_get_sc_object $P6413, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6409, $P6413
  fallback1163:
    $P6409."add_core_pirop_mapping"("null_s", "null", "S", 1 :named("inlinable"))
.annotate 'line', 1927
    nqp_get_sc_object $P6417, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6416, $P6417, "QAST"
    get_who $P6415, $P6416
    set $P6414, $P6415["Operations"]
    unless_null $P6414, fallback1164
    nqp_get_sc_object $P6418, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6414, $P6418
  fallback1164:
    $P6414."add_core_pirop_mapping"("unbox_i", "repr_unbox_int", "IP", 1 :named("inlinable"))
.annotate 'line', 1928
    nqp_get_sc_object $P6422, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6421, $P6422, "QAST"
    get_who $P6420, $P6421
    set $P6419, $P6420["Operations"]
    unless_null $P6419, fallback1165
    nqp_get_sc_object $P6423, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6419, $P6423
  fallback1165:
    $P6419."add_core_pirop_mapping"("unbox_n", "repr_unbox_num", "NP", 1 :named("inlinable"))
.annotate 'line', 1929
    nqp_get_sc_object $P6427, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6426, $P6427, "QAST"
    get_who $P6425, $P6426
    set $P6424, $P6425["Operations"]
    unless_null $P6424, fallback1166
    nqp_get_sc_object $P6428, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6424, $P6428
  fallback1166:
    $P6424."add_core_pirop_mapping"("unbox_s", "repr_unbox_str", "SP", 1 :named("inlinable"))
.annotate 'line', 1930
    nqp_get_sc_object $P6432, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6431, $P6432, "QAST"
    get_who $P6430, $P6431
    set $P6429, $P6430["Operations"]
    unless_null $P6429, fallback1167
    nqp_get_sc_object $P6433, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6429, $P6433
  fallback1167:
    $P6429."add_core_pirop_mapping"("box_i", "repr_box_int", "PiP", 1 :named("inlinable"))
.annotate 'line', 1931
    nqp_get_sc_object $P6437, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6436, $P6437, "QAST"
    get_who $P6435, $P6436
    set $P6434, $P6435["Operations"]
    unless_null $P6434, fallback1168
    nqp_get_sc_object $P6438, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6434, $P6438
  fallback1168:
    $P6434."add_core_pirop_mapping"("box_n", "repr_box_num", "PnP", 1 :named("inlinable"))
.annotate 'line', 1932
    nqp_get_sc_object $P6442, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6441, $P6442, "QAST"
    get_who $P6440, $P6441
    set $P6439, $P6440["Operations"]
    unless_null $P6439, fallback1169
    nqp_get_sc_object $P6443, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6439, $P6443
  fallback1169:
    $P6439."add_core_pirop_mapping"("box_s", "repr_box_str", "PsP", 1 :named("inlinable"))
.annotate 'line', 1933
    nqp_get_sc_object $P6447, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6446, $P6447, "QAST"
    get_who $P6445, $P6446
    set $P6444, $P6445["Operations"]
    unless_null $P6444, fallback1170
    nqp_get_sc_object $P6448, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6444, $P6448
  fallback1170:
    $P6444."add_core_pirop_mapping"("what", "get_what", "PP", 1 :named("inlinable"))
.annotate 'line', 1934
    nqp_get_sc_object $P6452, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6451, $P6452, "QAST"
    get_who $P6450, $P6451
    set $P6449, $P6450["Operations"]
    unless_null $P6449, fallback1171
    nqp_get_sc_object $P6453, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6449, $P6453
  fallback1171:
    $P6449."add_core_pirop_mapping"("how", "get_how", "PP", 1 :named("inlinable"))
.annotate 'line', 1935
    nqp_get_sc_object $P6457, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6456, $P6457, "QAST"
    get_who $P6455, $P6456
    set $P6454, $P6455["Operations"]
    unless_null $P6454, fallback1172
    nqp_get_sc_object $P6458, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6454, $P6458
  fallback1172:
    $P6454."add_core_pirop_mapping"("who", "get_who", "PP", 1 :named("inlinable"))
.annotate 'line', 1936
    nqp_get_sc_object $P6462, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6461, $P6462, "QAST"
    get_who $P6460, $P6461
    set $P6459, $P6460["Operations"]
    unless_null $P6459, fallback1173
    nqp_get_sc_object $P6463, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6459, $P6463
  fallback1173:
    $P6459."add_core_pirop_mapping"("where", "get_id", "IP", 1 :named("inlinable"))
.annotate 'line', 1937
    nqp_get_sc_object $P6467, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6466, $P6467, "QAST"
    get_who $P6465, $P6466
    set $P6464, $P6465["Operations"]
    unless_null $P6464, fallback1174
    nqp_get_sc_object $P6468, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6464, $P6468
  fallback1174:
    $P6464."add_core_pirop_mapping"("findmethod", "find_method", "PPs", 1 :named("inlinable"))
.annotate 'line', 1938
    nqp_get_sc_object $P6472, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6471, $P6472, "QAST"
    get_who $P6470, $P6471
    set $P6469, $P6470["Operations"]
    unless_null $P6469, fallback1175
    nqp_get_sc_object $P6473, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6469, $P6473
  fallback1175:
    $P6469."add_core_pirop_mapping"("defined", "defined", "IP", 1 :named("inlinable"))
.annotate 'line', 1939
    nqp_get_sc_object $P6477, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6476, $P6477, "QAST"
    get_who $P6475, $P6476
    set $P6474, $P6475["Operations"]
    unless_null $P6474, fallback1176
    nqp_get_sc_object $P6478, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6474, $P6478
  fallback1176:
    $P6474."add_core_pirop_mapping"("can", "can", "IPs", 1 :named("inlinable"))
.annotate 'line', 1940
    nqp_get_sc_object $P6482, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6481, $P6482, "QAST"
    get_who $P6480, $P6481
    set $P6479, $P6480["Operations"]
    unless_null $P6479, fallback1177
    nqp_get_sc_object $P6483, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6479, $P6483
  fallback1177:
    $P6479."add_core_pirop_mapping"("reprname", "repr_name", "SP", 1 :named("inlinable"))
.annotate 'line', 1941
    nqp_get_sc_object $P6487, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6486, $P6487, "QAST"
    get_who $P6485, $P6486
    set $P6484, $P6485["Operations"]
    unless_null $P6484, fallback1178
    nqp_get_sc_object $P6488, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6484, $P6488
  fallback1178:
    $P6484."add_core_pirop_mapping"("newtype", "repr_type_object_for", "PPs", 1 :named("inlinable"))
.annotate 'line', 1942
    nqp_get_sc_object $P6492, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6491, $P6492, "QAST"
    get_who $P6490, $P6491
    set $P6489, $P6490["Operations"]
    unless_null $P6489, fallback1179
    nqp_get_sc_object $P6493, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6489, $P6493
  fallback1179:
    $P6489."add_core_pirop_mapping"("composetype", "repr_compose", "0PP", 1 :named("inlinable"))
.annotate 'line', 1943
    nqp_get_sc_object $P6497, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6496, $P6497, "QAST"
    get_who $P6495, $P6496
    set $P6494, $P6495["Operations"]
    unless_null $P6494, fallback1180
    nqp_get_sc_object $P6498, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6494, $P6498
  fallback1180:
    $P6494."add_core_pirop_mapping"("setwho", "set_who", "0PP", 1 :named("inlinable"))
.annotate 'line', 1944
    nqp_get_sc_object $P6502, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6501, $P6502, "QAST"
    get_who $P6500, $P6501
    set $P6499, $P6500["Operations"]
    unless_null $P6499, fallback1181
    nqp_get_sc_object $P6503, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6499, $P6503
  fallback1181:
    $P6499."add_core_pirop_mapping"("rebless", "repr_change_type", "0PP", 1 :named("inlinable"))
.annotate 'line', 1945
    nqp_get_sc_object $P6507, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6506, $P6507, "QAST"
    get_who $P6505, $P6506
    set $P6504, $P6505["Operations"]
    unless_null $P6504, fallback1182
    nqp_get_sc_object $P6508, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6504, $P6508
  fallback1182:
    $P6504."add_core_pirop_mapping"("setboolspec", "set_boolification_spec", "0PiP", 1 :named("inlinable"))
.annotate 'line', 1946
    nqp_get_sc_object $P6512, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6511, $P6512, "QAST"
    get_who $P6510, $P6511
    set $P6509, $P6510["Operations"]
    unless_null $P6509, fallback1183
    nqp_get_sc_object $P6513, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6509, $P6513
  fallback1183:
    $P6509."add_core_pirop_mapping"("setmethcache", "publish_method_cache", "0PP", 1 :named("inlinable"))
.annotate 'line', 1947
    nqp_get_sc_object $P6517, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6516, $P6517, "QAST"
    get_who $P6515, $P6516
    set $P6514, $P6515["Operations"]
    unless_null $P6514, fallback1184
    nqp_get_sc_object $P6518, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6514, $P6518
  fallback1184:
    $P6514."add_core_pirop_mapping"("setmethcacheauth", "set_method_cache_authoritativeness", "0Pi", 1 :named("inlinable"))
.annotate 'line', 1948
    nqp_get_sc_object $P6522, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6521, $P6522, "QAST"
    get_who $P6520, $P6521
    set $P6519, $P6520["Operations"]
    unless_null $P6519, fallback1185
    nqp_get_sc_object $P6523, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6519, $P6523
  fallback1185:
    $P6519."add_core_pirop_mapping"("settypecache", "publish_type_check_cache", "0PP", 1 :named("inlinable"))
.annotate 'line', 1949
    nqp_get_sc_object $P6527, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6526, $P6527, "QAST"
    get_who $P6525, $P6526
    set $P6524, $P6525["Operations"]
    unless_null $P6524, fallback1186
    nqp_get_sc_object $P6528, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6524, $P6528
  fallback1186:
    $P6524."add_core_pirop_mapping"("objprimspec", "repr_get_primitive_type_spec", "IP", 1 :named("inlinable"))
.annotate 'line', 1952
    nqp_get_sc_object $P6532, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6531, $P6532, "QAST"
    get_who $P6530, $P6531
    set $P6529, $P6530["Operations"]
    unless_null $P6529, fallback1187
    nqp_get_sc_object $P6533, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6529, $P6533
  fallback1187:
    $P6529."add_core_pirop_mapping"("getlex", "find_lex", "Ps")
.annotate 'line', 1953
    nqp_get_sc_object $P6537, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6536, $P6537, "QAST"
    get_who $P6535, $P6536
    set $P6534, $P6535["Operations"]
    unless_null $P6534, fallback1188
    nqp_get_sc_object $P6538, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6534, $P6538
  fallback1188:
    $P6534."add_core_pirop_mapping"("getlex_i", "find_lex", "Is")
.annotate 'line', 1954
    nqp_get_sc_object $P6542, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6541, $P6542, "QAST"
    get_who $P6540, $P6541
    set $P6539, $P6540["Operations"]
    unless_null $P6539, fallback1189
    nqp_get_sc_object $P6543, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6539, $P6543
  fallback1189:
    $P6539."add_core_pirop_mapping"("getlex_n", "find_lex", "Ns")
.annotate 'line', 1955
    nqp_get_sc_object $P6547, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6546, $P6547, "QAST"
    get_who $P6545, $P6546
    set $P6544, $P6545["Operations"]
    unless_null $P6544, fallback1190
    nqp_get_sc_object $P6548, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6544, $P6548
  fallback1190:
    $P6544."add_core_pirop_mapping"("getlex_s", "find_lex", "Ss")
.annotate 'line', 1956
    nqp_get_sc_object $P6552, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6551, $P6552, "QAST"
    get_who $P6550, $P6551
    set $P6549, $P6550["Operations"]
    unless_null $P6549, fallback1191
    nqp_get_sc_object $P6553, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6549, $P6553
  fallback1191:
    $P6549."add_core_pirop_mapping"("bindlex", "store_lex", "1sP")
.annotate 'line', 1957
    nqp_get_sc_object $P6557, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6556, $P6557, "QAST"
    get_who $P6555, $P6556
    set $P6554, $P6555["Operations"]
    unless_null $P6554, fallback1192
    nqp_get_sc_object $P6558, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6554, $P6558
  fallback1192:
    $P6554."add_core_pirop_mapping"("bindlex_i", "store_lex", "1si")
.annotate 'line', 1958
    nqp_get_sc_object $P6562, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6561, $P6562, "QAST"
    get_who $P6560, $P6561
    set $P6559, $P6560["Operations"]
    unless_null $P6559, fallback1193
    nqp_get_sc_object $P6563, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6559, $P6563
  fallback1193:
    $P6559."add_core_pirop_mapping"("bindlex_n", "store_lex", "1sn")
.annotate 'line', 1959
    nqp_get_sc_object $P6567, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6566, $P6567, "QAST"
    get_who $P6565, $P6566
    set $P6564, $P6565["Operations"]
    unless_null $P6564, fallback1194
    nqp_get_sc_object $P6568, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6564, $P6568
  fallback1194:
    $P6564."add_core_pirop_mapping"("bindlex_s", "store_lex", "1ss")
.annotate 'line', 1960
    nqp_get_sc_object $P6572, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6571, $P6572, "QAST"
    get_who $P6570, $P6571
    set $P6569, $P6570["Operations"]
    unless_null $P6569, fallback1195
    nqp_get_sc_object $P6573, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6569, $P6573
  fallback1195:
    $P6569."add_core_pirop_mapping"("getlexdyn", "find_dynamic_lex", "Ps")
.annotate 'line', 1961
    nqp_get_sc_object $P6577, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6576, $P6577, "QAST"
    get_who $P6575, $P6576
    set $P6574, $P6575["Operations"]
    unless_null $P6574, fallback1196
    nqp_get_sc_object $P6578, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6574, $P6578
  fallback1196:
    $P6574."add_core_pirop_mapping"("bindlexdyn", "store_dynamic_lex", "1sP")
.annotate 'line', 1964
    nqp_get_sc_object $P6582, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6581, $P6582, "QAST"
    get_who $P6580, $P6581
    set $P6579, $P6580["Operations"]
    unless_null $P6579, fallback1197
    nqp_get_sc_object $P6583, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6579, $P6583
  fallback1197:
    $P6579."add_core_pirop_mapping"("takeclosure", "newclosure", "PP")
.annotate 'line', 1965
    nqp_get_sc_object $P6587, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6586, $P6587, "QAST"
    get_who $P6585, $P6586
    set $P6584, $P6585["Operations"]
    unless_null $P6584, fallback1198
    nqp_get_sc_object $P6588, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6584, $P6588
  fallback1198:
    $P6584."add_core_pirop_mapping"("getcodeobj", "get_sub_code_object", "PP")
.annotate 'line', 1966
    nqp_get_sc_object $P6592, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6591, $P6592, "QAST"
    get_who $P6590, $P6591
    set $P6589, $P6590["Operations"]
    unless_null $P6589, fallback1199
    nqp_get_sc_object $P6593, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6589, $P6593
  fallback1199:
    $P6589."add_core_pirop_mapping"("setcodeobj", "set_sub_code_object", "1PP")
.annotate 'line', 1967
    nqp_get_sc_object $P6597, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6596, $P6597, "QAST"
    get_who $P6595, $P6596
    set $P6594, $P6595["Operations"]
    unless_null $P6594, fallback1200
    nqp_get_sc_object $P6598, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6594, $P6598
  fallback1200:
    $P6594."add_core_pirop_mapping"("getcodename", "set", "SP")
.annotate 'line', 1968
    nqp_get_sc_object $P6602, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6601, $P6602, "QAST"
    get_who $P6600, $P6601
    set $P6599, $P6600["Operations"]
    unless_null $P6599, fallback1201
    nqp_get_sc_object $P6603, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6599, $P6603
  fallback1201:
    $P6599."add_core_pirop_mapping"("setcodename", "assign", "1Ps")
.annotate 'line', 1969
    nqp_get_sc_object $P6607, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6606, $P6607, "QAST"
    get_who $P6605, $P6606
    set $P6604, $P6605["Operations"]
    unless_null $P6604, fallback1202
    nqp_get_sc_object $P6608, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6604, $P6608
  fallback1202:
    .const 'Sub' $P6610 = 'cuid_258_1359572548.257' 
    capture_lex $P6610
    newclosure $P6609, $P6610
    $P6604."add_core_op"("setstaticlex", $P6609)
.annotate 'line', 1998
    nqp_get_sc_object $P6614, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6613, $P6614, "QAST"
    get_who $P6612, $P6613
    set $P6611, $P6612["Operations"]
    unless_null $P6611, fallback1217
    nqp_get_sc_object $P6615, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6611, $P6615
  fallback1217:
    $P6611."add_core_pirop_mapping"("sha1", "nqp_sha1", "Ss")
.annotate 'line', 1999
    nqp_get_sc_object $P6619, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6618, $P6619, "QAST"
    get_who $P6617, $P6618
    set $P6616, $P6617["Operations"]
    unless_null $P6616, fallback1218
    nqp_get_sc_object $P6620, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6616, $P6620
  fallback1218:
    $P6616."add_core_pirop_mapping"("createsc", "nqp_create_sc", "Ps")
.annotate 'line', 2000
    nqp_get_sc_object $P6624, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6623, $P6624, "QAST"
    get_who $P6622, $P6623
    set $P6621, $P6622["Operations"]
    unless_null $P6621, fallback1219
    nqp_get_sc_object $P6625, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6621, $P6625
  fallback1219:
    $P6621."add_core_pirop_mapping"("scsetobj", "set", "1QiP")
.annotate 'line', 2001
    nqp_get_sc_object $P6629, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6628, $P6629, "QAST"
    get_who $P6627, $P6628
    set $P6626, $P6627["Operations"]
    unless_null $P6626, fallback1220
    nqp_get_sc_object $P6630, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6626, $P6630
  fallback1220:
    $P6626."add_core_pirop_mapping"("scsetcode", "nqp_add_code_ref_to_sc", "2PiP")
.annotate 'line', 2002
    nqp_get_sc_object $P6634, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6633, $P6634, "QAST"
    get_who $P6632, $P6633
    set $P6631, $P6632["Operations"]
    unless_null $P6631, fallback1221
    nqp_get_sc_object $P6635, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6631, $P6635
  fallback1221:
    $P6631."add_core_pirop_mapping"("scgetobj", "set", "PQi")
.annotate 'line', 2003
    nqp_get_sc_object $P6639, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6638, $P6639, "QAST"
    get_who $P6637, $P6638
    set $P6636, $P6637["Operations"]
    unless_null $P6636, fallback1222
    nqp_get_sc_object $P6640, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6636, $P6640
  fallback1222:
    .const 'Sub' $P6642 = 'cuid_259_1359572548.257' 
    capture_lex $P6642
    newclosure $P6641, $P6642
    $P6636."add_core_op"("scgethandle", $P6641)
.annotate 'line', 2009
    nqp_get_sc_object $P6646, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6645, $P6646, "QAST"
    get_who $P6644, $P6645
    set $P6643, $P6644["Operations"]
    unless_null $P6643, fallback1225
    nqp_get_sc_object $P6647, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6643, $P6647
  fallback1225:
    .const 'Sub' $P6649 = 'cuid_260_1359572548.257' 
    capture_lex $P6649
    newclosure $P6648, $P6649
    $P6643."add_core_op"("scgetobjidx", $P6648)
.annotate 'line', 2015
    nqp_get_sc_object $P6653, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6652, $P6653, "QAST"
    get_who $P6651, $P6652
    set $P6650, $P6651["Operations"]
    unless_null $P6650, fallback1229
    nqp_get_sc_object $P6654, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6650, $P6654
  fallback1229:
    .const 'Sub' $P6656 = 'cuid_261_1359572548.257' 
    capture_lex $P6656
    newclosure $P6655, $P6656
    $P6650."add_core_op"("scsetdesc", $P6655)
.annotate 'line', 2021
    nqp_get_sc_object $P6660, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6659, $P6660, "QAST"
    get_who $P6658, $P6659
    set $P6657, $P6658["Operations"]
    unless_null $P6657, fallback1233
    nqp_get_sc_object $P6661, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6657, $P6661
  fallback1233:
    .const 'Sub' $P6663 = 'cuid_262_1359572548.257' 
    capture_lex $P6663
    newclosure $P6662, $P6663
    $P6657."add_core_op"("scobjcount", $P6662)
.annotate 'line', 2027
    nqp_get_sc_object $P6667, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6666, $P6667, "QAST"
    get_who $P6665, $P6666
    set $P6664, $P6665["Operations"]
    unless_null $P6664, fallback1236
    nqp_get_sc_object $P6668, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6664, $P6668
  fallback1236:
    $P6664."add_core_pirop_mapping"("setobjsc", "nqp_set_sc_for_object", "0PP")
.annotate 'line', 2028
    nqp_get_sc_object $P6672, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6671, $P6672, "QAST"
    get_who $P6670, $P6671
    set $P6669, $P6670["Operations"]
    unless_null $P6669, fallback1237
    nqp_get_sc_object $P6673, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6669, $P6673
  fallback1237:
    $P6669."add_core_pirop_mapping"("getobjsc", "nqp_get_sc_for_object", "PP")
.annotate 'line', 2029
    nqp_get_sc_object $P6677, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6676, $P6677, "QAST"
    get_who $P6675, $P6676
    set $P6674, $P6675["Operations"]
    unless_null $P6674, fallback1238
    nqp_get_sc_object $P6678, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6674, $P6678
  fallback1238:
    $P6674."add_core_pirop_mapping"("serialize", "nqp_serialize_sc", "SPP")
.annotate 'line', 2030
    nqp_get_sc_object $P6682, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6681, $P6682, "QAST"
    get_who $P6680, $P6681
    set $P6679, $P6680["Operations"]
    unless_null $P6679, fallback1239
    nqp_get_sc_object $P6683, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6679, $P6683
  fallback1239:
    $P6679."add_core_pirop_mapping"("deserialize", "nqp_deserialize_sc", "0sPPPP")
.annotate 'line', 2031
    nqp_get_sc_object $P6687, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6686, $P6687, "QAST"
    get_who $P6685, $P6686
    set $P6684, $P6685["Operations"]
    unless_null $P6684, fallback1240
    nqp_get_sc_object $P6688, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6684, $P6688
  fallback1240:
    $P6684."add_core_pirop_mapping"("wval", "nqp_get_sc_object", "Psi")
.annotate 'line', 2034
    nqp_get_sc_object $P6692, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6691, $P6692, "QAST"
    get_who $P6690, $P6691
    set $P6689, $P6690["Operations"]
    unless_null $P6689, fallback1241
    nqp_get_sc_object $P6693, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6689, $P6693
  fallback1241:
    $P6689."add_core_pirop_mapping"("getcomp", "compreg", "Ps")
.annotate 'line', 2035
    nqp_get_sc_object $P6697, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6696, $P6697, "QAST"
    get_who $P6695, $P6696
    set $P6694, $P6695["Operations"]
    unless_null $P6694, fallback1242
    nqp_get_sc_object $P6698, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6694, $P6698
  fallback1242:
    $P6694."add_core_pirop_mapping"("bindcomp", "compreg", "1sP")
.annotate 'line', 2036
    nqp_get_sc_object $P6702, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6701, $P6702, "QAST"
    get_who $P6700, $P6701
    set $P6699, $P6700["Operations"]
    unless_null $P6699, fallback1243
    nqp_get_sc_object $P6703, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6699, $P6703
  fallback1243:
    $P6699."add_core_pirop_mapping"("getcurhllsym", "get_hll_global", "Ps")
.annotate 'line', 2037
    nqp_get_sc_object $P6707, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6706, $P6707, "QAST"
    get_who $P6705, $P6706
    set $P6704, $P6705["Operations"]
    unless_null $P6704, fallback1244
    nqp_get_sc_object $P6708, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6704, $P6708
  fallback1244:
    $P6704."add_core_pirop_mapping"("bindcurhllsym", "set_hll_global", "1sP")
.annotate 'line', 2038
    nqp_get_sc_object $P6712, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6711, $P6712, "QAST"
    get_who $P6710, $P6711
    set $P6709, $P6710["Operations"]
    unless_null $P6709, fallback1245
    nqp_get_sc_object $P6713, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6709, $P6713
  fallback1245:
    $P6709."add_core_pirop_mapping"("loadbytecode", "load_bytecode", "0s")
.annotate 'line', 2041
    nqp_get_sc_object $P6717, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6716, $P6717, "QAST"
    get_who $P6715, $P6716
    set $P6714, $P6715["Operations"]
    unless_null $P6714, fallback1246
    nqp_get_sc_object $P6718, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6714, $P6718
  fallback1246:
    $P6714."add_core_pirop_mapping"("exit", "exit", "0i", 1 :named("inlinable"))
.annotate 'line', 2042
    nqp_get_sc_object $P6722, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P6721, $P6722, "QAST"
    get_who $P6720, $P6721
    set $P6719, $P6720["Operations"]
    unless_null $P6719, fallback1247
    nqp_get_sc_object $P6723, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P6719, $P6723
  fallback1247:
    $P6719."add_core_pirop_mapping"("sleep", "sleep", "0n", 1 :named("inlinable"))
    .const 'Sub' $P6724 = 'cuid_264_1359572548.257' 
    capture_lex $P6724
    $P6725 = $P6724()
    .return () 
.end
.HLL "nqp"
.namespace []
.sub "handle_arg" :subid("cuid_144_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1159
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .param pmc _lex_param_5 :named("coerce") :optional 
    .param int haz_param_1 :opt_flag 
    .const 'Sub' $P5020 = 'cuid_143_1359572548.257' 
    capture_lex $P5020 
    if haz_param_1, default20
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set _lex_param_5, $P5019
  default20:
    .lex "$arg_post", $P101 
    .lex "$result", $P102 
    .lex "$arg", _lex_param_0 
    .lex "$qastcomp", _lex_param_1 
    .lex "$ops", _lex_param_2 
    .lex "@pos_arg_results", _lex_param_3 
    .lex "@named_arg_results", _lex_param_4 
    .lex "$coerce", _lex_param_5 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 1160
    $P5003 = _lex_param_1."as_post"(_lex_param_0)
    set $P101, $P5003
    unless _lex_param_5 goto if10_end11 
.annotate 'line', 1161
.annotate 'line', 1162
    $P5004 = _lex_param_1."coerce"($P101, _lex_param_5)
    set $P101, $P5004
  if10_end11:
.annotate 'line', 1164
    _lex_param_2."push"($P101)
.annotate 'line', 1165
    $P5005 = $P101."result"()
    set $P102, $P5005
.annotate 'line', 1166
    $P5006 = _lex_param_0."flat"()
    unless $P5006 goto if11_else12 
    set $S5002, $P102
    concat $S5001, $S5002, " :flat"
    box $P5007, $S5001
    set $P102, $P5007
.annotate 'line', 1168
    $P5008 = _lex_param_0."named"()
    set $P5010, $P5008
    unless $P5008 goto if12_end15 
    set $S5004, $P102
    concat $S5003, $S5004, " :named"
    box $P5009, $S5003
    set $P102, $P5009
    set $P5010, $P102
  if12_end15:
    goto if11_end13
  if11_else12:
.annotate 'line', 1172
    $P5011 = _lex_param_0."named"()
    set $P5014, $P5011
    unless $P5011 goto if13_end17 
    .const 'Sub' $P5012 = 'cuid_143_1359572548.257' 
    capture_lex $P5012
    $P5013 = $P5012($P5011)
    set $P5014, $P5013
  if13_end17:
  if11_end13:
.annotate 'line', 1175
    $P5015 = _lex_param_0."named"()
    unless $P5015 goto if14_else18 
.annotate 'line', 1176
    $P5016 = _lex_param_4."push"($P102)
    set $P5018, $P5016
    goto if14_end19
  if14_else18:
.annotate 'line', 1178
.annotate 'line', 1179
    $P5017 = _lex_param_3."push"($P102)
    set $P5018, $P5017
  if14_end19:
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_143_1359572548.257") :anon :lex :outer("cuid_144_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1172
    .param pmc _lex_param_0 
    .lex "$name", _lex_param_0 
    find_lex $P5001, "$result"
    set $S5004, $P5001
    concat $S5003, $S5004, " :named("
.annotate 'line', 1173
    find_lex $P5002, "$qastcomp"
    $P5003 = $P5002."escape"(_lex_param_0)
    set $S5005, $P5003
    concat $S5002, $S5003, $S5005
    concat $S5001, $S5002, ")"
    box $P5004, $S5001
    store_lex "$result", $P5004
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_146_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 10
    .const 'Sub' $P5003 = 'cuid_1_1359572548.257' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_2_1359572548.257' 
    capture_lex $P5003 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_1_1359572548.257' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_2_1359572548.257' 
    capture_lex $P5002
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "new" :subid("cuid_1_1359572548.257") :anon :lex :outer("cuid_146_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 13
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :named("result") 
    .lex "$obj", $P101 
    .lex "self", _lex_param_0 
    .lex "$result", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_decontainerize $P5003, _lex_param_0
    repr_instance_of $P5002, $P5003
    set $P101, $P5002
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5006, $P5007, "PIRT"
    get_who $P5005, $P5006
    set $P5004, $P5005["CallResult"]
    unless_null $P5004, fallback25
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5008
  fallback25:
    nqp_get_sc_object $P5012, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5011, $P5012, "PIRT"
    get_who $P5010, $P5011
    set $P5009, $P5010["Node"]
    unless_null $P5009, fallback28
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5009, $P5013
  fallback28:
    type_check $I5001, _lex_param_1, $P5009
    unless $I5001 goto if17_else26 
.annotate 'line', 16
    $P5014 = _lex_param_1."result"()
    set $P5015, $P5014
    goto if17_end27
  if17_else26:
    set $P5015, _lex_param_1
  if17_end27:
    set $S5001, $P5015
    repr_bind_attr_str $P101, $P5004, "$!result", $S5001
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "result" :subid("cuid_2_1359572548.257") :anon :lex :outer("cuid_146_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 20
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 3
    repr_get_attr_str $S5001, $P5001, $P5002, "$!result"
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_147_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 25
    .const 'Sub' $P5016 = 'cuid_3_1359572548.257' 
    capture_lex $P5016 
    .const 'Sub' $P5016 = 'cuid_4_1359572548.257' 
    capture_lex $P5016 
    .const 'Sub' $P5016 = 'cuid_5_1359572548.257' 
    capture_lex $P5016 
    .const 'Sub' $P5016 = 'cuid_6_1359572548.257' 
    capture_lex $P5016 
    .const 'Sub' $P5016 = 'cuid_7_1359572548.257' 
    capture_lex $P5016 
    .const 'Sub' $P5016 = 'cuid_10_1359572548.257' 
    capture_lex $P5016 
    .const 'Sub' $P5016 = 'cuid_11_1359572548.257' 
    capture_lex $P5016 
    .lex "%op_compilers", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "$?CLASS", $P103 
    new $P5001, 'Hash'
    set $P101, $P5001
    new $P5002, 'Hash'
    .const 'Sub' $P5004 = 'cuid_3_1359572548.257' 
    capture_lex $P5004
    newclosure $P5003, $P5004
    set $P5002["call"], $P5003
    .const 'Sub' $P5006 = 'cuid_4_1359572548.257' 
    capture_lex $P5006
    newclosure $P5005, $P5006
    set $P5002["callmethod"], $P5005
    .const 'Sub' $P5008 = 'cuid_5_1359572548.257' 
    capture_lex $P5008
    newclosure $P5007, $P5008
    set $P5002["return"], $P5007
    .const 'Sub' $P5010 = 'cuid_6_1359572548.257' 
    capture_lex $P5010
    newclosure $P5009, $P5010
    set $P5002["yield"], $P5009
    .const 'Sub' $P5012 = 'cuid_7_1359572548.257' 
    capture_lex $P5012
    newclosure $P5011, $P5012
    set $P5002["tailcall"], $P5011
    .const 'Sub' $P5014 = 'cuid_10_1359572548.257' 
    capture_lex $P5014
    newclosure $P5013, $P5014
    set $P5002["inline"], $P5013
    set $P101, $P5002
    .const 'Sub' $P5015 = 'cuid_11_1359572548.257' 
    capture_lex $P5015
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_3_1359572548.257") :anon :lex :outer("cuid_147_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 27
    .param pmc _lex_param_0 
    .lex "@args", _lex_param_0 
    find_dynamic_lex $P5001, "$*HAS_RESULT"
    unless_null $P5001, fallback31
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$HAS_RESULT"]
    unless_null $P5002, fallback32
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5002, $P5005
  fallback32:
    unless_null $P5002, vivi_1933
    die "Contextual $*HAS_RESULT not found"
    box $P5006, "Contextual $*HAS_RESULT not found"
    set $P5002, $P5006
  vivi_1933:
    set $P5001, $P5002
  fallback31:
    unless $P5001 goto if18_else29 
.annotate 'line', 29
    $P5007 = _lex_param_0."shift"()
    set $S5007, $P5007
    concat $S5006, $S5007, " = "
    set $S5008, $S5006
    goto if18_end30
  if18_else29:
    set $S5008, ""
  if18_end30:
    concat $S5005, "    ", $S5008
.annotate 'line', 30
    $P5008 = _lex_param_0."shift"()
    set $S5009, $P5008
    concat $S5004, $S5005, $S5009
    concat $S5003, $S5004, "("
    join $S5010, ", ", _lex_param_0
    concat $S5002, $S5003, $S5010
    concat $S5001, $S5002, ")"
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_4_1359572548.257") :anon :lex :outer("cuid_147_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 32
    .param pmc _lex_param_0 
    .lex "$pir", $P101 
    .lex "$name", $P102 
    .lex "$invocant", $P103 
    .lex "@args", _lex_param_0 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    find_dynamic_lex $P5004, "$*HAS_RESULT"
    unless_null $P5004, fallback36
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$HAS_RESULT"]
    unless_null $P5005, fallback37
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5005, $P5008
  fallback37:
    unless_null $P5005, vivi_2138
    die "Contextual $*HAS_RESULT not found"
    box $P5009, "Contextual $*HAS_RESULT not found"
    set $P5005, $P5009
  vivi_2138:
    set $P5004, $P5005
  fallback36:
    unless $P5004 goto if20_else34 
.annotate 'line', 33
    $P5010 = _lex_param_0."shift"()
    set $S5003, $P5010
    concat $S5002, $S5003, " = "
    set $S5004, $S5002
    goto if20_end35
  if20_else34:
    set $S5004, ""
  if20_end35:
    concat $S5001, "    ", $S5004
    box $P5011, $S5001
    set $P101, $P5011
.annotate 'line', 34
    $P5012 = _lex_param_0."shift"()
    set $P102, $P5012
.annotate 'line', 35
    $P5013 = _lex_param_0."shift"()
    set $P103, $P5013
    set $S5011, $P101
    set $S5012, $P103
    concat $S5010, $S5011, $S5012
    concat $S5009, $S5010, "."
    set $S5013, $P102
    concat $S5008, $S5009, $S5013
    concat $S5007, $S5008, "("
    join $S5014, ", ", _lex_param_0
    concat $S5006, $S5007, $S5014
    concat $S5005, $S5006, ")"
    .return ($S5005) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_5_1359572548.257") :anon :lex :outer("cuid_147_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 38
    .param pmc _lex_param_0 
    .lex "@args", _lex_param_0 
    join $S5003, ", ", _lex_param_0
    concat $S5002, "    .return (", $S5003
    concat $S5001, $S5002, ")"
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_6_1359572548.257") :anon :lex :outer("cuid_147_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 41
    .param pmc _lex_param_0 
    .lex "@args", _lex_param_0 
    box $P5001, "yield compilation NYI"
    die $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_7_1359572548.257") :anon :lex :outer("cuid_147_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 44
    .param pmc _lex_param_0 
    .lex "@args", _lex_param_0 
    box $P5001, "tailcall compilation NYI"
    die $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_10_1359572548.257") :anon :lex :outer("cuid_147_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 47
    .param pmc _lex_param_0 
    .const 'Sub' $P5018 = 'cuid_148_1359572548.257' 
    capture_lex $P5018 
    .const 'Sub' $P5018 = 'cuid_149_1359572548.257' 
    capture_lex $P5018 
    .lex "$pir", $P101 
    .lex "$i", $P102 
    .lex "@args", _lex_param_0 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    find_dynamic_lex $P5003, "$*HAS_RESULT"
    unless_null $P5003, fallback41
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$HAS_RESULT"]
    unless_null $P5004, fallback42
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5007
  fallback42:
    unless_null $P5004, vivi_2343
    die "Contextual $*HAS_RESULT not found"
    box $P5008, "Contextual $*HAS_RESULT not found"
    set $P5004, $P5008
  vivi_2343:
    set $P5003, $P5004
  fallback41:
    unless $P5003 goto if22_else39 
    .const 'Sub' $P5009 = 'cuid_148_1359572548.257' 
    capture_lex $P5009
    $P5010 = $P5009()
    goto if22_end40
  if22_else39:
.annotate 'line', 53
.annotate 'line', 54
    $P5011 = _lex_param_0."shift"()
    set $P101, $P5011
  if22_end40:
    box $P5012, 0
    set $P102, $P5012
    set $P5013, _lex_param_0
    iter $P5015, _lex_param_0
  for_next70:
    unless $P5015, for_done72
    shift $P5017, $P5015
  for_redo71:
    .const 'Sub' $P5016 = 'cuid_149_1359572548.257' 
    capture_lex $P5016
    $P5013 = $P5016($P5017)
    goto for_next70
  for_done72:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_148_1359572548.257") :anon :lex :outer("cuid_10_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 49
    .const 'Sub' $P5016 = 'cuid_8_1359572548.257' 
    capture_lex $P5016 
    .lex "$result", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 50
    find_lex $P5002, "@args"
    $P5003 = $P5002."shift"()
    set $P101, $P5003
.annotate 'line', 51
    find_lex $P5004, "@args"
    $P5005 = $P5004."shift"()
    find_lex $P5008, "$?PACKAGE"
    get_who $P5007, $P5008
    set $P5006, $P5007["NQPRegex"]
    unless_null $P5006, fallback44
    nqp_get_sc_object $P5011, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["NQPRegex"]
    unless_null $P5009, vivi_2445
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5009, $P5012
  vivi_2445:
    set $P5006, $P5009
  fallback44:
    .const 'Sub' $P5013 = 'cuid_8_1359572548.257' 
    capture_lex $P5013
    $P5014 = $P5006."new"($P5013)
    $P5015 = "&subst"($P5005, $P5014, $P101, 1 :named("global"))
    store_lex "$pir", $P5015
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_8_1359572548.257") :anon :lex :outer("cuid_148_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 51
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx25_tgt
    .local int rx25_pos
    .local int rx25_off
    .local int rx25_eos
    .local int rx25_rep
    .local pmc rx25_cur
    .local pmc rx25_curclass
    .local pmc rx25_bstack
    .local pmc rx25_cstack
    (rx25_cur, rx25_tgt, rx25_pos, rx25_curclass, rx25_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx25_cur
    length rx25_eos, rx25_tgt
    eq $I19, 1, rx25_restart48
    gt rx25_pos, rx25_eos, rx25_fail49
    repr_get_attr_int $I11, self, rx25_curclass, "$!from"
    ne $I11, -1, rxscan26_done55
    goto rxscan26_scan54
  rxscan26_loop53:
    inc rx25_pos
    gt rx25_pos, rx25_eos, rx25_fail49
    repr_bind_attr_int rx25_cur, rx25_curclass, "$!from", rx25_pos
  rxscan26_scan54:
    nqp_rxmark rx25_bstack, rxscan26_loop53, rx25_pos, 0
  rxscan26_done55:
    add $I11, rx25_pos, 2
    gt $I11, rx25_eos, rx25_fail49
    substr $S10, rx25_tgt, rx25_pos, 2
    ne $S10, ucs4:"%r", rx25_fail49
    add rx25_pos, 2
    rx25_cur."!cursor_pass"(rx25_pos, 'backtrack'=>1)
    .return (rx25_cur)
  rx25_restart48:
    repr_get_attr_obj rx25_cstack, rx25_cur, rx25_curclass, "$!cstack"
  rx25_fail49:
    unless rx25_bstack, rx25_done47
    pop $I19, rx25_bstack
    if_null rx25_cstack, rx25_cstack_done52
    unless rx25_cstack, rx25_cstack_done52
    dec $I19
    set $P11, rx25_cstack[$I19]
  rx25_cstack_done52:
    pop rx25_rep, rx25_bstack
    pop rx25_pos, rx25_bstack
    pop $I19, rx25_bstack
    lt rx25_pos, -1, rx25_done47
    lt rx25_pos, 0, rx25_fail49
    eq $I19, 0, rx25_fail49
    nqp_islist $I20, rx25_cstack
    unless $I20, rx25_jump50
    elements $I18, rx25_bstack
    le $I18, 0, rx25_cut51
    dec $I18
    set $I18, rx25_bstack[$I18]
  rx25_cut51:
    assign rx25_cstack, $I18
  rx25_jump50:
    jump $I19
  rx25_done47:
    rx25_cur."!cursor_fail"()
    .return (rx25_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_149_1359572548.257") :anon :lex :outer("cuid_10_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 57
    .param pmc _lex_param_0 
    .const 'Sub' $P5014 = 'cuid_9_1359572548.257' 
    capture_lex $P5014 
    .lex "$_", _lex_param_0 
.annotate 'line', 58
    find_lex $P5001, "$pir"
    find_lex $P5004, "$?PACKAGE"
    get_who $P5003, $P5004
    set $P5002, $P5003["NQPRegex"]
    unless_null $P5002, fallback56
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["NQPRegex"]
    unless_null $P5005, vivi_2757
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5005, $P5008
  vivi_2757:
    set $P5002, $P5005
  fallback56:
    .const 'Sub' $P5009 = 'cuid_9_1359572548.257' 
    capture_lex $P5009
    $P5010 = $P5002."new"($P5009)
    $P5011 = "&subst"($P5001, $P5010, _lex_param_0, 1 :named("global"))
    store_lex "$pir", $P5011
    find_lex $P5012, "$i"
    set $N5002, $P5012
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5013, $N5001
    store_lex "$i", $P5013
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_9_1359572548.257") :anon :lex :outer("cuid_149_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 58
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx28_tgt
    .local int rx28_pos
    .local int rx28_off
    .local int rx28_eos
    .local int rx28_rep
    .local pmc rx28_cur
    .local pmc rx28_curclass
    .local pmc rx28_bstack
    .local pmc rx28_cstack
    (rx28_cur, rx28_tgt, rx28_pos, rx28_curclass, rx28_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx28_cur
    length rx28_eos, rx28_tgt
    eq $I19, 1, rx28_restart60
    gt rx28_pos, rx28_eos, rx28_fail61
    repr_get_attr_int $I11, self, rx28_curclass, "$!from"
    ne $I11, -1, rxscan29_done67
    goto rxscan29_scan66
  rxscan29_loop65:
    inc rx28_pos
    gt rx28_pos, rx28_eos, rx28_fail61
    repr_bind_attr_int rx28_cur, rx28_curclass, "$!from", rx28_pos
  rxscan29_scan66:
    nqp_rxmark rx28_bstack, rxscan29_loop65, rx28_pos, 0
  rxscan29_done67:
    add $I11, rx28_pos, 1
    gt $I11, rx28_eos, rx28_fail61
    substr $S10, rx28_tgt, rx28_pos, 1
    ne $S10, ucs4:"%", rx28_fail61
    add rx28_pos, 1
    find_lex $P5001, "$i"
    repr_bind_attr_int rx28_cur, rx28_curclass, "$!pos", rx28_pos
    $P11 = rx28_cur."!INTERPOLATE"($P5001)
    repr_get_attr_int $I11, $P11, rx28_curclass, "$!pos"
    lt $I11, 0, rx28_fail61
    goto rxsubrule30_pass68
  rxsubrule30_back69:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx28_curclass, "$!pos"
    lt $I11, 0, rx28_fail61
  rxsubrule30_pass68:
    rx28_cstack = rx28_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule30_back69
    push rx28_bstack, $I11
    push rx28_bstack, 0
    push rx28_bstack, rx28_pos
    elements $I11, rx28_cstack
    push rx28_bstack, $I11
    repr_get_attr_int rx28_pos, $P11, rx28_curclass, "$!pos"
    rx28_cur."!cursor_pass"(rx28_pos, 'backtrack'=>1)
    .return (rx28_cur)
  rx28_restart60:
    repr_get_attr_obj rx28_cstack, rx28_cur, rx28_curclass, "$!cstack"
  rx28_fail61:
    unless rx28_bstack, rx28_done59
    pop $I19, rx28_bstack
    if_null rx28_cstack, rx28_cstack_done64
    unless rx28_cstack, rx28_cstack_done64
    dec $I19
    set $P11, rx28_cstack[$I19]
  rx28_cstack_done64:
    pop rx28_rep, rx28_bstack
    pop rx28_pos, rx28_bstack
    pop $I19, rx28_bstack
    lt rx28_pos, -1, rx28_done59
    lt rx28_pos, 0, rx28_fail61
    eq $I19, 0, rx28_fail61
    nqp_islist $I20, rx28_cstack
    unless $I20, rx28_jump62
    elements $I18, rx28_bstack
    le $I18, 0, rx28_cut63
    dec $I18
    set $I18, rx28_bstack[$I18]
  rx28_cut63:
    assign rx28_cstack, $I18
  rx28_jump62:
    jump $I19
  rx28_done59:
    rx28_cur."!cursor_fail"()
    .return (rx28_cur) 
.end
.HLL "nqp"
.namespace []
.sub "children_pir" :subid("cuid_11_1359572548.257") :anon :lex :outer("cuid_147_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 64
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5007 = 'cuid_151_1359572548.257' 
    capture_lex $P5007 
    .lex "@parts", $P101 
    .lex "self", _lex_param_0 
    .lex "@children", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    set $P5002, _lex_param_1
    iter $P5004, _lex_param_1
  for_next107:
    unless $P5004, for_done109
    shift $P5006, $P5004
  for_redo108:
    .const 'Sub' $P5005 = 'cuid_151_1359572548.257' 
    capture_lex $P5005
    $P5002 = $P5005($P5006)
    goto for_next107
  for_done109:
    join $S5001, "\n", $P101
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_151_1359572548.257") :anon :lex :outer("cuid_11_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 66
    .param pmc _lex_param_0 
    .const 'Sub' $P5027 = 'cuid_150_1359572548.257' 
    capture_lex $P5027 
    .const 'Sub' $P5027 = 'cuid_152_1359572548.257' 
    capture_lex $P5027 
    .lex "$_", _lex_param_0 
    nqp_islist $I5001, _lex_param_0
    unless $I5001 goto if31_else73 
    .const 'Sub' $P5001 = 'cuid_150_1359572548.257' 
    capture_lex $P5001
    $P5002 = $P5001()
    set $P5026, $P5002
    goto if31_end74
  if31_else73:
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5005, $P5006, "PIRT"
    get_who $P5004, $P5005
    set $P5003, $P5004["Sub"]
    unless_null $P5003, fallback98
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5007
  fallback98:
    type_check $I5002, _lex_param_0, $P5003
    unless $I5002 goto if38_else96 
.annotate 'line', 99
    find_dynamic_lex $P5008, "@*PIRT_BLOCKS"
    unless_null $P5008, fallback99
    nqp_get_sc_object $P5011, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["@PIRT_BLOCKS"]
    unless_null $P5009, fallback100
    nqp_get_sc_object $P5013, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    set $P5012["@PIRT_BLOCKS"], $P5014
    set $P5009, $P5014
  fallback100:
    unless_null $P5009, vivi_39101
    die "Contextual @*PIRT_BLOCKS not found"
    box $P5015, "Contextual @*PIRT_BLOCKS not found"
    set $P5009, $P5015
  vivi_39101:
    set $P5008, $P5009
  fallback99:
    push $P5008, _lex_param_0
    set $P5025, $P5008
    goto if38_end97
  if38_else96:
    nqp_get_sc_object $P5019, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5018, $P5019, "PIRT"
    get_who $P5017, $P5018
    set $P5016, $P5017["Node"]
    unless_null $P5016, fallback104
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5016, $P5020
  fallback104:
    type_check $I5003, _lex_param_0, $P5016
    unless $I5003 goto if40_else102 
    .const 'Sub' $P5021 = 'cuid_152_1359572548.257' 
    capture_lex $P5021
    $P5022 = $P5021()
    set $P5024, $P5022
    goto if40_end103
  if40_else102:
.annotate 'line', 106
    box $P5023, "Unexpected object in PIRT tree"
    die $P5023
    set $P5024, $P5023
  if40_end103:
    set $P5025, $P5024
  if38_end97:
    set $P5026, $P5025
  if31_end74:
    .return ($P5026) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_150_1359572548.257") :anon :lex :outer("cuid_151_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 67
    .lex "$op_name", $P101 
    .lex "@op_args", $P102 
    .lex "$i", $P103 
    .lex "$c", $P104 
    .lex "$arg", $P105 
    .lex "$*HAS_RESULT", $P106 
    .lex "$result", $P107 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P106, $P5006
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P107, $P5007
    find_lex $P5009, "$_"
    set $P5008, $P5009[0]
    unless_null $P5008, fallback75
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5008, $P5010
  fallback75:
    set $P101, $P5008
    box $P5011, 1
    set $P103, $P5011
    find_lex $P5012, "$_"
    elements $I5001, $P5012
    box $P5013, $I5001
    set $P104, $P5013
    box $P5014, 0
    set $P106, $P5014
  while32_test76:
    set $N5001, $P103
    set $N5002, $P104
    islt $I5002, $N5001, $N5002
    box $P5034, $I5002
    set $P5033, $P5034
    unless $I5002 goto while32_done80 
  while32_redo78:
.annotate 'line', 75
    find_lex $P5016, "$_"
    set $I5003, $P103
    set $P5015, $P5016[$I5003]
    unless_null $P5015, fallback81
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5015, $P5017
  fallback81:
    set $P105, $P5015
    nqp_get_sc_object $P5021, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5020, $P5021, "PIRT"
    get_who $P5019, $P5020
    set $P5018, $P5019["Node"]
    unless_null $P5018, fallback84
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5018, $P5022
  fallback84:
    type_check $I5004, $P105, $P5018
    unless $I5004 goto if33_else82 
.annotate 'line', 77
.annotate 'line', 78
    $P5023 = $P105."result"()
    push $P102, $P5023
    goto if33_end83
  if33_else82:
    nqp_get_sc_object $P5027, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5026, $P5027, "PIRT"
    get_who $P5025, $P5026
    set $P5024, $P5025["CallResult"]
    unless_null $P5024, fallback87
    nqp_get_sc_object $P5028, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5024, $P5028
  fallback87:
    type_check $I5005, $P105, $P5024
    unless $I5005 goto if34_else85 
.annotate 'line', 80
.annotate 'line', 81
    $P5029 = $P105."result"()
    set $P107, $P5029
    box $P5030, 1
    set $P106, $P5030
    set $P5031, $P106
    goto if34_end86
  if34_else85:
.annotate 'line', 84
    push $P102, $P105
    set $P5031, $P102
  if34_end86:
  if33_end83:
    set $N5004, $P103
    set $N5005, 1
    add $N5003, $N5004, $N5005
    box $P5032, $N5003
    set $P103, $P5032
    set $P5033, $P103
    goto while32_test76 
  while32_done80:
    unless_null $P106, fallback90
    nqp_get_sc_object $P5037, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5036, $P5037
    set $P5035, $P5036["$HAS_RESULT"]
    unless_null $P5035, fallback91
    nqp_get_sc_object $P5038, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5035, $P5038
  fallback91:
    unless_null $P5035, vivi_3692
    die "Contextual $*HAS_RESULT not found"
    box $P5039, "Contextual $*HAS_RESULT not found"
    set $P5035, $P5039
  vivi_3692:
    set $P106, $P5035
  fallback90:
    unless $P106 goto if35_end89 
.annotate 'line', 89
    unshift $P102, $P107
  if35_end89:
    find_lex $P5040, "%op_compilers"
    set $S5001, $P101
    exists $I5006, $P5040[$S5001]
    unless $I5006 goto if37_else93 
.annotate 'line', 92
    find_lex $P5041, "@parts"
.annotate 'line', 93
    find_lex $P5043, "%op_compilers"
    set $S5002, $P101
    set $P5042, $P5043[$S5002]
    unless_null $P5042, fallback95
    nqp_get_sc_object $P5044, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5042, $P5044
  fallback95:
    $P5045 = $P5042($P102)
    push $P5041, $P5045
    set $P5048, $P5041
    goto if37_end94
  if37_else93:
.annotate 'line', 95
    find_lex $P5046, "@parts"
    set $S5006, $P101
    concat $S5005, "    ", $S5006
    concat $S5004, $S5005, " "
    join $S5007, ", ", $P102
    concat $S5003, $S5004, $S5007
    box $P5047, $S5003
    push $P5046, $P5047
    set $P5048, $P5046
  if37_end94:
    .return ($P5048) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_152_1359572548.257") :anon :lex :outer("cuid_151_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 102
    .lex "$pir", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 103
    find_lex $P5002, "$_"
    $P5003 = $P5002."pir"()
    set $P101, $P5003
    set $S5001, $P101
    iseq $I5001, $S5001, ""
    box $P5006, $I5001
    set $P5005, $P5006
    if $I5001 goto unless41_end106 
    find_lex $P5004, "@parts"
    push $P5004, $P101
    set $P5005, $P5004
  unless41_end106:
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_153_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 114
    .const 'Sub' $P5015 = 'cuid_12_1359572548.257' 
    capture_lex $P5015 
    .const 'Sub' $P5015 = 'cuid_13_1359572548.257' 
    capture_lex $P5015 
    .const 'Sub' $P5015 = 'cuid_14_1359572548.257' 
    capture_lex $P5015 
    .const 'Sub' $P5015 = 'cuid_15_1359572548.257' 
    capture_lex $P5015 
    .const 'Sub' $P5015 = 'cuid_16_1359572548.257' 
    capture_lex $P5015 
    .const 'Sub' $P5015 = 'cuid_17_1359572548.257' 
    capture_lex $P5015 
    .const 'Sub' $P5015 = 'cuid_18_1359572548.257' 
    capture_lex $P5015 
    .const 'Sub' $P5015 = 'cuid_19_1359572548.257' 
    capture_lex $P5015 
    .const 'Sub' $P5015 = 'cuid_20_1359572548.257' 
    capture_lex $P5015 
    .const 'Sub' $P5015 = 'cuid_21_1359572548.257' 
    capture_lex $P5015 
    .const 'Sub' $P5015 = 'cuid_22_1359572548.257' 
    capture_lex $P5015 
    .const 'Sub' $P5015 = 'cuid_23_1359572548.257' 
    capture_lex $P5015 
    .const 'Sub' $P5015 = 'cuid_24_1359572548.257' 
    capture_lex $P5015 
    .const 'Sub' $P5015 = 'cuid_25_1359572548.257' 
    capture_lex $P5015 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_12_1359572548.257' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_13_1359572548.257' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_14_1359572548.257' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_15_1359572548.257' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_16_1359572548.257' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_17_1359572548.257' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_18_1359572548.257' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_19_1359572548.257' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_20_1359572548.257' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_21_1359572548.257' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_22_1359572548.257' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_23_1359572548.257' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_24_1359572548.257' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_25_1359572548.257' 
    capture_lex $P5014
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "escape" :subid("cuid_12_1359572548.257") :anon :lex :outer("cuid_153_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 126
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$esc", $P101 
    .lex "self", _lex_param_0 
    .lex "$str", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    set $S5002, _lex_param_1
    escape $S5001, $S5002
    box $P5002, $S5001
    set $P101, $P5002
    set $S5003, $P101
    index $I5002, $S5003, utf8:"\\x", 0
    set $N5001, $I5002
    set $N5002, 0
    isge $I5001, $N5001, $N5002
    unless $I5001 goto if42_else110 
    set $S5006, $P101
    concat $S5005, "utf8:\"", $S5006
    concat $S5004, $S5005, "\""
    set $S5015, $S5004
    goto if42_end111
  if42_else110:
    set $S5007, $P101
    index $I5004, $S5007, unicode:"\\u", 0
    set $N5003, $I5004
    set $N5004, 0
    isge $I5003, $N5003, $N5004
    unless $I5003 goto if43_else112 
    set $S5010, $P101
    concat $S5009, "unicode:\"", $S5010
    concat $S5008, $S5009, "\""
    set $S5014, $S5008
    goto if43_end113
  if43_else112:
    set $S5013, $P101
    concat $S5012, "\"", $S5013
    concat $S5011, $S5012, "\""
    set $S5014, $S5011
  if43_end113:
    set $S5015, $S5014
  if42_end111:
    .return ($S5015) 
.end
.HLL "nqp"
.namespace []
.sub "new" :subid("cuid_13_1359572548.257") :anon :lex :outer("cuid_153_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 135
    .param pmc _lex_param_0 
    .lex "$obj", $P101 
    .lex "self", _lex_param_0 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_decontainerize $P5003, _lex_param_0
    repr_instance_of $P5002, $P5003
    set $P101, $P5002
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5006, $P5007, "PIRT"
    get_who $P5005, $P5006
    set $P5004, $P5005["Sub"]
    unless_null $P5004, fallback114
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5008
  fallback114:
    new $P5009, 'ResizablePMCArray'
    setattribute $P101, $P5004, "@!children", $P5009
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "push" :subid("cuid_14_1359572548.257") :anon :lex :outer("cuid_153_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 141
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    repr_get_attr_obj $P5003, $P5001, $P5002, "@!children"
    push $P5003, _lex_param_1
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "push_pirop" :subid("cuid_15_1359572548.257") :anon :lex :outer("cuid_153_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 145
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :slurpy 
    .param pmc _lex_param_2 :named("result") :optional 
    .param int haz_param_2 :opt_flag 
    if haz_param_2, default118
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set _lex_param_2, $P5010
  default118:
    .lex "self", _lex_param_0 
    .lex "@opbits", _lex_param_1 
    .lex "$result", _lex_param_2 
    unless _lex_param_2 goto if44_end116 
.annotate 'line', 146
.annotate 'line', 147
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5003, $P5004, "PIRT"
    get_who $P5002, $P5003
    set $P5001, $P5002["CallResult"]
    unless_null $P5001, fallback117
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5005
  fallback117:
    $P5006 = $P5001."new"(_lex_param_2)
    push _lex_param_1, $P5006
  if44_end116:
    nqp_decontainerize $P5007, _lex_param_0
    nqp_get_sc_object $P5008, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    repr_get_attr_obj $P5009, $P5007, $P5008, "@!children"
    push $P5009, _lex_param_1
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "subid" :subid("cuid_16_1359572548.257") :anon :lex :outer("cuid_153_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 152
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :slurpy 
    .lex "self", _lex_param_0 
    .lex "@value", _lex_param_1 
    unless _lex_param_1 goto if45_else119 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback121
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5004
  fallback121:
    set $S5001, $P5003
    repr_bind_attr_str $P5001, $P5002, "$!subid", $S5001
    set $S5003, $S5001
    goto if45_end120
  if45_else119:
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    repr_get_attr_str $S5002, $P5005, $P5006, "$!subid"
    set $S5003, $S5002
  if45_end120:
    .return ($S5003) 
.end
.HLL "nqp"
.namespace []
.sub "pirflags" :subid("cuid_17_1359572548.257") :anon :lex :outer("cuid_153_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 156
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :slurpy 
    .lex "self", _lex_param_0 
    .lex "@value", _lex_param_1 
    unless _lex_param_1 goto if46_else122 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback124
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5004
  fallback124:
    set $S5001, $P5003
    repr_bind_attr_str $P5001, $P5002, "$!pirflags", $S5001
    set $S5003, $S5001
    goto if46_end123
  if46_else122:
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    repr_get_attr_str $S5002, $P5005, $P5006, "$!pirflags"
    set $S5003, $S5002
  if46_end123:
    .return ($S5003) 
.end
.HLL "nqp"
.namespace []
.sub "name" :subid("cuid_18_1359572548.257") :anon :lex :outer("cuid_153_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 160
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :slurpy 
    .lex "self", _lex_param_0 
    .lex "@value", _lex_param_1 
    unless _lex_param_1 goto if47_else125 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback127
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5004
  fallback127:
    set $S5001, $P5003
    repr_bind_attr_str $P5001, $P5002, "$!name", $S5001
    set $S5003, $S5001
    goto if47_end126
  if47_else125:
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    repr_get_attr_str $S5002, $P5005, $P5006, "$!name"
    set $S5003, $S5002
  if47_end126:
    .return ($S5003) 
.end
.HLL "nqp"
.namespace []
.sub "loadlibs" :subid("cuid_19_1359572548.257") :anon :lex :outer("cuid_153_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 164
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :optional 
    .param int haz_param_3 :opt_flag 
    if haz_param_3, default130
    new $P5007, 'ResizablePMCArray'
    set _lex_param_1, $P5007
  default130:
    .lex "self", _lex_param_0 
    .lex "@libs", _lex_param_1 
    unless _lex_param_1 goto if48_else128 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    repr_bind_attr_obj $P5001, $P5002, "@!loadlibs", _lex_param_1
    set $P5006, _lex_param_1
    goto if48_end129
  if48_else128:
    nqp_decontainerize $P5003, _lex_param_0
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    repr_get_attr_obj $P5005, $P5003, $P5004, "@!loadlibs"
    set $P5006, $P5005
  if48_end129:
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "hll" :subid("cuid_20_1359572548.257") :anon :lex :outer("cuid_153_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 168
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :slurpy 
    .lex "self", _lex_param_0 
    .lex "@value", _lex_param_1 
    unless _lex_param_1 goto if49_else131 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback133
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5004
  fallback133:
    set $S5001, $P5003
    repr_bind_attr_str $P5001, $P5002, "$!hll", $S5001
    set $S5003, $S5001
    goto if49_end132
  if49_else131:
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    repr_get_attr_str $S5002, $P5005, $P5006, "$!hll"
    set $S5003, $S5002
  if49_end132:
    .return ($S5003) 
.end
.HLL "nqp"
.namespace []
.sub "namespace" :subid("cuid_21_1359572548.257") :anon :lex :outer("cuid_153_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 172
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :optional 
    .param int haz_param_4 :opt_flag 
    if haz_param_4, default136
    new $P5007, 'ResizablePMCArray'
    set _lex_param_1, $P5007
  default136:
    .lex "self", _lex_param_0 
    .lex "@namespace", _lex_param_1 
    unless _lex_param_1 goto if50_else134 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    repr_bind_attr_obj $P5001, $P5002, "@!namespace", _lex_param_1
    set $P5006, _lex_param_1
    goto if50_end135
  if50_else134:
    nqp_decontainerize $P5003, _lex_param_0
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    repr_get_attr_obj $P5005, $P5003, $P5004, "@!namespace"
    set $P5006, $P5005
  if50_end135:
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "result" :subid("cuid_22_1359572548.257") :anon :lex :outer("cuid_153_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 176
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    .return ("") 
.end
.HLL "nqp"
.namespace []
.sub "close_sub" :subid("cuid_23_1359572548.257") :anon :lex :outer("cuid_153_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 180
    .param pmc _lex_param_0 
    .const 'Sub' $P5080 = 'cuid_154_1359572548.257' 
    capture_lex $P5080 
    .const 'Sub' $P5080 = 'cuid_156_1359572548.257' 
    capture_lex $P5080 
    .lex "@parts", $P101 
    .lex "$sub_decl", $P102 
    .lex "$file", $P103 
    .lex "@*PIRT_BLOCKS", $P104 
    .lex "$*SUB_LINE", $P105 
    .lex "self", _lex_param_0 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    new $P5004, 'ResizablePMCArray'
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P105, $P5005
    nqp_decontainerize $P5006, _lex_param_0
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    repr_get_attr_obj $P5008, $P5006, $P5007, "@!loadlibs"
    isnull $I5001, $P5008
    if $I5001 goto unless51_end138 
.annotate 'line', 184
    nqp_decontainerize $P5012, _lex_param_0
    nqp_get_sc_object $P5013, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    repr_get_attr_obj $P5014, $P5012, $P5013, "@!loadlibs"
    set $P5009, $P5014
    iter $P5011, $P5014
  for_next139:
    unless $P5011, for_done141
    shift $P5016, $P5011
  for_redo140:
    .const 'Sub' $P5015 = 'cuid_154_1359572548.257' 
    capture_lex $P5015
    $P5009 = $P5015($P5016)
    goto for_next139
  for_done141:
  unless51_end138:
    nqp_decontainerize $P5017, _lex_param_0
    nqp_get_sc_object $P5018, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    repr_get_attr_str $S5001, $P5017, $P5018, "$!hll"
    unless_null $S5001, vivi_53144
    set $S5002, ""
    set $S5001, $S5002
  vivi_53144:
    unless $S5001 goto if52_end143 
.annotate 'line', 189
.annotate 'line', 190
    nqp_decontainerize $P5019, _lex_param_0
    nqp_decontainerize $P5020, _lex_param_0
    nqp_get_sc_object $P5021, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    repr_get_attr_str $S5004, $P5020, $P5021, "$!hll"
    $P5022 = $P5019."escape"($S5004)
    set $S5005, $P5022
    concat $S5003, ".HLL ", $S5005
    box $P5023, $S5003
    push $P101, $P5023
  if52_end143:
    nqp_decontainerize $P5024, _lex_param_0
    nqp_get_sc_object $P5025, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    repr_get_attr_obj $P5026, $P5024, $P5025, "@!namespace"
    isnull $I5002, $P5026
    unless $I5002 goto if54_else145 
.annotate 'line', 192
    box $P5027, ".namespace []"
    push $P101, $P5027
    goto if54_end146
  if54_else145:
    .const 'Sub' $P5028 = 'cuid_156_1359572548.257' 
    capture_lex $P5028
    $P5029 = $P5028()
  if54_end146:
.annotate 'line', 202
    nqp_decontainerize $P5030, _lex_param_0
    nqp_decontainerize $P5031, _lex_param_0
    nqp_get_sc_object $P5032, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    repr_get_attr_str $S5007, $P5031, $P5032, "$!name"
    set $S5008, $S5007
    if $S5007 goto unless55_end151 
    set $S5008, ""
  unless55_end151:
    $P5033 = $P5030."escape"($S5008)
    set $S5009, $P5033
    concat $S5006, ".sub ", $S5009
    box $P5034, $S5006
    set $P102, $P5034
    nqp_decontainerize $P5035, _lex_param_0
    nqp_get_sc_object $P5036, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    repr_get_attr_str $S5010, $P5035, $P5036, "$!subid"
    unless_null $S5010, vivi_57154
    set $S5011, ""
    set $S5010, $S5011
  vivi_57154:
    unless $S5010 goto if56_end153 
.annotate 'line', 203
    set $S5015, $P102
    concat $S5014, $S5015, " :subid("
.annotate 'line', 204
    nqp_decontainerize $P5037, _lex_param_0
    nqp_decontainerize $P5038, _lex_param_0
    nqp_get_sc_object $P5039, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    repr_get_attr_str $S5016, $P5038, $P5039, "$!subid"
    $P5040 = $P5037."escape"($S5016)
    set $S5017, $P5040
    concat $S5013, $S5014, $S5017
    concat $S5012, $S5013, ")"
    box $P5041, $S5012
    set $P102, $P5041
  if56_end153:
    nqp_decontainerize $P5042, _lex_param_0
    nqp_get_sc_object $P5043, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    repr_get_attr_str $S5018, $P5042, $P5043, "$!pirflags"
    unless_null $S5018, vivi_59157
    set $S5019, ""
    set $S5018, $S5019
  vivi_59157:
    unless $S5018 goto if58_end156 
.annotate 'line', 206
    set $S5022, $P102
    concat $S5021, $S5022, " "
    nqp_decontainerize $P5044, _lex_param_0
    nqp_get_sc_object $P5045, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    repr_get_attr_str $S5023, $P5044, $P5045, "$!pirflags"
    concat $S5020, $S5021, $S5023
    box $P5046, $S5020
    set $P102, $P5046
  if58_end156:
    push $P101, $P102
    find_caller_lex $P5047, "$?FILES"
    set $P103, $P5047
    unless_null $P103, vivi_61160
    box $P5048, ""
    set $P103, $P5048
  vivi_61160:
    unless $P103 goto if60_end159 
.annotate 'line', 213
.annotate 'line', 214
    nqp_decontainerize $P5049, _lex_param_0
    $P5050 = $P5049."escape"($P103)
    set $S5025, $P5050
    concat $S5024, ".annotate 'file', ", $S5025
    box $P5051, $S5024
    push $P101, $P5051
  if60_end159:
    box $P5059, -1
    set $P105, $P5059
.annotate 'line', 220
    nqp_decontainerize $P5060, _lex_param_0
    nqp_decontainerize $P5061, _lex_param_0
    nqp_get_sc_object $P5062, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    repr_get_attr_obj $P5063, $P5061, $P5062, "@!children"
    $P5064 = $P5060."children_pir"($P5063)
    push $P101, $P5064
    box $P5065, ".end"
    push $P101, $P5065
    nqp_decontainerize $P5066, _lex_param_0
    nqp_get_sc_object $P5067, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    join $S5026, "\n", $P101
    repr_bind_attr_str $P5066, $P5067, "$!cached_pir", $S5026
    nqp_decontainerize $P5068, _lex_param_0
    nqp_get_sc_object $P5069, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    unless_null $P104, fallback164
    nqp_get_sc_object $P5072, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5071, $P5072
    set $P5070, $P5071["@PIRT_BLOCKS"]
    unless_null $P5070, fallback165
    nqp_get_sc_object $P5074, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5073, $P5074
    new $P5075, 'ResizablePMCArray'
    set $P5073["@PIRT_BLOCKS"], $P5075
    set $P5070, $P5075
  fallback165:
    unless_null $P5070, vivi_63166
    die "Contextual @*PIRT_BLOCKS not found"
    box $P5076, "Contextual @*PIRT_BLOCKS not found"
    set $P5070, $P5076
  vivi_63166:
    set $P104, $P5070
  fallback164:
    repr_bind_attr_obj $P5068, $P5069, "@!nested_blocks", $P104
    nqp_decontainerize $P5077, _lex_param_0
    nqp_get_sc_object $P5078, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    null $P5079
    repr_bind_attr_obj $P5077, $P5078, "@!children", $P5079
    .return ($P5079) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_154_1359572548.257") :anon :lex :outer("cuid_23_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 185
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "@parts"
.annotate 'line', 186
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    $P5004 = $P5002."escape"(_lex_param_0)
    set $S5002, $P5004
    concat $S5001, ".loadlib ", $S5002
    box $P5005, $S5001
    push $P5001, $P5005
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_156_1359572548.257") :anon :lex :outer("cuid_23_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 195
    .const 'Sub' $P5013 = 'cuid_155_1359572548.257' 
    capture_lex $P5013 
    .lex "@ns", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!namespace"
    set $P5002, $P5008
    iter $P5004, $P5008
  for_next147:
    unless $P5004, for_done149
    shift $P5010, $P5004
  for_redo148:
    .const 'Sub' $P5009 = 'cuid_155_1359572548.257' 
    capture_lex $P5009
    $P5002 = $P5009($P5010)
    goto for_next147
  for_done149:
    find_lex $P5011, "@parts"
    join $S5003, ";", $P101
    concat $S5002, ".namespace [", $S5003
    concat $S5001, $S5002, "]"
    box $P5012, $S5001
    push $P5011, $P5012
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_155_1359572548.257") :anon :lex :outer("cuid_156_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 197
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "@ns"
.annotate 'line', 198
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    $P5004 = $P5002."escape"(_lex_param_0)
    push $P5001, $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "pir" :subid("cuid_24_1359572548.257") :anon :lex :outer("cuid_153_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 232
    .param pmc _lex_param_0 
    .lex "@parts", $P101 
    .lex "self", _lex_param_0 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 234
    nqp_decontainerize $P5002, _lex_param_0
    $P5002."collect_sub_pir_into"($P101)
    join $S5001, "\n", $P101
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "collect_sub_pir_into" :subid("cuid_25_1359572548.257") :anon :lex :outer("cuid_153_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 238
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5015 = 'cuid_157_1359572548.257' 
    capture_lex $P5015 
    .lex "self", _lex_param_0 
    .lex "@result", _lex_param_1 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    repr_get_attr_str $S5001, $P5001, $P5002, "$!cached_pir"
    if $S5001 goto unless64_end168 
.annotate 'line', 240
.annotate 'line', 241
    nqp_decontainerize $P5003, _lex_param_0
    $P5004 = $P5003."close_sub"()
  unless64_end168:
.annotate 'line', 245
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    repr_get_attr_str $S5002, $P5005, $P5006, "$!cached_pir"
    _lex_param_1."push"($S5002)
    nqp_decontainerize $P5010, _lex_param_0
    nqp_get_sc_object $P5011, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    repr_get_attr_obj $P5012, $P5010, $P5011, "@!nested_blocks"
    set $P5007, $P5012
    iter $P5009, $P5012
  for_next169:
    unless $P5009, for_done171
    shift $P5014, $P5009
  for_redo170:
    .const 'Sub' $P5013 = 'cuid_157_1359572548.257' 
    capture_lex $P5013
    $P5007 = $P5013($P5014)
    goto for_next169
  for_done171:
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_157_1359572548.257") :anon :lex :outer("cuid_25_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 246
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 247
    find_lex $P5001, "@result"
    $P5002 = _lex_param_0."collect_sub_pir_into"($P5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_158_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 252
    .const 'Sub' $P5007 = 'cuid_26_1359572548.257' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_27_1359572548.257' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_28_1359572548.257' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_29_1359572548.257' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_30_1359572548.257' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_31_1359572548.257' 
    capture_lex $P5007 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_26_1359572548.257' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_27_1359572548.257' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_28_1359572548.257' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_29_1359572548.257' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_30_1359572548.257' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_31_1359572548.257' 
    capture_lex $P5006
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "new" :subid("cuid_26_1359572548.257") :anon :lex :outer("cuid_158_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 257
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :named("result") :optional 
    .param int haz_param_5 :opt_flag 
    if haz_param_5, default177
    box $P5022, ""
    set _lex_param_1, $P5022
  default177:
    .lex "$obj", $P101 
    .lex "self", _lex_param_0 
    .lex "$result", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_decontainerize $P5003, _lex_param_0
    repr_instance_of $P5002, $P5003
    set $P101, $P5002
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5006, $P5007, "PIRT"
    get_who $P5005, $P5006
    set $P5004, $P5005["Ops"]
    unless_null $P5004, fallback172
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5008
  fallback172:
    new $P5009, 'ResizablePMCArray'
    setattribute $P101, $P5004, "@!children", $P5009
    nqp_get_sc_object $P5013, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5012, $P5013, "PIRT"
    get_who $P5011, $P5012
    set $P5010, $P5011["Ops"]
    unless_null $P5010, fallback173
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5010, $P5014
  fallback173:
    nqp_get_sc_object $P5018, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5017, $P5018, "PIRT"
    get_who $P5016, $P5017
    set $P5015, $P5016["Node"]
    unless_null $P5015, fallback176
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5015, $P5019
  fallback176:
    type_check $I5001, _lex_param_1, $P5015
    unless $I5001 goto if65_else174 
.annotate 'line', 261
    $P5020 = _lex_param_1."result"()
    set $P5021, $P5020
    goto if65_end175
  if65_else174:
    set $P5021, _lex_param_1
  if65_end175:
    set $S5001, $P5021
    repr_bind_attr_str $P101, $P5010, "$!result", $S5001
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "push" :subid("cuid_27_1359572548.257") :anon :lex :outer("cuid_158_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 265
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 31
    repr_get_attr_obj $P5003, $P5001, $P5002, "@!children"
    push $P5003, _lex_param_1
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "push_pirop" :subid("cuid_28_1359572548.257") :anon :lex :outer("cuid_158_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 269
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :slurpy 
    .param pmc _lex_param_2 :named("result") :optional 
    .param int haz_param_6 :opt_flag 
    if haz_param_6, default181
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set _lex_param_2, $P5010
  default181:
    .lex "self", _lex_param_0 
    .lex "@opbits", _lex_param_1 
    .lex "$result", _lex_param_2 
    unless _lex_param_2 goto if66_end179 
.annotate 'line', 270
.annotate 'line', 271
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5003, $P5004, "PIRT"
    get_who $P5002, $P5003
    set $P5001, $P5002["CallResult"]
    unless_null $P5001, fallback180
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5005
  fallback180:
    $P5006 = $P5001."new"(_lex_param_2)
    push _lex_param_1, $P5006
  if66_end179:
    nqp_decontainerize $P5007, _lex_param_0
    nqp_get_sc_object $P5008, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 31
    repr_get_attr_obj $P5009, $P5007, $P5008, "@!children"
    push $P5009, _lex_param_1
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "result" :subid("cuid_29_1359572548.257") :anon :lex :outer("cuid_158_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 276
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :slurpy 
    .lex "self", _lex_param_0 
    .lex "@value", _lex_param_1 
    unless _lex_param_1 goto if67_else182 
.annotate 'line', 277
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 31
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback186
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5004
  fallback186:
    nqp_get_sc_object $P5008, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5007, $P5008, "PIRT"
    get_who $P5006, $P5007
    set $P5005, $P5006["Node"]
    unless_null $P5005, fallback187
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5005, $P5009
  fallback187:
    type_check $I5001, $P5003, $P5005
    unless $I5001 goto if68_else184 
.annotate 'line', 278
    set $P5010, _lex_param_1[0]
    unless_null $P5010, fallback188
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5010, $P5011
  fallback188:
    $P5012 = $P5010."result"()
    set $P5015, $P5012
    goto if68_end185
  if68_else184:
    set $P5013, _lex_param_1[0]
    unless_null $P5013, fallback189
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5013, $P5014
  fallback189:
    set $P5015, $P5013
  if68_end185:
    set $S5001, $P5015
    repr_bind_attr_str $P5001, $P5002, "$!result", $S5001
    set $S5003, $S5001
    goto if67_end183
  if67_else182:
.annotate 'line', 280
    nqp_decontainerize $P5016, _lex_param_0
    nqp_get_sc_object $P5017, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 31
    repr_get_attr_str $S5002, $P5016, $P5017, "$!result"
    set $S5003, $S5002
  if67_end183:
    .return ($S5003) 
.end
.HLL "nqp"
.namespace []
.sub "node" :subid("cuid_30_1359572548.257") :anon :lex :outer("cuid_158_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 285
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :slurpy 
    .lex "self", _lex_param_0 
    .lex "@value", _lex_param_1 
    unless _lex_param_1 goto if69_else190 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 31
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback192
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5004
  fallback192:
    repr_bind_attr_obj $P5001, $P5002, "$!node", $P5003
    set $P5008, $P5003
    goto if69_end191
  if69_else190:
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 31
    repr_get_attr_obj $P5007, $P5005, $P5006, "$!node"
    set $P5008, $P5007
  if69_end191:
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "pir" :subid("cuid_31_1359572548.257") :anon :lex :outer("cuid_158_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 289
    .param pmc _lex_param_0 
    .const 'Sub' $P5013 = 'cuid_159_1359572548.257' 
    capture_lex $P5013 
    .lex "$ann", $P101 
    .lex "self", _lex_param_0 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    box $P5002, ""
    set $P101, $P5002
    nqp_decontainerize $P5003, _lex_param_0
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 31
    repr_get_attr_obj $P5005, $P5003, $P5004, "$!node"
    unless $P5005 goto if70_end194 
    .const 'Sub' $P5006 = 'cuid_159_1359572548.257' 
    capture_lex $P5006
    $P5007 = $P5006()
  if70_end194:
    set $S5002, $P101
.annotate 'line', 298
    nqp_decontainerize $P5008, _lex_param_0
    nqp_decontainerize $P5009, _lex_param_0
    nqp_get_sc_object $P5010, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 31
    repr_get_attr_obj $P5011, $P5009, $P5010, "@!children"
    $P5012 = $P5008."children_pir"($P5011)
    set $S5003, $P5012
    concat $S5001, $S5002, $S5003
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_159_1359572548.257") :anon :lex :outer("cuid_31_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 291
    .lex "$line", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 292
    nqp_get_sc_object $P5005, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5004, $P5005, "HLL"
    get_who $P5003, $P5004
    set $P5002, $P5003["Compiler"]
    unless_null $P5002, fallback195
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5002, $P5006
  fallback195:
    find_lex $P5008, "self"
    nqp_decontainerize $P5007, $P5008
    nqp_get_sc_object $P5009, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 31
    repr_get_attr_obj $P5010, $P5007, $P5009, "$!node"
    $P5011 = $P5010."orig"()
    find_lex $P5013, "self"
    nqp_decontainerize $P5012, $P5013
    nqp_get_sc_object $P5014, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 31
    repr_get_attr_obj $P5015, $P5012, $P5014, "$!node"
    $P5016 = $P5015."from"()
    $P5017 = $P5002."lineof"($P5011, $P5016, 1 :named("cache"))
    set $P101, $P5017
    set $N5001, $P101
    find_dynamic_lex $P5018, "$*SUB_LINE"
    unless_null $P5018, fallback198
    nqp_get_sc_object $P5021, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$SUB_LINE"]
    unless_null $P5019, fallback199
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5019, $P5022
  fallback199:
    unless_null $P5019, vivi_72200
    die "Contextual $*SUB_LINE not found"
    box $P5023, "Contextual $*SUB_LINE not found"
    set $P5019, $P5023
  vivi_72200:
    set $P5018, $P5019
  fallback198:
    set $N5002, $P5018
    isne $I5001, $N5001, $N5002
    box $P5026, $I5001
    set $P5025, $P5026
    unless $I5001 goto if71_end197 
.annotate 'line', 293
    set $S5003, $P101
    concat $S5002, ".annotate 'line', ", $S5003
    concat $S5001, $S5002, "\n"
    box $P5024, $S5001
    store_lex "$ann", $P5024
    store_dynamic_lex "$*SUB_LINE", $P101
    set $P5025, $P101
  if71_end197:
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_161_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 302
    .const 'Sub' $P5008 = 'cuid_160_1359572548.257' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_32_1359572548.257' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_33_1359572548.257' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_34_1359572548.257' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_35_1359572548.257' 
    capture_lex $P5008 
    .lex "$serno", $P101 
    .lex "&unique", $P102 
    .lex "$?PACKAGE", $P103 
    .lex "$?CLASS", $P104 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_160_1359572548.257' 
    capture_lex $P5002
    set $P102, $P5002
    box $P5003, 10
    set $P101, $P5003
    .const 'Sub' $P5004 = 'cuid_32_1359572548.257' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_33_1359572548.257' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_34_1359572548.257' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_35_1359572548.257' 
    capture_lex $P5007
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "unique" :subid("cuid_160_1359572548.257") :anon :lex :outer("cuid_161_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 306
    .param pmc _lex_param_0 
    .lex "$prefix", _lex_param_0 
    .local pmc tmp_1 
    set $S5002, _lex_param_0
    find_lex $P5001, "$serno"
    set tmp_1, $P5001
    set $N5002, tmp_1
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5002, $N5001
    store_lex "$serno", $P5002
    set $S5003, tmp_1
    concat $S5001, $S5002, $S5003
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "new" :subid("cuid_32_1359572548.257") :anon :lex :outer("cuid_161_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 308
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :named("name") 
    .lex "$obj", $P101 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_decontainerize $P5003, _lex_param_0
    repr_instance_of $P5002, $P5003
    set $P101, $P5002
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5006, $P5007, "PIRT"
    get_who $P5005, $P5006
    set $P5004, $P5005["Label"]
    unless_null $P5004, fallback201
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5008
  fallback201:
.annotate 'line', 310
    $P5009 = "&unique"(_lex_param_1)
    set $S5001, $P5009
    repr_bind_attr_str $P101, $P5004, "$!name", $S5001
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "name" :subid("cuid_33_1359572548.257") :anon :lex :outer("cuid_161_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 314
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :slurpy 
    .lex "self", _lex_param_0 
    .lex "@value", _lex_param_1 
    unless _lex_param_1 goto if73_else202 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 38
.annotate 'line', 315
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback204
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5004
  fallback204:
    $P5005 = "&unique"($P5003)
    set $S5001, $P5005
    repr_bind_attr_str $P5001, $P5002, "$!name", $S5001
    set $S5003, $S5001
    goto if73_end203
  if73_else202:
    nqp_decontainerize $P5006, _lex_param_0
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 38
    repr_get_attr_str $S5002, $P5006, $P5007, "$!name"
    set $S5003, $S5002
  if73_end203:
    .return ($S5003) 
.end
.HLL "nqp"
.namespace []
.sub "result" :subid("cuid_34_1359572548.257") :anon :lex :outer("cuid_161_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 318
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 38
    repr_get_attr_str $S5001, $P5001, $P5002, "$!name"
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "pir" :subid("cuid_35_1359572548.257") :anon :lex :outer("cuid_161_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 322
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 38
    repr_get_attr_str $S5003, $P5001, $P5002, "$!name"
    concat $S5002, "  ", $S5003
    concat $S5001, $S5002, ":"
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_170_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 330
    .const 'Sub' $P5027 = 'cuid_169_1359572548.257' 
    capture_lex $P5027 
    .const 'Sub' $P5027 = 'cuid_36_1359572548.257' 
    capture_lex $P5027 
    .const 'Sub' $P5027 = 'cuid_37_1359572548.257' 
    capture_lex $P5027 
    .const 'Sub' $P5027 = 'cuid_38_1359572548.257' 
    capture_lex $P5027 
    .const 'Sub' $P5027 = 'cuid_39_1359572548.257' 
    capture_lex $P5027 
    .const 'Sub' $P5027 = 'cuid_40_1359572548.257' 
    capture_lex $P5027 
    .const 'Sub' $P5027 = 'cuid_41_1359572548.257' 
    capture_lex $P5027 
    .const 'Sub' $P5027 = 'cuid_42_1359572548.257' 
    capture_lex $P5027 
    .const 'Sub' $P5027 = 'cuid_43_1359572548.257' 
    capture_lex $P5027 
    .const 'Sub' $P5027 = 'cuid_44_1359572548.257' 
    capture_lex $P5027 
    .const 'Sub' $P5027 = 'cuid_45_1359572548.257' 
    capture_lex $P5027 
    .const 'Sub' $P5027 = 'cuid_46_1359572548.257' 
    capture_lex $P5027 
    .const 'Sub' $P5027 = 'cuid_47_1359572548.257' 
    capture_lex $P5027 
    .const 'Sub' $P5027 = 'cuid_48_1359572548.257' 
    capture_lex $P5027 
    .const 'Sub' $P5027 = 'cuid_49_1359572548.257' 
    capture_lex $P5027 
    .const 'Sub' $P5027 = 'cuid_50_1359572548.257' 
    capture_lex $P5027 
    .const 'Sub' $P5027 = 'cuid_51_1359572548.257' 
    capture_lex $P5027 
    .lex "%core_ops", $P101 
    .lex "%hll_ops", $P102 
    .lex "%cached_pirops", $P103 
    .lex "%hll_box", $P104 
    .lex "%hll_unbox", $P105 
    .lex "%core_inlinability", $P106 
    .lex "%hll_inlinability", $P107 
    .lex "%core_result_type", $P108 
    .lex "%hll_result_type", $P109 
    .lex "&pirop_mapper", $P110 
    .lex "$?PACKAGE", $P111 
    .lex "$?CLASS", $P112 
    new $P5001, 'Hash'
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    new $P5003, 'Hash'
    set $P103, $P5003
    new $P5004, 'Hash'
    set $P104, $P5004
    new $P5005, 'Hash'
    set $P105, $P5005
    new $P5006, 'Hash'
    set $P106, $P5006
    new $P5007, 'Hash'
    set $P107, $P5007
    new $P5008, 'Hash'
    set $P108, $P5008
    new $P5009, 'Hash'
    set $P109, $P5009
    .const 'Sub' $P5010 = 'cuid_169_1359572548.257' 
    capture_lex $P5010
    set $P110, $P5010
    .const 'Sub' $P5011 = 'cuid_36_1359572548.257' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_37_1359572548.257' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_38_1359572548.257' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_39_1359572548.257' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_40_1359572548.257' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_41_1359572548.257' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_42_1359572548.257' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_43_1359572548.257' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_44_1359572548.257' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_45_1359572548.257' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_46_1359572548.257' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_47_1359572548.257' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_48_1359572548.257' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_49_1359572548.257' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_50_1359572548.257' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_51_1359572548.257' 
    capture_lex $P5026
    .return ($P110) 
.end
.HLL "nqp"
.namespace []
.sub "pirop_mapper" :subid("cuid_169_1359572548.257") :anon :lex :outer("cuid_170_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 506
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5016 = 'cuid_163_1359572548.257' 
    capture_lex $P5016 
    .lex "@arg_types", $P101 
    .lex "$ret_type", $P102 
    .lex "$ret_meth", $P103 
    .lex "$pirop", _lex_param_0 
    .lex "$sig", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    set $S5001, _lex_param_1
    split $P5004, "", $S5001
    set $P101, $P5004
.annotate 'line', 509
    $P5005 = $P101."shift"()
    set $P102, $P5005
    set $S5002, $P102
    iseq $I5001, $S5002, "P"
    unless $I5001 goto if74_else205 
.annotate 'line', 513
    box $P5006, "fresh_p"
    set $P103, $P5006
    goto if74_end206
  if74_else205:
    set $S5003, $P102
    iseq $I5002, $S5003, "S"
    unless $I5002 goto if75_else207 
.annotate 'line', 514
    box $P5007, "fresh_s"
    set $P103, $P5007
    set $P5013, $P103
    goto if75_end208
  if75_else207:
    set $S5004, $P102
    iseq $I5003, $S5004, "I"
    unless $I5003 goto if76_else209 
.annotate 'line', 515
    box $P5008, "fresh_i"
    set $P103, $P5008
    set $P5012, $P103
    goto if76_end210
  if76_else209:
    set $S5005, $P102
    iseq $I5004, $S5005, "N"
    box $P5011, $I5004
    set $P5010, $P5011
    unless $I5004 goto if77_end212 
.annotate 'line', 516
    box $P5009, "fresh_n"
    set $P103, $P5009
    set $P5010, $P103
  if77_end212:
    set $P5012, $P5010
  if76_end210:
    set $P5013, $P5012
  if75_end208:
  if74_end206:
    .const 'Sub' $P5015 = 'cuid_163_1359572548.257' 
    capture_lex $P5015
    newclosure $P5014, $P5015
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_163_1359572548.257") :anon :lex :outer("cuid_169_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 518
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .const 'Sub' $P5034 = 'cuid_162_1359572548.257' 
    capture_lex $P5034 
    .const 'Sub' $P5034 = 'cuid_165_1359572548.257' 
    capture_lex $P5034 
    .const 'Sub' $P5034 = 'cuid_168_1359572548.257' 
    capture_lex $P5034 
    .lex "$ops", $P101 
    .lex "@args", $P102 
    .lex "$num_args", $P103 
    .lex "$i", $P104 
    .lex "$last_argtype_was_Q", $P105 
    .lex "$aggregate", $P106 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op_name", _lex_param_1 
    .lex "@op_args", _lex_param_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P106, $P5006
.annotate 'line', 519
    nqp_get_sc_object $P5010, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5009, $P5010, "PIRT"
    get_who $P5008, $P5009
    set $P5007, $P5008["Ops"]
    unless_null $P5007, fallback213
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5007, $P5011
  fallback213:
    $P5012 = $P5007."new"()
    set $P101, $P5012
    find_lex $P5013, "$ret_meth"
    unless $P5013 goto if78_end215 
    .const 'Sub' $P5014 = 'cuid_162_1359572548.257' 
    capture_lex $P5014
    $P5015 = $P5014()
  if78_end215:
    set $N5001, _lex_param_2
    box $P5016, $N5001
    set $P103, $P5016
    find_lex $P5017, "@arg_types"
    set $N5002, $P5017
    set $N5003, $P103
    isne $I5001, $N5002, $N5003
    unless $I5001 goto if80_end220 
.annotate 'line', 532
    set $S5005, _lex_param_1
    concat $S5004, "Operation '", $S5005
    concat $S5003, $S5004, "' requires "
    find_lex $P5018, "@arg_types"
    set $N5004, $P5018
    set $S5006, $N5004
    concat $S5002, $S5003, $S5006
    set $S5008, $P103
    concat $S5007, " operands, but got ", $S5008
    concat $S5001, $S5002, $S5007
    box $P5019, $S5001
    die $P5019
  if80_end220:
    box $P5020, 0
    set $P104, $P5020
    box $P5021, 0
    set $P105, $P5021
    box $P5022, ""
    set $P106, $P5022
  while81_test221:
    set $N5005, $P104
    set $N5006, $P103
    islt $I5002, $N5005, $N5006
    box $P5026, $I5002
    set $P5025, $P5026
    unless $I5002 goto while81_done225 
  while81_redo223:
    .const 'Sub' $P5023 = 'cuid_165_1359572548.257' 
    capture_lex $P5023
    $P5024 = $P5023()
    set $P5025, $P5024
    goto while81_test221 
  while81_done225:
    find_lex $P5027, "$ret_meth"
    isfalse $I5003, $P5027
    set $I5005, $I5003
    unless $I5003 goto if88_end241 
    find_lex $P5028, "$ret_type"
    set $S5009, $P5028
    isne $I5004, $S5009, "v"
    set $I5005, $I5004
  if88_end241:
    set $I5007, $I5005
    unless $I5005 goto if87_end239 
    find_lex $P5029, "$ret_type"
    set $N5007, $P5029
    set $S5010, $N5007
    find_lex $P5030, "$ret_type"
    set $S5011, $P5030
    iseq $I5006, $S5010, $S5011
    set $I5007, $I5006
  if87_end239:
    unless $I5007 goto if86_end237 
    .const 'Sub' $P5031 = 'cuid_168_1359572548.257' 
    capture_lex $P5031
    $P5032 = $P5031()
  if86_end237:
.annotate 'line', 580
    find_lex $P5033, "$pirop"
    $P101."push_pirop"($P5033, $P102 :flat)
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_162_1359572548.257") :anon :lex :outer("cuid_163_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 524
    .lex "$reg", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 525
    find_dynamic_lex $P5003, "$*REGALLOC"
    unless_null $P5003, fallback216
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$REGALLOC"]
    unless_null $P5004, fallback217
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5007
  fallback217:
    unless_null $P5004, vivi_79218
    die "Contextual $*REGALLOC not found"
    box $P5008, "Contextual $*REGALLOC not found"
    set $P5004, $P5008
  vivi_79218:
    set $P5003, $P5004
  fallback216:
    find_lex $P5002, "$ret_meth"
    set $S5001, $P5002
    $P5009 = $P5003.$S5001()
    set $P101, $P5009
.annotate 'line', 526
    find_lex $P5010, "@args"
    $P5010."push"($P101)
.annotate 'line', 527
    find_lex $P5011, "$ops"
    $P5012 = $P5011."result"($P101)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_165_1359572548.257") :anon :lex :outer("cuid_163_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 539
    .const 'Sub' $P5021 = 'cuid_164_1359572548.257' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_166_1359572548.257' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_167_1359572548.257' 
    capture_lex $P5021 
    .lex "$arg_type", $P101 
    .lex "$operand", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    find_lex $P5004, "@arg_types"
    find_lex $P5005, "$i"
    set $I5001, $P5005
    set $P5003, $P5004[$I5001]
    unless_null $P5003, fallback226
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5006
  fallback226:
    set $P101, $P5003
    find_lex $P5008, "@op_args"
    find_lex $P5009, "$i"
    set $I5002, $P5009
    set $P5007, $P5008[$I5002]
    unless_null $P5007, fallback227
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5007, $P5010
  fallback227:
    set $P102, $P5007
    set $S5001, $P101
    iseq $I5003, $S5001, "Q"
    unless $I5003 goto if82_else228 
    .const 'Sub' $P5011 = 'cuid_164_1359572548.257' 
    capture_lex $P5011
    $P5012 = $P5011()
    goto if82_end229
  if82_else228:
    find_lex $P5013, "$last_argtype_was_Q"
    unless $P5013 goto if83_else230 
    .const 'Sub' $P5014 = 'cuid_166_1359572548.257' 
    capture_lex $P5014
    $P5015 = $P5014()
    set $P5018, $P5015
    goto if83_end231
  if83_else230:
    .const 'Sub' $P5016 = 'cuid_167_1359572548.257' 
    capture_lex $P5016
    $P5017 = $P5016()
    set $P5018, $P5017
  if83_end231:
  if82_end229:
    find_lex $P5019, "$i"
    set $N5002, $P5019
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5020, $N5001
    store_lex "$i", $P5020
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_164_1359572548.257") :anon :lex :outer("cuid_165_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 542
    .lex "$post", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 543
    find_lex $P5002, "$qastcomp"
    find_lex $P5003, "$qastcomp"
    find_lex $P5004, "$operand"
    $P5005 = $P5003."as_post"($P5004)
    $P5006 = $P5002."coerce"($P5005, "P")
    set $P101, $P5006
.annotate 'line', 544
    find_lex $P5007, "$ops"
    $P5007."push"($P101)
.annotate 'line', 545
    $P5008 = $P101."result"()
    store_lex "$aggregate", $P5008
    box $P5009, 1
    store_lex "$last_argtype_was_Q", $P5009
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_166_1359572548.257") :anon :lex :outer("cuid_165_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 548
    .lex "$post", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    find_lex $P5002, "$arg_type"
    set $S5001, $P5002
    isne $I5001, $S5001, "P"
    unless $I5001 goto if84_end233 
.annotate 'line', 549
.annotate 'line', 550
    find_lex $P5003, "$qastcomp"
    find_lex $P5004, "$operand"
    find_lex $P5005, "$arg_type"
    $P5006 = $P5003."apply_context"($P5004, $P5005)
    store_lex "$operand", $P5006
  if84_end233:
.annotate 'line', 552
    find_lex $P5007, "$qastcomp"
    find_lex $P5008, "$qastcomp"
    find_lex $P5009, "$operand"
    $P5010 = $P5008."as_post"($P5009)
    find_lex $P5011, "$arg_type"
    $P5012 = $P5007."coerce"($P5010, $P5011)
    set $P101, $P5012
.annotate 'line', 553
    find_lex $P5013, "$ops"
    $P5013."push"($P101)
.annotate 'line', 554
    find_lex $P5014, "@args"
    find_lex $P5015, "$aggregate"
    set $S5005, $P5015
    concat $S5004, $S5005, "["
    $P5016 = $P101."result"()
    set $S5006, $P5016
    concat $S5003, $S5004, $S5006
    concat $S5002, $S5003, "]"
    $P5014."push"($S5002)
    box $P5017, 0
    store_lex "$last_argtype_was_Q", $P5017
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_167_1359572548.257") :anon :lex :outer("cuid_165_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 557
    .lex "$post", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    find_lex $P5002, "$arg_type"
    set $S5001, $P5002
    isne $I5001, $S5001, "P"
    unless $I5001 goto if85_end235 
.annotate 'line', 558
.annotate 'line', 559
    find_lex $P5003, "$qastcomp"
    find_lex $P5004, "$operand"
    find_lex $P5005, "$arg_type"
    $P5006 = $P5003."apply_context"($P5004, $P5005)
    store_lex "$operand", $P5006
  if85_end235:
.annotate 'line', 561
    find_lex $P5007, "$qastcomp"
    find_lex $P5008, "$qastcomp"
    find_lex $P5009, "$operand"
    $P5010 = $P5008."as_post"($P5009)
    find_lex $P5011, "$arg_type"
    $P5012 = $P5007."coerce"($P5010, $P5011)
    set $P101, $P5012
.annotate 'line', 562
    find_lex $P5013, "$ops"
    $P5013."push"($P101)
.annotate 'line', 563
    find_lex $P5014, "@args"
    $P5015 = $P101."result"()
    $P5016 = $P5014."push"($P5015)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_168_1359572548.257") :anon :lex :outer("cuid_163_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 570
    .lex "$rreg", $P101 
    .lex "$brak", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    find_lex $P5004, "@args"
    find_lex $P5005, "$ret_type"
    set $N5001, $P5005
    set $I5001, $N5001
    set $P5003, $P5004[$I5001]
    unless_null $P5003, fallback242
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5006
  fallback242:
    set $P101, $P5003
    set $S5001, $P101
    index $I5002, $S5001, "[", 0
    box $P5007, $I5002
    set $P102, $P5007
    set $N5002, $P102
    set $N5003, 0
    isgt $I5003, $N5002, $N5003
    unless $I5003 goto if89_end244 
.annotate 'line', 573
    set $S5003, $P101
    set $N5005, $P102
    set $N5006, 1
    add $N5004, $N5005, $N5006
    set $I5004, $N5004
    set $S5004, $P101
    length $I5005, $S5004
    set $N5008, $I5005
    set $N5010, $P102
    set $N5011, 2
    add $N5009, $N5010, $N5011
    sub $N5007, $N5008, $N5009
    set $I5006, $N5007
    substr $S5002, $S5003, $I5004, $I5006
    box $P5008, $S5002
    set $P101, $P5008
  if89_end244:
.annotate 'line', 576
    find_lex $P5009, "$ops"
    $P5010 = $P5009."result"($P101)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "compile_op" :subid("cuid_36_1359572548.257") :anon :lex :outer("cuid_170_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 354
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P5021 = 'cuid_171_1359572548.257' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_172_1359572548.257' 
    capture_lex $P5021 
    .lex "$name", $P101 
    .lex "self", _lex_param_0 
    .lex "$qastcomp", _lex_param_1 
    .lex "$hll", _lex_param_2 
    .lex "$op", _lex_param_3 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_245
    .lex "RETURN", $P102
.annotate 'line', 355
    $P5002 = _lex_param_3."op"()
    set $P101, $P5002
    unless _lex_param_2 goto if90_end248 
.annotate 'line', 356
    find_lex $P5004, "%hll_ops"
    set $S5001, _lex_param_2
    set $P5003, $P5004[$S5001]
    unless_null $P5003, fallback253
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5005
  fallback253:
    set $P5011, $P5003
    unless $P5003 goto if92_end252 
    find_lex $P5008, "%hll_ops"
    set $S5002, _lex_param_2
    set $P5007, $P5008[$S5002]
    unless_null $P5007, fallback254
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5007, $P5009
  fallback254:
    set $S5003, $P101
    set $P5006, $P5007[$S5003]
    unless_null $P5006, fallback255
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5006, $P5010
  fallback255:
    set $P5011, $P5006
  if92_end252:
    set $P5014, $P5011
    unless $P5011 goto if91_end250 
    .const 'Sub' $P5012 = 'cuid_171_1359572548.257' 
    capture_lex $P5012
    $P5013 = $P5012($P5011)
    set $P5014, $P5013
  if91_end250:
  if90_end248:
    find_lex $P5016, "%core_ops"
    set $S5004, $P101
    set $P5015, $P5016[$S5004]
    unless_null $P5015, fallback258
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5015, $P5017
  fallback258:
    unless $P5015 goto if93_end257 
    .const 'Sub' $P5018 = 'cuid_172_1359572548.257' 
    capture_lex $P5018
    $P5019 = $P5018($P5015)
  if93_end257:
    set $S5007, $P101
    concat $S5006, "No registered operation handler for '", $S5007
    concat $S5005, $S5006, "'"
    box $P5020, $S5005
    die $P5020
    goto lexotic_246
  lexotic_245:
    .get_results ($P5020)
  lexotic_246:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_171_1359572548.257") :anon :lex :outer("cuid_36_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 357
    .param pmc _lex_param_0 
    .lex "$mapper", _lex_param_0 
.annotate 'line', 358
    find_lex $P5002, "$qastcomp"
    find_lex $P5003, "$op"
    $P5004 = _lex_param_0($P5002, $P5003)
    find_lex $P5001, "RETURN"
    $P5005 = $P5001($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_172_1359572548.257") :anon :lex :outer("cuid_36_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 361
    .param pmc _lex_param_0 
    .lex "$mapper", _lex_param_0 
.annotate 'line', 362
    find_lex $P5002, "$qastcomp"
    find_lex $P5003, "$op"
    $P5004 = _lex_param_0($P5002, $P5003)
    find_lex $P5001, "RETURN"
    $P5005 = $P5001($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "compile_pirop" :subid("cuid_37_1359572548.257") :anon :lex :outer("cuid_170_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 368
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P5010 = 'cuid_173_1359572548.257' 
    capture_lex $P5010 
    .lex "self", _lex_param_0 
    .lex "$qastcomp", _lex_param_1 
    .lex "$op_name", _lex_param_2 
    .lex "@op_args", _lex_param_3 
    set $S5001, _lex_param_2
    index $I5001, $S5001, " ", 0
    unless $I5001 goto if94_end260 
.annotate 'line', 369
    set $S5003, _lex_param_2
    split $P5001, " ", $S5003
    join $S5002, "__", $P5001
    box $P5002, $S5002
    set _lex_param_2, $P5002
  if94_end260:
    find_lex $P5003, "%cached_pirops"
    set $S5004, _lex_param_2
    exists $I5002, $P5003[$S5004]
    if $I5002 goto unless95_end262 
    .const 'Sub' $P5004 = 'cuid_173_1359572548.257' 
    capture_lex $P5004
    $P5005 = $P5004()
  unless95_end262:
.annotate 'line', 376
    find_lex $P5007, "%cached_pirops"
    set $S5005, _lex_param_2
    set $P5006, $P5007[$S5005]
    unless_null $P5006, fallback265
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5006, $P5008
  fallback265:
    $P5009 = $P5006(_lex_param_1, _lex_param_2, _lex_param_3)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_173_1359572548.257") :anon :lex :outer("cuid_37_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 372
    .lex "@pieces", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_lex $P5003, "$op_name"
    set $S5001, $P5003
    split $P5002, "__", $S5001
    set $P101, $P5002
    find_lex $P5004, "%cached_pirops"
    find_lex $P5005, "$op_name"
    set $S5002, $P5005
.annotate 'line', 374
    set $P5006, $P101[0]
    unless_null $P5006, fallback263
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5006, $P5007
  fallback263:
    set $P5008, $P101[1]
    unless_null $P5008, fallback264
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5008, $P5009
  fallback264:
    $P5010 = "&pirop_mapper"($P5006, $P5008)
    set $P5004[$S5002], $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "add_core_op" :subid("cuid_38_1359572548.257") :anon :lex :outer("cuid_170_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 380
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 :named("inlinable") :optional 
    .param int haz_param_7 :opt_flag 
    if haz_param_7, default266
    box $P5004, 0
    set _lex_param_3, $P5004
  default266:
    .lex "self", _lex_param_0 
    .lex "$op", _lex_param_1 
    .lex "$handler", _lex_param_2 
    .lex "$inlinable", _lex_param_3 
    find_lex $P5001, "%core_ops"
    set $S5001, _lex_param_1
    set $P5001[$S5001], _lex_param_2
.annotate 'line', 382
    nqp_decontainerize $P5002, _lex_param_0
    $P5003 = $P5002."set_core_op_inlinability"(_lex_param_1, _lex_param_3)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "add_hll_op" :subid("cuid_39_1359572548.257") :anon :lex :outer("cuid_170_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 386
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 :named("inlinable") :optional 
    .param int haz_param_8 :opt_flag 
    if haz_param_8, default270
    box $P5009, 0
    set _lex_param_4, $P5009
  default270:
    .lex "self", _lex_param_0 
    .lex "$hll", _lex_param_1 
    .lex "$op", _lex_param_2 
    .lex "$handler", _lex_param_3 
    .lex "$inlinable", _lex_param_4 
    find_lex $P5001, "%hll_ops"
    set $S5001, _lex_param_1
    exists $I5001, $P5001[$S5001]
    if $I5001 goto unless96_end268 
    find_lex $P5002, "%hll_ops"
    set $S5002, _lex_param_1
    new $P5003, 'Hash'
    set $P5002[$S5002], $P5003
  unless96_end268:
    find_lex $P5005, "%hll_ops"
    set $S5003, _lex_param_1
    set $P5004, $P5005[$S5003]
    unless_null $P5004, fallback269
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5006
  fallback269:
    set $S5004, _lex_param_2
    set $P5004[$S5004], _lex_param_3
.annotate 'line', 389
    nqp_decontainerize $P5007, _lex_param_0
    $P5008 = $P5007."set_hll_op_inlinability"(_lex_param_1, _lex_param_2, _lex_param_4)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "add_core_pirop_mapping" :subid("cuid_40_1359572548.257") :anon :lex :outer("cuid_170_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 393
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 :named("inlinable") :optional 
    .param int haz_param_9 :opt_flag 
    .const 'Sub' $P5010 = 'cuid_174_1359572548.257' 
    capture_lex $P5010 
    if haz_param_9, default271
    box $P5009, 0
    set _lex_param_4, $P5009
  default271:
    .lex "$pirop_mapper", $P101 
    .lex "self", _lex_param_0 
    .lex "$op", _lex_param_1 
    .lex "$pirop", _lex_param_2 
    .lex "$sig", _lex_param_3 
    .lex "$inlinable", _lex_param_4 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 394
    $P5002 = "&pirop_mapper"(_lex_param_2, _lex_param_3)
    set $P101, $P5002
    find_lex $P5003, "%core_ops"
    set $S5001, _lex_param_1
    .const 'Sub' $P5005 = 'cuid_174_1359572548.257' 
    capture_lex $P5005
    newclosure $P5004, $P5005
    set $P5003[$S5001], $P5004
.annotate 'line', 398
    nqp_decontainerize $P5006, _lex_param_0
    $P5006."set_core_op_inlinability"(_lex_param_1, _lex_param_4)
.annotate 'line', 399
    nqp_decontainerize $P5007, _lex_param_0
    set $S5003, _lex_param_3
    substr $S5002, $S5003, 0, 1
    $P5008 = $P5007."set_core_op_result_type"(_lex_param_1, $S5002)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_174_1359572548.257") :anon :lex :outer("cuid_40_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 395
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 396
    $P5002 = _lex_param_1."op"()
    $P5003 = _lex_param_1."list"()
    find_lex $P5001, "$pirop_mapper"
    $P5004 = $P5001(_lex_param_0, $P5002, $P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "add_hll_pirop_mapping" :subid("cuid_41_1359572548.257") :anon :lex :outer("cuid_170_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 403
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .param pmc _lex_param_5 :named("inlinable") :optional 
    .param int haz_param_10 :opt_flag 
    .const 'Sub' $P5015 = 'cuid_175_1359572548.257' 
    capture_lex $P5015 
    if haz_param_10, default275
    box $P5014, 0
    set _lex_param_5, $P5014
  default275:
    .lex "$pirop_mapper", $P101 
    .lex "self", _lex_param_0 
    .lex "$hll", _lex_param_1 
    .lex "$op", _lex_param_2 
    .lex "$pirop", _lex_param_3 
    .lex "$sig", _lex_param_4 
    .lex "$inlinable", _lex_param_5 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 404
    $P5002 = "&pirop_mapper"(_lex_param_3, _lex_param_4)
    set $P101, $P5002
    find_lex $P5003, "%hll_ops"
    set $S5001, _lex_param_1
    exists $I5001, $P5003[$S5001]
    if $I5001 goto unless97_end273 
    find_lex $P5004, "%hll_ops"
    set $S5002, _lex_param_1
    new $P5005, 'Hash'
    set $P5004[$S5002], $P5005
  unless97_end273:
    find_lex $P5007, "%hll_ops"
    set $S5003, _lex_param_1
    set $P5006, $P5007[$S5003]
    unless_null $P5006, fallback274
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5006, $P5008
  fallback274:
    set $S5004, _lex_param_2
    .const 'Sub' $P5010 = 'cuid_175_1359572548.257' 
    capture_lex $P5010
    newclosure $P5009, $P5010
    set $P5006[$S5004], $P5009
.annotate 'line', 409
    nqp_decontainerize $P5011, _lex_param_0
    $P5011."set_hll_op_inlinability"(_lex_param_1, _lex_param_2, _lex_param_5)
.annotate 'line', 410
    nqp_decontainerize $P5012, _lex_param_0
    set $S5006, _lex_param_4
    substr $S5005, $S5006, 0, 1
    $P5013 = $P5012."set_hll_op_result_type"(_lex_param_1, _lex_param_2, $S5005)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_175_1359572548.257") :anon :lex :outer("cuid_41_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 406
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 407
    $P5002 = _lex_param_1."op"()
    $P5003 = _lex_param_1."list"()
    find_lex $P5001, "$pirop_mapper"
    $P5004 = $P5001(_lex_param_0, $P5002, $P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "set_core_op_inlinability" :subid("cuid_42_1359572548.257") :anon :lex :outer("cuid_170_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 414
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "self", _lex_param_0 
    .lex "$op", _lex_param_1 
    .lex "$inlinable", _lex_param_2 
    find_lex $P5001, "%core_inlinability"
    set $S5001, _lex_param_1
    set $P5001[$S5001], _lex_param_2
    .return (_lex_param_2) 
.end
.HLL "nqp"
.namespace []
.sub "set_hll_op_inlinability" :subid("cuid_43_1359572548.257") :anon :lex :outer("cuid_170_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 420
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$hll", _lex_param_1 
    .lex "$op", _lex_param_2 
    .lex "$inlinable", _lex_param_3 
    find_lex $P5001, "%hll_inlinability"
    set $S5001, _lex_param_1
    exists $I5001, $P5001[$S5001]
    if $I5001 goto unless98_end277 
    find_lex $P5002, "%hll_inlinability"
    set $S5002, _lex_param_1
    new $P5003, 'Hash'
    set $P5002[$S5002], $P5003
  unless98_end277:
    find_lex $P5005, "%hll_inlinability"
    set $S5003, _lex_param_1
    set $P5004, $P5005[$S5003]
    unless_null $P5004, fallback278
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5006
  fallback278:
    set $S5004, _lex_param_2
    set $P5004[$S5004], _lex_param_3
    .return (_lex_param_3) 
.end
.HLL "nqp"
.namespace []
.sub "is_inlinable" :subid("cuid_44_1359572548.257") :anon :lex :outer("cuid_170_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 426
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "self", _lex_param_0 
    .lex "$hll", _lex_param_1 
    .lex "$op", _lex_param_2 
    root_new $P101, ['parrot';'Continuation']
    set_label $P101, lexotic_279
    .lex "RETURN", $P101
    find_lex $P5001, "%hll_inlinability"
    set $S5001, _lex_param_1
    exists $I5001, $P5001[$S5001]
    unless $I5001 goto if99_end282 
.annotate 'line', 427
    find_lex $P5003, "%hll_inlinability"
    set $S5002, _lex_param_1
    set $P5002, $P5003[$S5002]
    unless_null $P5002, fallback285
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5002, $P5004
  fallback285:
    set $S5003, _lex_param_2
    exists $I5002, $P5002[$S5003]
    box $P5013, $I5002
    set $P5012, $P5013
    unless $I5002 goto if100_end284 
.annotate 'line', 428
    find_lex $P5008, "%hll_inlinability"
    set $S5004, _lex_param_1
    set $P5007, $P5008[$S5004]
    unless_null $P5007, fallback286
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5007, $P5009
  fallback286:
    set $S5005, _lex_param_2
    set $P5006, $P5007[$S5005]
    unless_null $P5006, fallback287
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5006, $P5010
  fallback287:
    find_lex $P5005, "RETURN"
    $P5011 = $P5005($P5006)
    set $P5012, $P5011
  if100_end284:
  if99_end282:
    find_lex $P5017, "%core_inlinability"
    set $S5006, _lex_param_2
    set $P5016, $P5017[$S5006]
    unless_null $P5016, fallback289
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5016, $P5018
  fallback289:
    set $P5015, $P5016
    defined $I5003, $P5015
    if $I5003, defor288
    box $P5019, 0
    set $P5015, $P5019
  defor288:
    find_lex $P5014, "RETURN"
    $P5020 = $P5014($P5015)
    goto lexotic_280
  lexotic_279:
    .get_results ($P5020)
  lexotic_280:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "set_core_op_result_type" :subid("cuid_45_1359572548.257") :anon :lex :outer("cuid_170_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 436
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "self", _lex_param_0 
    .lex "$op", _lex_param_1 
    .lex "$type_char", _lex_param_2 
    set $S5001, _lex_param_2
    iseq $I5001, $S5001, "I"
    unless $I5001 goto if101_else290 
.annotate 'line', 437
    find_lex $P5001, "%core_result_type"
    set $S5002, _lex_param_1
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 2
    set $P5001[$S5002], $P5002
    set $P5010, $P5002
    goto if101_end291
  if101_else290:
    set $S5003, _lex_param_2
    iseq $I5002, $S5003, "N"
    unless $I5002 goto if102_else292 
.annotate 'line', 440
    find_lex $P5003, "%core_result_type"
    set $S5004, _lex_param_1
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 3
    set $P5003[$S5004], $P5004
    set $P5009, $P5004
    goto if102_end293
  if102_else292:
    set $S5005, _lex_param_2
    iseq $I5003, $S5005, "S"
    box $P5008, $I5003
    set $P5007, $P5008
    unless $I5003 goto if103_end295 
.annotate 'line', 443
    find_lex $P5005, "%core_result_type"
    set $S5006, _lex_param_1
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 4
    set $P5005[$S5006], $P5006
    set $P5007, $P5006
  if103_end295:
    set $P5009, $P5007
  if102_end293:
    set $P5010, $P5009
  if101_end291:
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "set_hll_op_result_type" :subid("cuid_46_1359572548.257") :anon :lex :outer("cuid_170_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 450
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$hll", _lex_param_1 
    .lex "$op", _lex_param_2 
    .lex "$type_char", _lex_param_3 
    find_lex $P5001, "%hll_result_type"
    set $S5001, _lex_param_1
    exists $I5001, $P5001[$S5001]
    if $I5001 goto unless104_end297 
    find_lex $P5002, "%hll_result_type"
    set $S5002, _lex_param_1
    new $P5003, 'Hash'
    set $P5002[$S5002], $P5003
  unless104_end297:
    set $S5003, _lex_param_3
    iseq $I5002, $S5003, "I"
    unless $I5002 goto if105_else298 
.annotate 'line', 452
    find_lex $P5005, "%hll_result_type"
    set $S5004, _lex_param_1
    set $P5004, $P5005[$S5004]
    unless_null $P5004, fallback300
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5006
  fallback300:
    set $S5005, _lex_param_2
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 2
    set $P5004[$S5005], $P5007
    set $P5019, $P5007
    goto if105_end299
  if105_else298:
    set $S5006, _lex_param_3
    iseq $I5003, $S5006, "N"
    unless $I5003 goto if106_else301 
.annotate 'line', 455
    find_lex $P5009, "%hll_result_type"
    set $S5007, _lex_param_1
    set $P5008, $P5009[$S5007]
    unless_null $P5008, fallback303
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5008, $P5010
  fallback303:
    set $S5008, _lex_param_2
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 3
    set $P5008[$S5008], $P5011
    set $P5018, $P5011
    goto if106_end302
  if106_else301:
    set $S5009, _lex_param_3
    iseq $I5004, $S5009, "S"
    box $P5017, $I5004
    set $P5016, $P5017
    unless $I5004 goto if107_end305 
.annotate 'line', 458
    find_lex $P5013, "%hll_result_type"
    set $S5010, _lex_param_1
    set $P5012, $P5013[$S5010]
    unless_null $P5012, fallback306
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5012, $P5014
  fallback306:
    set $S5011, _lex_param_2
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 4
    set $P5012[$S5011], $P5015
    set $P5016, $P5015
  if107_end305:
    set $P5018, $P5016
  if106_end302:
    set $P5019, $P5018
  if105_end299:
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "attach_result_type" :subid("cuid_47_1359572548.257") :anon :lex :outer("cuid_170_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 464
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$op", $P101 
    .lex "self", _lex_param_0 
    .lex "$hll", _lex_param_1 
    .lex "$node", _lex_param_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_307
    .lex "RETURN", $P102
.annotate 'line', 465
    $P5002 = _lex_param_2."op"()
    set $P101, $P5002
    find_lex $P5003, "%hll_result_type"
    set $S5001, _lex_param_1
    exists $I5001, $P5003[$S5001]
    unless $I5001 goto if108_end310 
.annotate 'line', 466
    find_lex $P5005, "%hll_result_type"
    set $S5002, _lex_param_1
    set $P5004, $P5005[$S5002]
    unless_null $P5004, fallback313
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5006
  fallback313:
    set $S5003, $P101
    exists $I5002, $P5004[$S5003]
    box $P5015, $I5002
    set $P5014, $P5015
    unless $I5002 goto if109_end312 
.annotate 'line', 467
.annotate 'line', 468
    find_lex $P5009, "%hll_result_type"
    set $S5004, _lex_param_1
    set $P5008, $P5009[$S5004]
    unless_null $P5008, fallback314
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5008, $P5010
  fallback314:
    set $S5005, $P101
    set $P5007, $P5008[$S5005]
    unless_null $P5007, fallback315
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5007, $P5011
  fallback315:
    _lex_param_2."returns"($P5007)
    find_lex $P5012, "RETURN"
    $P5013 = $P5012(1)
    set $P5014, $P5013
  if109_end312:
  if108_end310:
    find_lex $P5016, "%core_result_type"
    set $S5006, $P101
    exists $I5003, $P5016[$S5006]
    box $P5022, $I5003
    set $P5021, $P5022
    unless $I5003 goto if110_end317 
.annotate 'line', 472
.annotate 'line', 473
    find_lex $P5018, "%core_result_type"
    set $S5007, $P101
    set $P5017, $P5018[$S5007]
    unless_null $P5017, fallback318
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5017, $P5019
  fallback318:
    $P5020 = _lex_param_2."returns"($P5017)
    set $P5021, $P5020
  if110_end317:
    goto lexotic_308
  lexotic_307:
    .get_results ($P5021)
  lexotic_308:
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "add_hll_box" :subid("cuid_48_1359572548.257") :anon :lex :outer("cuid_170_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 478
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$hll", _lex_param_1 
    .lex "$type", _lex_param_2 
    .lex "$handler", _lex_param_3 
    set $S5001, _lex_param_2
    iseq $I5001, $S5001, "i"
    set $I5003, $I5001
    if $I5001 goto unless113_end324 
    set $S5002, _lex_param_2
    iseq $I5002, $S5002, "n"
    set $I5003, $I5002
  unless113_end324:
    set $I5005, $I5003
    if $I5003 goto unless112_end322 
    set $S5003, _lex_param_2
    iseq $I5004, $S5003, "s"
    set $I5005, $I5004
  unless112_end322:
    if $I5005 goto unless111_end320 
.annotate 'line', 479
    set $S5006, _lex_param_2
    concat $S5005, "Unknown box type '", $S5006
    concat $S5004, $S5005, "'"
    box $P5001, $S5004
    die $P5001
  unless111_end320:
    find_lex $P5002, "%hll_box"
    set $S5007, _lex_param_1
    exists $I5006, $P5002[$S5007]
    if $I5006 goto unless114_end326 
    find_lex $P5003, "%hll_box"
    set $S5008, _lex_param_1
    new $P5004, 'Hash'
    set $P5003[$S5008], $P5004
  unless114_end326:
    find_lex $P5006, "%hll_box"
    set $S5009, _lex_param_1
    set $P5005, $P5006[$S5009]
    unless_null $P5005, fallback327
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5005, $P5007
  fallback327:
    set $S5010, _lex_param_2
    set $P5005[$S5010], _lex_param_3
    .return (_lex_param_3) 
.end
.HLL "nqp"
.namespace []
.sub "add_hll_unbox" :subid("cuid_49_1359572548.257") :anon :lex :outer("cuid_170_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 487
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$hll", _lex_param_1 
    .lex "$type", _lex_param_2 
    .lex "$handler", _lex_param_3 
    set $S5001, _lex_param_2
    iseq $I5001, $S5001, "i"
    set $I5003, $I5001
    if $I5001 goto unless117_end333 
    set $S5002, _lex_param_2
    iseq $I5002, $S5002, "n"
    set $I5003, $I5002
  unless117_end333:
    set $I5005, $I5003
    if $I5003 goto unless116_end331 
    set $S5003, _lex_param_2
    iseq $I5004, $S5003, "s"
    set $I5005, $I5004
  unless116_end331:
    if $I5005 goto unless115_end329 
.annotate 'line', 488
    set $S5006, _lex_param_2
    concat $S5005, "Unknown unbox type '", $S5006
    concat $S5004, $S5005, "'"
    box $P5001, $S5004
    die $P5001
  unless115_end329:
    find_lex $P5002, "%hll_unbox"
    set $S5007, _lex_param_1
    exists $I5006, $P5002[$S5007]
    if $I5006 goto unless118_end335 
    find_lex $P5003, "%hll_unbox"
    set $S5008, _lex_param_1
    new $P5004, 'Hash'
    set $P5003[$S5008], $P5004
  unless118_end335:
    find_lex $P5006, "%hll_unbox"
    set $S5009, _lex_param_1
    set $P5005, $P5006[$S5009]
    unless_null $P5005, fallback336
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5005, $P5007
  fallback336:
    set $S5010, _lex_param_2
    set $P5005[$S5010], _lex_param_3
    .return (_lex_param_3) 
.end
.HLL "nqp"
.namespace []
.sub "box" :subid("cuid_50_1359572548.257") :anon :lex :outer("cuid_170_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 496
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "self", _lex_param_0 
    .lex "$qastcomp", _lex_param_1 
    .lex "$hll", _lex_param_2 
    .lex "$type", _lex_param_3 
    .lex "$post", _lex_param_4 
.annotate 'line', 497
    find_lex $P5003, "%hll_box"
    set $S5001, _lex_param_2
    set $P5002, $P5003[$S5001]
    unless_null $P5002, fallback337
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5002, $P5004
  fallback337:
    set $S5002, _lex_param_3
    set $P5001, $P5002[$S5002]
    unless_null $P5001, fallback338
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5005
  fallback338:
    $P5006 = $P5001(_lex_param_1, _lex_param_4)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "unbox" :subid("cuid_51_1359572548.257") :anon :lex :outer("cuid_170_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 501
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "self", _lex_param_0 
    .lex "$qastcomp", _lex_param_1 
    .lex "$hll", _lex_param_2 
    .lex "$type", _lex_param_3 
    .lex "$post", _lex_param_4 
.annotate 'line', 502
    find_lex $P5003, "%hll_unbox"
    set $S5001, _lex_param_2
    set $P5002, $P5003[$S5001]
    unless_null $P5002, fallback339
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5002, $P5004
  fallback339:
    set $S5002, _lex_param_3
    set $P5001, $P5002[$S5002]
    unless_null $P5001, fallback340
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5005
  fallback340:
    $P5006 = $P5001(_lex_param_1, _lex_param_4)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_177_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 587
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5022 = 'cuid_176_1359572548.257' 
    capture_lex $P5022 
    .lex "$list_reg", $P101 
    .lex "$ops", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 589
    find_dynamic_lex $P5003, "$*REGALLOC"
    unless_null $P5003, fallback342
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$REGALLOC"]
    unless_null $P5004, fallback343
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5007
  fallback343:
    unless_null $P5004, vivi_119344
    die "Contextual $*REGALLOC not found"
    box $P5008, "Contextual $*REGALLOC not found"
    set $P5004, $P5008
  vivi_119344:
    set $P5003, $P5004
  fallback342:
    $P5009 = $P5003."fresh_p"()
    set $P101, $P5009
.annotate 'line', 590
    nqp_get_sc_object $P5013, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5012, $P5013, "PIRT"
    get_who $P5011, $P5012
    set $P5010, $P5011["Ops"]
    unless_null $P5010, fallback345
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5010, $P5014
  fallback345:
    $P5015 = $P5010."new"($P101 :named("result"))
    set $P102, $P5015
.annotate 'line', 591
    $P102."push_pirop"("new", $P101, "'ResizablePMCArray'")
.annotate 'line', 594
    $P5019 = _lex_param_1."list"()
    set $P5016, $P5019
    iter $P5018, $P5019
  for_next346:
    unless $P5018, for_done348
    shift $P5021, $P5018
  for_redo347:
    .const 'Sub' $P5020 = 'cuid_176_1359572548.257' 
    capture_lex $P5020
    $P5016 = $P5020($P5021)
    goto for_next346
  for_done348:
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_176_1359572548.257") :anon :lex :outer("cuid_177_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 594
    .param pmc _lex_param_0 
    .lex "$post", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 595
    find_lex $P5002, "$qastcomp"
    find_lex $P5003, "$qastcomp"
    $P5004 = $P5003."as_post"(_lex_param_0)
    $P5005 = $P5002."coerce"($P5004, "P")
    set $P101, $P5005
.annotate 'line', 596
    find_lex $P5006, "$ops"
    $P5006."push"($P101)
.annotate 'line', 597
    find_lex $P5007, "$ops"
    find_lex $P5008, "$list_reg"
    $P5009 = $P101."result"()
    $P5010 = $P5007."push_pirop"("push", $P5008, $P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_179_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 603
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5022 = 'cuid_178_1359572548.257' 
    capture_lex $P5022 
    .lex "$list_reg", $P101 
    .lex "$ops", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 605
    find_dynamic_lex $P5003, "$*REGALLOC"
    unless_null $P5003, fallback350
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$REGALLOC"]
    unless_null $P5004, fallback351
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5007
  fallback351:
    unless_null $P5004, vivi_120352
    die "Contextual $*REGALLOC not found"
    box $P5008, "Contextual $*REGALLOC not found"
    set $P5004, $P5008
  vivi_120352:
    set $P5003, $P5004
  fallback350:
    $P5009 = $P5003."fresh_p"()
    set $P101, $P5009
.annotate 'line', 606
    nqp_get_sc_object $P5013, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5012, $P5013, "PIRT"
    get_who $P5011, $P5012
    set $P5010, $P5011["Ops"]
    unless_null $P5010, fallback353
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5010, $P5014
  fallback353:
    $P5015 = $P5010."new"($P101 :named("result"))
    set $P102, $P5015
.annotate 'line', 607
    $P102."push_pirop"("new", $P101, "'QRPA'")
.annotate 'line', 610
    $P5019 = _lex_param_1."list"()
    set $P5016, $P5019
    iter $P5018, $P5019
  for_next354:
    unless $P5018, for_done356
    shift $P5021, $P5018
  for_redo355:
    .const 'Sub' $P5020 = 'cuid_178_1359572548.257' 
    capture_lex $P5020
    $P5016 = $P5020($P5021)
    goto for_next354
  for_done356:
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_178_1359572548.257") :anon :lex :outer("cuid_179_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 610
    .param pmc _lex_param_0 
    .lex "$post", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 611
    find_lex $P5002, "$qastcomp"
    find_lex $P5003, "$qastcomp"
    $P5004 = $P5003."as_post"(_lex_param_0)
    $P5005 = $P5002."coerce"($P5004, "P")
    set $P101, $P5005
.annotate 'line', 612
    find_lex $P5006, "$ops"
    $P5006."push"($P101)
.annotate 'line', 613
    find_lex $P5007, "$ops"
    find_lex $P5008, "$list_reg"
    $P5009 = $P101."result"()
    $P5010 = $P5007."push_pirop"("push", $P5008, $P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_181_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 619
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5022 = 'cuid_180_1359572548.257' 
    capture_lex $P5022 
    .lex "$list_reg", $P101 
    .lex "$ops", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 621
    find_dynamic_lex $P5003, "$*REGALLOC"
    unless_null $P5003, fallback358
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$REGALLOC"]
    unless_null $P5004, fallback359
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5007
  fallback359:
    unless_null $P5004, vivi_121360
    die "Contextual $*REGALLOC not found"
    box $P5008, "Contextual $*REGALLOC not found"
    set $P5004, $P5008
  vivi_121360:
    set $P5003, $P5004
  fallback358:
    $P5009 = $P5003."fresh_p"()
    set $P101, $P5009
.annotate 'line', 622
    nqp_get_sc_object $P5013, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5012, $P5013, "PIRT"
    get_who $P5011, $P5012
    set $P5010, $P5011["Ops"]
    unless_null $P5010, fallback361
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5010, $P5014
  fallback361:
    $P5015 = $P5010."new"($P101 :named("result"))
    set $P102, $P5015
.annotate 'line', 623
    $P102."push_pirop"("new", $P101, "'ResizableIntegerArray'")
.annotate 'line', 626
    $P5019 = _lex_param_1."list"()
    set $P5016, $P5019
    iter $P5018, $P5019
  for_next362:
    unless $P5018, for_done364
    shift $P5021, $P5018
  for_redo363:
    .const 'Sub' $P5020 = 'cuid_180_1359572548.257' 
    capture_lex $P5020
    $P5016 = $P5020($P5021)
    goto for_next362
  for_done364:
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_180_1359572548.257") :anon :lex :outer("cuid_181_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 626
    .param pmc _lex_param_0 
    .lex "$post", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 627
    find_lex $P5002, "$qastcomp"
    find_lex $P5003, "$qastcomp"
    $P5004 = $P5003."as_post"(_lex_param_0)
    $P5005 = $P5002."coerce"($P5004, "i")
    set $P101, $P5005
.annotate 'line', 628
    find_lex $P5006, "$ops"
    $P5006."push"($P101)
.annotate 'line', 629
    find_lex $P5007, "$ops"
    find_lex $P5008, "$list_reg"
    $P5009 = $P101."result"()
    $P5010 = $P5007."push_pirop"("push", $P5008, $P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_183_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 635
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5022 = 'cuid_182_1359572548.257' 
    capture_lex $P5022 
    .lex "$list_reg", $P101 
    .lex "$ops", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 637
    find_dynamic_lex $P5003, "$*REGALLOC"
    unless_null $P5003, fallback366
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$REGALLOC"]
    unless_null $P5004, fallback367
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5007
  fallback367:
    unless_null $P5004, vivi_122368
    die "Contextual $*REGALLOC not found"
    box $P5008, "Contextual $*REGALLOC not found"
    set $P5004, $P5008
  vivi_122368:
    set $P5003, $P5004
  fallback366:
    $P5009 = $P5003."fresh_p"()
    set $P101, $P5009
.annotate 'line', 638
    nqp_get_sc_object $P5013, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5012, $P5013, "PIRT"
    get_who $P5011, $P5012
    set $P5010, $P5011["Ops"]
    unless_null $P5010, fallback369
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5010, $P5014
  fallback369:
    $P5015 = $P5010."new"($P101 :named("result"))
    set $P102, $P5015
.annotate 'line', 639
    $P102."push_pirop"("new", $P101, "'ResizableStringArray'")
.annotate 'line', 642
    $P5019 = _lex_param_1."list"()
    set $P5016, $P5019
    iter $P5018, $P5019
  for_next370:
    unless $P5018, for_done372
    shift $P5021, $P5018
  for_redo371:
    .const 'Sub' $P5020 = 'cuid_182_1359572548.257' 
    capture_lex $P5020
    $P5016 = $P5020($P5021)
    goto for_next370
  for_done372:
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_182_1359572548.257") :anon :lex :outer("cuid_183_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 642
    .param pmc _lex_param_0 
    .lex "$post", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 643
    find_lex $P5002, "$qastcomp"
    find_lex $P5003, "$qastcomp"
    $P5004 = $P5003."as_post"(_lex_param_0)
    $P5005 = $P5002."coerce"($P5004, "s")
    set $P101, $P5005
.annotate 'line', 644
    find_lex $P5006, "$ops"
    $P5006."push"($P101)
.annotate 'line', 645
    find_lex $P5007, "$ops"
    find_lex $P5008, "$list_reg"
    $P5009 = $P101."result"()
    $P5010 = $P5007."push_pirop"("push", $P5008, $P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_185_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 651
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_184_1359572548.257' 
    capture_lex $P5030 
    .lex "$list_reg", $P101 
    .lex "$ops", $P102 
    .lex "$block_reg", $P103 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
.annotate 'line', 653
    find_dynamic_lex $P5004, "$*REGALLOC"
    unless_null $P5004, fallback374
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$REGALLOC"]
    unless_null $P5005, fallback375
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5005, $P5008
  fallback375:
    unless_null $P5005, vivi_123376
    die "Contextual $*REGALLOC not found"
    box $P5009, "Contextual $*REGALLOC not found"
    set $P5005, $P5009
  vivi_123376:
    set $P5004, $P5005
  fallback374:
    $P5010 = $P5004."fresh_p"()
    set $P101, $P5010
.annotate 'line', 654
    nqp_get_sc_object $P5014, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5013, $P5014, "PIRT"
    get_who $P5012, $P5013
    set $P5011, $P5012["Ops"]
    unless_null $P5011, fallback377
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5011, $P5015
  fallback377:
    $P5016 = $P5011."new"($P101 :named("result"))
    set $P102, $P5016
.annotate 'line', 655
    $P102."push_pirop"("new", $P101, "'ResizablePMCArray'")
.annotate 'line', 658
    find_dynamic_lex $P5017, "$*REGALLOC"
    unless_null $P5017, fallback378
    nqp_get_sc_object $P5020, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5019, $P5020
    set $P5018, $P5019["$REGALLOC"]
    unless_null $P5018, fallback379
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5018, $P5021
  fallback379:
    unless_null $P5018, vivi_124380
    die "Contextual $*REGALLOC not found"
    box $P5022, "Contextual $*REGALLOC not found"
    set $P5018, $P5022
  vivi_124380:
    set $P5017, $P5018
  fallback378:
    $P5023 = $P5017."fresh_p"()
    set $P103, $P5023
.annotate 'line', 659
    $P5027 = _lex_param_1."list"()
    set $P5024, $P5027
    iter $P5026, $P5027
  for_next381:
    unless $P5026, for_done383
    shift $P5029, $P5026
  for_redo382:
    .const 'Sub' $P5028 = 'cuid_184_1359572548.257' 
    capture_lex $P5028
    $P5024 = $P5028($P5029)
    goto for_next381
  for_done383:
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_184_1359572548.257") :anon :lex :outer("cuid_185_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 659
    .param pmc _lex_param_0 
    .lex "$cuid", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 660
    $P5002 = _lex_param_0."cuid"()
    set $P101, $P5002
.annotate 'line', 661
    find_lex $P5003, "$ops"
    find_lex $P5004, "$block_reg"
    set $S5005, $P5004
    concat $S5004, ".const 'Sub' ", $S5005
    concat $S5003, $S5004, " = \""
    set $S5006, $P101
    concat $S5002, $S5003, $S5006
    concat $S5001, $S5002, "\""
    $P5003."push_pirop"($S5001)
.annotate 'line', 662
    find_lex $P5005, "$ops"
    find_lex $P5006, "$list_reg"
    find_lex $P5007, "$block_reg"
    $P5008 = $P5005."push_pirop"("push", $P5006, $P5007)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_187_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 668
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5024 = 'cuid_186_1359572548.257' 
    capture_lex $P5024 
    .lex "$hash_reg", $P101 
    .lex "$ops", $P102 
    .lex "$i", $P103 
    .lex "@op_list", $P104 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    new $P5004, 'ResizablePMCArray'
    set $P104, $P5004
.annotate 'line', 670
    find_dynamic_lex $P5005, "$*REGALLOC"
    unless_null $P5005, fallback385
    nqp_get_sc_object $P5008, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$REGALLOC"]
    unless_null $P5006, fallback386
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5006, $P5009
  fallback386:
    unless_null $P5006, vivi_125387
    die "Contextual $*REGALLOC not found"
    box $P5010, "Contextual $*REGALLOC not found"
    set $P5006, $P5010
  vivi_125387:
    set $P5005, $P5006
  fallback385:
    $P5011 = $P5005."fresh_p"()
    set $P101, $P5011
.annotate 'line', 671
    nqp_get_sc_object $P5015, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5014, $P5015, "PIRT"
    get_who $P5013, $P5014
    set $P5012, $P5013["Ops"]
    unless_null $P5012, fallback388
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5012, $P5016
  fallback388:
    $P5017 = $P5012."new"($P101 :named("result"))
    set $P102, $P5017
.annotate 'line', 672
    $P102."push_pirop"("new", $P101, "'Hash'")
    box $P5018, 0
    set $P103, $P5018
.annotate 'line', 676
    $P5019 = _lex_param_1."list"()
    set $P104, $P5019
  while126_test389:
    set $N5001, $P103
    set $N5002, $P104
    islt $I5001, $N5001, $N5002
    box $P5023, $I5001
    set $P5022, $P5023
    unless $I5001 goto while126_done393 
  while126_redo391:
    .const 'Sub' $P5020 = 'cuid_186_1359572548.257' 
    capture_lex $P5020
    $P5021 = $P5020()
    set $P5022, $P5021
    goto while126_test389 
  while126_done393:
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_186_1359572548.257") :anon :lex :outer("cuid_187_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 677
    .lex "$kpost", $P101 
    .lex "$vpost", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 678
    find_lex $P5003, "$qastcomp"
    find_lex $P5004, "$qastcomp"
    find_lex $P5006, "@op_list"
    find_lex $P5007, "$i"
    set $I5001, $P5007
    set $P5005, $P5006[$I5001]
    unless_null $P5005, fallback394
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5005, $P5008
  fallback394:
    $P5009 = $P5004."as_post"($P5005)
    $P5010 = $P5003."coerce"($P5009, "s")
    set $P101, $P5010
.annotate 'line', 679
    find_lex $P5011, "$ops"
    $P5011."push"($P101)
    find_lex $P5012, "$i"
    set $N5002, $P5012
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5013, $N5001
    store_lex "$i", $P5013
.annotate 'line', 682
    find_lex $P5014, "$qastcomp"
    find_lex $P5015, "$qastcomp"
    find_lex $P5017, "@op_list"
    find_lex $P5018, "$i"
    set $I5002, $P5018
    set $P5016, $P5017[$I5002]
    unless_null $P5016, fallback395
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5016, $P5019
  fallback395:
    $P5020 = $P5015."as_post"($P5016)
    $P5021 = $P5014."coerce"($P5020, "P")
    set $P102, $P5021
.annotate 'line', 683
    find_lex $P5022, "$ops"
    $P5022."push"($P102)
    find_lex $P5023, "$i"
    set $N5005, $P5023
    set $N5006, 1
    add $N5004, $N5005, $N5006
    box $P5024, $N5004
    store_lex "$i", $P5024
.annotate 'line', 686
    find_lex $P5025, "$ops"
    find_lex $P5026, "$hash_reg"
    set $S5004, $P5026
    concat $S5003, $S5004, "["
    $P5027 = $P101."result"()
    set $S5005, $P5027
    concat $S5002, $S5003, $S5005
    concat $S5001, $S5002, "]"
    $P5028 = $P102."result"()
    $P5029 = $P5025."push_pirop"("set", $S5001, $P5028)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_189_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 693
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5049 = 'cuid_188_1359572548.257' 
    capture_lex $P5049 
    .lex "@clist", $P101 
    .lex "$cpast", $P102 
    .lex "$ops", $P103 
    .lex "$endlabel", $P104 
    .lex "$apast", $P105 
    .lex "$apost", $P106 
    .lex "$more", $P107 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P106, $P5006
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P107, $P5007
    set $P102, _lex_param_1
  while127_test397:
.annotate 'line', 697
    nqp_get_sc_object $P5011, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["Op"]
    unless_null $P5008, fallback404
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5008, $P5012
  fallback404:
    $P5013 = $P5008."ACCEPTS"($P102)
    set $P5015, $P5013
    unless $P5013 goto if128_end403 
    $P5014 = $P102."op"()
    set $S5001, $P5014
    iseq $I5001, $S5001, "chain"
    box $P5016, $I5001
    set $P5015, $P5016
  if128_end403:
    set $P5019, $P5015
    unless $P5015 goto while127_done401 
  while127_redo399:
    push $P101, $P102
    set $P5017, $P102[0]
    unless_null $P5017, fallback405
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5017, $P5018
  fallback405:
    set $P102, $P5017
    set $P5019, $P102
    goto while127_test397 
  while127_done401:
.annotate 'line', 702
    nqp_get_sc_object $P5023, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5022, $P5023, "PIRT"
    get_who $P5021, $P5022
    set $P5020, $P5021["Ops"]
    unless_null $P5020, fallback406
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5020, $P5024
  fallback406:
    find_dynamic_lex $P5025, "$*REGALLOC"
    unless_null $P5025, fallback407
    nqp_get_sc_object $P5028, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["$REGALLOC"]
    unless_null $P5026, fallback408
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5026, $P5029
  fallback408:
    unless_null $P5026, vivi_129409
    die "Contextual $*REGALLOC not found"
    box $P5030, "Contextual $*REGALLOC not found"
    set $P5026, $P5030
  vivi_129409:
    set $P5025, $P5026
  fallback407:
    $P5031 = $P5025."fresh_p"()
    $P5032 = $P5020."new"($P5031 :named("result"))
    set $P103, $P5032
.annotate 'line', 703
    nqp_get_sc_object $P5036, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5035, $P5036, "PIRT"
    get_who $P5034, $P5035
    set $P5033, $P5034["Label"]
    unless_null $P5033, fallback410
    nqp_get_sc_object $P5037, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5033, $P5037
  fallback410:
    $P5038 = _lex_param_0."unique"("chain_end_")
    $P5039 = $P5033."new"($P5038 :named("name"))
    set $P104, $P5039
    pop $P5040, $P101
    set $P102, $P5040
    set $P5041, $P102[0]
    unless_null $P5041, fallback411
    nqp_get_sc_object $P5042, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5041, $P5042
  fallback411:
    set $P105, $P5041
.annotate 'line', 707
    $P5043 = _lex_param_0."as_post"($P105)
    $P5044 = _lex_param_0."coerce"($P5043, "P")
    set $P106, $P5044
.annotate 'line', 708
    $P103."push"($P106)
    box $P5045, 1
    set $P107, $P5045
  while130_test412:
    set $P5048, $P107
    unless $P107 goto while130_done416 
  while130_redo414:
    .const 'Sub' $P5046 = 'cuid_188_1359572548.257' 
    capture_lex $P5046
    $P5047 = $P5046()
    set $P5048, $P5047
    goto while130_test412 
  while130_done416:
.annotate 'line', 729
    $P103."push"($P104)
    .return ($P103) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_188_1359572548.257") :anon :lex :outer("cuid_189_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 711
    .lex "$bpast", $P101 
    .lex "$bpost", $P102 
    .lex "$name", $P103 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    find_lex $P5005, "$cpast"
    set $P5004, $P5005[1]
    unless_null $P5004, fallback417
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5006
  fallback417:
    set $P101, $P5004
.annotate 'line', 713
    find_lex $P5007, "$qastcomp"
    find_lex $P5008, "$qastcomp"
    $P5009 = $P5008."as_post"($P101)
    $P5010 = $P5007."coerce"($P5009, "P")
    set $P102, $P5010
.annotate 'line', 714
    find_lex $P5011, "$ops"
    $P5011."push"($P102)
.annotate 'line', 716
    find_lex $P5012, "$qastcomp"
    find_lex $P5013, "$cpast"
    $P5014 = $P5013."name"()
    $P5015 = $P5012."escape"($P5014)
    set $P103, $P5015
.annotate 'line', 717
    find_lex $P5016, "$ops"
    find_lex $P5017, "$apost"
    find_lex $P5018, "$ops"
    $P5016."push_pirop"("call", $P103, $P5017, $P102, $P5018 :named("result"))
    find_lex $P5019, "@clist"
    unless $P5019 goto if131_else418 
.annotate 'line', 719
.annotate 'line', 720
    find_lex $P5020, "$ops"
    find_lex $P5021, "$ops"
    find_lex $P5022, "$endlabel"
    $P5020."push_pirop"("unless", $P5021, $P5022)
    find_lex $P5024, "@clist"
    pop $P5023, $P5024
    store_lex "$cpast", $P5023
    store_lex "$apost", $P102
    set $P5026, $P102
    goto if131_end419
  if131_else418:
.annotate 'line', 724
    box $P5025, 0
    store_lex "$more", $P5025
    set $P5026, $P5025
  if131_end419:
    .return ($P5026) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_190_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 735
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 736
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Stmts"]
    unless_null $P5001, fallback421
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5005
  fallback421:
    $P5006 = _lex_param_1."list"()
    $P5007 = $P5001."new"($P5006 :flat)
    $P5008 = _lex_param_0."as_post"($P5007)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_197_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 740
    .param pmc _lex_param_0 
    .const 'Sub' $P5009 = 'cuid_192_1359572548.257' 
    capture_lex $P5009 
    .lex "$op_name", _lex_param_0 
.annotate 'line', 741
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Operations"]
    unless_null $P5001, fallback422
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5005
  fallback422:
    .const 'Sub' $P5007 = 'cuid_192_1359572548.257' 
    capture_lex $P5007
    newclosure $P5006, $P5007
    $P5008 = $P5001."add_core_op"(_lex_param_0, $P5006, 1 :named("inlinable"))
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_192_1359572548.257") :anon :lex :outer("cuid_197_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 741
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5102 = 'cuid_191_1359572548.257' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_193_1359572548.257' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_194_1359572548.257' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_195_1359572548.257' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_196_1359572548.257' 
    capture_lex $P5102 
    .lex "$operands", $P101 
    .lex "$if_id", $P102 
    .lex "$else_lbl", $P103 
    .lex "$end_lbl", $P104 
    .lex "@comp_ops", $P105 
    .lex "@op_types", $P106 
    .lex "@im_args", $P107 
    .lex "$res_type", $P108 
    .lex "$res_reg", $P109 
    .lex "$ops", $P110 
    .lex "$cond_result", $P111 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P104, $P5004
    new $P5005, 'ResizablePMCArray'
    set $P105, $P5005
    new $P5006, 'ResizablePMCArray'
    set $P106, $P5006
    new $P5007, 'ResizablePMCArray'
    set $P107, $P5007
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P108, $P5008
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P109, $P5009
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P110, $P5010
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P111, $P5011
.annotate 'line', 743
    $P5012 = _lex_param_1."list"()
    set $N5001, $P5012
    box $P5013, $N5001
    set $P101, $P5013
    set $N5002, $P101
    set $N5003, 2
    islt $I5001, $N5002, $N5003
    set $I5003, $I5001
    if $I5001 goto unless133_end426 
    set $N5004, $P101
    set $N5005, 3
    isgt $I5002, $N5004, $N5005
    set $I5003, $I5002
  unless133_end426:
    unless $I5003 goto if132_end424 
    find_lex $P5014, "$op_name"
    set $S5003, $P5014
    concat $S5002, "Operation '", $S5003
    concat $S5001, $S5002, "' needs either 2 or 3 operands"
    box $P5015, $S5001
    die $P5015
  if132_end424:
.annotate 'line', 748
    find_lex $P5016, "$op_name"
    $P5017 = _lex_param_0."unique"($P5016)
    set $P102, $P5017
.annotate 'line', 749
    nqp_get_sc_object $P5021, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5020, $P5021, "PIRT"
    get_who $P5019, $P5020
    set $P5018, $P5019["Label"]
    unless_null $P5018, fallback427
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5018, $P5022
  fallback427:
    set $S5005, $P102
    concat $S5004, $S5005, "_else"
    $P5023 = $P5018."new"($S5004 :named("name"))
    set $P103, $P5023
.annotate 'line', 750
    nqp_get_sc_object $P5027, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5026, $P5027, "PIRT"
    get_who $P5025, $P5026
    set $P5024, $P5025["Label"]
    unless_null $P5024, fallback428
    nqp_get_sc_object $P5028, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5024, $P5028
  fallback428:
    set $S5007, $P102
    concat $S5006, $S5007, "_end"
    $P5029 = $P5024."new"($S5006 :named("name"))
    set $P104, $P5029
.annotate 'line', 757
    $P5033 = _lex_param_1."list"()
    set $P5030, $P5033
    iter $P5032, $P5033
  for_next448:
    unless $P5032, for_done450
    shift $P5035, $P5032
  for_redo449:
    .const 'Sub' $P5034 = 'cuid_191_1359572548.257' 
    capture_lex $P5034
    $P5030 = $P5034($P5035)
    goto for_next448
  for_done450:
    find_dynamic_lex $P5036, "$*WANT"
    unless_null $P5036, fallback453
    nqp_get_sc_object $P5039, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5038, $P5039
    set $P5037, $P5038["$WANT"]
    unless_null $P5037, fallback454
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5037, $P5040
  fallback454:
    unless_null $P5037, vivi_142455
    die "Contextual $*WANT not found"
    box $P5041, "Contextual $*WANT not found"
    set $P5037, $P5041
  vivi_142455:
    set $P5036, $P5037
  fallback453:
    set $S5008, $P5036
    isne $I5004, $S5008, "v"
    unless $I5004 goto if141_end452 
.annotate 'line', 774
    set $N5006, $P101
    set $N5007, 3
    iseq $I5005, $N5006, $N5007
    unless $I5005 goto if143_else456 
    set $P5042, $P106[1]
    unless_null $P5042, fallback460
    nqp_get_sc_object $P5043, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5042, $P5043
  fallback460:
    set $S5009, $P5042
    set $P5044, $P106[2]
    unless_null $P5044, fallback461
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5044, $P5045
  fallback461:
    set $S5010, $P5044
    iseq $I5006, $S5009, $S5010
    unless $I5006 goto if144_else458 
    set $P5046, $P106[1]
    unless_null $P5046, fallback462
    nqp_get_sc_object $P5047, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5046, $P5047
  fallback462:
    set $S5012, $P5046
    downcase $S5011, $S5012
    set $S5013, $S5011
    goto if144_end459
  if144_else458:
    set $S5013, "p"
  if144_end459:
    set $S5019, $S5013
    goto if143_end457
  if143_else456:
    set $P5048, $P106[0]
    unless_null $P5048, fallback465
    nqp_get_sc_object $P5049, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5048, $P5049
  fallback465:
    set $S5014, $P5048
    set $P5050, $P106[1]
    unless_null $P5050, fallback466
    nqp_get_sc_object $P5051, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5050, $P5051
  fallback466:
    set $S5015, $P5050
    iseq $I5007, $S5014, $S5015
    unless $I5007 goto if145_else463 
    set $P5052, $P106[0]
    unless_null $P5052, fallback467
    nqp_get_sc_object $P5053, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5052, $P5053
  fallback467:
    set $S5017, $P5052
    downcase $S5016, $S5017
    set $S5018, $S5016
    goto if145_end464
  if145_else463:
    set $S5018, "p"
  if145_end464:
    set $S5019, $S5018
  if143_end457:
    box $P5054, $S5019
    set $P108, $P5054
.annotate 'line', 778
    find_dynamic_lex $P5055, "$*REGALLOC"
    unless_null $P5055, fallback468
    nqp_get_sc_object $P5058, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5057, $P5058
    set $P5056, $P5057["$REGALLOC"]
    unless_null $P5056, fallback469
    nqp_get_sc_object $P5059, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5056, $P5059
  fallback469:
    unless_null $P5056, vivi_146470
    die "Contextual $*REGALLOC not found"
    box $P5060, "Contextual $*REGALLOC not found"
    set $P5056, $P5060
  vivi_146470:
    set $P5055, $P5056
  fallback468:
    set $S5021, $P108
    concat $S5020, "fresh_", $S5021
    $P5061 = $P5055.$S5020()
    set $P109, $P5061
  if141_end452:
.annotate 'line', 782
    nqp_get_sc_object $P5065, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5064, $P5065, "PIRT"
    get_who $P5063, $P5064
    set $P5062, $P5063["Ops"]
    unless_null $P5062, fallback471
    nqp_get_sc_object $P5066, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5062, $P5066
  fallback471:
    $P5067 = $P5062."new"()
    set $P110, $P5067
    set $P5068, $P109
    unless $P109 goto if148_end475 
    set $N5008, $P101
    set $N5009, 2
    iseq $I5008, $N5008, $N5009
    box $P5069, $I5008
    set $P5068, $P5069
  if148_end475:
    unless $P5068 goto if147_else472 
    .const 'Sub' $P5070 = 'cuid_193_1359572548.257' 
    capture_lex $P5070
    $P5071 = $P5070()
    goto if147_end473
  if147_else472:
.annotate 'line', 790
.annotate 'line', 791
    set $P5072, $P105[0]
    unless_null $P5072, fallback477
    nqp_get_sc_object $P5073, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5072, $P5073
  fallback477:
    $P110."push"($P5072)
    set $P5074, $P105[0]
    unless_null $P5074, fallback478
    nqp_get_sc_object $P5075, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5074, $P5075
  fallback478:
    set $P111, $P5074
  if147_end473:
    set $P5076, $P107
    iter $P5078, $P107
  for_next479:
    unless $P5078, for_done481
    shift $P5080, $P5078
  for_redo480:
    .const 'Sub' $P5079 = 'cuid_194_1359572548.257' 
    capture_lex $P5079
    $P5076 = $P5079($P5080)
    goto for_next479
  for_done481:
.annotate 'line', 801
    find_lex $P5081, "$op_name"
    set $S5025, $P5081
    iseq $I5009, $S5025, "if"
    unless $I5009 goto if149_else482 
    set $S5026, "unless "
    goto if149_end483
  if149_else482:
    set $S5026, "if "
  if149_end483:
.annotate 'line', 802
    set $P5082, $P105[0]
    unless_null $P5082, fallback484
    nqp_get_sc_object $P5083, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5082, $P5083
  fallback484:
    $P5084 = $P5082."result"()
    set $S5027, $P5084
    concat $S5024, $S5026, $S5027
    concat $S5023, $S5024, " goto "
    set $N5010, $P101
    set $N5011, 2
    iseq $I5010, $N5010, $N5011
    unless $I5010 goto if150_else485 
.annotate 'line', 803
    $P5085 = $P104."result"()
    set $P5087, $P5085
    goto if150_end486
  if150_else485:
    $P5086 = $P103."result"()
    set $P5087, $P5086
  if150_end486:
    set $S5028, $P5087
    concat $S5022, $S5023, $S5028
    $P110."push_pirop"($S5022)
    unless $P109 goto if151_else487 
    .const 'Sub' $P5088 = 'cuid_195_1359572548.257' 
    capture_lex $P5088
    $P5089 = $P5088()
    goto if151_end488
  if151_else487:
.annotate 'line', 811
.annotate 'line', 812
    set $P5090, $P105[1]
    unless_null $P5090, fallback490
    nqp_get_sc_object $P5091, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5090, $P5091
  fallback490:
    $P5092 = $P110."push"($P5090)
  if151_end488:
    set $N5012, $P101
    set $N5013, 3
    iseq $I5011, $N5012, $N5013
    unless $I5011 goto if152_end492 
.annotate 'line', 816
.annotate 'line', 817
    $P5093 = $P104."result"()
    $P110."push_pirop"("goto", $P5093)
.annotate 'line', 818
    $P110."push"($P103)
    unless $P109 goto if153_else493 
    .const 'Sub' $P5094 = 'cuid_196_1359572548.257' 
    capture_lex $P5094
    $P5095 = $P5094()
    set $P5099, $P5095
    goto if153_end494
  if153_else493:
.annotate 'line', 824
.annotate 'line', 825
    set $P5096, $P105[2]
    unless_null $P5096, fallback496
    nqp_get_sc_object $P5097, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5096, $P5097
  fallback496:
    $P5098 = $P110."push"($P5096)
    set $P5099, $P5098
  if153_end494:
  if152_end492:
.annotate 'line', 830
    $P110."push"($P104)
.annotate 'line', 831
    set $P5100, $P109
    if $P109 goto unless154_end498 
    box $P5101, "null"
    set $P5100, $P5101
  unless154_end498:
    $P110."result"($P5100)
    .return ($P110) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_191_1359572548.257") :anon :lex :outer("cuid_192_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 757
    .param pmc _lex_param_0 
    .lex "$*HAVE_IMM_ARG", $P101 
    .lex "$*IMM_ARG", $P102 
    .lex "$comp", $P103 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
.annotate 'line', 758
    $P5004 = _lex_param_0."arity"()
    set $N5001, $P5004
    set $N5002, 0
    isgt $I5001, $N5001, $N5002
    set $I5006, $I5001
    unless $I5001 goto if134_end430 
    get_id $I5004, _lex_param_0
    find_lex $P5006, "$op"
    set $P5005, $P5006[0]
    unless_null $P5005, fallback431
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5005, $P5007
  fallback431:
    get_id $I5005, $P5005
    iseq $I5003, $I5004, $I5005
    not $I5002, $I5003
    set $I5006, $I5002
  if134_end430:
    box $P5008, $I5006
    set $P101, $P5008
.annotate 'line', 760
    find_lex $P5014, "$qastcomp"
    $P5015 = $P5014."as_post"(_lex_param_0)
    set $P103, $P5015
.annotate 'line', 761
    find_lex $P5016, "@comp_ops"
    $P5016."push"($P103)
.annotate 'line', 762
    find_lex $P5017, "@op_types"
    find_lex $P5018, "$qastcomp"
    $P5019 = $P103."result"()
    $P5020 = $P5018."infer_type"($P5019)
    set $S5002, $P5020
    upcase $S5001, $S5002
    $P5017."push"($S5001)
    unless_null $P101, fallback437
    nqp_get_sc_object $P5023, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$HAVE_IMM_ARG"]
    unless_null $P5021, fallback438
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5021, $P5024
  fallback438:
    unless_null $P5021, vivi_137439
    die "Contextual $*HAVE_IMM_ARG not found"
    box $P5025, "Contextual $*HAVE_IMM_ARG not found"
    set $P5021, $P5025
  vivi_137439:
    set $P101, $P5021
  fallback437:
    set $P5041, $P101
    unless $P101 goto if136_end436 
.annotate 'line', 763
    unless_null $P102, fallback442
    nqp_get_sc_object $P5028, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["$IMM_ARG"]
    unless_null $P5026, fallback443
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5026, $P5029
  fallback443:
    unless_null $P5026, vivi_139444
    die "Contextual $*IMM_ARG not found"
    box $P5030, "Contextual $*IMM_ARG not found"
    set $P5026, $P5030
  vivi_139444:
    set $P102, $P5026
  fallback442:
    unless $P102 goto if138_else440 
.annotate 'line', 764
.annotate 'line', 765
    find_lex $P5031, "@im_args"
    unless_null $P102, fallback445
    nqp_get_sc_object $P5034, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$IMM_ARG"]
    unless_null $P5032, fallback446
    nqp_get_sc_object $P5035, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5032, $P5035
  fallback446:
    unless_null $P5032, vivi_140447
    die "Contextual $*IMM_ARG not found"
    box $P5036, "Contextual $*IMM_ARG not found"
    set $P5032, $P5036
  vivi_140447:
    set $P102, $P5032
  fallback445:
    $P5037 = $P5031."push"($P102)
    set $P5040, $P5037
    goto if138_end441
  if138_else440:
.annotate 'line', 767
    find_lex $P5038, "$op_name"
    set $S5004, $P5038
    concat $S5003, $S5004, " block expects an argument, but there's no immediate block to take it"
    box $P5039, $S5003
    die $P5039
    set $P5040, $P5039
  if138_end441:
    set $P5041, $P5040
  if136_end436:
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_193_1359572548.257") :anon :lex :outer("cuid_192_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 784
    .lex "$coerced", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 785
    find_lex $P5002, "$qastcomp"
    find_lex $P5004, "@comp_ops"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback476
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5005
  fallback476:
    find_lex $P5006, "$res_type"
    $P5007 = $P5002."coerce"($P5003, $P5006)
    set $P101, $P5007
.annotate 'line', 786
    find_lex $P5008, "$ops"
    $P5008."push"($P101)
.annotate 'line', 787
    find_lex $P5009, "$ops"
    find_lex $P5010, "$res_reg"
    $P5011 = $P101."result"()
    $P5009."push_pirop"("set", $P5010, $P5011)
    store_lex "$cond_result", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_194_1359572548.257") :anon :lex :outer("cuid_192_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 796
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 797
    find_lex $P5001, "$cond_result"
    $P5002 = $P5001."result"()
    $P5003 = _lex_param_0($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_195_1359572548.257") :anon :lex :outer("cuid_192_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 806
    .lex "$then", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 807
    find_lex $P5002, "$qastcomp"
    find_lex $P5004, "@comp_ops"
    set $P5003, $P5004[1]
    unless_null $P5003, fallback489
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5005
  fallback489:
    find_lex $P5006, "$res_type"
    $P5007 = $P5002."coerce"($P5003, $P5006)
    set $P101, $P5007
.annotate 'line', 808
    find_lex $P5008, "$ops"
    $P5008."push"($P101)
.annotate 'line', 809
    find_lex $P5009, "$ops"
    find_lex $P5010, "$res_reg"
    $P5011 = $P101."result"()
    $P5012 = $P5009."push_pirop"("set", $P5010, $P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_196_1359572548.257") :anon :lex :outer("cuid_192_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 819
    .lex "$else", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 820
    find_lex $P5002, "$qastcomp"
    find_lex $P5004, "@comp_ops"
    set $P5003, $P5004[2]
    unless_null $P5003, fallback495
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5005
  fallback495:
    find_lex $P5006, "$res_type"
    $P5007 = $P5002."coerce"($P5003, $P5006)
    set $P101, $P5007
.annotate 'line', 821
    find_lex $P5008, "$ops"
    $P5008."push"($P101)
.annotate 'line', 822
    find_lex $P5009, "$ops"
    find_lex $P5010, "$res_reg"
    $P5011 = $P101."result"()
    $P5012 = $P5009."push_pirop"("set", $P5010, $P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_198_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 837
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$exprpost", $P101 
    .lex "$vivipost", $P102 
    .lex "$vivlabel", $P103 
    .lex "$ops", $P104 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P104, $P5004
.annotate 'line', 838
    $P5005 = _lex_param_1."list"()
    set $N5001, $P5005
    set $N5002, 2
    isne $I5001, $N5001, $N5002
    unless $I5001 goto if155_end504 
    box $P5006, "The 'ifnull' op expects two children"
    die $P5006
  if155_end504:
.annotate 'line', 842
    set $P5007, _lex_param_1[0]
    unless_null $P5007, fallback505
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5007, $P5008
  fallback505:
    $P5009 = _lex_param_0."as_post"($P5007)
    set $P101, $P5009
.annotate 'line', 843
    set $P5010, _lex_param_1[1]
    unless_null $P5010, fallback506
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5010, $P5011
  fallback506:
    $P5012 = _lex_param_0."as_post"($P5010)
.annotate 'line', 844
    $P5013 = $P101."result"()
    $P5014 = _lex_param_0."infer_type"($P5013)
    $P5015 = _lex_param_0."coerce"($P5012, $P5014)
    set $P102, $P5015
.annotate 'line', 845
    nqp_get_sc_object $P5019, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5018, $P5019, "PIRT"
    get_who $P5017, $P5018
    set $P5016, $P5017["Label"]
    unless_null $P5016, fallback507
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5016, $P5020
  fallback507:
    $P5021 = _lex_param_0."unique"("vivi_")
    $P5022 = $P5016."new"($P5021 :named("name"))
    set $P103, $P5022
.annotate 'line', 847
    nqp_get_sc_object $P5026, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5025, $P5026, "PIRT"
    get_who $P5024, $P5025
    set $P5023, $P5024["Ops"]
    unless_null $P5023, fallback508
    nqp_get_sc_object $P5027, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5023, $P5027
  fallback508:
    $P5028 = $P5023."new"()
    set $P104, $P5028
.annotate 'line', 848
    $P104."push"($P101)
.annotate 'line', 849
    $P104."push_pirop"("unless_null", $P101, $P103)
.annotate 'line', 850
    $P104."push"($P102)
.annotate 'line', 851
    $P104."push_pirop"("set", $P101, $P102)
.annotate 'line', 852
    $P104."push"($P103)
.annotate 'line', 853
    $P5029 = $P101."result"()
    $P104."result"($P5029)
    .return ($P104) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_203_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 858
    .param pmc _lex_param_0 
    .const 'Sub' $P5009 = 'cuid_202_1359572548.257' 
    capture_lex $P5009 
    .lex "$repness", _lex_param_0 
    new $P5004, 'ResizablePMCArray'
    box $P5005, "while"
    push $P5004, $P5005
    box $P5006, "until"
    push $P5004, $P5006
    set $P5001, $P5004
    iter $P5003, $P5004
  for_next576:
    unless $P5003, for_done578
    shift $P5008, $P5003
  for_redo577:
    .const 'Sub' $P5007 = 'cuid_202_1359572548.257' 
    capture_lex $P5007
    $P5001 = $P5007($P5008)
    goto for_next576
  for_done578:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_202_1359572548.257") :anon :lex :outer("cuid_203_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 859
    .param pmc _lex_param_0 
    .const 'Sub' $P5010 = 'cuid_201_1359572548.257' 
    capture_lex $P5010 
    .lex "$op_name", _lex_param_0 
.annotate 'line', 860
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Operations"]
    unless_null $P5001, fallback509
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5005
  fallback509:
    find_lex $P5006, "$repness"
    set $S5002, $P5006
    set $S5003, _lex_param_0
    concat $S5001, $S5002, $S5003
    .const 'Sub' $P5008 = 'cuid_201_1359572548.257' 
    capture_lex $P5008
    newclosure $P5007, $P5008
    $P5009 = $P5001."add_core_op"($S5001, $P5007, 1 :named("inlinable"))
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_201_1359572548.257") :anon :lex :outer("cuid_202_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 860
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5128 = 'cuid_200_1359572548.257' 
    capture_lex $P5128 
    .lex "$while_id", $P101 
    .lex "$test_lbl", $P102 
    .lex "$next_lbl", $P103 
    .lex "$redo_lbl", $P104 
    .lex "$hand_lbl", $P105 
    .lex "$done_lbl", $P106 
    .lex "@comp_ops", $P107 
    .lex "@comp_types", $P108 
    .lex "$handler", $P109 
    .lex "$*IMM_ARG", $P110 
    .lex "$res_type", $P111 
    .lex "$res_reg", $P112 
    .lex "$operands", $P113 
    .lex "$ops", $P114 
    .lex "$exc_reg", $P115 
    .lex "$coerced", $P116 
    .lex "$body", $P117 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P106, $P5006
    new $P5007, 'ResizablePMCArray'
    set $P107, $P5007
    new $P5008, 'ResizablePMCArray'
    set $P108, $P5008
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P109, $P5009
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P110, $P5010
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P111, $P5011
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P112, $P5012
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P113, $P5013
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P114, $P5014
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P115, $P5015
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P116, $P5016
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P117, $P5017
.annotate 'line', 862
    find_lex $P5018, "$op_name"
    $P5019 = _lex_param_0."unique"($P5018)
    set $P101, $P5019
.annotate 'line', 863
    nqp_get_sc_object $P5023, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5022, $P5023, "PIRT"
    get_who $P5021, $P5022
    set $P5020, $P5021["Label"]
    unless_null $P5020, fallback510
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5020, $P5024
  fallback510:
    set $S5002, $P101
    concat $S5001, $S5002, "_test"
    $P5025 = $P5020."new"($S5001 :named("name"))
    set $P102, $P5025
.annotate 'line', 864
    nqp_get_sc_object $P5029, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5028, $P5029, "PIRT"
    get_who $P5027, $P5028
    set $P5026, $P5027["Label"]
    unless_null $P5026, fallback511
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5026, $P5030
  fallback511:
    set $S5004, $P101
    concat $S5003, $S5004, "_next"
    $P5031 = $P5026."new"($S5003 :named("name"))
    set $P103, $P5031
.annotate 'line', 865
    nqp_get_sc_object $P5035, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5034, $P5035, "PIRT"
    get_who $P5033, $P5034
    set $P5032, $P5033["Label"]
    unless_null $P5032, fallback512
    nqp_get_sc_object $P5036, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5032, $P5036
  fallback512:
    set $S5006, $P101
    concat $S5005, $S5006, "_redo"
    $P5037 = $P5032."new"($S5005 :named("name"))
    set $P104, $P5037
.annotate 'line', 866
    nqp_get_sc_object $P5041, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5040, $P5041, "PIRT"
    get_who $P5039, $P5040
    set $P5038, $P5039["Label"]
    unless_null $P5038, fallback513
    nqp_get_sc_object $P5042, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5038, $P5042
  fallback513:
    set $S5008, $P101
    concat $S5007, $S5008, "_handlers"
    $P5043 = $P5038."new"($S5007 :named("name"))
    set $P105, $P5043
.annotate 'line', 867
    nqp_get_sc_object $P5047, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5046, $P5047, "PIRT"
    get_who $P5045, $P5046
    set $P5044, $P5045["Label"]
    unless_null $P5044, fallback514
    nqp_get_sc_object $P5048, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5044, $P5048
  fallback514:
    set $S5010, $P101
    concat $S5009, $S5010, "_done"
    $P5049 = $P5044."new"($S5009 :named("name"))
    set $P106, $P5049
    box $P5050, 1
    set $P109, $P5050
.annotate 'line', 875
    $P5059 = _lex_param_1."list"()
    set $P5056, $P5059
    iter $P5058, $P5059
  for_next533:
    unless $P5058, for_done535
    shift $P5061, $P5058
  for_redo534:
    .const 'Sub' $P5060 = 'cuid_200_1359572548.257' 
    capture_lex $P5060
    $P5056 = $P5060($P5061)
    goto for_next533
  for_done535:
    set $P5062, $P108[0]
    unless_null $P5062, fallback538
    nqp_get_sc_object $P5063, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5062, $P5063
  fallback538:
    set $S5011, $P5062
    set $P5064, $P108[1]
    unless_null $P5064, fallback539
    nqp_get_sc_object $P5065, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5064, $P5065
  fallback539:
    set $S5012, $P5064
    iseq $I5001, $S5011, $S5012
    unless $I5001 goto if163_else536 
    set $P5066, $P108[0]
    unless_null $P5066, fallback540
    nqp_get_sc_object $P5067, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5066, $P5067
  fallback540:
    set $S5014, $P5066
    downcase $S5013, $S5014
    set $S5015, $S5013
    goto if163_end537
  if163_else536:
    set $S5015, "p"
  if163_end537:
    box $P5068, $S5015
    set $P111, $P5068
.annotate 'line', 888
    find_dynamic_lex $P5069, "$*REGALLOC"
    unless_null $P5069, fallback541
    nqp_get_sc_object $P5072, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5071, $P5072
    set $P5070, $P5071["$REGALLOC"]
    unless_null $P5070, fallback542
    nqp_get_sc_object $P5073, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5070, $P5073
  fallback542:
    unless_null $P5070, vivi_164543
    die "Contextual $*REGALLOC not found"
    box $P5074, "Contextual $*REGALLOC not found"
    set $P5070, $P5074
  vivi_164543:
    set $P5069, $P5070
  fallback541:
    set $S5017, $P111
    concat $S5016, "fresh_", $S5017
    $P5075 = $P5069.$S5016()
    set $P112, $P5075
    set $N5001, $P107
    box $P5076, $N5001
    set $P113, $P5076
    set $N5002, $P113
    set $N5003, 2
    isne $I5002, $N5002, $N5003
    set $I5004, $I5002
    unless $I5002 goto if166_end547 
    set $N5004, $P113
    set $N5005, 3
    isne $I5003, $N5004, $N5005
    set $I5004, $I5003
  if166_end547:
    unless $I5004 goto if165_end545 
    find_lex $P5077, "$repness"
    set $S5021, $P5077
    concat $S5020, "Operation '", $S5021
    find_lex $P5078, "$op_name"
    set $S5022, $P5078
    concat $S5019, $S5020, $S5022
    concat $S5018, $S5019, "' needs 2 or 3 operands"
    box $P5079, $S5018
    die $P5079
  if165_end545:
.annotate 'line', 896
    nqp_get_sc_object $P5083, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5082, $P5083, "PIRT"
    get_who $P5081, $P5082
    set $P5080, $P5081["Ops"]
    unless_null $P5080, fallback548
    nqp_get_sc_object $P5084, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5080, $P5084
  fallback548:
    $P5085 = $P5080."new"()
    set $P114, $P5085
.annotate 'line', 897
    $P114."result"($P112)
    unless $P109 goto if167_end550 
.annotate 'line', 900
.annotate 'line', 901
    find_dynamic_lex $P5086, "$*REGALLOC"
    unless_null $P5086, fallback551
    nqp_get_sc_object $P5089, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5088, $P5089
    set $P5087, $P5088["$REGALLOC"]
    unless_null $P5087, fallback552
    nqp_get_sc_object $P5090, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5087, $P5090
  fallback552:
    unless_null $P5087, vivi_168553
    die "Contextual $*REGALLOC not found"
    box $P5091, "Contextual $*REGALLOC not found"
    set $P5087, $P5091
  vivi_168553:
    set $P5086, $P5087
  fallback551:
    $P5092 = $P5086."fresh_p"()
    set $P115, $P5092
.annotate 'line', 902
    $P114."push_pirop"("new", $P115, "'ExceptionHandler'", "[.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]")
.annotate 'line', 904
    $P114."push_pirop"("set_label", $P115, $P105)
.annotate 'line', 905
    $P5093 = $P114."push_pirop"("push_eh", $P115)
  if167_end550:
.annotate 'line', 910
    set $P5094, $P107[0]
    unless_null $P5094, fallback554
    nqp_get_sc_object $P5095, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5094, $P5095
  fallback554:
    $P5096 = _lex_param_0."coerce"($P5094, $P111)
    set $P116, $P5096
    find_lex $P5097, "$repness"
    unless $P5097 goto if169_end556 
.annotate 'line', 911
.annotate 'line', 914
    $P5098 = $P114."push_pirop"("goto", $P104)
  if169_end556:
.annotate 'line', 916
    $P114."push"($P102)
.annotate 'line', 917
    $P114."push"($P116)
.annotate 'line', 918
    $P5099 = $P116."result"()
    $P114."push_pirop"("set", $P112, $P5099)
.annotate 'line', 919
    find_lex $P5100, "$op_name"
    set $S5026, $P5100
    iseq $I5005, $S5026, "while"
    unless $I5005 goto if170_else557 
    set $S5027, "unless "
    goto if170_end558
  if170_else557:
    set $S5027, "if "
  if170_end558:
.annotate 'line', 920
    set $P5101, $P107[0]
    unless_null $P5101, fallback559
    nqp_get_sc_object $P5102, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5101, $P5102
  fallback559:
    $P5103 = $P5101."result"()
    set $S5028, $P5103
    concat $S5025, $S5027, $S5028
    concat $S5024, $S5025, " goto "
    $P5104 = $P106."result"()
    set $S5029, $P5104
    concat $S5023, $S5024, $S5029
    $P114."push_pirop"($S5023)
    unless_null $P110, fallback562
    nqp_get_sc_object $P5107, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5106, $P5107
    set $P5105, $P5106["$IMM_ARG"]
    unless_null $P5105, fallback563
    nqp_get_sc_object $P5108, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5105, $P5108
  fallback563:
    unless_null $P5105, vivi_172564
    die "Contextual $*IMM_ARG not found"
    box $P5109, "Contextual $*IMM_ARG not found"
    set $P5105, $P5109
  vivi_172564:
    set $P110, $P5105
  fallback562:
    unless $P110 goto if171_end561 
.annotate 'line', 923
.annotate 'line', 924
    $P5115 = $P116."result"()
    unless_null $P110, fallback565
    nqp_get_sc_object $P5112, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5111, $P5112
    set $P5110, $P5111["$IMM_ARG"]
    unless_null $P5110, fallback566
    nqp_get_sc_object $P5113, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5110, $P5113
  fallback566:
    unless_null $P5110, vivi_173567
    die "Contextual $*IMM_ARG not found"
    box $P5114, "Contextual $*IMM_ARG not found"
    set $P5110, $P5114
  vivi_173567:
    set $P110, $P5110
  fallback565:
    $P5116 = $P110($P5115)
  if171_end561:
.annotate 'line', 928
    set $P5117, $P107[1]
    unless_null $P5117, fallback568
    nqp_get_sc_object $P5118, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5117, $P5118
  fallback568:
    $P5119 = _lex_param_0."coerce"($P5117, $P111)
    set $P117, $P5119
.annotate 'line', 929
    $P114."push"($P104)
.annotate 'line', 930
    $P114."push"($P117)
.annotate 'line', 931
    $P5120 = $P117."result"()
    $P114."push_pirop"("set", $P112, $P5120)
    set $N5006, $P113
    set $N5007, 3
    iseq $I5006, $N5006, $N5007
    unless $I5006 goto if174_end570 
.annotate 'line', 935
.annotate 'line', 936
    $P114."push"($P103)
.annotate 'line', 937
    set $P5121, $P107[2]
    unless_null $P5121, fallback571
    nqp_get_sc_object $P5122, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5121, $P5122
  fallback571:
    $P5123 = $P114."push"($P5121)
  if174_end570:
.annotate 'line', 941
    $P5124 = $P102."result"()
    set $S5031, $P5124
    concat $S5030, "goto ", $S5031
    $P114."push_pirop"($S5030)
    unless $P109 goto if175_else572 
.annotate 'line', 944
.annotate 'line', 945
    $P114."push"($P105)
.annotate 'line', 946
    set $S5034, $P115
    concat $S5033, "(", $S5034
    concat $S5032, $S5033, ")"
    $P114."push_pirop"(".get_results", $S5032)
.annotate 'line', 947
    $P114."push_pirop"("pop_upto_eh", $P115)
.annotate 'line', 948
    $P114."push_pirop"("getattribute", $P115, $P115, "'type'")
.annotate 'line', 949
    set $N5008, $P113
    set $N5009, 3
    iseq $I5007, $N5008, $N5009
    unless $I5007 goto if176_else574 
    set $P5125, $P103
    goto if176_end575
  if176_else574:
    set $P5125, $P102
  if176_end575:
    $P114."push_pirop"("eq", $P115, ".CONTROL_LOOP_NEXT", $P5125)
.annotate 'line', 951
    $P114."push_pirop"("eq", $P115, ".CONTROL_LOOP_REDO", $P104)
.annotate 'line', 952
    $P114."push"($P106)
.annotate 'line', 953
    $P5126 = $P114."push_pirop"("pop_eh")
    goto if175_end573
  if175_else572:
.annotate 'line', 955
.annotate 'line', 956
    $P5127 = $P114."push"($P106)
  if175_end573:
    .return ($P114) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_200_1359572548.257") :anon :lex :outer("cuid_201_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 875
    .param pmc _lex_param_0 
    .const 'Sub' $P5006 = 'cuid_199_1359572548.257' 
    capture_lex $P5006 
    .lex "$_", _lex_param_0 
.annotate 'line', 876
    $P5001 = _lex_param_0."named"()
    set $S5001, $P5001
    iseq $I5001, $S5001, "nohandler"
    unless $I5001 goto if157_else518 
    box $P5002, 0
    store_lex "$handler", $P5002
    set $P5005, $P5002
    goto if157_end519
  if157_else518:
    .const 'Sub' $P5003 = 'cuid_199_1359572548.257' 
    capture_lex $P5003
    $P5004 = $P5003()
    set $P5005, $P5004
  if157_end519:
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_199_1359572548.257") :anon :lex :outer("cuid_200_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 877
    .lex "$*HAVE_IMM_ARG", $P101 
    .lex "$comp", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 878
    find_lex $P5003, "$_"
    $P5004 = $P5003."arity"()
    set $N5001, $P5004
    set $N5002, 0
    isgt $I5001, $N5001, $N5002
    set $I5005, $I5001
    unless $I5001 goto if158_end521 
    find_lex $P5005, "$_"
    get_id $I5003, $P5005
    find_lex $P5007, "$op"
    $P5008 = $P5007."list"()
    set $P5006, $P5008[1]
    unless_null $P5006, fallback522
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5006, $P5009
  fallback522:
    get_id $I5004, $P5006
    iseq $I5002, $I5003, $I5004
    set $I5005, $I5002
  if158_end521:
    box $P5010, $I5005
    set $P101, $P5010
.annotate 'line', 879
    find_lex $P5011, "$qastcomp"
    find_lex $P5012, "$_"
    $P5013 = $P5011."as_post"($P5012)
    set $P102, $P5013
.annotate 'line', 880
    find_lex $P5014, "@comp_ops"
    $P5014."push"($P102)
.annotate 'line', 881
    find_lex $P5015, "@comp_types"
    find_lex $P5016, "$qastcomp"
    $P5017 = $P102."result"()
    $P5018 = $P5016."infer_type"($P5017)
    $P5015."push"($P5018)
    unless_null $P101, fallback527
    nqp_get_sc_object $P5021, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$HAVE_IMM_ARG"]
    unless_null $P5019, fallback528
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5019, $P5022
  fallback528:
    unless_null $P5019, vivi_161529
    die "Contextual $*HAVE_IMM_ARG not found"
    box $P5023, "Contextual $*HAVE_IMM_ARG not found"
    set $P5019, $P5023
  vivi_161529:
    set $P101, $P5019
  fallback527:
    set $P5030, $P101
    unless $P101 goto if160_end526 
    find_dynamic_lex $P5024, "$*IMM_ARG"
    unless_null $P5024, fallback530
    nqp_get_sc_object $P5027, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5026, $P5027
    set $P5025, $P5026["$IMM_ARG"]
    unless_null $P5025, fallback531
    nqp_get_sc_object $P5028, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5025, $P5028
  fallback531:
    unless_null $P5025, vivi_162532
    die "Contextual $*IMM_ARG not found"
    box $P5029, "Contextual $*IMM_ARG not found"
    set $P5025, $P5029
  vivi_162532:
    set $P5024, $P5025
  fallback530:
    isfalse $I5006, $P5024
    box $P5031, $I5006
    set $P5030, $P5031
  if160_end526:
    set $P5034, $P5030
    unless $P5030 goto if159_end524 
.annotate 'line', 882
    find_lex $P5032, "$op_name"
    set $S5002, $P5032
    concat $S5001, $S5002, " block expects an argument, but there's no immediate block to take it"
    box $P5033, $S5001
    die $P5033
    set $P5034, $P5033
  if159_end524:
    .return ($P5034) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_205_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 964
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5116 = 'cuid_204_1359572548.257' 
    capture_lex $P5116 
    .const 'Sub' $P5116 = 'cuid_206_1359572548.257' 
    capture_lex $P5116 
    .lex "$handler", $P101 
    .lex "@operands", $P102 
    .lex "$res", $P103 
    .lex "$curval", $P104 
    .lex "$iter", $P105 
    .lex "$ops", $P106 
    .lex "$listpost", $P107 
    .lex "$blockpost", $P108 
    .lex "$exc_reg", $P109 
    .lex "$hand_lbl", $P110 
    .lex "$lbl_next", $P111 
    .lex "$lbl_redo", $P112 
    .lex "$lbl_done", $P113 
    .lex "@valreg", $P114 
    .lex "$arity", $P115 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P106, $P5006
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P107, $P5007
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P108, $P5008
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P109, $P5009
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P110, $P5010
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P111, $P5011
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P112, $P5012
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P113, $P5013
    new $P5014, 'ResizablePMCArray'
    set $P114, $P5014
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P115, $P5015
    box $P5016, 1
    set $P101, $P5016
.annotate 'line', 967
    $P5020 = _lex_param_1."list"()
    set $P5017, $P5020
    iter $P5019, $P5020
  for_next585:
    unless $P5019, for_done587
    shift $P5022, $P5019
  for_redo586:
    .const 'Sub' $P5021 = 'cuid_204_1359572548.257' 
    capture_lex $P5021
    $P5017 = $P5021($P5022)
    goto for_next585
  for_done587:
    set $N5001, $P102
    set $N5002, 2
    isne $I5001, $N5001, $N5002
    unless $I5001 goto if178_end589 
.annotate 'line', 972
    box $P5023, "Operation 'for' needs 2 operands"
    die $P5023
  if178_end589:
    set $P5024, $P102[1]
    unless_null $P5024, fallback592
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5024, $P5025
  fallback592:
    nqp_get_sc_object $P5029, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Block"]
    unless_null $P5026, fallback593
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5026, $P5030
  fallback593:
    type_check $I5002, $P5024, $P5026
    if $I5002 goto unless179_end591 
.annotate 'line', 975
    box $P5031, "Operation 'for' expects a block as its second operand"
    die $P5031
  unless179_end591:
.annotate 'line', 978
    set $P5032, $P102[1]
    unless_null $P5032, fallback596
    nqp_get_sc_object $P5033, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5032, $P5033
  fallback596:
    $P5034 = $P5032."blocktype"()
    set $S5001, $P5034
    iseq $I5003, $S5001, "immediate"
    unless $I5003 goto if180_end595 
.annotate 'line', 979
    set $P5035, $P102[1]
    unless_null $P5035, fallback597
    nqp_get_sc_object $P5036, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5035, $P5036
  fallback597:
    $P5037 = $P5035."blocktype"("declaration")
  if180_end595:
.annotate 'line', 983
    find_dynamic_lex $P5038, "$*REGALLOC"
    unless_null $P5038, fallback598
    nqp_get_sc_object $P5041, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5040, $P5041
    set $P5039, $P5040["$REGALLOC"]
    unless_null $P5039, fallback599
    nqp_get_sc_object $P5042, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5039, $P5042
  fallback599:
    unless_null $P5039, vivi_181600
    die "Contextual $*REGALLOC not found"
    box $P5043, "Contextual $*REGALLOC not found"
    set $P5039, $P5043
  vivi_181600:
    set $P5038, $P5039
  fallback598:
    $P5044 = $P5038."fresh_p"()
    set $P103, $P5044
.annotate 'line', 984
    find_dynamic_lex $P5045, "$*REGALLOC"
    unless_null $P5045, fallback601
    nqp_get_sc_object $P5048, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5047, $P5048
    set $P5046, $P5047["$REGALLOC"]
    unless_null $P5046, fallback602
    nqp_get_sc_object $P5049, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5046, $P5049
  fallback602:
    unless_null $P5046, vivi_182603
    die "Contextual $*REGALLOC not found"
    box $P5050, "Contextual $*REGALLOC not found"
    set $P5046, $P5050
  vivi_182603:
    set $P5045, $P5046
  fallback601:
    $P5051 = $P5045."fresh_p"()
    set $P104, $P5051
.annotate 'line', 985
    find_dynamic_lex $P5052, "$*REGALLOC"
    unless_null $P5052, fallback604
    nqp_get_sc_object $P5055, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5054, $P5055
    set $P5053, $P5054["$REGALLOC"]
    unless_null $P5053, fallback605
    nqp_get_sc_object $P5056, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5053, $P5056
  fallback605:
    unless_null $P5053, vivi_183606
    die "Contextual $*REGALLOC not found"
    box $P5057, "Contextual $*REGALLOC not found"
    set $P5053, $P5057
  vivi_183606:
    set $P5052, $P5053
  fallback604:
    $P5058 = $P5052."fresh_p"()
    set $P105, $P5058
.annotate 'line', 986
    nqp_get_sc_object $P5062, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5061, $P5062, "PIRT"
    get_who $P5060, $P5061
    set $P5059, $P5060["Ops"]
    unless_null $P5059, fallback607
    nqp_get_sc_object $P5063, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5059, $P5063
  fallback607:
    $P5064 = $P5059."new"()
    set $P106, $P5064
.annotate 'line', 987
    set $P5065, $P102[0]
    unless_null $P5065, fallback608
    nqp_get_sc_object $P5066, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5065, $P5066
  fallback608:
    $P5067 = _lex_param_0."as_post"($P5065)
    $P5068 = _lex_param_0."coerce"($P5067, "P")
    set $P107, $P5068
.annotate 'line', 988
    set $P5069, $P102[1]
    unless_null $P5069, fallback609
    nqp_get_sc_object $P5070, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5069, $P5070
  fallback609:
    $P5071 = _lex_param_0."as_post"($P5069)
    $P5072 = _lex_param_0."coerce"($P5071, "P")
    set $P108, $P5072
.annotate 'line', 989
    $P106."push"($P107)
.annotate 'line', 992
    $P106."push_pirop"("set", $P103, $P107)
.annotate 'line', 993
    $P106."push_pirop"("iter", $P105, $P107)
    unless $P101 goto if184_end611 
.annotate 'line', 998
.annotate 'line', 999
    find_dynamic_lex $P5073, "$*REGALLOC"
    unless_null $P5073, fallback612
    nqp_get_sc_object $P5076, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5075, $P5076
    set $P5074, $P5075["$REGALLOC"]
    unless_null $P5074, fallback613
    nqp_get_sc_object $P5077, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5074, $P5077
  fallback613:
    unless_null $P5074, vivi_185614
    die "Contextual $*REGALLOC not found"
    box $P5078, "Contextual $*REGALLOC not found"
    set $P5074, $P5078
  vivi_185614:
    set $P5073, $P5074
  fallback612:
    $P5079 = $P5073."fresh_p"()
    set $P109, $P5079
.annotate 'line', 1000
    nqp_get_sc_object $P5083, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5082, $P5083, "PIRT"
    get_who $P5081, $P5082
    set $P5080, $P5081["Label"]
    unless_null $P5080, fallback615
    nqp_get_sc_object $P5084, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5080, $P5084
  fallback615:
    $P5085 = $P5080."new"("for_handlers" :named("name"))
    set $P110, $P5085
.annotate 'line', 1001
    $P106."push_pirop"("new", $P109, "'ExceptionHandler'", "[.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]")
.annotate 'line', 1003
    $P106."push_pirop"("set_label", $P109, $P110)
.annotate 'line', 1004
    $P5086 = $P106."push_pirop"("push_eh", $P109)
  if184_end611:
.annotate 'line', 1008
    nqp_get_sc_object $P5090, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5089, $P5090, "PIRT"
    get_who $P5088, $P5089
    set $P5087, $P5088["Label"]
    unless_null $P5087, fallback616
    nqp_get_sc_object $P5091, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5087, $P5091
  fallback616:
    $P5092 = $P5087."new"("for_next" :named("name"))
    set $P111, $P5092
.annotate 'line', 1009
    nqp_get_sc_object $P5096, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5095, $P5096, "PIRT"
    get_who $P5094, $P5095
    set $P5093, $P5094["Label"]
    unless_null $P5093, fallback617
    nqp_get_sc_object $P5097, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5093, $P5097
  fallback617:
    $P5098 = $P5093."new"("for_redo" :named("name"))
    set $P112, $P5098
.annotate 'line', 1010
    nqp_get_sc_object $P5102, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5101, $P5102, "PIRT"
    get_who $P5100, $P5101
    set $P5099, $P5100["Label"]
    unless_null $P5099, fallback618
    nqp_get_sc_object $P5103, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5099, $P5103
  fallback618:
    $P5104 = $P5099."new"("for_done" :named("name"))
    set $P113, $P5104
.annotate 'line', 1011
    $P106."push"($P111)
.annotate 'line', 1012
    $P106."push_pirop"("unless", $P105, $P113)
.annotate 'line', 1016
    set $P5105, $P102[1]
    unless_null $P5105, fallback621
    nqp_get_sc_object $P5106, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5105, $P5106
  fallback621:
    $P5107 = $P5105."arity"()
    set $P5108, $P5107
    if $P5107 goto unless186_end620 
    box $P5109, 1
    set $P5108, $P5109
  unless186_end620:
    set $P115, $P5108
  while187_test622:
    set $N5003, $P115
    set $N5004, 0
    isgt $I5004, $N5003, $N5004
    box $P5113, $I5004
    set $P5112, $P5113
    unless $I5004 goto while187_done626 
  while187_redo624:
    .const 'Sub' $P5110 = 'cuid_206_1359572548.257' 
    capture_lex $P5110
    $P5111 = $P5110()
    set $P5112, $P5111
    goto while187_test622 
  while187_done626:
.annotate 'line', 1025
    $P106."push"($P112)
.annotate 'line', 1026
    $P106."push"($P108)
.annotate 'line', 1027
    $P106."push_pirop"("call", $P108, $P114 :flat, $P103 :named("result"))
.annotate 'line', 1030
    $P106."push_pirop"("goto", $P111)
    unless $P101 goto if189_else630 
.annotate 'line', 1033
.annotate 'line', 1034
    $P106."push"($P110)
.annotate 'line', 1035
    set $S5004, $P109
    concat $S5003, "(", $S5004
    concat $S5002, $S5003, ")"
    $P106."push_pirop"(".get_results", $S5002)
.annotate 'line', 1036
    $P106."push_pirop"("pop_upto_eh", $P109)
.annotate 'line', 1037
    $P106."push_pirop"("getattribute", $P109, $P109, "'type'")
.annotate 'line', 1038
    $P106."push_pirop"("eq", $P109, ".CONTROL_LOOP_NEXT", $P111)
.annotate 'line', 1039
    $P106."push_pirop"("eq", $P109, ".CONTROL_LOOP_REDO", $P112)
.annotate 'line', 1040
    $P106."push"($P113)
.annotate 'line', 1041
    $P5114 = $P106."push_pirop"("pop_eh")
    goto if189_end631
  if189_else630:
.annotate 'line', 1043
.annotate 'line', 1044
    $P5115 = $P106."push"($P113)
  if189_end631:
.annotate 'line', 1048
    $P106."result"($P103)
    .return ($P106) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_204_1359572548.257") :anon :lex :outer("cuid_205_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 967
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 968
    $P5001 = _lex_param_0."named"()
    set $S5001, $P5001
    iseq $I5001, $S5001, "nohandler"
    unless $I5001 goto if177_else583 
    box $P5002, 0
    store_lex "$handler", $P5002
    set $P5005, $P5002
    goto if177_end584
  if177_else583:
.annotate 'line', 969
    find_lex $P5003, "@operands"
    $P5004 = $P5003."push"(_lex_param_0)
    set $P5005, $P5004
  if177_end584:
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_206_1359572548.257") :anon :lex :outer("cuid_205_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1017
    .lex "$reg", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 1018
    find_dynamic_lex $P5002, "$*REGALLOC"
    unless_null $P5002, fallback627
    nqp_get_sc_object $P5005, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$REGALLOC"]
    unless_null $P5003, fallback628
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5006
  fallback628:
    unless_null $P5003, vivi_188629
    die "Contextual $*REGALLOC not found"
    box $P5007, "Contextual $*REGALLOC not found"
    set $P5003, $P5007
  vivi_188629:
    set $P5002, $P5003
  fallback627:
    $P5008 = $P5002."fresh_p"()
    set $P101, $P5008
.annotate 'line', 1019
    find_lex $P5009, "$ops"
    find_lex $P5010, "$iter"
    $P5009."push_pirop"("shift", $P101, $P5010)
    find_lex $P5011, "@valreg"
    push $P5011, $P101
    find_lex $P5012, "$arity"
    set $N5002, $P5012
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5013, $N5001
    store_lex "$arity", $P5013
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_207_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1052
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$ops", $P101 
    .lex "$lbl", $P102 
    .lex "$dreg", $P103 
    .lex "$rreg", $P104 
    .lex "$test", $P105 
    .lex "$then", $P106 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P106, $P5006
.annotate 'line', 1053
    $P5007 = _lex_param_1."list"()
    set $N5001, $P5007
    set $N5002, 2
    isne $I5001, $N5001, $N5002
    unless $I5001 goto if190_end634 
    box $P5008, "Operation 'defor' needs 2 operands"
    die $P5008
  if190_end634:
.annotate 'line', 1056
    nqp_get_sc_object $P5012, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5011, $P5012, "PIRT"
    get_who $P5010, $P5011
    set $P5009, $P5010["Ops"]
    unless_null $P5009, fallback635
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5009, $P5013
  fallback635:
    $P5014 = $P5009."new"()
    set $P101, $P5014
.annotate 'line', 1057
    nqp_get_sc_object $P5018, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5017, $P5018, "PIRT"
    get_who $P5016, $P5017
    set $P5015, $P5016["Label"]
    unless_null $P5015, fallback636
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5015, $P5019
  fallback636:
    $P5020 = $P5015."new"("defor" :named("name"))
    set $P102, $P5020
.annotate 'line', 1058
    find_dynamic_lex $P5021, "$*REGALLOC"
    unless_null $P5021, fallback637
    nqp_get_sc_object $P5024, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5023, $P5024
    set $P5022, $P5023["$REGALLOC"]
    unless_null $P5022, fallback638
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5022, $P5025
  fallback638:
    unless_null $P5022, vivi_191639
    die "Contextual $*REGALLOC not found"
    box $P5026, "Contextual $*REGALLOC not found"
    set $P5022, $P5026
  vivi_191639:
    set $P5021, $P5022
  fallback637:
    $P5027 = $P5021."fresh_i"()
    set $P103, $P5027
.annotate 'line', 1059
    find_dynamic_lex $P5028, "$*REGALLOC"
    unless_null $P5028, fallback640
    nqp_get_sc_object $P5031, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5030, $P5031
    set $P5029, $P5030["$REGALLOC"]
    unless_null $P5029, fallback641
    nqp_get_sc_object $P5032, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5029, $P5032
  fallback641:
    unless_null $P5029, vivi_192642
    die "Contextual $*REGALLOC not found"
    box $P5033, "Contextual $*REGALLOC not found"
    set $P5029, $P5033
  vivi_192642:
    set $P5028, $P5029
  fallback640:
    $P5034 = $P5028."fresh_p"()
    set $P104, $P5034
.annotate 'line', 1060
    set $P5035, _lex_param_1[0]
    unless_null $P5035, fallback643
    nqp_get_sc_object $P5036, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5035, $P5036
  fallback643:
    $P5037 = _lex_param_0."as_post"($P5035)
    $P5038 = _lex_param_0."coerce"($P5037, "P")
    set $P105, $P5038
.annotate 'line', 1061
    set $P5039, _lex_param_1[1]
    unless_null $P5039, fallback644
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5039, $P5040
  fallback644:
    $P5041 = _lex_param_0."as_post"($P5039)
    $P5042 = _lex_param_0."coerce"($P5041, "P")
    set $P106, $P5042
.annotate 'line', 1062
    $P101."push"($P105)
.annotate 'line', 1063
    $P101."push_pirop"("set", $P104, $P105)
.annotate 'line', 1064
    $P101."push_pirop"("defined", $P103, $P104)
.annotate 'line', 1065
    $P101."push_pirop"("if", $P103, $P102)
.annotate 'line', 1066
    $P101."push"($P106)
.annotate 'line', 1067
    $P101."push_pirop"("set", $P104, $P106)
.annotate 'line', 1068
    $P101."push"($P102)
.annotate 'line', 1069
    $P101."result"($P104)
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_209_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1073
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5075 = 'cuid_208_1359572548.257' 
    capture_lex $P5075 
    .const 'Sub' $P5075 = 'cuid_211_1359572548.257' 
    capture_lex $P5075 
    .const 'Sub' $P5075 = 'cuid_212_1359572548.257' 
    capture_lex $P5075 
    .lex "$ops", $P101 
    .lex "$falselabel", $P102 
    .lex "$endlabel", $P103 
    .lex "@childlist", $P104 
    .lex "$fpast", $P105 
    .lex "$i", $P106 
    .lex "$t", $P107 
    .lex "$u", $P108 
    .lex "$apast", $P109 
    .lex "$apost", $P110 
    .lex "$have_middle_child", $P111 
    .lex "$bpost", $P112 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    new $P5004, 'ResizablePMCArray'
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P106, $P5006
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P107, $P5007
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P108, $P5008
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P109, $P5009
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P110, $P5010
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P111, $P5011
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P112, $P5012
.annotate 'line', 1074
    nqp_get_sc_object $P5016, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5015, $P5016, "PIRT"
    get_who $P5014, $P5015
    set $P5013, $P5014["Ops"]
    unless_null $P5013, fallback646
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5013, $P5017
  fallback646:
    $P5018 = $P5013."new"()
    set $P101, $P5018
.annotate 'line', 1075
    find_dynamic_lex $P5019, "$*REGALLOC"
    unless_null $P5019, fallback647
    nqp_get_sc_object $P5022, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$REGALLOC"]
    unless_null $P5020, fallback648
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5020, $P5023
  fallback648:
    unless_null $P5020, vivi_193649
    die "Contextual $*REGALLOC not found"
    box $P5024, "Contextual $*REGALLOC not found"
    set $P5020, $P5024
  vivi_193649:
    set $P5019, $P5020
  fallback647:
    $P5025 = $P5019."fresh_p"()
    $P101."result"($P5025)
.annotate 'line', 1077
    nqp_get_sc_object $P5029, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5028, $P5029, "PIRT"
    get_who $P5027, $P5028
    set $P5026, $P5027["Label"]
    unless_null $P5026, fallback650
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5026, $P5030
  fallback650:
    $P5031 = $P5026."new"("xor_false" :named("name"))
    set $P102, $P5031
.annotate 'line', 1078
    nqp_get_sc_object $P5035, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5034, $P5035, "PIRT"
    get_who $P5033, $P5034
    set $P5032, $P5033["Label"]
    unless_null $P5032, fallback651
    nqp_get_sc_object $P5036, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5032, $P5036
  fallback651:
    $P5037 = $P5032."new"("xor_end" :named("name"))
    set $P103, $P5037
.annotate 'line', 1082
    $P5041 = _lex_param_1."list"()
    set $P5038, $P5041
    iter $P5040, $P5041
  for_next654:
    unless $P5040, for_done656
    shift $P5043, $P5040
  for_redo655:
    .const 'Sub' $P5042 = 'cuid_208_1359572548.257' 
    capture_lex $P5042
    $P5038 = $P5042($P5043)
    goto for_next654
  for_done656:
.annotate 'line', 1091
    find_dynamic_lex $P5044, "$*REGALLOC"
    unless_null $P5044, fallback657
    nqp_get_sc_object $P5047, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5046, $P5047
    set $P5045, $P5046["$REGALLOC"]
    unless_null $P5045, fallback658
    nqp_get_sc_object $P5048, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5045, $P5048
  fallback658:
    unless_null $P5045, vivi_195659
    die "Contextual $*REGALLOC not found"
    box $P5049, "Contextual $*REGALLOC not found"
    set $P5045, $P5049
  vivi_195659:
    set $P5044, $P5045
  fallback657:
    $P5050 = $P5044."fresh_i"()
    set $P106, $P5050
.annotate 'line', 1092
    find_dynamic_lex $P5051, "$*REGALLOC"
    unless_null $P5051, fallback660
    nqp_get_sc_object $P5054, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5053, $P5054
    set $P5052, $P5053["$REGALLOC"]
    unless_null $P5052, fallback661
    nqp_get_sc_object $P5055, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5052, $P5055
  fallback661:
    unless_null $P5052, vivi_196662
    die "Contextual $*REGALLOC not found"
    box $P5056, "Contextual $*REGALLOC not found"
    set $P5052, $P5056
  vivi_196662:
    set $P5051, $P5052
  fallback660:
    $P5057 = $P5051."fresh_i"()
    set $P107, $P5057
.annotate 'line', 1093
    find_dynamic_lex $P5058, "$*REGALLOC"
    unless_null $P5058, fallback663
    nqp_get_sc_object $P5061, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5060, $P5061
    set $P5059, $P5060["$REGALLOC"]
    unless_null $P5059, fallback664
    nqp_get_sc_object $P5062, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5059, $P5062
  fallback664:
    unless_null $P5059, vivi_197665
    die "Contextual $*REGALLOC not found"
    box $P5063, "Contextual $*REGALLOC not found"
    set $P5059, $P5063
  vivi_197665:
    set $P5058, $P5059
  fallback663:
    $P5064 = $P5058."fresh_i"()
    set $P108, $P5064
    shift $P5065, $P104
    set $P109, $P5065
.annotate 'line', 1096
    $P5066 = _lex_param_0."as_post"($P109)
    $P5067 = _lex_param_0."coerce"($P5066, "P")
    set $P110, $P5067
.annotate 'line', 1097
    $P101."push"($P110)
.annotate 'line', 1098
    $P101."push_pirop"("set", $P101, $P110)
.annotate 'line', 1099
    $P101."push_pirop"("istrue", $P107, $P110)
    box $P5068, 1
    set $P111, $P5068
  while198_test666:
    set $P5071, $P111
    unless $P111 goto while198_done670 
  while198_redo668:
    .const 'Sub' $P5069 = 'cuid_211_1359572548.257' 
    capture_lex $P5069
    $P5070 = $P5069()
    set $P5071, $P5070
    goto while198_test666 
  while198_done670:
.annotate 'line', 1122
    $P101."push_pirop"("if", $P107, $P103)
.annotate 'line', 1123
    $P101."push_pirop"("set", $P101, $P112)
.annotate 'line', 1124
    $P101."push_pirop"("goto", $P103)
.annotate 'line', 1125
    $P101."push"($P102)
    unless $P105 goto if200_else674 
    .const 'Sub' $P5072 = 'cuid_212_1359572548.257' 
    capture_lex $P5072
    $P5073 = $P5072()
    goto if200_end675
  if200_else674:
.annotate 'line', 1132
.annotate 'line', 1133
    $P5074 = $P101."push_pirop"("new", $P101, "[\"Undef\"]")
  if200_end675:
.annotate 'line', 1136
    $P101."push"($P103)
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_208_1359572548.257") :anon :lex :outer("cuid_209_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1082
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 1083
    $P5001 = _lex_param_0."named"()
    set $S5001, $P5001
    iseq $I5001, $S5001, "false"
    unless $I5001 goto if194_else652 
    store_lex "$fpast", _lex_param_0
    set $P5003, _lex_param_0
    goto if194_end653
  if194_else652:
.annotate 'line', 1086
    find_lex $P5002, "@childlist"
    push $P5002, _lex_param_0
    set $P5003, $P5002
  if194_end653:
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_211_1359572548.257") :anon :lex :outer("cuid_209_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1103
    .const 'Sub' $P5025 = 'cuid_210_1359572548.257' 
    capture_lex $P5025 
    .lex "$bpast", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    find_lex $P5003, "@childlist"
    shift $P5002, $P5003
    set $P101, $P5002
.annotate 'line', 1105
    find_lex $P5004, "$qastcomp"
    find_lex $P5005, "$qastcomp"
    $P5006 = $P5005."as_post"($P101)
    $P5007 = $P5004."coerce"($P5006, "P")
    store_lex "$bpost", $P5007
.annotate 'line', 1106
    find_lex $P5008, "$ops"
    find_lex $P5009, "$bpost"
    $P5008."push"($P5009)
.annotate 'line', 1107
    find_lex $P5010, "$ops"
    find_lex $P5011, "$u"
    find_lex $P5012, "$bpost"
    $P5010."push_pirop"("istrue", $P5011, $P5012)
.annotate 'line', 1108
    find_lex $P5013, "$ops"
    find_lex $P5014, "$i"
    find_lex $P5015, "$t"
    find_lex $P5016, "$u"
    $P5013."push_pirop"("and", $P5014, $P5015, $P5016)
.annotate 'line', 1109
    find_lex $P5017, "$ops"
    find_lex $P5018, "$i"
    find_lex $P5019, "$falselabel"
    $P5017."push_pirop"("if", $P5018, $P5019)
    find_lex $P5020, "@childlist"
    unless $P5020 goto if199_else671 
    .const 'Sub' $P5021 = 'cuid_210_1359572548.257' 
    capture_lex $P5021
    $P5022 = $P5021()
    set $P5024, $P5022
    goto if199_end672
  if199_else671:
.annotate 'line', 1117
    box $P5023, 0
    store_lex "$have_middle_child", $P5023
    set $P5024, $P5023
  if199_end672:
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_210_1359572548.257") :anon :lex :outer("cuid_211_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1110
    .lex "$truelabel", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 1111
    nqp_get_sc_object $P5005, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5004, $P5005, "PIRT"
    get_who $P5003, $P5004
    set $P5002, $P5003["Label"]
    unless_null $P5002, fallback673
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5002, $P5006
  fallback673:
    $P5007 = $P5002."new"("xor_true" :named("name"))
    set $P101, $P5007
.annotate 'line', 1112
    find_lex $P5008, "$ops"
    find_lex $P5009, "$t"
    $P5008."push_pirop"("if", $P5009, $P101)
.annotate 'line', 1113
    find_lex $P5010, "$ops"
    find_lex $P5011, "$ops"
    find_lex $P5012, "$bpost"
    $P5010."push_pirop"("set", $P5011, $P5012)
.annotate 'line', 1114
    find_lex $P5013, "$ops"
    find_lex $P5014, "$t"
    find_lex $P5015, "$u"
    $P5013."push_pirop"("set", $P5014, $P5015)
.annotate 'line', 1115
    find_lex $P5016, "$ops"
    $P5017 = $P5016."push"($P101)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_212_1359572548.257") :anon :lex :outer("cuid_209_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1127
    .lex "$fpost", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 1128
    find_lex $P5002, "$qastcomp"
    find_lex $P5003, "$qastcomp"
    find_lex $P5004, "$fpast"
    $P5005 = $P5003."as_post"($P5004)
    $P5006 = $P5002."coerce"($P5005, "P")
    set $P101, $P5006
.annotate 'line', 1129
    find_lex $P5007, "$ops"
    $P5007."push"($P101)
.annotate 'line', 1130
    find_lex $P5008, "$ops"
    find_lex $P5009, "$ops"
    $P5010 = $P5008."push_pirop"("set", $P5009, $P101)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_213_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1142
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "@children", $P101 
    .lex "$*BINDVAL", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 1144
    $P5003 = _lex_param_1."list"()
    set $P101, $P5003
    set $N5001, $P101
    set $N5002, 2
    isne $I5001, $N5001, $N5002
    unless $I5001 goto if201_end678 
.annotate 'line', 1145
    box $P5004, "A 'bind' op must have exactly two children"
    die $P5004
  if201_end678:
    set $P5005, $P101[0]
    unless_null $P5005, fallback681
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5005, $P5006
  fallback681:
    nqp_get_sc_object $P5010, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Var"]
    unless_null $P5007, fallback682
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5007, $P5011
  fallback682:
    type_check $I5002, $P5005, $P5007
    if $I5002 goto unless202_end680 
.annotate 'line', 1148
    box $P5012, "First child of a 'bind' op must be a QAST::Var"
    die $P5012
  unless202_end680:
    set $P5013, $P101[1]
    unless_null $P5013, fallback683
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5013, $P5014
  fallback683:
    set $P102, $P5013
.annotate 'line', 1155
    set $P5015, $P101[0]
    unless_null $P5015, fallback684
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5015, $P5016
  fallback684:
    $P5017 = _lex_param_0."as_post"($P5015)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_215_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1183
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5045 = 'cuid_214_1359572548.257' 
    capture_lex $P5045 
    .const 'Sub' $P5045 = 'cuid_216_1359572548.257' 
    capture_lex $P5045 
    .lex "$callee", $P101 
    .lex "@args", $P102 
    .lex "$ops", $P103 
    .lex "@pos_arg_results", $P104 
    .lex "@named_arg_results", $P105 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    new $P5004, 'ResizablePMCArray'
    set $P104, $P5004
    new $P5005, 'ResizablePMCArray'
    set $P105, $P5005
.annotate 'line', 1186
    $P5007 = _lex_param_1."list"()
    clone $P5006, $P5007
    set $P102, $P5006
.annotate 'line', 1187
    $P5008 = _lex_param_1."name"()
    unless $P5008 goto if203_else686 
.annotate 'line', 1188
    nqp_get_sc_object $P5012, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5011, $P5012, "PIRT"
    get_who $P5010, $P5011
    set $P5009, $P5010["Ops"]
    unless_null $P5009, fallback688
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5009, $P5013
  fallback688:
    $P5014 = _lex_param_1."name"()
    $P5015 = _lex_param_0."escape"($P5014)
    $P5016 = $P5009."new"($P5015 :named("result"))
    set $P101, $P5016
    goto if203_end687
  if203_else686:
    set $N5001, $P102
    unless $N5001 goto if204_else689 
.annotate 'line', 1190
.annotate 'line', 1191
    $P5017 = $P102."shift"()
    $P5018 = _lex_param_0."as_post"($P5017)
    set $P101, $P5018
    set $P5020, $P101
    goto if204_end690
  if204_else689:
.annotate 'line', 1193
    box $P5019, "No name for call and empty children list"
    die $P5019
    set $P5020, $P5019
  if204_end690:
  if203_end687:
.annotate 'line', 1198
    nqp_get_sc_object $P5024, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5023, $P5024, "PIRT"
    get_who $P5022, $P5023
    set $P5021, $P5022["Ops"]
    unless_null $P5021, fallback691
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5021, $P5025
  fallback691:
    $P5026 = $P5021."new"()
    set $P103, $P5026
.annotate 'line', 1199
    $P5027 = _lex_param_1."node"()
    unless $P5027 goto if205_end693 
    $P5028 = _lex_param_1."node"()
    $P5029 = $P103."node"($P5028)
  if205_end693:
    set $P5030, $P102
    iter $P5032, $P102
  for_next694:
    unless $P5032, for_done696
    shift $P5034, $P5032
  for_redo695:
    .const 'Sub' $P5033 = 'cuid_214_1359572548.257' 
    capture_lex $P5033
    $P5030 = $P5033($P5034)
    goto for_next694
  for_done696:
.annotate 'line', 1207
    $P103."push"($P101)
    find_dynamic_lex $P5035, "$*WANT"
    unless_null $P5035, fallback699
    nqp_get_sc_object $P5038, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5037, $P5038
    set $P5036, $P5037["$WANT"]
    unless_null $P5036, fallback700
    nqp_get_sc_object $P5039, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5036, $P5039
  fallback700:
    unless_null $P5036, vivi_207701
    die "Contextual $*WANT not found"
    box $P5040, "Contextual $*WANT not found"
    set $P5036, $P5040
  vivi_207701:
    set $P5035, $P5036
  fallback699:
    set $S5001, $P5035
    iseq $I5001, $S5001, "v"
    unless $I5001 goto if206_else697 
.annotate 'line', 1208
.annotate 'line', 1209
    $P5041 = $P101."result"()
    $P5042 = $P103."push_pirop"("call", $P5041, $P104 :flat, $P105 :flat)
    goto if206_end698
  if206_else697:
    .const 'Sub' $P5043 = 'cuid_216_1359572548.257' 
    capture_lex $P5043
    $P5044 = $P5043()
  if206_end698:
    .return ($P103) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_214_1359572548.257") :anon :lex :outer("cuid_215_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1202
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 1203
    find_lex $P5001, "$qastcomp"
    find_lex $P5002, "$ops"
    find_lex $P5003, "@pos_arg_results"
    find_lex $P5004, "@named_arg_results"
    $P5005 = "&handle_arg"(_lex_param_0, $P5001, $P5002, $P5003, $P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_216_1359572548.257") :anon :lex :outer("cuid_215_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1211
    .lex "$res_type", $P101 
    .lex "$res_reg", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 1212
    find_lex $P5003, "$qastcomp"
    find_lex $P5004, "$op"
    $P5005 = $P5004."returns"()
    $P5006 = $P5003."type_to_register_type"($P5005)
    set $P101, $P5006
.annotate 'line', 1213
    find_dynamic_lex $P5007, "$*REGALLOC"
    unless_null $P5007, fallback702
    nqp_get_sc_object $P5010, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["$REGALLOC"]
    unless_null $P5008, fallback703
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5008, $P5011
  fallback703:
    unless_null $P5008, vivi_208704
    die "Contextual $*REGALLOC not found"
    box $P5012, "Contextual $*REGALLOC not found"
    set $P5008, $P5012
  vivi_208704:
    set $P5007, $P5008
  fallback702:
    set $S5003, $P101
    downcase $S5002, $S5003
    concat $S5001, "fresh_", $S5002
    $P5013 = $P5007.$S5001()
    set $P102, $P5013
.annotate 'line', 1214
    find_lex $P5014, "$ops"
    find_lex $P5015, "$callee"
    $P5016 = $P5015."result"()
    find_lex $P5017, "@pos_arg_results"
    find_lex $P5018, "@named_arg_results"
    $P5014."push_pirop"("call", $P5016, $P5017 :flat, $P5018 :flat, $P102 :named("result"))
.annotate 'line', 1215
    find_lex $P5019, "$ops"
    $P5020 = $P5019."result"($P102)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_218_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1219
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5048 = 'cuid_217_1359572548.257' 
    capture_lex $P5048 
    .const 'Sub' $P5048 = 'cuid_219_1359572548.257' 
    capture_lex $P5048 
    .const 'Sub' $P5048 = 'cuid_220_1359572548.257' 
    capture_lex $P5048 
    .lex "@args", $P101 
    .lex "$name", $P102 
    .lex "$ops", $P103 
    .lex "@pos_arg_results", $P104 
    .lex "@named_arg_results", $P105 
    .lex "$inv", $P106 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    new $P5004, 'ResizablePMCArray'
    set $P104, $P5004
    new $P5005, 'ResizablePMCArray'
    set $P105, $P5005
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P106, $P5006
.annotate 'line', 1221
    $P5008 = _lex_param_1."list"()
    clone $P5007, $P5008
    set $P101, $P5007
    set $N5001, $P101
    set $N5002, 0
    iseq $I5001, $N5001, $N5002
    unless $I5001 goto if209_end707 
.annotate 'line', 1222
    box $P5009, "Method call node requires at least one child"
    die $P5009
  if209_end707:
.annotate 'line', 1228
    $P5010 = _lex_param_1."name"()
    unless $P5010 goto if210_else708 
.annotate 'line', 1229
    nqp_get_sc_object $P5014, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5013, $P5014, "PIRT"
    get_who $P5012, $P5013
    set $P5011, $P5012["Ops"]
    unless_null $P5011, fallback710
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5011, $P5015
  fallback710:
    $P5016 = _lex_param_1."name"()
    $P5017 = _lex_param_0."escape"($P5016)
    $P5018 = $P5011."new"($P5017 :named("result"))
    set $P102, $P5018
    goto if210_end709
  if210_else708:
    set $N5003, $P101
    set $N5004, 2
    isge $I5002, $N5003, $N5004
    unless $I5002 goto if211_else711 
    .const 'Sub' $P5019 = 'cuid_217_1359572548.257' 
    capture_lex $P5019
    $P5020 = $P5019()
    set $P5022, $P5020
    goto if211_end712
  if211_else711:
.annotate 'line', 1236
    box $P5021, "Method call must either supply a name or have a child node that evaluates to the name"
    die $P5021
    set $P5022, $P5021
  if211_end712:
  if210_end709:
.annotate 'line', 1241
    nqp_get_sc_object $P5026, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5025, $P5026, "PIRT"
    get_who $P5024, $P5025
    set $P5023, $P5024["Ops"]
    unless_null $P5023, fallback713
    nqp_get_sc_object $P5027, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5023, $P5027
  fallback713:
    $P5028 = $P5023."new"()
    set $P103, $P5028
.annotate 'line', 1242
    $P5029 = _lex_param_1."node"()
    unless $P5029 goto if212_end715 
    $P5030 = _lex_param_1."node"()
    $P5031 = $P103."node"($P5030)
  if212_end715:
    box $P5032, 1
    set $P106, $P5032
    set $P5033, $P101
    iter $P5035, $P101
  for_next718:
    unless $P5035, for_done720
    shift $P5037, $P5035
  for_redo719:
    .const 'Sub' $P5036 = 'cuid_219_1359572548.257' 
    capture_lex $P5036
    $P5033 = $P5036($P5037)
    goto for_next718
  for_done720:
.annotate 'line', 1257
    $P103."push"($P102)
    find_dynamic_lex $P5038, "$*WANT"
    unless_null $P5038, fallback723
    nqp_get_sc_object $P5041, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5040, $P5041
    set $P5039, $P5040["$WANT"]
    unless_null $P5039, fallback724
    nqp_get_sc_object $P5042, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5039, $P5042
  fallback724:
    unless_null $P5039, vivi_215725
    die "Contextual $*WANT not found"
    box $P5043, "Contextual $*WANT not found"
    set $P5039, $P5043
  vivi_215725:
    set $P5038, $P5039
  fallback723:
    set $S5001, $P5038
    iseq $I5003, $S5001, "v"
    unless $I5003 goto if214_else721 
.annotate 'line', 1258
.annotate 'line', 1259
    $P5044 = $P102."result"()
    $P5045 = $P103."push_pirop"("callmethod", $P5044, $P104 :flat, $P105 :flat)
    goto if214_end722
  if214_else721:
    .const 'Sub' $P5046 = 'cuid_220_1359572548.257' 
    capture_lex $P5046
    $P5047 = $P5046()
  if214_end722:
    .return ($P103) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_217_1359572548.257") :anon :lex :outer("cuid_218_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1231
    .lex "$invocant", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 1232
    find_lex $P5002, "@args"
    $P5003 = $P5002."shift"()
    set $P101, $P5003
.annotate 'line', 1233
    find_lex $P5004, "$qastcomp"
    find_lex $P5005, "$qastcomp"
    find_lex $P5006, "@args"
    $P5007 = $P5006."shift"()
    $P5008 = $P5005."as_post"($P5007)
    $P5009 = $P5004."coerce"($P5008, "s")
    store_lex "$name", $P5009
.annotate 'line', 1234
    find_lex $P5010, "@args"
    $P5011 = $P5010."unshift"($P101)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_219_1359572548.257") :anon :lex :outer("cuid_218_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1246
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$inv"
    unless $P5001 goto if213_else716 
.annotate 'line', 1247
.annotate 'line', 1248
    find_lex $P5002, "$qastcomp"
    find_lex $P5003, "$ops"
    find_lex $P5004, "@pos_arg_results"
    find_lex $P5005, "@named_arg_results"
    "&handle_arg"(_lex_param_0, $P5002, $P5003, $P5004, $P5005, "P" :named("coerce"))
    box $P5006, 0
    store_lex "$inv", $P5006
    set $P5012, $P5006
    goto if213_end717
  if213_else716:
.annotate 'line', 1251
.annotate 'line', 1252
    find_lex $P5007, "$qastcomp"
    find_lex $P5008, "$ops"
    find_lex $P5009, "@pos_arg_results"
    find_lex $P5010, "@named_arg_results"
    $P5011 = "&handle_arg"(_lex_param_0, $P5007, $P5008, $P5009, $P5010)
    set $P5012, $P5011
  if213_end717:
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_220_1359572548.257") :anon :lex :outer("cuid_218_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1261
    .lex "$res_type", $P101 
    .lex "$res_reg", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 1262
    find_lex $P5003, "$qastcomp"
    find_lex $P5004, "$op"
    $P5005 = $P5004."returns"()
    $P5006 = $P5003."type_to_register_type"($P5005)
    set $P101, $P5006
.annotate 'line', 1263
    find_dynamic_lex $P5007, "$*REGALLOC"
    unless_null $P5007, fallback726
    nqp_get_sc_object $P5010, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["$REGALLOC"]
    unless_null $P5008, fallback727
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5008, $P5011
  fallback727:
    unless_null $P5008, vivi_216728
    die "Contextual $*REGALLOC not found"
    box $P5012, "Contextual $*REGALLOC not found"
    set $P5008, $P5012
  vivi_216728:
    set $P5007, $P5008
  fallback726:
    set $S5003, $P101
    downcase $S5002, $S5003
    concat $S5001, "fresh_", $S5002
    $P5013 = $P5007.$S5001()
    set $P102, $P5013
.annotate 'line', 1264
    find_lex $P5014, "$ops"
    find_lex $P5015, "$name"
    $P5016 = $P5015."result"()
    find_lex $P5017, "@pos_arg_results"
    find_lex $P5018, "@named_arg_results"
    $P5014."push_pirop"("callmethod", $P5016, $P5017 :flat, $P5018 :flat, $P102 :named("result"))
.annotate 'line', 1265
    find_lex $P5019, "$ops"
    $P5020 = $P5019."result"($P102)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_221_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1271
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$label1", $P101 
    .lex "$label2", $P102 
    .lex "$lexname", $P103 
    .lex "$ops", $P104 
    .lex "$handler", $P105 
    .lex "$cpost", $P106 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P106, $P5006
.annotate 'line', 1272
    nqp_get_sc_object $P5010, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5009, $P5010, "PIRT"
    get_who $P5008, $P5009
    set $P5007, $P5008["Label"]
    unless_null $P5007, fallback730
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5007, $P5011
  fallback730:
    $P5012 = $P5007."new"("lexotic_" :named("name"))
    set $P101, $P5012
.annotate 'line', 1273
    nqp_get_sc_object $P5016, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5015, $P5016, "PIRT"
    get_who $P5014, $P5015
    set $P5013, $P5014["Label"]
    unless_null $P5013, fallback731
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5013, $P5017
  fallback731:
    $P5018 = $P5013."new"("lexotic_" :named("name"))
    set $P102, $P5018
.annotate 'line', 1274
    $P5019 = _lex_param_1."name"()
    $P5020 = _lex_param_0."escape"($P5019)
    set $P103, $P5020
.annotate 'line', 1276
    nqp_get_sc_object $P5024, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5023, $P5024, "PIRT"
    get_who $P5022, $P5023
    set $P5021, $P5022["Ops"]
    unless_null $P5021, fallback732
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5021, $P5025
  fallback732:
    $P5026 = $P5021."new"()
    set $P104, $P5026
.annotate 'line', 1277
    find_dynamic_lex $P5027, "$*BLOCK"
    unless_null $P5027, fallback733
    nqp_get_sc_object $P5030, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5029, $P5030
    set $P5028, $P5029["$BLOCK"]
    unless_null $P5028, fallback734
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5028, $P5031
  fallback734:
    unless_null $P5028, vivi_217735
    die "Contextual $*BLOCK not found"
    box $P5032, "Contextual $*BLOCK not found"
    set $P5028, $P5032
  vivi_217735:
    set $P5027, $P5028
  fallback733:
    $P5033 = $P5027."fresh_lex_p"()
    set $P105, $P5033
.annotate 'line', 1278
    $P104."push_pirop"("root_new", $P105, "['parrot';'Continuation']")
.annotate 'line', 1279
    $P104."push_pirop"("set_label", $P105, $P101)
.annotate 'line', 1280
    $P104."push_pirop"(".lex", $P103, $P105)
.annotate 'line', 1282
    $P5034 = _lex_param_1."list"()
    $P5035 = _lex_param_0."compile_all_the_stmts"($P5034)
    $P5036 = _lex_param_0."coerce"($P5035, "P")
    set $P106, $P5036
.annotate 'line', 1283
    $P104."push"($P106)
.annotate 'line', 1284
    $P104."result"($P106)
.annotate 'line', 1286
    $P104."push_pirop"("goto", $P102)
.annotate 'line', 1287
    $P104."push"($P101)
.annotate 'line', 1288
    $P5037 = $P104."result"()
    set $S5003, $P5037
    concat $S5002, "(", $S5003
    concat $S5001, $S5002, ")"
    $P104."push_pirop"(".get_results", $S5001)
.annotate 'line', 1289
    $P104."push"($P102)
    .return ($P104) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_222_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1295
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$reg", $P101 
    .lex "$ops", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 1296
    find_dynamic_lex $P5003, "$*REGALLOC"
    unless_null $P5003, fallback737
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$REGALLOC"]
    unless_null $P5004, fallback738
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5007
  fallback738:
    unless_null $P5004, vivi_218739
    die "Contextual $*REGALLOC not found"
    box $P5008, "Contextual $*REGALLOC not found"
    set $P5004, $P5008
  vivi_218739:
    set $P5003, $P5004
  fallback737:
    $P5009 = $P5003."fresh_p"()
    set $P101, $P5009
.annotate 'line', 1297
    nqp_get_sc_object $P5013, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5012, $P5013, "PIRT"
    get_who $P5011, $P5012
    set $P5010, $P5011["Ops"]
    unless_null $P5010, fallback740
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5010, $P5014
  fallback740:
    $P5015 = $P5010."new"()
    set $P102, $P5015
.annotate 'line', 1298
    $P102."push_pirop"("getinterp", $P101)
.annotate 'line', 1299
    set $S5002, $P101
    concat $S5001, $S5002, "['context']"
    $P102."push_pirop"("set", $P101, $S5001)
.annotate 'line', 1300
    $P102."result"($P101)
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_223_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1303
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$reg", $P101 
    .lex "$ops", $P102 
    .lex "$ctxpost", $P103 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
.annotate 'line', 1304
    find_dynamic_lex $P5004, "$*REGALLOC"
    unless_null $P5004, fallback742
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$REGALLOC"]
    unless_null $P5005, fallback743
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5005, $P5008
  fallback743:
    unless_null $P5005, vivi_219744
    die "Contextual $*REGALLOC not found"
    box $P5009, "Contextual $*REGALLOC not found"
    set $P5005, $P5009
  vivi_219744:
    set $P5004, $P5005
  fallback742:
    $P5010 = $P5004."fresh_p"()
    set $P101, $P5010
.annotate 'line', 1305
    nqp_get_sc_object $P5014, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5013, $P5014, "PIRT"
    get_who $P5012, $P5013
    set $P5011, $P5012["Ops"]
    unless_null $P5011, fallback745
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5011, $P5015
  fallback745:
    $P5016 = $P5011."new"()
    set $P102, $P5016
.annotate 'line', 1306
    set $P5017, _lex_param_1[0]
    unless_null $P5017, fallback746
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5017, $P5018
  fallback746:
    $P5019 = _lex_param_0."as_post"($P5017)
    $P5020 = _lex_param_0."coerce"($P5019, "P")
    set $P103, $P5020
.annotate 'line', 1307
    $P102."push"($P103)
.annotate 'line', 1308
    $P102."push_pirop"("getattribute", $P101, $P103, "'outer_ctx'")
.annotate 'line', 1309
    $P102."result"($P101)
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_224_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1312
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$reg", $P101 
    .lex "$ops", $P102 
    .lex "$ctxpost", $P103 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
.annotate 'line', 1313
    find_dynamic_lex $P5004, "$*REGALLOC"
    unless_null $P5004, fallback748
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$REGALLOC"]
    unless_null $P5005, fallback749
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5005, $P5008
  fallback749:
    unless_null $P5005, vivi_220750
    die "Contextual $*REGALLOC not found"
    box $P5009, "Contextual $*REGALLOC not found"
    set $P5005, $P5009
  vivi_220750:
    set $P5004, $P5005
  fallback748:
    $P5010 = $P5004."fresh_p"()
    set $P101, $P5010
.annotate 'line', 1314
    nqp_get_sc_object $P5014, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5013, $P5014, "PIRT"
    get_who $P5012, $P5013
    set $P5011, $P5012["Ops"]
    unless_null $P5011, fallback751
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5011, $P5015
  fallback751:
    $P5016 = $P5011."new"()
    set $P102, $P5016
.annotate 'line', 1315
    set $P5017, _lex_param_1[0]
    unless_null $P5017, fallback752
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5017, $P5018
  fallback752:
    $P5019 = _lex_param_0."as_post"($P5017)
    $P5020 = _lex_param_0."coerce"($P5019, "P")
    set $P103, $P5020
.annotate 'line', 1316
    $P102."push"($P103)
.annotate 'line', 1317
    $P102."push_pirop"("getattribute", $P101, $P103, "'caller_ctx'")
.annotate 'line', 1318
    $P102."result"($P101)
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_225_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1321
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$reg", $P101 
    .lex "$ops", $P102 
    .lex "$ctxpost", $P103 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
.annotate 'line', 1322
    find_dynamic_lex $P5004, "$*REGALLOC"
    unless_null $P5004, fallback754
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$REGALLOC"]
    unless_null $P5005, fallback755
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5005, $P5008
  fallback755:
    unless_null $P5005, vivi_221756
    die "Contextual $*REGALLOC not found"
    box $P5009, "Contextual $*REGALLOC not found"
    set $P5005, $P5009
  vivi_221756:
    set $P5004, $P5005
  fallback754:
    $P5010 = $P5004."fresh_p"()
    set $P101, $P5010
.annotate 'line', 1323
    nqp_get_sc_object $P5014, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5013, $P5014, "PIRT"
    get_who $P5012, $P5013
    set $P5011, $P5012["Ops"]
    unless_null $P5011, fallback757
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5011, $P5015
  fallback757:
    $P5016 = $P5011."new"()
    set $P102, $P5016
.annotate 'line', 1324
    set $P5017, _lex_param_1[0]
    unless_null $P5017, fallback758
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5017, $P5018
  fallback758:
    $P5019 = _lex_param_0."as_post"($P5017)
    $P5020 = _lex_param_0."coerce"($P5019, "P")
    set $P103, $P5020
.annotate 'line', 1325
    $P102."push"($P103)
.annotate 'line', 1326
    $P102."push_pirop"("getattribute", $P101, $P103, "'lex_pad'")
.annotate 'line', 1327
    $P102."result"($P101)
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_226_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1330
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$reg", $P101 
    .lex "$ops", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 1331
    find_dynamic_lex $P5003, "$*REGALLOC"
    unless_null $P5003, fallback760
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$REGALLOC"]
    unless_null $P5004, fallback761
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5007
  fallback761:
    unless_null $P5004, vivi_222762
    die "Contextual $*REGALLOC not found"
    box $P5008, "Contextual $*REGALLOC not found"
    set $P5004, $P5008
  vivi_222762:
    set $P5003, $P5004
  fallback760:
    $P5009 = $P5003."fresh_p"()
    set $P101, $P5009
.annotate 'line', 1332
    nqp_get_sc_object $P5013, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5012, $P5013, "PIRT"
    get_who $P5011, $P5012
    set $P5010, $P5011["Ops"]
    unless_null $P5010, fallback763
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5010, $P5014
  fallback763:
    $P5015 = $P5010."new"()
    set $P102, $P5015
.annotate 'line', 1333
    $P102."push_pirop"("getinterp", $P101)
.annotate 'line', 1334
    set $S5002, $P101
    concat $S5001, $S5002, "['lexpad']"
    $P102."push_pirop"("set", $P101, $S5001)
.annotate 'line', 1335
    $P102."result"($P101)
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_227_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1338
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$reg", $P101 
    .lex "$ops", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 1339
    find_dynamic_lex $P5003, "$*REGALLOC"
    unless_null $P5003, fallback765
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$REGALLOC"]
    unless_null $P5004, fallback766
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5007
  fallback766:
    unless_null $P5004, vivi_223767
    die "Contextual $*REGALLOC not found"
    box $P5008, "Contextual $*REGALLOC not found"
    set $P5004, $P5008
  vivi_223767:
    set $P5003, $P5004
  fallback765:
    $P5009 = $P5003."fresh_p"()
    set $P101, $P5009
.annotate 'line', 1340
    nqp_get_sc_object $P5013, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5012, $P5013, "PIRT"
    get_who $P5011, $P5012
    set $P5010, $P5011["Ops"]
    unless_null $P5010, fallback768
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5010, $P5014
  fallback768:
    $P5015 = $P5010."new"()
    set $P102, $P5015
.annotate 'line', 1341
    $P102."push_pirop"("getinterp", $P101)
.annotate 'line', 1342
    set $S5002, $P101
    concat $S5001, $S5002, "['sub']"
    $P102."push_pirop"("set", $P101, $S5001)
.annotate 'line', 1343
    $P102."result"($P101)
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_228_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1346
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$reg", $P101 
    .lex "$ops", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 1347
    find_dynamic_lex $P5003, "$*REGALLOC"
    unless_null $P5003, fallback770
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$REGALLOC"]
    unless_null $P5004, fallback771
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5007
  fallback771:
    unless_null $P5004, vivi_224772
    die "Contextual $*REGALLOC not found"
    box $P5008, "Contextual $*REGALLOC not found"
    set $P5004, $P5008
  vivi_224772:
    set $P5003, $P5004
  fallback770:
    $P5009 = $P5003."fresh_p"()
    set $P101, $P5009
.annotate 'line', 1348
    nqp_get_sc_object $P5013, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5012, $P5013, "PIRT"
    get_who $P5011, $P5012
    set $P5010, $P5011["Ops"]
    unless_null $P5010, fallback773
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5010, $P5014
  fallback773:
    $P5015 = $P5010."new"()
    set $P102, $P5015
.annotate 'line', 1349
    $P102."push_pirop"("getinterp", $P101)
.annotate 'line', 1350
    set $S5002, $P101
    concat $S5001, $S5002, "['sub';1]"
    $P102."push_pirop"("set", $P101, $S5001)
.annotate 'line', 1351
    $P102."result"($P101)
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_229_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1354
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    $P5001 = _lex_param_1."list"()
    set $N5001, $P5001
    set $N5002, 2
    iseq $I5001, $N5001, $N5002
    if $I5001 goto unless225_end776 
.annotate 'line', 1355
    box $P5002, "Operation 'lexprimspec' expects two operands"
    die $P5002
  unless225_end776:
.annotate 'line', 1358
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5005, $P5006, "QAST"
    get_who $P5004, $P5005
    set $P5003, $P5004["Op"]
    unless_null $P5003, fallback777
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5007
  fallback777:
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 2
    set $P5009, _lex_param_1[0]
    unless_null $P5009, fallback778
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5009, $P5010
  fallback778:
    set $P5011, _lex_param_1[1]
    unless_null $P5011, fallback779
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5011, $P5012
  fallback779:
    $P5013 = $P5003."new"($P5009, $P5011, "callmethod" :named("op"), "get_lex_type" :named("name"), $P5008 :named("returns"))
    $P5014 = _lex_param_0."as_post"($P5013)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_231_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1377
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5092 = 'cuid_230_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_233_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_235_1359572548.257' 
    capture_lex $P5092 
    .lex "@children", $P101 
    .lex "$protected", $P102 
    .lex "$procpost", $P103 
    .lex "%handlers", $P104 
    .lex "$catch", $P105 
    .lex "$control", $P106 
    .lex "@other", $P107 
    .lex "$catch_label", $P108 
    .lex "$control_label", $P109 
    .lex "$other_label", $P110 
    .lex "$num_pops", $P111 
    .lex "$skip_handler_label", $P112 
    .lex "$ops", $P113 
    .lex "$reg", $P114 
    .lex "$res_type", $P115 
    .lex "$res_reg", $P116 
    .lex "$orig_alloc", $P117 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    new $P5004, 'Hash'
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P106, $P5006
    new $P5007, 'ResizablePMCArray'
    set $P107, $P5007
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P108, $P5008
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P109, $P5009
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P110, $P5010
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P111, $P5011
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P112, $P5012
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P113, $P5013
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P114, $P5014
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P115, $P5015
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P116, $P5016
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P117, $P5017
.annotate 'line', 1378
    $P5019 = _lex_param_1."list"()
    clone $P5018, $P5019
    set $P101, $P5018
    set $N5001, $P101
    set $N5002, 0
    iseq $I5001, $N5001, $N5002
    unless $I5001 goto if226_end782 
.annotate 'line', 1379
    box $P5020, "The 'handle' op requires at least one child"
    die $P5020
  if226_end782:
.annotate 'line', 1385
    $P5021 = $P101."shift"()
    set $P102, $P5021
.annotate 'line', 1386
    $P5022 = _lex_param_0."as_post"($P102)
    $P5023 = _lex_param_0."coerce"($P5022, "P")
    set $P103, $P5023
    if $P101 goto unless227_end784 
.annotate 'line', 1387
    find_lex $P5024, "RETURN"
    $P5025 = $P5024($P103)
  unless227_end784:
    set $P5026, $P101
    iter $P5028, $P101
  for_next793:
    unless $P5028, for_done795
    shift $P5030, $P5028
    shift $P5031, $P5028
  for_redo794:
    .const 'Sub' $P5029 = 'cuid_230_1359572548.257' 
    capture_lex $P5029
    $P5026 = $P5029($P5030, $P5031)
    goto for_next793
  for_done795:
    box $P5032, 0
    set $P111, $P5032
.annotate 'line', 1422
    nqp_get_sc_object $P5036, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5035, $P5036, "PIRT"
    get_who $P5034, $P5035
    set $P5033, $P5034["Label"]
    unless_null $P5033, fallback796
    nqp_get_sc_object $P5037, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5033, $P5037
  fallback796:
    $P5038 = _lex_param_0."unique"("skip_handler_")
    $P5039 = $P5033."new"($P5038 :named("name"))
    set $P112, $P5039
.annotate 'line', 1423
    nqp_get_sc_object $P5043, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5042, $P5043, "PIRT"
    get_who $P5041, $P5042
    set $P5040, $P5041["Ops"]
    unless_null $P5040, fallback797
    nqp_get_sc_object $P5044, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5040, $P5044
  fallback797:
    $P5045 = $P5040."new"()
    set $P113, $P5045
.annotate 'line', 1424
    find_dynamic_lex $P5046, "$*REGALLOC"
    unless_null $P5046, fallback798
    nqp_get_sc_object $P5049, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5048, $P5049
    set $P5047, $P5048["$REGALLOC"]
    unless_null $P5047, fallback799
    nqp_get_sc_object $P5050, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5047, $P5050
  fallback799:
    unless_null $P5047, vivi_232800
    die "Contextual $*REGALLOC not found"
    box $P5051, "Contextual $*REGALLOC not found"
    set $P5047, $P5051
  vivi_232800:
    set $P5046, $P5047
  fallback798:
    $P5052 = $P5046."fresh_p"()
    set $P114, $P5052
    unless $P105 goto if233_end802 
.annotate 'line', 1425
.annotate 'line', 1426
    nqp_get_sc_object $P5056, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5055, $P5056, "PIRT"
    get_who $P5054, $P5055
    set $P5053, $P5054["Label"]
    unless_null $P5053, fallback803
    nqp_get_sc_object $P5057, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5053, $P5057
  fallback803:
    $P5058 = _lex_param_0."unique"("catch_handler_")
    $P5059 = $P5053."new"($P5058 :named("name"))
    set $P108, $P5059
.annotate 'line', 1427
    $P113."push_pirop"("new", $P114, "'ExceptionHandler'")
.annotate 'line', 1428
    $P113."push_pirop"("set_label", $P114, $P108)
.annotate 'line', 1429
    $P113."push_pirop"("callmethod", "'handle_types_except'", $P114, ".CONTROL_ALL")
.annotate 'line', 1430
    $P113."push_pirop"("push_eh", $P114)
    set $N5004, $P111
    set $N5005, 1
    add $N5003, $N5004, $N5005
    box $P5060, $N5003
    set $P111, $P5060
  if233_end802:
    unless $P106 goto if234_end805 
.annotate 'line', 1433
.annotate 'line', 1434
    nqp_get_sc_object $P5064, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5063, $P5064, "PIRT"
    get_who $P5062, $P5063
    set $P5061, $P5062["Label"]
    unless_null $P5061, fallback806
    nqp_get_sc_object $P5065, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5061, $P5065
  fallback806:
    $P5066 = _lex_param_0."unique"("catch_handler_")
    $P5067 = $P5061."new"($P5066 :named("name"))
    set $P109, $P5067
.annotate 'line', 1435
    $P113."push_pirop"("new", $P114, "'ExceptionHandler'", "[.CONTROL_ALL]")
.annotate 'line', 1436
    $P113."push_pirop"("set_label", $P114, $P109)
.annotate 'line', 1437
    $P113."push_pirop"("push_eh", $P114)
    set $N5007, $P111
    set $N5008, 1
    add $N5006, $N5007, $N5008
    box $P5068, $N5006
    set $P111, $P5068
  if234_end805:
    unless $P107 goto if235_end808 
    .const 'Sub' $P5069 = 'cuid_233_1359572548.257' 
    capture_lex $P5069
    $P5070 = $P5069()
  if235_end808:
.annotate 'line', 1452
    $P5071 = $P103."result"()
    $P5072 = _lex_param_0."infer_type"($P5071)
    set $S5002, $P5072
    downcase $S5001, $S5002
    box $P5073, $S5001
    set $P115, $P5073
.annotate 'line', 1453
    find_dynamic_lex $P5074, "$*REGALLOC"
    unless_null $P5074, fallback814
    nqp_get_sc_object $P5077, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5076, $P5077
    set $P5075, $P5076["$REGALLOC"]
    unless_null $P5075, fallback815
    nqp_get_sc_object $P5078, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5075, $P5078
  fallback815:
    unless_null $P5075, vivi_236816
    die "Contextual $*REGALLOC not found"
    box $P5079, "Contextual $*REGALLOC not found"
    set $P5075, $P5079
  vivi_236816:
    set $P5074, $P5075
  fallback814:
    set $S5004, $P115
    concat $S5003, "fresh_", $S5004
    $P5080 = $P5074.$S5003()
    set $P116, $P5080
.annotate 'line', 1454
    $P113."push"($P103)
.annotate 'line', 1455
    $P5081 = $P103."result"()
    $P113."push_pirop"("set", $P116, $P5081)
  while237_test817:
    set $P5083, $P111
    unless $P111 goto while237_done821 
  while237_redo819:
.annotate 'line', 1456
.annotate 'line', 1457
    $P113."push_pirop"("pop_eh")
    set $N5010, $P111
    set $N5011, 1
    sub $N5009, $N5010, $N5011
    box $P5082, $N5009
    set $P111, $P5082
    set $P5083, $P111
    goto while237_test817 
  while237_done821:
.annotate 'line', 1460
    $P113."push_pirop"("goto", $P112)
    find_dynamic_lex $P5084, "$*REGALLOC"
    unless_null $P5084, fallback822
    nqp_get_sc_object $P5087, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5086, $P5087
    set $P5085, $P5086["$REGALLOC"]
    unless_null $P5085, fallback823
    nqp_get_sc_object $P5088, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5085, $P5088
  fallback823:
    unless_null $P5085, vivi_238824
    die "Contextual $*REGALLOC not found"
    box $P5089, "Contextual $*REGALLOC not found"
    set $P5085, $P5089
  vivi_238824:
    set $P5084, $P5085
  fallback822:
    set $P117, $P5084
    .const 'Sub' $P5090 = 'cuid_235_1359572548.257' 
    capture_lex $P5090
    $P5091 = $P5090()
.annotate 'line', 1513
    $P113."push"($P112)
.annotate 'line', 1514
    $P113."result"($P116)
    .return ($P113) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_230_1359572548.257") :anon :lex :outer("cuid_231_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1396
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$name", _lex_param_0 
    .lex "$handler_code", _lex_param_1 
    find_lex $P5001, "%handler_names"
    set $S5001, _lex_param_0
    exists $I5001, $P5001[$S5001]
    unless $I5001 goto if228_else785 
.annotate 'line', 1397
    find_lex $P5002, "%handlers"
    set $S5002, _lex_param_0
    exists $I5002, $P5002[$S5002]
    unless $I5002 goto if229_end788 
.annotate 'line', 1398
    set $S5004, _lex_param_0
    concat $S5003, "Multiple handlers for ", $S5004
    box $P5003, $S5003
    die $P5003
  if229_end788:
    find_lex $P5004, "%handlers"
    set $S5005, _lex_param_0
    set $P5004[$S5005], _lex_param_1
    set $S5006, _lex_param_0
    iseq $I5003, $S5006, "CATCH"
    unless $I5003 goto if230_else789 
.annotate 'line', 1402
    box $P5005, 1
    store_lex "$catch", $P5005
    set $P5009, $P5005
    goto if230_end790
  if230_else789:
    set $S5007, _lex_param_0
    iseq $I5004, $S5007, "CONTROL"
    unless $I5004 goto if231_else791 
.annotate 'line', 1405
    box $P5006, 1
    store_lex "$control", $P5006
    set $P5008, $P5006
    goto if231_end792
  if231_else791:
.annotate 'line', 1408
    find_lex $P5007, "@other"
    push $P5007, _lex_param_0
    set $P5008, $P5007
  if231_end792:
    set $P5009, $P5008
  if230_end790:
    set $P5011, $P5009
    goto if228_end786
  if228_else785:
.annotate 'line', 1412
    set $S5010, _lex_param_0
    concat $S5009, "Invalid handler type '", $S5010
    concat $S5008, $S5009, "'"
    box $P5010, $S5008
    die $P5010
    set $P5011, $P5010
  if228_end786:
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_233_1359572548.257") :anon :lex :outer("cuid_231_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1440
    .const 'Sub' $P5025 = 'cuid_232_1359572548.257' 
    capture_lex $P5025 
    .lex "@hnames", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_lex $P5005, "@other"
    set $P5002, $P5005
    iter $P5004, $P5005
  for_next810:
    unless $P5004, for_done812
    shift $P5007, $P5004
  for_redo811:
    .const 'Sub' $P5006 = 'cuid_232_1359572548.257' 
    capture_lex $P5006
    $P5002 = $P5006($P5007)
    goto for_next810
  for_done812:
.annotate 'line', 1443
    nqp_get_sc_object $P5011, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5010, $P5011, "PIRT"
    get_who $P5009, $P5010
    set $P5008, $P5009["Label"]
    unless_null $P5008, fallback813
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5008, $P5012
  fallback813:
    find_lex $P5013, "$qastcomp"
    $P5014 = $P5013."unique"("catch_handler_")
    $P5015 = $P5008."new"($P5014 :named("name"))
    store_lex "$other_label", $P5015
.annotate 'line', 1444
    find_lex $P5016, "$ops"
    find_lex $P5017, "$reg"
    join $S5003, ", ", $P101
    concat $S5002, "[", $S5003
    concat $S5001, $S5002, "]"
    $P5016."push_pirop"("new", $P5017, "'ExceptionHandler'", $S5001)
.annotate 'line', 1446
    find_lex $P5018, "$ops"
    find_lex $P5019, "$reg"
    find_lex $P5020, "$other_label"
    $P5018."push_pirop"("set_label", $P5019, $P5020)
.annotate 'line', 1447
    find_lex $P5021, "$ops"
    find_lex $P5022, "$reg"
    $P5021."push_pirop"("push_eh", $P5022)
    find_lex $P5023, "$num_pops"
    set $N5002, $P5023
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5024, $N5001
    store_lex "$num_pops", $P5024
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_232_1359572548.257") :anon :lex :outer("cuid_233_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1442
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "@hnames"
    find_lex $P5003, "%handler_names"
    set $S5001, _lex_param_0
    set $P5002, $P5003[$S5001]
    unless_null $P5002, fallback809
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5002, $P5004
  fallback809:
    push $P5001, $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_235_1359572548.257") :anon :lex :outer("cuid_231_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1464
    .const 'Sub' $P5023 = 'cuid_234_1359572548.257' 
    capture_lex $P5023 
    .const 'Sub' $P5023 = 'cuid_237_1359572548.257' 
    capture_lex $P5023 
    .lex "$*CUR_EXCEPTION", $P101 
    .lex "$*REGALLOC", $P102 
    .lex "&simple_handler", $P103 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_234_1359572548.257' 
    capture_lex $P5003
    set $P103, $P5003
    find_lex $P5004, "$reg"
    set $P101, $P5004
.annotate 'line', 1466
    find_lex $P5005, "$orig_alloc"
    $P5006 = $P5005."handler_allocator"()
    set $P102, $P5006
    find_lex $P5007, "$catch"
    unless $P5007 goto if239_end826 
.annotate 'line', 1478
.annotate 'line', 1479
    find_lex $P5008, "$catch_label"
    find_lex $P5010, "%handlers"
    set $P5009, $P5010["CATCH"]
    unless_null $P5009, fallback827
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5009, $P5011
  fallback827:
    $P5012 = "&simple_handler"($P5008, $P5009)
  if239_end826:
    find_lex $P5013, "$control"
    unless $P5013 goto if240_end829 
.annotate 'line', 1481
.annotate 'line', 1482
    find_lex $P5014, "$control_label"
    find_lex $P5016, "%handlers"
    set $P5015, $P5016["CONTROL"]
    unless_null $P5015, fallback830
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5015, $P5017
  fallback830:
    $P5018 = "&simple_handler"($P5014, $P5015)
  if240_end829:
    find_lex $P5019, "@other"
    set $P5022, $P5019
    unless $P5019 goto if241_end832 
    .const 'Sub' $P5020 = 'cuid_237_1359572548.257' 
    capture_lex $P5020
    $P5021 = $P5020()
    set $P5022, $P5021
  if241_end832:
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "simple_handler" :subid("cuid_234_1359572548.257") :anon :lex :outer("cuid_235_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1467
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$handler_post", $P101 
    .lex "$label", _lex_param_0 
    .lex "$handler_qast", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 1468
    find_lex $P5002, "$qastcomp"
    find_lex $P5003, "$qastcomp"
    $P5004 = $P5003."as_post"(_lex_param_1)
    $P5005 = $P5002."coerce"($P5004, "P")
    set $P101, $P5005
.annotate 'line', 1469
    find_lex $P5006, "$ops"
    $P5006."push"(_lex_param_0)
.annotate 'line', 1470
    find_lex $P5007, "$ops"
    find_lex $P5008, "$reg"
    set $S5003, $P5008
    concat $S5002, ".get_results (", $S5003
    concat $S5001, $S5002, ")"
    $P5007."push_pirop"($S5001)
.annotate 'line', 1471
    find_lex $P5009, "$ops"
    $P5009."push"($P101)
.annotate 'line', 1472
    find_lex $P5010, "$ops"
    find_lex $P5011, "$reg"
    $P5010."push_pirop"("finalize", $P5011)
.annotate 'line', 1473
    find_lex $P5012, "$ops"
    find_lex $P5013, "$reg"
    $P5012."push_pirop"("pop_upto_eh", $P5013)
.annotate 'line', 1474
    find_lex $P5014, "$ops"
    $P5014."push_pirop"("pop_eh")
.annotate 'line', 1475
    find_lex $P5015, "$ops"
    find_lex $P5016, "$res_reg"
    $P5017 = $P101."result"()
    $P5015."push_pirop"("set", $P5016, $P5017)
.annotate 'line', 1476
    find_lex $P5018, "$ops"
    find_lex $P5019, "$skip_handler_label"
    $P5020 = $P5018."push_pirop"("goto", $P5019)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_237_1359572548.257") :anon :lex :outer("cuid_235_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1484
    .const 'Sub' $P5028 = 'cuid_236_1359572548.257' 
    capture_lex $P5028 
    .const 'Sub' $P5028 = 'cuid_238_1359572548.257' 
    capture_lex $P5028 
    .lex "$type_reg", $P101 
    .lex "%type_labels", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
.annotate 'line', 1485
    find_dynamic_lex $P5003, "$*REGALLOC"
    unless_null $P5003, fallback833
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$REGALLOC"]
    unless_null $P5004, fallback834
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5007
  fallback834:
    unless_null $P5004, vivi_242835
    die "Contextual $*REGALLOC not found"
    box $P5008, "Contextual $*REGALLOC not found"
    set $P5004, $P5008
  vivi_242835:
    set $P5003, $P5004
  fallback833:
    $P5009 = $P5003."fresh_i"()
    set $P101, $P5009
.annotate 'line', 1486
    find_lex $P5010, "$ops"
    find_lex $P5011, "$other_label"
    $P5010."push"($P5011)
.annotate 'line', 1487
    find_lex $P5012, "$ops"
    find_lex $P5013, "$reg"
    set $S5003, $P5013
    concat $S5002, ".get_results (", $S5003
    concat $S5001, $S5002, ")"
    $P5012."push_pirop"($S5001)
.annotate 'line', 1491
    find_lex $P5014, "$ops"
    find_lex $P5015, "$reg"
    set $S5005, $P5015
    concat $S5004, $S5005, "[\"type\"]"
    $P5014."push_pirop"("set", $P101, $S5004)
    find_lex $P5019, "@other"
    set $P5016, $P5019
    iter $P5018, $P5019
  for_next838:
    unless $P5018, for_done840
    shift $P5021, $P5018
  for_redo839:
    .const 'Sub' $P5020 = 'cuid_236_1359572548.257' 
    capture_lex $P5020
    $P5016 = $P5020($P5021)
    goto for_next838
  for_done840:
    find_lex $P5025, "@other"
    set $P5022, $P5025
    iter $P5024, $P5025
  for_next843:
    unless $P5024, for_done845
    shift $P5027, $P5024
  for_redo844:
    .const 'Sub' $P5026 = 'cuid_238_1359572548.257' 
    capture_lex $P5026
    $P5022 = $P5026($P5027)
    goto for_next843
  for_done845:
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_236_1359572548.257") :anon :lex :outer("cuid_237_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1492
    .param pmc _lex_param_0 
    .lex "$lbl", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 1493
    nqp_get_sc_object $P5005, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5004, $P5005, "PIRT"
    get_who $P5003, $P5004
    set $P5002, $P5003["Label"]
    unless_null $P5002, fallback836
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5002, $P5006
  fallback836:
    find_lex $P5007, "$qastcomp"
    $P5008 = $P5007."unique"("handle_type_")
    $P5009 = $P5002."new"($P5008 :named("name"))
    set $P101, $P5009
.annotate 'line', 1494
    find_lex $P5010, "$ops"
    find_lex $P5011, "$type_reg"
    find_lex $P5013, "%handler_names"
    set $S5001, _lex_param_0
    set $P5012, $P5013[$S5001]
    unless_null $P5012, fallback837
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5012, $P5014
  fallback837:
    $P5010."push_pirop"("eq", $P5011, $P5012, $P101)
    find_lex $P5015, "%type_labels"
    set $S5002, _lex_param_0
    set $P5015[$S5002], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_238_1359572548.257") :anon :lex :outer("cuid_237_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1499
    .param pmc _lex_param_0 
    .lex "$handler_post", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 1500
    find_lex $P5002, "$qastcomp"
    find_lex $P5003, "$qastcomp"
    find_lex $P5005, "%handlers"
    set $S5001, _lex_param_0
    set $P5004, $P5005[$S5001]
    unless_null $P5004, fallback841
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5006
  fallback841:
    $P5007 = $P5003."as_post"($P5004)
    $P5008 = $P5002."coerce"($P5007, "P")
    set $P101, $P5008
.annotate 'line', 1501
    find_lex $P5009, "$ops"
    find_lex $P5011, "%type_labels"
    set $S5002, _lex_param_0
    set $P5010, $P5011[$S5002]
    unless_null $P5010, fallback842
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5010, $P5012
  fallback842:
    $P5009."push"($P5010)
.annotate 'line', 1502
    find_lex $P5013, "$ops"
    $P5013."push"($P101)
.annotate 'line', 1503
    find_lex $P5014, "$ops"
    find_lex $P5015, "$reg"
    $P5014."push_pirop"("finalize", $P5015)
.annotate 'line', 1504
    find_lex $P5016, "$ops"
    find_lex $P5017, "$reg"
    $P5016."push_pirop"("pop_upto_eh", $P5017)
.annotate 'line', 1505
    find_lex $P5018, "$ops"
    $P5018."push_pirop"("pop_eh")
.annotate 'line', 1506
    find_lex $P5019, "$ops"
    find_lex $P5020, "$res_reg"
    $P5021 = $P101."result"()
    $P5019."push_pirop"("set", $P5020, $P5021)
.annotate 'line', 1507
    find_lex $P5022, "$ops"
    find_lex $P5023, "$skip_handler_label"
    $P5024 = $P5022."push_pirop"("goto", $P5023)
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_239_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1518
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$exc_reg", $P101 
    .lex "$ops", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    new $P5009, 'ExceptionHandler'
    set_label $P5009, catch_handler_245851
    $P5009.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5009
    find_dynamic_lex $P5003, "$*CUR_EXCEPTION"
    unless_null $P5003, fallback847
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$CUR_EXCEPTION"]
    unless_null $P5004, fallback848
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5007
  fallback848:
    unless_null $P5004, vivi_243849
    die "Contextual $*CUR_EXCEPTION not found"
    box $P5008, "Contextual $*CUR_EXCEPTION not found"
    set $P5004, $P5008
  vivi_243849:
    set $P5003, $P5004
  fallback847:
    set $P5010, $P5003
    pop_eh 
    goto skip_handler_244850
  catch_handler_245851:
    .get_results ($P5009) 
    set $I10001, 1
    set $P5009["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    finalize $P5009
    pop_upto_eh $P5009
    pop_eh 
    set $P5010, $P10001
    goto skip_handler_244850
  skip_handler_244850:
    set $P101, $P5010
    if $P101 goto unless246_end853 
.annotate 'line', 1520
    box $P5011, "Can only use 'exception' op in the context of an exception handler"
    die $P5011
  unless246_end853:
.annotate 'line', 1523
    nqp_get_sc_object $P5015, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5014, $P5015, "PIRT"
    get_who $P5013, $P5014
    set $P5012, $P5013["Ops"]
    unless_null $P5012, fallback854
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5012, $P5016
  fallback854:
    $P5017 = $P5012."new"()
    set $P102, $P5017
.annotate 'line', 1524
    $P102."result"($P101)
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_240_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1527
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$exc", $P101 
    .lex "$reg", $P102 
    .lex "$ops", $P103 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
.annotate 'line', 1528
    $P5004 = _lex_param_1."list"()
    set $N5001, $P5004
    set $N5002, 1
    isne $I5001, $N5001, $N5002
    unless $I5001 goto if247_end857 
    box $P5005, "The 'getpayload' op expects one child"
    die $P5005
  if247_end857:
.annotate 'line', 1531
    set $P5006, _lex_param_1[0]
    unless_null $P5006, fallback858
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5006, $P5007
  fallback858:
    $P5008 = _lex_param_0."as_post"($P5006)
    $P5009 = _lex_param_0."coerce"($P5008, "P")
    set $P101, $P5009
.annotate 'line', 1532
    find_dynamic_lex $P5010, "$*REGALLOC"
    unless_null $P5010, fallback859
    nqp_get_sc_object $P5013, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$REGALLOC"]
    unless_null $P5011, fallback860
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5011, $P5014
  fallback860:
    unless_null $P5011, vivi_248861
    die "Contextual $*REGALLOC not found"
    box $P5015, "Contextual $*REGALLOC not found"
    set $P5011, $P5015
  vivi_248861:
    set $P5010, $P5011
  fallback859:
    $P5016 = $P5010."fresh_p"()
    set $P102, $P5016
.annotate 'line', 1533
    nqp_get_sc_object $P5020, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5019, $P5020, "PIRT"
    get_who $P5018, $P5019
    set $P5017, $P5018["Ops"]
    unless_null $P5017, fallback862
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5017, $P5021
  fallback862:
    $P5022 = $P5017."new"()
    set $P103, $P5022
.annotate 'line', 1534
    $P103."push"($P101)
.annotate 'line', 1535
    $P5023 = $P101."result"()
    $P103."push_pirop"("getattribute", $P102, $P5023, "\"payload\"")
.annotate 'line', 1536
    $P103."result"($P102)
    .return ($P103) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_241_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1539
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$exc", $P101 
    .lex "$payload", $P102 
    .lex "$ops", $P103 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
.annotate 'line', 1540
    $P5004 = _lex_param_1."list"()
    set $N5001, $P5004
    set $N5002, 2
    isne $I5001, $N5001, $N5002
    unless $I5001 goto if249_end865 
    box $P5005, "The 'setpayload' op expects two children"
    die $P5005
  if249_end865:
.annotate 'line', 1543
    set $P5006, _lex_param_1[0]
    unless_null $P5006, fallback866
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5006, $P5007
  fallback866:
    $P5008 = _lex_param_0."as_post"($P5006)
    $P5009 = _lex_param_0."coerce"($P5008, "P")
    set $P101, $P5009
.annotate 'line', 1544
    set $P5010, _lex_param_1[1]
    unless_null $P5010, fallback867
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5010, $P5011
  fallback867:
    $P5012 = _lex_param_0."as_post"($P5010)
    $P5013 = _lex_param_0."coerce"($P5012, "P")
    set $P102, $P5013
.annotate 'line', 1545
    nqp_get_sc_object $P5017, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5016, $P5017, "PIRT"
    get_who $P5015, $P5016
    set $P5014, $P5015["Ops"]
    unless_null $P5014, fallback868
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5014, $P5018
  fallback868:
    $P5019 = $P5014."new"()
    set $P103, $P5019
.annotate 'line', 1546
    $P103."push_pirop"("setattribute", $P101, "\"payload\"", $P102)
.annotate 'line', 1547
    $P5020 = $P102."result"()
    $P103."result"($P5020)
    .return ($P103) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_242_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1550
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$exc", $P101 
    .lex "$pmc", $P102 
    .lex "$reg", $P103 
    .lex "$ops", $P104 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P104, $P5004
.annotate 'line', 1551
    $P5005 = _lex_param_1."list"()
    set $N5001, $P5005
    set $N5002, 1
    isne $I5001, $N5001, $N5002
    unless $I5001 goto if250_end871 
    box $P5006, "The 'getmessage' op expects one child"
    die $P5006
  if250_end871:
.annotate 'line', 1554
    set $P5007, _lex_param_1[0]
    unless_null $P5007, fallback872
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5007, $P5008
  fallback872:
    $P5009 = _lex_param_0."as_post"($P5007)
    $P5010 = _lex_param_0."coerce"($P5009, "P")
    set $P101, $P5010
.annotate 'line', 1555
    find_dynamic_lex $P5011, "$*REGALLOC"
    unless_null $P5011, fallback873
    nqp_get_sc_object $P5014, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$REGALLOC"]
    unless_null $P5012, fallback874
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5012, $P5015
  fallback874:
    unless_null $P5012, vivi_251875
    die "Contextual $*REGALLOC not found"
    box $P5016, "Contextual $*REGALLOC not found"
    set $P5012, $P5016
  vivi_251875:
    set $P5011, $P5012
  fallback873:
    $P5017 = $P5011."fresh_p"()
    set $P102, $P5017
.annotate 'line', 1556
    find_dynamic_lex $P5018, "$*REGALLOC"
    unless_null $P5018, fallback876
    nqp_get_sc_object $P5021, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$REGALLOC"]
    unless_null $P5019, fallback877
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5019, $P5022
  fallback877:
    unless_null $P5019, vivi_252878
    die "Contextual $*REGALLOC not found"
    box $P5023, "Contextual $*REGALLOC not found"
    set $P5019, $P5023
  vivi_252878:
    set $P5018, $P5019
  fallback876:
    $P5024 = $P5018."fresh_s"()
    set $P103, $P5024
.annotate 'line', 1557
    nqp_get_sc_object $P5028, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5027, $P5028, "PIRT"
    get_who $P5026, $P5027
    set $P5025, $P5026["Ops"]
    unless_null $P5025, fallback879
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5025, $P5029
  fallback879:
    $P5030 = $P5025."new"()
    set $P104, $P5030
.annotate 'line', 1558
    $P104."push"($P101)
.annotate 'line', 1559
    $P5031 = $P101."result"()
    $P104."push_pirop"("getattribute", $P102, $P5031, "\"message\"")
.annotate 'line', 1560
    $P104."push_pirop"("set", $P103, $P102)
.annotate 'line', 1561
    $P104."result"($P103)
    .return ($P104) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_243_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1564
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$exc", $P101 
    .lex "$message", $P102 
    .lex "$pmc", $P103 
    .lex "$ops", $P104 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P104, $P5004
.annotate 'line', 1565
    $P5005 = _lex_param_1."list"()
    set $N5001, $P5005
    set $N5002, 2
    isne $I5001, $N5001, $N5002
    unless $I5001 goto if253_end882 
    box $P5006, "The 'setmessage' op expects two children"
    die $P5006
  if253_end882:
.annotate 'line', 1568
    set $P5007, _lex_param_1[0]
    unless_null $P5007, fallback883
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5007, $P5008
  fallback883:
    $P5009 = _lex_param_0."as_post"($P5007)
    $P5010 = _lex_param_0."coerce"($P5009, "P")
    set $P101, $P5010
.annotate 'line', 1569
    set $P5011, _lex_param_1[1]
    unless_null $P5011, fallback884
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5011, $P5012
  fallback884:
    $P5013 = _lex_param_0."as_post"($P5011)
    $P5014 = _lex_param_0."coerce"($P5013, "S")
    set $P102, $P5014
.annotate 'line', 1570
    find_dynamic_lex $P5015, "$*REGALLOC"
    unless_null $P5015, fallback885
    nqp_get_sc_object $P5018, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$REGALLOC"]
    unless_null $P5016, fallback886
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5016, $P5019
  fallback886:
    unless_null $P5016, vivi_254887
    die "Contextual $*REGALLOC not found"
    box $P5020, "Contextual $*REGALLOC not found"
    set $P5016, $P5020
  vivi_254887:
    set $P5015, $P5016
  fallback885:
    $P5021 = $P5015."fresh_p"()
    set $P103, $P5021
.annotate 'line', 1571
    nqp_get_sc_object $P5025, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5024, $P5025, "PIRT"
    get_who $P5023, $P5024
    set $P5022, $P5023["Ops"]
    unless_null $P5022, fallback888
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5022, $P5026
  fallback888:
    $P5027 = $P5022."new"()
    set $P104, $P5027
.annotate 'line', 1572
    $P104."push"($P101)
.annotate 'line', 1573
    $P104."push"($P102)
.annotate 'line', 1574
    $P104."push_pirop"("box", $P103, $P102)
.annotate 'line', 1575
    $P104."push_pirop"("setattribute", $P101, "\"message\"", $P103)
.annotate 'line', 1576
    $P5028 = $P102."result"()
    $P104."result"($P5028)
    .return ($P104) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_244_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1579
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$reg", $P101 
    .lex "$ops", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 1580
    $P5003 = _lex_param_1."list"()
    set $N5001, $P5003
    set $N5002, 0
    isne $I5001, $N5001, $N5002
    unless $I5001 goto if255_end891 
    box $P5004, "The 'newexception' op expects no children"
    die $P5004
  if255_end891:
.annotate 'line', 1583
    find_dynamic_lex $P5005, "$*REGALLOC"
    unless_null $P5005, fallback892
    nqp_get_sc_object $P5008, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$REGALLOC"]
    unless_null $P5006, fallback893
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5006, $P5009
  fallback893:
    unless_null $P5006, vivi_256894
    die "Contextual $*REGALLOC not found"
    box $P5010, "Contextual $*REGALLOC not found"
    set $P5006, $P5010
  vivi_256894:
    set $P5005, $P5006
  fallback892:
    $P5011 = $P5005."fresh_p"()
    set $P101, $P5011
.annotate 'line', 1584
    nqp_get_sc_object $P5015, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5014, $P5015, "PIRT"
    get_who $P5013, $P5014
    set $P5012, $P5013["Ops"]
    unless_null $P5012, fallback895
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5012, $P5016
  fallback895:
    $P5017 = $P5012."new"()
    set $P102, $P5017
.annotate 'line', 1585
    $P102."push_pirop"("new", $P101, "[\"Exception\"]")
.annotate 'line', 1586
    $P102."result"($P101)
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_246_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1600
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5008 = 'cuid_245_1359572548.257' 
    capture_lex $P5008 
    .lex "$name", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 1601
    $P5002 = _lex_param_1."name"()
    set $P101, $P5002
    find_lex $P5003, "%control_map"
    set $S5001, $P101
    exists $I5001, $P5003[$S5001]
    unless $I5001 goto if257_else901 
    .const 'Sub' $P5004 = 'cuid_245_1359572548.257' 
    capture_lex $P5004
    $P5005 = $P5004()
    set $P5007, $P5005
    goto if257_end902
  if257_else901:
.annotate 'line', 1607
    set $S5004, $P101
    concat $S5003, "Unknown control exception type '", $S5004
    concat $S5002, $S5003, "'"
    box $P5006, $S5002
    die $P5006
    set $P5007, $P5006
  if257_end902:
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_245_1359572548.257") :anon :lex :outer("cuid_246_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1602
    .lex "$ops", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 1603
    nqp_get_sc_object $P5005, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5004, $P5005, "PIRT"
    get_who $P5003, $P5004
    set $P5002, $P5003["Ops"]
    unless_null $P5002, fallback903
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5002, $P5006
  fallback903:
    $P5007 = $P5002."new"("0" :named("result"))
    set $P101, $P5007
.annotate 'line', 1604
    find_lex $P5009, "%control_map"
    find_lex $P5010, "$name"
    set $S5001, $P5010
    set $P5008, $P5009[$S5001]
    unless_null $P5008, fallback904
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5008, $P5011
  fallback904:
    $P101."push_pirop"("die", "0", $P5008)
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_248_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1613
    .param pmc _lex_param_0 
    .const 'Sub' $P5009 = 'cuid_247_1359572548.257' 
    capture_lex $P5009 
    .lex "$_", _lex_param_0 
.annotate 'line', 1614
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Operations"]
    unless_null $P5001, fallback905
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5005
  fallback905:
    .const 'Sub' $P5007 = 'cuid_247_1359572548.257' 
    capture_lex $P5007
    newclosure $P5006, $P5007
    $P5008 = $P5001."add_hll_box"("nqp", _lex_param_0, $P5006)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_247_1359572548.257") :anon :lex :outer("cuid_248_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1614
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$reg", $P101 
    .lex "$ops", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$post", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 1615
    find_dynamic_lex $P5003, "$*REGALLOC"
    unless_null $P5003, fallback906
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$REGALLOC"]
    unless_null $P5004, fallback907
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5007
  fallback907:
    unless_null $P5004, vivi_258908
    die "Contextual $*REGALLOC not found"
    box $P5008, "Contextual $*REGALLOC not found"
    set $P5004, $P5008
  vivi_258908:
    set $P5003, $P5004
  fallback906:
    $P5009 = $P5003."fresh_p"()
    set $P101, $P5009
.annotate 'line', 1616
    nqp_get_sc_object $P5013, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5012, $P5013, "PIRT"
    get_who $P5011, $P5012
    set $P5010, $P5011["Ops"]
    unless_null $P5010, fallback909
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5010, $P5014
  fallback909:
    $P5015 = $P5010."new"()
    set $P102, $P5015
.annotate 'line', 1617
    $P102."push"(_lex_param_1)
.annotate 'line', 1618
    $P102."push_pirop"("box", $P101, _lex_param_1)
.annotate 'line', 1619
    $P102."result"($P101)
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_249_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1623
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$reg", $P101 
    .lex "$ops", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$post", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 1624
    find_dynamic_lex $P5003, "$*REGALLOC"
    unless_null $P5003, fallback914
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$REGALLOC"]
    unless_null $P5004, fallback915
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5007
  fallback915:
    unless_null $P5004, vivi_259916
    die "Contextual $*REGALLOC not found"
    box $P5008, "Contextual $*REGALLOC not found"
    set $P5004, $P5008
  vivi_259916:
    set $P5003, $P5004
  fallback914:
    $P5009 = $P5003."fresh_i"()
    set $P101, $P5009
.annotate 'line', 1625
    nqp_get_sc_object $P5013, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5012, $P5013, "PIRT"
    get_who $P5011, $P5012
    set $P5010, $P5011["Ops"]
    unless_null $P5010, fallback917
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5010, $P5014
  fallback917:
    $P5015 = $P5010."new"()
    set $P102, $P5015
.annotate 'line', 1626
    $P102."push"(_lex_param_1)
.annotate 'line', 1627
    $P102."push_pirop"("set", $P101, _lex_param_1)
.annotate 'line', 1628
    $P102."result"($P101)
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_250_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1631
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$reg", $P101 
    .lex "$ops", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$post", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 1632
    find_dynamic_lex $P5003, "$*REGALLOC"
    unless_null $P5003, fallback919
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$REGALLOC"]
    unless_null $P5004, fallback920
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5007
  fallback920:
    unless_null $P5004, vivi_260921
    die "Contextual $*REGALLOC not found"
    box $P5008, "Contextual $*REGALLOC not found"
    set $P5004, $P5008
  vivi_260921:
    set $P5003, $P5004
  fallback919:
    $P5009 = $P5003."fresh_n"()
    set $P101, $P5009
.annotate 'line', 1633
    nqp_get_sc_object $P5013, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5012, $P5013, "PIRT"
    get_who $P5011, $P5012
    set $P5010, $P5011["Ops"]
    unless_null $P5010, fallback922
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5010, $P5014
  fallback922:
    $P5015 = $P5010."new"()
    set $P102, $P5015
.annotate 'line', 1634
    $P102."push"(_lex_param_1)
.annotate 'line', 1635
    $P102."push_pirop"("set", $P101, _lex_param_1)
.annotate 'line', 1636
    $P102."result"($P101)
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_251_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1639
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$reg", $P101 
    .lex "$ops", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$post", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 1640
    find_dynamic_lex $P5003, "$*REGALLOC"
    unless_null $P5003, fallback924
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$REGALLOC"]
    unless_null $P5004, fallback925
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5007
  fallback925:
    unless_null $P5004, vivi_261926
    die "Contextual $*REGALLOC not found"
    box $P5008, "Contextual $*REGALLOC not found"
    set $P5004, $P5008
  vivi_261926:
    set $P5003, $P5004
  fallback924:
    $P5009 = $P5003."fresh_s"()
    set $P101, $P5009
.annotate 'line', 1641
    nqp_get_sc_object $P5013, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5012, $P5013, "PIRT"
    get_who $P5011, $P5012
    set $P5010, $P5011["Ops"]
    unless_null $P5010, fallback927
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5010, $P5014
  fallback927:
    $P5015 = $P5010."new"()
    set $P102, $P5015
.annotate 'line', 1642
    $P102."push"(_lex_param_1)
.annotate 'line', 1643
    $P102."push_pirop"("set", $P101, _lex_param_1)
.annotate 'line', 1644
    $P102."result"($P101)
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_252_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1762
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "@operands", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 1763
    $P5002 = _lex_param_1."list"()
    set $P101, $P5002
.annotate 'line', 1764
    set $N5001, $P101
    set $N5002, 2
    iseq $I5001, $N5001, $N5002
    unless $I5001 goto if262_else1024 
.annotate 'line', 1765
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5005, $P5006, "QAST"
    get_who $P5004, $P5005
    set $P5003, $P5004["Op"]
    unless_null $P5003, fallback1026
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5007
  fallback1026:
    $P5008 = $P5003."new"($P101 :flat, "substr2" :named("op"))
    set $P5015, $P5008
    goto if262_end1025
  if262_else1024:
.annotate 'line', 1766
    nqp_get_sc_object $P5012, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback1027
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5009, $P5013
  fallback1027:
    $P5014 = $P5009."new"($P101 :flat, "substr3" :named("op"))
    set $P5015, $P5014
  if262_end1025:
    $P5016 = _lex_param_0."as_post"($P5015)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_253_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1772
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "@operands", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 1773
    $P5002 = _lex_param_1."list"()
    set $P101, $P5002
.annotate 'line', 1774
    set $N5001, $P101
    set $N5002, 1
    iseq $I5001, $N5001, $N5002
    unless $I5001 goto if263_else1031 
.annotate 'line', 1775
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5005, $P5006, "QAST"
    get_who $P5004, $P5005
    set $P5003, $P5004["Op"]
    unless_null $P5003, fallback1033
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5007
  fallback1033:
    $P5008 = $P5003."new"($P101 :flat, "ordfirst" :named("op"))
    set $P5015, $P5008
    goto if263_end1032
  if263_else1031:
.annotate 'line', 1776
    nqp_get_sc_object $P5012, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback1034
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5009, $P5013
  fallback1034:
    $P5014 = $P5009."new"($P101 :flat, "ordat" :named("op"))
    set $P5015, $P5014
  if263_end1032:
    $P5016 = _lex_param_0."as_post"($P5015)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_254_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1781
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "@operands", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 1782
    $P5002 = _lex_param_1."list"()
    set $P101, $P5002
.annotate 'line', 1783
    set $N5001, $P101
    set $N5002, 2
    iseq $I5001, $N5001, $N5002
    unless $I5001 goto if264_else1037 
.annotate 'line', 1784
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5005, $P5006, "QAST"
    get_who $P5004, $P5005
    set $P5003, $P5004["Op"]
    unless_null $P5003, fallback1039
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5007
  fallback1039:
    nqp_get_sc_object $P5011, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["IVal"]
    unless_null $P5008, fallback1040
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5008, $P5012
  fallback1040:
    $P5013 = $P5008."new"(0 :named("value"))
    $P5014 = $P5003."new"($P101 :flat, $P5013, "indexfrom" :named("op"))
    set $P5021, $P5014
    goto if264_end1038
  if264_else1037:
.annotate 'line', 1785
    nqp_get_sc_object $P5018, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback1041
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5015, $P5019
  fallback1041:
    $P5020 = $P5015."new"($P101 :flat, "indexfrom" :named("op"))
    set $P5021, $P5020
  if264_end1038:
    $P5022 = _lex_param_0."as_post"($P5021)
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_255_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1789
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "@operands", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 1790
    $P5002 = _lex_param_1."list"()
    set $P101, $P5002
.annotate 'line', 1791
    set $N5001, $P101
    set $N5002, 2
    iseq $I5001, $N5001, $N5002
    unless $I5001 goto if265_else1045 
.annotate 'line', 1792
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5005, $P5006, "QAST"
    get_who $P5004, $P5005
    set $P5003, $P5004["Op"]
    unless_null $P5003, fallback1047
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5007
  fallback1047:
    $P5008 = $P5003."new"($P101 :flat, "rindexfromend" :named("op"))
    set $P5015, $P5008
    goto if265_end1046
  if265_else1045:
.annotate 'line', 1793
    nqp_get_sc_object $P5012, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback1048
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5009, $P5013
  fallback1048:
    $P5014 = $P5009."new"($P101 :flat, "rindexfrom" :named("op"))
    set $P5015, $P5014
  if265_end1046:
    $P5016 = _lex_param_0."as_post"($P5015)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_256_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1889
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1890
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback1131
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5005
  fallback1131:
    set $P5006, _lex_param_1[0]
    unless_null $P5006, fallback1132
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5006, $P5007
  fallback1132:
    $P5008 = $P5001."new"($P5006, "callmethod" :named("op"), "key" :named("name"))
    $P5009 = _lex_param_0."as_post"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_257_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1892
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1893
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback1134
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5005
  fallback1134:
    set $P5006, _lex_param_1[0]
    unless_null $P5006, fallback1135
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5006, $P5007
  fallback1135:
    $P5008 = $P5001."new"($P5006, "callmethod" :named("op"), "value" :named("name"))
    $P5009 = _lex_param_0."as_post"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_258_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 1969
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$cuid", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    $P5002 = _lex_param_1."list"()
    set $N5001, $P5002
    set $N5002, 3
    isne $I5001, $N5001, $N5002
    unless $I5001 goto if266_end1204 
.annotate 'line', 1970
    box $P5003, "setstaticlex requires three operands"
    die $P5003
  if266_end1204:
    set $P5004, _lex_param_1[0]
    unless_null $P5004, fallback1207
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5005
  fallback1207:
    nqp_get_sc_object $P5009, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Block"]
    unless_null $P5006, fallback1208
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5006, $P5010
  fallback1208:
    type_check $I5002, $P5004, $P5006
    if $I5002 goto unless267_end1206 
.annotate 'line', 1973
    box $P5011, "First operand to setstaticlex must be a QAST::Block"
    die $P5011
  unless267_end1206:
.annotate 'line', 1976
    set $P5012, _lex_param_1[0]
    unless_null $P5012, fallback1209
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5012, $P5013
  fallback1209:
    $P5014 = $P5012."cuid"()
    set $P101, $P5014
.annotate 'line', 1977
    nqp_get_sc_object $P5018, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Stmts"]
    unless_null $P5015, fallback1210
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5015, $P5019
  fallback1210:
.annotate 'line', 1978
    nqp_get_sc_object $P5023, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback1211
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5020, $P5024
  fallback1211:
.annotate 'line', 1980
    nqp_get_sc_object $P5028, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["VM"]
    unless_null $P5025, fallback1212
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5025, $P5029
  fallback1212:
    set $S5003, $P101
    concat $S5002, "    .const \"LexInfo\" %r = \"", $S5003
    concat $S5001, $S5002, "\""
    $P5030 = $P5025."new"($S5001 :named("pir"))
    set $P5031, _lex_param_1[1]
    unless_null $P5031, fallback1213
    nqp_get_sc_object $P5032, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5031, $P5032
  fallback1213:
    set $P5033, _lex_param_1[2]
    unless_null $P5033, fallback1214
    nqp_get_sc_object $P5034, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5033, $P5034
  fallback1214:
    $P5035 = $P5020."new"($P5030, $P5031, $P5033, "callmethod" :named("op"), "set_static_lexpad_value" :named("name"))
.annotate 'line', 1988
    nqp_get_sc_object $P5039, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback1215
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5036, $P5040
  fallback1215:
.annotate 'line', 1990
    nqp_get_sc_object $P5044, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["VM"]
    unless_null $P5041, fallback1216
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5041, $P5045
  fallback1216:
    set $S5006, $P101
    concat $S5005, "    .const \"LexInfo\" %r = \"", $S5006
    concat $S5004, $S5005, "\""
    $P5046 = $P5041."new"($S5004 :named("pir"))
    $P5047 = $P5036."new"($P5046, "callmethod" :named("op"), "finish_static_lexpad" :named("name"))
    $P5048 = $P5015."new"($P5035, $P5047)
    $P5049 = _lex_param_0."as_post"($P5048)
    .return ($P5049) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_259_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2003
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 2004
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback1223
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5005
  fallback1223:
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 4
    set $P5007, _lex_param_1[0]
    unless_null $P5007, fallback1224
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5007, $P5008
  fallback1224:
    $P5009 = $P5001."new"($P5007, "callmethod" :named("op"), "handle" :named("name"), $P5006 :named("returns"))
    $P5010 = _lex_param_0."as_post"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_260_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2009
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 2010
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback1226
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5005
  fallback1226:
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 2
    set $P5007, _lex_param_1[0]
    unless_null $P5007, fallback1227
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5007, $P5008
  fallback1227:
    set $P5009, _lex_param_1[1]
    unless_null $P5009, fallback1228
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5009, $P5010
  fallback1228:
    $P5011 = $P5001."new"($P5007, $P5009, "callmethod" :named("op"), "slot_index_for" :named("name"), $P5006 :named("returns"))
    $P5012 = _lex_param_0."as_post"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_261_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2015
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 2016
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback1230
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5005
  fallback1230:
    set $P5006, _lex_param_1[0]
    unless_null $P5006, fallback1231
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5006, $P5007
  fallback1231:
    set $P5008, _lex_param_1[1]
    unless_null $P5008, fallback1232
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5008, $P5009
  fallback1232:
    $P5010 = $P5001."new"($P5006, $P5008, "callmethod" :named("op"), "set_description" :named("name"))
    $P5011 = _lex_param_0."as_post"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_262_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2021
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 2022
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback1234
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5005
  fallback1234:
    set $P5006, _lex_param_1[0]
    unless_null $P5006, fallback1235
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5006, $P5007
  fallback1235:
    $P5008 = $P5001."new"($P5006, "callmethod" :named("op"), "elems" :named("name"))
    $P5009 = _lex_param_0."as_post"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_264_1359572548.257") :anon :lex :outer("cuid_145_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2045
    .const 'Sub' $P5092 = 'cuid_263_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_265_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_267_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_268_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_269_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_87_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_88_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_89_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_90_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_91_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_92_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_93_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_94_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_95_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_96_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_97_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_98_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_99_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_100_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_101_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_102_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_103_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_104_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_105_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_106_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_107_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_108_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_109_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_110_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_111_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_112_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_113_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_114_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_115_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_116_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_117_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_118_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_119_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_120_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_121_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_122_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_123_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_124_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_125_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_126_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_127_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_128_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_129_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_130_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_131_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_132_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_133_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_134_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_135_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_136_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_137_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_138_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_139_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_140_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_141_1359572548.257' 
    capture_lex $P5092 
    .const 'Sub' $P5092 = 'cuid_142_1359572548.257' 
    capture_lex $P5092 
    .lex "RegAlloc", $P101 
    .lex "BlockInfo", $P102 
    .lex "@prim_to_reg", $P103 
    .lex "&type_to_register_type", $P104 
    .lex "@prim_to_lookup_name", $P105 
    .lex "&type_to_lookup_name", $P106 
    .lex "%hll_force_return_boxing", $P107 
    .lex "&want", $P108 
    .lex "%cclass_code", $P109 
    .lex "$?PACKAGE", $P110 
    .lex "$?CLASS", $P111 
    new $P5001, 'ResizablePMCArray'
    set $P103, $P5001
    .const 'Sub' $P5002 = 'cuid_263_1359572548.257' 
    capture_lex $P5002
    set $P104, $P5002
    new $P5003, 'ResizablePMCArray'
    set $P105, $P5003
    .const 'Sub' $P5004 = 'cuid_265_1359572548.257' 
    capture_lex $P5004
    set $P106, $P5004
    new $P5005, 'Hash'
    set $P107, $P5005
    .const 'Sub' $P5006 = 'cuid_267_1359572548.257' 
    capture_lex $P5006
    set $P108, $P5006
    new $P5007, 'Hash'
    set $P109, $P5007
.annotate 'line', 2224
    get_who $P5008, $P110
    box $P5009, 10
    set $P5008["$serno"], $P5009

            $P0 = get_root_global ['parrot';'QAST'], 'Compiler'
            unless null $P0 goto have_qastcomp
            $P0 = find_lex '$?CLASS'
            set_root_global ['parrot';'QAST'], 'Compiler', $P0
            compreg 'QAST', $P0
          have_qastcomp:
        
.annotate 'line', 3294
    box $P5010, ".CCLASS_ANY"
    set $P109["."], $P5010
    box $P5011, ".CCLASS_NUMERIC"
    set $P109["d"], $P5011
    box $P5012, ".CCLASS_WHITESPACE"
    set $P109["s"], $P5012
    box $P5013, ".CCLASS_WORD"
    set $P109["w"], $P5013
    box $P5014, ".CCLASS_NEWLINE"
    set $P109["n"], $P5014
    box $P5015, ".CCLASS_NEWLINE"
    set $P109["nl"], $P5015
.annotate 'line', 2045
    .const 'Sub' $P5016 = 'cuid_268_1359572548.257' 
    capture_lex $P5016
    $P5017 = $P5016()
    .const 'Sub' $P5018 = 'cuid_269_1359572548.257' 
    capture_lex $P5018
    $P5019 = $P5018()
    .const 'Sub' $P5026 = 'cuid_87_1359572548.257' 
    capture_lex $P5026
    new $P5027, 'ResizablePMCArray'
    box $P5028, "P"
    push $P5027, $P5028
    box $P5029, "I"
    push $P5027, $P5029
    box $P5030, "N"
    push $P5027, $P5030
    box $P5031, "S"
    push $P5027, $P5031
    set $P103, $P5027
    .const 'Sub' $P5032 = 'cuid_88_1359572548.257' 
    capture_lex $P5032
    new $P5033, 'ResizablePMCArray'
    box $P5034, "obj"
    push $P5033, $P5034
    box $P5035, "int"
    push $P5033, $P5035
    box $P5036, "num"
    push $P5033, $P5036
    box $P5037, "str"
    push $P5033, $P5037
    set $P105, $P5033
    .const 'Sub' $P5038 = 'cuid_89_1359572548.257' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_90_1359572548.257' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_91_1359572548.257' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_92_1359572548.257' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_93_1359572548.257' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_94_1359572548.257' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_95_1359572548.257' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_96_1359572548.257' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_97_1359572548.257' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_98_1359572548.257' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_99_1359572548.257' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_100_1359572548.257' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_101_1359572548.257' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_102_1359572548.257' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_103_1359572548.257' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_104_1359572548.257' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_105_1359572548.257' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_106_1359572548.257' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_107_1359572548.257' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_108_1359572548.257' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_109_1359572548.257' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_110_1359572548.257' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_111_1359572548.257' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_112_1359572548.257' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_113_1359572548.257' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_114_1359572548.257' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_115_1359572548.257' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_116_1359572548.257' 
    capture_lex $P5065
    .const 'Sub' $P5066 = 'cuid_117_1359572548.257' 
    capture_lex $P5066
    .const 'Sub' $P5067 = 'cuid_118_1359572548.257' 
    capture_lex $P5067
    .const 'Sub' $P5068 = 'cuid_119_1359572548.257' 
    capture_lex $P5068
    .const 'Sub' $P5069 = 'cuid_120_1359572548.257' 
    capture_lex $P5069
    .const 'Sub' $P5070 = 'cuid_121_1359572548.257' 
    capture_lex $P5070
    .const 'Sub' $P5071 = 'cuid_122_1359572548.257' 
    capture_lex $P5071
    .const 'Sub' $P5072 = 'cuid_123_1359572548.257' 
    capture_lex $P5072
    .const 'Sub' $P5073 = 'cuid_124_1359572548.257' 
    capture_lex $P5073
    .const 'Sub' $P5074 = 'cuid_125_1359572548.257' 
    capture_lex $P5074
    .const 'Sub' $P5075 = 'cuid_126_1359572548.257' 
    capture_lex $P5075
    .const 'Sub' $P5076 = 'cuid_127_1359572548.257' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_128_1359572548.257' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_129_1359572548.257' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_130_1359572548.257' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_131_1359572548.257' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_132_1359572548.257' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_133_1359572548.257' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_134_1359572548.257' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_135_1359572548.257' 
    capture_lex $P5084
    .const 'Sub' $P5085 = 'cuid_136_1359572548.257' 
    capture_lex $P5085
    .const 'Sub' $P5086 = 'cuid_137_1359572548.257' 
    capture_lex $P5086
    .const 'Sub' $P5087 = 'cuid_138_1359572548.257' 
    capture_lex $P5087
    .const 'Sub' $P5088 = 'cuid_139_1359572548.257' 
    capture_lex $P5088
    .const 'Sub' $P5089 = 'cuid_140_1359572548.257' 
    capture_lex $P5089
    .const 'Sub' $P5090 = 'cuid_141_1359572548.257' 
    capture_lex $P5090
    .const 'Sub' $P5091 = 'cuid_142_1359572548.257' 
    capture_lex $P5091
    .return ($P5091) 
.end
.HLL "nqp"
.namespace []
.sub "type_to_register_type" :subid("cuid_263_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2245
    .param pmc _lex_param_0 
    .lex "$type", _lex_param_0 
    find_lex $P5002, "@prim_to_reg"
    repr_get_primitive_type_spec $I5001, _lex_param_0
    set $P5001, $P5002[$I5001]
    unless_null $P5001, fallback1248
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5003
  fallback1248:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "type_to_lookup_name" :subid("cuid_265_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2253
    .param pmc _lex_param_0 
    .lex "$type", _lex_param_0 
    find_lex $P5002, "@prim_to_lookup_name"
    repr_get_primitive_type_spec $I5001, _lex_param_0
    set $P5001, $P5002[$I5001]
    unless_null $P5001, fallback1249
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5003
  fallback1249:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "want" :subid("cuid_267_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2693
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5012 = 'cuid_266_1359572548.257' 
    capture_lex $P5012 
    .lex "@possibles", $P101 
    .lex "$best", $P102 
    .lex "$node", _lex_param_0 
    .lex "$type", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 2694
    $P5004 = _lex_param_0."list"()
    clone $P5003, $P5004
    set $P101, $P5003
.annotate 'line', 2695
    $P5005 = $P101."shift"()
    set $P102, $P5005
    set $P5006, $P101
    iter $P5008, $P101
  for_next1252:
    unless $P5008, for_done1254
    shift $P5010, $P5008
    shift $P5011, $P5008
  for_redo1253:
    .const 'Sub' $P5009 = 'cuid_266_1359572548.257' 
    capture_lex $P5009
    $P5006 = $P5009($P5010, $P5011)
    goto for_next1252
  for_done1254:
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_266_1359572548.257") :anon :lex :outer("cuid_267_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2696
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$sel", _lex_param_0 
    .lex "$ast", _lex_param_1 
    set $S5001, _lex_param_0
    find_lex $P5001, "$type"
    set $S5002, $P5001
    index $I5002, $S5001, $S5002, 0
    set $N5001, $I5002
    set $N5002, 0
    isge $I5001, $N5001, $N5002
    box $P5003, $I5001
    set $P5002, $P5003
    unless $I5001 goto if268_end1251 
.annotate 'line', 2697
    store_lex "$best", _lex_param_1
    set $P5002, _lex_param_1
  if268_end1251:
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_268_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2048
    .const 'Sub' $P5012 = 'cuid_52_1359572548.257' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_53_1359572548.257' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_54_1359572548.257' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_55_1359572548.257' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_56_1359572548.257' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_57_1359572548.257' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_58_1359572548.257' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_59_1359572548.257' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_60_1359572548.257' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_61_1359572548.257' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_62_1359572548.257' 
    capture_lex $P5012 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_52_1359572548.257' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_53_1359572548.257' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_54_1359572548.257' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_55_1359572548.257' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_56_1359572548.257' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_57_1359572548.257' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_58_1359572548.257' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_59_1359572548.257' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_60_1359572548.257' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_61_1359572548.257' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_62_1359572548.257' 
    capture_lex $P5011
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "new" :subid("cuid_52_1359572548.257") :anon :lex :outer("cuid_268_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2054
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :optional 
    .param int haz_param_11 :opt_flag 
    if haz_param_11, default1257
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set _lex_param_1, $P5010
  default1257:
    .lex "$obj", $P101 
    .lex "self", _lex_param_0 
    .lex "$cur", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_decontainerize $P5003, _lex_param_0
    repr_instance_of $P5002, $P5003
    set $P101, $P5002
    unless _lex_param_1 goto if269_else1255 
.annotate 'line', 2057
    $P5004 = _lex_param_1."cur_p"()
    $P5005 = _lex_param_1."cur_s"()
    $P5006 = _lex_param_1."cur_i"()
    $P5007 = _lex_param_1."cur_n"()
    $P5008 = $P101."BUILD"($P5004, $P5005, $P5006, $P5007)
    goto if269_end1256
  if269_else1255:
.annotate 'line', 2058
    $P5009 = $P101."BUILD"(5000, 5000, 5000, 5000)
  if269_end1256:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "handler_allocator" :subid("cuid_53_1359572548.257") :anon :lex :outer("cuid_268_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2062
    .param pmc _lex_param_0 
    .lex "$obj", $P101 
    .lex "self", _lex_param_0 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_decontainerize $P5003, _lex_param_0
    repr_instance_of $P5002, $P5003
    set $P101, $P5002
.annotate 'line', 2064
    $P101."BUILD"(10000, 10000, 10000, 10000)
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "BUILD" :subid("cuid_54_1359572548.257") :anon :lex :outer("cuid_268_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2068
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "self", _lex_param_0 
    .lex "$p", _lex_param_1 
    .lex "$s", _lex_param_2 
    .lex "$i", _lex_param_3 
    .lex "$n", _lex_param_4 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 61
    set $I5001, _lex_param_1
    repr_bind_attr_int $P5001, $P5002, "$!cur_p", $I5001
    nqp_decontainerize $P5003, _lex_param_0
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 61
    set $I5002, _lex_param_2
    repr_bind_attr_int $P5003, $P5004, "$!cur_s", $I5002
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 61
    set $I5003, _lex_param_3
    repr_bind_attr_int $P5005, $P5006, "$!cur_i", $I5003
    nqp_decontainerize $P5007, _lex_param_0
    nqp_get_sc_object $P5008, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 61
    set $I5004, _lex_param_4
    repr_bind_attr_int $P5007, $P5008, "$!cur_n", $I5004
    .return ($I5004) 
.end
.HLL "nqp"
.namespace []
.sub "fresh_p" :subid("cuid_55_1359572548.257") :anon :lex :outer("cuid_268_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2075
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 61
    nqp_decontainerize $P5003, _lex_param_0
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 61
    repr_get_attr_int $I5001, $P5003, $P5004, "$!cur_p"
    set $N5002, $I5001
    set $N5003, 1
    add $N5001, $N5002, $N5003
    set $I5002, $N5001
    repr_bind_attr_int $P5001, $P5002, "$!cur_p", $I5002
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 61
    repr_get_attr_int $I5003, $P5005, $P5006, "$!cur_p"
    set $S5002, $I5003
    concat $S5001, "$P", $S5002
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "fresh_s" :subid("cuid_56_1359572548.257") :anon :lex :outer("cuid_268_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2079
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 61
    nqp_decontainerize $P5003, _lex_param_0
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 61
    repr_get_attr_int $I5001, $P5003, $P5004, "$!cur_s"
    set $N5002, $I5001
    set $N5003, 1
    add $N5001, $N5002, $N5003
    set $I5002, $N5001
    repr_bind_attr_int $P5001, $P5002, "$!cur_s", $I5002
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 61
    repr_get_attr_int $I5003, $P5005, $P5006, "$!cur_s"
    set $S5002, $I5003
    concat $S5001, "$S", $S5002
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "fresh_i" :subid("cuid_57_1359572548.257") :anon :lex :outer("cuid_268_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2083
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 61
    nqp_decontainerize $P5003, _lex_param_0
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 61
    repr_get_attr_int $I5001, $P5003, $P5004, "$!cur_i"
    set $N5002, $I5001
    set $N5003, 1
    add $N5001, $N5002, $N5003
    set $I5002, $N5001
    repr_bind_attr_int $P5001, $P5002, "$!cur_i", $I5002
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 61
    repr_get_attr_int $I5003, $P5005, $P5006, "$!cur_i"
    set $S5002, $I5003
    concat $S5001, "$I", $S5002
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "fresh_n" :subid("cuid_58_1359572548.257") :anon :lex :outer("cuid_268_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2087
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 61
    nqp_decontainerize $P5003, _lex_param_0
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 61
    repr_get_attr_int $I5001, $P5003, $P5004, "$!cur_n"
    set $N5002, $I5001
    set $N5003, 1
    add $N5001, $N5002, $N5003
    set $I5002, $N5001
    repr_bind_attr_int $P5001, $P5002, "$!cur_n", $I5002
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 61
    repr_get_attr_int $I5003, $P5005, $P5006, "$!cur_n"
    set $S5002, $I5003
    concat $S5001, "$N", $S5002
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "cur_p" :subid("cuid_59_1359572548.257") :anon :lex :outer("cuid_268_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2092
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 61
    repr_get_attr_int $I5001, $P5001, $P5002, "$!cur_p"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "cur_s" :subid("cuid_60_1359572548.257") :anon :lex :outer("cuid_268_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2093
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 61
    repr_get_attr_int $I5001, $P5001, $P5002, "$!cur_s"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "cur_i" :subid("cuid_61_1359572548.257") :anon :lex :outer("cuid_268_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2094
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 61
    repr_get_attr_int $I5001, $P5001, $P5002, "$!cur_i"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "cur_n" :subid("cuid_62_1359572548.257") :anon :lex :outer("cuid_268_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2095
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 61
    repr_get_attr_int $I5001, $P5001, $P5002, "$!cur_n"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_269_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2099
    .const 'Sub' $P5031 = 'cuid_63_1359572548.257' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_64_1359572548.257' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_65_1359572548.257' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_66_1359572548.257' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_67_1359572548.257' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_68_1359572548.257' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_69_1359572548.257' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_70_1359572548.257' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_71_1359572548.257' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_72_1359572548.257' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_73_1359572548.257' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_74_1359572548.257' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_75_1359572548.257' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_76_1359572548.257' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_77_1359572548.257' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_78_1359572548.257' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_79_1359572548.257' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_80_1359572548.257' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_81_1359572548.257' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_82_1359572548.257' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_83_1359572548.257' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_84_1359572548.257' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_85_1359572548.257' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_86_1359572548.257' 
    capture_lex $P5031 
    .lex "%longnames", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "$?CLASS", $P103 
    new $P5001, 'Hash'
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_63_1359572548.257' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_64_1359572548.257' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_65_1359572548.257' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_66_1359572548.257' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_67_1359572548.257' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_68_1359572548.257' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_69_1359572548.257' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_70_1359572548.257' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_71_1359572548.257' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_72_1359572548.257' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_73_1359572548.257' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_74_1359572548.257' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_75_1359572548.257' 
    capture_lex $P5014
    new $P5015, 'Hash'
    box $P5016, "pmc"
    set $P5015["P"], $P5016
    box $P5017, "int"
    set $P5015["I"], $P5017
    box $P5018, "num"
    set $P5015["N"], $P5018
    box $P5019, "string"
    set $P5015["S"], $P5019
    set $P101, $P5015
    .const 'Sub' $P5020 = 'cuid_76_1359572548.257' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_77_1359572548.257' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_78_1359572548.257' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_79_1359572548.257' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_80_1359572548.257' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_81_1359572548.257' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_82_1359572548.257' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_83_1359572548.257' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_84_1359572548.257' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_85_1359572548.257' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_86_1359572548.257' 
    capture_lex $P5030
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "new" :subid("cuid_63_1359572548.257") :anon :lex :outer("cuid_269_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2116
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$obj", $P101 
    .lex "self", _lex_param_0 
    .lex "$qast", _lex_param_1 
    .lex "$outer", _lex_param_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_decontainerize $P5003, _lex_param_0
    repr_instance_of $P5002, $P5003
    set $P101, $P5002
.annotate 'line', 2118
    $P101."BUILD"(_lex_param_1, _lex_param_2)
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "BUILD" :subid("cuid_64_1359572548.257") :anon :lex :outer("cuid_269_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2122
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "self", _lex_param_0 
    .lex "$qast", _lex_param_1 
    .lex "$outer", _lex_param_2 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_bind_attr_obj $P5001, $P5002, "$!qast", _lex_param_1
    nqp_decontainerize $P5003, _lex_param_0
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_bind_attr_obj $P5003, $P5004, "$!outer", _lex_param_2
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    new $P5007, 'ResizablePMCArray'
    repr_bind_attr_obj $P5005, $P5006, "@!params", $P5007
    nqp_decontainerize $P5008, _lex_param_0
    nqp_get_sc_object $P5009, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    new $P5010, 'ResizablePMCArray'
    repr_bind_attr_obj $P5008, $P5009, "@!locals", $P5010
    nqp_decontainerize $P5011, _lex_param_0
    nqp_get_sc_object $P5012, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    new $P5013, 'ResizablePMCArray'
    repr_bind_attr_obj $P5011, $P5012, "@!lexicals", $P5013
    nqp_decontainerize $P5014, _lex_param_0
    nqp_get_sc_object $P5015, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    new $P5016, 'Hash'
    repr_bind_attr_obj $P5014, $P5015, "%!local_types", $P5016
    nqp_decontainerize $P5017, _lex_param_0
    nqp_get_sc_object $P5018, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    new $P5019, 'Hash'
    repr_bind_attr_obj $P5017, $P5018, "%!lexical_types", $P5019
    nqp_decontainerize $P5020, _lex_param_0
    nqp_get_sc_object $P5021, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    new $P5022, 'Hash'
    repr_bind_attr_obj $P5020, $P5021, "%!lexical_regs", $P5022
    nqp_decontainerize $P5023, _lex_param_0
    nqp_get_sc_object $P5024, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    new $P5025, 'Hash'
    repr_bind_attr_obj $P5023, $P5024, "%!reg_types", $P5025
    nqp_decontainerize $P5026, _lex_param_0
    nqp_get_sc_object $P5027, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    new $P5028, 'ResizablePMCArray'
    repr_bind_attr_obj $P5026, $P5027, "@!loadlibs", $P5028
    nqp_decontainerize $P5029, _lex_param_0
    nqp_get_sc_object $P5030, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_bind_attr_int $P5029, $P5030, "$!cur_lex_p", 100
    nqp_decontainerize $P5031, _lex_param_0
    nqp_get_sc_object $P5032, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_bind_attr_int $P5031, $P5032, "$!cur_lex_s", 100
    nqp_decontainerize $P5033, _lex_param_0
    nqp_get_sc_object $P5034, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_bind_attr_int $P5033, $P5034, "$!cur_lex_i", 100
    nqp_decontainerize $P5035, _lex_param_0
    nqp_get_sc_object $P5036, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_bind_attr_int $P5035, $P5036, "$!cur_lex_n", 100
    .return (100) 
.end
.HLL "nqp"
.namespace []
.sub "add_param" :subid("cuid_65_1359572548.257") :anon :lex :outer("cuid_269_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2139
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5012 = 'cuid_270_1359572548.257' 
    capture_lex $P5012 
    .lex "self", _lex_param_0 
    .lex "$var", _lex_param_1 
.annotate 'line', 2140
    $P5001 = _lex_param_1."scope"()
    set $S5001, $P5001
    iseq $I5001, $S5001, "local"
    unless $I5001 goto if270_else1258 
.annotate 'line', 2141
    nqp_decontainerize $P5002, _lex_param_0
    $P5003 = $P5002."register_local"(_lex_param_1)
    goto if270_end1259
  if270_else1258:
    .const 'Sub' $P5004 = 'cuid_270_1359572548.257' 
    capture_lex $P5004
    $P5005 = $P5004()
  if270_end1259:
    nqp_decontainerize $P5006, _lex_param_0
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_obj $P5008, $P5006, $P5007, "@!params"
    nqp_decontainerize $P5009, _lex_param_0
    nqp_get_sc_object $P5010, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_obj $P5011, $P5009, $P5010, "@!params"
    set $N5001, $P5011
    set $I5002, $N5001
    set $P5008[$I5002], _lex_param_1
    .return (_lex_param_1) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_270_1359572548.257") :anon :lex :outer("cuid_65_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2143
    .lex "$reg", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_int $I5001, $P5002, $P5004, "$!param_idx"
    set $S5002, $I5001
    concat $S5001, "_lex_param_", $S5002
    box $P5005, $S5001
    set $P101, $P5005
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    nqp_get_sc_object $P5008, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    find_lex $P5010, "self"
    nqp_decontainerize $P5009, $P5010
    nqp_get_sc_object $P5011, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_int $I5002, $P5009, $P5011, "$!param_idx"
    set $N5002, $I5002
    set $N5003, 1
    add $N5001, $N5002, $N5003
    set $I5003, $N5001
    repr_bind_attr_int $P5006, $P5008, "$!param_idx", $I5003
.annotate 'line', 2146
    find_lex $P5013, "self"
    nqp_decontainerize $P5012, $P5013
    find_lex $P5014, "$var"
    $P5015 = $P5012."register_lexical"($P5014, $P101)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "add_lexical" :subid("cuid_66_1359572548.257") :anon :lex :outer("cuid_269_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2151
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$var", _lex_param_1 
.annotate 'line', 2152
    nqp_decontainerize $P5001, _lex_param_0
    $P5001."register_lexical"(_lex_param_1)
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_obj $P5004, $P5002, $P5003, "@!lexicals"
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_obj $P5007, $P5005, $P5006, "@!lexicals"
    set $N5001, $P5007
    set $I5001, $N5001
    set $P5004[$I5001], _lex_param_1
    .return (_lex_param_1) 
.end
.HLL "nqp"
.namespace []
.sub "add_local" :subid("cuid_67_1359572548.257") :anon :lex :outer("cuid_269_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2156
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$var", _lex_param_1 
.annotate 'line', 2157
    nqp_decontainerize $P5001, _lex_param_0
    $P5001."register_local"(_lex_param_1)
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_obj $P5004, $P5002, $P5003, "@!locals"
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_obj $P5007, $P5005, $P5006, "@!locals"
    set $N5001, $P5007
    set $I5001, $N5001
    set $P5004[$I5001], _lex_param_1
    .return (_lex_param_1) 
.end
.HLL "nqp"
.namespace []
.sub "register_lexical" :subid("cuid_68_1359572548.257") :anon :lex :outer("cuid_269_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2161
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_12 :opt_flag 
    if haz_param_12, default1265
    nqp_get_sc_object $P5027, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set _lex_param_2, $P5027
  default1265:
    .lex "$name", $P101 
    .lex "$type", $P102 
    .lex "self", _lex_param_0 
    .lex "$var", _lex_param_1 
    .lex "$reg", _lex_param_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 2162
    $P5003 = _lex_param_1."name"()
    set $P101, $P5003
.annotate 'line', 2163
    $P5004 = _lex_param_1."returns"()
    $P5005 = "&type_to_register_type"($P5004)
    set $P102, $P5005
    nqp_decontainerize $P5006, _lex_param_0
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_obj $P5008, $P5006, $P5007, "%!lexical_types"
    set $S5001, $P101
    exists $I5001, $P5008[$S5001]
    unless $I5001 goto if271_end1261 
.annotate 'line', 2164
    set $S5004, $P101
    concat $S5003, "Lexical '", $S5004
    concat $S5002, $S5003, "' already declared"
    box $P5009, $S5002
    die $P5009
  if271_end1261:
    nqp_decontainerize $P5010, _lex_param_0
    nqp_get_sc_object $P5011, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_obj $P5012, $P5010, $P5011, "%!lexical_types"
    set $S5005, $P101
    set $P5012[$S5005], $P102
    nqp_decontainerize $P5013, _lex_param_0
    nqp_get_sc_object $P5014, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_obj $P5015, $P5013, $P5014, "%!lexical_regs"
    set $S5006, $P101
    unless _lex_param_2 goto if272_else1262 
    set $P5018, _lex_param_2
    goto if272_end1263
  if272_else1262:
.annotate 'line', 2168
    nqp_decontainerize $P5016, _lex_param_0
    set $S5009, $P102
    downcase $S5008, $S5009
    concat $S5007, "fresh_lex_", $S5008
    $P5017 = $P5016.$S5007()
    set $P5018, $P5017
  if272_end1263:
    set $P5015[$S5006], $P5018
    nqp_decontainerize $P5019, _lex_param_0
    nqp_get_sc_object $P5020, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_obj $P5021, $P5019, $P5020, "%!reg_types"
    nqp_decontainerize $P5023, _lex_param_0
    nqp_get_sc_object $P5024, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_obj $P5025, $P5023, $P5024, "%!lexical_regs"
    set $S5010, $P101
    set $P5022, $P5025[$S5010]
    unless_null $P5022, fallback1264
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5022, $P5026
  fallback1264:
    set $S5011, $P5022
    set $P5021[$S5011], $P102
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "register_local" :subid("cuid_69_1359572548.257") :anon :lex :outer("cuid_269_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2172
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$name", $P101 
    .lex "self", _lex_param_0 
    .lex "$var", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 2173
    $P5002 = _lex_param_1."name"()
    set $P101, $P5002
    nqp_decontainerize $P5003, _lex_param_0
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_obj $P5005, $P5003, $P5004, "%!local_types"
    set $S5001, $P101
    exists $I5001, $P5005[$S5001]
    unless $I5001 goto if273_end1267 
.annotate 'line', 2174
    set $S5004, $P101
    concat $S5003, "Local '", $S5004
    concat $S5002, $S5003, "' already declared"
    box $P5006, $S5002
    die $P5006
  if273_end1267:
    nqp_decontainerize $P5007, _lex_param_0
    nqp_get_sc_object $P5008, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_obj $P5009, $P5007, $P5008, "%!local_types"
    set $S5005, $P101
.annotate 'line', 2177
    $P5010 = _lex_param_1."returns"()
    $P5011 = "&type_to_register_type"($P5010)
    set $P5009[$S5005], $P5011
    nqp_decontainerize $P5012, _lex_param_0
    nqp_get_sc_object $P5013, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_obj $P5014, $P5012, $P5013, "%!reg_types"
    set $S5006, $P101
    nqp_decontainerize $P5016, _lex_param_0
    nqp_get_sc_object $P5017, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_obj $P5018, $P5016, $P5017, "%!local_types"
    set $S5007, $P101
    set $P5015, $P5018[$S5007]
    unless_null $P5015, fallback1268
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5015, $P5019
  fallback1268:
    set $P5014[$S5006], $P5015
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "qast" :subid("cuid_70_1359572548.257") :anon :lex :outer("cuid_269_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2181
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_obj $P5003, $P5001, $P5002, "$!qast"
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "outer" :subid("cuid_71_1359572548.257") :anon :lex :outer("cuid_269_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2182
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_obj $P5003, $P5001, $P5002, "$!outer"
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "params" :subid("cuid_72_1359572548.257") :anon :lex :outer("cuid_269_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2183
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_obj $P5003, $P5001, $P5002, "@!params"
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "lexicals" :subid("cuid_73_1359572548.257") :anon :lex :outer("cuid_269_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2184
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_obj $P5003, $P5001, $P5002, "@!lexicals"
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "locals" :subid("cuid_74_1359572548.257") :anon :lex :outer("cuid_269_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2185
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_obj $P5003, $P5001, $P5002, "@!locals"
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "lex_reg" :subid("cuid_75_1359572548.257") :anon :lex :outer("cuid_269_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2187
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_obj $P5004, $P5002, $P5003, "%!lexical_regs"
    set $S5001, _lex_param_1
    set $P5001, $P5004[$S5001]
    unless_null $P5001, fallback1269
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5005
  fallback1269:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "local_type" :subid("cuid_76_1359572548.257") :anon :lex :outer("cuid_269_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2190
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_obj $P5004, $P5002, $P5003, "%!local_types"
    set $S5001, _lex_param_1
    set $P5001, $P5004[$S5001]
    unless_null $P5001, fallback1270
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5005
  fallback1270:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "local_type_long" :subid("cuid_77_1359572548.257") :anon :lex :outer("cuid_269_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2191
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
    find_lex $P5002, "%longnames"
    nqp_decontainerize $P5004, _lex_param_0
    nqp_get_sc_object $P5005, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_obj $P5006, $P5004, $P5005, "%!local_types"
    set $S5001, _lex_param_1
    set $P5003, $P5006[$S5001]
    unless_null $P5003, fallback1271
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5007
  fallback1271:
    set $S5002, $P5003
    set $P5001, $P5002[$S5002]
    unless_null $P5001, fallback1272
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5008
  fallback1272:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "lexical_type" :subid("cuid_78_1359572548.257") :anon :lex :outer("cuid_269_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2192
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_obj $P5004, $P5002, $P5003, "%!lexical_types"
    set $S5001, _lex_param_1
    set $P5001, $P5004[$S5001]
    unless_null $P5001, fallback1273
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5005
  fallback1273:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "lexical_type_long" :subid("cuid_79_1359572548.257") :anon :lex :outer("cuid_269_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2193
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
    find_lex $P5002, "%longnames"
    nqp_decontainerize $P5004, _lex_param_0
    nqp_get_sc_object $P5005, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_obj $P5006, $P5004, $P5005, "%!lexical_types"
    set $S5001, _lex_param_1
    set $P5003, $P5006[$S5001]
    unless_null $P5003, fallback1274
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5007
  fallback1274:
    set $S5002, $P5003
    set $P5001, $P5002[$S5002]
    unless_null $P5001, fallback1275
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5008
  fallback1275:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "reg_type" :subid("cuid_80_1359572548.257") :anon :lex :outer("cuid_269_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2194
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_obj $P5004, $P5002, $P5003, "%!reg_types"
    set $S5001, _lex_param_1
    set $P5001, $P5004[$S5001]
    unless_null $P5001, fallback1276
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5005
  fallback1276:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "add_loadlibs" :subid("cuid_81_1359572548.257") :anon :lex :outer("cuid_269_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2196
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5006 = 'cuid_271_1359572548.257' 
    capture_lex $P5006 
    .lex "self", _lex_param_0 
    .lex "@libs", _lex_param_1 
    set $P5001, _lex_param_1
    iter $P5003, _lex_param_1
  for_next1277:
    unless $P5003, for_done1279
    shift $P5005, $P5003
  for_redo1278:
    .const 'Sub' $P5004 = 'cuid_271_1359572548.257' 
    capture_lex $P5004
    $P5001 = $P5004($P5005)
    goto for_next1277
  for_done1279:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_271_1359572548.257") :anon :lex :outer("cuid_81_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2197
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    nqp_get_sc_object $P5003, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_obj $P5004, $P5001, $P5003, "@!loadlibs"
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!loadlibs"
    set $N5001, $P5008
    set $I5001, $N5001
    set $P5004[$I5001], _lex_param_0
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "loadlibs" :subid("cuid_82_1359572548.257") :anon :lex :outer("cuid_269_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2201
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_obj $P5003, $P5001, $P5002, "@!loadlibs"
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "fresh_lex_p" :subid("cuid_83_1359572548.257") :anon :lex :outer("cuid_269_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2205
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    nqp_decontainerize $P5003, _lex_param_0
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_int $I5001, $P5003, $P5004, "$!cur_lex_p"
    set $N5002, $I5001
    set $N5003, 1
    add $N5001, $N5002, $N5003
    set $I5002, $N5001
    repr_bind_attr_int $P5001, $P5002, "$!cur_lex_p", $I5002
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_int $I5003, $P5005, $P5006, "$!cur_lex_p"
    set $S5002, $I5003
    concat $S5001, "$P", $S5002
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "fresh_lex_s" :subid("cuid_84_1359572548.257") :anon :lex :outer("cuid_269_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2209
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    nqp_decontainerize $P5003, _lex_param_0
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_int $I5001, $P5003, $P5004, "$!cur_lex_s"
    set $N5002, $I5001
    set $N5003, 1
    add $N5001, $N5002, $N5003
    set $I5002, $N5001
    repr_bind_attr_int $P5001, $P5002, "$!cur_lex_s", $I5002
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_int $I5003, $P5005, $P5006, "$!cur_lex_s"
    set $S5002, $I5003
    concat $S5001, "$S", $S5002
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "fresh_lex_i" :subid("cuid_85_1359572548.257") :anon :lex :outer("cuid_269_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2213
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    nqp_decontainerize $P5003, _lex_param_0
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_int $I5001, $P5003, $P5004, "$!cur_lex_i"
    set $N5002, $I5001
    set $N5003, 1
    add $N5001, $N5002, $N5003
    set $I5002, $N5001
    repr_bind_attr_int $P5001, $P5002, "$!cur_lex_i", $I5002
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_int $I5003, $P5005, $P5006, "$!cur_lex_i"
    set $S5002, $I5003
    concat $S5001, "$I", $S5002
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "fresh_lex_n" :subid("cuid_86_1359572548.257") :anon :lex :outer("cuid_269_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2217
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    nqp_decontainerize $P5003, _lex_param_0
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_int $I5001, $P5003, $P5004, "$!cur_lex_n"
    set $N5002, $I5001
    set $N5003, 1
    add $N5001, $N5002, $N5003
    set $I5002, $N5001
    repr_bind_attr_int $P5001, $P5002, "$!cur_lex_n", $I5002
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    repr_get_attr_int $I5003, $P5005, $P5006, "$!cur_lex_n"
    set $S5002, $I5003
    concat $S5001, "$N", $S5002
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "post" :subid("cuid_87_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2236
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :slurpy :named 
    .lex "self", _lex_param_0 
    .lex "$source", _lex_param_1 
    .lex "%adverbs", _lex_param_2 
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["CompUnit"]
    unless_null $P5001, fallback1286
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5005
  fallback1286:
    type_check $I5001, _lex_param_1, $P5001
    set $I5003, $I5001
    if $I5001 goto unless276_end1285 
    nqp_get_sc_object $P5009, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Block"]
    unless_null $P5006, fallback1287
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5006, $P5010
  fallback1287:
    type_check $I5002, _lex_param_1, $P5006
    set $I5003, $I5002
  unless276_end1285:
    if $I5003 goto unless275_end1283 
.annotate 'line', 2238
    nqp_get_sc_object $P5014, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Block"]
    unless_null $P5011, fallback1288
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5011, $P5015
  fallback1288:
    $P5016 = $P5011."new"(_lex_param_1)
    set _lex_param_1, $P5016
  unless275_end1283:
.annotate 'line', 2241
    nqp_decontainerize $P5017, _lex_param_0
    $P5018 = $P5017."as_post"(_lex_param_1)
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "type_to_register_type" :subid("cuid_88_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2248
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$type", _lex_param_1 
.annotate 'line', 2249
    $P5001 = "&type_to_register_type"(_lex_param_1)
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "force_return_boxing_for_hll" :subid("cuid_89_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2258
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$hll", _lex_param_1 
    find_lex $P5001, "%hll_force_return_boxing"
    set $S5001, _lex_param_1
    box $P5002, 1
    set $P5001[$S5001], $P5002
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "unique" :subid("cuid_90_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2262
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :optional 
    .param int haz_param_13 :opt_flag 
    if haz_param_13, default1290
    box $P5001, ""
    set _lex_param_1, $P5001
  default1290:
    .lex "self", _lex_param_0 
    .lex "$prefix", _lex_param_1 
    .local pmc tmp_2 
    set $S5002, _lex_param_1
    find_lex $P5003, "$?PACKAGE"
    get_who $P5002, $P5003
    set $P5001, $P5002["$serno"]
    unless_null $P5001, fallback1289
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5004
  fallback1289:
    set tmp_2, $P5001
    find_lex $P5006, "$?PACKAGE"
    get_who $P5005, $P5006
    set $N5002, tmp_2
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5007, $N5001
    set $P5005["$serno"], $P5007
    set $S5003, tmp_2
    concat $S5001, $S5002, $S5003
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "escape" :subid("cuid_91_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2263
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$esc", $P101 
    .lex "self", _lex_param_0 
    .lex "$str", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    set $S5002, _lex_param_1
    escape $S5001, $S5002
    box $P5002, $S5001
    set $P101, $P5002
    set $S5003, $P101
    index $I5002, $S5003, utf8:"\\x", 0
    set $N5001, $I5002
    set $N5002, 0
    isge $I5001, $N5001, $N5002
    unless $I5001 goto if277_else1291 
    set $S5006, $P101
    concat $S5005, "utf8:\"", $S5006
    concat $S5004, $S5005, "\""
    set $S5015, $S5004
    goto if277_end1292
  if277_else1291:
    set $S5007, $P101
    index $I5004, $S5007, unicode:"\\u", 0
    set $N5003, $I5004
    set $N5004, 0
    isge $I5003, $N5003, $N5004
    unless $I5003 goto if278_else1293 
    set $S5010, $P101
    concat $S5009, "unicode:\"", $S5010
    concat $S5008, $S5009, "\""
    set $S5014, $S5008
    goto if278_end1294
  if278_else1293:
    set $S5013, $P101
    concat $S5012, "\"", $S5013
    concat $S5011, $S5012, "\""
    set $S5014, $S5011
  if278_end1294:
    set $S5015, $S5014
  if277_end1292:
    .return ($S5015) 
.end
.HLL "nqp"
.namespace []
.sub "rxescape" :subid("cuid_92_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2271
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$str", _lex_param_1 
    set $S5004, _lex_param_1
    escape $S5003, $S5004
    concat $S5002, "ucs4:\"", $S5003
    concat $S5001, $S5002, "\""
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "as_post" :subid("cuid_93_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2273
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("want") :optional 
    .param int haz_param_14 :opt_flag 
    if haz_param_14, default1300
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set _lex_param_2, $P5018
  default1300:
    .lex "$*WANT", $P101 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    .lex "$want", _lex_param_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    set $P101, _lex_param_2
    unless _lex_param_2 goto if279_else1295 
.annotate 'line', 2275
    nqp_get_sc_object $P5005, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Want"]
    unless_null $P5002, fallback1299
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5002, $P5006
  fallback1299:
    type_check $I5001, _lex_param_1, $P5002
    unless $I5001 goto if280_else1297 
.annotate 'line', 2276
.annotate 'line', 2277
    nqp_decontainerize $P5007, _lex_param_0
    nqp_decontainerize $P5008, _lex_param_0
    $P5009 = "&want"(_lex_param_1, _lex_param_2)
    $P5010 = $P5008."as_post"($P5009)
    $P5011 = $P5007."coerce"($P5010, _lex_param_2)
    set $P5015, $P5011
    goto if280_end1298
  if280_else1297:
.annotate 'line', 2279
.annotate 'line', 2280
    nqp_decontainerize $P5012, _lex_param_0
    multi_dispatch_over_lexical_candidates $P5013
    $P5014 = $P5012."coerce"($P5013, _lex_param_2)
    set $P5015, $P5014
  if280_end1298:
    set $P5017, $P5015
    goto if279_end1296
  if279_else1295:
.annotate 'line', 2283
    multi_dispatch_over_lexical_candidates $P5016
    set $P5017, $P5016
  if279_end1296:
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "as_post" :subid("cuid_94_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2288
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("want") :optional 
    .param int haz_param_15 :opt_flag 
    .const 'Sub' $P5038 = 'cuid_273_1359572548.257' 
    capture_lex $P5038 
    .const 'Sub' $P5038 = 'cuid_275_1359572548.257' 
    capture_lex $P5038 
    .const 'Sub' $P5038 = 'cuid_276_1359572548.257' 
    capture_lex $P5038 
    if haz_param_15, default1333
    nqp_get_sc_object $P5037, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set _lex_param_2, $P5037
  default1333:
    .lex "$*HLL", $P101 
    .lex "$*QAST_BLOCK_NO_CLOSE", $P102 
    .lex "$block_post", $P103 
    .lex "$comp_mode", $P104 
    .lex "@pre_des", $P105 
    .lex "@post_des", $P106 
    .lex "self", _lex_param_0 
    .lex "$cu", _lex_param_1 
    .lex "$want", _lex_param_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P104, $P5004
    new $P5005, 'ResizablePMCArray'
    set $P105, $P5005
    new $P5006, 'ResizablePMCArray'
    set $P106, $P5006
    box $P5007, ""
    set $P101, $P5007
.annotate 'line', 2291
    $P5008 = _lex_param_1."hll"()
    unless $P5008 goto if281_end1302 
.annotate 'line', 2292
    $P5009 = _lex_param_1."hll"()
    set $P101, $P5009
  if281_end1302:
    $P5010 = _lex_param_1."list"()
    set $N5001, $P5010
    set $N5002, 1
    isne $I5001, $N5001, $N5002
    set $I5004, $I5001
    if $I5001 goto unless283_end1306 
    set $P5011, _lex_param_1[0]
    unless_null $P5011, fallback1307
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5011, $P5012
  fallback1307:
    nqp_get_sc_object $P5016, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Block"]
    unless_null $P5013, fallback1308
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5013, $P5017
  fallback1308:
    type_check $I5003, $P5011, $P5013
    not $I5002, $I5003
    set $I5004, $I5002
  unless283_end1306:
    unless $I5004 goto if282_end1304 
.annotate 'line', 2296
    box $P5018, "QAST::CompUnit should have one child that is a QAST::Block"
    die $P5018
  if282_end1304:
    box $P5019, 1
    set $P102, $P5019
.annotate 'line', 2302
    nqp_decontainerize $P5020, _lex_param_0
    set $P5021, _lex_param_1[0]
    unless_null $P5021, fallback1309
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5021, $P5022
  fallback1309:
    $P5023 = $P5020."as_post"($P5021)
    set $P103, $P5023
.annotate 'line', 2307
    $P5024 = _lex_param_1."compilation_mode"()
    set $P104, $P5024
.annotate 'line', 2308
    $P5025 = _lex_param_1."pre_deserialize"()
    set $P105, $P5025
.annotate 'line', 2309
    $P5026 = _lex_param_1."post_deserialize"()
    set $P106, $P5026
    set $P5027, $P104
    if $P104 goto unless286_end1315 
    set $P5027, $P105
  unless286_end1315:
    set $P5028, $P5027
    if $P5027 goto unless285_end1313 
    set $P5028, $P106
  unless285_end1313:
    unless $P5028 goto if284_end1311 
    .const 'Sub' $P5029 = 'cuid_273_1359572548.257' 
    capture_lex $P5029
    $P5030 = $P5029()
  if284_end1311:
.annotate 'line', 2338
    $P5031 = _lex_param_1."load"()
    defined $I5005, $P5031
    unless $I5005 goto if288_end1328 
    .const 'Sub' $P5032 = 'cuid_275_1359572548.257' 
    capture_lex $P5032
    $P5033 = $P5032()
  if288_end1328:
.annotate 'line', 2345
    $P5034 = _lex_param_1."main"()
    defined $I5006, $P5034
    unless $I5006 goto if289_end1331 
    .const 'Sub' $P5035 = 'cuid_276_1359572548.257' 
    capture_lex $P5035
    $P5036 = $P5035()
  if289_end1331:
    .return ($P103) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_273_1359572548.257") :anon :lex :outer("cuid_94_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2310
    .const 'Sub' $P5037 = 'cuid_272_1359572548.257' 
    capture_lex $P5037 
    .const 'Sub' $P5037 = 'cuid_274_1359572548.257' 
    capture_lex $P5037 
    .lex "$block", $P101 
    .lex "$sc_post", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 2313
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5005, $P5006, "QAST"
    get_who $P5004, $P5005
    set $P5003, $P5004["Block"]
    unless_null $P5003, fallback1316
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5007
  fallback1316:
    $P5008 = $P5003."new"("raw" :named("blocktype"))
    set $P101, $P5008
    find_lex $P5012, "@pre_des"
    set $P5009, $P5012
    iter $P5011, $P5012
  for_next1318:
    unless $P5011, for_done1320
    shift $P5014, $P5011
  for_redo1319:
    .const 'Sub' $P5013 = 'cuid_272_1359572548.257' 
    capture_lex $P5013
    $P5009 = $P5013($P5014)
    goto for_next1318
  for_done1320:
    find_lex $P5015, "$comp_mode"
    unless $P5015 goto if287_end1322 
.annotate 'line', 2321
.annotate 'line', 2322
    find_lex $P5017, "self"
    nqp_decontainerize $P5016, $P5017
    find_lex $P5018, "$cu"
    $P5019 = $P5018."sc"()
    find_lex $P5020, "$cu"
    $P5021 = $P5020."code_ref_blocks"()
.annotate 'line', 2323
    find_lex $P5022, "$cu"
    $P5023 = $P5022."repo_conflict_resolver"()
    $P5024 = $P5016."deserialization_code"($P5019, $P5021, $P5023)
    $P5025 = $P101."push"($P5024)
  if287_end1322:
    find_lex $P5029, "@post_des"
    set $P5026, $P5029
    iter $P5028, $P5029
  for_next1324:
    unless $P5028, for_done1326
    shift $P5031, $P5028
  for_redo1325:
    .const 'Sub' $P5030 = 'cuid_274_1359572548.257' 
    capture_lex $P5030
    $P5026 = $P5030($P5031)
    goto for_next1324
  for_done1326:
.annotate 'line', 2332
    find_lex $P5033, "self"
    nqp_decontainerize $P5032, $P5033
    $P5034 = $P5032."as_post"($P101)
    set $P102, $P5034
.annotate 'line', 2333
    $P102."pirflags"(":load :init")
.annotate 'line', 2334
    find_lex $P5035, "$block_post"
    $P5036 = $P5035."push"($P102)
    .return ($P5036) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_272_1359572548.257") :anon :lex :outer("cuid_273_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2316
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2317
    find_lex $P5001, "$block"
    nqp_get_sc_object $P5005, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmt"]
    unless_null $P5002, fallback1317
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5002, $P5006
  fallback1317:
    $P5007 = $P5002."new"(_lex_param_0)
    $P5008 = $P5001."push"($P5007)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_274_1359572548.257") :anon :lex :outer("cuid_273_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2327
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2328
    find_lex $P5001, "$block"
    nqp_get_sc_object $P5005, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmt"]
    unless_null $P5002, fallback1323
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5002, $P5006
  fallback1323:
    $P5007 = $P5002."new"(_lex_param_0)
    $P5008 = $P5001."push"($P5007)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_275_1359572548.257") :anon :lex :outer("cuid_94_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2338
    .lex "$load_post", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 2339
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Block"]
    unless_null $P5004, fallback1329
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5008
  fallback1329:
    find_lex $P5009, "$cu"
    $P5010 = $P5009."load"()
    $P5011 = $P5004."new"($P5010, "raw" :named("blocktype"))
    $P5012 = $P5002."as_post"($P5011)
    set $P101, $P5012
.annotate 'line', 2340
    $P101."pirflags"(":load")
.annotate 'line', 2341
    find_lex $P5013, "$block_post"
    $P5014 = $P5013."push"($P101)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_276_1359572548.257") :anon :lex :outer("cuid_94_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2345
    .lex "$main_post", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 2346
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Block"]
    unless_null $P5004, fallback1332
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5008
  fallback1332:
    find_lex $P5009, "$cu"
    $P5010 = $P5009."main"()
    $P5011 = $P5004."new"($P5010, "raw" :named("blocktype"))
    $P5012 = $P5002."as_post"($P5011)
    set $P101, $P5012
.annotate 'line', 2347
    $P101."pirflags"(":main")
.annotate 'line', 2348
    find_lex $P5013, "$block_post"
    $P5014 = $P5013."push"($P101)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "deserialization_code" :subid("cuid_95_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2354
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$sh", $P101 
    .lex "$serialized", $P102 
    .lex "$sh_ast", $P103 
    .lex "$sh_elems", $P104 
    .lex "$i", $P105 
    .lex "$cr_past", $P106 
    .lex "self", _lex_param_0 
    .lex "$sc", _lex_param_1 
    .lex "@code_ref_blocks", _lex_param_2 
    .lex "$repo_conf_res", _lex_param_3 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P106, $P5006
    new $P5007, 'ResizableStringArray'
    set $P101, $P5007
    nqp_serialize_sc $S5001, _lex_param_1, $P101
    box $P5008, $S5001
    set $P102, $P5008
    nqp_pop_compiling_sc 
.annotate 'line', 2363
    nqp_get_sc_object $P5012, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback1334
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5009, $P5013
  fallback1334:
    $P5014 = $P5009."new"("list_s" :named("op"))
    set $P103, $P5014
    elements $I5001, $P101
    box $P5015, $I5001
    set $P104, $P5015
    box $P5016, 0
    set $P105, $P5016
  while290_test1335:
    set $N5001, $P105
    set $N5002, $P104
    islt $I5002, $N5001, $N5002
    box $P5036, $I5002
    set $P5035, $P5036
    unless $I5002 goto while290_done1339 
  while290_redo1337:
.annotate 'line', 2366
.annotate 'line', 2367
    set $I5004, $P105
    set $P5017, $P101[$I5004]
    unless_null $P5017, fallback1342
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5017, $P5018
  fallback1342:
    set $S5002, $P5017
    isnull $I5003, $S5002
    unless $I5003 goto if291_else1340 
.annotate 'line', 2368
    nqp_get_sc_object $P5022, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["Op"]
    unless_null $P5019, fallback1343
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5019, $P5023
  fallback1343:
    $P5024 = $P5019."new"("null_s" :named("op"))
    set $P5033, $P5024
    goto if291_end1341
  if291_else1340:
.annotate 'line', 2369
    nqp_get_sc_object $P5028, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["SVal"]
    unless_null $P5025, fallback1344
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5025, $P5029
  fallback1344:
    set $I5005, $P105
    set $P5030, $P101[$I5005]
    unless_null $P5030, fallback1345
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5030, $P5031
  fallback1345:
    $P5032 = $P5025."new"($P5030 :named("value"))
    set $P5033, $P5032
  if291_end1341:
    $P103."push"($P5033)
    set $N5004, $P105
    set $N5005, 1
    add $N5003, $N5004, $N5005
    box $P5034, $N5003
    set $P105, $P5034
    set $P5035, $P105
    goto while290_test1335 
  while290_done1339:
.annotate 'line', 2374
    nqp_get_sc_object $P5040, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Op"]
    unless_null $P5037, fallback1346
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5037, $P5041
  fallback1346:
    $P5042 = $P5037."new"(_lex_param_2 :flat, "list_b" :named("op"))
    set $P106, $P5042
    unless _lex_param_3 goto if292_else1347 
.annotate 'line', 2377
.annotate 'line', 2378
    nqp_get_sc_object $P5046, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Var"]
    unless_null $P5043, fallback1349
    nqp_get_sc_object $P5047, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5043, $P5047
  fallback1349:
    $P5048 = $P5043."new"("conflicts" :named("name"), "local" :named("scope"))
    $P5049 = _lex_param_3."push"($P5048)
    goto if292_end1348
  if292_else1347:
.annotate 'line', 2380
.annotate 'line', 2381
    nqp_get_sc_object $P5053, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5052, $P5053, "QAST"
    get_who $P5051, $P5052
    set $P5050, $P5051["Op"]
    unless_null $P5050, fallback1350
    nqp_get_sc_object $P5054, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5050, $P5054
  fallback1350:
.annotate 'line', 2383
    nqp_get_sc_object $P5058, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5057, $P5058, "QAST"
    get_who $P5056, $P5057
    set $P5055, $P5056["SVal"]
    unless_null $P5055, fallback1351
    nqp_get_sc_object $P5059, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5055, $P5059
  fallback1351:
    $P5060 = $P5055."new"("Repossession conflicts occurred during deserialization" :named("value"))
    $P5061 = $P5050."new"($P5060, "die_s" :named("op"))
    set _lex_param_3, $P5061
  if292_end1348:
.annotate 'line', 2388
    nqp_get_sc_object $P5065, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5064, $P5065, "QAST"
    get_who $P5063, $P5064
    set $P5062, $P5063["Stmt"]
    unless_null $P5062, fallback1352
    nqp_get_sc_object $P5066, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5062, $P5066
  fallback1352:
.annotate 'line', 2389
    nqp_get_sc_object $P5070, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5069, $P5070, "QAST"
    get_who $P5068, $P5069
    set $P5067, $P5068["Op"]
    unless_null $P5067, fallback1353
    nqp_get_sc_object $P5071, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5067, $P5071
  fallback1353:
.annotate 'line', 2391
    nqp_get_sc_object $P5075, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5074, $P5075, "QAST"
    get_who $P5073, $P5074
    set $P5072, $P5073["Var"]
    unless_null $P5072, fallback1354
    nqp_get_sc_object $P5076, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5072, $P5076
  fallback1354:
    $P5077 = $P5072."new"("cur_sc" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2392
    nqp_get_sc_object $P5081, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5080, $P5081, "QAST"
    get_who $P5079, $P5080
    set $P5078, $P5079["Op"]
    unless_null $P5078, fallback1355
    nqp_get_sc_object $P5082, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5078, $P5082
  fallback1355:
    nqp_get_sc_object $P5086, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5085, $P5086, "QAST"
    get_who $P5084, $P5085
    set $P5083, $P5084["SVal"]
    unless_null $P5083, fallback1356
    nqp_get_sc_object $P5087, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5083, $P5087
  fallback1356:
    $P5088 = _lex_param_1."handle"()
    $P5089 = $P5083."new"($P5088 :named("value"))
    $P5090 = $P5078."new"($P5089, "createsc" :named("op"))
    $P5091 = $P5067."new"($P5077, $P5090, "bind" :named("op"))
.annotate 'line', 2394
    nqp_get_sc_object $P5095, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5094, $P5095, "QAST"
    get_who $P5093, $P5094
    set $P5092, $P5093["Op"]
    unless_null $P5092, fallback1357
    nqp_get_sc_object $P5096, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5092, $P5096
  fallback1357:
.annotate 'line', 2396
    nqp_get_sc_object $P5100, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5099, $P5100, "QAST"
    get_who $P5098, $P5099
    set $P5097, $P5098["Var"]
    unless_null $P5097, fallback1358
    nqp_get_sc_object $P5101, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5097, $P5101
  fallback1358:
    $P5102 = $P5097."new"("cur_sc" :named("name"), "local" :named("scope"))
.annotate 'line', 2397
    nqp_get_sc_object $P5106, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5105, $P5106, "QAST"
    get_who $P5104, $P5105
    set $P5103, $P5104["SVal"]
    unless_null $P5103, fallback1359
    nqp_get_sc_object $P5107, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5103, $P5107
  fallback1359:
    $P5108 = _lex_param_1."description"()
    $P5109 = $P5103."new"($P5108 :named("value"))
    $P5110 = $P5092."new"($P5102, $P5109, "scsetdesc" :named("op"))
.annotate 'line', 2399
    nqp_get_sc_object $P5114, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5113, $P5114, "QAST"
    get_who $P5112, $P5113
    set $P5111, $P5112["Op"]
    unless_null $P5111, fallback1360
    nqp_get_sc_object $P5115, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5111, $P5115
  fallback1360:
.annotate 'line', 2401
    nqp_get_sc_object $P5119, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5118, $P5119, "QAST"
    get_who $P5117, $P5118
    set $P5116, $P5117["Var"]
    unless_null $P5116, fallback1361
    nqp_get_sc_object $P5120, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5116, $P5120
  fallback1361:
    $P5121 = $P5116."new"("conflicts" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2402
    nqp_get_sc_object $P5125, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5124, $P5125, "QAST"
    get_who $P5123, $P5124
    set $P5122, $P5123["Op"]
    unless_null $P5122, fallback1362
    nqp_get_sc_object $P5126, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5122, $P5126
  fallback1362:
    $P5127 = $P5122."new"("list" :named("op"))
    $P5128 = $P5111."new"($P5121, $P5127, "bind" :named("op"))
.annotate 'line', 2404
    nqp_get_sc_object $P5132, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5131, $P5132, "QAST"
    get_who $P5130, $P5131
    set $P5129, $P5130["Op"]
    unless_null $P5129, fallback1363
    nqp_get_sc_object $P5133, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5129, $P5133
  fallback1363:
.annotate 'line', 2406
    nqp_get_sc_object $P5137, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5136, $P5137, "QAST"
    get_who $P5135, $P5136
    set $P5134, $P5135["SVal"]
    unless_null $P5134, fallback1364
    nqp_get_sc_object $P5138, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5134, $P5138
  fallback1364:
    $P5139 = $P5134."new"($P102 :named("value"))
.annotate 'line', 2407
    nqp_get_sc_object $P5143, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5142, $P5143, "QAST"
    get_who $P5141, $P5142
    set $P5140, $P5141["Var"]
    unless_null $P5140, fallback1365
    nqp_get_sc_object $P5144, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5140, $P5144
  fallback1365:
    $P5145 = $P5140."new"("cur_sc" :named("name"), "local" :named("scope"))
.annotate 'line', 2409
    nqp_get_sc_object $P5149, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5148, $P5149, "QAST"
    get_who $P5147, $P5148
    set $P5146, $P5147["Block"]
    unless_null $P5146, fallback1366
    nqp_get_sc_object $P5150, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5146, $P5150
  fallback1366:
    $P5151 = $P5146."new"($P106, "immediate" :named("blocktype"))
.annotate 'line', 2410
    nqp_get_sc_object $P5155, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5154, $P5155, "QAST"
    get_who $P5153, $P5154
    set $P5152, $P5153["Var"]
    unless_null $P5152, fallback1367
    nqp_get_sc_object $P5156, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5152, $P5156
  fallback1367:
    $P5157 = $P5152."new"("conflicts" :named("name"), "local" :named("scope"))
    $P5158 = $P5129."new"($P5139, $P5145, $P103, $P5151, $P5157, "deserialize" :named("op"))
.annotate 'line', 2412
    nqp_get_sc_object $P5162, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5161, $P5162, "QAST"
    get_who $P5160, $P5161
    set $P5159, $P5160["Op"]
    unless_null $P5159, fallback1368
    nqp_get_sc_object $P5163, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5159, $P5163
  fallback1368:
.annotate 'line', 2414
    nqp_get_sc_object $P5167, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5166, $P5167, "QAST"
    get_who $P5165, $P5166
    set $P5164, $P5165["Var"]
    unless_null $P5164, fallback1369
    nqp_get_sc_object $P5168, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5164, $P5168
  fallback1369:
    $P5169 = $P5164."new"("conflicts" :named("name"), "local" :named("scope"))
    $P5170 = $P5159."new"($P5169, _lex_param_3, "if" :named("op"))
    $P5171 = $P5062."new"($P5091, $P5110, $P5128, $P5158, $P5170)
    .return ($P5171) 
.end
.HLL "nqp"
.namespace []
.sub "as_post" :subid("cuid_96_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2420
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("want") :optional 
    .param int haz_param_16 :opt_flag 
    .const 'Sub' $P5031 = 'cuid_279_1359572548.257' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_294_1359572548.257' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_295_1359572548.257' 
    capture_lex $P5031 
    if haz_param_16, default1513
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set _lex_param_2, $P5030
  default1513:
    .lex "$sub", $P101 
    .lex "$ops", $P102 
    .lex "$blocktype", $P103 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    .lex "$want", _lex_param_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    root_new $P104, ['parrot';'Continuation']
    set_label $P104, lexotic_1370
    .lex "RETURN", $P104
    .const 'Sub' $P5004 = 'cuid_279_1359572548.257' 
    capture_lex $P5004
    $P5005 = $P5004()
    new $P5012, 'ExceptionHandler'
    set_label $P5012, catch_handler_3321479
    $P5012.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5012
    find_dynamic_lex $P5006, "$*BLOCK"
    unless_null $P5006, fallback1475
    nqp_get_sc_object $P5009, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$BLOCK"]
    unless_null $P5007, fallback1476
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5007, $P5010
  fallback1476:
    unless_null $P5007, vivi_3301477
    die "Contextual $*BLOCK not found"
    box $P5011, "Contextual $*BLOCK not found"
    set $P5007, $P5011
  vivi_3301477:
    set $P5006, $P5007
  fallback1475:
    set $P5013, $P5006
    pop_eh 
    goto skip_handler_3311478
  catch_handler_3321479:
    .get_results ($P5012) 
    set $I10001, 1
    set $P5012["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    finalize $P5012
    pop_upto_eh $P5012
    pop_eh 
    set $P5013, $P10001
    goto skip_handler_3311478
  skip_handler_3311478:
    nqp_get_sc_object $P5014, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    type_check $I5001, $P5013, $P5014
    if $I5001 goto unless329_end1474 
.annotate 'line', 2599
    find_lex $P5015, "RETURN"
    $P5016 = $P5015($P101)
  unless329_end1474:
.annotate 'line', 2605
    nqp_get_sc_object $P5020, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5019, $P5020, "PIRT"
    get_who $P5018, $P5019
    set $P5017, $P5018["Ops"]
    unless_null $P5017, fallback1480
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5017, $P5021
  fallback1480:
    $P5022 = $P5017."new"()
    set $P102, $P5022
.annotate 'line', 2606
    $P102."push"($P101)
.annotate 'line', 2607
    $P5023 = _lex_param_1."blocktype"()
    set $P103, $P5023
    set $S5001, $P103
    iseq $I5002, $S5001, "immediate"
    unless $I5002 goto if333_else1481 
    .const 'Sub' $P5024 = 'cuid_294_1359572548.257' 
    capture_lex $P5024
    $P5025 = $P5024()
    goto if333_end1482
  if333_else1481:
    set $S5002, $P103
    iseq $I5003, $S5002, "declaration"
    set $I5005, $I5003
    if $I5003 goto unless344_end1504 
    set $S5003, $P103
    iseq $I5004, $S5003, ""
    set $I5005, $I5004
  unless344_end1504:
    box $P5029, $I5005
    set $P5028, $P5029
    unless $I5005 goto if343_end1502 
    .const 'Sub' $P5026 = 'cuid_295_1359572548.257' 
    capture_lex $P5026
    $P5027 = $P5026()
    set $P5028, $P5027
  if343_end1502:
  if333_end1482:
    goto lexotic_1371
  lexotic_1370:
    .get_results ($P102)
  lexotic_1371:
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_279_1359572548.257") :anon :lex :outer("cuid_96_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2423
    .const 'Sub' $P5135 = 'cuid_278_1359572548.257' 
    capture_lex $P5135 
    .const 'Sub' $P5135 = 'cuid_281_1359572548.257' 
    capture_lex $P5135 
    .const 'Sub' $P5135 = 'cuid_287_1359572548.257' 
    capture_lex $P5135 
    .const 'Sub' $P5135 = 'cuid_288_1359572548.257' 
    capture_lex $P5135 
    .const 'Sub' $P5135 = 'cuid_289_1359572548.257' 
    capture_lex $P5135 
    .const 'Sub' $P5135 = 'cuid_290_1359572548.257' 
    capture_lex $P5135 
    .const 'Sub' $P5135 = 'cuid_292_1359572548.257' 
    capture_lex $P5135 
    .lex "$*REGALLOC", $P101 
    .lex "$*BLOCKRA", $P102 
    .lex "$*BINDVAL", $P103 
    .lex "$outer", $P104 
    .lex "$block", $P105 
    .lex "@inners", $P106 
    .lex "$stmts", $P107 
    .lex "$decls", $P108 
    .lex "$opts", $P109 
    .lex "%lex_params", $P110 
    .lex "$cap_lex_reg", $P111 
    .lex "$hll", $P112 
    .lex "@loadlibs", $P113 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P105, $P5005
    new $P5006, 'ResizablePMCArray'
    set $P106, $P5006
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P107, $P5007
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P108, $P5008
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P109, $P5009
    new $P5010, 'Hash'
    set $P110, $P5010
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P111, $P5011
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P112, $P5012
    new $P5013, 'ResizablePMCArray'
    set $P113, $P5013
.annotate 'line', 2425
    nqp_get_sc_object $P5014, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 61
    $P5015 = $P5014."new"()
    set $P101, $P5015
    unless_null $P101, fallback1372
    nqp_get_sc_object $P5018, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$REGALLOC"]
    unless_null $P5016, fallback1373
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5016, $P5019
  fallback1373:
    unless_null $P5016, vivi_2931374
    die "Contextual $*REGALLOC not found"
    box $P5020, "Contextual $*REGALLOC not found"
    set $P5016, $P5020
  vivi_2931374:
    set $P101, $P5016
  fallback1372:
    set $P102, $P101
    box $P5021, 0
    set $P103, $P5021
    new $P5028, 'ExceptionHandler'
    set_label $P5028, catch_handler_2961379
    $P5028.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5028
    find_dynamic_lex $P5022, "$*BLOCK"
    unless_null $P5022, fallback1375
    nqp_get_sc_object $P5025, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$BLOCK"]
    unless_null $P5023, fallback1376
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5023, $P5026
  fallback1376:
    unless_null $P5023, vivi_2941377
    die "Contextual $*BLOCK not found"
    box $P5027, "Contextual $*BLOCK not found"
    set $P5023, $P5027
  vivi_2941377:
    set $P5022, $P5023
  fallback1375:
    set $P5029, $P5022
    pop_eh 
    goto skip_handler_2951378
  catch_handler_2961379:
    .get_results ($P5028) 
    set $I10001, 1
    set $P5028["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    finalize $P5028
    pop_upto_eh $P5028
    pop_eh 
    set $P5029, $P10001
    goto skip_handler_2951378
  skip_handler_2951378:
    set $P104, $P5029
.annotate 'line', 2429
    nqp_get_sc_object $P5030, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    find_lex $P5031, "$node"
    $P5032 = $P5030."new"($P5031, $P104)
    set $P105, $P5032
    .const 'Sub' $P5033 = 'cuid_278_1359572548.257' 
    capture_lex $P5033
    $P5034 = $P5033()
.annotate 'line', 2451
    nqp_get_sc_object $P5038, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5037, $P5038, "PIRT"
    get_who $P5036, $P5037
    set $P5035, $P5036["Ops"]
    unless_null $P5035, fallback1389
    nqp_get_sc_object $P5039, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5035, $P5039
  fallback1389:
    $P5040 = $P5035."new"()
    set $P108, $P5040
.annotate 'line', 2452
    nqp_get_sc_object $P5044, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5043, $P5044, "PIRT"
    get_who $P5042, $P5043
    set $P5041, $P5042["Ops"]
    unless_null $P5041, fallback1390
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5041, $P5045
  fallback1390:
    $P5046 = $P5041."new"()
    set $P109, $P5046
.annotate 'line', 2453
    find_lex $P5047, "$node"
    $P5048 = $P5047."node"()
    unless $P5048 goto if303_end1392 
    find_lex $P5049, "$node"
    $P5050 = $P5049."node"()
    $P5051 = $P108."node"($P5050)
  if303_end1392:
.annotate 'line', 2455
    find_lex $P5052, "$node"
    $P5053 = $P5052."custom_args"()
    unless $P5053 goto if304_else1393 
.annotate 'line', 2456
    $P5054 = $P108."push_pirop"(".param pmc CALL_SIG :call_sig")
    goto if304_end1394
  if304_else1393:
    .const 'Sub' $P5055 = 'cuid_281_1359572548.257' 
    capture_lex $P5055
    $P5056 = $P5055()
  if304_end1394:
.annotate 'line', 2533
    unless_null $P101, fallback1434
    nqp_get_sc_object $P5059, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["$REGALLOC"]
    unless_null $P5057, fallback1435
    nqp_get_sc_object $P5060, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5057, $P5060
  fallback1435:
    unless_null $P5057, vivi_3161436
    die "Contextual $*REGALLOC not found"
    box $P5061, "Contextual $*REGALLOC not found"
    set $P5057, $P5061
  vivi_3161436:
    set $P101, $P5057
  fallback1434:
    $P5062 = $P101."fresh_p"()
    set $P111, $P5062
    set $P5063, $P106
    iter $P5065, $P106
  for_next1437:
    unless $P5065, for_done1439
    shift $P5067, $P5065
  for_redo1438:
    .const 'Sub' $P5066 = 'cuid_287_1359572548.257' 
    capture_lex $P5066
    $P5063 = $P5066($P5067)
    goto for_next1437
  for_done1439:
.annotate 'line', 2540
    $P108."push"($P109)
.annotate 'line', 2543
    $P5071 = $P105."lexicals"()
    set $P5068, $P5071
    iter $P5070, $P5071
  for_next1440:
    unless $P5070, for_done1442
    shift $P5073, $P5070
  for_redo1441:
    .const 'Sub' $P5072 = 'cuid_288_1359572548.257' 
    capture_lex $P5072
    $P5068 = $P5072($P5073)
    goto for_next1440
  for_done1442:
    set $P5074, $P110
    iter $P5076, $P110
  for_next1443:
    unless $P5076, for_done1445
    shift $P5078, $P5076
  for_redo1444:
    .const 'Sub' $P5077 = 'cuid_289_1359572548.257' 
    capture_lex $P5077
    $P5074 = $P5077($P5078)
    goto for_next1443
  for_done1445:
.annotate 'line', 2549
    $P5082 = $P105."locals"()
    set $P5079, $P5082
    iter $P5081, $P5082
  for_next1446:
    unless $P5081, for_done1448
    shift $P5084, $P5081
  for_redo1447:
    .const 'Sub' $P5083 = 'cuid_290_1359572548.257' 
    capture_lex $P5083
    $P5079 = $P5083($P5084)
    goto for_next1446
  for_done1448:
.annotate 'line', 2554
    nqp_get_sc_object $P5088, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5087, $P5088, "PIRT"
    get_who $P5086, $P5087
    set $P5085, $P5086["Sub"]
    unless_null $P5085, fallback1449
    nqp_get_sc_object $P5089, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5085, $P5089
  fallback1449:
    $P5090 = $P5085."new"()
    store_lex "$sub", $P5090
    box $P5091, ""
    set $P112, $P5091
    new $P5098, 'ExceptionHandler'
    set_label $P5098, catch_handler_3191454
    $P5098.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5098
    find_dynamic_lex $P5092, "$*HLL"
    unless_null $P5092, fallback1450
    nqp_get_sc_object $P5095, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5094, $P5095
    set $P5093, $P5094["$HLL"]
    unless_null $P5093, fallback1451
    nqp_get_sc_object $P5096, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5093, $P5096
  fallback1451:
    unless_null $P5093, vivi_3171452
    die "Contextual $*HLL not found"
    box $P5097, "Contextual $*HLL not found"
    set $P5093, $P5097
  vivi_3171452:
    set $P5092, $P5093
  fallback1450:
    set $P112, $P5092
    set $P5099, $P112
    pop_eh 
    goto skip_handler_3181453
  catch_handler_3191454:
    .get_results ($P5098) 
    set $I10001, 1
    set $P5098["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    finalize $P5098
    pop_upto_eh $P5098
    pop_eh 
    set $P5099, $P10001
    goto skip_handler_3181453
  skip_handler_3181453:
    unless $P112 goto if320_end1456 
.annotate 'line', 2557
.annotate 'line', 2558
    find_lex $P5100, "$sub"
    $P5101 = $P5100."hll"($P112)
  if320_end1456:
.annotate 'line', 2562
    find_lex $P5102, "$sub"
    $P5102."push"($P108)
    .const 'Sub' $P5103 = 'cuid_292_1359572548.257' 
    capture_lex $P5103
    $P5104 = $P5103()
.annotate 'line', 2579
    find_lex $P5105, "$sub"
    find_lex $P5106, "$node"
    $P5107 = $P5106."cuid"()
    $P5105."subid"($P5107)
.annotate 'line', 2580
    $P5108 = $P105."outer"()
    nqp_get_sc_object $P5109, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    type_check $I5001, $P5108, $P5109
    unless $I5001 goto if325_else1464 
.annotate 'line', 2581
    find_lex $P5110, "$sub"
    find_lex $P5112, "self"
    nqp_decontainerize $P5111, $P5112
    $P5113 = $P105."outer"()
    $P5114 = $P5113."qast"()
    $P5115 = $P5114."cuid"()
    $P5116 = $P5111."escape"($P5115)
    set $S5003, $P5116
    concat $S5002, ":anon :lex :outer(", $S5003
    concat $S5001, $S5002, ")"
    $P5117 = $P5110."pirflags"($S5001)
    goto if325_end1465
  if325_else1464:
.annotate 'line', 2583
.annotate 'line', 2584
    find_lex $P5118, "$sub"
    $P5119 = $P5118."pirflags"(":anon :lex")
  if325_end1465:
.annotate 'line', 2586
    find_lex $P5120, "$sub"
    find_lex $P5121, "$node"
    $P5122 = $P5121."name"()
    $P5120."name"($P5122)
.annotate 'line', 2589
    $P5123 = $P105."loadlibs"()
    set $P113, $P5123
    unless $P113 goto if326_end1467 
.annotate 'line', 2590
    find_lex $P5124, "$sub"
    $P5125 = $P5124."loadlibs"($P113)
  if326_end1467:
    find_dynamic_lex $P5126, "$*QAST_BLOCK_NO_CLOSE"
    unless_null $P5126, fallback1470
    nqp_get_sc_object $P5129, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5128, $P5129
    set $P5127, $P5128["$QAST_BLOCK_NO_CLOSE"]
    unless_null $P5127, fallback1471
    nqp_get_sc_object $P5130, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5127, $P5130
  fallback1471:
    unless_null $P5127, vivi_3281472
    die "Contextual $*QAST_BLOCK_NO_CLOSE not found"
    box $P5131, "Contextual $*QAST_BLOCK_NO_CLOSE not found"
    set $P5127, $P5131
  vivi_3281472:
    set $P5126, $P5127
  fallback1470:
    set $P5134, $P5126
    if $P5126 goto unless327_end1469 
.annotate 'line', 2593
.annotate 'line', 2594
    find_lex $P5132, "$sub"
    $P5133 = $P5132."close_sub"()
    set $P5134, $P5133
  unless327_end1469:
    .return ($P5134) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_278_1359572548.257") :anon :lex :outer("cuid_279_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2434
    .const 'Sub' $P5030 = 'cuid_277_1359572548.257' 
    capture_lex $P5030 
    .lex "$*BLOCK", $P101 
    .lex "@*INNERS", $P102 
    .lex "$*HAVE_IMM_ARG", $P103 
    .lex "$*QAST_BLOCK_NO_CLOSE", $P104 
    .lex "$*WANT", $P105 
    .lex "$err", $P106 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P106, $P5006
    find_lex $P5007, "$block"
    set $P101, $P5007
    find_lex $P5008, "@inners"
    set $P102, $P5008
    box $P5009, 0
    set $P103, $P5009
    box $P5010, 0
    set $P104, $P5010
    new $P5024, 'ExceptionHandler'
    set_label $P5024, catch_handler_3011386
    $P5024.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5024
.annotate 'line', 2441
    new $P5022, 'ExceptionHandler'
    set_label $P5022, catch_handler_2991384
    $P5022.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5022
.annotate 'line', 2442
    find_lex $P5017, "self"
    nqp_decontainerize $P5016, $P5017
    find_lex $P5018, "$node"
    $P5019 = $P5018."list"()
    $P5020 = $P5016."compile_all_the_stmts"($P5019)
    store_lex "$stmts", $P5020
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5023, $P5021
    pop_eh 
    goto skip_handler_2981383
  catch_handler_2991384:
    .get_results ($P5022) 
    .const 'Sub' $P10001 = 'cuid_277_1359572548.257' 
    capture_lex $P10001
    $P10001($P5022)
    set $I10001, 1
    set $P5022["handled"], $I10001
    nqp_get_sc_object $P10002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    finalize $P5022
    pop_upto_eh $P5022
    pop_eh 
    set $P5023, $P10002
    goto skip_handler_2981383
  skip_handler_2981383:
    set $P5025, $P5023
    pop_eh 
    goto skip_handler_3001385
  catch_handler_3011386:
    .get_results ($P5024) 
    set $I10001, 1
    set $P5024["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    finalize $P5024
    pop_upto_eh $P5024
    pop_eh 
    set $P5025, $P10001
    goto skip_handler_3001385
  skip_handler_3001385:
    set $P5029, $P106
    unless $P106 goto if302_end1388 
.annotate 'line', 2445
.annotate 'line', 2446
    find_lex $P5026, "$node"
    $P5027 = $P5026."name"()
    set $S5003, $P5027
    concat $S5002, "Error while compiling block ", $S5003
    set $S5005, $P106
    concat $S5004, ": ", $S5005
    concat $S5001, $S5002, $S5004
    box $P5028, $S5001
    die $P5028
    set $P5029, $P5028
  if302_end1388:
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_277_1359572548.257") :anon :lex :outer("cuid_278_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2443
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
    store_lex "$err", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_281_1359572548.257") :anon :lex :outer("cuid_279_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2458
    .const 'Sub' $P5030 = 'cuid_280_1359572548.257' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_282_1359572548.257' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_283_1359572548.257' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_285_1359572548.257' 
    capture_lex $P5030 
    .lex "@pos_params", $P101 
    .lex "@named_params", $P102 
    .lex "$slurpy_pos", $P103 
    .lex "$slurpy_named", $P104 
    .lex "@sorted_params", $P105 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P104, $P5004
    new $P5005, 'ResizablePMCArray'
    set $P105, $P5005
.annotate 'line', 2463
    find_lex $P5009, "$block"
    $P5010 = $P5009."params"()
    set $P5006, $P5010
    iter $P5008, $P5010
  for_next1403:
    unless $P5008, for_done1405
    shift $P5012, $P5008
  for_redo1404:
    .const 'Sub' $P5011 = 'cuid_280_1359572548.257' 
    capture_lex $P5011
    $P5006 = $P5011($P5012)
    goto for_next1403
  for_done1405:
    set $P5013, $P101
    iter $P5015, $P101
    new $P5017, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5017, for_handlers1406
    push_eh $P5017
  for_next1407:
    unless $P5015, for_done1409
    shift $P5018, $P5015
  for_redo1408:
    .const 'Sub' $P5016 = 'cuid_282_1359572548.257' 
    capture_lex $P5016
    $P5013 = $P5016($P5018)
    goto for_next1407
  for_handlers1406:
    .get_results ($P5017)
    pop_upto_eh $P5017
    getattribute $P5017, $P5017, 'type'
    eq $P5017, .CONTROL_LOOP_NEXT, for_next1407
    eq $P5017, .CONTROL_LOOP_REDO, for_redo1408
  for_done1409:
    pop_eh 
    unless $P103 goto if309_end1411 
    push $P105, $P103
  if309_end1411:
    set $P5019, $P102
    iter $P5021, $P102
    new $P5023, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5023, for_handlers1412
    push_eh $P5023
  for_next1413:
    unless $P5021, for_done1415
    shift $P5024, $P5021
  for_redo1414:
    .const 'Sub' $P5022 = 'cuid_283_1359572548.257' 
    capture_lex $P5022
    $P5019 = $P5022($P5024)
    goto for_next1413
  for_handlers1412:
    .get_results ($P5023)
    pop_upto_eh $P5023
    getattribute $P5023, $P5023, 'type'
    eq $P5023, .CONTROL_LOOP_NEXT, for_next1413
    eq $P5023, .CONTROL_LOOP_REDO, for_redo1414
  for_done1415:
    pop_eh 
    unless $P104 goto if310_end1417 
    push $P105, $P104
  if310_end1417:
    set $P5025, $P105
    iter $P5027, $P105
  for_next1431:
    unless $P5027, for_done1433
    shift $P5029, $P5027
  for_redo1432:
    .const 'Sub' $P5028 = 'cuid_285_1359572548.257' 
    capture_lex $P5028
    $P5025 = $P5028($P5029)
    goto for_next1431
  for_done1433:
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_280_1359572548.257") :anon :lex :outer("cuid_281_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2463
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2464
    $P5001 = _lex_param_0."slurpy"()
    set $P5003, $P5001
    unless $P5001 goto if306_end1398 
    $P5002 = _lex_param_0."named"()
    set $P5003, $P5002
  if306_end1398:
    unless $P5003 goto if305_else1395 
    store_lex "$slurpy_named", _lex_param_0
    set $P5010, _lex_param_0
    goto if305_end1396
  if305_else1395:
.annotate 'line', 2467
    $P5004 = _lex_param_0."slurpy"()
    unless $P5004 goto if307_else1399 
    store_lex "$slurpy_pos", _lex_param_0
    set $P5009, _lex_param_0
    goto if307_end1400
  if307_else1399:
.annotate 'line', 2470
    $P5005 = _lex_param_0."named"()
    unless $P5005 goto if308_else1401 
    find_lex $P5006, "@named_params"
    push $P5006, _lex_param_0
    set $P5008, $P5006
    goto if308_end1402
  if308_else1401:
.annotate 'line', 2473
    find_lex $P5007, "@pos_params"
    push $P5007, _lex_param_0
    set $P5008, $P5007
  if308_end1402:
    set $P5009, $P5008
  if307_end1400:
    set $P5010, $P5009
  if305_end1396:
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_282_1359572548.257") :anon :lex :outer("cuid_281_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "@sorted_params"
    push $P5001, _lex_param_0
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_283_1359572548.257") :anon :lex :outer("cuid_281_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "@sorted_params"
    push $P5001, _lex_param_0
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_285_1359572548.257") :anon :lex :outer("cuid_281_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2482
    .param pmc _lex_param_0 
    .const 'Sub' $P5033 = 'cuid_284_1359572548.257' 
    capture_lex $P5033 
    .const 'Sub' $P5033 = 'cuid_286_1359572548.257' 
    capture_lex $P5033 
    .lex "@param", $P101 
    .lex "$reg_type", $P102 
    .lex "$_", _lex_param_0 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, ".param"
    push $P5003, $P5004
    set $P101, $P5003
.annotate 'line', 2486
    $P5005 = _lex_param_0."scope"()
    set $S5001, $P5005
    iseq $I5001, $S5001, "local"
    unless $I5001 goto if311_else1418 
.annotate 'line', 2487
    find_lex $P5006, "$block"
    $P5007 = _lex_param_0."name"()
    $P5008 = $P5006."local_type_long"($P5007)
    push $P101, $P5008
.annotate 'line', 2488
    $P5009 = _lex_param_0."name"()
    push $P101, $P5009
.annotate 'line', 2489
    find_lex $P5010, "$block"
    $P5011 = _lex_param_0."name"()
    $P5012 = $P5010."local_type"($P5011)
    set $P102, $P5012
    goto if311_end1419
  if311_else1418:
    .const 'Sub' $P5013 = 'cuid_284_1359572548.257' 
    capture_lex $P5013
    $P5014 = $P5013()
  if311_end1419:
.annotate 'line', 2499
    $P5015 = _lex_param_0."slurpy"()
    unless $P5015 goto if312_else1420 
    box $P5016, ":slurpy"
    push $P101, $P5016
.annotate 'line', 2501
    $P5017 = _lex_param_0."named"()
    set $P5019, $P5017
    unless $P5017 goto if313_end1423 
    box $P5018, ":named"
    push $P101, $P5018
    set $P5019, $P101
  if313_end1423:
    goto if312_end1421
  if312_else1420:
.annotate 'line', 2505
    $P5020 = _lex_param_0."named"()
    set $P5026, $P5020
    unless $P5020 goto if314_end1425 
.annotate 'line', 2506
    find_lex $P5022, "self"
    nqp_decontainerize $P5021, $P5022
    $P5023 = _lex_param_0."named"()
    $P5024 = $P5021."escape"($P5023)
    set $S5004, $P5024
    concat $S5003, ":named(", $S5004
    concat $S5002, $S5003, ")"
    box $P5025, $S5002
    push $P101, $P5025
    set $P5026, $P101
  if314_end1425:
  if312_end1421:
.annotate 'line', 2509
    $P5027 = _lex_param_0."default"()
    unless $P5027 goto if315_else1426 
    .const 'Sub' $P5028 = 'cuid_286_1359572548.257' 
    capture_lex $P5028
    $P5029 = $P5028()
    set $P5032, $P5029
    goto if315_end1427
  if315_else1426:
.annotate 'line', 2526
.annotate 'line', 2527
    find_lex $P5030, "$decls"
    join $S5005, " ", $P101
    $P5031 = $P5030."push_pirop"($S5005)
    set $P5032, $P5031
  if315_end1427:
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_284_1359572548.257") :anon :lex :outer("cuid_285_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2491
    .lex "$reg", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 2492
    find_lex $P5002, "$block"
    find_lex $P5003, "$_"
    $P5004 = $P5003."name"()
    $P5005 = $P5002."lex_reg"($P5004)
    set $P101, $P5005
    find_lex $P5006, "@param"
.annotate 'line', 2493
    find_lex $P5007, "$block"
    find_lex $P5008, "$_"
    $P5009 = $P5008."name"()
    $P5010 = $P5007."lexical_type_long"($P5009)
    push $P5006, $P5010
    find_lex $P5011, "@param"
    push $P5011, $P101
    find_lex $P5012, "%lex_params"
.annotate 'line', 2495
    find_lex $P5013, "$_"
    $P5014 = $P5013."name"()
    set $S5001, $P5014
    set $P5012[$S5001], $P101
.annotate 'line', 2496
    find_lex $P5015, "$block"
    find_lex $P5016, "$_"
    $P5017 = $P5016."name"()
    $P5018 = $P5015."lexical_type"($P5017)
    store_lex "$reg_type", $P5018
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_286_1359572548.257") :anon :lex :outer("cuid_285_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2509
    .lex "$o_flag", $P101 
    .lex "$lbl", $P102 
    .lex "$def", $P103 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    find_lex $P5004, "@param"
    box $P5005, ":optional"
    push $P5004, $P5005
.annotate 'line', 2512
    find_lex $P5006, "$decls"
    find_lex $P5007, "@param"
    join $S5001, " ", $P5007
    $P5006."push_pirop"($S5001)
.annotate 'line', 2515
    nqp_get_sc_object $P5011, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["Node"]
    unless_null $P5008, fallback1428
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5008, $P5012
  fallback1428:
    $P5013 = $P5008."unique"("haz_param")
    set $P101, $P5013
.annotate 'line', 2516
    find_lex $P5014, "$decls"
    set $S5004, $P101
    concat $S5003, ".param int ", $S5004
    concat $S5002, $S5003, " :opt_flag"
    $P5014."push_pirop"($S5002)
.annotate 'line', 2519
    nqp_get_sc_object $P5018, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5017, $P5018, "PIRT"
    get_who $P5016, $P5017
    set $P5015, $P5016["Label"]
    unless_null $P5015, fallback1429
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5015, $P5019
  fallback1429:
    $P5020 = $P5015."new"("default" :named("name"))
    set $P102, $P5020
.annotate 'line', 2520
    find_lex $P5022, "self"
    nqp_decontainerize $P5021, $P5022
    find_lex $P5023, "$_"
    $P5024 = $P5023."default"()
    find_lex $P5025, "$reg_type"
    $P5026 = $P5021."as_post"($P5024, $P5025 :named("want"))
    set $P103, $P5026
.annotate 'line', 2521
    find_lex $P5027, "$opts"
    $P5027."push_pirop"("if", $P101, $P102)
.annotate 'line', 2522
    find_lex $P5028, "$opts"
    $P5028."push"($P103)
.annotate 'line', 2523
    find_lex $P5029, "$opts"
    find_lex $P5031, "@param"
    set $P5030, $P5031[2]
    unless_null $P5030, fallback1430
    nqp_get_sc_object $P5032, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5030, $P5032
  fallback1430:
    $P5033 = $P103."result"()
    $P5029."push_pirop"("set", $P5030, $P5033)
.annotate 'line', 2524
    find_lex $P5034, "$opts"
    $P5035 = $P5034."push"($P102)
    .return ($P5035) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_287_1359572548.257") :anon :lex :outer("cuid_279_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2534
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2535
    find_lex $P5001, "$decls"
    find_lex $P5002, "$cap_lex_reg"
    set $S5005, $P5002
    concat $S5004, ".const 'Sub' ", $S5005
    concat $S5003, $S5004, " = '"
    set $S5006, _lex_param_0
    concat $S5002, $S5003, $S5006
    concat $S5001, $S5002, "'"
    $P5001."push_pirop"($S5001)
.annotate 'line', 2536
    find_lex $P5003, "$decls"
    find_lex $P5004, "$cap_lex_reg"
    set $S5008, $P5004
    concat $S5007, "capture_lex ", $S5008
    $P5005 = $P5003."push_pirop"($S5007)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_288_1359572548.257") :anon :lex :outer("cuid_279_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2543
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2544
    find_lex $P5001, "$decls"
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    $P5004 = _lex_param_0."name"()
    $P5005 = $P5002."escape"($P5004)
    set $S5004, $P5005
    concat $S5003, ".lex ", $S5004
    concat $S5002, $S5003, ", "
    find_lex $P5006, "$block"
    $P5007 = _lex_param_0."name"()
    $P5008 = $P5006."lex_reg"($P5007)
    set $S5005, $P5008
    concat $S5001, $S5002, $S5005
    $P5009 = $P5001."push_pirop"($S5001)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_289_1359572548.257") :anon :lex :outer("cuid_279_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2546
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2547
    find_lex $P5001, "$decls"
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    $P5004 = _lex_param_0."key"()
    $P5005 = $P5002."escape"($P5004)
    set $S5004, $P5005
    concat $S5003, ".lex ", $S5004
    concat $S5002, $S5003, ", "
    $P5006 = _lex_param_0."value"()
    set $S5005, $P5006
    concat $S5001, $S5002, $S5005
    $P5007 = $P5001."push_pirop"($S5001)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_290_1359572548.257") :anon :lex :outer("cuid_279_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2549
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2550
    find_lex $P5001, "$decls"
    find_lex $P5002, "$block"
    $P5003 = _lex_param_0."name"()
    $P5004 = $P5002."local_type_long"($P5003)
    set $S5004, $P5004
    concat $S5003, ".local ", $S5004
    concat $S5002, $S5003, " "
    $P5005 = _lex_param_0."name"()
    set $S5005, $P5005
    concat $S5001, $S5002, $S5005
    $P5006 = $P5001."push_pirop"($S5001)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_292_1359572548.257") :anon :lex :outer("cuid_279_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2563
    .const 'Sub' $P5027 = 'cuid_291_1359572548.257' 
    capture_lex $P5027 
    .lex "$*BLOCK", $P101 
    .lex "$ret_type", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    find_lex $P5003, "$block"
    set $P101, $P5003
    box $P5004, "P"
    set $P102, $P5004
    new $P5010, 'ExceptionHandler'
    set_label $P5010, catch_handler_3221458
    $P5010.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5010
.annotate 'line', 2566
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    find_lex $P5007, "$stmts"
    $P5008 = $P5007."result"()
    $P5009 = $P5005."infer_type"($P5008)
    set $P102, $P5009
    set $P5011, $P102
    pop_eh 
    goto skip_handler_3211457
  catch_handler_3221458:
    .get_results ($P5010) 
    set $I10001, 1
    set $P5010["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    finalize $P5010
    pop_upto_eh $P5010
    pop_eh 
    set $P5011, $P10001
    goto skip_handler_3211457
  skip_handler_3211457:
    set $S5001, $P102
    isne $I5001, $S5001, "P"
    box $P5017, $I5001
    set $P5016, $P5017
    unless $I5001 goto if324_end1462 
    find_lex $P5013, "%hll_force_return_boxing"
    find_lex $P5014, "$hll"
    set $S5002, $P5014
    set $P5012, $P5013[$S5002]
    unless_null $P5012, fallback1463
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5012, $P5015
  fallback1463:
    set $P5016, $P5012
  if324_end1462:
    unless $P5016 goto if323_else1459 
    .const 'Sub' $P5018 = 'cuid_291_1359572548.257' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5026, $P5019
    goto if323_end1460
  if323_else1459:
.annotate 'line', 2572
.annotate 'line', 2573
    find_lex $P5020, "$sub"
    find_lex $P5021, "$stmts"
    $P5020."push"($P5021)
.annotate 'line', 2574
    find_lex $P5022, "$sub"
    find_lex $P5023, "$stmts"
    $P5024 = $P5023."result"()
    set $S5005, $P5024
    concat $S5004, ".return (", $S5005
    concat $S5003, $S5004, ")"
    $P5025 = $P5022."push_pirop"($S5003)
    set $P5026, $P5025
  if323_end1460:
    .return ($P5026) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_291_1359572548.257") :anon :lex :outer("cuid_292_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2567
    .lex "$boxed", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 2568
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    find_lex $P5004, "$stmts"
    $P5005 = $P5002."coerce"($P5004, "P")
    set $P101, $P5005
.annotate 'line', 2569
    find_lex $P5006, "$sub"
    $P5006."push"($P101)
.annotate 'line', 2570
    find_lex $P5007, "$sub"
    $P5008 = $P101."result"()
    set $S5003, $P5008
    concat $S5002, ".return (", $S5003
    concat $S5001, $S5002, ")"
    $P5009 = $P5007."push_pirop"($S5001)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_294_1359572548.257") :anon :lex :outer("cuid_96_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2608
    .const 'Sub' $P5055 = 'cuid_293_1359572548.257' 
    capture_lex $P5055 
    .lex "$breg", $P101 
    .lex "$rtype", $P102 
    .lex "$rreg", $P103 
    .lex "$im_arg", $P104 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P104, $P5004
    new $P5016, 'ExceptionHandler'
    set_label $P5016, catch_handler_3361487
    $P5016.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5016
.annotate 'line', 2610
    find_dynamic_lex $P5005, "@*INNERS"
    unless_null $P5005, fallback1483
    nqp_get_sc_object $P5008, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["@INNERS"]
    unless_null $P5006, fallback1484
    nqp_get_sc_object $P5010, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5009, $P5010
    new $P5011, 'ResizablePMCArray'
    set $P5009["@INNERS"], $P5011
    set $P5006, $P5011
  fallback1484:
    unless_null $P5006, vivi_3341485
    die "Contextual @*INNERS not found"
    box $P5012, "Contextual @*INNERS not found"
    set $P5006, $P5012
  vivi_3341485:
    set $P5005, $P5006
  fallback1483:
    find_lex $P5013, "$node"
    $P5014 = $P5013."cuid"()
    $P5015 = $P5005."push"($P5014)
    set $P5017, $P5015
    pop_eh 
    goto skip_handler_3351486
  catch_handler_3361487:
    .get_results ($P5016) 
    set $I10001, 1
    set $P5016["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    finalize $P5016
    pop_upto_eh $P5016
    pop_eh 
    set $P5017, $P10001
    goto skip_handler_3351486
  skip_handler_3351486:
.annotate 'line', 2611
    find_dynamic_lex $P5018, "$*REGALLOC"
    unless_null $P5018, fallback1488
    nqp_get_sc_object $P5021, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$REGALLOC"]
    unless_null $P5019, fallback1489
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5019, $P5022
  fallback1489:
    unless_null $P5019, vivi_3371490
    die "Contextual $*REGALLOC not found"
    box $P5023, "Contextual $*REGALLOC not found"
    set $P5019, $P5023
  vivi_3371490:
    set $P5018, $P5019
  fallback1488:
    $P5024 = $P5018."fresh_p"()
    set $P101, $P5024
.annotate 'line', 2612
    find_lex $P5025, "$ops"
    set $S5005, $P101
    concat $S5004, ".const 'Sub' ", $S5005
    concat $S5003, $S5004, " = '"
    find_lex $P5026, "$node"
    $P5027 = $P5026."cuid"()
    set $S5006, $P5027
    concat $S5002, $S5003, $S5006
    concat $S5001, $S5002, "'"
    $P5025."push_pirop"($S5001)
.annotate 'line', 2613
    find_lex $P5028, "$ops"
    $P5028."push_pirop"("capture_lex", $P101)
.annotate 'line', 2616
    find_lex $P5029, "$node"
    $P5030 = $P5029."returns"()
    $P5031 = "&type_to_register_type"($P5030)
    set $S5008, $P5031
    downcase $S5007, $S5008
    box $P5032, $S5007
    set $P102, $P5032
.annotate 'line', 2617
    find_dynamic_lex $P5033, "$*REGALLOC"
    unless_null $P5033, fallback1491
    nqp_get_sc_object $P5036, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5035, $P5036
    set $P5034, $P5035["$REGALLOC"]
    unless_null $P5034, fallback1492
    nqp_get_sc_object $P5037, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5034, $P5037
  fallback1492:
    unless_null $P5034, vivi_3381493
    die "Contextual $*REGALLOC not found"
    box $P5038, "Contextual $*REGALLOC not found"
    set $P5034, $P5038
  vivi_3381493:
    set $P5033, $P5034
  fallback1491:
    set $S5010, $P102
    concat $S5009, "fresh_", $S5010
    $P5039 = $P5033.$S5009()
    set $P103, $P5039
    box $P5040, 0
    set $P104, $P5040
    new $P5047, 'ExceptionHandler'
    set_label $P5047, catch_handler_3411498
    $P5047.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5047
    find_dynamic_lex $P5041, "$*HAVE_IMM_ARG"
    unless_null $P5041, fallback1494
    nqp_get_sc_object $P5044, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5043, $P5044
    set $P5042, $P5043["$HAVE_IMM_ARG"]
    unless_null $P5042, fallback1495
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5042, $P5045
  fallback1495:
    unless_null $P5042, vivi_3391496
    die "Contextual $*HAVE_IMM_ARG not found"
    box $P5046, "Contextual $*HAVE_IMM_ARG not found"
    set $P5042, $P5046
  vivi_3391496:
    set $P5041, $P5042
  fallback1494:
    set $P104, $P5041
    set $P5048, $P104
    pop_eh 
    goto skip_handler_3401497
  catch_handler_3411498:
    .get_results ($P5047) 
    set $I10001, 1
    set $P5047["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    finalize $P5047
    pop_upto_eh $P5047
    pop_eh 
    set $P5048, $P10001
    goto skip_handler_3401497
  skip_handler_3401497:
    unless $P104 goto if342_else1499 
.annotate 'line', 2623
    .const 'Sub' $P5050 = 'cuid_293_1359572548.257' 
    capture_lex $P5050
    newclosure $P5049, $P5050
    store_dynamic_lex "$*IMM_ARG", $P5049
    goto if342_end1500
  if342_else1499:
.annotate 'line', 2628
.annotate 'line', 2629
    find_lex $P5051, "$ops"
    $P5052 = $P5051."push_pirop"("call", $P101, $P103 :named("result"))
  if342_end1500:
.annotate 'line', 2631
    find_lex $P5053, "$ops"
    $P5054 = $P5053."result"($P103)
    .return ($P5054) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_293_1359572548.257") :anon :lex :outer("cuid_294_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2624
    .param pmc _lex_param_0 
    .lex "$arg", _lex_param_0 
.annotate 'line', 2625
    find_lex $P5001, "$ops"
    find_lex $P5002, "$breg"
    find_lex $P5003, "$rreg"
    $P5004 = $P5001."push_pirop"("call", $P5002, _lex_param_0, $P5003 :named("result"))
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_295_1359572548.257") :anon :lex :outer("cuid_96_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2633
    .lex "$breg", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    new $P5013, 'ExceptionHandler'
    set_label $P5013, catch_handler_3471509
    $P5013.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5013
.annotate 'line', 2635
    find_dynamic_lex $P5002, "@*INNERS"
    unless_null $P5002, fallback1505
    nqp_get_sc_object $P5005, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["@INNERS"]
    unless_null $P5003, fallback1506
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5006, $P5007
    new $P5008, 'ResizablePMCArray'
    set $P5006["@INNERS"], $P5008
    set $P5003, $P5008
  fallback1506:
    unless_null $P5003, vivi_3451507
    die "Contextual @*INNERS not found"
    box $P5009, "Contextual @*INNERS not found"
    set $P5003, $P5009
  vivi_3451507:
    set $P5002, $P5003
  fallback1505:
    find_lex $P5010, "$node"
    $P5011 = $P5010."cuid"()
    $P5012 = $P5002."push"($P5011)
    set $P5014, $P5012
    pop_eh 
    goto skip_handler_3461508
  catch_handler_3471509:
    .get_results ($P5013) 
    set $I10001, 1
    set $P5013["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    finalize $P5013
    pop_upto_eh $P5013
    pop_eh 
    set $P5014, $P10001
    goto skip_handler_3461508
  skip_handler_3461508:
.annotate 'line', 2636
    find_dynamic_lex $P5015, "$*REGALLOC"
    unless_null $P5015, fallback1510
    nqp_get_sc_object $P5018, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$REGALLOC"]
    unless_null $P5016, fallback1511
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5016, $P5019
  fallback1511:
    unless_null $P5016, vivi_3481512
    die "Contextual $*REGALLOC not found"
    box $P5020, "Contextual $*REGALLOC not found"
    set $P5016, $P5020
  vivi_3481512:
    set $P5015, $P5016
  fallback1510:
    $P5021 = $P5015."fresh_p"()
    set $P101, $P5021
.annotate 'line', 2637
    find_lex $P5022, "$ops"
    set $S5005, $P101
    concat $S5004, ".const 'Sub' ", $S5005
    concat $S5003, $S5004, " = '"
    find_lex $P5023, "$node"
    $P5024 = $P5023."cuid"()
    set $S5006, $P5024
    concat $S5002, $S5003, $S5006
    concat $S5001, $S5002, "'"
    $P5022."push_pirop"($S5001)
.annotate 'line', 2638
    find_lex $P5025, "$ops"
    $P5025."push_pirop"("capture_lex", $P101)
.annotate 'line', 2639
    find_lex $P5026, "$ops"
    $P5027 = $P5026."result"($P101)
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "as_post" :subid("cuid_97_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2644
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("want") :optional 
    .param int haz_param_17 :opt_flag 
    if haz_param_17, default1514
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set _lex_param_2, $P5006
  default1514:
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    .lex "$want", _lex_param_2 
.annotate 'line', 2645
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = _lex_param_1."list"()
    $P5003 = _lex_param_1."resultchild"()
    $P5004 = _lex_param_1."node"()
    $P5005 = $P5001."compile_all_the_stmts"($P5002, $P5003, $P5004 :named("node"))
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "as_post" :subid("cuid_98_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2648
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("want") :optional 
    .param int haz_param_18 :opt_flag 
    .const 'Sub' $P5011 = 'cuid_296_1359572548.257' 
    capture_lex $P5011 
    if haz_param_18, default1518
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set _lex_param_2, $P5010
  default1518:
    .lex "$orig_reg", $P101 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    .lex "$want", _lex_param_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    find_dynamic_lex $P5002, "$*REGALLOC"
    unless_null $P5002, fallback1515
    nqp_get_sc_object $P5005, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$REGALLOC"]
    unless_null $P5003, fallback1516
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5006
  fallback1516:
    unless_null $P5003, vivi_3491517
    die "Contextual $*REGALLOC not found"
    box $P5007, "Contextual $*REGALLOC not found"
    set $P5003, $P5007
  vivi_3491517:
    set $P5002, $P5003
  fallback1515:
    set $P101, $P5002
    .const 'Sub' $P5008 = 'cuid_296_1359572548.257' 
    capture_lex $P5008
    $P5009 = $P5008()
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_296_1359572548.257") :anon :lex :outer("cuid_98_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2650
    .lex "$*REGALLOC", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 2651
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 61
    find_lex $P5003, "$orig_reg"
    $P5004 = $P5002."new"($P5003)
    set $P101, $P5004
.annotate 'line', 2652
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    find_lex $P5007, "$node"
    $P5008 = $P5007."list"()
    find_lex $P5009, "$node"
    $P5010 = $P5009."resultchild"()
    find_lex $P5011, "$node"
    $P5012 = $P5011."node"()
    $P5013 = $P5005."compile_all_the_stmts"($P5008, $P5010, $P5012 :named("node"))
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "compile_all_the_stmts" :subid("cuid_99_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2656
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_19 :opt_flag 
    .param pmc _lex_param_3 :named("node") :optional 
    .param int haz_param_20 :opt_flag 
    .const 'Sub' $P5026 = 'cuid_297_1359572548.257' 
    capture_lex $P5026 
    if haz_param_19, default1544
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set _lex_param_2, $P5024
  default1544:
    if haz_param_20, default1545
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set _lex_param_3, $P5025
  default1545:
    .lex "$last", $P101 
    .lex "$ops", $P102 
    .lex "$i", $I101 
    .lex "$n", $I102 
    .lex "$all_void", $P103 
    .lex "self", _lex_param_0 
    .lex "@stmts", _lex_param_1 
    .lex "$resultchild", _lex_param_2 
    .lex "$node", _lex_param_3 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    set $I101, 0
    set $I102, 0
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
.annotate 'line', 2658
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5006, $P5007, "PIRT"
    get_who $P5005, $P5006
    set $P5004, $P5005["Ops"]
    unless_null $P5004, fallback1519
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5008
  fallback1519:
    $P5009 = $P5004."new"()
    set $P102, $P5009
    unless _lex_param_3 goto if350_end1521 
.annotate 'line', 2659
    $P5010 = $P102."node"(_lex_param_3)
  if350_end1521:
    set $I101, 0
    set $N5001, _lex_param_1
    set $I5001, $N5001
    set $I102, $I5001
    find_dynamic_lex $P5011, "$*WANT"
    unless_null $P5011, fallback1522
    nqp_get_sc_object $P5014, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$WANT"]
    unless_null $P5012, fallback1523
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5012, $P5015
  fallback1523:
    unless_null $P5012, vivi_3511524
    die "Contextual $*WANT not found"
    box $P5016, "Contextual $*WANT not found"
    set $P5012, $P5016
  vivi_3511524:
    set $P5011, $P5012
  fallback1522:
    set $S5001, $P5011
    iseq $I5002, $S5001, "v"
    box $P5017, $I5002
    set $P103, $P5017
    defined $I5003, _lex_param_2
    if $I5003 goto unless352_end1526 
.annotate 'line', 2663
    set $N5003, $I102
    set $N5004, 1
    sub $N5002, $N5003, $N5004
    box $P5018, $N5002
    set _lex_param_2, $P5018
  unless352_end1526:
    set $P5019, _lex_param_1
    iter $P5021, _lex_param_1
  for_next1541:
    unless $P5021, for_done1543
    shift $P5023, $P5021
  for_redo1542:
    .const 'Sub' $P5022 = 'cuid_297_1359572548.257' 
    capture_lex $P5022
    $P5019 = $P5022($P5023)
    goto for_next1541
  for_done1543:
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_297_1359572548.257") :anon :lex :outer("cuid_99_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2666
    .param pmc _lex_param_0 
    .lex "$void", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    find_lex $P5002, "$all_void"
    set $P5004, $P5002
    if $P5002 goto unless353_end1528 
    find_lex $I5002, "$i"
    set $N5001, $I5002
    find_lex $P5003, "$resultchild"
    set $N5002, $P5003
    isne $I5001, $N5001, $N5002
    box $P5005, $I5001
    set $P5004, $P5005
  unless353_end1528:
    set $P101, $P5004
    unless $P101 goto if354_else1529 
.annotate 'line', 2668
    nqp_get_sc_object $P5009, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Want"]
    unless_null $P5006, fallback1533
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5006, $P5010
  fallback1533:
    type_check $I5003, _lex_param_0, $P5006
    unless $I5003 goto if355_end1532 
.annotate 'line', 2669
.annotate 'line', 2670
    $P5011 = "&want"(_lex_param_0, "v")
    set _lex_param_0, $P5011
  if355_end1532:
.annotate 'line', 2672
    find_lex $P5013, "self"
    nqp_decontainerize $P5012, $P5013
    $P5014 = $P5012."as_post"(_lex_param_0, "v" :named("want"))
    store_lex "$last", $P5014
    goto if354_end1530
  if354_else1529:
.annotate 'line', 2674
.annotate 'line', 2675
    find_lex $P5016, "self"
    nqp_decontainerize $P5015, $P5016
    $P5017 = $P5015."as_post"(_lex_param_0)
    store_lex "$last", $P5017
  if354_end1530:
    set $P5023, $P101
    unless $P101 goto if357_end1537 
    nqp_get_sc_object $P5021, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["Var"]
    unless_null $P5018, fallback1538
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5018, $P5022
  fallback1538:
    type_check $I5004, _lex_param_0, $P5018
    box $P5024, $I5004
    set $P5023, $P5024
  if357_end1537:
    if $P5023 goto unless356_end1535 
.annotate 'line', 2677
    find_lex $P5025, "$ops"
    find_lex $P5026, "$last"
    $P5027 = $P5025."push"($P5026)
  unless356_end1535:
    find_lex $P5028, "$resultchild"
    set $N5003, $P5028
    find_lex $I5006, "$i"
    set $N5004, $I5006
    iseq $I5005, $N5003, $N5004
    unless $I5005 goto if358_end1540 
.annotate 'line', 2679
.annotate 'line', 2680
    find_lex $P5029, "$ops"
    find_lex $P5030, "$last"
    $P5031 = $P5030."result"()
    $P5032 = $P5029."result"($P5031)
  if358_end1540:
    find_lex $I5007, "$i"
    set $N5006, $I5007
    set $N5007, 1
    add $N5005, $N5006, $N5007
    set $I5008, $N5005
    store_lex "$i", $I5008
    .return ($I5008) 
.end
.HLL "nqp"
.namespace []
.sub "apply_context" :subid("cuid_100_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2687
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    .lex "$type", _lex_param_2 
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Want"]
    unless_null $P5001, fallback1548
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5005
  fallback1548:
    type_check $I5001, _lex_param_1, $P5001
    unless $I5001 goto if359_else1546 
.annotate 'line', 2689
    $P5006 = "&want"(_lex_param_1, _lex_param_2)
    set $P5007, $P5006
    goto if359_end1547
  if359_else1546:
    set $P5007, _lex_param_1
  if359_end1547:
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "as_post" :subid("cuid_101_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2704
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("want") :optional 
    .param int haz_param_21 :opt_flag 
    .const 'Sub' $P5028 = 'cuid_298_1359572548.257' 
    capture_lex $P5028 
    if haz_param_21, default1561
    nqp_get_sc_object $P5027, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set _lex_param_2, $P5027
  default1561:
    .lex "$hll", $P101 
    .lex "$result", $P102 
    .lex "$err", $P103 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    .lex "$want", _lex_param_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    box $P5004, ""
    set $P101, $P5004
    new $P5011, 'ExceptionHandler'
    set_label $P5011, catch_handler_3621553
    $P5011.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5011
    find_dynamic_lex $P5005, "$*HLL"
    unless_null $P5005, fallback1549
    nqp_get_sc_object $P5008, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$HLL"]
    unless_null $P5006, fallback1550
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5006, $P5009
  fallback1550:
    unless_null $P5006, vivi_3601551
    die "Contextual $*HLL not found"
    box $P5010, "Contextual $*HLL not found"
    set $P5006, $P5010
  vivi_3601551:
    set $P5005, $P5006
  fallback1549:
    set $P101, $P5005
    set $P5012, $P101
    pop_eh 
    goto skip_handler_3611552
  catch_handler_3621553:
    .get_results ($P5011) 
    set $I10001, 1
    set $P5011["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    finalize $P5011
    pop_upto_eh $P5011
    pop_eh 
    set $P5012, $P10001
    goto skip_handler_3611552
  skip_handler_3611552:
    new $P5023, 'ExceptionHandler'
    set_label $P5023, catch_handler_3661558
    $P5023.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5023
.annotate 'line', 2709
    new $P5021, 'ExceptionHandler'
    set_label $P5021, catch_handler_3641556
    $P5021.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5021
.annotate 'line', 2710
    nqp_get_sc_object $P5016, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Operations"]
    unless_null $P5013, fallback1554
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5013, $P5017
  fallback1554:
    nqp_decontainerize $P5018, _lex_param_0
    $P5019 = $P5013."compile_op"($P5018, $P101, _lex_param_1)
    set $P102, $P5019
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5022, $P5020
    pop_eh 
    goto skip_handler_3631555
  catch_handler_3641556:
    .get_results ($P5021) 
    .const 'Sub' $P10001 = 'cuid_298_1359572548.257' 
    capture_lex $P10001
    $P10001($P5021)
    set $I10001, 1
    set $P5021["handled"], $I10001
    nqp_get_sc_object $P10002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    finalize $P5021
    pop_upto_eh $P5021
    pop_eh 
    set $P5022, $P10002
    goto skip_handler_3631555
  skip_handler_3631555:
    set $P5024, $P5022
    pop_eh 
    goto skip_handler_3651557
  catch_handler_3661558:
    .get_results ($P5023) 
    set $I10001, 1
    set $P5023["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    finalize $P5023
    pop_upto_eh $P5023
    pop_eh 
    set $P5024, $P10001
    goto skip_handler_3651557
  skip_handler_3651557:
    unless $P103 goto if367_end1560 
.annotate 'line', 2713
.annotate 'line', 2714
    $P5025 = _lex_param_1."op"()
    set $S5003, $P5025
    concat $S5002, "Error while compiling op ", $S5003
    set $S5005, $P103
    concat $S5004, ": ", $S5005
    concat $S5001, $S5002, $S5004
    box $P5026, $S5001
    die $P5026
  if367_end1560:
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_298_1359572548.257") :anon :lex :outer("cuid_101_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2711
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
    store_lex "$err", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "as_post" :subid("cuid_102_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2719
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("want") :optional 
    .param int haz_param_22 :opt_flag 
    .const 'Sub' $P5044 = 'cuid_300_1359572548.257' 
    capture_lex $P5044 
    .const 'Sub' $P5044 = 'cuid_301_1359572548.257' 
    capture_lex $P5044 
    if haz_param_22, default1590
    nqp_get_sc_object $P5043, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set _lex_param_2, $P5043
  default1590:
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    .lex "$want", _lex_param_2 
    root_new $P101, ['parrot';'Continuation']
    set_label $P101, lexotic_1562
    .lex "RETURN", $P101
.annotate 'line', 2720
    $P5001 = _lex_param_1."supports"("parrot")
    unless $P5001 goto if368_else1564 
.annotate 'line', 2721
    nqp_decontainerize $P5003, _lex_param_0
    $P5004 = _lex_param_1."alternative"("parrot")
    $P5005 = $P5003."as_post"($P5004)
    find_lex $P5002, "RETURN"
    $P5006 = $P5002($P5005)
    set $P5042, $P5006
    goto if368_end1565
  if368_else1564:
.annotate 'line', 2723
    $P5007 = _lex_param_1."supports"("pirop")
    unless $P5007 goto if369_else1566 
.annotate 'line', 2724
    nqp_get_sc_object $P5011, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["Operations"]
    unless_null $P5008, fallback1568
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5008, $P5012
  fallback1568:
    nqp_decontainerize $P5013, _lex_param_0
    $P5014 = _lex_param_1."alternative"("pirop")
    $P5015 = _lex_param_1."list"()
    $P5016 = $P5008."compile_pirop"($P5013, $P5014, $P5015)
    set $P5041, $P5016
    goto if369_end1567
  if369_else1566:
.annotate 'line', 2726
    $P5017 = _lex_param_1."supports"("pir")
    unless $P5017 goto if370_else1569 
    .const 'Sub' $P5018 = 'cuid_300_1359572548.257' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5040, $P5019
    goto if370_end1570
  if370_else1569:
.annotate 'line', 2740
    $P5020 = _lex_param_1."supports"("pirconst")
    unless $P5020 goto if374_else1579 
    .const 'Sub' $P5021 = 'cuid_301_1359572548.257' 
    capture_lex $P5021
    $P5022 = $P5021()
    set $P5039, $P5022
    goto if374_end1580
  if374_else1579:
.annotate 'line', 2747
    $P5023 = _lex_param_1."supports"("loadlibs")
    unless $P5023 goto if376_else1584 
.annotate 'line', 2748
    find_dynamic_lex $P5024, "$*BLOCK"
    unless_null $P5024, fallback1586
    nqp_get_sc_object $P5027, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5026, $P5027
    set $P5025, $P5026["$BLOCK"]
    unless_null $P5025, fallback1587
    nqp_get_sc_object $P5028, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5025, $P5028
  fallback1587:
    unless_null $P5025, vivi_3771588
    die "Contextual $*BLOCK not found"
    box $P5029, "Contextual $*BLOCK not found"
    set $P5025, $P5029
  vivi_3771588:
    set $P5024, $P5025
  fallback1586:
    $P5030 = _lex_param_1."alternative"("loadlibs")
    $P5024."add_loadlibs"($P5030)
.annotate 'line', 2749
    nqp_get_sc_object $P5034, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5033, $P5034, "PIRT"
    get_who $P5032, $P5033
    set $P5031, $P5032["Ops"]
    unless_null $P5031, fallback1589
    nqp_get_sc_object $P5035, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5031, $P5035
  fallback1589:
    $P5036 = $P5031."new"()
    set $P5038, $P5036
    goto if376_end1585
  if376_else1584:
.annotate 'line', 2751
    box $P5037, "To compile on the Parrot backend, QAST::VM must have an alternative 'parrot', 'pirop', 'pir', 'pircosnt' or 'loadlibs'"
    die $P5037
    set $P5038, $P5037
  if376_end1585:
    set $P5039, $P5038
  if374_end1580:
    set $P5040, $P5039
  if370_end1570:
    set $P5041, $P5040
  if369_end1567:
    set $P5042, $P5041
  if368_end1565:
    goto lexotic_1563
  lexotic_1562:
    .get_results ($P5042)
  lexotic_1563:
    .return ($P5042) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_300_1359572548.257") :anon :lex :outer("cuid_102_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2726
    .const 'Sub' $P5021 = 'cuid_299_1359572548.257' 
    capture_lex $P5021 
    .lex "$ops", $P101 
    .lex "$pir", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 2727
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5005, $P5006, "PIRT"
    get_who $P5004, $P5005
    set $P5003, $P5004["Ops"]
    unless_null $P5003, fallback1571
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5007
  fallback1571:
    $P5008 = $P5003."new"()
    set $P101, $P5008
.annotate 'line', 2728
    find_lex $P5009, "$node"
    $P5010 = $P5009."node"()
    unless $P5010 goto if371_end1573 
    find_lex $P5011, "$node"
    $P5012 = $P5011."node"()
    $P5013 = $P101."node"($P5012)
  if371_end1573:
.annotate 'line', 2729
    find_lex $P5014, "$node"
    $P5015 = $P5014."alternative"("pir")
    set $P102, $P5015
    set $S5001, $P102
    index $I5002, $S5001, "%r", 0
    set $N5001, $I5002
    set $N5002, 0
    isge $I5001, $N5001, $N5002
    unless $I5001 goto if372_else1574 
    .const 'Sub' $P5016 = 'cuid_299_1359572548.257' 
    capture_lex $P5016
    $P5017 = $P5016()
    goto if372_end1575
  if372_else1574:
.annotate 'line', 2735
.annotate 'line', 2736
    $P5018 = $P101."push_pirop"("inline", $P102)
  if372_end1575:
    find_lex $P5019, "RETURN"
    $P5020 = $P5019($P101)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_299_1359572548.257") :anon :lex :outer("cuid_300_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2730
    .lex "$reg", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 2731
    find_dynamic_lex $P5002, "$*REGALLOC"
    unless_null $P5002, fallback1576
    nqp_get_sc_object $P5005, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$REGALLOC"]
    unless_null $P5003, fallback1577
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5006
  fallback1577:
    unless_null $P5003, vivi_3731578
    die "Contextual $*REGALLOC not found"
    box $P5007, "Contextual $*REGALLOC not found"
    set $P5003, $P5007
  vivi_3731578:
    set $P5002, $P5003
  fallback1576:
    $P5008 = $P5002."fresh_p"()
    set $P101, $P5008
.annotate 'line', 2732
    find_lex $P5009, "$ops"
    find_lex $P5010, "$pir"
    $P5009."push_pirop"("inline", $P5010, $P101 :named("result"))
.annotate 'line', 2733
    find_lex $P5011, "$ops"
    $P5012 = $P5011."result"($P101)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_301_1359572548.257") :anon :lex :outer("cuid_102_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2740
    .lex "$ops", $P101 
    .lex "$name", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 2741
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5005, $P5006, "PIRT"
    get_who $P5004, $P5005
    set $P5003, $P5004["Ops"]
    unless_null $P5003, fallback1581
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5007
  fallback1581:
    $P5008 = $P5003."new"()
    set $P101, $P5008
.annotate 'line', 2742
    find_lex $P5009, "$node"
    $P5010 = $P5009."node"()
    unless $P5010 goto if375_end1583 
    find_lex $P5011, "$node"
    $P5012 = $P5011."node"()
    $P5013 = $P101."node"($P5012)
  if375_end1583:
.annotate 'line', 2743
    find_lex $P5014, "$node"
    $P5015 = $P5014."alternative"("pirconst")
    set $P102, $P5015
.annotate 'line', 2744
    set $S5002, $P102
    concat $S5001, ".", $S5002
    $P101."result"($S5001)
    find_lex $P5016, "RETURN"
    $P5017 = $P5016($P101)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "as_post" :subid("cuid_103_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2756
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("want") :optional 
    .param int haz_param_23 :opt_flag 
    if haz_param_23, default1591
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set _lex_param_2, $P5003
  default1591:
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    .lex "$want", _lex_param_2 
.annotate 'line', 2757
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."compile_var"(_lex_param_1)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "as_post" :subid("cuid_104_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2760
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("want") :optional 
    .param int haz_param_24 :opt_flag 
    .const 'Sub' $P5014 = 'cuid_303_1359572548.257' 
    capture_lex $P5014 
    if haz_param_24, default1601
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set _lex_param_2, $P5013
  default1601:
    .lex "$post", $P101 
    .lex "$result", $P102 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    .lex "$want", _lex_param_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 2761
    nqp_decontainerize $P5003, _lex_param_0
    $P5004 = $P5003."compile_var"(_lex_param_1)
    set $P101, $P5004
    find_dynamic_lex $P5005, "$*BINDVAL"
    unless_null $P5005, fallback1594
    nqp_get_sc_object $P5008, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$BINDVAL"]
    unless_null $P5006, fallback1595
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5006, $P5009
  fallback1595:
    unless_null $P5006, vivi_3791596
    die "Contextual $*BINDVAL not found"
    box $P5010, "Contextual $*BINDVAL not found"
    set $P5006, $P5010
  vivi_3791596:
    set $P5005, $P5006
  fallback1594:
    unless $P5005 goto if378_else1592 
.annotate 'line', 2763
    set $P102, $P101
    goto if378_end1593
  if378_else1592:
    .const 'Sub' $P5011 = 'cuid_303_1359572548.257' 
    capture_lex $P5011
    $P5012 = $P5011()
  if378_end1593:
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_303_1359572548.257") :anon :lex :outer("cuid_104_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2766
    .const 'Sub' $P5025 = 'cuid_302_1359572548.257' 
    capture_lex $P5025 
    .lex "$lbl", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 2767
    nqp_get_sc_object $P5005, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5004, $P5005, "PIRT"
    get_who $P5003, $P5004
    set $P5002, $P5003["Label"]
    unless_null $P5002, fallback1597
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5002, $P5006
  fallback1597:
    $P5007 = $P5002."new"("fallback" :named("name"))
    set $P101, $P5007
.annotate 'line', 2768
    nqp_get_sc_object $P5011, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5010, $P5011, "PIRT"
    get_who $P5009, $P5010
    set $P5008, $P5009["Ops"]
    unless_null $P5008, fallback1598
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5008, $P5012
  fallback1598:
    find_lex $P5013, "$post"
    $P5014 = $P5008."new"($P5013 :named("result"))
    store_lex "$result", $P5014
.annotate 'line', 2769
    find_lex $P5015, "$result"
    find_lex $P5016, "$post"
    $P5015."push"($P5016)
.annotate 'line', 2770
    find_lex $P5018, "self"
    nqp_decontainerize $P5017, $P5018
    find_lex $P5019, "$post"
    $P5020 = $P5017."infer_type"($P5019)
    set $S5002, $P5020
    downcase $S5001, $S5002
    iseq $I5001, $S5001, "p"
    box $P5024, $I5001
    set $P5023, $P5024
    unless $I5001 goto if380_end1600 
    .const 'Sub' $P5021 = 'cuid_302_1359572548.257' 
    capture_lex $P5021
    $P5022 = $P5021()
    set $P5023, $P5022
  if380_end1600:
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_302_1359572548.257") :anon :lex :outer("cuid_303_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2770
    .lex "$fbpost", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 2771
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    find_lex $P5004, "$node"
    $P5005 = $P5004."fallback"()
    $P5006 = $P5002."as_post"($P5005, "P" :named("want"))
    set $P101, $P5006
.annotate 'line', 2772
    find_lex $P5007, "$result"
    find_lex $P5008, "$post"
    find_lex $P5009, "$lbl"
    $P5007."push_pirop"("unless_null", $P5008, $P5009)
.annotate 'line', 2773
    find_lex $P5010, "$result"
    $P5010."push"($P101)
.annotate 'line', 2774
    find_lex $P5011, "$result"
    find_lex $P5012, "$post"
    $P5011."push_pirop"("set", $P5012, $P101)
.annotate 'line', 2775
    find_lex $P5013, "$result"
    find_lex $P5014, "$lbl"
    $P5015 = $P5013."push"($P5014)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "compile_var" :subid("cuid_105_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2781
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5126 = 'cuid_305_1359572548.257' 
    capture_lex $P5126 
    .const 'Sub' $P5126 = 'cuid_307_1359572548.257' 
    capture_lex $P5126 
    .const 'Sub' $P5126 = 'cuid_310_1359572548.257' 
    capture_lex $P5126 
    .const 'Sub' $P5126 = 'cuid_319_1359572548.257' 
    capture_lex $P5126 
    .lex "$scope", $P101 
    .lex "$decl", $P102 
    .lex "$name", $P103 
    .lex "$ops", $P104 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P104, $P5004
.annotate 'line', 2782
    $P5005 = _lex_param_1."scope"()
    set $P101, $P5005
.annotate 'line', 2783
    $P5006 = _lex_param_1."decl"()
    set $P102, $P5006
    unless $P102 goto if381_end1603 
.annotate 'line', 2787
    set $S5001, $P102
    iseq $I5001, $S5001, "param"
    unless $I5001 goto if382_else1604 
.annotate 'line', 2790
    set $S5002, $P101
    iseq $I5002, $S5002, "local"
    set $I5004, $I5002
    if $I5002 goto unless384_end1609 
    set $S5003, $P101
    iseq $I5003, $S5003, "lexical"
    set $I5004, $I5003
  unless384_end1609:
    unless $I5004 goto if383_else1606 
.annotate 'line', 2791
.annotate 'line', 2792
    find_dynamic_lex $P5007, "$*BLOCK"
    unless_null $P5007, fallback1610
    nqp_get_sc_object $P5010, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["$BLOCK"]
    unless_null $P5008, fallback1611
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5008, $P5011
  fallback1611:
    unless_null $P5008, vivi_3851612
    die "Contextual $*BLOCK not found"
    box $P5012, "Contextual $*BLOCK not found"
    set $P5008, $P5012
  vivi_3851612:
    set $P5007, $P5008
  fallback1610:
    $P5013 = $P5007."add_param"(_lex_param_1)
    set $P5015, $P5013
    goto if383_end1607
  if383_else1606:
.annotate 'line', 2794
    set $S5006, $P101
    concat $S5005, "Parameter cannot have scope '", $S5006
    concat $S5004, $S5005, "'; use 'local' or 'lexical'"
    box $P5014, $S5004
    die $P5014
    set $P5015, $P5014
  if383_end1607:
    set $P5035, $P5015
    goto if382_end1605
  if382_else1604:
    set $S5007, $P102
    iseq $I5005, $S5007, "var"
    unless $I5005 goto if386_else1613 
.annotate 'line', 2798
    set $S5008, $P101
    iseq $I5006, $S5008, "local"
    unless $I5006 goto if387_else1615 
.annotate 'line', 2799
.annotate 'line', 2800
    find_dynamic_lex $P5016, "$*BLOCK"
    unless_null $P5016, fallback1617
    nqp_get_sc_object $P5019, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5018, $P5019
    set $P5017, $P5018["$BLOCK"]
    unless_null $P5017, fallback1618
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5017, $P5020
  fallback1618:
    unless_null $P5017, vivi_3881619
    die "Contextual $*BLOCK not found"
    box $P5021, "Contextual $*BLOCK not found"
    set $P5017, $P5021
  vivi_3881619:
    set $P5016, $P5017
  fallback1617:
    $P5022 = $P5016."add_local"(_lex_param_1)
    set $P5032, $P5022
    goto if387_end1616
  if387_else1615:
    set $S5009, $P101
    iseq $I5007, $S5009, "lexical"
    unless $I5007 goto if389_else1620 
.annotate 'line', 2802
.annotate 'line', 2803
    find_dynamic_lex $P5023, "$*BLOCK"
    unless_null $P5023, fallback1622
    nqp_get_sc_object $P5026, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5025, $P5026
    set $P5024, $P5025["$BLOCK"]
    unless_null $P5024, fallback1623
    nqp_get_sc_object $P5027, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5024, $P5027
  fallback1623:
    unless_null $P5024, vivi_3901624
    die "Contextual $*BLOCK not found"
    box $P5028, "Contextual $*BLOCK not found"
    set $P5024, $P5028
  vivi_3901624:
    set $P5023, $P5024
  fallback1622:
    $P5029 = $P5023."add_lexical"(_lex_param_1)
    set $P5031, $P5029
    goto if389_end1621
  if389_else1620:
.annotate 'line', 2805
    set $S5012, $P101
    concat $S5011, "Cannot declare variable with scope '", $S5012
    concat $S5010, $S5011, "'; use 'local' or 'lexical'"
    box $P5030, $S5010
    die $P5030
    set $P5031, $P5030
  if389_end1621:
    set $P5032, $P5031
  if387_end1616:
    set $P5034, $P5032
    goto if386_end1614
  if386_else1613:
.annotate 'line', 2809
    set $S5015, $P102
    concat $S5014, "Don't understand declaration type '", $S5015
    concat $S5013, $S5014, "'"
    box $P5033, $S5013
    die $P5033
    set $P5034, $P5033
  if386_end1614:
    set $P5035, $P5034
  if382_end1605:
  if381_end1603:
.annotate 'line', 2816
    $P5036 = _lex_param_1."name"()
    set $P103, $P5036
    set $S5016, $P101
    iseq $I5008, $S5016, ""
    unless $I5008 goto if391_end1626 
    .const 'Sub' $P5037 = 'cuid_305_1359572548.257' 
    capture_lex $P5037
    $P5038 = $P5037()
  if391_end1626:
.annotate 'line', 2835
    nqp_get_sc_object $P5042, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5041, $P5042, "PIRT"
    get_who $P5040, $P5041
    set $P5039, $P5040["Ops"]
    unless_null $P5039, fallback1640
    nqp_get_sc_object $P5043, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5039, $P5043
  fallback1640:
    $P5044 = $P5039."new"()
    set $P104, $P5044
.annotate 'line', 2836
    $P5045 = _lex_param_1."node"()
    unless $P5045 goto if396_end1642 
    $P5046 = _lex_param_1."node"()
    $P5047 = $P104."node"($P5046)
  if396_end1642:
    set $S5017, $P101
    iseq $I5009, $S5017, "local"
    unless $I5009 goto if397_else1643 
.annotate 'line', 2837
.annotate 'line', 2838
    find_dynamic_lex $P5048, "$*BLOCK"
    unless_null $P5048, fallback1647
    nqp_get_sc_object $P5051, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5050, $P5051
    set $P5049, $P5050["$BLOCK"]
    unless_null $P5049, fallback1648
    nqp_get_sc_object $P5052, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5049, $P5052
  fallback1648:
    unless_null $P5049, vivi_3991649
    die "Contextual $*BLOCK not found"
    box $P5053, "Contextual $*BLOCK not found"
    set $P5049, $P5053
  vivi_3991649:
    set $P5048, $P5049
  fallback1647:
    $P5054 = $P5048."local_type"($P103)
    unless $P5054 goto if398_else1645 
    .const 'Sub' $P5055 = 'cuid_307_1359572548.257' 
    capture_lex $P5055
    $P5056 = $P5055($P5054)
    set $P5058, $P5056
    goto if398_end1646
  if398_else1645:
.annotate 'line', 2846
    set $S5020, $P103
    concat $S5019, "Cannot reference undeclared local '", $S5020
    concat $S5018, $S5019, "'"
    box $P5057, $S5018
    die $P5057
    set $P5058, $P5057
  if398_end1646:
    goto if397_end1644
  if397_else1643:
    set $S5021, $P101
    iseq $I5010, $S5021, "lexical"
    set $I5012, $I5010
    if $I5010 goto unless404_end1661 
    set $S5022, $P101
    iseq $I5011, $S5022, "contextual"
    set $I5012, $I5011
  unless404_end1661:
    unless $I5012 goto if403_else1658 
    .const 'Sub' $P5059 = 'cuid_310_1359572548.257' 
    capture_lex $P5059
    $P5060 = $P5059()
    set $P5125, $P5060
    goto if403_end1659
  if403_else1658:
    set $S5023, $P101
    iseq $I5013, $S5023, "attribute"
    unless $I5013 goto if427_else1723 
    .const 'Sub' $P5061 = 'cuid_319_1359572548.257' 
    capture_lex $P5061
    $P5062 = $P5061()
    set $P5124, $P5062
    goto if427_end1724
  if427_else1723:
    set $S5024, $P101
    iseq $I5014, $S5024, "positional"
    unless $I5014 goto if433_else1740 
.annotate 'line', 2940
.annotate 'line', 2941
    nqp_decontainerize $P5063, _lex_param_0
    find_dynamic_lex $P5064, "$*BINDVAL"
    unless_null $P5064, fallback1744
    nqp_get_sc_object $P5067, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5066, $P5067
    set $P5065, $P5066["$BINDVAL"]
    unless_null $P5065, fallback1745
    nqp_get_sc_object $P5068, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5065, $P5068
  fallback1745:
    unless_null $P5065, vivi_4351746
    die "Contextual $*BINDVAL not found"
    box $P5069, "Contextual $*BINDVAL not found"
    set $P5065, $P5069
  vivi_4351746:
    set $P5064, $P5065
  fallback1744:
    unless $P5064 goto if434_else1742 
.annotate 'line', 2942
    nqp_get_sc_object $P5073, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5072, $P5073, "QAST"
    get_who $P5071, $P5072
    set $P5070, $P5071["Op"]
    unless_null $P5070, fallback1747
    nqp_get_sc_object $P5074, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5070, $P5074
  fallback1747:
    $P5075 = _lex_param_1."list"()
    find_dynamic_lex $P5076, "$*BINDVAL"
    unless_null $P5076, fallback1748
    nqp_get_sc_object $P5079, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5078, $P5079
    set $P5077, $P5078["$BINDVAL"]
    unless_null $P5077, fallback1749
    nqp_get_sc_object $P5080, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5077, $P5080
  fallback1749:
    unless_null $P5077, vivi_4361750
    die "Contextual $*BINDVAL not found"
    box $P5081, "Contextual $*BINDVAL not found"
    set $P5077, $P5081
  vivi_4361750:
    set $P5076, $P5077
  fallback1748:
    $P5082 = $P5070."new"($P5075 :flat, $P5076, "positional_bind" :named("op"))
    set $P5090, $P5082
    goto if434_end1743
  if434_else1742:
.annotate 'line', 2943
    nqp_get_sc_object $P5086, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5085, $P5086, "QAST"
    get_who $P5084, $P5085
    set $P5083, $P5084["Op"]
    unless_null $P5083, fallback1751
    nqp_get_sc_object $P5087, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5083, $P5087
  fallback1751:
    $P5088 = _lex_param_1."list"()
    $P5089 = $P5083."new"($P5088 :flat, "positional_get" :named("op"))
    set $P5090, $P5089
  if434_end1743:
    $P5091 = $P5063."as_post_clear_bindval"($P5090)
    set $P104, $P5091
    set $P5123, $P104
    goto if433_end1741
  if433_else1740:
    set $S5025, $P101
    iseq $I5015, $S5025, "associative"
    unless $I5015 goto if437_else1752 
.annotate 'line', 2945
.annotate 'line', 2946
    nqp_decontainerize $P5092, _lex_param_0
    find_dynamic_lex $P5093, "$*BINDVAL"
    unless_null $P5093, fallback1756
    nqp_get_sc_object $P5096, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5095, $P5096
    set $P5094, $P5095["$BINDVAL"]
    unless_null $P5094, fallback1757
    nqp_get_sc_object $P5097, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5094, $P5097
  fallback1757:
    unless_null $P5094, vivi_4391758
    die "Contextual $*BINDVAL not found"
    box $P5098, "Contextual $*BINDVAL not found"
    set $P5094, $P5098
  vivi_4391758:
    set $P5093, $P5094
  fallback1756:
    unless $P5093 goto if438_else1754 
.annotate 'line', 2947
    nqp_get_sc_object $P5102, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5101, $P5102, "QAST"
    get_who $P5100, $P5101
    set $P5099, $P5100["Op"]
    unless_null $P5099, fallback1759
    nqp_get_sc_object $P5103, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5099, $P5103
  fallback1759:
    $P5104 = _lex_param_1."list"()
    find_dynamic_lex $P5105, "$*BINDVAL"
    unless_null $P5105, fallback1760
    nqp_get_sc_object $P5108, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5107, $P5108
    set $P5106, $P5107["$BINDVAL"]
    unless_null $P5106, fallback1761
    nqp_get_sc_object $P5109, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5106, $P5109
  fallback1761:
    unless_null $P5106, vivi_4401762
    die "Contextual $*BINDVAL not found"
    box $P5110, "Contextual $*BINDVAL not found"
    set $P5106, $P5110
  vivi_4401762:
    set $P5105, $P5106
  fallback1760:
    $P5111 = $P5099."new"($P5104 :flat, $P5105, "associative_bind" :named("op"))
    set $P5119, $P5111
    goto if438_end1755
  if438_else1754:
.annotate 'line', 2948
    nqp_get_sc_object $P5115, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5114, $P5115, "QAST"
    get_who $P5113, $P5114
    set $P5112, $P5113["Op"]
    unless_null $P5112, fallback1763
    nqp_get_sc_object $P5116, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5112, $P5116
  fallback1763:
    $P5117 = _lex_param_1."list"()
    $P5118 = $P5112."new"($P5117 :flat, "associative_get" :named("op"))
    set $P5119, $P5118
  if438_end1755:
    $P5120 = $P5092."as_post_clear_bindval"($P5119)
    set $P104, $P5120
    set $P5122, $P104
    goto if437_end1753
  if437_else1752:
.annotate 'line', 2950
    set $S5028, $P101
    concat $S5027, "QAST::Var with scope '", $S5028
    concat $S5026, $S5027, "' NYI"
    box $P5121, $S5026
    die $P5121
    set $P5122, $P5121
  if437_end1753:
    set $P5123, $P5122
  if433_end1741:
    set $P5124, $P5123
  if427_end1724:
    set $P5125, $P5124
  if403_end1659:
  if397_end1644:
    .return ($P104) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_305_1359572548.257") :anon :lex :outer("cuid_105_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2817
    .const 'Sub' $P5018 = 'cuid_304_1359572548.257' 
    capture_lex $P5018 
    .lex "$cur_block", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    find_dynamic_lex $P5002, "$*BLOCK"
    unless_null $P5002, fallback1627
    nqp_get_sc_object $P5005, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$BLOCK"]
    unless_null $P5003, fallback1628
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5006
  fallback1628:
    unless_null $P5003, vivi_3921629
    die "Contextual $*BLOCK not found"
    box $P5007, "Contextual $*BLOCK not found"
    set $P5003, $P5007
  vivi_3921629:
    set $P5002, $P5003
  fallback1627:
    set $P101, $P5002
  while393_test1630:
    nqp_get_sc_object $P5008, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    type_check $I5001, $P101, $P5008
    box $P5012, $I5001
    set $P5011, $P5012
    unless $I5001 goto while393_done1634 
  while393_redo1632:
    .const 'Sub' $P5009 = 'cuid_304_1359572548.257' 
    capture_lex $P5009
    $P5010 = $P5009()
    set $P5011, $P5010
    goto while393_test1630 
  while393_done1634:
    find_lex $P5013, "$scope"
    set $S5001, $P5013
    iseq $I5002, $S5001, ""
    box $P5017, $I5002
    set $P5016, $P5017
    unless $I5002 goto if395_end1639 
.annotate 'line', 2829
    find_lex $P5014, "$name"
    set $S5004, $P5014
    concat $S5003, "No scope specified or locatable in the symbol table for '", $S5004
    concat $S5002, $S5003, "'"
    box $P5015, $S5002
    die $P5015
    set $P5016, $P5015
  if395_end1639:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_304_1359572548.257") :anon :lex :outer("cuid_305_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2819
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 2820
    find_lex $P5002, "$cur_block"
    $P5003 = $P5002."qast"()
    find_lex $P5004, "$name"
    $P5005 = $P5003."symbol"($P5004)
    set $P101, $P5005
    unless $P101 goto if394_else1635 
.annotate 'line', 2821
    set $P5006, $P101["scope"]
    unless_null $P5006, fallback1637
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5006, $P5007
  fallback1637:
    store_lex "$scope", $P5006
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    store_lex "$cur_block", $P5008
    set $P5011, $P5008
    goto if394_end1636
  if394_else1635:
.annotate 'line', 2825
.annotate 'line', 2826
    find_lex $P5009, "$cur_block"
    $P5010 = $P5009."outer"()
    store_lex "$cur_block", $P5010
    set $P5011, $P5010
  if394_end1636:
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_307_1359572548.257") :anon :lex :outer("cuid_105_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2838
    .param pmc _lex_param_0 
    .const 'Sub' $P5012 = 'cuid_306_1359572548.257' 
    capture_lex $P5012 
    .lex "$type", _lex_param_0 
    find_dynamic_lex $P5001, "$*BINDVAL"
    unless_null $P5001, fallback1652
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$BINDVAL"]
    unless_null $P5002, fallback1653
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5002, $P5005
  fallback1653:
    unless_null $P5002, vivi_4011654
    die "Contextual $*BINDVAL not found"
    box $P5006, "Contextual $*BINDVAL not found"
    set $P5002, $P5006
  vivi_4011654:
    set $P5001, $P5002
  fallback1652:
    unless $P5001 goto if400_end1651 
    .const 'Sub' $P5007 = 'cuid_306_1359572548.257' 
    capture_lex $P5007
    $P5008 = $P5007()
  if400_end1651:
.annotate 'line', 2844
    find_lex $P5009, "$ops"
    find_lex $P5010, "$name"
    $P5011 = $P5009."result"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_306_1359572548.257") :anon :lex :outer("cuid_307_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2839
    .lex "$valpost", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 2840
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    find_dynamic_lex $P5004, "$*BINDVAL"
    unless_null $P5004, fallback1655
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$BINDVAL"]
    unless_null $P5005, fallback1656
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5005, $P5008
  fallback1656:
    unless_null $P5005, vivi_4021657
    die "Contextual $*BINDVAL not found"
    box $P5009, "Contextual $*BINDVAL not found"
    set $P5005, $P5009
  vivi_4021657:
    set $P5004, $P5005
  fallback1655:
    find_lex $P5010, "$type"
    set $S5002, $P5010
    downcase $S5001, $S5002
    $P5011 = $P5002."as_post_clear_bindval"($P5004, $S5001 :named("want"))
    set $P101, $P5011
.annotate 'line', 2841
    find_lex $P5012, "$ops"
    $P5012."push"($P101)
.annotate 'line', 2842
    find_lex $P5013, "$ops"
    find_lex $P5014, "$name"
    $P5015 = $P101."result"()
    $P5016 = $P5013."push_pirop"("set", $P5014, $P5015)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_310_1359572548.257") :anon :lex :outer("cuid_105_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2850
    .const 'Sub' $P5028 = 'cuid_309_1359572548.257' 
    capture_lex $P5028 
    .const 'Sub' $P5028 = 'cuid_313_1359572548.257' 
    capture_lex $P5028 
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 2853
    find_dynamic_lex $P5002, "$*BLOCK"
    unless_null $P5002, fallback1662
    nqp_get_sc_object $P5005, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$BLOCK"]
    unless_null $P5003, fallback1663
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5006
  fallback1663:
    unless_null $P5003, vivi_4051664
    die "Contextual $*BLOCK not found"
    box $P5007, "Contextual $*BLOCK not found"
    set $P5003, $P5007
  vivi_4051664:
    set $P5002, $P5003
  fallback1662:
    $P5008 = $P5002."qast"()
    find_lex $P5009, "$name"
    $P5010 = $P5008."symbol"($P5009)
    set $P101, $P5010
    isfalse $I5001, $P101
    set $I5003, $I5001
    if $I5001 goto unless408_end1670 
    set $P5011, $P101["lazyinit"]
    unless_null $P5011, fallback1671
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5011, $P5012
  fallback1671:
    isfalse $I5002, $P5011
    set $I5003, $I5002
  unless408_end1670:
    box $P5022, $I5003
    set $P5021, $P5022
    unless $I5003 goto if407_end1668 
.annotate 'line', 2854
    find_dynamic_lex $P5013, "$*BLOCK"
    unless_null $P5013, fallback1672
    nqp_get_sc_object $P5016, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$BLOCK"]
    unless_null $P5014, fallback1673
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5014, $P5017
  fallback1673:
    unless_null $P5014, vivi_4091674
    die "Contextual $*BLOCK not found"
    box $P5018, "Contextual $*BLOCK not found"
    set $P5014, $P5018
  vivi_4091674:
    set $P5013, $P5014
  fallback1672:
    find_lex $P5019, "$name"
    $P5020 = $P5013."lexical_type"($P5019)
    set $P5021, $P5020
  if407_end1668:
    unless $P5021 goto if406_else1665 
    .const 'Sub' $P5023 = 'cuid_309_1359572548.257' 
    capture_lex $P5023
    $P5024 = $P5023($P5021)
    set $P5027, $P5024
    goto if406_end1666
  if406_else1665:
    .const 'Sub' $P5025 = 'cuid_313_1359572548.257' 
    capture_lex $P5025
    $P5026 = $P5025()
    set $P5027, $P5026
  if406_end1666:
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_309_1359572548.257") :anon :lex :outer("cuid_310_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2854
    .param pmc _lex_param_0 
    .const 'Sub' $P5020 = 'cuid_308_1359572548.257' 
    capture_lex $P5020 
    .lex "$reg", $P101 
    .lex "$type", _lex_param_0 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 2855
    find_dynamic_lex $P5002, "$*BLOCK"
    unless_null $P5002, fallback1675
    nqp_get_sc_object $P5005, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$BLOCK"]
    unless_null $P5003, fallback1676
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5006
  fallback1676:
    unless_null $P5003, vivi_4101677
    die "Contextual $*BLOCK not found"
    box $P5007, "Contextual $*BLOCK not found"
    set $P5003, $P5007
  vivi_4101677:
    set $P5002, $P5003
  fallback1675:
    find_lex $P5008, "$name"
    $P5009 = $P5002."lex_reg"($P5008)
    set $P101, $P5009
    find_dynamic_lex $P5010, "$*BINDVAL"
    unless_null $P5010, fallback1680
    nqp_get_sc_object $P5013, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$BINDVAL"]
    unless_null $P5011, fallback1681
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5011, $P5014
  fallback1681:
    unless_null $P5011, vivi_4121682
    die "Contextual $*BINDVAL not found"
    box $P5015, "Contextual $*BINDVAL not found"
    set $P5011, $P5015
  vivi_4121682:
    set $P5010, $P5011
  fallback1680:
    unless $P5010 goto if411_end1679 
    .const 'Sub' $P5016 = 'cuid_308_1359572548.257' 
    capture_lex $P5016
    $P5017 = $P5016()
  if411_end1679:
.annotate 'line', 2861
    find_lex $P5018, "$ops"
    $P5019 = $P5018."result"($P101)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_308_1359572548.257") :anon :lex :outer("cuid_309_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2856
    .lex "$valpost", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 2857
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    find_dynamic_lex $P5004, "$*BINDVAL"
    unless_null $P5004, fallback1683
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$BINDVAL"]
    unless_null $P5005, fallback1684
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5005, $P5008
  fallback1684:
    unless_null $P5005, vivi_4131685
    die "Contextual $*BINDVAL not found"
    box $P5009, "Contextual $*BINDVAL not found"
    set $P5005, $P5009
  vivi_4131685:
    set $P5004, $P5005
  fallback1683:
    find_lex $P5010, "$type"
    set $S5002, $P5010
    downcase $S5001, $S5002
    $P5011 = $P5002."as_post_clear_bindval"($P5004, $S5001 :named("want"))
    set $P101, $P5011
.annotate 'line', 2858
    find_lex $P5012, "$ops"
    $P5012."push"($P101)
.annotate 'line', 2859
    find_lex $P5013, "$ops"
    find_lex $P5014, "$reg"
    $P5015 = $P101."result"()
    $P5016 = $P5013."push_pirop"("set", $P5014, $P5015)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_313_1359572548.257") :anon :lex :outer("cuid_310_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2863
    .const 'Sub' $P5031 = 'cuid_312_1359572548.257' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_314_1359572548.257' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_315_1359572548.257' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_316_1359572548.257' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_317_1359572548.257' 
    capture_lex $P5031 
    .lex "$type", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 2865
    find_lex $P5002, "$node"
    $P5003 = $P5002."returns"()
    $P5004 = "&type_to_register_type"($P5003)
    set $P101, $P5004
    set $S5001, $P101
    iseq $I5001, $S5001, "P"
    unless $I5001 goto if414_end1687 
    .const 'Sub' $P5005 = 'cuid_312_1359572548.257' 
    capture_lex $P5005
    $P5006 = $P5005()
  if414_end1687:
    find_lex $P5007, "$scope"
    set $S5002, $P5007
    iseq $I5002, $S5002, "lexical"
    unless $I5002 goto if418_else1699 
.annotate 'line', 2882
    find_dynamic_lex $P5008, "$*BINDVAL"
    unless_null $P5008, fallback1703
    nqp_get_sc_object $P5011, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["$BINDVAL"]
    unless_null $P5009, fallback1704
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5009, $P5012
  fallback1704:
    unless_null $P5009, vivi_4201705
    die "Contextual $*BINDVAL not found"
    box $P5013, "Contextual $*BINDVAL not found"
    set $P5009, $P5013
  vivi_4201705:
    set $P5008, $P5009
  fallback1703:
    unless $P5008 goto if419_else1701 
    .const 'Sub' $P5014 = 'cuid_314_1359572548.257' 
    capture_lex $P5014
    $P5015 = $P5014()
    set $P5018, $P5015
    goto if419_end1702
  if419_else1701:
    .const 'Sub' $P5016 = 'cuid_315_1359572548.257' 
    capture_lex $P5016
    $P5017 = $P5016()
    set $P5018, $P5017
  if419_end1702:
    set $P5030, $P5018
    goto if418_end1700
  if418_else1699:
.annotate 'line', 2895
    find_dynamic_lex $P5019, "$*BINDVAL"
    unless_null $P5019, fallback1714
    nqp_get_sc_object $P5022, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$BINDVAL"]
    unless_null $P5020, fallback1715
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5020, $P5023
  fallback1715:
    unless_null $P5020, vivi_4241716
    die "Contextual $*BINDVAL not found"
    box $P5024, "Contextual $*BINDVAL not found"
    set $P5020, $P5024
  vivi_4241716:
    set $P5019, $P5020
  fallback1714:
    unless $P5019 goto if423_else1712 
    .const 'Sub' $P5025 = 'cuid_316_1359572548.257' 
    capture_lex $P5025
    $P5026 = $P5025()
    set $P5029, $P5026
    goto if423_end1713
  if423_else1712:
    .const 'Sub' $P5027 = 'cuid_317_1359572548.257' 
    capture_lex $P5027
    $P5028 = $P5027()
    set $P5029, $P5028
  if423_end1713:
    set $P5030, $P5029
  if418_end1700:
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_312_1359572548.257") :anon :lex :outer("cuid_313_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2866
    .const 'Sub' $P5013 = 'cuid_311_1359572548.257' 
    capture_lex $P5013 
    .lex "$cur_block", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    find_dynamic_lex $P5002, "$*BLOCK"
    unless_null $P5002, fallback1688
    nqp_get_sc_object $P5005, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$BLOCK"]
    unless_null $P5003, fallback1689
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5006
  fallback1689:
    unless_null $P5003, vivi_4151690
    die "Contextual $*BLOCK not found"
    box $P5007, "Contextual $*BLOCK not found"
    set $P5003, $P5007
  vivi_4151690:
    set $P5002, $P5003
  fallback1688:
    set $P101, $P5002
  while416_test1691:
    nqp_get_sc_object $P5008, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    type_check $I5001, $P101, $P5008
    box $P5012, $I5001
    set $P5011, $P5012
    unless $I5001 goto while416_done1695 
  while416_redo1693:
    .const 'Sub' $P5009 = 'cuid_311_1359572548.257' 
    capture_lex $P5009
    $P5010 = $P5009()
    set $P5011, $P5010
    goto while416_test1691 
  while416_done1695:
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_311_1359572548.257") :anon :lex :outer("cuid_312_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2869
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 2870
    find_lex $P5002, "$cur_block"
    $P5003 = $P5002."qast"()
    find_lex $P5004, "$name"
    $P5005 = $P5003."symbol"($P5004)
    set $P101, $P5005
    unless $P101 goto if417_else1696 
.annotate 'line', 2871
.annotate 'line', 2872
    set $P5006, $P101["type"]
    unless_null $P5006, fallback1698
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5006, $P5007
  fallback1698:
    $P5008 = "&type_to_register_type"($P5006)
    store_lex "$type", $P5008
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    store_lex "$cur_block", $P5009
    set $P5012, $P5009
    goto if417_end1697
  if417_else1696:
.annotate 'line', 2875
.annotate 'line', 2876
    find_lex $P5010, "$cur_block"
    $P5011 = $P5010."outer"()
    store_lex "$cur_block", $P5011
    set $P5012, $P5011
  if417_end1697:
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_314_1359572548.257") :anon :lex :outer("cuid_313_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2883
    .lex "$valpost", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 2884
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    find_dynamic_lex $P5004, "$*BINDVAL"
    unless_null $P5004, fallback1706
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$BINDVAL"]
    unless_null $P5005, fallback1707
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5005, $P5008
  fallback1707:
    unless_null $P5005, vivi_4211708
    die "Contextual $*BINDVAL not found"
    box $P5009, "Contextual $*BINDVAL not found"
    set $P5005, $P5009
  vivi_4211708:
    set $P5004, $P5005
  fallback1706:
    find_lex $P5010, "$type"
    set $S5002, $P5010
    downcase $S5001, $S5002
    $P5011 = $P5002."as_post_clear_bindval"($P5004, $S5001 :named("want"))
    set $P101, $P5011
.annotate 'line', 2885
    find_lex $P5012, "$ops"
    $P5012."push"($P101)
.annotate 'line', 2886
    find_lex $P5013, "$ops"
    find_lex $P5015, "self"
    nqp_decontainerize $P5014, $P5015
    find_lex $P5016, "$node"
    $P5017 = $P5016."name"()
    $P5018 = $P5014."escape"($P5017)
    $P5019 = $P101."result"()
    $P5013."push_pirop"("store_lex", $P5018, $P5019)
.annotate 'line', 2887
    find_lex $P5020, "$ops"
    $P5021 = $P101."result"()
    $P5022 = $P5020."result"($P5021)
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_315_1359572548.257") :anon :lex :outer("cuid_313_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2889
    .lex "$res_reg", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 2890
    find_dynamic_lex $P5003, "$*REGALLOC"
    unless_null $P5003, fallback1709
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$REGALLOC"]
    unless_null $P5004, fallback1710
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5007
  fallback1710:
    unless_null $P5004, vivi_4221711
    die "Contextual $*REGALLOC not found"
    box $P5008, "Contextual $*REGALLOC not found"
    set $P5004, $P5008
  vivi_4221711:
    set $P5003, $P5004
  fallback1709:
    find_lex $P5002, "$type"
    set $S5003, $P5002
    downcase $S5002, $S5003
    concat $S5001, "fresh_", $S5002
    $P5009 = $P5003.$S5001()
    set $P101, $P5009
.annotate 'line', 2891
    find_lex $P5010, "$ops"
    find_lex $P5012, "self"
    nqp_decontainerize $P5011, $P5012
    find_lex $P5013, "$node"
    $P5014 = $P5013."name"()
    $P5015 = $P5011."escape"($P5014)
    $P5010."push_pirop"("find_lex", $P101, $P5015)
.annotate 'line', 2892
    find_lex $P5016, "$ops"
    $P5017 = $P5016."result"($P101)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_316_1359572548.257") :anon :lex :outer("cuid_313_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2896
    .lex "$valpost", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 2897
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    find_dynamic_lex $P5004, "$*BINDVAL"
    unless_null $P5004, fallback1717
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$BINDVAL"]
    unless_null $P5005, fallback1718
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5005, $P5008
  fallback1718:
    unless_null $P5005, vivi_4251719
    die "Contextual $*BINDVAL not found"
    box $P5009, "Contextual $*BINDVAL not found"
    set $P5005, $P5009
  vivi_4251719:
    set $P5004, $P5005
  fallback1717:
    $P5010 = $P5002."as_post_clear_bindval"($P5004, "P" :named("want"))
    set $P101, $P5010
.annotate 'line', 2898
    find_lex $P5011, "$ops"
    $P5011."push"($P101)
.annotate 'line', 2899
    find_lex $P5012, "$ops"
    find_lex $P5014, "self"
    nqp_decontainerize $P5013, $P5014
    find_lex $P5015, "$name"
    $P5016 = $P5013."escape"($P5015)
    $P5017 = $P101."result"()
    $P5012."push_pirop"("store_dynamic_lex", $P5016, $P5017)
.annotate 'line', 2900
    find_lex $P5018, "$ops"
    $P5019 = $P101."result"()
    $P5020 = $P5018."result"($P5019)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_317_1359572548.257") :anon :lex :outer("cuid_313_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2902
    .lex "$res_reg", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 2903
    find_dynamic_lex $P5002, "$*REGALLOC"
    unless_null $P5002, fallback1720
    nqp_get_sc_object $P5005, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$REGALLOC"]
    unless_null $P5003, fallback1721
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5006
  fallback1721:
    unless_null $P5003, vivi_4261722
    die "Contextual $*REGALLOC not found"
    box $P5007, "Contextual $*REGALLOC not found"
    set $P5003, $P5007
  vivi_4261722:
    set $P5002, $P5003
  fallback1720:
    $P5008 = $P5002."fresh_p"()
    set $P101, $P5008
.annotate 'line', 2904
    find_lex $P5009, "$ops"
    find_lex $P5011, "self"
    nqp_decontainerize $P5010, $P5011
    find_lex $P5012, "$name"
    $P5013 = $P5010."escape"($P5012)
    $P5009."push_pirop"("find_dynamic_lex", $P101, $P5013)
.annotate 'line', 2905
    find_lex $P5014, "$ops"
    $P5015 = $P5014."result"($P101)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_319_1359572548.257") :anon :lex :outer("cuid_105_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2910
    .const 'Sub' $P5038 = 'cuid_318_1359572548.257' 
    capture_lex $P5038 
    .const 'Sub' $P5038 = 'cuid_320_1359572548.257' 
    capture_lex $P5038 
    .lex "@args", $P101 
    .lex "$obj", $P102 
    .lex "$han", $P103 
    .lex "$type", $P104 
    .lex "$op_type", $P105 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P105, $P5005
.annotate 'line', 2912
    find_lex $P5006, "$node"
    $P5007 = $P5006."list"()
    set $P101, $P5007
    set $N5001, $P101
    set $N5002, 2
    isne $I5001, $N5001, $N5002
    unless $I5001 goto if428_end1726 
.annotate 'line', 2913
    box $P5008, "An attribute lookup needs an object and a class handle"
    die $P5008
  if428_end1726:
.annotate 'line', 2918
    find_lex $P5010, "self"
    nqp_decontainerize $P5009, $P5010
    set $P5011, $P101[0]
    unless_null $P5011, fallback1727
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5011, $P5012
  fallback1727:
    $P5013 = $P5009."as_post_clear_bindval"($P5011, "P" :named("want"))
    set $P102, $P5013
.annotate 'line', 2919
    find_lex $P5015, "self"
    nqp_decontainerize $P5014, $P5015
    set $P5016, $P101[1]
    unless_null $P5016, fallback1728
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5016, $P5017
  fallback1728:
    $P5018 = $P5014."as_post_clear_bindval"($P5016, "P" :named("want"))
    set $P103, $P5018
.annotate 'line', 2920
    find_lex $P5019, "$ops"
    $P5019."push"($P102)
.annotate 'line', 2921
    find_lex $P5020, "$ops"
    $P5020."push"($P103)
.annotate 'line', 2924
    find_lex $P5021, "$node"
    $P5022 = $P5021."returns"()
    $P5023 = "&type_to_register_type"($P5022)
    set $P104, $P5023
.annotate 'line', 2925
    find_lex $P5024, "$node"
    $P5025 = $P5024."returns"()
    $P5026 = "&type_to_lookup_name"($P5025)
    set $P105, $P5026
    find_dynamic_lex $P5027, "$*BINDVAL"
    unless_null $P5027, fallback1731
    nqp_get_sc_object $P5030, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5029, $P5030
    set $P5028, $P5029["$BINDVAL"]
    unless_null $P5028, fallback1732
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5028, $P5031
  fallback1732:
    unless_null $P5028, vivi_4301733
    die "Contextual $*BINDVAL not found"
    box $P5032, "Contextual $*BINDVAL not found"
    set $P5028, $P5032
  vivi_4301733:
    set $P5027, $P5028
  fallback1731:
    unless $P5027 goto if429_else1729 
    .const 'Sub' $P5033 = 'cuid_318_1359572548.257' 
    capture_lex $P5033
    $P5034 = $P5033()
    set $P5037, $P5034
    goto if429_end1730
  if429_else1729:
    .const 'Sub' $P5035 = 'cuid_320_1359572548.257' 
    capture_lex $P5035
    $P5036 = $P5035()
    set $P5037, $P5036
  if429_end1730:
    .return ($P5037) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_318_1359572548.257") :anon :lex :outer("cuid_319_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2926
    .lex "$valpost", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 2927
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    find_dynamic_lex $P5004, "$*BINDVAL"
    unless_null $P5004, fallback1734
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$BINDVAL"]
    unless_null $P5005, fallback1735
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5005, $P5008
  fallback1735:
    unless_null $P5005, vivi_4311736
    die "Contextual $*BINDVAL not found"
    box $P5009, "Contextual $*BINDVAL not found"
    set $P5005, $P5009
  vivi_4311736:
    set $P5004, $P5005
  fallback1734:
    find_lex $P5010, "$type"
    set $S5002, $P5010
    downcase $S5001, $S5002
    $P5011 = $P5002."as_post_clear_bindval"($P5004, $S5001 :named("want"))
    set $P101, $P5011
.annotate 'line', 2928
    find_lex $P5012, "$ops"
    $P5012."push"($P101)
.annotate 'line', 2929
    find_lex $P5013, "$ops"
    find_lex $P5014, "$op_type"
    set $S5004, $P5014
    concat $S5003, "repr_bind_attr_", $S5004
    find_lex $P5015, "$obj"
    $P5016 = $P5015."result"()
    find_lex $P5017, "$han"
    $P5018 = $P5017."result"()
.annotate 'line', 2930
    find_lex $P5020, "self"
    nqp_decontainerize $P5019, $P5020
    find_lex $P5021, "$name"
    $P5022 = $P5019."escape"($P5021)
    $P5023 = $P101."result"()
    $P5013."push_pirop"($S5003, $P5016, $P5018, $P5022, $P5023)
.annotate 'line', 2931
    find_lex $P5024, "$ops"
    $P5025 = $P101."result"()
    $P5026 = $P5024."result"($P5025)
    .return ($P5026) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_320_1359572548.257") :anon :lex :outer("cuid_319_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2933
    .lex "$res_reg", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 2934
    find_dynamic_lex $P5003, "$*REGALLOC"
    unless_null $P5003, fallback1737
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$REGALLOC"]
    unless_null $P5004, fallback1738
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5007
  fallback1738:
    unless_null $P5004, vivi_4321739
    die "Contextual $*REGALLOC not found"
    box $P5008, "Contextual $*REGALLOC not found"
    set $P5004, $P5008
  vivi_4321739:
    set $P5003, $P5004
  fallback1737:
    find_lex $P5002, "$type"
    set $S5003, $P5002
    downcase $S5002, $S5003
    concat $S5001, "fresh_", $S5002
    $P5009 = $P5003.$S5001()
    set $P101, $P5009
.annotate 'line', 2935
    find_lex $P5010, "$ops"
    find_lex $P5011, "$op_type"
    set $S5005, $P5011
    concat $S5004, "repr_get_attr_", $S5005
    find_lex $P5012, "$obj"
    $P5013 = $P5012."result"()
    find_lex $P5014, "$han"
    $P5015 = $P5014."result"()
.annotate 'line', 2936
    find_lex $P5017, "self"
    nqp_decontainerize $P5016, $P5017
    find_lex $P5018, "$name"
    $P5019 = $P5016."escape"($P5018)
    $P5010."push_pirop"($S5004, $P101, $P5013, $P5015, $P5019)
.annotate 'line', 2937
    find_lex $P5020, "$ops"
    $P5021 = $P5020."result"($P101)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "as_post_clear_bindval" :subid("cuid_106_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2957
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("want") :optional 
    .param int haz_param_25 :opt_flag 
    if haz_param_25, default1766
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set _lex_param_2, $P5008
  default1766:
    .lex "$*BINDVAL", $P101 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    .lex "$want", _lex_param_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    box $P5002, 0
    set $P101, $P5002
    unless _lex_param_2 goto if441_else1764 
.annotate 'line', 2959
    nqp_decontainerize $P5003, _lex_param_0
    $P5004 = $P5003."as_post"(_lex_param_1, _lex_param_2 :named("want"))
    set $P5007, $P5004
    goto if441_end1765
  if441_else1764:
    nqp_decontainerize $P5005, _lex_param_0
    $P5006 = $P5005."as_post"(_lex_param_1)
    set $P5007, $P5006
  if441_end1765:
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "as_post" :subid("cuid_107_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2962
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("want") :optional 
    .param int haz_param_26 :opt_flag 
    if haz_param_26, default1768
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set _lex_param_2, $P5005
  default1768:
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    .lex "$want", _lex_param_2 
.annotate 'line', 2964
    nqp_decontainerize $P5001, _lex_param_0
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback1767
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5002, $P5003
  fallback1767:
    $P5004 = $P5001."as_post"($P5002)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "as_post" :subid("cuid_108_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2967
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("want") :optional 
    .param int haz_param_27 :opt_flag 
    if haz_param_27, default1770
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set _lex_param_2, $P5008
  default1770:
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    .lex "$want", _lex_param_2 
.annotate 'line', 2968
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5003, $P5004, "PIRT"
    get_who $P5002, $P5003
    set $P5001, $P5002["Ops"]
    unless_null $P5001, fallback1769
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5005
  fallback1769:
    $P5006 = _lex_param_1."value"()
    set $S5001, $P5006
    $P5007 = $P5001."new"($S5001 :named("result"))
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "as_post" :subid("cuid_109_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2971
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("want") :optional 
    .param int haz_param_28 :opt_flag 
    if haz_param_28, default1776
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set _lex_param_2, $P5011
  default1776:
    .lex "$val", $P101 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    .lex "$want", _lex_param_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 2972
    $P5002 = _lex_param_1."value"()
    set $S5001, $P5002
    box $P5003, $S5001
    set $P101, $P5003
    set $S5002, $P101
    index $I5002, $S5002, ".", 0
    set $N5001, $I5002
    set $N5002, 0
    isge $I5001, $N5001, $N5002
    set $I5005, $I5001
    if $I5001 goto unless443_end1774 
    set $S5003, $P101
    index $I5004, $S5003, "e", 0
    set $N5003, $I5004
    set $N5004, 0
    isgt $I5003, $N5003, $N5004
    set $I5005, $I5003
  unless443_end1774:
    if $I5005 goto unless442_end1772 
    set $S5005, $P101
    concat $S5004, $S5005, ".0"
    box $P5004, $S5004
    set $P101, $P5004
  unless442_end1772:
.annotate 'line', 2975
    nqp_get_sc_object $P5008, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5007, $P5008, "PIRT"
    get_who $P5006, $P5007
    set $P5005, $P5006["Ops"]
    unless_null $P5005, fallback1775
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5005, $P5009
  fallback1775:
    $P5010 = $P5005."new"($P101 :named("result"))
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "as_post" :subid("cuid_110_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2978
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("want") :optional 
    .param int haz_param_29 :opt_flag 
    if haz_param_29, default1778
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set _lex_param_2, $P5010
  default1778:
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    .lex "$want", _lex_param_2 
.annotate 'line', 2979
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5003, $P5004, "PIRT"
    get_who $P5002, $P5003
    set $P5001, $P5002["Ops"]
    unless_null $P5001, fallback1777
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5005
  fallback1777:
    nqp_decontainerize $P5006, _lex_param_0
    $P5007 = _lex_param_1."value"()
    $P5008 = $P5006."escape"($P5007)
    $P5009 = $P5001."new"($P5008 :named("result"))
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "as_post" :subid("cuid_111_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2982
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("want") :optional 
    .param int haz_param_30 :opt_flag 
    if haz_param_30, default1783
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set _lex_param_2, $P5021
  default1783:
    .lex "$cuid", $P101 
    .lex "$reg", $P102 
    .lex "$ops", $P103 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    .lex "$want", _lex_param_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
.annotate 'line', 2983
    nqp_decontainerize $P5004, _lex_param_0
    $P5005 = _lex_param_1."value"()
    $P5006 = $P5005."cuid"()
    $P5007 = $P5004."escape"($P5006)
    set $P101, $P5007
.annotate 'line', 2984
    find_dynamic_lex $P5008, "$*REGALLOC"
    unless_null $P5008, fallback1779
    nqp_get_sc_object $P5011, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["$REGALLOC"]
    unless_null $P5009, fallback1780
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5009, $P5012
  fallback1780:
    unless_null $P5009, vivi_4441781
    die "Contextual $*REGALLOC not found"
    box $P5013, "Contextual $*REGALLOC not found"
    set $P5009, $P5013
  vivi_4441781:
    set $P5008, $P5009
  fallback1779:
    $P5014 = $P5008."fresh_p"()
    set $P102, $P5014
.annotate 'line', 2985
    nqp_get_sc_object $P5018, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5017, $P5018, "PIRT"
    get_who $P5016, $P5017
    set $P5015, $P5016["Ops"]
    unless_null $P5015, fallback1782
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5015, $P5019
  fallback1782:
    $P5020 = $P5015."new"($P102 :named("result"))
    set $P103, $P5020
.annotate 'line', 2986
    set $S5004, $P102
    concat $S5003, ".const 'Sub' ", $S5004
    concat $S5002, $S5003, " = "
    set $S5005, $P101
    concat $S5001, $S5002, $S5005
    $P103."push_pirop"($S5001)
    .return ($P103) 
.end
.HLL "nqp"
.namespace []
.sub "as_post" :subid("cuid_112_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 2990
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("want") :optional 
    .param int haz_param_31 :opt_flag 
    if haz_param_31, default1788
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set _lex_param_2, $P5026
  default1788:
    .lex "$val", $P101 
    .lex "$sc", $P102 
    .lex "$handle", $P103 
    .lex "$idx", $P104 
    .lex "$reg", $P105 
    .lex "$ops", $P106 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    .lex "$want", _lex_param_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P106, $P5006
.annotate 'line', 2991
    $P5007 = _lex_param_1."value"()
    set $P101, $P5007
    nqp_get_sc_for_object $P5008, $P101
    set $P102, $P5008
    $S5001 = $P102."handle"()
    box $P5009, $S5001
    set $P103, $P5009
    $I5001 = $P102."slot_index_for"($P101)
    box $P5010, $I5001
    set $P104, $P5010
.annotate 'line', 2995
    find_dynamic_lex $P5011, "$*REGALLOC"
    unless_null $P5011, fallback1784
    nqp_get_sc_object $P5014, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$REGALLOC"]
    unless_null $P5012, fallback1785
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5012, $P5015
  fallback1785:
    unless_null $P5012, vivi_4451786
    die "Contextual $*REGALLOC not found"
    box $P5016, "Contextual $*REGALLOC not found"
    set $P5012, $P5016
  vivi_4451786:
    set $P5011, $P5012
  fallback1784:
    $P5017 = $P5011."fresh_p"()
    set $P105, $P5017
.annotate 'line', 2996
    nqp_get_sc_object $P5021, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5020, $P5021, "PIRT"
    get_who $P5019, $P5020
    set $P5018, $P5019["Ops"]
    unless_null $P5018, fallback1787
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5018, $P5022
  fallback1787:
    $P5023 = $P5018."new"($P105 :named("result"))
    set $P106, $P5023
.annotate 'line', 2997
    nqp_decontainerize $P5024, _lex_param_0
    $P5025 = $P5024."escape"($P103)
    set $S5002, $P104
    $P106."push_pirop"("nqp_get_sc_object", $P105, $P5025, $S5002)
    .return ($P106) 
.end
.HLL "nqp"
.namespace []
.sub "coerce" :subid("cuid_113_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3001
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .const 'Sub' $P5029 = 'cuid_321_1359572548.257' 
    capture_lex $P5029 
    .const 'Sub' $P5029 = 'cuid_322_1359572548.257' 
    capture_lex $P5029 
    .const 'Sub' $P5029 = 'cuid_323_1359572548.257' 
    capture_lex $P5029 
    .const 'Sub' $P5029 = 'cuid_324_1359572548.257' 
    capture_lex $P5029 
    .lex "$result", $P101 
    .lex "self", _lex_param_0 
    .lex "$post", _lex_param_1 
    .lex "$desired", _lex_param_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_1789
    .lex "RETURN", $P102
    set $S5001, _lex_param_2
    iseq $I5001, $S5001, "v"
    unless $I5001 goto if446_end1792 
    find_lex $P5002, "RETURN"
    $P5003 = $P5002(_lex_param_1)
  if446_end1792:
.annotate 'line', 3003
    nqp_decontainerize $P5004, _lex_param_0
    $P5005 = _lex_param_1."result"()
    $P5006 = $P5004."infer_type"($P5005)
    set $P101, $P5006
    set $S5002, $P101
    set $S5003, _lex_param_2
    iseq $I5002, $S5002, $S5003
    unless $I5002 goto if447_else1793 
.annotate 'line', 3004
    find_lex $P5007, "RETURN"
    $P5008 = $P5007(_lex_param_1)
    set $P5028, $P5008
    goto if447_end1794
  if447_else1793:
    set $S5005, $P101
    downcase $S5004, $S5005
    set $S5006, _lex_param_2
    iseq $I5003, $S5004, $S5006
    unless $I5003 goto if448_else1795 
.annotate 'line', 3008
    find_lex $P5009, "RETURN"
    $P5010 = $P5009(_lex_param_1)
    set $P5027, $P5010
    goto if448_end1796
  if448_else1795:
    set $S5007, $P101
    iseq $I5004, $S5007, "p"
    set $I5006, $I5004
    unless $I5004 goto if450_end1800 
    set $S5008, _lex_param_2
    iseq $I5005, $S5008, "P"
    set $I5006, $I5005
  if450_end1800:
    unless $I5006 goto if449_else1797 
.annotate 'line', 3013
    find_lex $P5011, "RETURN"
    $P5012 = $P5011(_lex_param_1)
    set $P5026, $P5012
    goto if449_end1798
  if449_else1797:
    set $S5009, $P101
    set $S5011, _lex_param_2
    downcase $S5010, $S5011
    iseq $I5007, $S5009, $S5010
    unless $I5007 goto if451_else1801 
    .const 'Sub' $P5013 = 'cuid_321_1359572548.257' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5025, $P5014
    goto if451_end1802
  if451_else1801:
    set $S5012, _lex_param_2
    iseq $I5008, $S5012, "P"
    set $I5010, $I5008
    if $I5008 goto unless454_end1810 
    set $S5013, _lex_param_2
    iseq $I5009, $S5013, "p"
    set $I5010, $I5009
  unless454_end1810:
    unless $I5010 goto if453_else1807 
    .const 'Sub' $P5015 = 'cuid_322_1359572548.257' 
    capture_lex $P5015
    $P5016 = $P5015()
    set $P5024, $P5016
    goto if453_end1808
  if453_else1807:
    set $S5014, $P101
    iseq $I5011, $S5014, "P"
    set $I5013, $I5011
    if $I5011 goto unless459_end1820 
    set $S5015, $P101
    iseq $I5012, $S5015, "p"
    set $I5013, $I5012
  unless459_end1820:
    unless $I5013 goto if458_else1817 
    .const 'Sub' $P5017 = 'cuid_323_1359572548.257' 
    capture_lex $P5017
    $P5018 = $P5017()
    set $P5023, $P5018
    goto if458_end1818
  if458_else1817:
    set $S5016, $P101
    index $I5015, "IiNnSs", $S5016, 0
    set $N5001, $I5015
    set $N5002, 0
    isge $I5014, $N5001, $N5002
    set $I5018, $I5014
    unless $I5014 goto if464_end1830 
    set $S5017, _lex_param_2
    index $I5017, "IiNnSs", $S5017, 0
    set $N5003, $I5017
    set $N5004, 0
    isge $I5016, $N5003, $N5004
    set $I5018, $I5016
  if464_end1830:
    unless $I5018 goto if463_else1827 
    .const 'Sub' $P5019 = 'cuid_324_1359572548.257' 
    capture_lex $P5019
    $P5020 = $P5019()
    set $P5022, $P5020
    goto if463_end1828
  if463_else1827:
.annotate 'line', 3046
    set $S5022, $P101
    concat $S5021, "Coercion from '", $S5022
    concat $S5020, $S5021, "' to '"
    set $S5023, _lex_param_2
    concat $S5019, $S5020, $S5023
    concat $S5018, $S5019, "' NYI"
    box $P5021, $S5018
    die $P5021
    set $P5022, $P5021
  if463_end1828:
    set $P5023, $P5022
  if458_end1818:
    set $P5024, $P5023
  if453_end1808:
    set $P5025, $P5024
  if451_end1802:
    set $P5026, $P5025
  if449_end1798:
    set $P5027, $P5026
  if448_end1796:
    set $P5028, $P5027
  if447_end1794:
    goto lexotic_1790
  lexotic_1789:
    .get_results ($P5028)
  lexotic_1790:
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_321_1359572548.257") :anon :lex :outer("cuid_113_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3017
    .lex "$ops", $P101 
    .lex "$reg", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 3019
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5005, $P5006, "PIRT"
    get_who $P5004, $P5005
    set $P5003, $P5004["Ops"]
    unless_null $P5003, fallback1803
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5007
  fallback1803:
    $P5008 = $P5003."new"()
    set $P101, $P5008
.annotate 'line', 3020
    find_dynamic_lex $P5010, "$*REGALLOC"
    unless_null $P5010, fallback1804
    nqp_get_sc_object $P5013, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$REGALLOC"]
    unless_null $P5011, fallback1805
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5011, $P5014
  fallback1805:
    unless_null $P5011, vivi_4521806
    die "Contextual $*REGALLOC not found"
    box $P5015, "Contextual $*REGALLOC not found"
    set $P5011, $P5015
  vivi_4521806:
    set $P5010, $P5011
  fallback1804:
    find_lex $P5009, "$result"
    set $S5002, $P5009
    concat $S5001, "fresh_", $S5002
    $P5016 = $P5010.$S5001()
    set $P102, $P5016
.annotate 'line', 3021
    find_lex $P5017, "$post"
    $P101."push"($P5017)
.annotate 'line', 3022
    find_lex $P5018, "$post"
    $P101."push_pirop"("set", $P102, $P5018)
.annotate 'line', 3023
    $P101."result"($P102)
    find_lex $P5019, "RETURN"
    $P5020 = $P5019($P101)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_322_1359572548.257") :anon :lex :outer("cuid_113_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3026
    .lex "$hll", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    box $P5002, ""
    set $P101, $P5002
    new $P5009, 'ExceptionHandler'
    set_label $P5009, catch_handler_4571815
    $P5009.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5009
    find_dynamic_lex $P5003, "$*HLL"
    unless_null $P5003, fallback1811
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$HLL"]
    unless_null $P5004, fallback1812
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5007
  fallback1812:
    unless_null $P5004, vivi_4551813
    die "Contextual $*HLL not found"
    box $P5008, "Contextual $*HLL not found"
    set $P5004, $P5008
  vivi_4551813:
    set $P5003, $P5004
  fallback1811:
    set $P101, $P5003
    set $P5010, $P101
    pop_eh 
    goto skip_handler_4561814
  catch_handler_4571815:
    .get_results ($P5009) 
    set $I10001, 1
    set $P5009["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    finalize $P5009
    pop_upto_eh $P5009
    pop_eh 
    set $P5010, $P10001
    goto skip_handler_4561814
  skip_handler_4561814:
.annotate 'line', 3029
    nqp_get_sc_object $P5015, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Operations"]
    unless_null $P5012, fallback1816
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5012, $P5016
  fallback1816:
    find_lex $P5018, "self"
    nqp_decontainerize $P5017, $P5018
    find_lex $P5019, "$result"
    set $S5002, $P5019
    downcase $S5001, $S5002
    find_lex $P5020, "$post"
    $P5021 = $P5012."box"($P5017, $P101, $S5001, $P5020)
    find_lex $P5011, "RETURN"
    $P5022 = $P5011($P5021)
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_323_1359572548.257") :anon :lex :outer("cuid_113_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3031
    .lex "$hll", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    box $P5002, ""
    set $P101, $P5002
    new $P5009, 'ExceptionHandler'
    set_label $P5009, catch_handler_4621825
    $P5009.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5009
    find_dynamic_lex $P5003, "$*HLL"
    unless_null $P5003, fallback1821
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$HLL"]
    unless_null $P5004, fallback1822
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5007
  fallback1822:
    unless_null $P5004, vivi_4601823
    die "Contextual $*HLL not found"
    box $P5008, "Contextual $*HLL not found"
    set $P5004, $P5008
  vivi_4601823:
    set $P5003, $P5004
  fallback1821:
    set $P101, $P5003
    set $P5010, $P101
    pop_eh 
    goto skip_handler_4611824
  catch_handler_4621825:
    .get_results ($P5009) 
    set $I10001, 1
    set $P5009["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    finalize $P5009
    pop_upto_eh $P5009
    pop_eh 
    set $P5010, $P10001
    goto skip_handler_4611824
  skip_handler_4611824:
.annotate 'line', 3034
    nqp_get_sc_object $P5015, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Operations"]
    unless_null $P5012, fallback1826
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5012, $P5016
  fallback1826:
    find_lex $P5018, "self"
    nqp_decontainerize $P5017, $P5018
    find_lex $P5019, "$desired"
    set $S5002, $P5019
    downcase $S5001, $S5002
    find_lex $P5020, "$post"
    $P5021 = $P5012."unbox"($P5017, $P101, $S5001, $P5020)
    find_lex $P5011, "RETURN"
    $P5022 = $P5011($P5021)
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_324_1359572548.257") :anon :lex :outer("cuid_113_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3036
    .lex "$ops", $P101 
    .lex "$rtype", $P102 
    .lex "$reg", $P103 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
.annotate 'line', 3038
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5006, $P5007, "PIRT"
    get_who $P5005, $P5006
    set $P5004, $P5005["Ops"]
    unless_null $P5004, fallback1831
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5008
  fallback1831:
    $P5009 = $P5004."new"()
    set $P101, $P5009
    find_lex $P5010, "$desired"
    set $S5002, $P5010
    downcase $S5001, $S5002
    box $P5011, $S5001
    set $P102, $P5011
.annotate 'line', 3040
    find_dynamic_lex $P5012, "$*REGALLOC"
    unless_null $P5012, fallback1832
    nqp_get_sc_object $P5015, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$REGALLOC"]
    unless_null $P5013, fallback1833
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5013, $P5016
  fallback1833:
    unless_null $P5013, vivi_4651834
    die "Contextual $*REGALLOC not found"
    box $P5017, "Contextual $*REGALLOC not found"
    set $P5013, $P5017
  vivi_4651834:
    set $P5012, $P5013
  fallback1832:
    set $S5004, $P102
    concat $S5003, "fresh_", $S5004
    $P5018 = $P5012.$S5003()
    set $P103, $P5018
.annotate 'line', 3041
    find_lex $P5019, "$post"
    $P101."push"($P5019)
.annotate 'line', 3042
    find_lex $P5020, "$post"
    $P101."push_pirop"("set", $P103, $P5020)
.annotate 'line', 3043
    $P101."result"($P103)
    find_lex $P5021, "RETURN"
    $P5022 = $P5021($P101)
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "infer_type" :subid("cuid_114_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3051
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5024 = 'cuid_325_1359572548.257' 
    capture_lex $P5024 
    .lex "self", _lex_param_0 
    .lex "$inferee", _lex_param_1 
    set $S5002, _lex_param_1
    substr $S5001, $S5002, 0, 1
    iseq $I5001, $S5001, "$"
    unless $I5001 goto if466_else1835 
.annotate 'line', 3052
    set $S5004, _lex_param_1
    substr $S5003, $S5004, 1, 1
    box $P5023, $S5003
    set $P5022, $P5023
    goto if466_end1836
  if466_else1835:
.annotate 'line', 3055
    find_dynamic_lex $P5001, "$*BLOCK"
    unless_null $P5001, fallback1839
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$BLOCK"]
    unless_null $P5002, fallback1840
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5002, $P5005
  fallback1840:
    unless_null $P5002, vivi_4681841
    die "Contextual $*BLOCK not found"
    box $P5006, "Contextual $*BLOCK not found"
    set $P5002, $P5006
  vivi_4681841:
    set $P5001, $P5002
  fallback1839:
    $P5007 = $P5001."reg_type"(_lex_param_1)
    unless $P5007 goto if467_else1837 
    .const 'Sub' $P5008 = 'cuid_325_1359572548.257' 
    capture_lex $P5008
    $P5009 = $P5008($P5007)
    set $P5021, $P5009
    goto if467_end1838
  if467_else1837:
    set $S5006, _lex_param_1
    substr $S5005, $S5006, 0, 1
    iseq $I5002, $S5005, "\""
    set $I5004, $I5002
    if $I5002 goto unless472_end1849 
    set $S5008, _lex_param_1
    substr $S5007, $S5008, 0, 6
    iseq $I5003, $S5007, "utf8:\""
    set $I5004, $I5003
  unless472_end1849:
    set $I5006, $I5004
    if $I5004 goto unless471_end1847 
    set $S5010, _lex_param_1
    substr $S5009, $S5010, 0, 6
    iseq $I5005, $S5009, "ucs4:\""
    set $I5006, $I5005
  unless471_end1847:
    set $I5008, $I5006
    if $I5006 goto unless470_end1845 
    set $S5012, _lex_param_1
    substr $S5011, $S5012, 0, 9
    iseq $I5007, $S5011, "unicode:\""
    set $I5008, $I5007
  unless470_end1845:
    unless $I5008 goto if469_else1842 
.annotate 'line', 3061

    box $P5020, "s"
    set $P5019, $P5020
    goto if469_end1843
  if469_else1842:
    set $S5014, _lex_param_1
    substr $S5013, $S5014, 0, 6
    iseq $I5009, $S5013, ".const"
    unless $I5009 goto if473_else1850 
.annotate 'line', 3064

    box $P5018, "P"
    set $P5017, $P5018
    goto if473_end1851
  if473_else1850:
    set $S5016, _lex_param_1
    substr $S5015, $S5016, 0, 1
    iseq $I5010, $S5015, "."
    unless $I5010 goto if474_else1852 
.annotate 'line', 3067

    box $P5016, "i"
    set $P5015, $P5016
    goto if474_end1853
  if474_else1852:
    set $S5017, _lex_param_1
    index $I5012, $S5017, ".", 0
    set $N5001, $I5012
    set $N5002, 0
    isgt $I5011, $N5001, $N5002
    unless $I5011 goto if475_else1854 
.annotate 'line', 3070

    box $P5014, "n"
    set $P5013, $P5014
    goto if475_end1855
  if475_else1854:
    set $N5003, _lex_param_1
    set $S5018, $N5003
    set $S5019, _lex_param_1
    iseq $I5013, $S5018, $S5019
    unless $I5013 goto if476_else1856 
.annotate 'line', 3073

    box $P5012, "i"
    set $P5011, $P5012
    goto if476_end1857
  if476_else1856:
.annotate 'line', 3076
    set $S5022, _lex_param_1
    concat $S5021, "Cannot infer type from '", $S5022
    concat $S5020, $S5021, "'"
    box $P5010, $S5020
    die $P5010
    set $P5011, $P5010
  if476_end1857:
    set $P5013, $P5011
  if475_end1855:
    set $P5015, $P5013
  if474_end1853:
    set $P5017, $P5015
  if473_end1851:
    set $P5019, $P5017
  if469_end1843:
    set $P5021, $P5019
  if467_end1838:
    set $P5022, $P5021
  if466_end1836:
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_325_1359572548.257") :anon :lex :outer("cuid_114_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3055
    .param pmc _lex_param_0 
    .lex "$type", _lex_param_0 
    set $S5002, _lex_param_0
    downcase $S5001, $S5002
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "as_post" :subid("cuid_115_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3081
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("want") :optional 
    .param int haz_param_32 :opt_flag 
    .const 'Sub' $P5347 = 'cuid_326_1359572548.257' 
    capture_lex $P5347 
    if haz_param_32, default2002
    nqp_get_sc_object $P5346, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set _lex_param_2, $P5346
  default2002:
    .lex "$ops", $P101 
    .lex "$prefix", $P102 
    .lex "%*REG", $P103 
    .lex "$reglist", $P104 
    .lex "$startlabel", $P105 
    .lex "$donelabel", $P106 
    .lex "$restartlabel", $P107 
    .lex "$faillabel", $P108 
    .lex "$jumplabel", $P109 
    .lex "$cutlabel", $P110 
    .lex "$cstacklabel", $P111 
    .lex "$startreg", $P112 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    .lex "$want", _lex_param_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    new $P5003, 'Hash'
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P106, $P5006
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P107, $P5007
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P108, $P5008
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P109, $P5009
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P110, $P5010
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P111, $P5011
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P112, $P5012
.annotate 'line', 3082
    nqp_decontainerize $P5013, _lex_param_0
    $P5014 = $P5013."post_new"("Ops")
    set $P101, $P5014
.annotate 'line', 3083
    $P5015 = _lex_param_1."node"()
    unless $P5015 goto if477_end1859 
    $P5016 = _lex_param_1."node"()
    $P5017 = $P101."node"($P5016)
  if477_end1859:
.annotate 'line', 3084
    nqp_decontainerize $P5018, _lex_param_0
    $P5019 = $P5018."unique"("rx")
    set $S5002, $P5019
    concat $S5001, $S5002, "_"
    box $P5020, $S5001
    set $P102, $P5020
    split $P5028, " ", "tgt string pos int off int eos int rep int cur pmc curclass pmc bstack pmc cstack pmc"
    set $P104, $P5028
  while479_test1863:
    set $P5031, $P104
    unless $P104 goto while479_done1867 
  while479_redo1865:
    .const 'Sub' $P5029 = 'cuid_326_1359572548.257' 
    capture_lex $P5029
    $P5030 = $P5029()
    set $P5031, $P5030
    goto while479_test1863 
  while479_done1867:
.annotate 'line', 3096
    nqp_decontainerize $P5032, _lex_param_0
    set $S5004, $P102
    concat $S5003, $S5004, "start"
    $P5033 = $P5032."post_new"("Label", $S5003 :named("name"))
    set $P105, $P5033
.annotate 'line', 3097
    nqp_decontainerize $P5034, _lex_param_0
    set $S5006, $P102
    concat $S5005, $S5006, "done"
    $P5035 = $P5034."post_new"("Label", $S5005 :named("name"))
    set $P106, $P5035
.annotate 'line', 3098
    nqp_decontainerize $P5036, _lex_param_0
    set $S5008, $P102
    concat $S5007, $S5008, "restart"
    $P5037 = $P5036."post_new"("Label", $S5007 :named("name"))
    set $P107, $P5037
.annotate 'line', 3099
    nqp_decontainerize $P5038, _lex_param_0
    set $S5010, $P102
    concat $S5009, $S5010, "fail"
    $P5039 = $P5038."post_new"("Label", $S5009 :named("name"))
    set $P108, $P5039
.annotate 'line', 3100
    nqp_decontainerize $P5040, _lex_param_0
    set $S5012, $P102
    concat $S5011, $S5012, "jump"
    $P5041 = $P5040."post_new"("Label", $S5011 :named("name"))
    set $P109, $P5041
.annotate 'line', 3101
    nqp_decontainerize $P5042, _lex_param_0
    set $S5014, $P102
    concat $S5013, $S5014, "cut"
    $P5043 = $P5042."post_new"("Label", $S5013 :named("name"))
    set $P110, $P5043
.annotate 'line', 3102
    nqp_decontainerize $P5044, _lex_param_0
    set $S5016, $P102
    concat $S5015, $S5016, "cstack_done"
    $P5045 = $P5044."post_new"("Label", $S5015 :named("name"))
    set $P111, $P5045
    unless_null $P103, fallback1871
    nqp_get_sc_object $P5048, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5047, $P5048
    set $P5046, $P5047["%REG"]
    unless_null $P5046, fallback1872
    nqp_get_sc_object $P5050, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5049, $P5050
    new $P5051, 'Hash'
    set $P5049["%REG"], $P5051
    set $P5046, $P5051
  fallback1872:
    unless_null $P5046, vivi_4811873
    die "Contextual %*REG not found"
    box $P5052, "Contextual %*REG not found"
    set $P5046, $P5052
  vivi_4811873:
    set $P103, $P5046
  fallback1871:
    set $P103["fail"], $P108
    new $P5053, 'ResizablePMCArray'
    unless_null $P103, fallback1874
    nqp_get_sc_object $P5057, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["%REG"]
    unless_null $P5055, fallback1875
    nqp_get_sc_object $P5059, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5058, $P5059
    new $P5060, 'Hash'
    set $P5058["%REG"], $P5060
    set $P5055, $P5060
  fallback1875:
    unless_null $P5055, vivi_4821876
    die "Contextual %*REG not found"
    box $P5061, "Contextual %*REG not found"
    set $P5055, $P5061
  vivi_4821876:
    set $P103, $P5055
  fallback1874:
    set $P5054, $P103["cur"]
    unless_null $P5054, fallback1877
    nqp_get_sc_object $P5062, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5054, $P5062
  fallback1877:
    push $P5053, $P5054
    unless_null $P103, fallback1878
    nqp_get_sc_object $P5066, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5065, $P5066
    set $P5064, $P5065["%REG"]
    unless_null $P5064, fallback1879
    nqp_get_sc_object $P5068, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5067, $P5068
    new $P5069, 'Hash'
    set $P5067["%REG"], $P5069
    set $P5064, $P5069
  fallback1879:
    unless_null $P5064, vivi_4831880
    die "Contextual %*REG not found"
    box $P5070, "Contextual %*REG not found"
    set $P5064, $P5070
  vivi_4831880:
    set $P103, $P5064
  fallback1878:
    set $P5063, $P103["tgt"]
    unless_null $P5063, fallback1881
    nqp_get_sc_object $P5071, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5063, $P5071
  fallback1881:
    push $P5053, $P5063
    unless_null $P103, fallback1882
    nqp_get_sc_object $P5075, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5074, $P5075
    set $P5073, $P5074["%REG"]
    unless_null $P5073, fallback1883
    nqp_get_sc_object $P5077, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5076, $P5077
    new $P5078, 'Hash'
    set $P5076["%REG"], $P5078
    set $P5073, $P5078
  fallback1883:
    unless_null $P5073, vivi_4841884
    die "Contextual %*REG not found"
    box $P5079, "Contextual %*REG not found"
    set $P5073, $P5079
  vivi_4841884:
    set $P103, $P5073
  fallback1882:
    set $P5072, $P103["pos"]
    unless_null $P5072, fallback1885
    nqp_get_sc_object $P5080, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5072, $P5080
  fallback1885:
    push $P5053, $P5072
    unless_null $P103, fallback1886
    nqp_get_sc_object $P5084, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5083, $P5084
    set $P5082, $P5083["%REG"]
    unless_null $P5082, fallback1887
    nqp_get_sc_object $P5086, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5085, $P5086
    new $P5087, 'Hash'
    set $P5085["%REG"], $P5087
    set $P5082, $P5087
  fallback1887:
    unless_null $P5082, vivi_4851888
    die "Contextual %*REG not found"
    box $P5088, "Contextual %*REG not found"
    set $P5082, $P5088
  vivi_4851888:
    set $P103, $P5082
  fallback1886:
    set $P5081, $P103["curclass"]
    unless_null $P5081, fallback1889
    nqp_get_sc_object $P5089, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5081, $P5089
  fallback1889:
    push $P5053, $P5081
    unless_null $P103, fallback1890
    nqp_get_sc_object $P5093, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5092, $P5093
    set $P5091, $P5092["%REG"]
    unless_null $P5091, fallback1891
    nqp_get_sc_object $P5095, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5094, $P5095
    new $P5096, 'Hash'
    set $P5094["%REG"], $P5096
    set $P5091, $P5096
  fallback1891:
    unless_null $P5091, vivi_4861892
    die "Contextual %*REG not found"
    box $P5097, "Contextual %*REG not found"
    set $P5091, $P5097
  vivi_4861892:
    set $P103, $P5091
  fallback1890:
    set $P5090, $P103["bstack"]
    unless_null $P5090, fallback1893
    nqp_get_sc_object $P5098, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5090, $P5098
  fallback1893:
    push $P5053, $P5090
    box $P5099, "$I19"
    push $P5053, $P5099
    join $S5019, ", ", $P5053
    concat $S5018, "(", $S5019
    concat $S5017, $S5018, ")"
    box $P5100, $S5017
    set $P112, $P5100
.annotate 'line', 3107
    $P101."push_pirop"("callmethod", "\"!cursor_start\"", "self", $P112 :named("result"))
.annotate 'line', 3108
    unless_null $P103, fallback1894
    nqp_get_sc_object $P5104, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5103, $P5104
    set $P5102, $P5103["%REG"]
    unless_null $P5102, fallback1895
    nqp_get_sc_object $P5106, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5105, $P5106
    new $P5107, 'Hash'
    set $P5105["%REG"], $P5107
    set $P5102, $P5107
  fallback1895:
    unless_null $P5102, vivi_4871896
    die "Contextual %*REG not found"
    box $P5108, "Contextual %*REG not found"
    set $P5102, $P5108
  vivi_4871896:
    set $P103, $P5102
  fallback1894:
    set $P5101, $P103["cur"]
    unless_null $P5101, fallback1897
    nqp_get_sc_object $P5109, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5101, $P5109
  fallback1897:
    $P101."push_pirop"("store_lex", utf8:"unicode:\"$\\x{a2}\"", $P5101)
.annotate 'line', 3109
    unless_null $P103, fallback1898
    nqp_get_sc_object $P5113, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5112, $P5113
    set $P5111, $P5112["%REG"]
    unless_null $P5111, fallback1899
    nqp_get_sc_object $P5115, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5114, $P5115
    new $P5116, 'Hash'
    set $P5114["%REG"], $P5116
    set $P5111, $P5116
  fallback1899:
    unless_null $P5111, vivi_4881900
    die "Contextual %*REG not found"
    box $P5117, "Contextual %*REG not found"
    set $P5111, $P5117
  vivi_4881900:
    set $P103, $P5111
  fallback1898:
    set $P5110, $P103["eos"]
    unless_null $P5110, fallback1901
    nqp_get_sc_object $P5118, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5110, $P5118
  fallback1901:
    unless_null $P103, fallback1902
    nqp_get_sc_object $P5122, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5121, $P5122
    set $P5120, $P5121["%REG"]
    unless_null $P5120, fallback1903
    nqp_get_sc_object $P5124, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5123, $P5124
    new $P5125, 'Hash'
    set $P5123["%REG"], $P5125
    set $P5120, $P5125
  fallback1903:
    unless_null $P5120, vivi_4891904
    die "Contextual %*REG not found"
    box $P5126, "Contextual %*REG not found"
    set $P5120, $P5126
  vivi_4891904:
    set $P103, $P5120
  fallback1902:
    set $P5119, $P103["tgt"]
    unless_null $P5119, fallback1905
    nqp_get_sc_object $P5127, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5119, $P5127
  fallback1905:
    $P101."push_pirop"("length", $P5110, $P5119)
.annotate 'line', 3110
    $P101."push_pirop"("eq", "$I19", 1, $P107)
.annotate 'line', 3111
    unless_null $P103, fallback1906
    nqp_get_sc_object $P5131, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5130, $P5131
    set $P5129, $P5130["%REG"]
    unless_null $P5129, fallback1907
    nqp_get_sc_object $P5133, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5132, $P5133
    new $P5134, 'Hash'
    set $P5132["%REG"], $P5134
    set $P5129, $P5134
  fallback1907:
    unless_null $P5129, vivi_4901908
    die "Contextual %*REG not found"
    box $P5135, "Contextual %*REG not found"
    set $P5129, $P5135
  vivi_4901908:
    set $P103, $P5129
  fallback1906:
    set $P5128, $P103["pos"]
    unless_null $P5128, fallback1909
    nqp_get_sc_object $P5136, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5128, $P5136
  fallback1909:
    unless_null $P103, fallback1910
    nqp_get_sc_object $P5140, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5139, $P5140
    set $P5138, $P5139["%REG"]
    unless_null $P5138, fallback1911
    nqp_get_sc_object $P5142, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5141, $P5142
    new $P5143, 'Hash'
    set $P5141["%REG"], $P5143
    set $P5138, $P5143
  fallback1911:
    unless_null $P5138, vivi_4911912
    die "Contextual %*REG not found"
    box $P5144, "Contextual %*REG not found"
    set $P5138, $P5144
  vivi_4911912:
    set $P103, $P5138
  fallback1910:
    set $P5137, $P103["eos"]
    unless_null $P5137, fallback1913
    nqp_get_sc_object $P5145, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5137, $P5145
  fallback1913:
    unless_null $P103, fallback1914
    nqp_get_sc_object $P5149, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5148, $P5149
    set $P5147, $P5148["%REG"]
    unless_null $P5147, fallback1915
    nqp_get_sc_object $P5151, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5150, $P5151
    new $P5152, 'Hash'
    set $P5150["%REG"], $P5152
    set $P5147, $P5152
  fallback1915:
    unless_null $P5147, vivi_4921916
    die "Contextual %*REG not found"
    box $P5153, "Contextual %*REG not found"
    set $P5147, $P5153
  vivi_4921916:
    set $P103, $P5147
  fallback1914:
    set $P5146, $P103["fail"]
    unless_null $P5146, fallback1917
    nqp_get_sc_object $P5154, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5146, $P5154
  fallback1917:
    $P101."push_pirop"("gt", $P5128, $P5137, $P5146)
.annotate 'line', 3112
    nqp_decontainerize $P5155, _lex_param_0
    $P5156 = $P5155."regex_post"(_lex_param_1)
    $P101."push"($P5156)
.annotate 'line', 3113
    $P101."push"($P107)
.annotate 'line', 3114
    unless_null $P103, fallback1918
    nqp_get_sc_object $P5160, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5159, $P5160
    set $P5158, $P5159["%REG"]
    unless_null $P5158, fallback1919
    nqp_get_sc_object $P5162, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5161, $P5162
    new $P5163, 'Hash'
    set $P5161["%REG"], $P5163
    set $P5158, $P5163
  fallback1919:
    unless_null $P5158, vivi_4931920
    die "Contextual %*REG not found"
    box $P5164, "Contextual %*REG not found"
    set $P5158, $P5164
  vivi_4931920:
    set $P103, $P5158
  fallback1918:
    set $P5157, $P103["cstack"]
    unless_null $P5157, fallback1921
    nqp_get_sc_object $P5165, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5157, $P5165
  fallback1921:
    unless_null $P103, fallback1922
    nqp_get_sc_object $P5169, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5168, $P5169
    set $P5167, $P5168["%REG"]
    unless_null $P5167, fallback1923
    nqp_get_sc_object $P5171, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5170, $P5171
    new $P5172, 'Hash'
    set $P5170["%REG"], $P5172
    set $P5167, $P5172
  fallback1923:
    unless_null $P5167, vivi_4941924
    die "Contextual %*REG not found"
    box $P5173, "Contextual %*REG not found"
    set $P5167, $P5173
  vivi_4941924:
    set $P103, $P5167
  fallback1922:
    set $P5166, $P103["cur"]
    unless_null $P5166, fallback1925
    nqp_get_sc_object $P5174, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5166, $P5174
  fallback1925:
    unless_null $P103, fallback1926
    nqp_get_sc_object $P5178, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5177, $P5178
    set $P5176, $P5177["%REG"]
    unless_null $P5176, fallback1927
    nqp_get_sc_object $P5180, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5179, $P5180
    new $P5181, 'Hash'
    set $P5179["%REG"], $P5181
    set $P5176, $P5181
  fallback1927:
    unless_null $P5176, vivi_4951928
    die "Contextual %*REG not found"
    box $P5182, "Contextual %*REG not found"
    set $P5176, $P5182
  vivi_4951928:
    set $P103, $P5176
  fallback1926:
    set $P5175, $P103["curclass"]
    unless_null $P5175, fallback1929
    nqp_get_sc_object $P5183, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5175, $P5183
  fallback1929:
    $P101."push_pirop"("repr_get_attr_obj", $P5157, $P5166, $P5175, "\"$!cstack\"")
.annotate 'line', 3115
    $P101."push"($P108)
.annotate 'line', 3116
    unless_null $P103, fallback1930
    nqp_get_sc_object $P5187, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5186, $P5187
    set $P5185, $P5186["%REG"]
    unless_null $P5185, fallback1931
    nqp_get_sc_object $P5189, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5188, $P5189
    new $P5190, 'Hash'
    set $P5188["%REG"], $P5190
    set $P5185, $P5190
  fallback1931:
    unless_null $P5185, vivi_4961932
    die "Contextual %*REG not found"
    box $P5191, "Contextual %*REG not found"
    set $P5185, $P5191
  vivi_4961932:
    set $P103, $P5185
  fallback1930:
    set $P5184, $P103["bstack"]
    unless_null $P5184, fallback1933
    nqp_get_sc_object $P5192, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5184, $P5192
  fallback1933:
    $P101."push_pirop"("unless", $P5184, $P106)
.annotate 'line', 3117
    unless_null $P103, fallback1934
    nqp_get_sc_object $P5196, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5195, $P5196
    set $P5194, $P5195["%REG"]
    unless_null $P5194, fallback1935
    nqp_get_sc_object $P5198, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5197, $P5198
    new $P5199, 'Hash'
    set $P5197["%REG"], $P5199
    set $P5194, $P5199
  fallback1935:
    unless_null $P5194, vivi_4971936
    die "Contextual %*REG not found"
    box $P5200, "Contextual %*REG not found"
    set $P5194, $P5200
  vivi_4971936:
    set $P103, $P5194
  fallback1934:
    set $P5193, $P103["bstack"]
    unless_null $P5193, fallback1937
    nqp_get_sc_object $P5201, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5193, $P5201
  fallback1937:
    $P101."push_pirop"("pop", "$I19", $P5193)
.annotate 'line', 3118
    unless_null $P103, fallback1938
    nqp_get_sc_object $P5205, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5204, $P5205
    set $P5203, $P5204["%REG"]
    unless_null $P5203, fallback1939
    nqp_get_sc_object $P5207, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5206, $P5207
    new $P5208, 'Hash'
    set $P5206["%REG"], $P5208
    set $P5203, $P5208
  fallback1939:
    unless_null $P5203, vivi_4981940
    die "Contextual %*REG not found"
    box $P5209, "Contextual %*REG not found"
    set $P5203, $P5209
  vivi_4981940:
    set $P103, $P5203
  fallback1938:
    set $P5202, $P103["cstack"]
    unless_null $P5202, fallback1941
    nqp_get_sc_object $P5210, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5202, $P5210
  fallback1941:
    $P101."push_pirop"("if_null", $P5202, $P111)
.annotate 'line', 3119
    unless_null $P103, fallback1942
    nqp_get_sc_object $P5214, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5213, $P5214
    set $P5212, $P5213["%REG"]
    unless_null $P5212, fallback1943
    nqp_get_sc_object $P5216, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5215, $P5216
    new $P5217, 'Hash'
    set $P5215["%REG"], $P5217
    set $P5212, $P5217
  fallback1943:
    unless_null $P5212, vivi_4991944
    die "Contextual %*REG not found"
    box $P5218, "Contextual %*REG not found"
    set $P5212, $P5218
  vivi_4991944:
    set $P103, $P5212
  fallback1942:
    set $P5211, $P103["cstack"]
    unless_null $P5211, fallback1945
    nqp_get_sc_object $P5219, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5211, $P5219
  fallback1945:
    $P101."push_pirop"("unless", $P5211, $P111)
.annotate 'line', 3120
    $P101."push_pirop"("dec", "$I19")
.annotate 'line', 3121
    unless_null $P103, fallback1946
    nqp_get_sc_object $P5223, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5222, $P5223
    set $P5221, $P5222["%REG"]
    unless_null $P5221, fallback1947
    nqp_get_sc_object $P5225, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5224, $P5225
    new $P5226, 'Hash'
    set $P5224["%REG"], $P5226
    set $P5221, $P5226
  fallback1947:
    unless_null $P5221, vivi_5001948
    die "Contextual %*REG not found"
    box $P5227, "Contextual %*REG not found"
    set $P5221, $P5227
  vivi_5001948:
    set $P103, $P5221
  fallback1946:
    set $P5220, $P103["cstack"]
    unless_null $P5220, fallback1949
    nqp_get_sc_object $P5228, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5220, $P5228
  fallback1949:
    set $S5021, $P5220
    concat $S5020, $S5021, "[$I19]"
    $P101."push_pirop"("set", "$P11", $S5020)
.annotate 'line', 3122
    $P101."push"($P111)
.annotate 'line', 3123
    unless_null $P103, fallback1950
    nqp_get_sc_object $P5232, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5231, $P5232
    set $P5230, $P5231["%REG"]
    unless_null $P5230, fallback1951
    nqp_get_sc_object $P5234, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5233, $P5234
    new $P5235, 'Hash'
    set $P5233["%REG"], $P5235
    set $P5230, $P5235
  fallback1951:
    unless_null $P5230, vivi_5011952
    die "Contextual %*REG not found"
    box $P5236, "Contextual %*REG not found"
    set $P5230, $P5236
  vivi_5011952:
    set $P103, $P5230
  fallback1950:
    set $P5229, $P103["rep"]
    unless_null $P5229, fallback1953
    nqp_get_sc_object $P5237, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5229, $P5237
  fallback1953:
    unless_null $P103, fallback1954
    nqp_get_sc_object $P5241, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5240, $P5241
    set $P5239, $P5240["%REG"]
    unless_null $P5239, fallback1955
    nqp_get_sc_object $P5243, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5242, $P5243
    new $P5244, 'Hash'
    set $P5242["%REG"], $P5244
    set $P5239, $P5244
  fallback1955:
    unless_null $P5239, vivi_5021956
    die "Contextual %*REG not found"
    box $P5245, "Contextual %*REG not found"
    set $P5239, $P5245
  vivi_5021956:
    set $P103, $P5239
  fallback1954:
    set $P5238, $P103["bstack"]
    unless_null $P5238, fallback1957
    nqp_get_sc_object $P5246, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5238, $P5246
  fallback1957:
    $P101."push_pirop"("pop", $P5229, $P5238)
.annotate 'line', 3124
    unless_null $P103, fallback1958
    nqp_get_sc_object $P5250, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5249, $P5250
    set $P5248, $P5249["%REG"]
    unless_null $P5248, fallback1959
    nqp_get_sc_object $P5252, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5251, $P5252
    new $P5253, 'Hash'
    set $P5251["%REG"], $P5253
    set $P5248, $P5253
  fallback1959:
    unless_null $P5248, vivi_5031960
    die "Contextual %*REG not found"
    box $P5254, "Contextual %*REG not found"
    set $P5248, $P5254
  vivi_5031960:
    set $P103, $P5248
  fallback1958:
    set $P5247, $P103["pos"]
    unless_null $P5247, fallback1961
    nqp_get_sc_object $P5255, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5247, $P5255
  fallback1961:
    unless_null $P103, fallback1962
    nqp_get_sc_object $P5259, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5258, $P5259
    set $P5257, $P5258["%REG"]
    unless_null $P5257, fallback1963
    nqp_get_sc_object $P5261, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5260, $P5261
    new $P5262, 'Hash'
    set $P5260["%REG"], $P5262
    set $P5257, $P5262
  fallback1963:
    unless_null $P5257, vivi_5041964
    die "Contextual %*REG not found"
    box $P5263, "Contextual %*REG not found"
    set $P5257, $P5263
  vivi_5041964:
    set $P103, $P5257
  fallback1962:
    set $P5256, $P103["bstack"]
    unless_null $P5256, fallback1965
    nqp_get_sc_object $P5264, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5256, $P5264
  fallback1965:
    $P101."push_pirop"("pop", $P5247, $P5256)
.annotate 'line', 3125
    unless_null $P103, fallback1966
    nqp_get_sc_object $P5268, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5267, $P5268
    set $P5266, $P5267["%REG"]
    unless_null $P5266, fallback1967
    nqp_get_sc_object $P5270, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5269, $P5270
    new $P5271, 'Hash'
    set $P5269["%REG"], $P5271
    set $P5266, $P5271
  fallback1967:
    unless_null $P5266, vivi_5051968
    die "Contextual %*REG not found"
    box $P5272, "Contextual %*REG not found"
    set $P5266, $P5272
  vivi_5051968:
    set $P103, $P5266
  fallback1966:
    set $P5265, $P103["bstack"]
    unless_null $P5265, fallback1969
    nqp_get_sc_object $P5273, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5265, $P5273
  fallback1969:
    $P101."push_pirop"("pop", "$I19", $P5265)
.annotate 'line', 3126
    unless_null $P103, fallback1970
    nqp_get_sc_object $P5277, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5276, $P5277
    set $P5275, $P5276["%REG"]
    unless_null $P5275, fallback1971
    nqp_get_sc_object $P5279, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5278, $P5279
    new $P5280, 'Hash'
    set $P5278["%REG"], $P5280
    set $P5275, $P5280
  fallback1971:
    unless_null $P5275, vivi_5061972
    die "Contextual %*REG not found"
    box $P5281, "Contextual %*REG not found"
    set $P5275, $P5281
  vivi_5061972:
    set $P103, $P5275
  fallback1970:
    set $P5274, $P103["pos"]
    unless_null $P5274, fallback1973
    nqp_get_sc_object $P5282, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5274, $P5282
  fallback1973:
    $P101."push_pirop"("lt", $P5274, -1, $P106)
.annotate 'line', 3127
    unless_null $P103, fallback1974
    nqp_get_sc_object $P5286, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5285, $P5286
    set $P5284, $P5285["%REG"]
    unless_null $P5284, fallback1975
    nqp_get_sc_object $P5288, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5287, $P5288
    new $P5289, 'Hash'
    set $P5287["%REG"], $P5289
    set $P5284, $P5289
  fallback1975:
    unless_null $P5284, vivi_5071976
    die "Contextual %*REG not found"
    box $P5290, "Contextual %*REG not found"
    set $P5284, $P5290
  vivi_5071976:
    set $P103, $P5284
  fallback1974:
    set $P5283, $P103["pos"]
    unless_null $P5283, fallback1977
    nqp_get_sc_object $P5291, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5283, $P5291
  fallback1977:
    $P101."push_pirop"("lt", $P5283, 0, $P108)
.annotate 'line', 3128
    $P101."push_pirop"("eq", "$I19", 0, $P108)
.annotate 'line', 3130
    unless_null $P103, fallback1978
    nqp_get_sc_object $P5295, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5294, $P5295
    set $P5293, $P5294["%REG"]
    unless_null $P5293, fallback1979
    nqp_get_sc_object $P5297, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5296, $P5297
    new $P5298, 'Hash'
    set $P5296["%REG"], $P5298
    set $P5293, $P5298
  fallback1979:
    unless_null $P5293, vivi_5081980
    die "Contextual %*REG not found"
    box $P5299, "Contextual %*REG not found"
    set $P5293, $P5299
  vivi_5081980:
    set $P103, $P5293
  fallback1978:
    set $P5292, $P103["cstack"]
    unless_null $P5292, fallback1981
    nqp_get_sc_object $P5300, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5292, $P5300
  fallback1981:
    $P101."push_pirop"("nqp_islist", "$I20", $P5292)
.annotate 'line', 3131
    $P101."push_pirop"("unless", "$I20", $P109)
.annotate 'line', 3132
    unless_null $P103, fallback1982
    nqp_get_sc_object $P5304, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5303, $P5304
    set $P5302, $P5303["%REG"]
    unless_null $P5302, fallback1983
    nqp_get_sc_object $P5306, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5305, $P5306
    new $P5307, 'Hash'
    set $P5305["%REG"], $P5307
    set $P5302, $P5307
  fallback1983:
    unless_null $P5302, vivi_5091984
    die "Contextual %*REG not found"
    box $P5308, "Contextual %*REG not found"
    set $P5302, $P5308
  vivi_5091984:
    set $P103, $P5302
  fallback1982:
    set $P5301, $P103["bstack"]
    unless_null $P5301, fallback1985
    nqp_get_sc_object $P5309, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5301, $P5309
  fallback1985:
    $P101."push_pirop"("elements", "$I18", $P5301)
.annotate 'line', 3133
    $P101."push_pirop"("le", "$I18", 0, $P110)
.annotate 'line', 3134
    $P101."push_pirop"("dec", "$I18")
.annotate 'line', 3135
    unless_null $P103, fallback1986
    nqp_get_sc_object $P5313, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5312, $P5313
    set $P5311, $P5312["%REG"]
    unless_null $P5311, fallback1987
    nqp_get_sc_object $P5315, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5314, $P5315
    new $P5316, 'Hash'
    set $P5314["%REG"], $P5316
    set $P5311, $P5316
  fallback1987:
    unless_null $P5311, vivi_5101988
    die "Contextual %*REG not found"
    box $P5317, "Contextual %*REG not found"
    set $P5311, $P5317
  vivi_5101988:
    set $P103, $P5311
  fallback1986:
    set $P5310, $P103["bstack"]
    unless_null $P5310, fallback1989
    nqp_get_sc_object $P5318, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5310, $P5318
  fallback1989:
    set $S5023, $P5310
    concat $S5022, $S5023, "[$I18]"
    $P101."push_pirop"("set", "$I18", $S5022)
.annotate 'line', 3136
    $P101."push"($P110)
.annotate 'line', 3137
    unless_null $P103, fallback1990
    nqp_get_sc_object $P5322, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5321, $P5322
    set $P5320, $P5321["%REG"]
    unless_null $P5320, fallback1991
    nqp_get_sc_object $P5324, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5323, $P5324
    new $P5325, 'Hash'
    set $P5323["%REG"], $P5325
    set $P5320, $P5325
  fallback1991:
    unless_null $P5320, vivi_5111992
    die "Contextual %*REG not found"
    box $P5326, "Contextual %*REG not found"
    set $P5320, $P5326
  vivi_5111992:
    set $P103, $P5320
  fallback1990:
    set $P5319, $P103["cstack"]
    unless_null $P5319, fallback1993
    nqp_get_sc_object $P5327, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5319, $P5327
  fallback1993:
    $P101."push_pirop"("assign", $P5319, "$I18")
.annotate 'line', 3138
    $P101."push"($P109)
.annotate 'line', 3139
    $P101."push_pirop"("jump", "$I19")
.annotate 'line', 3140
    $P101."push"($P106)
.annotate 'line', 3141
    unless_null $P103, fallback1994
    nqp_get_sc_object $P5331, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5330, $P5331
    set $P5329, $P5330["%REG"]
    unless_null $P5329, fallback1995
    nqp_get_sc_object $P5333, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5332, $P5333
    new $P5334, 'Hash'
    set $P5332["%REG"], $P5334
    set $P5329, $P5334
  fallback1995:
    unless_null $P5329, vivi_5121996
    die "Contextual %*REG not found"
    box $P5335, "Contextual %*REG not found"
    set $P5329, $P5335
  vivi_5121996:
    set $P103, $P5329
  fallback1994:
    set $P5328, $P103["cur"]
    unless_null $P5328, fallback1997
    nqp_get_sc_object $P5336, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5328, $P5336
  fallback1997:
    $P101."push_pirop"("callmethod", "\"!cursor_fail\"", $P5328)
.annotate 'line', 3143
    unless_null $P103, fallback1998
    nqp_get_sc_object $P5340, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5339, $P5340
    set $P5338, $P5339["%REG"]
    unless_null $P5338, fallback1999
    nqp_get_sc_object $P5342, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5341, $P5342
    new $P5343, 'Hash'
    set $P5341["%REG"], $P5343
    set $P5338, $P5343
  fallback1999:
    unless_null $P5338, vivi_5132000
    die "Contextual %*REG not found"
    box $P5344, "Contextual %*REG not found"
    set $P5338, $P5344
  vivi_5132000:
    set $P103, $P5338
  fallback1998:
    set $P5337, $P103["cur"]
    unless_null $P5337, fallback2001
    nqp_get_sc_object $P5345, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5337, $P5345
  fallback2001:
    $P101."result"($P5337)
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_326_1359572548.257") :anon :lex :outer("cuid_115_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3089
    .lex "$reg", $P101 
    .lex "$name", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    find_lex $P5004, "$reglist"
    shift $P5003, $P5004
    set $P101, $P5003
    find_dynamic_lex $P5005, "%*REG"
    unless_null $P5005, fallback1868
    nqp_get_sc_object $P5008, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["%REG"]
    unless_null $P5006, fallback1869
    nqp_get_sc_object $P5010, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5009, $P5010
    new $P5011, 'Hash'
    set $P5009["%REG"], $P5011
    set $P5006, $P5011
  fallback1869:
    unless_null $P5006, vivi_4801870
    die "Contextual %*REG not found"
    box $P5012, "Contextual %*REG not found"
    set $P5006, $P5012
  vivi_4801870:
    set $P5005, $P5006
  fallback1868:
    set $S5001, $P101
    find_lex $P5013, "$prefix"
    set $S5003, $P5013
    set $S5004, $P101
    concat $S5002, $S5003, $S5004
    box $P5014, $S5002
    set $P5005[$S5001], $P5014
    set $P102, $P5014
.annotate 'line', 3092
    find_lex $P5015, "$ops"
    find_lex $P5017, "$reglist"
    shift $P5016, $P5017
    set $S5006, $P5016
    concat $S5005, ".local ", $S5006
    $P5018 = $P5015."push_pirop"($S5005, $P102)
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "post_children" :subid("cuid_116_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3147
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5016 = 'cuid_327_1359572548.257' 
    capture_lex $P5016 
    .lex "$posts", $P101 
    .lex "@results", $P102 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
.annotate 'line', 3148
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5005, $P5006, "PIRT"
    get_who $P5004, $P5005
    set $P5003, $P5004["Ops"]
    unless_null $P5003, fallback2003
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5007
  fallback2003:
    $P5008 = $P5003."new"()
    set $P101, $P5008
    $P5012 = _lex_param_1."list"()
    set $P5009, $P5012
    iter $P5011, $P5012
  for_next2005:
    unless $P5011, for_done2007
    shift $P5014, $P5011
  for_redo2006:
    .const 'Sub' $P5013 = 'cuid_327_1359572548.257' 
    capture_lex $P5013
    $P5009 = $P5013($P5014)
    goto for_next2005
  for_done2007:
    new $P5015, 'ResizablePMCArray'
    push $P5015, $P101
    push $P5015, $P102
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_327_1359572548.257") :anon :lex :outer("cuid_116_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3150
    .param pmc _lex_param_0 
    .lex "$sval", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 3151
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["SVal"]
    unless_null $P5004, fallback2004
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5008
  fallback2004:
    set $S5001, _lex_param_0
    $P5009 = $P5004."new"($S5001 :named("value"))
    $P5010 = $P5002."as_post"($P5009)
    set $P101, $P5010
.annotate 'line', 3152
    find_lex $P5011, "$posts"
    $P5011."push"($P101)
    find_lex $P5012, "@results"
.annotate 'line', 3153
    $P5013 = $P101."result"()
    push $P5012, $P5013
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "children" :subid("cuid_117_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3158
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5017 = 'cuid_328_1359572548.257' 
    capture_lex $P5017 
    .lex "$posts", $P101 
    .lex "@results", $P102 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
.annotate 'line', 3159
    nqp_get_sc_object $P5006, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5005, $P5006, "PIRT"
    get_who $P5004, $P5005
    set $P5003, $P5004["Ops"]
    unless_null $P5003, fallback2008
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5007
  fallback2008:
    $P5008 = $P5003."new"()
    set $P101, $P5008
    $P5012 = _lex_param_1."list"()
    set $P5009, $P5012
    iter $P5011, $P5012
  for_next2009:
    unless $P5011, for_done2011
    shift $P5014, $P5011
  for_redo2010:
    .const 'Sub' $P5013 = 'cuid_328_1359572548.257' 
    capture_lex $P5013
    $P5009 = $P5013($P5014)
    goto for_next2009
  for_done2011:
    new $P5015, 'ResizablePMCArray'
    push $P5015, $P101
    push $P5015, $P102
    new $P5016, 'ResizablePMCArray'
    push $P5015, $P5016
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_328_1359572548.257") :anon :lex :outer("cuid_117_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3161
    .param pmc _lex_param_0 
    .lex "$post", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 3162
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    $P5004 = $P5002."as_post"(_lex_param_0)
    set $P101, $P5004
.annotate 'line', 3163
    find_lex $P5005, "$posts"
    $P5005."push"($P101)
.annotate 'line', 3164
    find_lex $P5006, "@results"
    $P5007 = $P101."result"()
    $P5008 = $P5006."push"($P5007)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "regex_post" :subid("cuid_118_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3169
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$rxtype", $P101 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 3170
    $P5002 = _lex_param_1."rxtype"()
    set $P5003, $P5002
    if $P5002 goto unless514_end2013 
    box $P5004, "concat"
    set $P5003, $P5004
  unless514_end2013:
    set $P101, $P5003
.annotate 'line', 3171
    nqp_decontainerize $P5005, _lex_param_0
    set $S5001, $P101
    $P5006 = $P5005.$S5001(_lex_param_1)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "post_new" :subid("cuid_119_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3174
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :slurpy 
    .param pmc _lex_param_3 :slurpy :named 
    .lex "self", _lex_param_0 
    .lex "$type", _lex_param_1 
    .lex "@args", _lex_param_2 
    .lex "%options", _lex_param_3 
.annotate 'line', 3175
    find_lex $P5005, "$?PACKAGE"
    get_who $P5004, $P5005
    set $P5003, $P5004["PIRT"]
    unless_null $P5003, fallback2014
    nqp_get_sc_object $P5008, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["PIRT"]
    unless_null $P5006, vivi_5152015
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5006, $P5009
  vivi_5152015:
    set $P5003, $P5006
  fallback2014:
    get_who $P5002, $P5003
    set $S5001, _lex_param_1
    set $P5001, $P5002[$S5001]
    unless_null $P5001, fallback2016
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5010
  fallback2016:
    $P5011 = $P5001."new"(_lex_param_2 :flat, _lex_param_3 :flat :named)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "alt" :subid("cuid_120_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3178
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5075 = 'cuid_329_1359572548.257' 
    capture_lex $P5075 
    .lex "$prefix", $P101 
    .lex "$endlabel", $P102 
    .lex "$label_list_ops", $P103 
    .lex "$ops", $P104 
    .lex "$altcount", $P105 
    .lex "$iter", $P106 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P106, $P5006
    root_new $P107, ['parrot';'Continuation']
    set_label $P107, lexotic_2017
    .lex "RETURN", $P107
.annotate 'line', 3179
    $P5007 = _lex_param_1."name"()
    if $P5007 goto unless516_end2020 
.annotate 'line', 3180
    nqp_decontainerize $P5009, _lex_param_0
    $P5010 = $P5009."altseq"(_lex_param_1)
    find_lex $P5008, "RETURN"
    $P5011 = $P5008($P5010)
  unless516_end2020:
.annotate 'line', 3185
    nqp_decontainerize $P5012, _lex_param_0
    $P5013 = $P5012."unique"("alt")
    set $S5002, $P5013
    concat $S5001, $S5002, "_"
    box $P5014, $S5001
    set $P101, $P5014
.annotate 'line', 3186
    nqp_decontainerize $P5015, _lex_param_0
    set $S5004, $P101
    concat $S5003, $S5004, "end"
    $P5016 = $P5015."post_new"("Label", $S5003 :named("name"))
    set $P102, $P5016
.annotate 'line', 3187
    nqp_decontainerize $P5017, _lex_param_0
    $P5018 = $P5017."post_new"("Ops", "$P11" :named("result"))
    set $P103, $P5018
.annotate 'line', 3188
    $P103."push_pirop"("new", "$P11", "\"ResizableIntegerArray\"")
.annotate 'line', 3189
    nqp_decontainerize $P5019, _lex_param_0
    find_dynamic_lex $P5021, "%*REG"
    unless_null $P5021, fallback2021
    nqp_get_sc_object $P5024, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5023, $P5024
    set $P5022, $P5023["%REG"]
    unless_null $P5022, fallback2022
    nqp_get_sc_object $P5026, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5025, $P5026
    new $P5027, 'Hash'
    set $P5025["%REG"], $P5027
    set $P5022, $P5027
  fallback2022:
    unless_null $P5022, vivi_5172023
    die "Contextual %*REG not found"
    box $P5028, "Contextual %*REG not found"
    set $P5022, $P5028
  vivi_5172023:
    set $P5021, $P5022
  fallback2021:
    set $P5020, $P5021["cur"]
    unless_null $P5020, fallback2024
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5020, $P5029
  fallback2024:
    $P5030 = $P5019."post_new"("Ops", $P5020 :named("result"))
    set $P104, $P5030
.annotate 'line', 3190
    $P104."push"($P103)
.annotate 'line', 3191
    nqp_decontainerize $P5031, _lex_param_0
    $P5031."regex_mark"($P104, $P102, -1, 0)
.annotate 'line', 3192
    find_dynamic_lex $P5033, "%*REG"
    unless_null $P5033, fallback2025
    nqp_get_sc_object $P5036, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5035, $P5036
    set $P5034, $P5035["%REG"]
    unless_null $P5034, fallback2026
    nqp_get_sc_object $P5038, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5037, $P5038
    new $P5039, 'Hash'
    set $P5037["%REG"], $P5039
    set $P5034, $P5039
  fallback2026:
    unless_null $P5034, vivi_5182027
    die "Contextual %*REG not found"
    box $P5040, "Contextual %*REG not found"
    set $P5034, $P5040
  vivi_5182027:
    set $P5033, $P5034
  fallback2025:
    set $P5032, $P5033["cur"]
    unless_null $P5032, fallback2028
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5032, $P5041
  fallback2028:
    find_dynamic_lex $P5043, "%*REG"
    unless_null $P5043, fallback2029
    nqp_get_sc_object $P5046, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["%REG"]
    unless_null $P5044, fallback2030
    nqp_get_sc_object $P5048, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5047, $P5048
    new $P5049, 'Hash'
    set $P5047["%REG"], $P5049
    set $P5044, $P5049
  fallback2030:
    unless_null $P5044, vivi_5192031
    die "Contextual %*REG not found"
    box $P5050, "Contextual %*REG not found"
    set $P5044, $P5050
  vivi_5192031:
    set $P5043, $P5044
  fallback2029:
    set $P5042, $P5043["pos"]
    unless_null $P5042, fallback2032
    nqp_get_sc_object $P5051, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5042, $P5051
  fallback2032:
.annotate 'line', 3193
    nqp_decontainerize $P5052, _lex_param_0
    $P5053 = _lex_param_1."name"()
    $P5054 = $P5052."escape"($P5053)
    $P5055 = $P103."result"()
    $P104."push_pirop"("callmethod", "\"!alt\"", $P5032, $P5042, $P5054, $P5055)
.annotate 'line', 3194
    find_dynamic_lex $P5057, "%*REG"
    unless_null $P5057, fallback2033
    nqp_get_sc_object $P5060, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5059, $P5060
    set $P5058, $P5059["%REG"]
    unless_null $P5058, fallback2034
    nqp_get_sc_object $P5062, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5061, $P5062
    new $P5063, 'Hash'
    set $P5061["%REG"], $P5063
    set $P5058, $P5063
  fallback2034:
    unless_null $P5058, vivi_5202035
    die "Contextual %*REG not found"
    box $P5064, "Contextual %*REG not found"
    set $P5058, $P5064
  vivi_5202035:
    set $P5057, $P5058
  fallback2033:
    set $P5056, $P5057["fail"]
    unless_null $P5056, fallback2036
    nqp_get_sc_object $P5065, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5056, $P5065
  fallback2036:
    $P104."push_pirop"("goto", $P5056)
    box $P5066, 0
    set $P105, $P5066
.annotate 'line', 3198
    $P5068 = _lex_param_1."list"()
    iter $P5067, $P5068
    set $P106, $P5067
  while521_test2037:
    set $P5071, $P106
    unless $P106 goto while521_done2041 
  while521_redo2039:
    .const 'Sub' $P5069 = 'cuid_329_1359572548.257' 
    capture_lex $P5069
    $P5070 = $P5069()
    set $P5071, $P5070
    goto while521_test2037 
  while521_done2041:
.annotate 'line', 3208
    $P104."push"($P102)
.annotate 'line', 3209
    $P5072 = _lex_param_1."backtrack"()
    set $S5005, $P5072
    iseq $I5001, $S5005, "r"
    unless $I5001 goto if522_end2043 
    nqp_decontainerize $P5073, _lex_param_0
    $P5074 = $P5073."regex_commit"($P104, $P102)
  if522_end2043:
    goto lexotic_2018
  lexotic_2017:
    .get_results ($P104)
  lexotic_2018:
    .return ($P104) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_329_1359572548.257") :anon :lex :outer("cuid_120_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3199
    .lex "$altlabel", $P101 
    .lex "$apost", $P102 
    .local pmc tmp_3 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 3200
    find_lex $P5004, "self"
    nqp_decontainerize $P5003, $P5004
    find_lex $P5005, "$prefix"
    set $S5002, $P5005
    find_lex $P5006, "$altcount"
    set $S5003, $P5006
    concat $S5001, $S5002, $S5003
    $P5007 = $P5003."post_new"("Label", $S5001 :named("name"))
    set $P101, $P5007
.annotate 'line', 3201
    find_lex $P5009, "self"
    nqp_decontainerize $P5008, $P5009
    find_lex $P5011, "$iter"
    shift $P5010, $P5011
    $P5012 = $P5008."regex_post"($P5010)
    set $P102, $P5012
.annotate 'line', 3202
    find_lex $P5013, "$ops"
    $P5013."push"($P101)
.annotate 'line', 3203
    find_lex $P5014, "$ops"
    $P5014."push"($P102)
.annotate 'line', 3204
    find_lex $P5015, "$ops"
    find_lex $P5016, "$endlabel"
    $P5015."push_pirop"("goto", $P5016)
.annotate 'line', 3205
    find_lex $P5017, "$label_list_ops"
    find_lex $P5018, "$label_list_ops"
    $P5019 = $P5018."result"()
    $P5020 = $P101."result"()
    $P5017."push_pirop"("nqp_push_label", $P5019, $P5020)
    find_lex $P5021, "$altcount"
    set tmp_3, $P5021
    set $N5002, tmp_3
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5022, $N5001
    store_lex "$altcount", $P5022
    .return (tmp_3) 
.end
.HLL "nqp"
.namespace []
.sub "altseq" :subid("cuid_121_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3213
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$ops", $P101 
    .lex "$prefix", $P102 
    .lex "$altcount", $P103 
    .lex "$iter", $P104 
    .lex "$endlabel", $P105 
    .lex "$altlabel", $P106 
    .lex "$apost", $P107 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    .local pmc tmp_4 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P106, $P5006
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P107, $P5007
.annotate 'line', 3214
    nqp_decontainerize $P5008, _lex_param_0
    find_dynamic_lex $P5010, "%*REG"
    unless_null $P5010, fallback2044
    nqp_get_sc_object $P5013, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["%REG"]
    unless_null $P5011, fallback2045
    nqp_get_sc_object $P5015, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5014, $P5015
    new $P5016, 'Hash'
    set $P5014["%REG"], $P5016
    set $P5011, $P5016
  fallback2045:
    unless_null $P5011, vivi_5232046
    die "Contextual %*REG not found"
    box $P5017, "Contextual %*REG not found"
    set $P5011, $P5017
  vivi_5232046:
    set $P5010, $P5011
  fallback2044:
    set $P5009, $P5010["cur"]
    unless_null $P5009, fallback2047
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5009, $P5018
  fallback2047:
    $P5019 = $P5008."post_new"("Ops", $P5009 :named("result"))
    set $P101, $P5019
.annotate 'line', 3215
    nqp_decontainerize $P5020, _lex_param_0
    $P5021 = $P5020."unique"("alt")
    set $S5002, $P5021
    concat $S5001, $S5002, "_"
    box $P5022, $S5001
    set $P102, $P5022
    box $P5023, 0
    set $P103, $P5023
.annotate 'line', 3217
    $P5025 = _lex_param_1."list"()
    iter $P5024, $P5025
    set $P104, $P5024
.annotate 'line', 3218
    nqp_decontainerize $P5026, _lex_param_0
    set $S5004, $P102
    concat $S5003, $S5004, "end"
    $P5027 = $P5026."post_new"("Label", $S5003 :named("name"))
    set $P105, $P5027
.annotate 'line', 3219
    nqp_decontainerize $P5028, _lex_param_0
    set $S5006, $P102
    set $S5007, $P103
    concat $S5005, $S5006, $S5007
    $P5029 = $P5028."post_new"("Label", $S5005 :named("name"))
    set $P106, $P5029
.annotate 'line', 3220
    nqp_decontainerize $P5030, _lex_param_0
    shift $P5031, $P104
    $P5032 = $P5030."regex_post"($P5031)
    set $P107, $P5032
  while524_test2048:
    set $P5049, $P104
    unless $P104 goto while524_done2052 
  while524_redo2050:
.annotate 'line', 3221
.annotate 'line', 3222
    $P101."push"($P106)
    set tmp_4, $P103
    set $N5002, tmp_4
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5033, $N5001
    set $P103, $P5033
.annotate 'line', 3224
    nqp_decontainerize $P5033, _lex_param_0
    set $S5009, $P102
    set $S5010, $P103
    concat $S5008, $S5009, $S5010
    $P5034 = $P5033."post_new"("Label", $S5008 :named("name"))
    set $P106, $P5034
.annotate 'line', 3225
    nqp_decontainerize $P5035, _lex_param_0
    find_dynamic_lex $P5037, "%*REG"
    unless_null $P5037, fallback2053
    nqp_get_sc_object $P5040, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["%REG"]
    unless_null $P5038, fallback2054
    nqp_get_sc_object $P5042, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5041, $P5042
    new $P5043, 'Hash'
    set $P5041["%REG"], $P5043
    set $P5038, $P5043
  fallback2054:
    unless_null $P5038, vivi_5252055
    die "Contextual %*REG not found"
    box $P5044, "Contextual %*REG not found"
    set $P5038, $P5044
  vivi_5252055:
    set $P5037, $P5038
  fallback2053:
    set $P5036, $P5037["pos"]
    unless_null $P5036, fallback2056
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5036, $P5045
  fallback2056:
    $P5035."regex_mark"($P101, $P106, $P5036, 0)
.annotate 'line', 3226
    $P101."push"($P107)
.annotate 'line', 3227
    $P101."push_pirop"("goto", $P105)
.annotate 'line', 3228
    nqp_decontainerize $P5046, _lex_param_0
    shift $P5047, $P104
    $P5048 = $P5046."regex_post"($P5047)
    set $P107, $P5048
    set $P5049, $P107
    goto while524_test2048 
  while524_done2052:
.annotate 'line', 3230
    $P101."push"($P106)
.annotate 'line', 3231
    $P101."push"($P107)
.annotate 'line', 3232
    $P101."push"($P105)
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "anchor" :subid("cuid_122_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3236
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$ops", $P101 
    .lex "$subtype", $P102 
    .lex "$donelabel", $P103 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
.annotate 'line', 3237
    nqp_decontainerize $P5004, _lex_param_0
    find_dynamic_lex $P5006, "%*REG"
    unless_null $P5006, fallback2057
    nqp_get_sc_object $P5009, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["%REG"]
    unless_null $P5007, fallback2058
    nqp_get_sc_object $P5011, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5010, $P5011
    new $P5012, 'Hash'
    set $P5010["%REG"], $P5012
    set $P5007, $P5012
  fallback2058:
    unless_null $P5007, vivi_5262059
    die "Contextual %*REG not found"
    box $P5013, "Contextual %*REG not found"
    set $P5007, $P5013
  vivi_5262059:
    set $P5006, $P5007
  fallback2057:
    set $P5005, $P5006["cur"]
    unless_null $P5005, fallback2060
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5005, $P5014
  fallback2060:
    $P5015 = $P5004."post_new"("Ops", $P5005 :named("result"))
    set $P101, $P5015
.annotate 'line', 3238
    $P5016 = _lex_param_1."subtype"()
    set $P102, $P5016
.annotate 'line', 3239
    nqp_decontainerize $P5017, _lex_param_0
    nqp_decontainerize $P5018, _lex_param_0
    $P5019 = $P5018."unique"("rxanchor")
    set $S5002, $P5019
    concat $S5001, $S5002, "_done"
    $P5020 = $P5017."post_new"("Label", $S5001 :named("name"))
    set $P103, $P5020
    set $S5003, $P102
    iseq $I5001, $S5003, "bos"
    unless $I5001 goto if527_else2061 
.annotate 'line', 3240
.annotate 'line', 3241
    find_dynamic_lex $P5022, "%*REG"
    unless_null $P5022, fallback2063
    nqp_get_sc_object $P5025, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["%REG"]
    unless_null $P5023, fallback2064
    nqp_get_sc_object $P5027, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5026, $P5027
    new $P5028, 'Hash'
    set $P5026["%REG"], $P5028
    set $P5023, $P5028
  fallback2064:
    unless_null $P5023, vivi_5282065
    die "Contextual %*REG not found"
    box $P5029, "Contextual %*REG not found"
    set $P5023, $P5029
  vivi_5282065:
    set $P5022, $P5023
  fallback2063:
    set $P5021, $P5022["pos"]
    unless_null $P5021, fallback2066
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5021, $P5030
  fallback2066:
    find_dynamic_lex $P5032, "%*REG"
    unless_null $P5032, fallback2067
    nqp_get_sc_object $P5035, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5034, $P5035
    set $P5033, $P5034["%REG"]
    unless_null $P5033, fallback2068
    nqp_get_sc_object $P5037, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5036, $P5037
    new $P5038, 'Hash'
    set $P5036["%REG"], $P5038
    set $P5033, $P5038
  fallback2068:
    unless_null $P5033, vivi_5292069
    die "Contextual %*REG not found"
    box $P5039, "Contextual %*REG not found"
    set $P5033, $P5039
  vivi_5292069:
    set $P5032, $P5033
  fallback2067:
    set $P5031, $P5032["fail"]
    unless_null $P5031, fallback2070
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5031, $P5040
  fallback2070:
    $P5041 = $P101."push_pirop"("ne", $P5021, 0, $P5031)
    goto if527_end2062
  if527_else2061:
    set $S5004, $P102
    iseq $I5002, $S5004, "eos"
    unless $I5002 goto if530_else2071 
.annotate 'line', 3243
.annotate 'line', 3244
    find_dynamic_lex $P5043, "%*REG"
    unless_null $P5043, fallback2073
    nqp_get_sc_object $P5046, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["%REG"]
    unless_null $P5044, fallback2074
    nqp_get_sc_object $P5048, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5047, $P5048
    new $P5049, 'Hash'
    set $P5047["%REG"], $P5049
    set $P5044, $P5049
  fallback2074:
    unless_null $P5044, vivi_5312075
    die "Contextual %*REG not found"
    box $P5050, "Contextual %*REG not found"
    set $P5044, $P5050
  vivi_5312075:
    set $P5043, $P5044
  fallback2073:
    set $P5042, $P5043["pos"]
    unless_null $P5042, fallback2076
    nqp_get_sc_object $P5051, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5042, $P5051
  fallback2076:
    find_dynamic_lex $P5053, "%*REG"
    unless_null $P5053, fallback2077
    nqp_get_sc_object $P5056, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["%REG"]
    unless_null $P5054, fallback2078
    nqp_get_sc_object $P5058, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5057, $P5058
    new $P5059, 'Hash'
    set $P5057["%REG"], $P5059
    set $P5054, $P5059
  fallback2078:
    unless_null $P5054, vivi_5322079
    die "Contextual %*REG not found"
    box $P5060, "Contextual %*REG not found"
    set $P5054, $P5060
  vivi_5322079:
    set $P5053, $P5054
  fallback2077:
    set $P5052, $P5053["eos"]
    unless_null $P5052, fallback2080
    nqp_get_sc_object $P5061, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5052, $P5061
  fallback2080:
    find_dynamic_lex $P5063, "%*REG"
    unless_null $P5063, fallback2081
    nqp_get_sc_object $P5066, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5065, $P5066
    set $P5064, $P5065["%REG"]
    unless_null $P5064, fallback2082
    nqp_get_sc_object $P5068, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5067, $P5068
    new $P5069, 'Hash'
    set $P5067["%REG"], $P5069
    set $P5064, $P5069
  fallback2082:
    unless_null $P5064, vivi_5332083
    die "Contextual %*REG not found"
    box $P5070, "Contextual %*REG not found"
    set $P5064, $P5070
  vivi_5332083:
    set $P5063, $P5064
  fallback2081:
    set $P5062, $P5063["fail"]
    unless_null $P5062, fallback2084
    nqp_get_sc_object $P5071, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5062, $P5071
  fallback2084:
    $P5072 = $P101."push_pirop"("lt", $P5042, $P5052, $P5062)
    set $P5424, $P5072
    goto if530_end2072
  if530_else2071:
    set $S5005, $P102
    iseq $I5003, $S5005, "lwb"
    unless $I5003 goto if534_else2085 
.annotate 'line', 3246
.annotate 'line', 3247
    find_dynamic_lex $P5074, "%*REG"
    unless_null $P5074, fallback2087
    nqp_get_sc_object $P5077, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5076, $P5077
    set $P5075, $P5076["%REG"]
    unless_null $P5075, fallback2088
    nqp_get_sc_object $P5079, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5078, $P5079
    new $P5080, 'Hash'
    set $P5078["%REG"], $P5080
    set $P5075, $P5080
  fallback2088:
    unless_null $P5075, vivi_5352089
    die "Contextual %*REG not found"
    box $P5081, "Contextual %*REG not found"
    set $P5075, $P5081
  vivi_5352089:
    set $P5074, $P5075
  fallback2087:
    set $P5073, $P5074["pos"]
    unless_null $P5073, fallback2090
    nqp_get_sc_object $P5082, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5073, $P5082
  fallback2090:
    find_dynamic_lex $P5084, "%*REG"
    unless_null $P5084, fallback2091
    nqp_get_sc_object $P5087, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5086, $P5087
    set $P5085, $P5086["%REG"]
    unless_null $P5085, fallback2092
    nqp_get_sc_object $P5089, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5088, $P5089
    new $P5090, 'Hash'
    set $P5088["%REG"], $P5090
    set $P5085, $P5090
  fallback2092:
    unless_null $P5085, vivi_5362093
    die "Contextual %*REG not found"
    box $P5091, "Contextual %*REG not found"
    set $P5085, $P5091
  vivi_5362093:
    set $P5084, $P5085
  fallback2091:
    set $P5083, $P5084["eos"]
    unless_null $P5083, fallback2094
    nqp_get_sc_object $P5092, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5083, $P5092
  fallback2094:
    find_dynamic_lex $P5094, "%*REG"
    unless_null $P5094, fallback2095
    nqp_get_sc_object $P5097, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5096, $P5097
    set $P5095, $P5096["%REG"]
    unless_null $P5095, fallback2096
    nqp_get_sc_object $P5099, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5098, $P5099
    new $P5100, 'Hash'
    set $P5098["%REG"], $P5100
    set $P5095, $P5100
  fallback2096:
    unless_null $P5095, vivi_5372097
    die "Contextual %*REG not found"
    box $P5101, "Contextual %*REG not found"
    set $P5095, $P5101
  vivi_5372097:
    set $P5094, $P5095
  fallback2095:
    set $P5093, $P5094["fail"]
    unless_null $P5093, fallback2098
    nqp_get_sc_object $P5102, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5093, $P5102
  fallback2098:
    $P101."push_pirop"("ge", $P5073, $P5083, $P5093)
.annotate 'line', 3248
    find_dynamic_lex $P5104, "%*REG"
    unless_null $P5104, fallback2099
    nqp_get_sc_object $P5107, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5106, $P5107
    set $P5105, $P5106["%REG"]
    unless_null $P5105, fallback2100
    nqp_get_sc_object $P5109, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5108, $P5109
    new $P5110, 'Hash'
    set $P5108["%REG"], $P5110
    set $P5105, $P5110
  fallback2100:
    unless_null $P5105, vivi_5382101
    die "Contextual %*REG not found"
    box $P5111, "Contextual %*REG not found"
    set $P5105, $P5111
  vivi_5382101:
    set $P5104, $P5105
  fallback2099:
    set $P5103, $P5104["tgt"]
    unless_null $P5103, fallback2102
    nqp_get_sc_object $P5112, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5103, $P5112
  fallback2102:
    find_dynamic_lex $P5114, "%*REG"
    unless_null $P5114, fallback2103
    nqp_get_sc_object $P5117, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5116, $P5117
    set $P5115, $P5116["%REG"]
    unless_null $P5115, fallback2104
    nqp_get_sc_object $P5119, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5118, $P5119
    new $P5120, 'Hash'
    set $P5118["%REG"], $P5120
    set $P5115, $P5120
  fallback2104:
    unless_null $P5115, vivi_5392105
    die "Contextual %*REG not found"
    box $P5121, "Contextual %*REG not found"
    set $P5115, $P5121
  vivi_5392105:
    set $P5114, $P5115
  fallback2103:
    set $P5113, $P5114["pos"]
    unless_null $P5113, fallback2106
    nqp_get_sc_object $P5122, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5113, $P5122
  fallback2106:
    $P101."push_pirop"("is_cclass", "$I11", ".CCLASS_WORD", $P5103, $P5113)
.annotate 'line', 3249
    find_dynamic_lex $P5124, "%*REG"
    unless_null $P5124, fallback2107
    nqp_get_sc_object $P5127, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5126, $P5127
    set $P5125, $P5126["%REG"]
    unless_null $P5125, fallback2108
    nqp_get_sc_object $P5129, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5128, $P5129
    new $P5130, 'Hash'
    set $P5128["%REG"], $P5130
    set $P5125, $P5130
  fallback2108:
    unless_null $P5125, vivi_5402109
    die "Contextual %*REG not found"
    box $P5131, "Contextual %*REG not found"
    set $P5125, $P5131
  vivi_5402109:
    set $P5124, $P5125
  fallback2107:
    set $P5123, $P5124["fail"]
    unless_null $P5123, fallback2110
    nqp_get_sc_object $P5132, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5123, $P5132
  fallback2110:
    $P101."push_pirop"("unless", "$I11", $P5123)
.annotate 'line', 3250
    find_dynamic_lex $P5134, "%*REG"
    unless_null $P5134, fallback2111
    nqp_get_sc_object $P5137, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5136, $P5137
    set $P5135, $P5136["%REG"]
    unless_null $P5135, fallback2112
    nqp_get_sc_object $P5139, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5138, $P5139
    new $P5140, 'Hash'
    set $P5138["%REG"], $P5140
    set $P5135, $P5140
  fallback2112:
    unless_null $P5135, vivi_5412113
    die "Contextual %*REG not found"
    box $P5141, "Contextual %*REG not found"
    set $P5135, $P5141
  vivi_5412113:
    set $P5134, $P5135
  fallback2111:
    set $P5133, $P5134["pos"]
    unless_null $P5133, fallback2114
    nqp_get_sc_object $P5142, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5133, $P5142
  fallback2114:
    $P101."push_pirop"("sub", "$I11", $P5133, 1)
.annotate 'line', 3251
    find_dynamic_lex $P5144, "%*REG"
    unless_null $P5144, fallback2115
    nqp_get_sc_object $P5147, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5146, $P5147
    set $P5145, $P5146["%REG"]
    unless_null $P5145, fallback2116
    nqp_get_sc_object $P5149, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5148, $P5149
    new $P5150, 'Hash'
    set $P5148["%REG"], $P5150
    set $P5145, $P5150
  fallback2116:
    unless_null $P5145, vivi_5422117
    die "Contextual %*REG not found"
    box $P5151, "Contextual %*REG not found"
    set $P5145, $P5151
  vivi_5422117:
    set $P5144, $P5145
  fallback2115:
    set $P5143, $P5144["tgt"]
    unless_null $P5143, fallback2118
    nqp_get_sc_object $P5152, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5143, $P5152
  fallback2118:
    $P101."push_pirop"("is_cclass", "$I11", ".CCLASS_WORD", $P5143, "$I11")
.annotate 'line', 3252
    find_dynamic_lex $P5154, "%*REG"
    unless_null $P5154, fallback2119
    nqp_get_sc_object $P5157, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5156, $P5157
    set $P5155, $P5156["%REG"]
    unless_null $P5155, fallback2120
    nqp_get_sc_object $P5159, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5158, $P5159
    new $P5160, 'Hash'
    set $P5158["%REG"], $P5160
    set $P5155, $P5160
  fallback2120:
    unless_null $P5155, vivi_5432121
    die "Contextual %*REG not found"
    box $P5161, "Contextual %*REG not found"
    set $P5155, $P5161
  vivi_5432121:
    set $P5154, $P5155
  fallback2119:
    set $P5153, $P5154["fail"]
    unless_null $P5153, fallback2122
    nqp_get_sc_object $P5162, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5153, $P5162
  fallback2122:
    $P5163 = $P101."push_pirop"("if", "$I11", $P5153)
    set $P5423, $P5163
    goto if534_end2086
  if534_else2085:
    set $S5006, $P102
    iseq $I5004, $S5006, "rwb"
    unless $I5004 goto if544_else2123 
.annotate 'line', 3254
.annotate 'line', 3255
    find_dynamic_lex $P5165, "%*REG"
    unless_null $P5165, fallback2125
    nqp_get_sc_object $P5168, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5167, $P5168
    set $P5166, $P5167["%REG"]
    unless_null $P5166, fallback2126
    nqp_get_sc_object $P5170, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5169, $P5170
    new $P5171, 'Hash'
    set $P5169["%REG"], $P5171
    set $P5166, $P5171
  fallback2126:
    unless_null $P5166, vivi_5452127
    die "Contextual %*REG not found"
    box $P5172, "Contextual %*REG not found"
    set $P5166, $P5172
  vivi_5452127:
    set $P5165, $P5166
  fallback2125:
    set $P5164, $P5165["pos"]
    unless_null $P5164, fallback2128
    nqp_get_sc_object $P5173, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5164, $P5173
  fallback2128:
    find_dynamic_lex $P5175, "%*REG"
    unless_null $P5175, fallback2129
    nqp_get_sc_object $P5178, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5177, $P5178
    set $P5176, $P5177["%REG"]
    unless_null $P5176, fallback2130
    nqp_get_sc_object $P5180, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5179, $P5180
    new $P5181, 'Hash'
    set $P5179["%REG"], $P5181
    set $P5176, $P5181
  fallback2130:
    unless_null $P5176, vivi_5462131
    die "Contextual %*REG not found"
    box $P5182, "Contextual %*REG not found"
    set $P5176, $P5182
  vivi_5462131:
    set $P5175, $P5176
  fallback2129:
    set $P5174, $P5175["fail"]
    unless_null $P5174, fallback2132
    nqp_get_sc_object $P5183, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5174, $P5183
  fallback2132:
    $P101."push_pirop"("le", $P5164, 0, $P5174)
.annotate 'line', 3256
    find_dynamic_lex $P5185, "%*REG"
    unless_null $P5185, fallback2133
    nqp_get_sc_object $P5188, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5187, $P5188
    set $P5186, $P5187["%REG"]
    unless_null $P5186, fallback2134
    nqp_get_sc_object $P5190, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5189, $P5190
    new $P5191, 'Hash'
    set $P5189["%REG"], $P5191
    set $P5186, $P5191
  fallback2134:
    unless_null $P5186, vivi_5472135
    die "Contextual %*REG not found"
    box $P5192, "Contextual %*REG not found"
    set $P5186, $P5192
  vivi_5472135:
    set $P5185, $P5186
  fallback2133:
    set $P5184, $P5185["tgt"]
    unless_null $P5184, fallback2136
    nqp_get_sc_object $P5193, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5184, $P5193
  fallback2136:
    find_dynamic_lex $P5195, "%*REG"
    unless_null $P5195, fallback2137
    nqp_get_sc_object $P5198, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5197, $P5198
    set $P5196, $P5197["%REG"]
    unless_null $P5196, fallback2138
    nqp_get_sc_object $P5200, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5199, $P5200
    new $P5201, 'Hash'
    set $P5199["%REG"], $P5201
    set $P5196, $P5201
  fallback2138:
    unless_null $P5196, vivi_5482139
    die "Contextual %*REG not found"
    box $P5202, "Contextual %*REG not found"
    set $P5196, $P5202
  vivi_5482139:
    set $P5195, $P5196
  fallback2137:
    set $P5194, $P5195["pos"]
    unless_null $P5194, fallback2140
    nqp_get_sc_object $P5203, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5194, $P5203
  fallback2140:
    $P101."push_pirop"("is_cclass", "$I11", ".CCLASS_WORD", $P5184, $P5194)
.annotate 'line', 3257
    find_dynamic_lex $P5205, "%*REG"
    unless_null $P5205, fallback2141
    nqp_get_sc_object $P5208, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5207, $P5208
    set $P5206, $P5207["%REG"]
    unless_null $P5206, fallback2142
    nqp_get_sc_object $P5210, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5209, $P5210
    new $P5211, 'Hash'
    set $P5209["%REG"], $P5211
    set $P5206, $P5211
  fallback2142:
    unless_null $P5206, vivi_5492143
    die "Contextual %*REG not found"
    box $P5212, "Contextual %*REG not found"
    set $P5206, $P5212
  vivi_5492143:
    set $P5205, $P5206
  fallback2141:
    set $P5204, $P5205["fail"]
    unless_null $P5204, fallback2144
    nqp_get_sc_object $P5213, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5204, $P5213
  fallback2144:
    $P101."push_pirop"("if", "$I11", $P5204)
.annotate 'line', 3258
    find_dynamic_lex $P5215, "%*REG"
    unless_null $P5215, fallback2145
    nqp_get_sc_object $P5218, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5217, $P5218
    set $P5216, $P5217["%REG"]
    unless_null $P5216, fallback2146
    nqp_get_sc_object $P5220, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5219, $P5220
    new $P5221, 'Hash'
    set $P5219["%REG"], $P5221
    set $P5216, $P5221
  fallback2146:
    unless_null $P5216, vivi_5502147
    die "Contextual %*REG not found"
    box $P5222, "Contextual %*REG not found"
    set $P5216, $P5222
  vivi_5502147:
    set $P5215, $P5216
  fallback2145:
    set $P5214, $P5215["pos"]
    unless_null $P5214, fallback2148
    nqp_get_sc_object $P5223, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5214, $P5223
  fallback2148:
    $P101."push_pirop"("sub", "$I11", $P5214, 1)
.annotate 'line', 3259
    find_dynamic_lex $P5225, "%*REG"
    unless_null $P5225, fallback2149
    nqp_get_sc_object $P5228, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5227, $P5228
    set $P5226, $P5227["%REG"]
    unless_null $P5226, fallback2150
    nqp_get_sc_object $P5230, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5229, $P5230
    new $P5231, 'Hash'
    set $P5229["%REG"], $P5231
    set $P5226, $P5231
  fallback2150:
    unless_null $P5226, vivi_5512151
    die "Contextual %*REG not found"
    box $P5232, "Contextual %*REG not found"
    set $P5226, $P5232
  vivi_5512151:
    set $P5225, $P5226
  fallback2149:
    set $P5224, $P5225["tgt"]
    unless_null $P5224, fallback2152
    nqp_get_sc_object $P5233, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5224, $P5233
  fallback2152:
    $P101."push_pirop"("is_cclass", "$I11", ".CCLASS_WORD", $P5224, "$I11")
.annotate 'line', 3260
    find_dynamic_lex $P5235, "%*REG"
    unless_null $P5235, fallback2153
    nqp_get_sc_object $P5238, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5237, $P5238
    set $P5236, $P5237["%REG"]
    unless_null $P5236, fallback2154
    nqp_get_sc_object $P5240, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5239, $P5240
    new $P5241, 'Hash'
    set $P5239["%REG"], $P5241
    set $P5236, $P5241
  fallback2154:
    unless_null $P5236, vivi_5522155
    die "Contextual %*REG not found"
    box $P5242, "Contextual %*REG not found"
    set $P5236, $P5242
  vivi_5522155:
    set $P5235, $P5236
  fallback2153:
    set $P5234, $P5235["fail"]
    unless_null $P5234, fallback2156
    nqp_get_sc_object $P5243, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5234, $P5243
  fallback2156:
    $P5244 = $P101."push_pirop"("unless", "$I11", $P5234)
    set $P5422, $P5244
    goto if544_end2124
  if544_else2123:
    set $S5007, $P102
    iseq $I5005, $S5007, "bol"
    unless $I5005 goto if553_else2157 
.annotate 'line', 3262
.annotate 'line', 3263
    find_dynamic_lex $P5246, "%*REG"
    unless_null $P5246, fallback2159
    nqp_get_sc_object $P5249, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5248, $P5249
    set $P5247, $P5248["%REG"]
    unless_null $P5247, fallback2160
    nqp_get_sc_object $P5251, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5250, $P5251
    new $P5252, 'Hash'
    set $P5250["%REG"], $P5252
    set $P5247, $P5252
  fallback2160:
    unless_null $P5247, vivi_5542161
    die "Contextual %*REG not found"
    box $P5253, "Contextual %*REG not found"
    set $P5247, $P5253
  vivi_5542161:
    set $P5246, $P5247
  fallback2159:
    set $P5245, $P5246["pos"]
    unless_null $P5245, fallback2162
    nqp_get_sc_object $P5254, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5245, $P5254
  fallback2162:
    $P101."push_pirop"("eq", $P5245, 0, $P103)
.annotate 'line', 3264
    find_dynamic_lex $P5256, "%*REG"
    unless_null $P5256, fallback2163
    nqp_get_sc_object $P5259, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5258, $P5259
    set $P5257, $P5258["%REG"]
    unless_null $P5257, fallback2164
    nqp_get_sc_object $P5261, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5260, $P5261
    new $P5262, 'Hash'
    set $P5260["%REG"], $P5262
    set $P5257, $P5262
  fallback2164:
    unless_null $P5257, vivi_5552165
    die "Contextual %*REG not found"
    box $P5263, "Contextual %*REG not found"
    set $P5257, $P5263
  vivi_5552165:
    set $P5256, $P5257
  fallback2163:
    set $P5255, $P5256["pos"]
    unless_null $P5255, fallback2166
    nqp_get_sc_object $P5264, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5255, $P5264
  fallback2166:
    find_dynamic_lex $P5266, "%*REG"
    unless_null $P5266, fallback2167
    nqp_get_sc_object $P5269, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5268, $P5269
    set $P5267, $P5268["%REG"]
    unless_null $P5267, fallback2168
    nqp_get_sc_object $P5271, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5270, $P5271
    new $P5272, 'Hash'
    set $P5270["%REG"], $P5272
    set $P5267, $P5272
  fallback2168:
    unless_null $P5267, vivi_5562169
    die "Contextual %*REG not found"
    box $P5273, "Contextual %*REG not found"
    set $P5267, $P5273
  vivi_5562169:
    set $P5266, $P5267
  fallback2167:
    set $P5265, $P5266["eos"]
    unless_null $P5265, fallback2170
    nqp_get_sc_object $P5274, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5265, $P5274
  fallback2170:
    find_dynamic_lex $P5276, "%*REG"
    unless_null $P5276, fallback2171
    nqp_get_sc_object $P5279, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5278, $P5279
    set $P5277, $P5278["%REG"]
    unless_null $P5277, fallback2172
    nqp_get_sc_object $P5281, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5280, $P5281
    new $P5282, 'Hash'
    set $P5280["%REG"], $P5282
    set $P5277, $P5282
  fallback2172:
    unless_null $P5277, vivi_5572173
    die "Contextual %*REG not found"
    box $P5283, "Contextual %*REG not found"
    set $P5277, $P5283
  vivi_5572173:
    set $P5276, $P5277
  fallback2171:
    set $P5275, $P5276["fail"]
    unless_null $P5275, fallback2174
    nqp_get_sc_object $P5284, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5275, $P5284
  fallback2174:
    $P101."push_pirop"("ge", $P5255, $P5265, $P5275)
.annotate 'line', 3265
    find_dynamic_lex $P5286, "%*REG"
    unless_null $P5286, fallback2175
    nqp_get_sc_object $P5289, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5288, $P5289
    set $P5287, $P5288["%REG"]
    unless_null $P5287, fallback2176
    nqp_get_sc_object $P5291, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5290, $P5291
    new $P5292, 'Hash'
    set $P5290["%REG"], $P5292
    set $P5287, $P5292
  fallback2176:
    unless_null $P5287, vivi_5582177
    die "Contextual %*REG not found"
    box $P5293, "Contextual %*REG not found"
    set $P5287, $P5293
  vivi_5582177:
    set $P5286, $P5287
  fallback2175:
    set $P5285, $P5286["pos"]
    unless_null $P5285, fallback2178
    nqp_get_sc_object $P5294, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5285, $P5294
  fallback2178:
    $P101."push_pirop"("sub", "$I11", $P5285, 1)
.annotate 'line', 3266
    find_dynamic_lex $P5296, "%*REG"
    unless_null $P5296, fallback2179
    nqp_get_sc_object $P5299, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5298, $P5299
    set $P5297, $P5298["%REG"]
    unless_null $P5297, fallback2180
    nqp_get_sc_object $P5301, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5300, $P5301
    new $P5302, 'Hash'
    set $P5300["%REG"], $P5302
    set $P5297, $P5302
  fallback2180:
    unless_null $P5297, vivi_5592181
    die "Contextual %*REG not found"
    box $P5303, "Contextual %*REG not found"
    set $P5297, $P5303
  vivi_5592181:
    set $P5296, $P5297
  fallback2179:
    set $P5295, $P5296["tgt"]
    unless_null $P5295, fallback2182
    nqp_get_sc_object $P5304, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5295, $P5304
  fallback2182:
    $P101."push_pirop"("is_cclass", "$I11", ".CCLASS_NEWLINE", $P5295, "$I11")
.annotate 'line', 3267
    find_dynamic_lex $P5306, "%*REG"
    unless_null $P5306, fallback2183
    nqp_get_sc_object $P5309, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5308, $P5309
    set $P5307, $P5308["%REG"]
    unless_null $P5307, fallback2184
    nqp_get_sc_object $P5311, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5310, $P5311
    new $P5312, 'Hash'
    set $P5310["%REG"], $P5312
    set $P5307, $P5312
  fallback2184:
    unless_null $P5307, vivi_5602185
    die "Contextual %*REG not found"
    box $P5313, "Contextual %*REG not found"
    set $P5307, $P5313
  vivi_5602185:
    set $P5306, $P5307
  fallback2183:
    set $P5305, $P5306["fail"]
    unless_null $P5305, fallback2186
    nqp_get_sc_object $P5314, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5305, $P5314
  fallback2186:
    $P101."push_pirop"("unless", "$I11", $P5305)
.annotate 'line', 3268
    $P5315 = $P101."push"($P103)
    set $P5421, $P5315
    goto if553_end2158
  if553_else2157:
    set $S5008, $P102
    iseq $I5006, $S5008, "eol"
    unless $I5006 goto if561_else2187 
.annotate 'line', 3270
.annotate 'line', 3271
    find_dynamic_lex $P5317, "%*REG"
    unless_null $P5317, fallback2189
    nqp_get_sc_object $P5320, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5319, $P5320
    set $P5318, $P5319["%REG"]
    unless_null $P5318, fallback2190
    nqp_get_sc_object $P5322, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5321, $P5322
    new $P5323, 'Hash'
    set $P5321["%REG"], $P5323
    set $P5318, $P5323
  fallback2190:
    unless_null $P5318, vivi_5622191
    die "Contextual %*REG not found"
    box $P5324, "Contextual %*REG not found"
    set $P5318, $P5324
  vivi_5622191:
    set $P5317, $P5318
  fallback2189:
    set $P5316, $P5317["tgt"]
    unless_null $P5316, fallback2192
    nqp_get_sc_object $P5325, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5316, $P5325
  fallback2192:
    find_dynamic_lex $P5327, "%*REG"
    unless_null $P5327, fallback2193
    nqp_get_sc_object $P5330, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5329, $P5330
    set $P5328, $P5329["%REG"]
    unless_null $P5328, fallback2194
    nqp_get_sc_object $P5332, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5331, $P5332
    new $P5333, 'Hash'
    set $P5331["%REG"], $P5333
    set $P5328, $P5333
  fallback2194:
    unless_null $P5328, vivi_5632195
    die "Contextual %*REG not found"
    box $P5334, "Contextual %*REG not found"
    set $P5328, $P5334
  vivi_5632195:
    set $P5327, $P5328
  fallback2193:
    set $P5326, $P5327["pos"]
    unless_null $P5326, fallback2196
    nqp_get_sc_object $P5335, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5326, $P5335
  fallback2196:
    $P101."push_pirop"("is_cclass", "$I11", ".CCLASS_NEWLINE", $P5316, $P5326)
.annotate 'line', 3272
    $P101."push_pirop"("if", "$I11", $P103)
.annotate 'line', 3273
    find_dynamic_lex $P5337, "%*REG"
    unless_null $P5337, fallback2197
    nqp_get_sc_object $P5340, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5339, $P5340
    set $P5338, $P5339["%REG"]
    unless_null $P5338, fallback2198
    nqp_get_sc_object $P5342, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5341, $P5342
    new $P5343, 'Hash'
    set $P5341["%REG"], $P5343
    set $P5338, $P5343
  fallback2198:
    unless_null $P5338, vivi_5642199
    die "Contextual %*REG not found"
    box $P5344, "Contextual %*REG not found"
    set $P5338, $P5344
  vivi_5642199:
    set $P5337, $P5338
  fallback2197:
    set $P5336, $P5337["pos"]
    unless_null $P5336, fallback2200
    nqp_get_sc_object $P5345, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5336, $P5345
  fallback2200:
    find_dynamic_lex $P5347, "%*REG"
    unless_null $P5347, fallback2201
    nqp_get_sc_object $P5350, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5349, $P5350
    set $P5348, $P5349["%REG"]
    unless_null $P5348, fallback2202
    nqp_get_sc_object $P5352, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5351, $P5352
    new $P5353, 'Hash'
    set $P5351["%REG"], $P5353
    set $P5348, $P5353
  fallback2202:
    unless_null $P5348, vivi_5652203
    die "Contextual %*REG not found"
    box $P5354, "Contextual %*REG not found"
    set $P5348, $P5354
  vivi_5652203:
    set $P5347, $P5348
  fallback2201:
    set $P5346, $P5347["eos"]
    unless_null $P5346, fallback2204
    nqp_get_sc_object $P5355, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5346, $P5355
  fallback2204:
    find_dynamic_lex $P5357, "%*REG"
    unless_null $P5357, fallback2205
    nqp_get_sc_object $P5360, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5359, $P5360
    set $P5358, $P5359["%REG"]
    unless_null $P5358, fallback2206
    nqp_get_sc_object $P5362, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5361, $P5362
    new $P5363, 'Hash'
    set $P5361["%REG"], $P5363
    set $P5358, $P5363
  fallback2206:
    unless_null $P5358, vivi_5662207
    die "Contextual %*REG not found"
    box $P5364, "Contextual %*REG not found"
    set $P5358, $P5364
  vivi_5662207:
    set $P5357, $P5358
  fallback2205:
    set $P5356, $P5357["fail"]
    unless_null $P5356, fallback2208
    nqp_get_sc_object $P5365, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5356, $P5365
  fallback2208:
    $P101."push_pirop"("ne", $P5336, $P5346, $P5356)
.annotate 'line', 3274
    find_dynamic_lex $P5367, "%*REG"
    unless_null $P5367, fallback2209
    nqp_get_sc_object $P5370, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5369, $P5370
    set $P5368, $P5369["%REG"]
    unless_null $P5368, fallback2210
    nqp_get_sc_object $P5372, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5371, $P5372
    new $P5373, 'Hash'
    set $P5371["%REG"], $P5373
    set $P5368, $P5373
  fallback2210:
    unless_null $P5368, vivi_5672211
    die "Contextual %*REG not found"
    box $P5374, "Contextual %*REG not found"
    set $P5368, $P5374
  vivi_5672211:
    set $P5367, $P5368
  fallback2209:
    set $P5366, $P5367["pos"]
    unless_null $P5366, fallback2212
    nqp_get_sc_object $P5375, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5366, $P5375
  fallback2212:
    $P101."push_pirop"("eq", $P5366, 0, $P103)
.annotate 'line', 3275
    find_dynamic_lex $P5377, "%*REG"
    unless_null $P5377, fallback2213
    nqp_get_sc_object $P5380, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5379, $P5380
    set $P5378, $P5379["%REG"]
    unless_null $P5378, fallback2214
    nqp_get_sc_object $P5382, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5381, $P5382
    new $P5383, 'Hash'
    set $P5381["%REG"], $P5383
    set $P5378, $P5383
  fallback2214:
    unless_null $P5378, vivi_5682215
    die "Contextual %*REG not found"
    box $P5384, "Contextual %*REG not found"
    set $P5378, $P5384
  vivi_5682215:
    set $P5377, $P5378
  fallback2213:
    set $P5376, $P5377["pos"]
    unless_null $P5376, fallback2216
    nqp_get_sc_object $P5385, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5376, $P5385
  fallback2216:
    $P101."push_pirop"("sub", "$I11", $P5376, 1)
.annotate 'line', 3276
    find_dynamic_lex $P5387, "%*REG"
    unless_null $P5387, fallback2217
    nqp_get_sc_object $P5390, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5389, $P5390
    set $P5388, $P5389["%REG"]
    unless_null $P5388, fallback2218
    nqp_get_sc_object $P5392, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5391, $P5392
    new $P5393, 'Hash'
    set $P5391["%REG"], $P5393
    set $P5388, $P5393
  fallback2218:
    unless_null $P5388, vivi_5692219
    die "Contextual %*REG not found"
    box $P5394, "Contextual %*REG not found"
    set $P5388, $P5394
  vivi_5692219:
    set $P5387, $P5388
  fallback2217:
    set $P5386, $P5387["tgt"]
    unless_null $P5386, fallback2220
    nqp_get_sc_object $P5395, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5386, $P5395
  fallback2220:
    $P101."push_pirop"("is_cclass", "$I11", ".CCLASS_NEWLINE", $P5386, "$I11")
.annotate 'line', 3277
    find_dynamic_lex $P5397, "%*REG"
    unless_null $P5397, fallback2221
    nqp_get_sc_object $P5400, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5399, $P5400
    set $P5398, $P5399["%REG"]
    unless_null $P5398, fallback2222
    nqp_get_sc_object $P5402, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5401, $P5402
    new $P5403, 'Hash'
    set $P5401["%REG"], $P5403
    set $P5398, $P5403
  fallback2222:
    unless_null $P5398, vivi_5702223
    die "Contextual %*REG not found"
    box $P5404, "Contextual %*REG not found"
    set $P5398, $P5404
  vivi_5702223:
    set $P5397, $P5398
  fallback2221:
    set $P5396, $P5397["fail"]
    unless_null $P5396, fallback2224
    nqp_get_sc_object $P5405, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5396, $P5405
  fallback2224:
    $P101."push_pirop"("if", "$I11", $P5396)
.annotate 'line', 3278
    $P5406 = $P101."push"($P103)
    set $P5420, $P5406
    goto if561_end2188
  if561_else2187:
    set $S5009, $P102
    iseq $I5007, $S5009, "fail"
    box $P5419, $I5007
    set $P5418, $P5419
    unless $I5007 goto if571_end2226 
.annotate 'line', 3280
.annotate 'line', 3281
    find_dynamic_lex $P5408, "%*REG"
    unless_null $P5408, fallback2227
    nqp_get_sc_object $P5411, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5410, $P5411
    set $P5409, $P5410["%REG"]
    unless_null $P5409, fallback2228
    nqp_get_sc_object $P5413, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5412, $P5413
    new $P5414, 'Hash'
    set $P5412["%REG"], $P5414
    set $P5409, $P5414
  fallback2228:
    unless_null $P5409, vivi_5722229
    die "Contextual %*REG not found"
    box $P5415, "Contextual %*REG not found"
    set $P5409, $P5415
  vivi_5722229:
    set $P5408, $P5409
  fallback2227:
    set $P5407, $P5408["fail"]
    unless_null $P5407, fallback2230
    nqp_get_sc_object $P5416, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5407, $P5416
  fallback2230:
    $P5417 = $P101."push_pirop"("goto", $P5407)
    set $P5418, $P5417
  if571_end2226:
    set $P5420, $P5418
  if561_end2188:
    set $P5421, $P5420
  if553_end2158:
    set $P5422, $P5421
  if544_end2124:
    set $P5423, $P5422
  if534_end2086:
    set $P5424, $P5423
  if530_end2072:
  if527_end2062:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "dba" :subid("cuid_123_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3287
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$ops", $P101 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 3288
    nqp_decontainerize $P5002, _lex_param_0
    find_dynamic_lex $P5004, "%*REG"
    unless_null $P5004, fallback2231
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["%REG"]
    unless_null $P5005, fallback2232
    nqp_get_sc_object $P5009, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5008, $P5009
    new $P5010, 'Hash'
    set $P5008["%REG"], $P5010
    set $P5005, $P5010
  fallback2232:
    unless_null $P5005, vivi_5732233
    die "Contextual %*REG not found"
    box $P5011, "Contextual %*REG not found"
    set $P5005, $P5011
  vivi_5732233:
    set $P5004, $P5005
  fallback2231:
    set $P5003, $P5004["cur"]
    unless_null $P5003, fallback2234
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5012
  fallback2234:
    $P5013 = $P5002."post_new"("Ops", $P5003 :named("result"))
    set $P101, $P5013
.annotate 'line', 3289
    find_dynamic_lex $P5015, "%*REG"
    unless_null $P5015, fallback2235
    nqp_get_sc_object $P5018, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["%REG"]
    unless_null $P5016, fallback2236
    nqp_get_sc_object $P5020, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5019, $P5020
    new $P5021, 'Hash'
    set $P5019["%REG"], $P5021
    set $P5016, $P5021
  fallback2236:
    unless_null $P5016, vivi_5742237
    die "Contextual %*REG not found"
    box $P5022, "Contextual %*REG not found"
    set $P5016, $P5022
  vivi_5742237:
    set $P5015, $P5016
  fallback2235:
    set $P5014, $P5015["cur"]
    unless_null $P5014, fallback2238
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5014, $P5023
  fallback2238:
    find_dynamic_lex $P5025, "%*REG"
    unless_null $P5025, fallback2239
    nqp_get_sc_object $P5028, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["%REG"]
    unless_null $P5026, fallback2240
    nqp_get_sc_object $P5030, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5029, $P5030
    new $P5031, 'Hash'
    set $P5029["%REG"], $P5031
    set $P5026, $P5031
  fallback2240:
    unless_null $P5026, vivi_5752241
    die "Contextual %*REG not found"
    box $P5032, "Contextual %*REG not found"
    set $P5026, $P5032
  vivi_5752241:
    set $P5025, $P5026
  fallback2239:
    set $P5024, $P5025["pos"]
    unless_null $P5024, fallback2242
    nqp_get_sc_object $P5033, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5024, $P5033
  fallback2242:
    nqp_decontainerize $P5034, _lex_param_0
    $P5035 = _lex_param_1."name"()
    $P5036 = $P5034."escape"($P5035)
    $P101."push_pirop"("callmethod", "\"!dba\"", $P5014, $P5024, $P5036)
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "cclass" :subid("cuid_124_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3303
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5064 = 'cuid_330_1359572548.257' 
    capture_lex $P5064 
    .lex "$ops", $P101 
    .lex "$subtype", $P102 
    .lex "$cclass", $P103 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
.annotate 'line', 3304
    nqp_decontainerize $P5004, _lex_param_0
    find_dynamic_lex $P5006, "%*REG"
    unless_null $P5006, fallback2243
    nqp_get_sc_object $P5009, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["%REG"]
    unless_null $P5007, fallback2244
    nqp_get_sc_object $P5011, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5010, $P5011
    new $P5012, 'Hash'
    set $P5010["%REG"], $P5012
    set $P5007, $P5012
  fallback2244:
    unless_null $P5007, vivi_5762245
    die "Contextual %*REG not found"
    box $P5013, "Contextual %*REG not found"
    set $P5007, $P5013
  vivi_5762245:
    set $P5006, $P5007
  fallback2243:
    set $P5005, $P5006["cur"]
    unless_null $P5005, fallback2246
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5005, $P5014
  fallback2246:
    $P5015 = $P5004."post_new"("Ops", $P5005 :named("result"))
    set $P101, $P5015
.annotate 'line', 3305
    $P5016 = _lex_param_1."subtype"()
    set $P102, $P5016
.annotate 'line', 3306
    find_dynamic_lex $P5018, "%*REG"
    unless_null $P5018, fallback2247
    nqp_get_sc_object $P5021, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["%REG"]
    unless_null $P5019, fallback2248
    nqp_get_sc_object $P5023, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5022, $P5023
    new $P5024, 'Hash'
    set $P5022["%REG"], $P5024
    set $P5019, $P5024
  fallback2248:
    unless_null $P5019, vivi_5772249
    die "Contextual %*REG not found"
    box $P5025, "Contextual %*REG not found"
    set $P5019, $P5025
  vivi_5772249:
    set $P5018, $P5019
  fallback2247:
    set $P5017, $P5018["pos"]
    unless_null $P5017, fallback2250
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5017, $P5026
  fallback2250:
    find_dynamic_lex $P5028, "%*REG"
    unless_null $P5028, fallback2251
    nqp_get_sc_object $P5031, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5030, $P5031
    set $P5029, $P5030["%REG"]
    unless_null $P5029, fallback2252
    nqp_get_sc_object $P5033, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5032, $P5033
    new $P5034, 'Hash'
    set $P5032["%REG"], $P5034
    set $P5029, $P5034
  fallback2252:
    unless_null $P5029, vivi_5782253
    die "Contextual %*REG not found"
    box $P5035, "Contextual %*REG not found"
    set $P5029, $P5035
  vivi_5782253:
    set $P5028, $P5029
  fallback2251:
    set $P5027, $P5028["eos"]
    unless_null $P5027, fallback2254
    nqp_get_sc_object $P5036, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5027, $P5036
  fallback2254:
    find_dynamic_lex $P5038, "%*REG"
    unless_null $P5038, fallback2255
    nqp_get_sc_object $P5041, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5040, $P5041
    set $P5039, $P5040["%REG"]
    unless_null $P5039, fallback2256
    nqp_get_sc_object $P5043, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5042, $P5043
    new $P5044, 'Hash'
    set $P5042["%REG"], $P5044
    set $P5039, $P5044
  fallback2256:
    unless_null $P5039, vivi_5792257
    die "Contextual %*REG not found"
    box $P5045, "Contextual %*REG not found"
    set $P5039, $P5045
  vivi_5792257:
    set $P5038, $P5039
  fallback2255:
    set $P5037, $P5038["fail"]
    unless_null $P5037, fallback2258
    nqp_get_sc_object $P5046, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5037, $P5046
  fallback2258:
    $P101."push_pirop"("ge", $P5017, $P5027, $P5037)
    find_lex $P5048, "%cclass_code"
    set $S5002, $P102
    downcase $S5001, $S5002
    set $P5047, $P5048[$S5001]
    unless_null $P5047, fallback2259
    nqp_get_sc_object $P5049, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5047, $P5049
  fallback2259:
    set $P103, $P5047
    if $P103 goto unless580_end2261 
.annotate 'line', 3308
    nqp_decontainerize $P5050, _lex_param_0
    set $S5005, $P102
    concat $S5004, "Unrecognized subtype '", $S5005
    concat $S5003, $S5004, "' in QAST::Regex cclass"
    $P5051 = $P5050."panic"($S5003)
  unless580_end2261:
    set $S5006, $P103
    isne $I5001, $S5006, ".CCLASS_ANY"
    unless $I5001 goto if581_end2263 
    .const 'Sub' $P5052 = 'cuid_330_1359572548.257' 
    capture_lex $P5052
    $P5053 = $P5052()
  if581_end2263:
.annotate 'line', 3320
    find_dynamic_lex $P5055, "%*REG"
    unless_null $P5055, fallback2292
    nqp_get_sc_object $P5058, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5057, $P5058
    set $P5056, $P5057["%REG"]
    unless_null $P5056, fallback2293
    nqp_get_sc_object $P5060, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5059, $P5060
    new $P5061, 'Hash'
    set $P5059["%REG"], $P5061
    set $P5056, $P5061
  fallback2293:
    unless_null $P5056, vivi_5902294
    die "Contextual %*REG not found"
    box $P5062, "Contextual %*REG not found"
    set $P5056, $P5062
  vivi_5902294:
    set $P5055, $P5056
  fallback2292:
    set $P5054, $P5055["pos"]
    unless_null $P5054, fallback2295
    nqp_get_sc_object $P5063, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5054, $P5063
  fallback2295:
    $P101."push_pirop"("add", $P5054, 1)
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_330_1359572548.257") :anon :lex :outer("cuid_124_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3310
    .lex "$testop", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 3311
    find_lex $P5002, "$node"
    $P5003 = $P5002."negate"()
    unless $P5003 goto if582_else2264 
    set $S5001, "if"
    goto if582_end2265
  if582_else2264:
    set $S5001, "unless"
  if582_end2265:
    box $P5004, $S5001
    set $P101, $P5004
.annotate 'line', 3312
    find_lex $P5005, "$ops"
    find_lex $P5006, "$cclass"
    find_dynamic_lex $P5008, "%*REG"
    unless_null $P5008, fallback2266
    nqp_get_sc_object $P5011, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["%REG"]
    unless_null $P5009, fallback2267
    nqp_get_sc_object $P5013, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5012, $P5013
    new $P5014, 'Hash'
    set $P5012["%REG"], $P5014
    set $P5009, $P5014
  fallback2267:
    unless_null $P5009, vivi_5832268
    die "Contextual %*REG not found"
    box $P5015, "Contextual %*REG not found"
    set $P5009, $P5015
  vivi_5832268:
    set $P5008, $P5009
  fallback2266:
    set $P5007, $P5008["tgt"]
    unless_null $P5007, fallback2269
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5007, $P5016
  fallback2269:
    find_dynamic_lex $P5018, "%*REG"
    unless_null $P5018, fallback2270
    nqp_get_sc_object $P5021, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["%REG"]
    unless_null $P5019, fallback2271
    nqp_get_sc_object $P5023, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5022, $P5023
    new $P5024, 'Hash'
    set $P5022["%REG"], $P5024
    set $P5019, $P5024
  fallback2271:
    unless_null $P5019, vivi_5842272
    die "Contextual %*REG not found"
    box $P5025, "Contextual %*REG not found"
    set $P5019, $P5025
  vivi_5842272:
    set $P5018, $P5019
  fallback2270:
    set $P5017, $P5018["pos"]
    unless_null $P5017, fallback2273
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5017, $P5026
  fallback2273:
    $P5005."push_pirop"("is_cclass", "$I11", $P5006, $P5007, $P5017)
.annotate 'line', 3313
    find_lex $P5027, "$ops"
    find_dynamic_lex $P5029, "%*REG"
    unless_null $P5029, fallback2274
    nqp_get_sc_object $P5032, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["%REG"]
    unless_null $P5030, fallback2275
    nqp_get_sc_object $P5034, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5033, $P5034
    new $P5035, 'Hash'
    set $P5033["%REG"], $P5035
    set $P5030, $P5035
  fallback2275:
    unless_null $P5030, vivi_5852276
    die "Contextual %*REG not found"
    box $P5036, "Contextual %*REG not found"
    set $P5030, $P5036
  vivi_5852276:
    set $P5029, $P5030
  fallback2274:
    set $P5028, $P5029["fail"]
    unless_null $P5028, fallback2277
    nqp_get_sc_object $P5037, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5028, $P5037
  fallback2277:
    $P5027."push_pirop"($P101, "$I11", $P5028)
    find_lex $P5038, "$subtype"
    set $S5002, $P5038
    iseq $I5001, $S5002, "nl"
    box $P5074, $I5001
    set $P5073, $P5074
    unless $I5001 goto if586_end2279 
.annotate 'line', 3314
.annotate 'line', 3315
    find_lex $P5039, "$ops"
    find_dynamic_lex $P5041, "%*REG"
    unless_null $P5041, fallback2280
    nqp_get_sc_object $P5044, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5043, $P5044
    set $P5042, $P5043["%REG"]
    unless_null $P5042, fallback2281
    nqp_get_sc_object $P5046, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5045, $P5046
    new $P5047, 'Hash'
    set $P5045["%REG"], $P5047
    set $P5042, $P5047
  fallback2281:
    unless_null $P5042, vivi_5872282
    die "Contextual %*REG not found"
    box $P5048, "Contextual %*REG not found"
    set $P5042, $P5048
  vivi_5872282:
    set $P5041, $P5042
  fallback2280:
    set $P5040, $P5041["tgt"]
    unless_null $P5040, fallback2283
    nqp_get_sc_object $P5049, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5040, $P5049
  fallback2283:
    find_dynamic_lex $P5051, "%*REG"
    unless_null $P5051, fallback2284
    nqp_get_sc_object $P5054, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5053, $P5054
    set $P5052, $P5053["%REG"]
    unless_null $P5052, fallback2285
    nqp_get_sc_object $P5056, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5055, $P5056
    new $P5057, 'Hash'
    set $P5055["%REG"], $P5057
    set $P5052, $P5057
  fallback2285:
    unless_null $P5052, vivi_5882286
    die "Contextual %*REG not found"
    box $P5058, "Contextual %*REG not found"
    set $P5052, $P5058
  vivi_5882286:
    set $P5051, $P5052
  fallback2284:
    set $P5050, $P5051["pos"]
    unless_null $P5050, fallback2287
    nqp_get_sc_object $P5059, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5050, $P5059
  fallback2287:
    $P5039."push_pirop"("substr", "$S10", $P5040, $P5050, 2)
.annotate 'line', 3316
    find_lex $P5060, "$ops"
    $P5060."push_pirop"("iseq", "$I11", "$S10", "\"\\r\\n\"")
.annotate 'line', 3317
    find_lex $P5061, "$ops"
    find_dynamic_lex $P5063, "%*REG"
    unless_null $P5063, fallback2288
    nqp_get_sc_object $P5066, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5065, $P5066
    set $P5064, $P5065["%REG"]
    unless_null $P5064, fallback2289
    nqp_get_sc_object $P5068, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5067, $P5068
    new $P5069, 'Hash'
    set $P5067["%REG"], $P5069
    set $P5064, $P5069
  fallback2289:
    unless_null $P5064, vivi_5892290
    die "Contextual %*REG not found"
    box $P5070, "Contextual %*REG not found"
    set $P5064, $P5070
  vivi_5892290:
    set $P5063, $P5064
  fallback2288:
    set $P5062, $P5063["pos"]
    unless_null $P5062, fallback2291
    nqp_get_sc_object $P5071, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5062, $P5071
  fallback2291:
    $P5072 = $P5061."push_pirop"("add", $P5062, "$I11")
    set $P5073, $P5072
  if586_end2279:
    .return ($P5073) 
.end
.HLL "nqp"
.namespace []
.sub "concat" :subid("cuid_125_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3324
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5020 = 'cuid_331_1359572548.257' 
    capture_lex $P5020 
    .lex "$ops", $P101 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 3325
    nqp_decontainerize $P5002, _lex_param_0
    find_dynamic_lex $P5004, "%*REG"
    unless_null $P5004, fallback2296
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["%REG"]
    unless_null $P5005, fallback2297
    nqp_get_sc_object $P5009, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5008, $P5009
    new $P5010, 'Hash'
    set $P5008["%REG"], $P5010
    set $P5005, $P5010
  fallback2297:
    unless_null $P5005, vivi_5912298
    die "Contextual %*REG not found"
    box $P5011, "Contextual %*REG not found"
    set $P5005, $P5011
  vivi_5912298:
    set $P5004, $P5005
  fallback2296:
    set $P5003, $P5004["cur"]
    unless_null $P5003, fallback2299
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5012
  fallback2299:
    $P5013 = $P5002."post_new"("Ops", $P5003 :named("result"))
    set $P101, $P5013
.annotate 'line', 3326
    $P5017 = _lex_param_1."list"()
    set $P5014, $P5017
    iter $P5016, $P5017
  for_next2300:
    unless $P5016, for_done2302
    shift $P5019, $P5016
  for_redo2301:
    .const 'Sub' $P5018 = 'cuid_331_1359572548.257' 
    capture_lex $P5018
    $P5014 = $P5018($P5019)
    goto for_next2300
  for_done2302:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_331_1359572548.257") :anon :lex :outer("cuid_125_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3326
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$ops"
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    $P5004 = $P5002."regex_post"(_lex_param_0)
    $P5005 = $P5001."push"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "conj" :subid("cuid_126_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3330
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."conjseq"(_lex_param_1)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "conjseq" :subid("cuid_127_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3332
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$ops", $P101 
    .lex "$prefix", $P102 
    .lex "$conjlabel", $P103 
    .lex "$firstlabel", $P104 
    .lex "$iter", $P105 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P105, $P5005
.annotate 'line', 3333
    nqp_decontainerize $P5006, _lex_param_0
    find_dynamic_lex $P5008, "%*REG"
    unless_null $P5008, fallback2303
    nqp_get_sc_object $P5011, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["%REG"]
    unless_null $P5009, fallback2304
    nqp_get_sc_object $P5013, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5012, $P5013
    new $P5014, 'Hash'
    set $P5012["%REG"], $P5014
    set $P5009, $P5014
  fallback2304:
    unless_null $P5009, vivi_5922305
    die "Contextual %*REG not found"
    box $P5015, "Contextual %*REG not found"
    set $P5009, $P5015
  vivi_5922305:
    set $P5008, $P5009
  fallback2303:
    set $P5007, $P5008["cur"]
    unless_null $P5007, fallback2306
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5007, $P5016
  fallback2306:
    $P5017 = $P5006."post_new"("Ops", $P5007 :named("result"))
    set $P101, $P5017
.annotate 'line', 3334
    nqp_decontainerize $P5018, _lex_param_0
    $P5019 = $P5018."unique"("rxconj")
    set $S5002, $P5019
    concat $S5001, $S5002, "_"
    box $P5020, $S5001
    set $P102, $P5020
.annotate 'line', 3335
    nqp_decontainerize $P5021, _lex_param_0
    set $S5004, $P102
    concat $S5003, $S5004, "fail"
    $P5022 = $P5021."post_new"("Label", $S5003 :named("name"))
    set $P103, $P5022
.annotate 'line', 3336
    nqp_decontainerize $P5023, _lex_param_0
    set $S5006, $P102
    concat $S5005, $S5006, "first"
    $P5024 = $P5023."post_new"("Label", $S5005 :named("name"))
    set $P104, $P5024
.annotate 'line', 3337
    $P5026 = _lex_param_1."list"()
    iter $P5025, $P5026
    set $P105, $P5025
.annotate 'line', 3339
    nqp_decontainerize $P5027, _lex_param_0
    find_dynamic_lex $P5029, "%*REG"
    unless_null $P5029, fallback2307
    nqp_get_sc_object $P5032, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["%REG"]
    unless_null $P5030, fallback2308
    nqp_get_sc_object $P5034, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5033, $P5034
    new $P5035, 'Hash'
    set $P5033["%REG"], $P5035
    set $P5030, $P5035
  fallback2308:
    unless_null $P5030, vivi_5932309
    die "Contextual %*REG not found"
    box $P5036, "Contextual %*REG not found"
    set $P5030, $P5036
  vivi_5932309:
    set $P5029, $P5030
  fallback2307:
    set $P5028, $P5029["pos"]
    unless_null $P5028, fallback2310
    nqp_get_sc_object $P5037, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5028, $P5037
  fallback2310:
    $P5027."regex_mark"($P101, $P103, $P5028, 0)
.annotate 'line', 3340
    $P101."push_pirop"("goto", $P104)
.annotate 'line', 3341
    $P101."push"($P103)
.annotate 'line', 3342
    find_dynamic_lex $P5039, "%*REG"
    unless_null $P5039, fallback2311
    nqp_get_sc_object $P5042, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5041, $P5042
    set $P5040, $P5041["%REG"]
    unless_null $P5040, fallback2312
    nqp_get_sc_object $P5044, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5043, $P5044
    new $P5045, 'Hash'
    set $P5043["%REG"], $P5045
    set $P5040, $P5045
  fallback2312:
    unless_null $P5040, vivi_5942313
    die "Contextual %*REG not found"
    box $P5046, "Contextual %*REG not found"
    set $P5040, $P5046
  vivi_5942313:
    set $P5039, $P5040
  fallback2311:
    set $P5038, $P5039["fail"]
    unless_null $P5038, fallback2314
    nqp_get_sc_object $P5047, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5038, $P5047
  fallback2314:
    $P101."push_pirop"("goto", $P5038)
.annotate 'line', 3344
    $P101."push"($P104)
.annotate 'line', 3345
    nqp_decontainerize $P5048, _lex_param_0
    shift $P5049, $P105
    $P5050 = $P5048."regex_post"($P5049)
    $P101."push"($P5050)
.annotate 'line', 3347
    nqp_decontainerize $P5051, _lex_param_0
    $P5051."regex_peek"($P101, $P103, "$I11")
.annotate 'line', 3348
    nqp_decontainerize $P5052, _lex_param_0
    find_dynamic_lex $P5054, "%*REG"
    unless_null $P5054, fallback2315
    nqp_get_sc_object $P5057, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["%REG"]
    unless_null $P5055, fallback2316
    nqp_get_sc_object $P5059, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5058, $P5059
    new $P5060, 'Hash'
    set $P5058["%REG"], $P5060
    set $P5055, $P5060
  fallback2316:
    unless_null $P5055, vivi_5952317
    die "Contextual %*REG not found"
    box $P5061, "Contextual %*REG not found"
    set $P5055, $P5061
  vivi_5952317:
    set $P5054, $P5055
  fallback2315:
    set $P5053, $P5054["pos"]
    unless_null $P5053, fallback2318
    nqp_get_sc_object $P5062, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5053, $P5062
  fallback2318:
    $P5052."regex_mark"($P101, $P103, "$I11", $P5053)
  while596_test2319:
    set $P5098, $P105
    unless $P105 goto while596_done2323 
  while596_redo2321:
.annotate 'line', 3350
.annotate 'line', 3351
    find_dynamic_lex $P5064, "%*REG"
    unless_null $P5064, fallback2324
    nqp_get_sc_object $P5067, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5066, $P5067
    set $P5065, $P5066["%REG"]
    unless_null $P5065, fallback2325
    nqp_get_sc_object $P5069, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5068, $P5069
    new $P5070, 'Hash'
    set $P5068["%REG"], $P5070
    set $P5065, $P5070
  fallback2325:
    unless_null $P5065, vivi_5972326
    die "Contextual %*REG not found"
    box $P5071, "Contextual %*REG not found"
    set $P5065, $P5071
  vivi_5972326:
    set $P5064, $P5065
  fallback2324:
    set $P5063, $P5064["pos"]
    unless_null $P5063, fallback2327
    nqp_get_sc_object $P5072, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5063, $P5072
  fallback2327:
    $P101."push_pirop"("set", $P5063, "$I11")
.annotate 'line', 3352
    nqp_decontainerize $P5073, _lex_param_0
    shift $P5074, $P105
    $P5075 = $P5073."regex_post"($P5074)
    $P101."push"($P5075)
.annotate 'line', 3353
    nqp_decontainerize $P5076, _lex_param_0
    $P5076."regex_peek"($P101, $P103, "$I11", "$I12")
.annotate 'line', 3354
    find_dynamic_lex $P5078, "%*REG"
    unless_null $P5078, fallback2328
    nqp_get_sc_object $P5081, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5080, $P5081
    set $P5079, $P5080["%REG"]
    unless_null $P5079, fallback2329
    nqp_get_sc_object $P5083, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5082, $P5083
    new $P5084, 'Hash'
    set $P5082["%REG"], $P5084
    set $P5079, $P5084
  fallback2329:
    unless_null $P5079, vivi_5982330
    die "Contextual %*REG not found"
    box $P5085, "Contextual %*REG not found"
    set $P5079, $P5085
  vivi_5982330:
    set $P5078, $P5079
  fallback2328:
    set $P5077, $P5078["pos"]
    unless_null $P5077, fallback2331
    nqp_get_sc_object $P5086, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5077, $P5086
  fallback2331:
    find_dynamic_lex $P5088, "%*REG"
    unless_null $P5088, fallback2332
    nqp_get_sc_object $P5091, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5090, $P5091
    set $P5089, $P5090["%REG"]
    unless_null $P5089, fallback2333
    nqp_get_sc_object $P5093, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5092, $P5093
    new $P5094, 'Hash'
    set $P5092["%REG"], $P5094
    set $P5089, $P5094
  fallback2333:
    unless_null $P5089, vivi_5992334
    die "Contextual %*REG not found"
    box $P5095, "Contextual %*REG not found"
    set $P5089, $P5095
  vivi_5992334:
    set $P5088, $P5089
  fallback2332:
    set $P5087, $P5088["fail"]
    unless_null $P5087, fallback2335
    nqp_get_sc_object $P5096, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5087, $P5096
  fallback2335:
    $P5097 = $P101."push_pirop"("ne", $P5077, "$I12", $P5087)
    set $P5098, $P5097
    goto while596_test2319 
  while596_done2323:
.annotate 'line', 3356
    $P5099 = _lex_param_1."subtype"()
    set $S5007, $P5099
    iseq $I5001, $S5007, "zerowidth"
    unless $I5001 goto if600_end2337 
    find_dynamic_lex $P5101, "%*REG"
    unless_null $P5101, fallback2338
    nqp_get_sc_object $P5104, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5103, $P5104
    set $P5102, $P5103["%REG"]
    unless_null $P5102, fallback2339
    nqp_get_sc_object $P5106, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5105, $P5106
    new $P5107, 'Hash'
    set $P5105["%REG"], $P5107
    set $P5102, $P5107
  fallback2339:
    unless_null $P5102, vivi_6012340
    die "Contextual %*REG not found"
    box $P5108, "Contextual %*REG not found"
    set $P5102, $P5108
  vivi_6012340:
    set $P5101, $P5102
  fallback2338:
    set $P5100, $P5101["pos"]
    unless_null $P5100, fallback2341
    nqp_get_sc_object $P5109, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5100, $P5109
  fallback2341:
    $P5110 = $P101."push_pirop"("set", $P5100, "$I11")
  if600_end2337:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "enumcharlist" :subid("cuid_128_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3360
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$ops", $P101 
    .lex "$charlist", $P102 
    .lex "$testop", $P103 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
.annotate 'line', 3361
    nqp_decontainerize $P5004, _lex_param_0
    find_dynamic_lex $P5006, "%*REG"
    unless_null $P5006, fallback2342
    nqp_get_sc_object $P5009, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["%REG"]
    unless_null $P5007, fallback2343
    nqp_get_sc_object $P5011, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5010, $P5011
    new $P5012, 'Hash'
    set $P5010["%REG"], $P5012
    set $P5007, $P5012
  fallback2343:
    unless_null $P5007, vivi_6022344
    die "Contextual %*REG not found"
    box $P5013, "Contextual %*REG not found"
    set $P5007, $P5013
  vivi_6022344:
    set $P5006, $P5007
  fallback2342:
    set $P5005, $P5006["cur"]
    unless_null $P5005, fallback2345
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5005, $P5014
  fallback2345:
    $P5015 = $P5004."post_new"("Ops", $P5005 :named("result"))
    set $P101, $P5015
.annotate 'line', 3362
    nqp_decontainerize $P5016, _lex_param_0
    set $P5017, _lex_param_1[0]
    unless_null $P5017, fallback2346
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5017, $P5018
  fallback2346:
    $P5019 = $P5016."rxescape"($P5017)
    set $P102, $P5019
.annotate 'line', 3363
    $P5020 = _lex_param_1."negate"()
    unless $P5020 goto if603_else2347 
    set $S5001, "ge"
    goto if603_end2348
  if603_else2347:
    set $S5001, "lt"
  if603_end2348:
    box $P5021, $S5001
    set $P103, $P5021
.annotate 'line', 3364
    find_dynamic_lex $P5023, "%*REG"
    unless_null $P5023, fallback2349
    nqp_get_sc_object $P5026, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5025, $P5026
    set $P5024, $P5025["%REG"]
    unless_null $P5024, fallback2350
    nqp_get_sc_object $P5028, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5027, $P5028
    new $P5029, 'Hash'
    set $P5027["%REG"], $P5029
    set $P5024, $P5029
  fallback2350:
    unless_null $P5024, vivi_6042351
    die "Contextual %*REG not found"
    box $P5030, "Contextual %*REG not found"
    set $P5024, $P5030
  vivi_6042351:
    set $P5023, $P5024
  fallback2349:
    set $P5022, $P5023["pos"]
    unless_null $P5022, fallback2352
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5022, $P5031
  fallback2352:
    find_dynamic_lex $P5033, "%*REG"
    unless_null $P5033, fallback2353
    nqp_get_sc_object $P5036, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5035, $P5036
    set $P5034, $P5035["%REG"]
    unless_null $P5034, fallback2354
    nqp_get_sc_object $P5038, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5037, $P5038
    new $P5039, 'Hash'
    set $P5037["%REG"], $P5039
    set $P5034, $P5039
  fallback2354:
    unless_null $P5034, vivi_6052355
    die "Contextual %*REG not found"
    box $P5040, "Contextual %*REG not found"
    set $P5034, $P5040
  vivi_6052355:
    set $P5033, $P5034
  fallback2353:
    set $P5032, $P5033["eos"]
    unless_null $P5032, fallback2356
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5032, $P5041
  fallback2356:
    find_dynamic_lex $P5043, "%*REG"
    unless_null $P5043, fallback2357
    nqp_get_sc_object $P5046, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["%REG"]
    unless_null $P5044, fallback2358
    nqp_get_sc_object $P5048, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5047, $P5048
    new $P5049, 'Hash'
    set $P5047["%REG"], $P5049
    set $P5044, $P5049
  fallback2358:
    unless_null $P5044, vivi_6062359
    die "Contextual %*REG not found"
    box $P5050, "Contextual %*REG not found"
    set $P5044, $P5050
  vivi_6062359:
    set $P5043, $P5044
  fallback2357:
    set $P5042, $P5043["fail"]
    unless_null $P5042, fallback2360
    nqp_get_sc_object $P5051, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5042, $P5051
  fallback2360:
    $P101."push_pirop"("ge", $P5022, $P5032, $P5042)
.annotate 'line', 3365
    find_dynamic_lex $P5053, "%*REG"
    unless_null $P5053, fallback2361
    nqp_get_sc_object $P5056, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["%REG"]
    unless_null $P5054, fallback2362
    nqp_get_sc_object $P5058, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5057, $P5058
    new $P5059, 'Hash'
    set $P5057["%REG"], $P5059
    set $P5054, $P5059
  fallback2362:
    unless_null $P5054, vivi_6072363
    die "Contextual %*REG not found"
    box $P5060, "Contextual %*REG not found"
    set $P5054, $P5060
  vivi_6072363:
    set $P5053, $P5054
  fallback2361:
    set $P5052, $P5053["tgt"]
    unless_null $P5052, fallback2364
    nqp_get_sc_object $P5061, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5052, $P5061
  fallback2364:
    find_dynamic_lex $P5063, "%*REG"
    unless_null $P5063, fallback2365
    nqp_get_sc_object $P5066, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5065, $P5066
    set $P5064, $P5065["%REG"]
    unless_null $P5064, fallback2366
    nqp_get_sc_object $P5068, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5067, $P5068
    new $P5069, 'Hash'
    set $P5067["%REG"], $P5069
    set $P5064, $P5069
  fallback2366:
    unless_null $P5064, vivi_6082367
    die "Contextual %*REG not found"
    box $P5070, "Contextual %*REG not found"
    set $P5064, $P5070
  vivi_6082367:
    set $P5063, $P5064
  fallback2365:
    set $P5062, $P5063["pos"]
    unless_null $P5062, fallback2368
    nqp_get_sc_object $P5071, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5062, $P5071
  fallback2368:
    $P101."push_pirop"("substr", "$S11", $P5052, $P5062, 1)
.annotate 'line', 3366
    $P101."push_pirop"("index", "$I11", $P102, "$S11")
.annotate 'line', 3367
    find_dynamic_lex $P5073, "%*REG"
    unless_null $P5073, fallback2369
    nqp_get_sc_object $P5076, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5075, $P5076
    set $P5074, $P5075["%REG"]
    unless_null $P5074, fallback2370
    nqp_get_sc_object $P5078, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5077, $P5078
    new $P5079, 'Hash'
    set $P5077["%REG"], $P5079
    set $P5074, $P5079
  fallback2370:
    unless_null $P5074, vivi_6092371
    die "Contextual %*REG not found"
    box $P5080, "Contextual %*REG not found"
    set $P5074, $P5080
  vivi_6092371:
    set $P5073, $P5074
  fallback2369:
    set $P5072, $P5073["fail"]
    unless_null $P5072, fallback2372
    nqp_get_sc_object $P5081, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5072, $P5081
  fallback2372:
    $P101."push_pirop"($P103, "$I11", 0, $P5072)
.annotate 'line', 3368
    $P5082 = _lex_param_1."subtype"()
    set $S5002, $P5082
    iseq $I5001, $S5002, "zerowidth"
    if $I5001 goto unless610_end2374 
    find_dynamic_lex $P5084, "%*REG"
    unless_null $P5084, fallback2375
    nqp_get_sc_object $P5087, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5086, $P5087
    set $P5085, $P5086["%REG"]
    unless_null $P5085, fallback2376
    nqp_get_sc_object $P5089, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5088, $P5089
    new $P5090, 'Hash'
    set $P5088["%REG"], $P5090
    set $P5085, $P5090
  fallback2376:
    unless_null $P5085, vivi_6112377
    die "Contextual %*REG not found"
    box $P5091, "Contextual %*REG not found"
    set $P5085, $P5091
  vivi_6112377:
    set $P5084, $P5085
  fallback2375:
    set $P5083, $P5084["pos"]
    unless_null $P5083, fallback2378
    nqp_get_sc_object $P5092, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5083, $P5092
  fallback2378:
    $P5093 = $P101."push_pirop"("inc", $P5083)
  unless610_end2374:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "literal" :subid("cuid_129_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3372
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$ops", $P101 
    .lex "$litconst", $P102 
    .lex "$litlen", $P103 
    .lex "$litpost", $P104 
    .lex "$cmpop", $P105 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P105, $P5005
.annotate 'line', 3373
    nqp_decontainerize $P5006, _lex_param_0
    $P5007 = $P5006."post_new"("Ops")
    set $P101, $P5007
    set $P5008, _lex_param_1[0]
    unless_null $P5008, fallback2379
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5008, $P5009
  fallback2379:
    set $P102, $P5008
.annotate 'line', 3376
    $P5010 = _lex_param_1."subtype"()
    set $S5001, $P5010
    iseq $I5001, $S5001, "ignorecase"
    unless $I5001 goto if612_end2381 
    set $S5003, $P102
    downcase $S5002, $S5003
    box $P5011, $S5002
    set $P102, $P5011
  if612_end2381:
    set $S5004, $P102
    length $I5002, $S5004
    box $P5012, $I5002
    set $P103, $P5012
.annotate 'line', 3378
    nqp_decontainerize $P5013, _lex_param_0
    $P5014 = $P5013."rxescape"($P102)
    set $P104, $P5014
.annotate 'line', 3379
    $P5015 = _lex_param_1."negate"()
    unless $P5015 goto if613_else2382 
    set $S5005, "eq"
    goto if613_end2383
  if613_else2382:
    set $S5005, "ne"
  if613_end2383:
    box $P5016, $S5005
    set $P105, $P5016
.annotate 'line', 3380
    find_dynamic_lex $P5018, "%*REG"
    unless_null $P5018, fallback2384
    nqp_get_sc_object $P5021, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["%REG"]
    unless_null $P5019, fallback2385
    nqp_get_sc_object $P5023, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5022, $P5023
    new $P5024, 'Hash'
    set $P5022["%REG"], $P5024
    set $P5019, $P5024
  fallback2385:
    unless_null $P5019, vivi_6142386
    die "Contextual %*REG not found"
    box $P5025, "Contextual %*REG not found"
    set $P5019, $P5025
  vivi_6142386:
    set $P5018, $P5019
  fallback2384:
    set $P5017, $P5018["pos"]
    unless_null $P5017, fallback2387
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5017, $P5026
  fallback2387:
    $P101."push_pirop"("add", "$I11", $P5017, $P103)
.annotate 'line', 3381
    find_dynamic_lex $P5028, "%*REG"
    unless_null $P5028, fallback2388
    nqp_get_sc_object $P5031, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5030, $P5031
    set $P5029, $P5030["%REG"]
    unless_null $P5029, fallback2389
    nqp_get_sc_object $P5033, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5032, $P5033
    new $P5034, 'Hash'
    set $P5032["%REG"], $P5034
    set $P5029, $P5034
  fallback2389:
    unless_null $P5029, vivi_6152390
    die "Contextual %*REG not found"
    box $P5035, "Contextual %*REG not found"
    set $P5029, $P5035
  vivi_6152390:
    set $P5028, $P5029
  fallback2388:
    set $P5027, $P5028["eos"]
    unless_null $P5027, fallback2391
    nqp_get_sc_object $P5036, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5027, $P5036
  fallback2391:
    find_dynamic_lex $P5038, "%*REG"
    unless_null $P5038, fallback2392
    nqp_get_sc_object $P5041, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5040, $P5041
    set $P5039, $P5040["%REG"]
    unless_null $P5039, fallback2393
    nqp_get_sc_object $P5043, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5042, $P5043
    new $P5044, 'Hash'
    set $P5042["%REG"], $P5044
    set $P5039, $P5044
  fallback2393:
    unless_null $P5039, vivi_6162394
    die "Contextual %*REG not found"
    box $P5045, "Contextual %*REG not found"
    set $P5039, $P5045
  vivi_6162394:
    set $P5038, $P5039
  fallback2392:
    set $P5037, $P5038["fail"]
    unless_null $P5037, fallback2395
    nqp_get_sc_object $P5046, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5037, $P5046
  fallback2395:
    $P101."push_pirop"("gt", "$I11", $P5027, $P5037)
.annotate 'line', 3382
    find_dynamic_lex $P5048, "%*REG"
    unless_null $P5048, fallback2396
    nqp_get_sc_object $P5051, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5050, $P5051
    set $P5049, $P5050["%REG"]
    unless_null $P5049, fallback2397
    nqp_get_sc_object $P5053, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5052, $P5053
    new $P5054, 'Hash'
    set $P5052["%REG"], $P5054
    set $P5049, $P5054
  fallback2397:
    unless_null $P5049, vivi_6172398
    die "Contextual %*REG not found"
    box $P5055, "Contextual %*REG not found"
    set $P5049, $P5055
  vivi_6172398:
    set $P5048, $P5049
  fallback2396:
    set $P5047, $P5048["tgt"]
    unless_null $P5047, fallback2399
    nqp_get_sc_object $P5056, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5047, $P5056
  fallback2399:
    find_dynamic_lex $P5058, "%*REG"
    unless_null $P5058, fallback2400
    nqp_get_sc_object $P5061, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5060, $P5061
    set $P5059, $P5060["%REG"]
    unless_null $P5059, fallback2401
    nqp_get_sc_object $P5063, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5062, $P5063
    new $P5064, 'Hash'
    set $P5062["%REG"], $P5064
    set $P5059, $P5064
  fallback2401:
    unless_null $P5059, vivi_6182402
    die "Contextual %*REG not found"
    box $P5065, "Contextual %*REG not found"
    set $P5059, $P5065
  vivi_6182402:
    set $P5058, $P5059
  fallback2400:
    set $P5057, $P5058["pos"]
    unless_null $P5057, fallback2403
    nqp_get_sc_object $P5066, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5057, $P5066
  fallback2403:
    $P101."push_pirop"("substr", "$S10", $P5047, $P5057, $P103)
.annotate 'line', 3384
    $P5067 = _lex_param_1."subtype"()
    set $S5006, $P5067
    iseq $I5003, $S5006, "ignorecase"
    unless $I5003 goto if619_end2405 
.annotate 'line', 3383
    $P5068 = $P101."push_pirop"("downcase", "$S10", "$S10")
  if619_end2405:
.annotate 'line', 3385
    find_dynamic_lex $P5070, "%*REG"
    unless_null $P5070, fallback2406
    nqp_get_sc_object $P5073, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5072, $P5073
    set $P5071, $P5072["%REG"]
    unless_null $P5071, fallback2407
    nqp_get_sc_object $P5075, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5074, $P5075
    new $P5076, 'Hash'
    set $P5074["%REG"], $P5076
    set $P5071, $P5076
  fallback2407:
    unless_null $P5071, vivi_6202408
    die "Contextual %*REG not found"
    box $P5077, "Contextual %*REG not found"
    set $P5071, $P5077
  vivi_6202408:
    set $P5070, $P5071
  fallback2406:
    set $P5069, $P5070["fail"]
    unless_null $P5069, fallback2409
    nqp_get_sc_object $P5078, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5069, $P5078
  fallback2409:
    $P101."push_pirop"($P105, "$S10", $P104, $P5069)
.annotate 'line', 3386
    find_dynamic_lex $P5080, "%*REG"
    unless_null $P5080, fallback2410
    nqp_get_sc_object $P5083, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5082, $P5083
    set $P5081, $P5082["%REG"]
    unless_null $P5081, fallback2411
    nqp_get_sc_object $P5085, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5084, $P5085
    new $P5086, 'Hash'
    set $P5084["%REG"], $P5086
    set $P5081, $P5086
  fallback2411:
    unless_null $P5081, vivi_6212412
    die "Contextual %*REG not found"
    box $P5087, "Contextual %*REG not found"
    set $P5081, $P5087
  vivi_6212412:
    set $P5080, $P5081
  fallback2410:
    set $P5079, $P5080["pos"]
    unless_null $P5079, fallback2413
    nqp_get_sc_object $P5088, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5079, $P5088
  fallback2413:
    $P101."push_pirop"("add", $P5079, $P103)
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "pass" :subid("cuid_130_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3390
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5056 = 'cuid_332_1359572548.257' 
    capture_lex $P5056 
    .const 'Sub' $P5056 = 'cuid_333_1359572548.257' 
    capture_lex $P5056 
    .lex "$ops", $P101 
    .lex "@backtrack", $P102 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
.annotate 'line', 3391
    nqp_decontainerize $P5003, _lex_param_0
    find_dynamic_lex $P5005, "%*REG"
    unless_null $P5005, fallback2414
    nqp_get_sc_object $P5008, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["%REG"]
    unless_null $P5006, fallback2415
    nqp_get_sc_object $P5010, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5009, $P5010
    new $P5011, 'Hash'
    set $P5009["%REG"], $P5011
    set $P5006, $P5011
  fallback2415:
    unless_null $P5006, vivi_6222416
    die "Contextual %*REG not found"
    box $P5012, "Contextual %*REG not found"
    set $P5006, $P5012
  vivi_6222416:
    set $P5005, $P5006
  fallback2414:
    set $P5004, $P5005["cur"]
    unless_null $P5004, fallback2417
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5013
  fallback2417:
    $P5014 = $P5003."post_new"("Ops", $P5004 :named("result"))
    set $P101, $P5014
.annotate 'line', 3393
    $P5015 = _lex_param_1."backtrack"()
    set $S5001, $P5015
    isne $I5001, $S5001, "r"
    unless $I5001 goto if623_end2419 
    new $P5016, 'ResizablePMCArray'
    box $P5017, "'backtrack'=>1"
    push $P5016, $P5017
    set $P102, $P5016
  if623_end2419:
.annotate 'line', 3394
    $P5018 = _lex_param_1."name"()
    unless $P5018 goto if624_else2420 
    .const 'Sub' $P5019 = 'cuid_332_1359572548.257' 
    capture_lex $P5019
    $P5020 = $P5019()
    goto if624_end2421
  if624_else2420:
    $P5021 = _lex_param_1."list"()
    set $N5001, $P5021
    set $N5002, 1
    iseq $I5002, $N5001, $N5002
    unless $I5002 goto if627_else2430 
    .const 'Sub' $P5022 = 'cuid_333_1359572548.257' 
    capture_lex $P5022
    $P5023 = $P5022()
    set $P5045, $P5023
    goto if627_end2431
  if627_else2430:
.annotate 'line', 3403
.annotate 'line', 3404
    find_dynamic_lex $P5025, "%*REG"
    unless_null $P5025, fallback2441
    nqp_get_sc_object $P5028, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["%REG"]
    unless_null $P5026, fallback2442
    nqp_get_sc_object $P5030, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5029, $P5030
    new $P5031, 'Hash'
    set $P5029["%REG"], $P5031
    set $P5026, $P5031
  fallback2442:
    unless_null $P5026, vivi_6302443
    die "Contextual %*REG not found"
    box $P5032, "Contextual %*REG not found"
    set $P5026, $P5032
  vivi_6302443:
    set $P5025, $P5026
  fallback2441:
    set $P5024, $P5025["cur"]
    unless_null $P5024, fallback2444
    nqp_get_sc_object $P5033, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5024, $P5033
  fallback2444:
    find_dynamic_lex $P5035, "%*REG"
    unless_null $P5035, fallback2445
    nqp_get_sc_object $P5038, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5037, $P5038
    set $P5036, $P5037["%REG"]
    unless_null $P5036, fallback2446
    nqp_get_sc_object $P5040, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5039, $P5040
    new $P5041, 'Hash'
    set $P5039["%REG"], $P5041
    set $P5036, $P5041
  fallback2446:
    unless_null $P5036, vivi_6312447
    die "Contextual %*REG not found"
    box $P5042, "Contextual %*REG not found"
    set $P5036, $P5042
  vivi_6312447:
    set $P5035, $P5036
  fallback2445:
    set $P5034, $P5035["pos"]
    unless_null $P5034, fallback2448
    nqp_get_sc_object $P5043, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5034, $P5043
  fallback2448:
    $P5044 = $P101."push_pirop"("callmethod", "\"!cursor_pass\"", $P5024, $P5034, $P102 :flat)
    set $P5045, $P5044
  if627_end2431:
  if624_end2421:
.annotate 'line', 3406
    find_dynamic_lex $P5047, "%*REG"
    unless_null $P5047, fallback2449
    nqp_get_sc_object $P5050, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["%REG"]
    unless_null $P5048, fallback2450
    nqp_get_sc_object $P5052, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5051, $P5052
    new $P5053, 'Hash'
    set $P5051["%REG"], $P5053
    set $P5048, $P5053
  fallback2450:
    unless_null $P5048, vivi_6322451
    die "Contextual %*REG not found"
    box $P5054, "Contextual %*REG not found"
    set $P5048, $P5054
  vivi_6322451:
    set $P5047, $P5048
  fallback2449:
    set $P5046, $P5047["cur"]
    unless_null $P5046, fallback2452
    nqp_get_sc_object $P5055, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5046, $P5055
  fallback2452:
    $P101."push_pirop"("return", $P5046)
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_332_1359572548.257") :anon :lex :outer("cuid_130_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3394
    .lex "$name", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 3395
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    find_lex $P5004, "$node"
    $P5005 = $P5004."name"()
    $P5006 = $P5002."escape"($P5005)
    set $P101, $P5006
.annotate 'line', 3396
    find_lex $P5007, "$ops"
    find_dynamic_lex $P5009, "%*REG"
    unless_null $P5009, fallback2422
    nqp_get_sc_object $P5012, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["%REG"]
    unless_null $P5010, fallback2423
    nqp_get_sc_object $P5014, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5013, $P5014
    new $P5015, 'Hash'
    set $P5013["%REG"], $P5015
    set $P5010, $P5015
  fallback2423:
    unless_null $P5010, vivi_6252424
    die "Contextual %*REG not found"
    box $P5016, "Contextual %*REG not found"
    set $P5010, $P5016
  vivi_6252424:
    set $P5009, $P5010
  fallback2422:
    set $P5008, $P5009["cur"]
    unless_null $P5008, fallback2425
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5008, $P5017
  fallback2425:
    find_dynamic_lex $P5019, "%*REG"
    unless_null $P5019, fallback2426
    nqp_get_sc_object $P5022, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["%REG"]
    unless_null $P5020, fallback2427
    nqp_get_sc_object $P5024, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5023, $P5024
    new $P5025, 'Hash'
    set $P5023["%REG"], $P5025
    set $P5020, $P5025
  fallback2427:
    unless_null $P5020, vivi_6262428
    die "Contextual %*REG not found"
    box $P5026, "Contextual %*REG not found"
    set $P5020, $P5026
  vivi_6262428:
    set $P5019, $P5020
  fallback2426:
    set $P5018, $P5019["pos"]
    unless_null $P5018, fallback2429
    nqp_get_sc_object $P5027, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5018, $P5027
  fallback2429:
    find_lex $P5028, "@backtrack"
    $P5029 = $P5007."push_pirop"("callmethod", "\"!cursor_pass\"", $P5008, $P5018, $P101, $P5028 :flat)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_333_1359572548.257") :anon :lex :outer("cuid_130_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3398
    .lex "$dynname", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 3399
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    find_lex $P5005, "self"
    nqp_decontainerize $P5004, $P5005
    find_lex $P5007, "$node"
    set $P5006, $P5007[0]
    unless_null $P5006, fallback2432
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5006, $P5008
  fallback2432:
    $P5009 = $P5004."as_post"($P5006)
    $P5010 = $P5002."coerce"($P5009, "S")
    set $P101, $P5010
.annotate 'line', 3400
    find_lex $P5011, "$ops"
    $P5011."push"($P101)
.annotate 'line', 3401
    find_lex $P5012, "$ops"
    find_dynamic_lex $P5014, "%*REG"
    unless_null $P5014, fallback2433
    nqp_get_sc_object $P5017, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["%REG"]
    unless_null $P5015, fallback2434
    nqp_get_sc_object $P5019, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5018, $P5019
    new $P5020, 'Hash'
    set $P5018["%REG"], $P5020
    set $P5015, $P5020
  fallback2434:
    unless_null $P5015, vivi_6282435
    die "Contextual %*REG not found"
    box $P5021, "Contextual %*REG not found"
    set $P5015, $P5021
  vivi_6282435:
    set $P5014, $P5015
  fallback2433:
    set $P5013, $P5014["cur"]
    unless_null $P5013, fallback2436
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5013, $P5022
  fallback2436:
    find_dynamic_lex $P5024, "%*REG"
    unless_null $P5024, fallback2437
    nqp_get_sc_object $P5027, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5026, $P5027
    set $P5025, $P5026["%REG"]
    unless_null $P5025, fallback2438
    nqp_get_sc_object $P5029, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5028, $P5029
    new $P5030, 'Hash'
    set $P5028["%REG"], $P5030
    set $P5025, $P5030
  fallback2438:
    unless_null $P5025, vivi_6292439
    die "Contextual %*REG not found"
    box $P5031, "Contextual %*REG not found"
    set $P5025, $P5031
  vivi_6292439:
    set $P5024, $P5025
  fallback2437:
    set $P5023, $P5024["pos"]
    unless_null $P5023, fallback2440
    nqp_get_sc_object $P5032, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5023, $P5032
  fallback2440:
    find_lex $P5033, "@backtrack"
    $P5034 = $P5012."push_pirop"("callmethod", "\"!cursor_pass\"", $P5013, $P5023, $P101, $P5033 :flat)
    .return ($P5034) 
.end
.HLL "nqp"
.namespace []
.sub "qastnode" :subid("cuid_131_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3410
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$ops", $P101 
    .lex "$cpost", $P102 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 3411
    nqp_decontainerize $P5003, _lex_param_0
    find_dynamic_lex $P5005, "%*REG"
    unless_null $P5005, fallback2453
    nqp_get_sc_object $P5008, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["%REG"]
    unless_null $P5006, fallback2454
    nqp_get_sc_object $P5010, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5009, $P5010
    new $P5011, 'Hash'
    set $P5009["%REG"], $P5011
    set $P5006, $P5011
  fallback2454:
    unless_null $P5006, vivi_6332455
    die "Contextual %*REG not found"
    box $P5012, "Contextual %*REG not found"
    set $P5006, $P5012
  vivi_6332455:
    set $P5005, $P5006
  fallback2453:
    set $P5004, $P5005["cur"]
    unless_null $P5004, fallback2456
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5013
  fallback2456:
    $P5014 = $P5003."post_new"("Ops", $P5004 :named("result"))
    set $P101, $P5014
.annotate 'line', 3412
    find_dynamic_lex $P5016, "%*REG"
    unless_null $P5016, fallback2457
    nqp_get_sc_object $P5019, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5018, $P5019
    set $P5017, $P5018["%REG"]
    unless_null $P5017, fallback2458
    nqp_get_sc_object $P5021, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5020, $P5021
    new $P5022, 'Hash'
    set $P5020["%REG"], $P5022
    set $P5017, $P5022
  fallback2458:
    unless_null $P5017, vivi_6342459
    die "Contextual %*REG not found"
    box $P5023, "Contextual %*REG not found"
    set $P5017, $P5023
  vivi_6342459:
    set $P5016, $P5017
  fallback2457:
    set $P5015, $P5016["cur"]
    unless_null $P5015, fallback2460
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5015, $P5024
  fallback2460:
    find_dynamic_lex $P5026, "%*REG"
    unless_null $P5026, fallback2461
    nqp_get_sc_object $P5029, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["%REG"]
    unless_null $P5027, fallback2462
    nqp_get_sc_object $P5031, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5030, $P5031
    new $P5032, 'Hash'
    set $P5030["%REG"], $P5032
    set $P5027, $P5032
  fallback2462:
    unless_null $P5027, vivi_6352463
    die "Contextual %*REG not found"
    box $P5033, "Contextual %*REG not found"
    set $P5027, $P5033
  vivi_6352463:
    set $P5026, $P5027
  fallback2461:
    set $P5025, $P5026["curclass"]
    unless_null $P5025, fallback2464
    nqp_get_sc_object $P5034, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5025, $P5034
  fallback2464:
    find_dynamic_lex $P5036, "%*REG"
    unless_null $P5036, fallback2465
    nqp_get_sc_object $P5039, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5038, $P5039
    set $P5037, $P5038["%REG"]
    unless_null $P5037, fallback2466
    nqp_get_sc_object $P5041, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5040, $P5041
    new $P5042, 'Hash'
    set $P5040["%REG"], $P5042
    set $P5037, $P5042
  fallback2466:
    unless_null $P5037, vivi_6362467
    die "Contextual %*REG not found"
    box $P5043, "Contextual %*REG not found"
    set $P5037, $P5043
  vivi_6362467:
    set $P5036, $P5037
  fallback2465:
    set $P5035, $P5036["pos"]
    unless_null $P5035, fallback2468
    nqp_get_sc_object $P5044, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5035, $P5044
  fallback2468:
    $P101."push_pirop"("repr_bind_attr_int", $P5015, $P5025, "\"$!pos\"", $P5035)
.annotate 'line', 3413
    find_dynamic_lex $P5046, "%*REG"
    unless_null $P5046, fallback2469
    nqp_get_sc_object $P5049, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5048, $P5049
    set $P5047, $P5048["%REG"]
    unless_null $P5047, fallback2470
    nqp_get_sc_object $P5051, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5050, $P5051
    new $P5052, 'Hash'
    set $P5050["%REG"], $P5052
    set $P5047, $P5052
  fallback2470:
    unless_null $P5047, vivi_6372471
    die "Contextual %*REG not found"
    box $P5053, "Contextual %*REG not found"
    set $P5047, $P5053
  vivi_6372471:
    set $P5046, $P5047
  fallback2469:
    set $P5045, $P5046["cur"]
    unless_null $P5045, fallback2472
    nqp_get_sc_object $P5054, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5045, $P5054
  fallback2472:
    $P101."push_pirop"("store_lex", utf8:"unicode:\"$\\x{a2}\"", $P5045)
.annotate 'line', 3414
    nqp_decontainerize $P5055, _lex_param_0
    nqp_decontainerize $P5056, _lex_param_0
    set $P5057, _lex_param_1[0]
    unless_null $P5057, fallback2473
    nqp_get_sc_object $P5058, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5057, $P5058
  fallback2473:
    $P5059 = $P5056."as_post"($P5057)
    $P5060 = $P5055."coerce"($P5059, "P")
    set $P102, $P5060
.annotate 'line', 3415
    $P101."push"($P102)
.annotate 'line', 3416
    $P5061 = _lex_param_1."subtype"()
    set $S5001, $P5061
    iseq $I5001, $S5001, "zerowidth"
    unless $I5001 goto if638_end2475 
.annotate 'line', 3417
    $P5062 = _lex_param_1."negate"()
    unless $P5062 goto if639_else2476 
    set $S5002, "if"
    goto if639_end2477
  if639_else2476:
    set $S5002, "unless"
  if639_end2477:
    find_dynamic_lex $P5064, "%*REG"
    unless_null $P5064, fallback2478
    nqp_get_sc_object $P5067, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5066, $P5067
    set $P5065, $P5066["%REG"]
    unless_null $P5065, fallback2479
    nqp_get_sc_object $P5069, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5068, $P5069
    new $P5070, 'Hash'
    set $P5068["%REG"], $P5070
    set $P5065, $P5070
  fallback2479:
    unless_null $P5065, vivi_6402480
    die "Contextual %*REG not found"
    box $P5071, "Contextual %*REG not found"
    set $P5065, $P5071
  vivi_6402480:
    set $P5064, $P5065
  fallback2478:
    set $P5063, $P5064["fail"]
    unless_null $P5063, fallback2481
    nqp_get_sc_object $P5072, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5063, $P5072
  fallback2481:
    $P5073 = $P101."push_pirop"($S5002, $P102, $P5063)
  if638_end2475:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "quant" :subid("cuid_132_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3422
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5148 = 'cuid_334_1359572548.257' 
    capture_lex $P5148 
    .lex "$ops", $P101 
    .lex "$backtrack", $P102 
    .lex "$sep", $P103 
    .lex "$prefix", $P104 
    .lex "$looplabel", $P105 
    .lex "$donelabel", $P106 
    .lex "$min", $P107 
    .lex "$max", $P108 
    .lex "$needrep", $P109 
    .lex "$needmark", $P110 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P106, $P5006
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P107, $P5007
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P108, $P5008
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P109, $P5009
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P110, $P5010
.annotate 'line', 3423
    nqp_decontainerize $P5011, _lex_param_0
    find_dynamic_lex $P5013, "%*REG"
    unless_null $P5013, fallback2482
    nqp_get_sc_object $P5016, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["%REG"]
    unless_null $P5014, fallback2483
    nqp_get_sc_object $P5018, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5017, $P5018
    new $P5019, 'Hash'
    set $P5017["%REG"], $P5019
    set $P5014, $P5019
  fallback2483:
    unless_null $P5014, vivi_6412484
    die "Contextual %*REG not found"
    box $P5020, "Contextual %*REG not found"
    set $P5014, $P5020
  vivi_6412484:
    set $P5013, $P5014
  fallback2482:
    set $P5012, $P5013["cur"]
    unless_null $P5012, fallback2485
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5012, $P5021
  fallback2485:
    $P5022 = $P5011."post_new"("Ops", $P5012 :named("result"))
    set $P101, $P5022
.annotate 'line', 3424
    $P5023 = _lex_param_1."backtrack"()
    set $P5024, $P5023
    if $P5023 goto unless642_end2487 
    box $P5025, "g"
    set $P5024, $P5025
  unless642_end2487:
    set $P102, $P5024
    set $P5026, _lex_param_1[1]
    unless_null $P5026, fallback2488
    nqp_get_sc_object $P5027, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5026, $P5027
  fallback2488:
    set $P103, $P5026
.annotate 'line', 3426
    nqp_decontainerize $P5028, _lex_param_0
    set $S5002, $P102
    concat $S5001, "rxquant", $S5002
    $P5029 = $P5028."unique"($S5001)
    set $P104, $P5029
.annotate 'line', 3427
    nqp_decontainerize $P5030, _lex_param_0
    set $S5004, $P104
    concat $S5003, $S5004, "_loop"
    $P5031 = $P5030."post_new"("Label", $S5003 :named("name"))
    set $P105, $P5031
.annotate 'line', 3428
    nqp_decontainerize $P5032, _lex_param_0
    set $S5006, $P104
    concat $S5005, $S5006, "_done"
    $P5033 = $P5032."post_new"("Label", $S5005 :named("name"))
    set $P106, $P5033
.annotate 'line', 3429
    $P5034 = _lex_param_1."min"()
    set $P107, $P5034
.annotate 'line', 3430
    $P5035 = _lex_param_1."max"()
    set $P108, $P5035
    set $N5001, $P107
    set $N5002, 1
    isgt $I5001, $N5001, $N5002
    set $I5003, $I5001
    if $I5001 goto unless643_end2490 
    set $N5003, $P108
    set $N5004, 1
    isgt $I5002, $N5003, $N5004
    set $I5003, $I5002
  unless643_end2490:
    box $P5036, $I5003
    set $P109, $P5036
    set $P5037, $P109
    if $P109 goto unless644_end2492 
    set $S5007, $P102
    iseq $I5004, $S5007, "r"
    box $P5038, $I5004
    set $P5037, $P5038
  unless644_end2492:
    set $P110, $P5037
    set $N5005, $P107
    set $N5006, 0
    iseq $I5005, $N5005, $N5006
    set $I5007, $I5005
    unless $I5005 goto if646_end2496 
    set $N5007, $P108
    set $N5008, 0
    iseq $I5006, $N5007, $N5008
    set $I5007, $I5006
  if646_end2496:
    unless $I5007 goto if645_else2493 
.annotate 'line', 3436
    nqp_get_sc_object $P5039, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    goto if645_end2494
  if645_else2493:
    set $S5008, $P102
    iseq $I5008, $S5008, "f"
    unless $I5008 goto if647_else2497 
    .const 'Sub' $P5040 = 'cuid_334_1359572548.257' 
    capture_lex $P5040
    $P5041 = $P5040()
    set $P5147, $P5041
    goto if647_end2498
  if647_else2497:
.annotate 'line', 3460
    set $N5009, $P107
    set $N5010, 0
    iseq $I5009, $N5009, $N5010
    unless $I5009 goto if665_else2554 
.annotate 'line', 3461
    nqp_decontainerize $P5042, _lex_param_0
    find_dynamic_lex $P5044, "%*REG"
    unless_null $P5044, fallback2556
    nqp_get_sc_object $P5047, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5046, $P5047
    set $P5045, $P5046["%REG"]
    unless_null $P5045, fallback2557
    nqp_get_sc_object $P5049, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5048, $P5049
    new $P5050, 'Hash'
    set $P5048["%REG"], $P5050
    set $P5045, $P5050
  fallback2557:
    unless_null $P5045, vivi_6662558
    die "Contextual %*REG not found"
    box $P5051, "Contextual %*REG not found"
    set $P5045, $P5051
  vivi_6662558:
    set $P5044, $P5045
  fallback2556:
    set $P5043, $P5044["pos"]
    unless_null $P5043, fallback2559
    nqp_get_sc_object $P5052, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5043, $P5052
  fallback2559:
    $P5053 = $P5042."regex_mark"($P101, $P106, $P5043, 0)
    goto if665_end2555
  if665_else2554:
    set $P5056, $P110
    unless $P110 goto if667_end2561 
.annotate 'line', 3462
    nqp_decontainerize $P5054, _lex_param_0
    $P5055 = $P5054."regex_mark"($P101, $P106, -1, 0)
    set $P5056, $P5055
  if667_end2561:
  if665_end2555:
.annotate 'line', 3463
    $P101."push"($P105)
.annotate 'line', 3464
    nqp_decontainerize $P5057, _lex_param_0
    set $P5058, _lex_param_1[0]
    unless_null $P5058, fallback2562
    nqp_get_sc_object $P5059, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5058, $P5059
  fallback2562:
    $P5060 = $P5057."regex_post"($P5058)
    $P101."push"($P5060)
    unless $P110 goto if668_end2564 
.annotate 'line', 3465
.annotate 'line', 3466
    nqp_decontainerize $P5061, _lex_param_0
    find_dynamic_lex $P5063, "%*REG"
    unless_null $P5063, fallback2565
    nqp_get_sc_object $P5066, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5065, $P5066
    set $P5064, $P5065["%REG"]
    unless_null $P5064, fallback2566
    nqp_get_sc_object $P5068, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5067, $P5068
    new $P5069, 'Hash'
    set $P5067["%REG"], $P5069
    set $P5064, $P5069
  fallback2566:
    unless_null $P5064, vivi_6692567
    die "Contextual %*REG not found"
    box $P5070, "Contextual %*REG not found"
    set $P5064, $P5070
  vivi_6692567:
    set $P5063, $P5064
  fallback2565:
    set $P5062, $P5063["rep"]
    unless_null $P5062, fallback2568
    nqp_get_sc_object $P5071, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5062, $P5071
  fallback2568:
    $P5061."regex_peek"($P101, $P106, "*", $P5062)
    set $S5009, $P102
    iseq $I5010, $S5009, "r"
    unless $I5010 goto if670_end2570 
.annotate 'line', 3467
    nqp_decontainerize $P5072, _lex_param_0
    $P5073 = $P5072."regex_commit"($P101, $P106)
  if670_end2570:
.annotate 'line', 3468
    find_dynamic_lex $P5075, "%*REG"
    unless_null $P5075, fallback2571
    nqp_get_sc_object $P5078, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5077, $P5078
    set $P5076, $P5077["%REG"]
    unless_null $P5076, fallback2572
    nqp_get_sc_object $P5080, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5079, $P5080
    new $P5081, 'Hash'
    set $P5079["%REG"], $P5081
    set $P5076, $P5081
  fallback2572:
    unless_null $P5076, vivi_6712573
    die "Contextual %*REG not found"
    box $P5082, "Contextual %*REG not found"
    set $P5076, $P5082
  vivi_6712573:
    set $P5075, $P5076
  fallback2571:
    set $P5074, $P5075["rep"]
    unless_null $P5074, fallback2574
    nqp_get_sc_object $P5083, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5074, $P5083
  fallback2574:
    $P101."push_pirop"("inc", $P5074)
    set $N5011, $P108
    set $N5012, 1
    isgt $I5011, $N5011, $N5012
    box $P5097, $I5011
    set $P5096, $P5097
    unless $I5011 goto if672_end2576 
.annotate 'line', 3469
    find_dynamic_lex $P5085, "%*REG"
    unless_null $P5085, fallback2577
    nqp_get_sc_object $P5088, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5087, $P5088
    set $P5086, $P5087["%REG"]
    unless_null $P5086, fallback2578
    nqp_get_sc_object $P5090, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5089, $P5090
    new $P5091, 'Hash'
    set $P5089["%REG"], $P5091
    set $P5086, $P5091
  fallback2578:
    unless_null $P5086, vivi_6732579
    die "Contextual %*REG not found"
    box $P5092, "Contextual %*REG not found"
    set $P5086, $P5092
  vivi_6732579:
    set $P5085, $P5086
  fallback2577:
    set $P5084, $P5085["rep"]
    unless_null $P5084, fallback2580
    nqp_get_sc_object $P5093, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5084, $P5093
  fallback2580:
    $P5094 = _lex_param_1."max"()
    $P5095 = $P101."push_pirop"("ge", $P5084, $P5094, $P106)
    set $P5096, $P5095
  if672_end2576:
  if668_end2564:
    set $N5013, $P108
    set $N5014, 1
    iseq $I5012, $N5013, $N5014
    if $I5012 goto unless674_end2582 
.annotate 'line', 3472
.annotate 'line', 3473
    nqp_decontainerize $P5098, _lex_param_0
    find_dynamic_lex $P5100, "%*REG"
    unless_null $P5100, fallback2583
    nqp_get_sc_object $P5103, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5102, $P5103
    set $P5101, $P5102["%REG"]
    unless_null $P5101, fallback2584
    nqp_get_sc_object $P5105, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5104, $P5105
    new $P5106, 'Hash'
    set $P5104["%REG"], $P5106
    set $P5101, $P5106
  fallback2584:
    unless_null $P5101, vivi_6752585
    die "Contextual %*REG not found"
    box $P5107, "Contextual %*REG not found"
    set $P5101, $P5107
  vivi_6752585:
    set $P5100, $P5101
  fallback2583:
    set $P5099, $P5100["pos"]
    unless_null $P5099, fallback2586
    nqp_get_sc_object $P5108, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5099, $P5108
  fallback2586:
    find_dynamic_lex $P5110, "%*REG"
    unless_null $P5110, fallback2587
    nqp_get_sc_object $P5113, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5112, $P5113
    set $P5111, $P5112["%REG"]
    unless_null $P5111, fallback2588
    nqp_get_sc_object $P5115, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5114, $P5115
    new $P5116, 'Hash'
    set $P5114["%REG"], $P5116
    set $P5111, $P5116
  fallback2588:
    unless_null $P5111, vivi_6762589
    die "Contextual %*REG not found"
    box $P5117, "Contextual %*REG not found"
    set $P5111, $P5117
  vivi_6762589:
    set $P5110, $P5111
  fallback2587:
    set $P5109, $P5110["rep"]
    unless_null $P5109, fallback2590
    nqp_get_sc_object $P5118, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5109, $P5118
  fallback2590:
    $P5098."regex_mark"($P101, $P106, $P5099, $P5109)
    unless $P103 goto if677_end2592 
.annotate 'line', 3474
    nqp_decontainerize $P5119, _lex_param_0
    $P5120 = $P5119."regex_post"($P103)
    $P5121 = $P101."push"($P5120)
  if677_end2592:
.annotate 'line', 3475
    $P5122 = $P101."push_pirop"("goto", $P105)
  unless674_end2582:
.annotate 'line', 3477
    $P101."push"($P106)
    set $N5015, $P107
    set $N5016, 1
    isgt $I5013, $N5015, $N5016
    box $P5146, $I5013
    set $P5145, $P5146
    unless $I5013 goto if678_end2594 
.annotate 'line', 3478
    find_dynamic_lex $P5124, "%*REG"
    unless_null $P5124, fallback2595
    nqp_get_sc_object $P5127, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5126, $P5127
    set $P5125, $P5126["%REG"]
    unless_null $P5125, fallback2596
    nqp_get_sc_object $P5129, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5128, $P5129
    new $P5130, 'Hash'
    set $P5128["%REG"], $P5130
    set $P5125, $P5130
  fallback2596:
    unless_null $P5125, vivi_6792597
    die "Contextual %*REG not found"
    box $P5131, "Contextual %*REG not found"
    set $P5125, $P5131
  vivi_6792597:
    set $P5124, $P5125
  fallback2595:
    set $P5123, $P5124["rep"]
    unless_null $P5123, fallback2598
    nqp_get_sc_object $P5132, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5123, $P5132
  fallback2598:
    $P5133 = _lex_param_1."min"()
    set $N5017, $P5133
    find_dynamic_lex $P5135, "%*REG"
    unless_null $P5135, fallback2599
    nqp_get_sc_object $P5138, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5137, $P5138
    set $P5136, $P5137["%REG"]
    unless_null $P5136, fallback2600
    nqp_get_sc_object $P5140, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5139, $P5140
    new $P5141, 'Hash'
    set $P5139["%REG"], $P5141
    set $P5136, $P5141
  fallback2600:
    unless_null $P5136, vivi_6802601
    die "Contextual %*REG not found"
    box $P5142, "Contextual %*REG not found"
    set $P5136, $P5142
  vivi_6802601:
    set $P5135, $P5136
  fallback2599:
    set $P5134, $P5135["fail"]
    unless_null $P5134, fallback2602
    nqp_get_sc_object $P5143, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5134, $P5143
  fallback2602:
    $P5144 = $P101."push_pirop"("lt", $P5123, $N5017, $P5134)
    set $P5145, $P5144
  if678_end2594:
    set $P5147, $P5145
  if647_end2498:
  if645_end2494:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_334_1359572548.257") :anon :lex :outer("cuid_132_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3439
    .lex "$seplabel", $P101 
    .lex "$ireg", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 3440
    find_lex $P5004, "self"
    nqp_decontainerize $P5003, $P5004
    find_lex $P5005, "$prefix"
    set $S5002, $P5005
    concat $S5001, $S5002, "_sep"
    $P5006 = $P5003."post_new"("Label", $S5001 :named("name"))
    set $P101, $P5006
    box $P5007, "$I12"
    set $P102, $P5007
.annotate 'line', 3442
    find_lex $P5008, "$ops"
    find_dynamic_lex $P5010, "%*REG"
    unless_null $P5010, fallback2499
    nqp_get_sc_object $P5013, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["%REG"]
    unless_null $P5011, fallback2500
    nqp_get_sc_object $P5015, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5014, $P5015
    new $P5016, 'Hash'
    set $P5014["%REG"], $P5016
    set $P5011, $P5016
  fallback2500:
    unless_null $P5011, vivi_6482501
    die "Contextual %*REG not found"
    box $P5017, "Contextual %*REG not found"
    set $P5011, $P5017
  vivi_6482501:
    set $P5010, $P5011
  fallback2499:
    set $P5009, $P5010["rep"]
    unless_null $P5009, fallback2502
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5009, $P5018
  fallback2502:
    $P5008."push_pirop"("set", $P5009, 0)
    find_lex $P5019, "$min"
    set $N5001, $P5019
    set $N5002, 1
    islt $I5001, $N5001, $N5002
    unless $I5001 goto if649_end2504 
.annotate 'line', 3443
.annotate 'line', 3444
    find_lex $P5021, "self"
    nqp_decontainerize $P5020, $P5021
    find_lex $P5022, "$ops"
    find_lex $P5023, "$looplabel"
    find_dynamic_lex $P5025, "%*REG"
    unless_null $P5025, fallback2505
    nqp_get_sc_object $P5028, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["%REG"]
    unless_null $P5026, fallback2506
    nqp_get_sc_object $P5030, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5029, $P5030
    new $P5031, 'Hash'
    set $P5029["%REG"], $P5031
    set $P5026, $P5031
  fallback2506:
    unless_null $P5026, vivi_6502507
    die "Contextual %*REG not found"
    box $P5032, "Contextual %*REG not found"
    set $P5026, $P5032
  vivi_6502507:
    set $P5025, $P5026
  fallback2505:
    set $P5024, $P5025["pos"]
    unless_null $P5024, fallback2508
    nqp_get_sc_object $P5033, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5024, $P5033
  fallback2508:
    find_dynamic_lex $P5035, "%*REG"
    unless_null $P5035, fallback2509
    nqp_get_sc_object $P5038, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5037, $P5038
    set $P5036, $P5037["%REG"]
    unless_null $P5036, fallback2510
    nqp_get_sc_object $P5040, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5039, $P5040
    new $P5041, 'Hash'
    set $P5039["%REG"], $P5041
    set $P5036, $P5041
  fallback2510:
    unless_null $P5036, vivi_6512511
    die "Contextual %*REG not found"
    box $P5042, "Contextual %*REG not found"
    set $P5036, $P5042
  vivi_6512511:
    set $P5035, $P5036
  fallback2509:
    set $P5034, $P5035["rep"]
    unless_null $P5034, fallback2512
    nqp_get_sc_object $P5043, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5034, $P5043
  fallback2512:
    $P5020."regex_mark"($P5022, $P5023, $P5024, $P5034)
.annotate 'line', 3445
    find_lex $P5044, "$ops"
    find_lex $P5045, "$donelabel"
    $P5046 = $P5044."push_pirop"("goto", $P5045)
  if649_end2504:
    find_lex $P5047, "$sep"
    unless $P5047 goto if652_end2514 
.annotate 'line', 3447
    find_lex $P5048, "$ops"
    $P5049 = $P5048."push_pirop"("goto", $P101)
  if652_end2514:
.annotate 'line', 3448
    find_lex $P5050, "$ops"
    find_lex $P5051, "$looplabel"
    $P5050."push"($P5051)
.annotate 'line', 3449
    find_lex $P5052, "$ops"
    find_dynamic_lex $P5054, "%*REG"
    unless_null $P5054, fallback2515
    nqp_get_sc_object $P5057, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["%REG"]
    unless_null $P5055, fallback2516
    nqp_get_sc_object $P5059, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5058, $P5059
    new $P5060, 'Hash'
    set $P5058["%REG"], $P5060
    set $P5055, $P5060
  fallback2516:
    unless_null $P5055, vivi_6532517
    die "Contextual %*REG not found"
    box $P5061, "Contextual %*REG not found"
    set $P5055, $P5061
  vivi_6532517:
    set $P5054, $P5055
  fallback2515:
    set $P5053, $P5054["rep"]
    unless_null $P5053, fallback2518
    nqp_get_sc_object $P5062, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5053, $P5062
  fallback2518:
    $P5052."push_pirop"("set", $P102, $P5053)
    find_lex $P5063, "$sep"
    unless $P5063 goto if654_end2520 
.annotate 'line', 3450
    find_lex $P5064, "$ops"
    find_lex $P5066, "self"
    nqp_decontainerize $P5065, $P5066
    find_lex $P5067, "$sep"
    $P5068 = $P5065."regex_post"($P5067)
    $P5069 = $P5064."push"($P5068)
  if654_end2520:
    find_lex $P5070, "$sep"
    unless $P5070 goto if655_end2522 
.annotate 'line', 3451
    find_lex $P5071, "$ops"
    $P5072 = $P5071."push"($P101)
  if655_end2522:
.annotate 'line', 3452
    find_lex $P5073, "$ops"
    find_lex $P5075, "self"
    nqp_decontainerize $P5074, $P5075
    find_lex $P5077, "$node"
    set $P5076, $P5077[0]
    unless_null $P5076, fallback2523
    nqp_get_sc_object $P5078, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5076, $P5078
  fallback2523:
    $P5079 = $P5074."regex_post"($P5076)
    $P5073."push"($P5079)
.annotate 'line', 3453
    find_lex $P5080, "$ops"
    find_dynamic_lex $P5082, "%*REG"
    unless_null $P5082, fallback2524
    nqp_get_sc_object $P5085, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5084, $P5085
    set $P5083, $P5084["%REG"]
    unless_null $P5083, fallback2525
    nqp_get_sc_object $P5087, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5086, $P5087
    new $P5088, 'Hash'
    set $P5086["%REG"], $P5088
    set $P5083, $P5088
  fallback2525:
    unless_null $P5083, vivi_6562526
    die "Contextual %*REG not found"
    box $P5089, "Contextual %*REG not found"
    set $P5083, $P5089
  vivi_6562526:
    set $P5082, $P5083
  fallback2524:
    set $P5081, $P5082["rep"]
    unless_null $P5081, fallback2527
    nqp_get_sc_object $P5090, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5081, $P5090
  fallback2527:
    $P5080."push_pirop"("set", $P5081, $P102)
.annotate 'line', 3454
    find_lex $P5091, "$ops"
    find_dynamic_lex $P5093, "%*REG"
    unless_null $P5093, fallback2528
    nqp_get_sc_object $P5096, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5095, $P5096
    set $P5094, $P5095["%REG"]
    unless_null $P5094, fallback2529
    nqp_get_sc_object $P5098, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5097, $P5098
    new $P5099, 'Hash'
    set $P5097["%REG"], $P5099
    set $P5094, $P5099
  fallback2529:
    unless_null $P5094, vivi_6572530
    die "Contextual %*REG not found"
    box $P5100, "Contextual %*REG not found"
    set $P5094, $P5100
  vivi_6572530:
    set $P5093, $P5094
  fallback2528:
    set $P5092, $P5093["rep"]
    unless_null $P5092, fallback2531
    nqp_get_sc_object $P5101, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5092, $P5101
  fallback2531:
    $P5091."push_pirop"("inc", $P5092)
    find_lex $P5102, "$min"
    set $N5003, $P5102
    set $N5004, 1
    isgt $I5002, $N5003, $N5004
    unless $I5002 goto if658_end2533 
.annotate 'line', 3455
    find_lex $P5103, "$ops"
    find_dynamic_lex $P5105, "%*REG"
    unless_null $P5105, fallback2534
    nqp_get_sc_object $P5108, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5107, $P5108
    set $P5106, $P5107["%REG"]
    unless_null $P5106, fallback2535
    nqp_get_sc_object $P5110, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5109, $P5110
    new $P5111, 'Hash'
    set $P5109["%REG"], $P5111
    set $P5106, $P5111
  fallback2535:
    unless_null $P5106, vivi_6592536
    die "Contextual %*REG not found"
    box $P5112, "Contextual %*REG not found"
    set $P5106, $P5112
  vivi_6592536:
    set $P5105, $P5106
  fallback2534:
    set $P5104, $P5105["rep"]
    unless_null $P5104, fallback2537
    nqp_get_sc_object $P5113, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5104, $P5113
  fallback2537:
    find_lex $P5114, "$min"
    find_lex $P5115, "$looplabel"
    $P5116 = $P5103."push_pirop"("lt", $P5104, $P5114, $P5115)
  if658_end2533:
    find_lex $P5117, "$max"
    set $N5005, $P5117
    set $N5006, 1
    isgt $I5003, $N5005, $N5006
    unless $I5003 goto if660_end2539 
.annotate 'line', 3456
    find_lex $P5118, "$ops"
    find_dynamic_lex $P5120, "%*REG"
    unless_null $P5120, fallback2540
    nqp_get_sc_object $P5123, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5122, $P5123
    set $P5121, $P5122["%REG"]
    unless_null $P5121, fallback2541
    nqp_get_sc_object $P5125, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5124, $P5125
    new $P5126, 'Hash'
    set $P5124["%REG"], $P5126
    set $P5121, $P5126
  fallback2541:
    unless_null $P5121, vivi_6612542
    die "Contextual %*REG not found"
    box $P5127, "Contextual %*REG not found"
    set $P5121, $P5127
  vivi_6612542:
    set $P5120, $P5121
  fallback2540:
    set $P5119, $P5120["rep"]
    unless_null $P5119, fallback2543
    nqp_get_sc_object $P5128, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5119, $P5128
  fallback2543:
    find_lex $P5129, "$max"
    find_lex $P5130, "$donelabel"
    $P5131 = $P5118."push_pirop"("ge", $P5119, $P5129, $P5130)
  if660_end2539:
    find_lex $P5132, "$max"
    set $N5007, $P5132
    set $N5008, 1
    isne $I5004, $N5007, $N5008
    unless $I5004 goto if662_end2545 
.annotate 'line', 3457
    find_lex $P5134, "self"
    nqp_decontainerize $P5133, $P5134
    find_lex $P5135, "$ops"
    find_lex $P5136, "$looplabel"
    find_dynamic_lex $P5138, "%*REG"
    unless_null $P5138, fallback2546
    nqp_get_sc_object $P5141, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5140, $P5141
    set $P5139, $P5140["%REG"]
    unless_null $P5139, fallback2547
    nqp_get_sc_object $P5143, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5142, $P5143
    new $P5144, 'Hash'
    set $P5142["%REG"], $P5144
    set $P5139, $P5144
  fallback2547:
    unless_null $P5139, vivi_6632548
    die "Contextual %*REG not found"
    box $P5145, "Contextual %*REG not found"
    set $P5139, $P5145
  vivi_6632548:
    set $P5138, $P5139
  fallback2546:
    set $P5137, $P5138["pos"]
    unless_null $P5137, fallback2549
    nqp_get_sc_object $P5146, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5137, $P5146
  fallback2549:
    find_dynamic_lex $P5148, "%*REG"
    unless_null $P5148, fallback2550
    nqp_get_sc_object $P5151, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5150, $P5151
    set $P5149, $P5150["%REG"]
    unless_null $P5149, fallback2551
    nqp_get_sc_object $P5153, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5152, $P5153
    new $P5154, 'Hash'
    set $P5152["%REG"], $P5154
    set $P5149, $P5154
  fallback2551:
    unless_null $P5149, vivi_6642552
    die "Contextual %*REG not found"
    box $P5155, "Contextual %*REG not found"
    set $P5149, $P5155
  vivi_6642552:
    set $P5148, $P5149
  fallback2550:
    set $P5147, $P5148["rep"]
    unless_null $P5147, fallback2553
    nqp_get_sc_object $P5156, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5147, $P5156
  fallback2553:
    $P5157 = $P5133."regex_mark"($P5135, $P5136, $P5137, $P5147)
  if662_end2545:
.annotate 'line', 3458
    find_lex $P5158, "$ops"
    find_lex $P5159, "$donelabel"
    $P5160 = $P5158."push"($P5159)
    .return ($P5160) 
.end
.HLL "nqp"
.namespace []
.sub "scan" :subid("cuid_133_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3484
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$ops", $P101 
    .lex "$prefix", $P102 
    .lex "$looplabel", $P103 
    .lex "$scanlabel", $P104 
    .lex "$donelabel", $P105 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P105, $P5005
.annotate 'line', 3485
    nqp_decontainerize $P5006, _lex_param_0
    find_dynamic_lex $P5008, "%*REG"
    unless_null $P5008, fallback2603
    nqp_get_sc_object $P5011, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["%REG"]
    unless_null $P5009, fallback2604
    nqp_get_sc_object $P5013, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5012, $P5013
    new $P5014, 'Hash'
    set $P5012["%REG"], $P5014
    set $P5009, $P5014
  fallback2604:
    unless_null $P5009, vivi_6812605
    die "Contextual %*REG not found"
    box $P5015, "Contextual %*REG not found"
    set $P5009, $P5015
  vivi_6812605:
    set $P5008, $P5009
  fallback2603:
    set $P5007, $P5008["cur"]
    unless_null $P5007, fallback2606
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5007, $P5016
  fallback2606:
    $P5017 = $P5006."post_new"("Ops", $P5007 :named("result"))
    set $P101, $P5017
.annotate 'line', 3486
    nqp_decontainerize $P5018, _lex_param_0
    $P5019 = $P5018."unique"("rxscan")
    set $P102, $P5019
.annotate 'line', 3487
    nqp_decontainerize $P5020, _lex_param_0
    set $S5002, $P102
    concat $S5001, $S5002, "_loop"
    $P5021 = $P5020."post_new"("Label", $S5001 :named("name"))
    set $P103, $P5021
.annotate 'line', 3488
    nqp_decontainerize $P5022, _lex_param_0
    set $S5004, $P102
    concat $S5003, $S5004, "_scan"
    $P5023 = $P5022."post_new"("Label", $S5003 :named("name"))
    set $P104, $P5023
.annotate 'line', 3489
    nqp_decontainerize $P5024, _lex_param_0
    set $S5006, $P102
    concat $S5005, $S5006, "_done"
    $P5025 = $P5024."post_new"("Label", $S5005 :named("name"))
    set $P105, $P5025
.annotate 'line', 3490
    find_dynamic_lex $P5027, "%*REG"
    unless_null $P5027, fallback2607
    nqp_get_sc_object $P5030, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5029, $P5030
    set $P5028, $P5029["%REG"]
    unless_null $P5028, fallback2608
    nqp_get_sc_object $P5032, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5031, $P5032
    new $P5033, 'Hash'
    set $P5031["%REG"], $P5033
    set $P5028, $P5033
  fallback2608:
    unless_null $P5028, vivi_6822609
    die "Contextual %*REG not found"
    box $P5034, "Contextual %*REG not found"
    set $P5028, $P5034
  vivi_6822609:
    set $P5027, $P5028
  fallback2607:
    set $P5026, $P5027["curclass"]
    unless_null $P5026, fallback2610
    nqp_get_sc_object $P5035, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5026, $P5035
  fallback2610:
    $P101."push_pirop"("repr_get_attr_int", "$I11", "self", $P5026, "\"$!from\"")
.annotate 'line', 3491
    $P101."push_pirop"("ne", "$I11", -1, $P105)
.annotate 'line', 3492
    $P101."push_pirop"("goto", $P104)
.annotate 'line', 3493
    $P101."push"($P103)
.annotate 'line', 3494
    find_dynamic_lex $P5037, "%*REG"
    unless_null $P5037, fallback2611
    nqp_get_sc_object $P5040, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["%REG"]
    unless_null $P5038, fallback2612
    nqp_get_sc_object $P5042, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5041, $P5042
    new $P5043, 'Hash'
    set $P5041["%REG"], $P5043
    set $P5038, $P5043
  fallback2612:
    unless_null $P5038, vivi_6832613
    die "Contextual %*REG not found"
    box $P5044, "Contextual %*REG not found"
    set $P5038, $P5044
  vivi_6832613:
    set $P5037, $P5038
  fallback2611:
    set $P5036, $P5037["pos"]
    unless_null $P5036, fallback2614
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5036, $P5045
  fallback2614:
    $P101."push_pirop"("inc", $P5036)
.annotate 'line', 3495
    find_dynamic_lex $P5047, "%*REG"
    unless_null $P5047, fallback2615
    nqp_get_sc_object $P5050, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["%REG"]
    unless_null $P5048, fallback2616
    nqp_get_sc_object $P5052, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5051, $P5052
    new $P5053, 'Hash'
    set $P5051["%REG"], $P5053
    set $P5048, $P5053
  fallback2616:
    unless_null $P5048, vivi_6842617
    die "Contextual %*REG not found"
    box $P5054, "Contextual %*REG not found"
    set $P5048, $P5054
  vivi_6842617:
    set $P5047, $P5048
  fallback2615:
    set $P5046, $P5047["pos"]
    unless_null $P5046, fallback2618
    nqp_get_sc_object $P5055, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5046, $P5055
  fallback2618:
    find_dynamic_lex $P5057, "%*REG"
    unless_null $P5057, fallback2619
    nqp_get_sc_object $P5060, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5059, $P5060
    set $P5058, $P5059["%REG"]
    unless_null $P5058, fallback2620
    nqp_get_sc_object $P5062, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5061, $P5062
    new $P5063, 'Hash'
    set $P5061["%REG"], $P5063
    set $P5058, $P5063
  fallback2620:
    unless_null $P5058, vivi_6852621
    die "Contextual %*REG not found"
    box $P5064, "Contextual %*REG not found"
    set $P5058, $P5064
  vivi_6852621:
    set $P5057, $P5058
  fallback2619:
    set $P5056, $P5057["eos"]
    unless_null $P5056, fallback2622
    nqp_get_sc_object $P5065, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5056, $P5065
  fallback2622:
    find_dynamic_lex $P5067, "%*REG"
    unless_null $P5067, fallback2623
    nqp_get_sc_object $P5070, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5069, $P5070
    set $P5068, $P5069["%REG"]
    unless_null $P5068, fallback2624
    nqp_get_sc_object $P5072, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5071, $P5072
    new $P5073, 'Hash'
    set $P5071["%REG"], $P5073
    set $P5068, $P5073
  fallback2624:
    unless_null $P5068, vivi_6862625
    die "Contextual %*REG not found"
    box $P5074, "Contextual %*REG not found"
    set $P5068, $P5074
  vivi_6862625:
    set $P5067, $P5068
  fallback2623:
    set $P5066, $P5067["fail"]
    unless_null $P5066, fallback2626
    nqp_get_sc_object $P5075, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5066, $P5075
  fallback2626:
    $P101."push_pirop"("gt", $P5046, $P5056, $P5066)
.annotate 'line', 3496
    find_dynamic_lex $P5077, "%*REG"
    unless_null $P5077, fallback2627
    nqp_get_sc_object $P5080, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5079, $P5080
    set $P5078, $P5079["%REG"]
    unless_null $P5078, fallback2628
    nqp_get_sc_object $P5082, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5081, $P5082
    new $P5083, 'Hash'
    set $P5081["%REG"], $P5083
    set $P5078, $P5083
  fallback2628:
    unless_null $P5078, vivi_6872629
    die "Contextual %*REG not found"
    box $P5084, "Contextual %*REG not found"
    set $P5078, $P5084
  vivi_6872629:
    set $P5077, $P5078
  fallback2627:
    set $P5076, $P5077["cur"]
    unless_null $P5076, fallback2630
    nqp_get_sc_object $P5085, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5076, $P5085
  fallback2630:
    find_dynamic_lex $P5087, "%*REG"
    unless_null $P5087, fallback2631
    nqp_get_sc_object $P5090, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5089, $P5090
    set $P5088, $P5089["%REG"]
    unless_null $P5088, fallback2632
    nqp_get_sc_object $P5092, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5091, $P5092
    new $P5093, 'Hash'
    set $P5091["%REG"], $P5093
    set $P5088, $P5093
  fallback2632:
    unless_null $P5088, vivi_6882633
    die "Contextual %*REG not found"
    box $P5094, "Contextual %*REG not found"
    set $P5088, $P5094
  vivi_6882633:
    set $P5087, $P5088
  fallback2631:
    set $P5086, $P5087["curclass"]
    unless_null $P5086, fallback2634
    nqp_get_sc_object $P5095, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5086, $P5095
  fallback2634:
    find_dynamic_lex $P5097, "%*REG"
    unless_null $P5097, fallback2635
    nqp_get_sc_object $P5100, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5099, $P5100
    set $P5098, $P5099["%REG"]
    unless_null $P5098, fallback2636
    nqp_get_sc_object $P5102, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5101, $P5102
    new $P5103, 'Hash'
    set $P5101["%REG"], $P5103
    set $P5098, $P5103
  fallback2636:
    unless_null $P5098, vivi_6892637
    die "Contextual %*REG not found"
    box $P5104, "Contextual %*REG not found"
    set $P5098, $P5104
  vivi_6892637:
    set $P5097, $P5098
  fallback2635:
    set $P5096, $P5097["pos"]
    unless_null $P5096, fallback2638
    nqp_get_sc_object $P5105, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5096, $P5105
  fallback2638:
    $P101."push_pirop"("repr_bind_attr_int", $P5076, $P5086, "\"$!from\"", $P5096)
.annotate 'line', 3497
    $P101."push"($P104)
.annotate 'line', 3498
    nqp_decontainerize $P5106, _lex_param_0
    find_dynamic_lex $P5108, "%*REG"
    unless_null $P5108, fallback2639
    nqp_get_sc_object $P5111, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5110, $P5111
    set $P5109, $P5110["%REG"]
    unless_null $P5109, fallback2640
    nqp_get_sc_object $P5113, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5112, $P5113
    new $P5114, 'Hash'
    set $P5112["%REG"], $P5114
    set $P5109, $P5114
  fallback2640:
    unless_null $P5109, vivi_6902641
    die "Contextual %*REG not found"
    box $P5115, "Contextual %*REG not found"
    set $P5109, $P5115
  vivi_6902641:
    set $P5108, $P5109
  fallback2639:
    set $P5107, $P5108["pos"]
    unless_null $P5107, fallback2642
    nqp_get_sc_object $P5116, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5107, $P5116
  fallback2642:
    $P5106."regex_mark"($P101, $P103, $P5107, 0)
.annotate 'line', 3499
    $P101."push"($P105)
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "subcapture" :subid("cuid_134_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3503
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$ops", $P101 
    .lex "$prefix", $P102 
    .lex "$donelabel", $P103 
    .lex "$faillabel", $P104 
    .lex "$name", $P105 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P105, $P5005
.annotate 'line', 3504
    nqp_decontainerize $P5006, _lex_param_0
    find_dynamic_lex $P5008, "%*REG"
    unless_null $P5008, fallback2643
    nqp_get_sc_object $P5011, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["%REG"]
    unless_null $P5009, fallback2644
    nqp_get_sc_object $P5013, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5012, $P5013
    new $P5014, 'Hash'
    set $P5012["%REG"], $P5014
    set $P5009, $P5014
  fallback2644:
    unless_null $P5009, vivi_6912645
    die "Contextual %*REG not found"
    box $P5015, "Contextual %*REG not found"
    set $P5009, $P5015
  vivi_6912645:
    set $P5008, $P5009
  fallback2643:
    set $P5007, $P5008["cur"]
    unless_null $P5007, fallback2646
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5007, $P5016
  fallback2646:
    $P5017 = $P5006."post_new"("Ops", $P5007 :named("result"))
    set $P101, $P5017
.annotate 'line', 3505
    nqp_decontainerize $P5018, _lex_param_0
    $P5019 = $P5018."unique"("rxcap")
    set $P102, $P5019
.annotate 'line', 3506
    nqp_decontainerize $P5020, _lex_param_0
    set $S5002, $P102
    concat $S5001, $S5002, "_done"
    $P5021 = $P5020."post_new"("Label", $S5001 :named("name"))
    set $P103, $P5021
.annotate 'line', 3507
    nqp_decontainerize $P5022, _lex_param_0
    set $S5004, $P102
    concat $S5003, $S5004, "_fail"
    $P5023 = $P5022."post_new"("Label", $S5003 :named("name"))
    set $P104, $P5023
.annotate 'line', 3508
    nqp_decontainerize $P5024, _lex_param_0
    $P5025 = _lex_param_1."name"()
    $P5026 = $P5024."escape"($P5025)
    set $P105, $P5026
.annotate 'line', 3509
    nqp_decontainerize $P5027, _lex_param_0
    find_dynamic_lex $P5029, "%*REG"
    unless_null $P5029, fallback2647
    nqp_get_sc_object $P5032, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["%REG"]
    unless_null $P5030, fallback2648
    nqp_get_sc_object $P5034, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5033, $P5034
    new $P5035, 'Hash'
    set $P5033["%REG"], $P5035
    set $P5030, $P5035
  fallback2648:
    unless_null $P5030, vivi_6922649
    die "Contextual %*REG not found"
    box $P5036, "Contextual %*REG not found"
    set $P5030, $P5036
  vivi_6922649:
    set $P5029, $P5030
  fallback2647:
    set $P5028, $P5029["pos"]
    unless_null $P5028, fallback2650
    nqp_get_sc_object $P5037, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5028, $P5037
  fallback2650:
    $P5027."regex_mark"($P101, $P104, $P5028, 0)
.annotate 'line', 3510
    nqp_decontainerize $P5038, _lex_param_0
    set $P5039, _lex_param_1[0]
    unless_null $P5039, fallback2651
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5039, $P5040
  fallback2651:
    $P5041 = $P5038."regex_post"($P5039)
    $P101."push"($P5041)
.annotate 'line', 3511
    nqp_decontainerize $P5042, _lex_param_0
    $P5042."regex_peek"($P101, $P104, "$I11")
.annotate 'line', 3512
    find_dynamic_lex $P5044, "%*REG"
    unless_null $P5044, fallback2652
    nqp_get_sc_object $P5047, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5046, $P5047
    set $P5045, $P5046["%REG"]
    unless_null $P5045, fallback2653
    nqp_get_sc_object $P5049, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5048, $P5049
    new $P5050, 'Hash'
    set $P5048["%REG"], $P5050
    set $P5045, $P5050
  fallback2653:
    unless_null $P5045, vivi_6932654
    die "Contextual %*REG not found"
    box $P5051, "Contextual %*REG not found"
    set $P5045, $P5051
  vivi_6932654:
    set $P5044, $P5045
  fallback2652:
    set $P5043, $P5044["cur"]
    unless_null $P5043, fallback2655
    nqp_get_sc_object $P5052, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5043, $P5052
  fallback2655:
    find_dynamic_lex $P5054, "%*REG"
    unless_null $P5054, fallback2656
    nqp_get_sc_object $P5057, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["%REG"]
    unless_null $P5055, fallback2657
    nqp_get_sc_object $P5059, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5058, $P5059
    new $P5060, 'Hash'
    set $P5058["%REG"], $P5060
    set $P5055, $P5060
  fallback2657:
    unless_null $P5055, vivi_6942658
    die "Contextual %*REG not found"
    box $P5061, "Contextual %*REG not found"
    set $P5055, $P5061
  vivi_6942658:
    set $P5054, $P5055
  fallback2656:
    set $P5053, $P5054["curclass"]
    unless_null $P5053, fallback2659
    nqp_get_sc_object $P5062, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5053, $P5062
  fallback2659:
    find_dynamic_lex $P5064, "%*REG"
    unless_null $P5064, fallback2660
    nqp_get_sc_object $P5067, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5066, $P5067
    set $P5065, $P5066["%REG"]
    unless_null $P5065, fallback2661
    nqp_get_sc_object $P5069, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5068, $P5069
    new $P5070, 'Hash'
    set $P5068["%REG"], $P5070
    set $P5065, $P5070
  fallback2661:
    unless_null $P5065, vivi_6952662
    die "Contextual %*REG not found"
    box $P5071, "Contextual %*REG not found"
    set $P5065, $P5071
  vivi_6952662:
    set $P5064, $P5065
  fallback2660:
    set $P5063, $P5064["pos"]
    unless_null $P5063, fallback2663
    nqp_get_sc_object $P5072, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5063, $P5072
  fallback2663:
    $P101."push_pirop"("repr_bind_attr_int", $P5043, $P5053, "\"$!pos\"", $P5063)
.annotate 'line', 3513
    find_dynamic_lex $P5074, "%*REG"
    unless_null $P5074, fallback2664
    nqp_get_sc_object $P5077, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5076, $P5077
    set $P5075, $P5076["%REG"]
    unless_null $P5075, fallback2665
    nqp_get_sc_object $P5079, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5078, $P5079
    new $P5080, 'Hash'
    set $P5078["%REG"], $P5080
    set $P5075, $P5080
  fallback2665:
    unless_null $P5075, vivi_6962666
    die "Contextual %*REG not found"
    box $P5081, "Contextual %*REG not found"
    set $P5075, $P5081
  vivi_6962666:
    set $P5074, $P5075
  fallback2664:
    set $P5073, $P5074["cur"]
    unless_null $P5073, fallback2667
    nqp_get_sc_object $P5082, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5073, $P5082
  fallback2667:
    $P101."push_pirop"("callmethod", "\"!cursor_start_subcapture\"", $P5073, "$I11", "$P11" :named("result"))
.annotate 'line', 3514
    find_dynamic_lex $P5084, "%*REG"
    unless_null $P5084, fallback2668
    nqp_get_sc_object $P5087, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5086, $P5087
    set $P5085, $P5086["%REG"]
    unless_null $P5085, fallback2669
    nqp_get_sc_object $P5089, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5088, $P5089
    new $P5090, 'Hash'
    set $P5088["%REG"], $P5090
    set $P5085, $P5090
  fallback2669:
    unless_null $P5085, vivi_6972670
    die "Contextual %*REG not found"
    box $P5091, "Contextual %*REG not found"
    set $P5085, $P5091
  vivi_6972670:
    set $P5084, $P5085
  fallback2668:
    set $P5083, $P5084["pos"]
    unless_null $P5083, fallback2671
    nqp_get_sc_object $P5092, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5083, $P5092
  fallback2671:
    $P101."push_pirop"("callmethod", "\"!cursor_pass\"", "$P11", $P5083)
.annotate 'line', 3515
    find_dynamic_lex $P5094, "%*REG"
    unless_null $P5094, fallback2672
    nqp_get_sc_object $P5097, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5096, $P5097
    set $P5095, $P5096["%REG"]
    unless_null $P5095, fallback2673
    nqp_get_sc_object $P5099, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5098, $P5099
    new $P5100, 'Hash'
    set $P5098["%REG"], $P5100
    set $P5095, $P5100
  fallback2673:
    unless_null $P5095, vivi_6982674
    die "Contextual %*REG not found"
    box $P5101, "Contextual %*REG not found"
    set $P5095, $P5101
  vivi_6982674:
    set $P5094, $P5095
  fallback2672:
    set $P5093, $P5094["cur"]
    unless_null $P5093, fallback2675
    nqp_get_sc_object $P5102, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5093, $P5102
  fallback2675:
    find_dynamic_lex $P5104, "%*REG"
    unless_null $P5104, fallback2676
    nqp_get_sc_object $P5107, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5106, $P5107
    set $P5105, $P5106["%REG"]
    unless_null $P5105, fallback2677
    nqp_get_sc_object $P5109, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5108, $P5109
    new $P5110, 'Hash'
    set $P5108["%REG"], $P5110
    set $P5105, $P5110
  fallback2677:
    unless_null $P5105, vivi_6992678
    die "Contextual %*REG not found"
    box $P5111, "Contextual %*REG not found"
    set $P5105, $P5111
  vivi_6992678:
    set $P5104, $P5105
  fallback2676:
    set $P5103, $P5104["cstack"]
    unless_null $P5103, fallback2679
    nqp_get_sc_object $P5112, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5103, $P5112
  fallback2679:
    $P101."push_pirop"("callmethod", "\"!cursor_capture\"", $P5093, "$P11", $P105, $P5103 :named("result"))
.annotate 'line', 3517
    $P101."push_pirop"("goto", $P103)
.annotate 'line', 3518
    $P101."push"($P104)
.annotate 'line', 3519
    find_dynamic_lex $P5114, "%*REG"
    unless_null $P5114, fallback2680
    nqp_get_sc_object $P5117, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5116, $P5117
    set $P5115, $P5116["%REG"]
    unless_null $P5115, fallback2681
    nqp_get_sc_object $P5119, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5118, $P5119
    new $P5120, 'Hash'
    set $P5118["%REG"], $P5120
    set $P5115, $P5120
  fallback2681:
    unless_null $P5115, vivi_7002682
    die "Contextual %*REG not found"
    box $P5121, "Contextual %*REG not found"
    set $P5115, $P5121
  vivi_7002682:
    set $P5114, $P5115
  fallback2680:
    set $P5113, $P5114["fail"]
    unless_null $P5113, fallback2683
    nqp_get_sc_object $P5122, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5113, $P5122
  fallback2683:
    $P101."push_pirop"("goto", $P5113)
.annotate 'line', 3520
    $P101."push"($P103)
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "subrule" :subid("cuid_135_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3524
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5163 = 'cuid_336_1359572548.257' 
    capture_lex $P5163 
    .lex "$ops", $P101 
    .lex "$name", $P102 
    .lex "$subtype", $P103 
    .lex "$cpn", $P104 
    .lex "@pargs", $P105 
    .lex "@nargs", $P106 
    .lex "$subpost", $P107 
    .lex "$testop", $P108 
    .lex "$captured", $P109 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P104, $P5004
    new $P5005, 'ResizablePMCArray'
    set $P105, $P5005
    new $P5006, 'ResizablePMCArray'
    set $P106, $P5006
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P107, $P5007
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P108, $P5008
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P109, $P5009
.annotate 'line', 3525
    nqp_decontainerize $P5010, _lex_param_0
    find_dynamic_lex $P5012, "%*REG"
    unless_null $P5012, fallback2684
    nqp_get_sc_object $P5015, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["%REG"]
    unless_null $P5013, fallback2685
    nqp_get_sc_object $P5017, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5016, $P5017
    new $P5018, 'Hash'
    set $P5016["%REG"], $P5018
    set $P5013, $P5018
  fallback2685:
    unless_null $P5013, vivi_7012686
    die "Contextual %*REG not found"
    box $P5019, "Contextual %*REG not found"
    set $P5013, $P5019
  vivi_7012686:
    set $P5012, $P5013
  fallback2684:
    set $P5011, $P5012["cur"]
    unless_null $P5011, fallback2687
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5011, $P5020
  fallback2687:
    $P5021 = $P5010."post_new"("Ops", $P5011 :named("result"))
    set $P101, $P5021
.annotate 'line', 3526
    $P5022 = _lex_param_1."name"()
    defined $I5001, $P5022
    unless $I5001 goto if702_else2688 
    nqp_decontainerize $P5023, _lex_param_0
    $P5024 = _lex_param_1."name"()
    $P5025 = $P5023."escape"($P5024)
    set $P5026, $P5025
    goto if702_end2689
  if702_else2688:
    box $P5027, ""
    set $P5026, $P5027
  if702_end2689:
    set $P102, $P5026
.annotate 'line', 3527
    $P5028 = _lex_param_1."subtype"()
    set $P103, $P5028
    set $P5029, _lex_param_1[0]
    unless_null $P5029, fallback2692
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5029, $P5030
  fallback2692:
    nqp_get_sc_object $P5034, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["Node"]
    unless_null $P5031, fallback2693
    nqp_get_sc_object $P5035, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5031, $P5035
  fallback2693:
    type_check $I5002, $P5029, $P5031
    unless $I5002 goto if703_else2690 
.annotate 'line', 3529
    nqp_decontainerize $P5036, _lex_param_0
    set $P5037, _lex_param_1[0]
    unless_null $P5037, fallback2694
    nqp_get_sc_object $P5038, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5037, $P5038
  fallback2694:
    $P5039 = $P5036."children"($P5037)
    set $P5044, $P5039
    goto if703_end2691
  if703_else2690:
.annotate 'line', 3530
    nqp_decontainerize $P5040, _lex_param_0
    set $P5041, _lex_param_1[0]
    unless_null $P5041, fallback2695
    nqp_get_sc_object $P5042, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5041, $P5042
  fallback2695:
    $P5043 = $P5040."post_children"($P5041)
    set $P5044, $P5043
  if703_end2691:
    set $P104, $P5044
    set $P5046, $P104[1]
    unless_null $P5046, fallback2697
    nqp_get_sc_object $P5047, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5046, $P5047
  fallback2697:
    set $P5045, $P5046
    defined $I5003, $P5045
    if $I5003, defor2696
    new $P5048, 'ResizablePMCArray'
    set $P5045, $P5048
  defor2696:
    set $P105, $P5045
    set $P5050, $P104[2]
    unless_null $P5050, fallback2699
    nqp_get_sc_object $P5051, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5050, $P5051
  fallback2699:
    set $P5049, $P5050
    defined $I5004, $P5049
    if $I5004, defor2698
    new $P5052, 'ResizablePMCArray'
    set $P5049, $P5052
  defor2698:
    set $P106, $P5049
    shift $P5053, $P105
    set $P107, $P5053
.annotate 'line', 3534
    $P5054 = _lex_param_1."negate"()
    unless $P5054 goto if704_else2700 
    set $S5001, "ge"
    goto if704_end2701
  if704_else2700:
    set $S5001, "lt"
  if704_end2701:
    box $P5055, $S5001
    set $P108, $P5055
    box $P5056, 0
    set $P109, $P5056
.annotate 'line', 3536
    set $P5057, $P104[0]
    unless_null $P5057, fallback2702
    nqp_get_sc_object $P5058, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5057, $P5058
  fallback2702:
    $P101."push"($P5057)
.annotate 'line', 3537
    find_dynamic_lex $P5060, "%*REG"
    unless_null $P5060, fallback2703
    nqp_get_sc_object $P5063, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5062, $P5063
    set $P5061, $P5062["%REG"]
    unless_null $P5061, fallback2704
    nqp_get_sc_object $P5065, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5064, $P5065
    new $P5066, 'Hash'
    set $P5064["%REG"], $P5066
    set $P5061, $P5066
  fallback2704:
    unless_null $P5061, vivi_7052705
    die "Contextual %*REG not found"
    box $P5067, "Contextual %*REG not found"
    set $P5061, $P5067
  vivi_7052705:
    set $P5060, $P5061
  fallback2703:
    set $P5059, $P5060["cur"]
    unless_null $P5059, fallback2706
    nqp_get_sc_object $P5068, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5059, $P5068
  fallback2706:
    find_dynamic_lex $P5070, "%*REG"
    unless_null $P5070, fallback2707
    nqp_get_sc_object $P5073, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5072, $P5073
    set $P5071, $P5072["%REG"]
    unless_null $P5071, fallback2708
    nqp_get_sc_object $P5075, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5074, $P5075
    new $P5076, 'Hash'
    set $P5074["%REG"], $P5076
    set $P5071, $P5076
  fallback2708:
    unless_null $P5071, vivi_7062709
    die "Contextual %*REG not found"
    box $P5077, "Contextual %*REG not found"
    set $P5071, $P5077
  vivi_7062709:
    set $P5070, $P5071
  fallback2707:
    set $P5069, $P5070["curclass"]
    unless_null $P5069, fallback2710
    nqp_get_sc_object $P5078, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5069, $P5078
  fallback2710:
    find_dynamic_lex $P5080, "%*REG"
    unless_null $P5080, fallback2711
    nqp_get_sc_object $P5083, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5082, $P5083
    set $P5081, $P5082["%REG"]
    unless_null $P5081, fallback2712
    nqp_get_sc_object $P5085, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5084, $P5085
    new $P5086, 'Hash'
    set $P5084["%REG"], $P5086
    set $P5081, $P5086
  fallback2712:
    unless_null $P5081, vivi_7072713
    die "Contextual %*REG not found"
    box $P5087, "Contextual %*REG not found"
    set $P5081, $P5087
  vivi_7072713:
    set $P5080, $P5081
  fallback2711:
    set $P5079, $P5080["pos"]
    unless_null $P5079, fallback2714
    nqp_get_sc_object $P5088, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5079, $P5088
  fallback2714:
    $P101."push_pirop"("repr_bind_attr_int", $P5059, $P5069, "\"$!pos\"", $P5079)
.annotate 'line', 3538
    find_dynamic_lex $P5090, "%*REG"
    unless_null $P5090, fallback2715
    nqp_get_sc_object $P5093, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5092, $P5093
    set $P5091, $P5092["%REG"]
    unless_null $P5091, fallback2716
    nqp_get_sc_object $P5095, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5094, $P5095
    new $P5096, 'Hash'
    set $P5094["%REG"], $P5096
    set $P5091, $P5096
  fallback2716:
    unless_null $P5091, vivi_7082717
    die "Contextual %*REG not found"
    box $P5097, "Contextual %*REG not found"
    set $P5091, $P5097
  vivi_7082717:
    set $P5090, $P5091
  fallback2715:
    set $P5089, $P5090["cur"]
    unless_null $P5089, fallback2718
    nqp_get_sc_object $P5098, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5089, $P5098
  fallback2718:
    $P101."push_pirop"("callmethod", $P107, $P5089, $P105 :flat, $P106 :flat, "$P11" :named("result"))
.annotate 'line', 3539
    find_dynamic_lex $P5100, "%*REG"
    unless_null $P5100, fallback2719
    nqp_get_sc_object $P5103, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5102, $P5103
    set $P5101, $P5102["%REG"]
    unless_null $P5101, fallback2720
    nqp_get_sc_object $P5105, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5104, $P5105
    new $P5106, 'Hash'
    set $P5104["%REG"], $P5106
    set $P5101, $P5106
  fallback2720:
    unless_null $P5101, vivi_7092721
    die "Contextual %*REG not found"
    box $P5107, "Contextual %*REG not found"
    set $P5101, $P5107
  vivi_7092721:
    set $P5100, $P5101
  fallback2719:
    set $P5099, $P5100["curclass"]
    unless_null $P5099, fallback2722
    nqp_get_sc_object $P5108, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5099, $P5108
  fallback2722:
    $P101."push_pirop"("repr_get_attr_int", "$I11", "$P11", $P5099, "\"$!pos\"")
.annotate 'line', 3540
    find_dynamic_lex $P5110, "%*REG"
    unless_null $P5110, fallback2723
    nqp_get_sc_object $P5113, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5112, $P5113
    set $P5111, $P5112["%REG"]
    unless_null $P5111, fallback2724
    nqp_get_sc_object $P5115, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5114, $P5115
    new $P5116, 'Hash'
    set $P5114["%REG"], $P5116
    set $P5111, $P5116
  fallback2724:
    unless_null $P5111, vivi_7102725
    die "Contextual %*REG not found"
    box $P5117, "Contextual %*REG not found"
    set $P5111, $P5117
  vivi_7102725:
    set $P5110, $P5111
  fallback2723:
    set $P5109, $P5110["fail"]
    unless_null $P5109, fallback2726
    nqp_get_sc_object $P5118, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5109, $P5118
  fallback2726:
    $P101."push_pirop"($P108, "$I11", "0", $P5109)
    set $S5002, $P103
    isne $I5005, $S5002, "zerowidth"
    unless $I5005 goto if711_end2728 
    .const 'Sub' $P5119 = 'cuid_336_1359572548.257' 
    capture_lex $P5119
    $P5120 = $P5119()
  if711_end2728:
    isfalse $I5006, $P109
    set $I5008, $I5006
    unless $I5006 goto if728_end2786 
    set $S5003, $P103
    iseq $I5007, $S5003, "capture"
    set $I5008, $I5007
  if728_end2786:
    unless $I5008 goto if727_end2784 
.annotate 'line', 3575
    find_dynamic_lex $P5122, "%*REG"
    unless_null $P5122, fallback2787
    nqp_get_sc_object $P5125, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5124, $P5125
    set $P5123, $P5124["%REG"]
    unless_null $P5123, fallback2788
    nqp_get_sc_object $P5127, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5126, $P5127
    new $P5128, 'Hash'
    set $P5126["%REG"], $P5128
    set $P5123, $P5128
  fallback2788:
    unless_null $P5123, vivi_7292789
    die "Contextual %*REG not found"
    box $P5129, "Contextual %*REG not found"
    set $P5123, $P5129
  vivi_7292789:
    set $P5122, $P5123
  fallback2787:
    set $P5121, $P5122["cur"]
    unless_null $P5121, fallback2790
    nqp_get_sc_object $P5130, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5121, $P5130
  fallback2790:
    find_dynamic_lex $P5132, "%*REG"
    unless_null $P5132, fallback2791
    nqp_get_sc_object $P5135, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5134, $P5135
    set $P5133, $P5134["%REG"]
    unless_null $P5133, fallback2792
    nqp_get_sc_object $P5137, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5136, $P5137
    new $P5138, 'Hash'
    set $P5136["%REG"], $P5138
    set $P5133, $P5138
  fallback2792:
    unless_null $P5133, vivi_7302793
    die "Contextual %*REG not found"
    box $P5139, "Contextual %*REG not found"
    set $P5133, $P5139
  vivi_7302793:
    set $P5132, $P5133
  fallback2791:
    set $P5131, $P5132["cstack"]
    unless_null $P5131, fallback2794
    nqp_get_sc_object $P5140, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5131, $P5140
  fallback2794:
    $P5141 = $P101."push_pirop"("callmethod", "\"!cursor_capture\"", $P5121, "$P11", $P102, $P5131 :named("result"))
  if727_end2784:
    set $S5004, $P103
    iseq $I5009, $S5004, "zerowidth"
    if $I5009 goto unless731_end2796 
.annotate 'line', 3578
    find_dynamic_lex $P5143, "%*REG"
    unless_null $P5143, fallback2797
    nqp_get_sc_object $P5146, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5145, $P5146
    set $P5144, $P5145["%REG"]
    unless_null $P5144, fallback2798
    nqp_get_sc_object $P5148, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5147, $P5148
    new $P5149, 'Hash'
    set $P5147["%REG"], $P5149
    set $P5144, $P5149
  fallback2798:
    unless_null $P5144, vivi_7322799
    die "Contextual %*REG not found"
    box $P5150, "Contextual %*REG not found"
    set $P5144, $P5150
  vivi_7322799:
    set $P5143, $P5144
  fallback2797:
    set $P5142, $P5143["pos"]
    unless_null $P5142, fallback2800
    nqp_get_sc_object $P5151, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5142, $P5151
  fallback2800:
    find_dynamic_lex $P5153, "%*REG"
    unless_null $P5153, fallback2801
    nqp_get_sc_object $P5156, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5155, $P5156
    set $P5154, $P5155["%REG"]
    unless_null $P5154, fallback2802
    nqp_get_sc_object $P5158, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5157, $P5158
    new $P5159, 'Hash'
    set $P5157["%REG"], $P5159
    set $P5154, $P5159
  fallback2802:
    unless_null $P5154, vivi_7332803
    die "Contextual %*REG not found"
    box $P5160, "Contextual %*REG not found"
    set $P5154, $P5160
  vivi_7332803:
    set $P5153, $P5154
  fallback2801:
    set $P5152, $P5153["curclass"]
    unless_null $P5152, fallback2804
    nqp_get_sc_object $P5161, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5152, $P5161
  fallback2804:
    $P5162 = $P101."push_pirop"("repr_get_attr_int", $P5142, "$P11", $P5152, "\"$!pos\"")
  unless731_end2796:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_336_1359572548.257") :anon :lex :outer("cuid_135_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3541
    .const 'Sub' $P5022 = 'cuid_335_1359572548.257' 
    capture_lex $P5022 
    .lex "$rxname", $P101 
    .lex "$passlabel", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 3542
    find_lex $P5004, "self"
    nqp_decontainerize $P5003, $P5004
    $P5005 = $P5003."unique"("rxsubrule")
    set $P101, $P5005
.annotate 'line', 3543
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    set $S5002, $P101
    concat $S5001, $S5002, "_pass"
    $P5008 = $P5006."post_new"("Label", $S5001 :named("name"))
    set $P102, $P5008
.annotate 'line', 3544
    find_lex $P5009, "$node"
    $P5010 = $P5009."backtrack"()
    set $S5003, $P5010
    iseq $I5001, $S5003, "r"
    unless $I5001 goto if712_else2729 
    find_lex $P5011, "$subtype"
    set $S5004, $P5011
    iseq $I5002, $S5004, "method"
    box $P5018, $I5002
    set $P5017, $P5018
    if $I5002 goto unless713_end2732 
.annotate 'line', 3545
.annotate 'line', 3546
    find_lex $P5013, "self"
    nqp_decontainerize $P5012, $P5013
    find_lex $P5014, "$ops"
    $P5012."regex_mark"($P5014, $P102, -1, 0)
.annotate 'line', 3547
    find_lex $P5015, "$ops"
    $P5016 = $P5015."push"($P102)
    set $P5017, $P5016
  unless713_end2732:
    set $P5021, $P5017
    goto if712_end2730
  if712_else2729:
    .const 'Sub' $P5019 = 'cuid_335_1359572548.257' 
    capture_lex $P5019
    $P5020 = $P5019()
    set $P5021, $P5020
  if712_end2730:
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_335_1359572548.257") :anon :lex :outer("cuid_336_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3550
    .lex "$backlabel", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
.annotate 'line', 3551
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    find_lex $P5004, "$rxname"
    set $S5002, $P5004
    concat $S5001, $S5002, "_back"
    $P5005 = $P5002."post_new"("Label", $S5001 :named("name"))
    set $P101, $P5005
.annotate 'line', 3552
    find_lex $P5006, "$ops"
    find_lex $P5007, "$passlabel"
    $P5006."push_pirop"("goto", $P5007)
.annotate 'line', 3553
    find_lex $P5008, "$ops"
    $P5008."push"($P101)
.annotate 'line', 3554
    find_lex $P5009, "$ops"
    $P5009."push_pirop"("callmethod", "\"!cursor_next\"", "$P11", "$P11" :named("result"))
.annotate 'line', 3555
    find_lex $P5010, "$ops"
    find_dynamic_lex $P5012, "%*REG"
    unless_null $P5012, fallback2733
    nqp_get_sc_object $P5015, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["%REG"]
    unless_null $P5013, fallback2734
    nqp_get_sc_object $P5017, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5016, $P5017
    new $P5018, 'Hash'
    set $P5016["%REG"], $P5018
    set $P5013, $P5018
  fallback2734:
    unless_null $P5013, vivi_7142735
    die "Contextual %*REG not found"
    box $P5019, "Contextual %*REG not found"
    set $P5013, $P5019
  vivi_7142735:
    set $P5012, $P5013
  fallback2733:
    set $P5011, $P5012["curclass"]
    unless_null $P5011, fallback2736
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5011, $P5020
  fallback2736:
    $P5010."push_pirop"("repr_get_attr_int", "$I11", "$P11", $P5011, "\"$!pos\"")
.annotate 'line', 3556
    find_lex $P5021, "$ops"
    find_lex $P5022, "$testop"
    find_dynamic_lex $P5024, "%*REG"
    unless_null $P5024, fallback2737
    nqp_get_sc_object $P5027, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5026, $P5027
    set $P5025, $P5026["%REG"]
    unless_null $P5025, fallback2738
    nqp_get_sc_object $P5029, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5028, $P5029
    new $P5030, 'Hash'
    set $P5028["%REG"], $P5030
    set $P5025, $P5030
  fallback2738:
    unless_null $P5025, vivi_7152739
    die "Contextual %*REG not found"
    box $P5031, "Contextual %*REG not found"
    set $P5025, $P5031
  vivi_7152739:
    set $P5024, $P5025
  fallback2737:
    set $P5023, $P5024["fail"]
    unless_null $P5023, fallback2740
    nqp_get_sc_object $P5032, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5023, $P5032
  fallback2740:
    $P5021."push_pirop"($P5022, "$I11", "0", $P5023)
.annotate 'line', 3557
    find_lex $P5033, "$ops"
    find_lex $P5034, "$passlabel"
    $P5033."push"($P5034)
    find_lex $P5035, "$subtype"
    set $S5003, $P5035
    iseq $I5001, $S5003, "capture"
    unless $I5001 goto if716_else2741 
.annotate 'line', 3558
.annotate 'line', 3559
    find_lex $P5036, "$ops"
    find_dynamic_lex $P5038, "%*REG"
    unless_null $P5038, fallback2743
    nqp_get_sc_object $P5041, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5040, $P5041
    set $P5039, $P5040["%REG"]
    unless_null $P5039, fallback2744
    nqp_get_sc_object $P5043, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5042, $P5043
    new $P5044, 'Hash'
    set $P5042["%REG"], $P5044
    set $P5039, $P5044
  fallback2744:
    unless_null $P5039, vivi_7172745
    die "Contextual %*REG not found"
    box $P5045, "Contextual %*REG not found"
    set $P5039, $P5045
  vivi_7172745:
    set $P5038, $P5039
  fallback2743:
    set $P5037, $P5038["cur"]
    unless_null $P5037, fallback2746
    nqp_get_sc_object $P5046, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5037, $P5046
  fallback2746:
    find_lex $P5047, "$name"
    find_dynamic_lex $P5049, "%*REG"
    unless_null $P5049, fallback2747
    nqp_get_sc_object $P5052, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5051, $P5052
    set $P5050, $P5051["%REG"]
    unless_null $P5050, fallback2748
    nqp_get_sc_object $P5054, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5053, $P5054
    new $P5055, 'Hash'
    set $P5053["%REG"], $P5055
    set $P5050, $P5055
  fallback2748:
    unless_null $P5050, vivi_7182749
    die "Contextual %*REG not found"
    box $P5056, "Contextual %*REG not found"
    set $P5050, $P5056
  vivi_7182749:
    set $P5049, $P5050
  fallback2747:
    set $P5048, $P5049["cstack"]
    unless_null $P5048, fallback2750
    nqp_get_sc_object $P5057, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5048, $P5057
  fallback2750:
    $P5036."push_pirop"("callmethod", "\"!cursor_capture\"", $P5037, "$P11", $P5047, $P5048 :named("result"))
    box $P5058, 1
    store_lex "$captured", $P5058
    goto if716_end2742
  if716_else2741:
.annotate 'line', 3563
.annotate 'line', 3564
    find_lex $P5059, "$ops"
    find_dynamic_lex $P5061, "%*REG"
    unless_null $P5061, fallback2751
    nqp_get_sc_object $P5064, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5063, $P5064
    set $P5062, $P5063["%REG"]
    unless_null $P5062, fallback2752
    nqp_get_sc_object $P5066, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5065, $P5066
    new $P5067, 'Hash'
    set $P5065["%REG"], $P5067
    set $P5062, $P5067
  fallback2752:
    unless_null $P5062, vivi_7192753
    die "Contextual %*REG not found"
    box $P5068, "Contextual %*REG not found"
    set $P5062, $P5068
  vivi_7192753:
    set $P5061, $P5062
  fallback2751:
    set $P5060, $P5061["cur"]
    unless_null $P5060, fallback2754
    nqp_get_sc_object $P5069, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5060, $P5069
  fallback2754:
    find_dynamic_lex $P5071, "%*REG"
    unless_null $P5071, fallback2755
    nqp_get_sc_object $P5074, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5073, $P5074
    set $P5072, $P5073["%REG"]
    unless_null $P5072, fallback2756
    nqp_get_sc_object $P5076, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5075, $P5076
    new $P5077, 'Hash'
    set $P5075["%REG"], $P5077
    set $P5072, $P5077
  fallback2756:
    unless_null $P5072, vivi_7202757
    die "Contextual %*REG not found"
    box $P5078, "Contextual %*REG not found"
    set $P5072, $P5078
  vivi_7202757:
    set $P5071, $P5072
  fallback2755:
    set $P5070, $P5071["cstack"]
    unless_null $P5070, fallback2758
    nqp_get_sc_object $P5079, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5070, $P5079
  fallback2758:
    $P5080 = $P5059."push_pirop"("callmethod", "\"!cursor_push_cstack\"", $P5060, "$P11", $P5070 :named("result"))
  if716_end2742:
.annotate 'line', 3567
    find_lex $P5081, "$ops"
    $P5081."push_pirop"("set_addr", "$I11", $P101)
.annotate 'line', 3568
    find_lex $P5082, "$ops"
    find_dynamic_lex $P5084, "%*REG"
    unless_null $P5084, fallback2759
    nqp_get_sc_object $P5087, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5086, $P5087
    set $P5085, $P5086["%REG"]
    unless_null $P5085, fallback2760
    nqp_get_sc_object $P5089, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5088, $P5089
    new $P5090, 'Hash'
    set $P5088["%REG"], $P5090
    set $P5085, $P5090
  fallback2760:
    unless_null $P5085, vivi_7212761
    die "Contextual %*REG not found"
    box $P5091, "Contextual %*REG not found"
    set $P5085, $P5091
  vivi_7212761:
    set $P5084, $P5085
  fallback2759:
    set $P5083, $P5084["bstack"]
    unless_null $P5083, fallback2762
    nqp_get_sc_object $P5092, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5083, $P5092
  fallback2762:
    $P5082."push_pirop"("push", $P5083, "$I11")
.annotate 'line', 3569
    find_lex $P5093, "$ops"
    find_dynamic_lex $P5095, "%*REG"
    unless_null $P5095, fallback2763
    nqp_get_sc_object $P5098, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5097, $P5098
    set $P5096, $P5097["%REG"]
    unless_null $P5096, fallback2764
    nqp_get_sc_object $P5100, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5099, $P5100
    new $P5101, 'Hash'
    set $P5099["%REG"], $P5101
    set $P5096, $P5101
  fallback2764:
    unless_null $P5096, vivi_7222765
    die "Contextual %*REG not found"
    box $P5102, "Contextual %*REG not found"
    set $P5096, $P5102
  vivi_7222765:
    set $P5095, $P5096
  fallback2763:
    set $P5094, $P5095["bstack"]
    unless_null $P5094, fallback2766
    nqp_get_sc_object $P5103, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5094, $P5103
  fallback2766:
    $P5093."push_pirop"("push", $P5094, 0)
.annotate 'line', 3570
    find_lex $P5104, "$ops"
    find_dynamic_lex $P5106, "%*REG"
    unless_null $P5106, fallback2767
    nqp_get_sc_object $P5109, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5108, $P5109
    set $P5107, $P5108["%REG"]
    unless_null $P5107, fallback2768
    nqp_get_sc_object $P5111, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5110, $P5111
    new $P5112, 'Hash'
    set $P5110["%REG"], $P5112
    set $P5107, $P5112
  fallback2768:
    unless_null $P5107, vivi_7232769
    die "Contextual %*REG not found"
    box $P5113, "Contextual %*REG not found"
    set $P5107, $P5113
  vivi_7232769:
    set $P5106, $P5107
  fallback2767:
    set $P5105, $P5106["bstack"]
    unless_null $P5105, fallback2770
    nqp_get_sc_object $P5114, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5105, $P5114
  fallback2770:
    find_dynamic_lex $P5116, "%*REG"
    unless_null $P5116, fallback2771
    nqp_get_sc_object $P5119, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5118, $P5119
    set $P5117, $P5118["%REG"]
    unless_null $P5117, fallback2772
    nqp_get_sc_object $P5121, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5120, $P5121
    new $P5122, 'Hash'
    set $P5120["%REG"], $P5122
    set $P5117, $P5122
  fallback2772:
    unless_null $P5117, vivi_7242773
    die "Contextual %*REG not found"
    box $P5123, "Contextual %*REG not found"
    set $P5117, $P5123
  vivi_7242773:
    set $P5116, $P5117
  fallback2771:
    set $P5115, $P5116["pos"]
    unless_null $P5115, fallback2774
    nqp_get_sc_object $P5124, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5115, $P5124
  fallback2774:
    $P5104."push_pirop"("push", $P5105, $P5115)
.annotate 'line', 3571
    find_lex $P5125, "$ops"
    find_dynamic_lex $P5127, "%*REG"
    unless_null $P5127, fallback2775
    nqp_get_sc_object $P5130, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5129, $P5130
    set $P5128, $P5129["%REG"]
    unless_null $P5128, fallback2776
    nqp_get_sc_object $P5132, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5131, $P5132
    new $P5133, 'Hash'
    set $P5131["%REG"], $P5133
    set $P5128, $P5133
  fallback2776:
    unless_null $P5128, vivi_7252777
    die "Contextual %*REG not found"
    box $P5134, "Contextual %*REG not found"
    set $P5128, $P5134
  vivi_7252777:
    set $P5127, $P5128
  fallback2775:
    set $P5126, $P5127["cstack"]
    unless_null $P5126, fallback2778
    nqp_get_sc_object $P5135, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5126, $P5135
  fallback2778:
    $P5125."push_pirop"("elements", "$I11", $P5126)
.annotate 'line', 3572
    find_lex $P5136, "$ops"
    find_dynamic_lex $P5138, "%*REG"
    unless_null $P5138, fallback2779
    nqp_get_sc_object $P5141, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5140, $P5141
    set $P5139, $P5140["%REG"]
    unless_null $P5139, fallback2780
    nqp_get_sc_object $P5143, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5142, $P5143
    new $P5144, 'Hash'
    set $P5142["%REG"], $P5144
    set $P5139, $P5144
  fallback2780:
    unless_null $P5139, vivi_7262781
    die "Contextual %*REG not found"
    box $P5145, "Contextual %*REG not found"
    set $P5139, $P5145
  vivi_7262781:
    set $P5138, $P5139
  fallback2779:
    set $P5137, $P5138["bstack"]
    unless_null $P5137, fallback2782
    nqp_get_sc_object $P5146, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5137, $P5146
  fallback2782:
    $P5147 = $P5136."push_pirop"("push", $P5137, "$I11")
    .return ($P5147) 
.end
.HLL "nqp"
.namespace []
.sub "uniprop" :subid("cuid_136_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3583
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$ops", $P101 
    .lex "$cmpop", $P102 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P102, $P5002
.annotate 'line', 3584
    nqp_decontainerize $P5003, _lex_param_0
    find_dynamic_lex $P5005, "%*REG"
    unless_null $P5005, fallback2805
    nqp_get_sc_object $P5008, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["%REG"]
    unless_null $P5006, fallback2806
    nqp_get_sc_object $P5010, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5009, $P5010
    new $P5011, 'Hash'
    set $P5009["%REG"], $P5011
    set $P5006, $P5011
  fallback2806:
    unless_null $P5006, vivi_7342807
    die "Contextual %*REG not found"
    box $P5012, "Contextual %*REG not found"
    set $P5006, $P5012
  vivi_7342807:
    set $P5005, $P5006
  fallback2805:
    set $P5004, $P5005["cur"]
    unless_null $P5004, fallback2808
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5004, $P5013
  fallback2808:
    $P5014 = $P5003."post_new"("Ops", $P5004 :named("result"))
    set $P101, $P5014
.annotate 'line', 3585
    $P5015 = _lex_param_1."negate"()
    unless $P5015 goto if735_else2809 
    set $S5001, "ne"
    goto if735_end2810
  if735_else2809:
    set $S5001, "eq"
  if735_end2810:
    box $P5016, $S5001
    set $P102, $P5016
.annotate 'line', 3586
    set $P5017, _lex_param_1[0]
    unless_null $P5017, fallback2811
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5017, $P5018
  fallback2811:
    set $S5004, $P5017
    concat $S5003, "\"", $S5004
    concat $S5002, $S5003, "\""
    $P101."push_pirop"("assign", "$S10", $S5002)
.annotate 'line', 3587
    find_dynamic_lex $P5020, "%*REG"
    unless_null $P5020, fallback2812
    nqp_get_sc_object $P5023, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["%REG"]
    unless_null $P5021, fallback2813
    nqp_get_sc_object $P5025, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5024, $P5025
    new $P5026, 'Hash'
    set $P5024["%REG"], $P5026
    set $P5021, $P5026
  fallback2813:
    unless_null $P5021, vivi_7362814
    die "Contextual %*REG not found"
    box $P5027, "Contextual %*REG not found"
    set $P5021, $P5027
  vivi_7362814:
    set $P5020, $P5021
  fallback2812:
    set $P5019, $P5020["tgt"]
    unless_null $P5019, fallback2815
    nqp_get_sc_object $P5028, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5019, $P5028
  fallback2815:
    find_dynamic_lex $P5030, "%*REG"
    unless_null $P5030, fallback2816
    nqp_get_sc_object $P5033, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5032, $P5033
    set $P5031, $P5032["%REG"]
    unless_null $P5031, fallback2817
    nqp_get_sc_object $P5035, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5034, $P5035
    new $P5036, 'Hash'
    set $P5034["%REG"], $P5036
    set $P5031, $P5036
  fallback2817:
    unless_null $P5031, vivi_7372818
    die "Contextual %*REG not found"
    box $P5037, "Contextual %*REG not found"
    set $P5031, $P5037
  vivi_7372818:
    set $P5030, $P5031
  fallback2816:
    set $P5029, $P5030["pos"]
    unless_null $P5029, fallback2819
    nqp_get_sc_object $P5038, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5029, $P5038
  fallback2819:
    $P101."push_pirop"("is_uprop", "$I11", "$S10", $P5019, $P5029)
.annotate 'line', 3588
    find_dynamic_lex $P5040, "%*REG"
    unless_null $P5040, fallback2820
    nqp_get_sc_object $P5043, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5042, $P5043
    set $P5041, $P5042["%REG"]
    unless_null $P5041, fallback2821
    nqp_get_sc_object $P5045, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5044, $P5045
    new $P5046, 'Hash'
    set $P5044["%REG"], $P5046
    set $P5041, $P5046
  fallback2821:
    unless_null $P5041, vivi_7382822
    die "Contextual %*REG not found"
    box $P5047, "Contextual %*REG not found"
    set $P5041, $P5047
  vivi_7382822:
    set $P5040, $P5041
  fallback2820:
    set $P5039, $P5040["fail"]
    unless_null $P5039, fallback2823
    nqp_get_sc_object $P5048, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5039, $P5048
  fallback2823:
    $P101."push_pirop"($P102, "$I11", 0, $P5039)
.annotate 'line', 3589
    $P5049 = _lex_param_1."subtype"()
    set $S5005, $P5049
    iseq $I5001, $S5005, "zerowidth"
    if $I5001 goto unless739_end2825 
    find_dynamic_lex $P5051, "%*REG"
    unless_null $P5051, fallback2826
    nqp_get_sc_object $P5054, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5053, $P5054
    set $P5052, $P5053["%REG"]
    unless_null $P5052, fallback2827
    nqp_get_sc_object $P5056, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5055, $P5056
    new $P5057, 'Hash'
    set $P5055["%REG"], $P5057
    set $P5052, $P5057
  fallback2827:
    unless_null $P5052, vivi_7402828
    die "Contextual %*REG not found"
    box $P5058, "Contextual %*REG not found"
    set $P5052, $P5058
  vivi_7402828:
    set $P5051, $P5052
  fallback2826:
    set $P5050, $P5051["pos"]
    unless_null $P5050, fallback2829
    nqp_get_sc_object $P5059, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5050, $P5059
  fallback2829:
    $P5060 = $P101."push_pirop"("inc", $P5050)
  unless739_end2825:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "ws" :subid("cuid_137_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3594
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$node", _lex_param_1 
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."subrule"(_lex_param_1)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "regex_mark" :subid("cuid_138_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3596
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "self", _lex_param_0 
    .lex "$ops", _lex_param_1 
    .lex "$mark", _lex_param_2 
    .lex "$pos", _lex_param_3 
    .lex "$rep", _lex_param_4 
.annotate 'line', 3597
    find_dynamic_lex $P5002, "%*REG"
    unless_null $P5002, fallback2830
    nqp_get_sc_object $P5005, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["%REG"]
    unless_null $P5003, fallback2831
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5006, $P5007
    new $P5008, 'Hash'
    set $P5006["%REG"], $P5008
    set $P5003, $P5008
  fallback2831:
    unless_null $P5003, vivi_7412832
    die "Contextual %*REG not found"
    box $P5009, "Contextual %*REG not found"
    set $P5003, $P5009
  vivi_7412832:
    set $P5002, $P5003
  fallback2830:
    set $P5001, $P5002["bstack"]
    unless_null $P5001, fallback2833
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5010
  fallback2833:
    $P5011 = _lex_param_1."push_pirop"("nqp_rxmark", $P5001, _lex_param_2, _lex_param_3, _lex_param_4)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "regex_peek" :subid("cuid_139_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3600
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 :slurpy 
    .const 'Sub' $P5016 = 'cuid_337_1359572548.257' 
    capture_lex $P5016 
    .lex "self", _lex_param_0 
    .lex "$ops", _lex_param_1 
    .lex "$mark", _lex_param_2 
    .lex "@regs", _lex_param_3 
.annotate 'line', 3601
    find_dynamic_lex $P5002, "%*REG"
    unless_null $P5002, fallback2834
    nqp_get_sc_object $P5005, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["%REG"]
    unless_null $P5003, fallback2835
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5006, $P5007
    new $P5008, 'Hash'
    set $P5006["%REG"], $P5008
    set $P5003, $P5008
  fallback2835:
    unless_null $P5003, vivi_7422836
    die "Contextual %*REG not found"
    box $P5009, "Contextual %*REG not found"
    set $P5003, $P5009
  vivi_7422836:
    set $P5002, $P5003
  fallback2834:
    set $P5001, $P5002["bstack"]
    unless_null $P5001, fallback2837
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5010
  fallback2837:
    _lex_param_1."push_pirop"("nqp_rxpeek", "$I19", $P5001, _lex_param_2)
    set $P5011, _lex_param_3
    iter $P5013, _lex_param_3
  for_next2844:
    unless $P5013, for_done2846
    shift $P5015, $P5013
  for_redo2845:
    .const 'Sub' $P5014 = 'cuid_337_1359572548.257' 
    capture_lex $P5014
    $P5011 = $P5014($P5015)
    goto for_next2844
  for_done2846:
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_337_1359572548.257") :anon :lex :outer("cuid_139_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3602
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 3603
    find_lex $P5001, "$ops"
    $P5001."push_pirop"("inc", "$I19")
    set $S5001, _lex_param_0
    isne $I5001, $S5001, "*"
    box $P5015, $I5001
    set $P5014, $P5015
    unless $I5001 goto if743_end2839 
.annotate 'line', 3604
    find_lex $P5002, "$ops"
    find_dynamic_lex $P5004, "%*REG"
    unless_null $P5004, fallback2840
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["%REG"]
    unless_null $P5005, fallback2841
    nqp_get_sc_object $P5009, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5008, $P5009
    new $P5010, 'Hash'
    set $P5008["%REG"], $P5010
    set $P5005, $P5010
  fallback2841:
    unless_null $P5005, vivi_7442842
    die "Contextual %*REG not found"
    box $P5011, "Contextual %*REG not found"
    set $P5005, $P5011
  vivi_7442842:
    set $P5004, $P5005
  fallback2840:
    set $P5003, $P5004["bstack"]
    unless_null $P5003, fallback2843
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5003, $P5012
  fallback2843:
    set $S5003, $P5003
    concat $S5002, $S5003, "[$I19]"
    $P5013 = $P5002."push_pirop"("set", _lex_param_0, $S5002)
    set $P5014, $P5013
  if743_end2839:
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "regex_commit" :subid("cuid_140_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3608
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "self", _lex_param_0 
    .lex "$ops", _lex_param_1 
    .lex "$mark", _lex_param_2 
.annotate 'line', 3609
    find_dynamic_lex $P5002, "%*REG"
    unless_null $P5002, fallback2847
    nqp_get_sc_object $P5005, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["%REG"]
    unless_null $P5003, fallback2848
    nqp_get_sc_object $P5007, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    get_who $P5006, $P5007
    new $P5008, 'Hash'
    set $P5006["%REG"], $P5008
    set $P5003, $P5008
  fallback2848:
    unless_null $P5003, vivi_7452849
    die "Contextual %*REG not found"
    box $P5009, "Contextual %*REG not found"
    set $P5003, $P5009
  vivi_7452849:
    set $P5002, $P5003
  fallback2847:
    set $P5001, $P5002["bstack"]
    unless_null $P5001, fallback2850
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5010
  fallback2850:
    $P5011 = _lex_param_1."push_pirop"("nqp_rxcommit", $P5001, _lex_param_2)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "as_post" :subid("cuid_141_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3612
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("want") :optional 
    .param int haz_param_33 :opt_flag 
    if haz_param_33, default2851
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set _lex_param_2, $P5004
  default2851:
    .lex "self", _lex_param_0 
    .lex "$unknown", _lex_param_1 
    .lex "$want", _lex_param_2 
.annotate 'line', 3613
    get_how $P5001, _lex_param_1
    $P5002 = $P5001."name"(_lex_param_1)
    set $S5002, $P5002
    concat $S5001, "Unknown QAST node type ", $S5002
    box $P5003, $S5001
    die $P5003
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "operations" :subid("cuid_142_1359572548.257") :anon :lex :outer("cuid_264_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
.annotate 'line', 3616
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_get_sc_object $P5004, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Operations"]
    unless_null $P5001, fallback2852
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692", 22
    set $P5001, $P5005
  fallback2852:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_339_1359572548.257") :load :init
.annotate 'file', "src\\stage2\\QAST.nqp"
    .const 'Sub' $P5001 = 'cuid_338_1359572548.257' 
    capture_lex $P5001 
    .local pmc cur_sc 
    .local pmc conflicts 
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P5001
    get_class $P5002, "LexPad"
    get_class $P5003, "NQPLexPad"
    $P5004 = $P5001."hll_map"($P5002, $P5003)
    load_bytecode "ModuleLoader.pbc"
    .const 'Sub' $P5001 = "cuid_145_1359572548.257" 
    get_hll_global $P5002, "ModuleLoader"
    $P5003 = $P5002."load_setting"("NQPCORE")
    $P5004 = $P5001."set_outer_ctx"($P5003)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("NQPHLL")
    nqp_create_sc $P5001, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284"
    set cur_sc, $P5001
    $P5002 = cur_sc."set_description"("src\\stage2\\QAST.nqp")
    new $P5003, 'ResizablePMCArray'
    set conflicts, $P5003
    new $P5004, 'ResizableStringArray'
    null $S5001
    push $P5004, $S5001
    push $P5004, "P6opaque"
    push $P5004, "PIRT"
    push $P5004, "QAST"
    push $P5004, "QRegex"
    push $P5004, "NQPCursorRole"
    push $P5004, "5AB04DFAFFF209D71179F6DD66C39F5290FAF9C0-1359572539.864"
    push $P5004, "src\\stage2\\QRegex.nqp"
    push $P5004, "NQPMatch"
    push $P5004, "NQPCursor"
    push $P5004, "NQPRegexMethod"
    push $P5004, "NQPRegex"
    push $P5004, "HLL"
    push $P5004, "DEFAULT"
    push $P5004, "CREATE"
    push $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359572536.692"
    push $P5004, "src\\stage2\\NQPCORE.setting"
    push $P5004, "bless"
    push $P5004, "BUILDALL"
    push $P5004, "new"
    push $P5004, "Str"
    push $P5004, "Numeric"
    push $P5004, "Int"
    push $P5004, "at_pos"
    push $P5004, "at_key"
    push $P5004, "defined"
    push $P5004, "ACCEPTS"
    push $P5004, "isa"
    push $P5004, "__dump"
    push $P5004, "result"
    push $P5004, "$!result"
    push $P5004, "children_pir"
    push $P5004, "escape"
    push $P5004, "push"
    push $P5004, "push_pirop"
    push $P5004, "subid"
    push $P5004, "pirflags"
    push $P5004, "name"
    push $P5004, "loadlibs"
    push $P5004, "hll"
    push $P5004, "namespace"
    push $P5004, "close_sub"
    push $P5004, "pir"
    push $P5004, "collect_sub_pir_into"
    push $P5004, "@!children"
    push $P5004, "$!subid"
    push $P5004, "$!pirflags"
    push $P5004, "$!name"
    push $P5004, "$!hll"
    push $P5004, "@!namespace"
    push $P5004, "@!loadlibs"
    push $P5004, "@!nested_blocks"
    push $P5004, "$!cached_pir"
    push $P5004, "node"
    push $P5004, "$!node"
    push $P5004, "compile_op"
    push $P5004, "compile_pirop"
    push $P5004, "add_core_op"
    push $P5004, "add_hll_op"
    push $P5004, "add_core_pirop_mapping"
    push $P5004, "add_hll_pirop_mapping"
    push $P5004, "set_core_op_inlinability"
    push $P5004, "set_hll_op_inlinability"
    push $P5004, "is_inlinable"
    push $P5004, "set_core_op_result_type"
    push $P5004, "set_hll_op_result_type"
    push $P5004, "attach_result_type"
    push $P5004, "add_hll_box"
    push $P5004, "add_hll_unbox"
    push $P5004, "box"
    push $P5004, "unbox"
    push $P5004, "4B27EE4CC3E71F7EA131FB2D9D50E09ABE479626-1359572543.729"
    push $P5004, "src\\stage2\\gen\\NQPHLL.pm"
    push $P5004, "BUILD"
    push $P5004, "language"
    push $P5004, "compiler"
    push $P5004, "config"
    push $P5004, "load_module"
    push $P5004, "autoprint"
    push $P5004, "interactive"
    push $P5004, "eval"
    push $P5004, "ctxsave"
    push $P5004, "panic"
    push $P5004, "stages"
    push $P5004, "parsegrammar"
    push $P5004, "parseactions"
    push $P5004, "interactive_banner"
    push $P5004, "interactive_prompt"
    push $P5004, "compiler_progname"
    push $P5004, "commandline_options"
    push $P5004, "command_line"
    push $P5004, "command_eval"
    push $P5004, "process_args"
    push $P5004, "evalfiles"
    push $P5004, "compile"
    push $P5004, "start"
    push $P5004, "parse"
    push $P5004, "past"
    push $P5004, "post"
    push $P5004, "pirbegin"
    push $P5004, "evalpmc"
    push $P5004, "dumper"
    push $P5004, "usage"
    push $P5004, "version"
    push $P5004, "show-config"
    push $P5004, "verbose-config"
    push $P5004, "vmstat"
    push $P5004, "nqpevent"
    push $P5004, "removestage"
    push $P5004, "addstage"
    push $P5004, "parse_name"
    push $P5004, "lineof"
    push $P5004, "user-progname"
    push $P5004, "cli-options"
    push $P5004, "cli-arguments"
    push $P5004, "type_to_register_type"
    push $P5004, "force_return_boxing_for_hll"
    push $P5004, "unique"
    push $P5004, "rxescape"
    push $P5004, "as_post"
    push $P5004, "deserialization_code"
    push $P5004, "compile_all_the_stmts"
    push $P5004, "apply_context"
    push $P5004, "compile_var"
    push $P5004, "as_post_clear_bindval"
    push $P5004, "coerce"
    push $P5004, "infer_type"
    push $P5004, "post_children"
    push $P5004, "children"
    push $P5004, "regex_post"
    push $P5004, "post_new"
    push $P5004, "alt"
    push $P5004, "altseq"
    push $P5004, "anchor"
    push $P5004, "dba"
    push $P5004, "cclass"
    push $P5004, "concat"
    push $P5004, "conj"
    push $P5004, "conjseq"
    push $P5004, "enumcharlist"
    push $P5004, "literal"
    push $P5004, "pass"
    push $P5004, "qastnode"
    push $P5004, "quant"
    push $P5004, "scan"
    push $P5004, "subcapture"
    push $P5004, "subrule"
    push $P5004, "uniprop"
    push $P5004, "ws"
    push $P5004, "regex_mark"
    push $P5004, "regex_peek"
    push $P5004, "regex_commit"
    push $P5004, "operations"
    push $P5004, "@!stages"
    push $P5004, "$!parsegrammar"
    push $P5004, "$!parseactions"
    push $P5004, "@!cmdoptions"
    push $P5004, "$!usage"
    push $P5004, "$!compiler_progname"
    push $P5004, "$!language"
    push $P5004, "%!config"
    push $P5004, "$!user_progname"
    push $P5004, "@!cli-arguments"
    push $P5004, "%!cli-options"
    push $P5004, "handler_allocator"
    push $P5004, "fresh_p"
    push $P5004, "fresh_s"
    push $P5004, "fresh_i"
    push $P5004, "fresh_n"
    push $P5004, "cur_p"
    push $P5004, "cur_s"
    push $P5004, "cur_i"
    push $P5004, "cur_n"
    push $P5004, "$!cur_p"
    push $P5004, "$!cur_s"
    push $P5004, "$!cur_i"
    push $P5004, "$!cur_n"
    push $P5004, "add_param"
    push $P5004, "add_lexical"
    push $P5004, "add_local"
    push $P5004, "register_lexical"
    push $P5004, "register_local"
    push $P5004, "qast"
    push $P5004, "outer"
    push $P5004, "params"
    push $P5004, "lexicals"
    push $P5004, "locals"
    push $P5004, "lex_reg"
    push $P5004, "local_type"
    push $P5004, "local_type_long"
    push $P5004, "lexical_type"
    push $P5004, "lexical_type_long"
    push $P5004, "reg_type"
    push $P5004, "add_loadlibs"
    push $P5004, "fresh_lex_p"
    push $P5004, "fresh_lex_s"
    push $P5004, "fresh_lex_i"
    push $P5004, "fresh_lex_n"
    push $P5004, "$!qast"
    push $P5004, "$!outer"
    push $P5004, "@!params"
    push $P5004, "@!locals"
    push $P5004, "@!lexicals"
    push $P5004, "%!local_types"
    push $P5004, "%!lexical_types"
    push $P5004, "%!lexical_regs"
    push $P5004, "%!reg_types"
    push $P5004, "$!param_idx"
    push $P5004, "$!cur_lex_p"
    push $P5004, "$!cur_lex_s"
    push $P5004, "$!cur_lex_i"
    push $P5004, "$!cur_lex_n"
    push $P5004, ""
    push $P5004, "!INTERPOLATE"
    push $P5004, "__6MODEL_CORE__"
    push $P5004, "GLOBALish"
    push $P5004, "EXPORT"
    push $P5004, "093654D3D9FDEC05514F10E28C726DFF7AEC24D9-1359572533.315"
    push $P5004, "src\\stage2\\gen\\nqp-mo.pm"
    push $P5004, "PIRT::CallResult"
    push $P5004, "get_string"
    push $P5004, "PIRT::Node"
    push $P5004, "PIRT::Sub"
    push $P5004, "nested_blocks"
    push $P5004, "cached_pir"
    push $P5004, "PIRT::Ops"
    push $P5004, "PIRT::Label"
    push $P5004, "QAST::Operations"
    push $P5004, "QAST::Compiler"
    push $P5004, "code"
    push $P5004, "RegAlloc"
    push $P5004, "BlockInfo"
    push $P5004, "2A5BD8D2F017911EBF2A5D1B91B7A8E3733D2938-1359572538.176"
    push $P5004, "src\\stage2\\QASTNode.nqp"
    push $P5004, "CallResult"
    push $P5004, "Node"
    push $P5004, "Sub"
    push $P5004, "Ops"
    push $P5004, "Label"
    push $P5004, "CompileTimeValue"
    push $P5004, "SpecialArg"
    push $P5004, "Regex"
    push $P5004, "IVal"
    push $P5004, "NVal"
    push $P5004, "SVal"
    push $P5004, "BVal"
    push $P5004, "WVal"
    push $P5004, "Want"
    push $P5004, "Var"
    push $P5004, "VarWithFallback"
    push $P5004, "Op"
    push $P5004, "VM"
    push $P5004, "Stmts"
    push $P5004, "Stmt"
    push $P5004, "Block"
    push $P5004, "Unquote"
    push $P5004, "CompUnit"
    push $P5004, "InlinePlaceholder"
    push $P5004, "Operations"
    push $P5004, "Compiler"
    push $P5004, "NFA"
    push $P5004, "Grammar"
    push $P5004, "Actions"
    push $P5004, "CommandLine"
    push $P5004, "World"
    .const 'Sub' $P5005 = 'cuid_338_1359572548.257' 
    capture_lex $P5005
    $P5006 = $P5005()
    nqp_deserialize_sc "", cur_sc, $P5004, $P5006, conflicts
    unless conflicts goto if746_end2854 
    die "Repossession conflicts occurred during deserialization"
  if746_end2854:
    .const "LexInfo" $P5001 = "cuid_145_1359572548.257"
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    $P5001."set_static_lexpad_value"("GLOBALish", $P5002)
    .const "LexInfo" $P5003 = "cuid_145_1359572548.257"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_145_1359572548.257"
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 0
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_145_1359572548.257"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_145_1359572548.257"
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 1
    $P5001."set_static_lexpad_value"("EXPORT", $P5002)
    .const "LexInfo" $P5003 = "cuid_145_1359572548.257"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_1_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 4
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_2_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 5
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_146_1359572548.257"
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 3
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_146_1359572548.257"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_146_1359572548.257"
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 3
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_146_1359572548.257"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_3_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 7
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_4_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 8
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_5_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 9
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_6_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 10
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_7_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 11
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_8_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 12
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_9_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 13
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_10_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 14
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_11_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 15
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_147_1359572548.257"
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 6
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_147_1359572548.257"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_147_1359572548.257"
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 6
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_147_1359572548.257"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_12_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 17
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_13_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 18
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_14_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 19
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_15_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 20
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_16_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 21
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_17_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 22
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_18_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 23
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_19_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 24
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_20_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 25
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_21_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 26
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_22_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 27
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_23_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 28
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_24_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 29
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_25_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 30
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_153_1359572548.257"
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_153_1359572548.257"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_153_1359572548.257"
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 16
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_153_1359572548.257"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_26_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 32
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_27_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 33
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_28_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 34
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_29_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 35
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_30_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 36
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_31_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 37
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_158_1359572548.257"
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 31
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_158_1359572548.257"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_158_1359572548.257"
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 31
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_158_1359572548.257"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_32_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 39
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_33_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 40
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_34_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 41
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_35_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 42
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_161_1359572548.257"
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 38
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_161_1359572548.257"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_161_1359572548.257"
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 38
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_161_1359572548.257"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_36_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 44
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_37_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 45
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_38_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 46
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_39_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 47
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_40_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 48
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_41_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 49
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_42_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 50
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_43_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 51
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_44_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 52
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_45_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 53
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_46_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 54
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_47_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 55
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_48_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 56
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_49_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 57
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_50_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 58
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_51_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 59
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_170_1359572548.257"
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 43
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_170_1359572548.257"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_170_1359572548.257"
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 43
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_170_1359572548.257"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_264_1359572548.257"
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 61
    $P5001."set_static_lexpad_value"("RegAlloc", $P5002)
    .const "LexInfo" $P5003 = "cuid_264_1359572548.257"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_52_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 62
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_53_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 63
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_54_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 64
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_55_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 65
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_56_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 66
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_57_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 67
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_58_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 68
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_59_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 69
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_60_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 70
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_61_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 71
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_62_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 72
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_268_1359572548.257"
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 61
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_268_1359572548.257"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_268_1359572548.257"
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 61
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_268_1359572548.257"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_264_1359572548.257"
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    $P5001."set_static_lexpad_value"("BlockInfo", $P5002)
    .const "LexInfo" $P5003 = "cuid_264_1359572548.257"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_63_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 74
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_64_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 75
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_65_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 76
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_66_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 77
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_67_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 78
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_68_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 79
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_69_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 80
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_70_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 81
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_71_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 82
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_72_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 83
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_73_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 84
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_74_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 85
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_75_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 86
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_76_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 87
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_77_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 88
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_78_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 89
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_79_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 90
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_80_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 91
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_81_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 92
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_82_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 93
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_83_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 94
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_84_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 95
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_85_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 96
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_86_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 97
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_269_1359572548.257"
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_269_1359572548.257"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_269_1359572548.257"
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 73
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_269_1359572548.257"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_87_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 98
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_88_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 99
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_89_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 100
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_90_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 101
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_91_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 102
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_92_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 103
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_93_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 104
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_94_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 105
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_95_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 106
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_96_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 107
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_97_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 108
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_98_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 109
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_99_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 110
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_100_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 111
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_101_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 112
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_102_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 113
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_103_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 114
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_104_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 115
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_105_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 116
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_106_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 117
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_107_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 118
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_108_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 119
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_109_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 120
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_110_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 121
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_111_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 122
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_112_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 123
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_113_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 124
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_114_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 125
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_115_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 126
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_116_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 127
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_117_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 128
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_118_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 129
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_119_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 130
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_120_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 131
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_121_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 132
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_122_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 133
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_123_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 134
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_124_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 135
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_125_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 136
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_126_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 137
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_127_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 138
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_128_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 139
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_129_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 140
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_130_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 141
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_131_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 142
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_132_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 143
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_133_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 144
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_134_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 145
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_135_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 146
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_136_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 147
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_137_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 148
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_138_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 149
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_139_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 150
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_140_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 151
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_141_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 152
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_142_1359572548.257" 
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 153
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_264_1359572548.257"
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 60
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_264_1359572548.257"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_264_1359572548.257"
    nqp_get_sc_object $P5002, "04626CC7880718A256E1D421E7B737F9595C3998-1359572548.284", 60
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_264_1359572548.257"
    $P5004 = $P5003."finish_static_lexpad"()
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_338_1359572548.257") :anon :lex :outer("cuid_339_1359572548.257")
.annotate 'file', "src\\stage2\\QAST.nqp"
    new $P5001, 'ResizablePMCArray'
    .const 'Sub' $P5002 = "cuid_1_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_2_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_3_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_4_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_5_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_6_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_7_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_8_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_9_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_10_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_11_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_12_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_13_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_14_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_15_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_16_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_17_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_18_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_19_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_20_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_21_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_22_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_23_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_24_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_25_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_26_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_27_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_28_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_29_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_30_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_31_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_32_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_33_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_34_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_35_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_36_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_37_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_38_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_39_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_40_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_41_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_42_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_43_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_44_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_45_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_46_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_47_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_48_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_49_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_50_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_51_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_52_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_53_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_54_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_55_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_56_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_57_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_58_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_59_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_60_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_61_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_62_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_63_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_64_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_65_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_66_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_67_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_68_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_69_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_70_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_71_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_72_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_73_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_74_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_75_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_76_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_77_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_78_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_79_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_80_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_81_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_82_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_83_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_84_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_85_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_86_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_87_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_88_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_89_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_90_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_91_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_92_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_93_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_94_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_95_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_96_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_97_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_98_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_99_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_100_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_101_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_102_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_103_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_104_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_105_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_106_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_107_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_108_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_109_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_110_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_111_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_112_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_113_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_114_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_115_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_116_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_117_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_118_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_119_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_120_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_121_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_122_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_123_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_124_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_125_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_126_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_127_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_128_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_129_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_130_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_131_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_132_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_133_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_134_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_135_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_136_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_137_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_138_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_139_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_140_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_141_1359572548.257" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_142_1359572548.257" 
    push $P5001, $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_340_1359572548.257") :load
.annotate 'file', "src\\stage2\\QAST.nqp"
    .const 'Sub' $P5001 = "cuid_145_1359572548.257" 
    $P5002 = $P5001()
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_341_1359572548.257") :main
.annotate 'file', "src\\stage2\\QAST.nqp"
    .param pmc ARGS :slurpy 
    .const 'Sub' $P5001 = "cuid_145_1359572548.257" 
    $P5002 = $P5001(ARGS :flat)
    .return ($P5002) 
.end