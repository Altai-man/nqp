BEGIN_OPS_PREAMBLE

/* Parroty includes. */
#include "parrot/parrot.h"
#include "parrot/extend.h"
#include "parrot/dynext.h"

/* 6modely includes. */
#include "../metamodel/rakudoobject.h"
#include "../metamodel/repr_registry.h"

/* Did we do the dynop setup yet?
 * XXX Relies on this happening once in a single thread at startup. */
static INTVAL initialized = 0;

/* Cached type IDs. */
static INTVAL stable_id = 0;
static INTVAL repr_id   = 0;
static INTVAL ro_id     = 0;

END_OPS_PREAMBLE

/*

=item nqp_dynop_setup()

Does various setup tasks for the benefit of the other dynops.

=cut

*/
inline op nqp_dynop_setup() :base_core {
    if (!initialized) {
        initialized = 1;

        /* Look up and cache some type IDs. */
        stable_id = pmc_type(interp, Parrot_str_new(interp, "STable", 0));
        repr_id   = pmc_type(interp, Parrot_str_new(interp, "REPR", 0));
        ro_id     = pmc_type(interp, Parrot_str_new(interp, "RakudoObject", 0));

        /* Initialize the object model. */
        RakudoObject_initialize(interp);
    }
}

/*

=item get_how(obj)

Gets the HOW for a Rakudo Object.

=cut

*/
inline op get_how(out PMC, in PMC) :base_core {
    if ($2->vtable->base_type == ro_id)
        $1 = STABLE($2)->HOW;
    else
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_INVALID_OPERATION,
            "Can only use get_how on a RakudoObject");
}

/*

=item get_what(obj)

Gets the WHAT for a Rakudo Object.

=cut

*/
inline op get_what(out PMC, in PMC) :base_core {
    if ($2->vtable->base_type == ro_id)
        $1 = STABLE($2)->WHAT;
    else
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_INVALID_OPERATION,
            "Can only use get_what on a RakudoObject");
}

/*

=item repr_type_object_for(how, repr_name)

Creates a type object associated with the given HOW and of the given
representation.

=cut

*/
inline op repr_type_object_for(out PMC, in PMC, in STR) :base_core {
    PMC *REPR = REPR_get_by_name(interp, $3);
    $1 = REPR_STRUCT(REPR)->type_object_for(interp, REPR, $2);
}

/*

=item repr_instance_of()

Instantiates a new RakudoObject based on the given WHAT.

=cut

*/
inline op repr_instance_of(out PMC, in PMC) :base_core {
    if ($2->vtable->base_type == ro_id)
        $1 = REPR($2)->instance_of(interp, REPR_PMC($2), $2);
    else
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_INVALID_OPERATION,
            "Can only use repr_instance_of on a RakudoObject");
}

/*

=item repr_defined()

Checks the REPRs idea of definedness.

=cut

*/
inline op repr_defined(out INT, in PMC) :base_core {
    if ($2->vtable->base_type == ro_id)
        $1 = REPR($2)->defined(interp, REPR_PMC($2), $2);
    else
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_INVALID_OPERATION,
            "Can only use repr_defined on a RakudoObject");
}


/*

=item type_check(obj, wanted_type)

Checks if the given object's type accepts the checked type, using the
type check cache if one was published. Note, assumes that $3 is a type
object. If you're not sure that's what you have, call C<get_what> to
make sure.

=cut

*/
inline op type_check(out INT, in PMC, in PMC) :base_core {
    if ($2->vtable->base_type == ro_id && $3->vtable->base_type == ro_id) {
        $1 = STABLE($2)->type_check(interp, $2, $3);
    }    
    else {
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_INVALID_OPERATION,
            "Can only use type_check on two RakudoObjects");
    }
}


/*

=item publish_type_check_cache(WHAT, type_list)

Publishes a type check cache, to be stored in the S-Table.

=cut

*/
inline op publish_type_check_cache(in PMC, in PMC) :base_core {
    if ($1->vtable->base_type == ro_id) {
        STable *target_st = STABLE($1);
        INTVAL items      = VTABLE_elements(interp, $2);
        if (items > 0) {
            PMC    **cache    = mem_sys_allocate(sizeof(PMC *) * items);
            INTVAL i;
            for (i = 0; i < items; i++)
                cache[i] = VTABLE_get_pmc_keyed_int(interp, $2, i);
            target_st->type_check_cache = cache;
            target_st->type_check_cache_length = items;
        }
        else {
            target_st->type_check_cache = NULL;
            target_st->type_check_cache_length = 0;
        }
    }
    else {
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_INVALID_OPERATION,
            "First argument to publish_type_check_cache must be a RakudoObject");
    }
}


/*

=item publish_method_cache(WHAT, method_cache_hash)

Publishes a method dispatch cache - essentially, a set of name to code object
mappings.

=cut

*/
inline op publish_method_cache(in PMC, in PMC) :base_core {
    if ($1->vtable->base_type == ro_id) {
        /* We copy the cache items to a Parrot hash to avoid making
         * calls into the language's own hash implementation every
         * time, which may be far more costly. */
        STable *target_st = STABLE($1);
        PMC    *cache     = pmc_new(interp, enum_class_Hash);
        PMC    *iter      = VTABLE_get_iter(interp, $2);
        while (VTABLE_get_bool(interp, iter)) {
            STRING *name = VTABLE_shift_string(interp, iter);
            PMC    *meth = VTABLE_get_pmc_keyed_str(interp, $2, name);
            VTABLE_set_pmc_keyed_str(interp, cache, name, meth);
        }
        target_st->method_cache = cache;
    }
    else {
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_INVALID_OPERATION,
            "First argument to publish_method_cache must be a RakudoObject");
    }
}


/*

=item repr_unbox_str()

Tries to unbox a native string using the REPR API.

=cut

*/
inline op repr_unbox_str(out STR, in PMC) :base_core {
    if ($2->vtable->base_type == ro_id)
        $1 = REPR($2)->get_str(interp, REPR_PMC($2), $2);
    else
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_INVALID_OPERATION,
            "Can only use repr_unbox_str on a RakudoObject");
}

/*

=item repr_unbox_int()

Tries to unbox a native integer using the REPR API.

=cut

*/
inline op repr_unbox_int(out INT, in PMC) :base_core {
    if ($2->vtable->base_type == ro_id)
        $1 = REPR($2)->get_int(interp, REPR_PMC($2), $2);
    else
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_INVALID_OPERATION,
            "Can only use repr_unbox_int on a RakudoObject");
}

/*

=item repr_unbox_num()

Tries to unbox a native floating pint number using the REPR API.

=cut

*/
inline op repr_unbox_num(out NUM, in PMC) :base_core {
    if ($2->vtable->base_type == ro_id)
        $1 = REPR($2)->get_num(interp, REPR_PMC($2), $2);
    else
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_INVALID_OPERATION,
            "Can only use repr_unbox_num on a RakudoObject");
}

/*

=item repr_box_str()

Box a native string to an instance of the specified type.

=cut

*/
inline op repr_box_str(out PMC, in STR, in PMC) :base_core {
    if ($3->vtable->base_type == ro_id) {
        $1 = REPR($3)->instance_of(interp, REPR_PMC($3), $3);
        REPR($1)->set_str(interp, REPR_PMC($1), $1, $2);
    }
    else
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_INVALID_OPERATION,
            "Can only use repr_box_str with a RakudoObject as the box target");
}

/*

=item repr_box_int()

Box a native int to an instance of the specified type.

=cut

*/
inline op repr_box_int(out PMC, in INT, in PMC) :base_core {
    if ($3->vtable->base_type == ro_id) {
        $1 = REPR($3)->instance_of(interp, REPR_PMC($3), $3);
        REPR($1)->set_int(interp, REPR_PMC($1), $1, $2);
    }
    else
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_INVALID_OPERATION,
            "Can only use repr_box_int with a RakudoObject as the box target");
}

/*

=item repr_box_num()

Box a native floating point number to an instance of the specified type.

=cut

*/
inline op repr_box_num(out PMC, in NUM, in PMC) :base_core {
    if ($3->vtable->base_type == ro_id) {
        $1 = REPR($3)->instance_of(interp, REPR_PMC($3), $3);
        REPR($1)->set_num(interp, REPR_PMC($1), $1, $2);
    }
    else
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_INVALID_OPERATION,
            "Can only use repr_box_num with a RakudoObject as the box target");
}
