.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'
.include 'libpaths.pasm'
.include 'nqp_const.pir'
.loadlib "nqp_group"
.loadlib "nqp_ops"
.loadlib "nqp_bigint_ops"
.loadlib "trans_ops"
.loadlib "io_ops"
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_200_1381281822.05887") :anon :lex
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc _lex_param_0 :slurpy 
    .const 'Sub' $P5020 = 'cuid_201_1381281822.05887' 
    capture_lex $P5020 
    .const 'Sub' $P5020 = 'cuid_202_1381281822.05887' 
    capture_lex $P5020 
    .const 'Sub' $P5020 = 'cuid_204_1381281822.05887' 
    capture_lex $P5020 
    .const 'Sub' $P5020 = 'cuid_222_1381281822.05887' 
    capture_lex $P5020 
    .const 'Sub' $P5020 = 'cuid_266_1381281822.05887' 
    capture_lex $P5020 
    .lex "GLOBALish", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "EXPORT", $P103 
    .lex "ParseShared", $P104 
    .lex "NQPCursorRole", $P105 
    .lex "$p6regex", $P106 
    .lex "&MAIN", $P107 
    .lex "@ARGS", _lex_param_0 
    .local pmc ctxsave 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P106, $P5001
    .const 'Sub' $P5002 = 'cuid_201_1381281822.05887' 
    capture_lex $P5002
    set $P107, $P5002
    find_dynamic_lex $P5003, "$*CTXSAVE"
    set ctxsave, $P5003
    isnull $I5001, ctxsave
    if $I5001 goto unless10_end11 
    can $I5002, ctxsave, "ctxsave"
    box $P5006, $I5002
    set $P5005, $P5006
    unless $I5002 goto if11_end13 
    $P5004 = ctxsave."ctxsave"()
    set $P5005, $P5004
  if11_end13:
  unless10_end11:
.annotate 'line', 1
    .const 'Sub' $P5007 = 'cuid_202_1381281822.05887' 
    capture_lex $P5007
    $P5008 = $P5007()
    .const 'Sub' $P5009 = 'cuid_204_1381281822.05887' 
    capture_lex $P5009
    $P5010 = $P5009()
    .const 'Sub' $P5011 = 'cuid_222_1381281822.05887' 
    capture_lex $P5011
    $P5012 = $P5011()
    .const 'Sub' $P5013 = 'cuid_266_1381281822.05887' 
    capture_lex $P5013
    $P5014 = $P5013()
.annotate 'line', 1163
    nqp_get_sc_object $P5015, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 205
    $P5016 = $P5015."new"()
    set $P106, $P5016
.annotate 'line', 1164
    $P106."language"("QRegex::P6Regex")
.annotate 'line', 1165
    nqp_get_sc_object $P5017, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 5
    $P106."parsegrammar"($P5017)
.annotate 'line', 1166
    nqp_get_sc_object $P5018, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 129
    $P106."parseactions"($P5018)
    unless _lex_param_0 goto if1187_end2944 
    $P5019 = "&MAIN"(_lex_param_0 :flat)
  if1187_end2944:
    .return () 
.end
.HLL "nqp"
.namespace []
.sub "MAIN" :subid("cuid_201_1381281822.05887") :anon :lex :outer("cuid_200_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1168
    .param pmc _lex_param_0 
    .lex "@ARGS", _lex_param_0 
.annotate 'line', 1169
    find_lex $P5001, "$p6regex"
    $P5002 = $P5001."command_line"(_lex_param_0, "utf8" :named("encoding"), "ucs4" :named("transcode"))
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_202_1381281822.05887") :anon :lex :outer("cuid_200_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 9
    .const 'Sub' $P5002 = 'cuid_1_1381281822.05887' 
    capture_lex $P5002 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_1_1381281822.05887' 
    capture_lex $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "create_code" :subid("cuid_1_1381281822.05887") :anon :lex :outer("cuid_202_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 10
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .const 'Sub' $P5034 = 'cuid_203_1381281822.05887' 
    capture_lex $P5034 
    .lex "$dummy", $P101 
    .lex "$code_obj", $P102 
    .lex "$slot", $P103 
    .lex "$fixups", $P104 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    .lex "$name", _lex_param_2 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P103, $P5003
    nqp_get_sc_object $P5004, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P104, $P5004
    .const 'Sub' $P5007 = 'cuid_203_1381281822.05887' 
    capture_lex $P5007
    newclosure $P5006, $P5007
    nqp_fresh_stub $P5005, $P5006
    set $P101, $P5005
    set $S5001, _lex_param_2
    assign $P101, $S5001
    setprop $P101, 'STATIC_CODE_REF', $P101
.annotate 'line', 17
    nqp_decontainerize $P5008, _lex_param_0
    $P5008."add_root_code_ref"($P101, _lex_param_1)
    nqp_get_sc_object $P5010, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 9
    repr_instance_of $P5009, $P5010
    set $P102, $P5009
    nqp_get_sc_object $P5011, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 9
    setattribute $P102, $P5011, "$!do", $P101
.annotate 'line', 22
    nqp_decontainerize $P5012, _lex_param_0
    $P5013 = $P5012."add_object"($P102)
    set $P103, $P5013
.annotate 'line', 25
    nqp_get_sc_object $P5014, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 103
    $P5015 = $P5014."new"()
    set $P104, $P5015
.annotate 'line', 26
    nqp_get_sc_object $P5016, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 86
.annotate 'line', 28
    nqp_get_sc_object $P5017, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 64
    $P5018 = $P5017."new"($P102 :named("value"))
.annotate 'line', 29
    nqp_get_sc_object $P5019, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 64
    nqp_get_sc_object $P5020, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 9
    $P5021 = $P5019."new"($P5020 :named("value"))
.annotate 'line', 30
    nqp_get_sc_object $P5022, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 55
    $P5023 = $P5022."new"("$!do" :named("value"))
.annotate 'line', 31
    nqp_get_sc_object $P5024, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 60
    $P5025 = $P5024."new"(_lex_param_1 :named("value"))
    $P5026 = $P5016."new"($P5018, $P5021, $P5023, $P5025, "bindattr" :named("op"))
    $P104."push"($P5026)
.annotate 'line', 33
    nqp_get_sc_object $P5027, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 86
.annotate 'line', 35
    nqp_get_sc_object $P5028, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 60
    $P5029 = $P5028."new"(_lex_param_1 :named("value"))
.annotate 'line', 36
    nqp_get_sc_object $P5030, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 64
    $P5031 = $P5030."new"($P102 :named("value"))
    $P5032 = $P5027."new"($P5029, $P5031, "setcodeobj" :named("op"))
    $P104."push"($P5032)
.annotate 'line', 38
    nqp_decontainerize $P5033, _lex_param_0
    $P5033."add_fixup_task"($P104 :named("fixup_past"))
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_203_1381281822.05887") :anon :lex :outer("cuid_1_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 12

    box $P5001, "Uncompiled code executed"
    die $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_204_1381281822.05887") :anon :lex :outer("cuid_200_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 44
    .const 'Sub' $P5102 = 'cuid_2_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_3_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_4_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_5_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_6_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_7_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_8_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_9_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_10_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_11_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_13_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_16_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_17_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_18_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_19_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_20_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_21_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_24_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_26_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_27_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_29_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_30_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_31_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_32_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_33_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_37_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_38_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_40_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_41_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_42_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_43_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_44_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_45_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_46_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_47_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_48_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_49_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_50_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_51_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_52_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_53_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_54_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_55_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_56_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_57_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_58_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_59_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_60_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_61_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_62_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_63_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_64_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_65_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_66_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_67_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_68_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_69_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_70_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_71_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_72_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_73_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_74_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_75_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_76_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_77_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_78_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_79_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_80_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_81_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_83_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_84_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_85_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_86_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_87_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_88_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_89_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_90_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_91_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_92_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_93_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_94_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_95_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_96_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_97_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_98_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_99_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_101_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_103_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_104_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_105_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_107_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_109_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_116_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_118_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_119_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_120_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_121_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_122_1381281822.05887' 
    capture_lex $P5102 
    .const 'Sub' $P5102 = 'cuid_123_1381281822.05887' 
    capture_lex $P5102 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .lex "$cur_handle", $P103 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P103, $P5001
    .const 'Sub' $P5002 = 'cuid_2_1381281822.05887' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_3_1381281822.05887' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_4_1381281822.05887' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_5_1381281822.05887' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_6_1381281822.05887' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_7_1381281822.05887' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_8_1381281822.05887' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_9_1381281822.05887' 
    capture_lex $P5009
    box $P5010, 0
    set $P103, $P5010
    .const 'Sub' $P5011 = 'cuid_10_1381281822.05887' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_11_1381281822.05887' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_13_1381281822.05887' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_16_1381281822.05887' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_17_1381281822.05887' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_18_1381281822.05887' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_19_1381281822.05887' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_20_1381281822.05887' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_21_1381281822.05887' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_24_1381281822.05887' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_26_1381281822.05887' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_27_1381281822.05887' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_29_1381281822.05887' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_30_1381281822.05887' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_31_1381281822.05887' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_32_1381281822.05887' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_33_1381281822.05887' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_37_1381281822.05887' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_38_1381281822.05887' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_40_1381281822.05887' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_41_1381281822.05887' 
    capture_lex $P5031
    .const 'Sub' $P5032 = 'cuid_42_1381281822.05887' 
    capture_lex $P5032
    .const 'Sub' $P5033 = 'cuid_43_1381281822.05887' 
    capture_lex $P5033
    .const 'Sub' $P5034 = 'cuid_44_1381281822.05887' 
    capture_lex $P5034
    .const 'Sub' $P5035 = 'cuid_45_1381281822.05887' 
    capture_lex $P5035
    .const 'Sub' $P5036 = 'cuid_46_1381281822.05887' 
    capture_lex $P5036
    .const 'Sub' $P5037 = 'cuid_47_1381281822.05887' 
    capture_lex $P5037
    .const 'Sub' $P5038 = 'cuid_48_1381281822.05887' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_49_1381281822.05887' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_50_1381281822.05887' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_51_1381281822.05887' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_52_1381281822.05887' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_53_1381281822.05887' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_54_1381281822.05887' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_55_1381281822.05887' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_56_1381281822.05887' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_57_1381281822.05887' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_58_1381281822.05887' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_59_1381281822.05887' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_60_1381281822.05887' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_61_1381281822.05887' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_62_1381281822.05887' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_63_1381281822.05887' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_64_1381281822.05887' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_65_1381281822.05887' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_66_1381281822.05887' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_67_1381281822.05887' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_68_1381281822.05887' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_69_1381281822.05887' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_70_1381281822.05887' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_71_1381281822.05887' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_72_1381281822.05887' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_73_1381281822.05887' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_74_1381281822.05887' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_75_1381281822.05887' 
    capture_lex $P5065
    .const 'Sub' $P5066 = 'cuid_76_1381281822.05887' 
    capture_lex $P5066
    .const 'Sub' $P5067 = 'cuid_77_1381281822.05887' 
    capture_lex $P5067
    .const 'Sub' $P5068 = 'cuid_78_1381281822.05887' 
    capture_lex $P5068
    .const 'Sub' $P5069 = 'cuid_79_1381281822.05887' 
    capture_lex $P5069
    .const 'Sub' $P5070 = 'cuid_80_1381281822.05887' 
    capture_lex $P5070
    .const 'Sub' $P5071 = 'cuid_81_1381281822.05887' 
    capture_lex $P5071
    .const 'Sub' $P5072 = 'cuid_83_1381281822.05887' 
    capture_lex $P5072
    .const 'Sub' $P5073 = 'cuid_84_1381281822.05887' 
    capture_lex $P5073
    .const 'Sub' $P5074 = 'cuid_85_1381281822.05887' 
    capture_lex $P5074
    .const 'Sub' $P5075 = 'cuid_86_1381281822.05887' 
    capture_lex $P5075
    .const 'Sub' $P5076 = 'cuid_87_1381281822.05887' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_88_1381281822.05887' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_89_1381281822.05887' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_90_1381281822.05887' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_91_1381281822.05887' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_92_1381281822.05887' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_93_1381281822.05887' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_94_1381281822.05887' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_95_1381281822.05887' 
    capture_lex $P5084
    .const 'Sub' $P5085 = 'cuid_96_1381281822.05887' 
    capture_lex $P5085
    .const 'Sub' $P5086 = 'cuid_97_1381281822.05887' 
    capture_lex $P5086
    .const 'Sub' $P5087 = 'cuid_98_1381281822.05887' 
    capture_lex $P5087
    .const 'Sub' $P5088 = 'cuid_99_1381281822.05887' 
    capture_lex $P5088
    .const 'Sub' $P5089 = 'cuid_101_1381281822.05887' 
    capture_lex $P5089
    .const 'Sub' $P5090 = 'cuid_103_1381281822.05887' 
    capture_lex $P5090
    .const 'Sub' $P5091 = 'cuid_104_1381281822.05887' 
    capture_lex $P5091
    .const 'Sub' $P5092 = 'cuid_105_1381281822.05887' 
    capture_lex $P5092
    .const 'Sub' $P5093 = 'cuid_107_1381281822.05887' 
    capture_lex $P5093
    .const 'Sub' $P5094 = 'cuid_109_1381281822.05887' 
    capture_lex $P5094
    .const 'Sub' $P5095 = 'cuid_116_1381281822.05887' 
    capture_lex $P5095
    .const 'Sub' $P5096 = 'cuid_118_1381281822.05887' 
    capture_lex $P5096
    .const 'Sub' $P5097 = 'cuid_119_1381281822.05887' 
    capture_lex $P5097
    .const 'Sub' $P5098 = 'cuid_120_1381281822.05887' 
    capture_lex $P5098
    .const 'Sub' $P5099 = 'cuid_121_1381281822.05887' 
    capture_lex $P5099
    .const 'Sub' $P5100 = 'cuid_122_1381281822.05887' 
    capture_lex $P5100
    .const 'Sub' $P5101 = 'cuid_123_1381281822.05887' 
    capture_lex $P5101
    .return ($P5101) 
.end
.HLL "nqp"
.namespace []
.sub "obs" :subid("cuid_2_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 46
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 :optional 
    .param int haz_param_1 :opt_flag 
    .lex "self", _lex_param_0 
    .lex "$old", _lex_param_1 
    .lex "$new", _lex_param_2 
    .lex "$when", _lex_param_3 
    if haz_param_1, default14
    box $P5003, " in Perl 6"
    set _lex_param_3, $P5003
  default14:
.annotate 'line', 47
    nqp_decontainerize $P5001, _lex_param_0
    set $S5006, _lex_param_1
    concat $S5005, "Unsupported use of ", $S5006
    concat $S5004, $S5005, ";"
    set $S5007, _lex_param_3
    concat $S5003, $S5004, $S5007
    concat $S5002, $S5003, " please use "
    set $S5008, _lex_param_2
    concat $S5001, $S5002, $S5008
    $P5002 = $P5001."panic"($S5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "throw_unrecognized_metachar" :subid("cuid_3_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 54
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$char", _lex_param_1 
.annotate 'line', 55
    nqp_decontainerize $P5001, _lex_param_0
    set $S5003, _lex_param_1
    concat $S5002, "Unrecognized regex metacharacter ", $S5003
    concat $S5001, $S5002, " (must be quoted to match literally)"
    $P5002 = $P5001."panic"($S5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "throw_null_pattern" :subid("cuid_4_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 58
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 59
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."panic"("Null regex not allowed")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "ws" :subid("cuid_5_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 62
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx12_start
    .local string rx12_tgt
    .local int rx12_pos
    .local int rx12_off
    .local int rx12_eos
    .local int rx12_rep
    .local pmc rx12_cur
    .local pmc rx12_curclass
    .local pmc rx12_bstack
    .local pmc rx12_cstack
    rx12_start = self."!cursor_start_all"()
    set rx12_cur, rx12_start[0]
    set rx12_tgt, rx12_start[1]
    set rx12_pos, rx12_start[2]
    set rx12_curclass, rx12_start[3]
    set rx12_bstack, rx12_start[4]
    set $I19, rx12_start[5]
    store_lex unicode:"$\x{a2}", rx12_cur
    length rx12_eos, rx12_tgt
    eq $I19, 1, rx12_restart17
    gt rx12_pos, rx12_eos, rx12_fail18
    repr_get_attr_int $I11, self, rx12_curclass, "$!from"
    ne $I11, -1, rxscan13_done24
    goto rxscan13_scan23
  rxscan13_loop22:
    inc rx12_pos
    gt rx12_pos, rx12_eos, rx12_fail18
    repr_bind_attr_int rx12_cur, rx12_curclass, "$!from", rx12_pos
  rxscan13_scan23:
    nqp_rxmark rx12_bstack, rxscan13_loop22, rx12_pos, 0
  rxscan13_done24:
    nqp_rxmark rx12_bstack, rxquantr14_done26, rx12_pos, 0
  rxquantr14_loop25:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt15_028
    nqp_push_label $P11, alt15_131
    nqp_rxmark rx12_bstack, alt15_end27, -1, 0
    rx12_cur."!alt"(rx12_pos, "alt_nfa__1_1381281822.25451", $P11)
    goto rx12_fail18
  alt15_028:
    nqp_rxmark rx12_bstack, rxquantr16_done30, -1, 0
  rxquantr16_loop29:
    ge rx12_pos, rx12_eos, rx12_fail18
    is_cclass $I11, .CCLASS_WHITESPACE, rx12_tgt, rx12_pos
    unless $I11, rx12_fail18
    add rx12_pos, 1
    nqp_rxpeek $I19, rx12_bstack, rxquantr16_done30
    inc $I19
    inc $I19
    set rx12_rep, rx12_bstack[$I19]
    nqp_rxcommit rx12_bstack, rxquantr16_done30
    inc rx12_rep
    nqp_rxmark rx12_bstack, rxquantr16_done30, rx12_pos, rx12_rep
    goto rxquantr16_loop29
  rxquantr16_done30:
    goto alt15_end27
  alt15_131:
    add $I11, rx12_pos, 1
    gt $I11, rx12_eos, rx12_fail18
    substr $S10, rx12_tgt, rx12_pos, 1
    ne $S10, ucs4:"#", rx12_fail18
    add rx12_pos, 1
    nqp_rxmark rx12_bstack, rxquantr17_done33, rx12_pos, 0
  rxquantr17_loop32:
    ge rx12_pos, rx12_eos, rx12_fail18
    is_cclass $I11, .CCLASS_NEWLINE, rx12_tgt, rx12_pos
    if $I11, rx12_fail18
    substr $S10, rx12_tgt, rx12_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx12_pos, $I11
    add rx12_pos, 1
    nqp_rxpeek $I19, rx12_bstack, rxquantr17_done33
    inc $I19
    inc $I19
    set rx12_rep, rx12_bstack[$I19]
    nqp_rxcommit rx12_bstack, rxquantr17_done33
    inc rx12_rep
    nqp_rxmark rx12_bstack, rxquantr17_done33, rx12_pos, rx12_rep
    goto rxquantr17_loop32
  rxquantr17_done33:
    goto alt15_end27
  alt15_end27:
    nqp_rxpeek $I19, rx12_bstack, rxquantr14_done26
    inc $I19
    inc $I19
    set rx12_rep, rx12_bstack[$I19]
    nqp_rxcommit rx12_bstack, rxquantr14_done26
    inc rx12_rep
    nqp_rxmark rx12_bstack, rxquantr14_done26, rx12_pos, rx12_rep
    goto rxquantr14_loop25
  rxquantr14_done26:
    rx12_cur."!cursor_pass"(rx12_pos, "ws", 'backtrack'=>1)
    .return (rx12_cur)
  rx12_restart17:
    repr_get_attr_obj rx12_cstack, rx12_cur, rx12_curclass, "$!cstack"
  rx12_fail18:
    unless rx12_bstack, rx12_done16
    pop $I19, rx12_bstack
    if_null rx12_cstack, rx12_cstack_done21
    unless rx12_cstack, rx12_cstack_done21
    dec $I19
    set $P11, rx12_cstack[$I19]
  rx12_cstack_done21:
    pop rx12_rep, rx12_bstack
    pop rx12_pos, rx12_bstack
    pop $I19, rx12_bstack
    lt rx12_pos, -1, rx12_done16
    lt rx12_pos, 0, rx12_fail18
    eq $I19, 0, rx12_fail18
    nqp_islist $I20, rx12_cstack
    unless $I20, rx12_jump19
    elements $I18, rx12_bstack
    le $I18, 0, rx12_cut20
    dec $I18
    set $I18, rx12_bstack[$I18]
  rx12_cut20:
    assign rx12_cstack, $I18
  rx12_jump19:
    jump $I19
  rx12_done16:
    rx12_cur."!cursor_fail"()
    .return (rx12_cur) 
.end
.HLL "nqp"
.namespace []
.sub "normspace" :subid("cuid_6_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 64
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx18_start
    .local string rx18_tgt
    .local int rx18_pos
    .local int rx18_off
    .local int rx18_eos
    .local int rx18_rep
    .local pmc rx18_cur
    .local pmc rx18_curclass
    .local pmc rx18_bstack
    .local pmc rx18_cstack
    rx18_start = self."!cursor_start_all"()
    set rx18_cur, rx18_start[0]
    set rx18_tgt, rx18_start[1]
    set rx18_pos, rx18_start[2]
    set rx18_curclass, rx18_start[3]
    set rx18_bstack, rx18_start[4]
    set $I19, rx18_start[5]
    store_lex unicode:"$\x{a2}", rx18_cur
    length rx18_eos, rx18_tgt
    eq $I19, 1, rx18_restart36
    gt rx18_pos, rx18_eos, rx18_fail37
    repr_get_attr_int $I11, self, rx18_curclass, "$!from"
    ne $I11, -1, rxscan19_done43
    goto rxscan19_scan42
  rxscan19_loop41:
    inc rx18_pos
    gt rx18_pos, rx18_eos, rx18_fail37
    repr_bind_attr_int rx18_cur, rx18_curclass, "$!from", rx18_pos
  rxscan19_scan42:
    nqp_rxmark rx18_bstack, rxscan19_loop41, rx18_pos, 0
  rxscan19_done43:
  alt20_045:
    nqp_rxmark rx18_bstack, alt20_146, rx18_pos, 0
    ge rx18_pos, rx18_eos, rx18_fail37
    is_cclass $I11, .CCLASS_WHITESPACE, rx18_tgt, rx18_pos
    unless $I11, rx18_fail37
    add rx18_pos, 1
    goto alt20_end44
  alt20_146:
    ge rx18_pos, rx18_eos, rx18_fail37
    substr $S11, rx18_tgt, rx18_pos, 1
    index $I11, ucs4:"#", $S11
    lt $I11, 0, rx18_fail37
    inc rx18_pos
  alt20_end44:
    repr_bind_attr_int rx18_cur, rx18_curclass, "$!pos", rx18_pos
    $P11 = rx18_cur."ws"()
    repr_get_attr_int $I11, $P11, rx18_curclass, "$!pos"
    lt $I11, 0, rx18_fail37
    repr_get_attr_int rx18_pos, $P11, rx18_curclass, "$!pos"
    rx18_cur."!cursor_pass"(rx18_pos, "normspace", 'backtrack'=>1)
    .return (rx18_cur)
  rx18_restart36:
    repr_get_attr_obj rx18_cstack, rx18_cur, rx18_curclass, "$!cstack"
  rx18_fail37:
    unless rx18_bstack, rx18_done35
    pop $I19, rx18_bstack
    if_null rx18_cstack, rx18_cstack_done40
    unless rx18_cstack, rx18_cstack_done40
    dec $I19
    set $P11, rx18_cstack[$I19]
  rx18_cstack_done40:
    pop rx18_rep, rx18_bstack
    pop rx18_pos, rx18_bstack
    pop $I19, rx18_bstack
    lt rx18_pos, -1, rx18_done35
    lt rx18_pos, 0, rx18_fail37
    eq $I19, 0, rx18_fail37
    nqp_islist $I20, rx18_cstack
    unless $I20, rx18_jump38
    elements $I18, rx18_bstack
    le $I18, 0, rx18_cut39
    dec $I18
    set $I18, rx18_bstack[$I18]
  rx18_cut39:
    assign rx18_cstack, $I18
  rx18_jump38:
    jump $I19
  rx18_done35:
    rx18_cur."!cursor_fail"()
    .return (rx18_cur) 
.end
.HLL "nqp"
.namespace []
.sub "identifier" :subid("cuid_7_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 66
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx22_start
    .local string rx22_tgt
    .local int rx22_pos
    .local int rx22_off
    .local int rx22_eos
    .local int rx22_rep
    .local pmc rx22_cur
    .local pmc rx22_curclass
    .local pmc rx22_bstack
    .local pmc rx22_cstack
    rx22_start = self."!cursor_start_all"()
    set rx22_cur, rx22_start[0]
    set rx22_tgt, rx22_start[1]
    set rx22_pos, rx22_start[2]
    set rx22_curclass, rx22_start[3]
    set rx22_bstack, rx22_start[4]
    set $I19, rx22_start[5]
    store_lex unicode:"$\x{a2}", rx22_cur
    length rx22_eos, rx22_tgt
    eq $I19, 1, rx22_restart50
    gt rx22_pos, rx22_eos, rx22_fail51
    repr_get_attr_int $I11, self, rx22_curclass, "$!from"
    ne $I11, -1, rxscan23_done57
    goto rxscan23_scan56
  rxscan23_loop55:
    inc rx22_pos
    gt rx22_pos, rx22_eos, rx22_fail51
    repr_bind_attr_int rx22_cur, rx22_curclass, "$!from", rx22_pos
  rxscan23_scan56:
    nqp_rxmark rx22_bstack, rxscan23_loop55, rx22_pos, 0
  rxscan23_done57:
    repr_bind_attr_int rx22_cur, rx22_curclass, "$!pos", rx22_pos
    $P11 = rx22_cur."ident"()
    repr_get_attr_int $I11, $P11, rx22_curclass, "$!pos"
    lt $I11, 0, rx22_fail51
    repr_get_attr_int rx22_pos, $P11, rx22_curclass, "$!pos"
    nqp_rxmark rx22_bstack, rxquantr25_done60, rx22_pos, 0
  rxquantr25_loop59:
    ge rx22_pos, rx22_eos, rx22_fail51
    substr $S11, rx22_tgt, rx22_pos, 1
    index $I11, ucs4:"-'", $S11
    lt $I11, 0, rx22_fail51
    inc rx22_pos
    repr_bind_attr_int rx22_cur, rx22_curclass, "$!pos", rx22_pos
    $P11 = rx22_cur."ident"()
    repr_get_attr_int $I11, $P11, rx22_curclass, "$!pos"
    lt $I11, 0, rx22_fail51
    repr_get_attr_int rx22_pos, $P11, rx22_curclass, "$!pos"
    nqp_rxpeek $I19, rx22_bstack, rxquantr25_done60
    inc $I19
    inc $I19
    set rx22_rep, rx22_bstack[$I19]
    nqp_rxcommit rx22_bstack, rxquantr25_done60
    inc rx22_rep
    nqp_rxmark rx22_bstack, rxquantr25_done60, rx22_pos, rx22_rep
    goto rxquantr25_loop59
  rxquantr25_done60:
    rx22_cur."!cursor_pass"(rx22_pos, "identifier", 'backtrack'=>1)
    .return (rx22_cur)
  rx22_restart50:
    repr_get_attr_obj rx22_cstack, rx22_cur, rx22_curclass, "$!cstack"
  rx22_fail51:
    unless rx22_bstack, rx22_done49
    pop $I19, rx22_bstack
    if_null rx22_cstack, rx22_cstack_done54
    unless rx22_cstack, rx22_cstack_done54
    dec $I19
    set $P11, rx22_cstack[$I19]
  rx22_cstack_done54:
    pop rx22_rep, rx22_bstack
    pop rx22_pos, rx22_bstack
    pop $I19, rx22_bstack
    lt rx22_pos, -1, rx22_done49
    lt rx22_pos, 0, rx22_fail51
    eq $I19, 0, rx22_fail51
    nqp_islist $I20, rx22_cstack
    unless $I20, rx22_jump52
    elements $I18, rx22_bstack
    le $I18, 0, rx22_cut53
    dec $I18
    set $I18, rx22_bstack[$I18]
  rx22_cut53:
    assign rx22_cstack, $I18
  rx22_jump52:
    jump $I19
  rx22_done49:
    rx22_cur."!cursor_fail"()
    .return (rx22_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_8_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 68
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx27_start
    .local string rx27_tgt
    .local int rx27_pos
    .local int rx27_off
    .local int rx27_eos
    .local int rx27_rep
    .local pmc rx27_cur
    .local pmc rx27_curclass
    .local pmc rx27_bstack
    .local pmc rx27_cstack
    rx27_start = self."!cursor_start_all"()
    set rx27_cur, rx27_start[0]
    set rx27_tgt, rx27_start[1]
    set rx27_pos, rx27_start[2]
    set rx27_curclass, rx27_start[3]
    set rx27_bstack, rx27_start[4]
    set $I19, rx27_start[5]
    store_lex unicode:"$\x{a2}", rx27_cur
    length rx27_eos, rx27_tgt
    eq $I19, 1, rx27_restart64
    gt rx27_pos, rx27_eos, rx27_fail65
    repr_get_attr_int $I11, self, rx27_curclass, "$!from"
    ne $I11, -1, rxscan28_done71
    goto rxscan28_scan70
  rxscan28_loop69:
    inc rx27_pos
    gt rx27_pos, rx27_eos, rx27_fail65
    repr_bind_attr_int rx27_cur, rx27_curclass, "$!from", rx27_pos
  rxscan28_scan70:
    nqp_rxmark rx27_bstack, rxscan28_loop69, rx27_pos, 0
  rxscan28_done71:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt29_073
    nqp_push_label $P11, alt29_175
    nqp_push_label $P11, alt29_277
    nqp_rxmark rx27_bstack, alt29_end72, -1, 0
    rx27_cur."!alt"(rx27_pos, "alt_nfa__2_1381281822.28975", $P11)
    goto rx27_fail65
  alt29_073:
    ge rx27_pos, rx27_eos, rx27_fail65
    substr $S11, rx27_tgt, rx27_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx27_fail65
    repr_bind_attr_int rx27_cur, rx27_curclass, "$!pos", rx27_pos
    $P11 = rx27_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx27_curclass, "$!pos"
    lt $I11, 0, rx27_fail65
    nqp_rxmark rx27_bstack, rxsubrule30_pass74, -1, 0
  rxsubrule30_pass74:
    rx27_cstack = rx27_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx27_pos, $P11, rx27_curclass, "$!pos"
    goto alt29_end72
  alt29_175:
    ge rx27_pos, rx27_eos, rx27_fail65
    substr $S11, rx27_tgt, rx27_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx27_fail65
    repr_bind_attr_int rx27_cur, rx27_curclass, "$!pos", rx27_pos
    $P11 = rx27_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx27_curclass, "$!pos"
    lt $I11, 0, rx27_fail65
    nqp_rxmark rx27_bstack, rxsubrule31_pass76, -1, 0
  rxsubrule31_pass76:
    rx27_cstack = rx27_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx27_pos, $P11, rx27_curclass, "$!pos"
    goto alt29_end72
  alt29_277:
    nqp_rxmark rx27_bstack, rxcap32_fail79, rx27_pos, 0
    nqp_rxmark rx27_bstack, rxquantr33_done81, -1, 0
  rxquantr33_loop80:
    ge rx27_pos, rx27_eos, rx27_fail65
    is_cclass $I11, .CCLASS_NUMERIC, rx27_tgt, rx27_pos
    unless $I11, rx27_fail65
    add rx27_pos, 1
    nqp_rxpeek $I19, rx27_bstack, rxquantr33_done81
    inc $I19
    inc $I19
    set rx27_rep, rx27_bstack[$I19]
    nqp_rxcommit rx27_bstack, rxquantr33_done81
    inc rx27_rep
    nqp_rxmark rx27_bstack, rxquantr33_done81, rx27_pos, rx27_rep
    goto rxquantr33_loop80
  rxquantr33_done81:
    nqp_rxpeek $I19, rx27_bstack, rxcap32_fail79
    inc $I19
    set $I11, rx27_bstack[$I19]
    repr_bind_attr_int rx27_cur, rx27_curclass, "$!pos", rx27_pos
    $P11 = rx27_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx27_pos)
    rx27_cstack = rx27_cur."!cursor_capture"($P11, "val")
    goto rxcap32_done78
  rxcap32_fail79:
    goto rx27_fail65
  rxcap32_done78:
    goto alt29_end72
  alt29_end72:
    nqp_rxcommit rx27_bstack, alt29_end72
    rx27_cur."!cursor_pass"(rx27_pos, "arg", 'backtrack'=>1)
    .return (rx27_cur)
  rx27_restart64:
    repr_get_attr_obj rx27_cstack, rx27_cur, rx27_curclass, "$!cstack"
  rx27_fail65:
    unless rx27_bstack, rx27_done63
    pop $I19, rx27_bstack
    if_null rx27_cstack, rx27_cstack_done68
    unless rx27_cstack, rx27_cstack_done68
    dec $I19
    set $P11, rx27_cstack[$I19]
  rx27_cstack_done68:
    pop rx27_rep, rx27_bstack
    pop rx27_pos, rx27_bstack
    pop $I19, rx27_bstack
    lt rx27_pos, -1, rx27_done63
    lt rx27_pos, 0, rx27_fail65
    eq $I19, 0, rx27_fail65
    nqp_islist $I20, rx27_cstack
    unless $I20, rx27_jump66
    elements $I18, rx27_bstack
    le $I18, 0, rx27_cut67
    dec $I18
    set $I18, rx27_bstack[$I18]
  rx27_cut67:
    assign rx27_cstack, $I18
  rx27_jump66:
    jump $I19
  rx27_done63:
    rx27_cur."!cursor_fail"()
    .return (rx27_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_9_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 76
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx34_start
    .local string rx34_tgt
    .local int rx34_pos
    .local int rx34_off
    .local int rx34_eos
    .local int rx34_rep
    .local pmc rx34_cur
    .local pmc rx34_curclass
    .local pmc rx34_bstack
    .local pmc rx34_cstack
    rx34_start = self."!cursor_start_all"()
    set rx34_cur, rx34_start[0]
    set rx34_tgt, rx34_start[1]
    set rx34_pos, rx34_start[2]
    set rx34_curclass, rx34_start[3]
    set rx34_bstack, rx34_start[4]
    set $I19, rx34_start[5]
    store_lex unicode:"$\x{a2}", rx34_cur
    length rx34_eos, rx34_tgt
    eq $I19, 1, rx34_restart84
    gt rx34_pos, rx34_eos, rx34_fail85
    repr_get_attr_int $I11, self, rx34_curclass, "$!from"
    ne $I11, -1, rxscan35_done91
    goto rxscan35_scan90
  rxscan35_loop89:
    inc rx34_pos
    gt rx34_pos, rx34_eos, rx34_fail85
    repr_bind_attr_int rx34_cur, rx34_curclass, "$!from", rx34_pos
  rxscan35_scan90:
    nqp_rxmark rx34_bstack, rxscan35_loop89, rx34_pos, 0
  rxscan35_done91:
    repr_bind_attr_int rx34_cur, rx34_curclass, "$!pos", rx34_pos
    $P11 = rx34_cur."ws"()
    repr_get_attr_int $I11, $P11, rx34_curclass, "$!pos"
    lt $I11, 0, rx34_fail85
    repr_get_attr_int rx34_pos, $P11, rx34_curclass, "$!pos"
    repr_bind_attr_int rx34_cur, rx34_curclass, "$!pos", rx34_pos
    $P11 = rx34_cur."arg"()
    repr_get_attr_int $I11, $P11, rx34_curclass, "$!pos"
    lt $I11, 0, rx34_fail85
    nqp_rxmark rx34_bstack, rxsubrule37_pass93, -1, 0
  rxsubrule37_pass93:
    rx34_cstack = rx34_cur."!cursor_capture"($P11, "arg")
    repr_get_attr_int rx34_pos, $P11, rx34_curclass, "$!pos"
    repr_bind_attr_int rx34_cur, rx34_curclass, "$!pos", rx34_pos
    $P11 = rx34_cur."ws"()
    repr_get_attr_int $I11, $P11, rx34_curclass, "$!pos"
    lt $I11, 0, rx34_fail85
    repr_get_attr_int rx34_pos, $P11, rx34_curclass, "$!pos"
    nqp_rxmark rx34_bstack, rxquantr39_done96, rx34_pos, 0
  rxquantr39_loop95:
    repr_bind_attr_int rx34_cur, rx34_curclass, "$!pos", rx34_pos
    $P11 = rx34_cur."ws"()
    repr_get_attr_int $I11, $P11, rx34_curclass, "$!pos"
    lt $I11, 0, rx34_fail85
    repr_get_attr_int rx34_pos, $P11, rx34_curclass, "$!pos"
    add $I11, rx34_pos, 1
    gt $I11, rx34_eos, rx34_fail85
    substr $S10, rx34_tgt, rx34_pos, 1
    ne $S10, ucs4:",", rx34_fail85
    add rx34_pos, 1
    repr_bind_attr_int rx34_cur, rx34_curclass, "$!pos", rx34_pos
    $P11 = rx34_cur."ws"()
    repr_get_attr_int $I11, $P11, rx34_curclass, "$!pos"
    lt $I11, 0, rx34_fail85
    repr_get_attr_int rx34_pos, $P11, rx34_curclass, "$!pos"
    repr_bind_attr_int rx34_cur, rx34_curclass, "$!pos", rx34_pos
    $P11 = rx34_cur."arg"()
    repr_get_attr_int $I11, $P11, rx34_curclass, "$!pos"
    lt $I11, 0, rx34_fail85
    nqp_rxmark rx34_bstack, rxsubrule42_pass99, -1, 0
  rxsubrule42_pass99:
    rx34_cstack = rx34_cur."!cursor_capture"($P11, "arg")
    repr_get_attr_int rx34_pos, $P11, rx34_curclass, "$!pos"
    nqp_rxpeek $I19, rx34_bstack, rxquantr39_done96
    inc $I19
    inc $I19
    set rx34_rep, rx34_bstack[$I19]
    nqp_rxcommit rx34_bstack, rxquantr39_done96
    inc rx34_rep
    nqp_rxmark rx34_bstack, rxquantr39_done96, rx34_pos, rx34_rep
    goto rxquantr39_loop95
  rxquantr39_done96:
    repr_bind_attr_int rx34_cur, rx34_curclass, "$!pos", rx34_pos
    $P11 = rx34_cur."ws"()
    repr_get_attr_int $I11, $P11, rx34_curclass, "$!pos"
    lt $I11, 0, rx34_fail85
    repr_get_attr_int rx34_pos, $P11, rx34_curclass, "$!pos"
    rx34_cur."!cursor_pass"(rx34_pos, "arglist", 'backtrack'=>1)
    .return (rx34_cur)
  rx34_restart84:
    repr_get_attr_obj rx34_cstack, rx34_cur, rx34_curclass, "$!cstack"
  rx34_fail85:
    unless rx34_bstack, rx34_done83
    pop $I19, rx34_bstack
    if_null rx34_cstack, rx34_cstack_done88
    unless rx34_cstack, rx34_cstack_done88
    dec $I19
    set $P11, rx34_cstack[$I19]
  rx34_cstack_done88:
    pop rx34_rep, rx34_bstack
    pop rx34_pos, rx34_bstack
    pop $I19, rx34_bstack
    lt rx34_pos, -1, rx34_done83
    lt rx34_pos, 0, rx34_fail85
    eq $I19, 0, rx34_fail85
    nqp_islist $I20, rx34_cstack
    unless $I20, rx34_jump86
    elements $I18, rx34_bstack
    le $I18, 0, rx34_cut87
    dec $I18
    set $I18, rx34_bstack[$I18]
  rx34_cut87:
    assign rx34_cstack, $I18
  rx34_jump86:
    jump $I19
  rx34_done83:
    rx34_cur."!cursor_fail"()
    .return (rx34_cur) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_10_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 79
    .param pmc _lex_param_0 
    .lex "%*RX", $P101 
    .lex "$handle", $P102 
    .lex "$*W", $P103 
    .lex utf8:"$\x{a2}", $P104 
    .lex "$/", $P105 
    .lex "self", _lex_param_0 
    .local pmc self 
    .local pmc fb_tmp_1 
    .local pmc pkg_viv_tmp_1 
    .local pmc tmp_1 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P103, $P5003
    set self, _lex_param_0
    .local pmc rx44_start
    .local string rx44_tgt
    .local int rx44_pos
    .local int rx44_off
    .local int rx44_eos
    .local int rx44_rep
    .local pmc rx44_cur
    .local pmc rx44_curclass
    .local pmc rx44_bstack
    .local pmc rx44_cstack
    rx44_start = self."!cursor_start_all"()
    set rx44_cur, rx44_start[0]
    set rx44_tgt, rx44_start[1]
    set rx44_pos, rx44_start[2]
    set rx44_curclass, rx44_start[3]
    set rx44_bstack, rx44_start[4]
    set $I19, rx44_start[5]
    store_lex unicode:"$\x{a2}", rx44_cur
    length rx44_eos, rx44_tgt
    eq $I19, 1, rx44_restart103
    gt rx44_pos, rx44_eos, rx44_fail104
    repr_get_attr_int $I11, self, rx44_curclass, "$!from"
    ne $I11, -1, rxscan45_done110
    goto rxscan45_scan109
  rxscan45_loop108:
    inc rx44_pos
    gt rx44_pos, rx44_eos, rx44_fail104
    repr_bind_attr_int rx44_cur, rx44_curclass, "$!from", rx44_pos
  rxscan45_scan109:
    nqp_rxmark rx44_bstack, rxscan45_loop108, rx44_pos, 0
  rxscan45_done110:
    repr_bind_attr_int rx44_cur, rx44_curclass, "$!pos", rx44_pos
    store_lex unicode:"$\x{a2}", rx44_cur
    unless_null $P101, fallback111
    nqp_get_sc_object $P5005, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 0
    get_who $P5004, $P5005
    set pkg_viv_tmp_1, $P5004
    set fb_tmp_1, pkg_viv_tmp_1
    repr_defined $I5001, fb_tmp_1
    unless $I5001 goto if46_else112 
    set $P5006, fb_tmp_1["%RX"]
    set $P5008, $P5006
    goto if46_end113
  if46_else112:
    null $P5007
    set $P5008, $P5007
  if46_end113:
    unless_null $P5008, vivi_47114
    new $P5009, 'Hash'
    set pkg_viv_tmp_1["%RX"], $P5009
    set $P5008, $P5009
  vivi_47114:
    unless_null $P5008, vivi_48115
    die "Contextual %*RX not found"
    box $P5010, "Contextual %*RX not found"
    set $P5008, $P5010
  vivi_48115:
    set $P101, $P5008
  fallback111:
    repr_bind_attr_int rx44_cur, rx44_curclass, "$!pos", rx44_pos
    store_lex unicode:"$\x{a2}", rx44_cur
    find_lex $P5011, "$cur_handle"
    set tmp_1, $P5011
    set $N5002, tmp_1
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5012, $N5001
    store_lex "$cur_handle", $P5012
    set $S5002, tmp_1
    concat $S5001, "__QREGEX_P6REGEX__", $S5002
    box $P5011, $S5001
    set $P102, $P5011
    repr_bind_attr_int rx44_cur, rx44_curclass, "$!pos", rx44_pos
    store_lex unicode:"$\x{a2}", rx44_cur
.annotate 'line', 82
    nqp_get_sc_object $P5012, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 3
    $P5013 = $P5012."new"($P102 :named("handle"))
    set $P103, $P5013
    repr_bind_attr_int rx44_cur, rx44_curclass, "$!pos", rx44_pos
    $P11 = rx44_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx44_curclass, "$!pos"
    lt $I11, 0, rx44_fail104
    nqp_rxmark rx44_bstack, rxsubrule49_pass116, -1, 0
  rxsubrule49_pass116:
    rx44_cstack = rx44_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx44_pos, $P11, rx44_curclass, "$!pos"
  alt50_0118:
    nqp_rxmark rx44_bstack, alt50_1120, rx44_pos, 0
    lt rx44_pos, rx44_eos, rx44_fail104
    goto alt50_end117
  alt50_1120:
    repr_bind_attr_int rx44_cur, rx44_curclass, "$!pos", rx44_pos
    $P11 = rx44_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx44_curclass, "$!pos"
    lt $I11, 0, rx44_fail104
    repr_get_attr_int rx44_pos, $P11, rx44_curclass, "$!pos"
  alt50_end117:
    rx44_cur."!cursor_pass"(rx44_pos, "TOP", 'backtrack'=>1)
    .return (rx44_cur)
  rx44_restart103:
    repr_get_attr_obj rx44_cstack, rx44_cur, rx44_curclass, "$!cstack"
  rx44_fail104:
    unless rx44_bstack, rx44_done102
    pop $I19, rx44_bstack
    if_null rx44_cstack, rx44_cstack_done107
    unless rx44_cstack, rx44_cstack_done107
    dec $I19
    set $P11, rx44_cstack[$I19]
  rx44_cstack_done107:
    pop rx44_rep, rx44_bstack
    pop rx44_pos, rx44_bstack
    pop $I19, rx44_bstack
    lt rx44_pos, -1, rx44_done102
    lt rx44_pos, 0, rx44_fail104
    eq $I19, 0, rx44_fail104
    nqp_islist $I20, rx44_cstack
    unless $I20, rx44_jump105
    elements $I18, rx44_bstack
    le $I18, 0, rx44_cut106
    dec $I18
    set $I18, rx44_bstack[$I18]
  rx44_cut106:
    assign rx44_cstack, $I18
  rx44_jump105:
    jump $I19
  rx44_done102:
    rx44_cur."!cursor_fail"()
    .return (rx44_cur) 
.end
.HLL "nqp"
.namespace []
.sub "nibbler" :subid("cuid_11_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 87
    .param pmc _lex_param_0 
    .const 'Sub' $P5023 = 'cuid_206_1381281822.05887' 
    capture_lex $P5023 
    .const 'Sub' $P5023 = 'cuid_207_1381281822.05887' 
    capture_lex $P5023 
    .const 'Sub' $P5023 = 'cuid_12_1381281822.05887' 
    capture_lex $P5023 
    .const 'Sub' $P5023 = 'cuid_208_1381281822.05887' 
    capture_lex $P5023 
    .lex "$OLDRX", $P101 
    .lex "%*RX", $P102 
    .lex "$*SEQ", $P103 
    .lex utf8:"$\x{a2}", $P104 
    .lex "$/", $P105 
    .lex "self", _lex_param_0 
    .local pmc self 
    .local pmc fb_tmp_2 
    .local pmc pkg_viv_tmp_2 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P103, $P5003
    set self, _lex_param_0
    .local pmc rx53_start
    .local string rx53_tgt
    .local int rx53_pos
    .local int rx53_off
    .local int rx53_eos
    .local int rx53_rep
    .local pmc rx53_cur
    .local pmc rx53_curclass
    .local pmc rx53_bstack
    .local pmc rx53_cstack
    rx53_start = self."!cursor_start_all"()
    set rx53_cur, rx53_start[0]
    set rx53_tgt, rx53_start[1]
    set rx53_pos, rx53_start[2]
    set rx53_curclass, rx53_start[3]
    set rx53_bstack, rx53_start[4]
    set $I19, rx53_start[5]
    store_lex unicode:"$\x{a2}", rx53_cur
    length rx53_eos, rx53_tgt
    eq $I19, 1, rx53_restart124
    gt rx53_pos, rx53_eos, rx53_fail125
    repr_get_attr_int $I11, self, rx53_curclass, "$!from"
    ne $I11, -1, rxscan54_done131
    goto rxscan54_scan130
  rxscan54_loop129:
    inc rx53_pos
    gt rx53_pos, rx53_eos, rx53_fail125
    repr_bind_attr_int rx53_cur, rx53_curclass, "$!from", rx53_pos
  rxscan54_scan130:
    nqp_rxmark rx53_bstack, rxscan54_loop129, rx53_pos, 0
  rxscan54_done131:
    repr_bind_attr_int rx53_cur, rx53_curclass, "$!pos", rx53_pos
    store_lex unicode:"$\x{a2}", rx53_cur
    find_dynamic_lex $P5004, "%*RX"
    set $P101, $P5004
    repr_bind_attr_int rx53_cur, rx53_curclass, "$!pos", rx53_pos
    store_lex unicode:"$\x{a2}", rx53_cur
    unless_null $P102, fallback132
    nqp_get_sc_object $P5006, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 0
    get_who $P5005, $P5006
    set pkg_viv_tmp_2, $P5005
    set fb_tmp_2, pkg_viv_tmp_2
    repr_defined $I5001, fb_tmp_2
    unless $I5001 goto if55_else133 
    set $P5007, fb_tmp_2["%RX"]
    set $P5009, $P5007
    goto if55_end134
  if55_else133:
    null $P5008
    set $P5009, $P5008
  if55_end134:
    unless_null $P5009, vivi_56135
    new $P5010, 'Hash'
    set pkg_viv_tmp_2["%RX"], $P5010
    set $P5009, $P5010
  vivi_56135:
    unless_null $P5009, vivi_57136
    die "Contextual %*RX not found"
    box $P5011, "Contextual %*RX not found"
    set $P5009, $P5011
  vivi_57136:
    set $P102, $P5009
  fallback132:
    repr_bind_attr_int rx53_cur, rx53_curclass, "$!pos", rx53_pos
    store_lex unicode:"$\x{a2}", rx53_cur
    box $P5012, 0
    set $P103, $P5012
    repr_bind_attr_int rx53_cur, rx53_curclass, "$!pos", rx53_pos
    store_lex unicode:"$\x{a2}", rx53_cur
    $P5013 = $P104."MATCH"()
    set $P105, $P5013
    .const 'Sub' $P5014 = 'cuid_206_1381281822.05887' 
    capture_lex $P5014
    $P5015 = $P5014()
    nqp_rxmark rx53_bstack, rxquantr61_done146, rx53_pos, 0
  rxquantr61_loop145:
    repr_bind_attr_int rx53_cur, rx53_curclass, "$!pos", rx53_pos
    $P11 = rx53_cur."ws"()
    repr_get_attr_int $I11, $P11, rx53_curclass, "$!pos"
    lt $I11, 0, rx53_fail125
    repr_get_attr_int rx53_pos, $P11, rx53_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt63_0149
    nqp_push_label $P11, alt63_1150
    nqp_push_label $P11, alt63_2151
    nqp_push_label $P11, alt63_3152
    nqp_rxmark rx53_bstack, alt63_end148, -1, 0
    rx53_cur."!alt"(rx53_pos, "alt_nfa__3_1381281822.39734", $P11)
    goto rx53_fail125
  alt63_0149:
    add $I11, rx53_pos, 2
    gt $I11, rx53_eos, rx53_fail125
    substr $S10, rx53_tgt, rx53_pos, 2
    ne $S10, ucs4:"||", rx53_fail125
    add rx53_pos, 2
    repr_bind_attr_int rx53_cur, rx53_curclass, "$!pos", rx53_pos
    store_lex unicode:"$\x{a2}", rx53_cur
    $P5016 = $P104."MATCH"()
    set $P105, $P5016
    .const 'Sub' $P5017 = 'cuid_207_1381281822.05887' 
    capture_lex $P5017
    $P5018 = $P5017()
    goto alt63_end148
  alt63_1150:
    add $I11, rx53_pos, 1
    gt $I11, rx53_eos, rx53_fail125
    substr $S10, rx53_tgt, rx53_pos, 1
    ne $S10, ucs4:"|", rx53_fail125
    add rx53_pos, 1
    goto alt63_end148
  alt63_2151:
    add $I11, rx53_pos, 2
    gt $I11, rx53_eos, rx53_fail125
    substr $S10, rx53_tgt, rx53_pos, 2
    ne $S10, ucs4:"&&", rx53_fail125
    add rx53_pos, 2
    goto alt63_end148
  alt63_3152:
    add $I11, rx53_pos, 1
    gt $I11, rx53_eos, rx53_fail125
    substr $S10, rx53_tgt, rx53_pos, 1
    ne $S10, ucs4:"&", rx53_fail125
    add rx53_pos, 1
    goto alt63_end148
  alt63_end148:
    nqp_rxcommit rx53_bstack, alt63_end148
    nqp_rxpeek $I19, rx53_bstack, rxquantr61_done146
    inc $I19
    inc $I19
    set rx53_rep, rx53_bstack[$I19]
    nqp_rxcommit rx53_bstack, rxquantr61_done146
    inc rx53_rep
  rxquantr61_done146:
    repr_bind_attr_int rx53_cur, rx53_curclass, "$!pos", rx53_pos
    $P11 = rx53_cur."termaltseq"()
    repr_get_attr_int $I11, $P11, rx53_curclass, "$!pos"
    lt $I11, 0, rx53_fail125
    nqp_rxmark rx53_bstack, rxsubrule64_pass153, -1, 0
  rxsubrule64_pass153:
    rx53_cstack = rx53_cur."!cursor_capture"($P11, "termaltseq")
    repr_get_attr_int rx53_pos, $P11, rx53_curclass, "$!pos"
    repr_bind_attr_int rx53_cur, rx53_curclass, "$!pos", rx53_pos
    $P11 = rx53_cur."ws"()
    repr_get_attr_int $I11, $P11, rx53_curclass, "$!pos"
    lt $I11, 0, rx53_fail125
    repr_get_attr_int rx53_pos, $P11, rx53_curclass, "$!pos"
  alt66_0156:
    nqp_rxmark rx53_bstack, alt66_1157, rx53_pos, 0
    repr_bind_attr_int rx53_cur, rx53_curclass, "$!pos", rx53_pos
    $P11 = rx53_cur."infixstopper"()
    repr_get_attr_int $I11, $P11, rx53_curclass, "$!pos"
    lt $I11, 0, rx53_fail125
    goto alt66_end155
  alt66_1157:
    nqp_rxmark rx53_bstack, alt66_2160, rx53_pos, 0
    is_cclass $I11, .CCLASS_NEWLINE, rx53_tgt, rx53_pos
    if $I11, rxanchor67_done158
    ne rx53_pos, rx53_eos, rx53_fail125
    eq rx53_pos, 0, rxanchor67_done158
    sub $I11, rx53_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx53_tgt, $I11
    if $I11, rx53_fail125
  rxanchor67_done158:
    repr_bind_attr_int rx53_cur, rx53_curclass, "$!pos", rx53_pos
    $P11 = rx53_cur."panic"("Regex not terminated")
    repr_get_attr_int $I11, $P11, rx53_curclass, "$!pos"
    lt $I11, 0, rx53_fail125
    repr_get_attr_int rx53_pos, $P11, rx53_curclass, "$!pos"
    goto alt66_end155
  alt66_2160:
    nqp_rxmark rx53_bstack, alt66_3175, rx53_pos, 0
    .const 'Sub' $P5019 = 'cuid_12_1381281822.05887' 
    capture_lex $P5019
    repr_bind_attr_int rx53_cur, rx53_curclass, "$!pos", rx53_pos
    $P11 = rx53_cur.$P5019()
    repr_get_attr_int $I11, $P11, rx53_curclass, "$!pos"
    lt $I11, 0, rx53_fail125
    nqp_rxmark rx53_bstack, rxsubrule71_pass171, -1, 0
  rxsubrule71_pass171:
    rx53_cstack = rx53_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx53_pos, $P11, rx53_curclass, "$!pos"
    repr_bind_attr_int rx53_cur, rx53_curclass, "$!pos", rx53_pos
    store_lex unicode:"$\x{a2}", rx53_cur
    $P5020 = $P104."MATCH"()
    set $P105, $P5020
    .const 'Sub' $P5021 = 'cuid_208_1381281822.05887' 
    capture_lex $P5021
    $P5022 = $P5021()
    goto alt66_end155
  alt66_3175:
    repr_bind_attr_int rx53_cur, rx53_curclass, "$!pos", rx53_pos
    $P11 = rx53_cur."panic"("Regex not terminated")
    repr_get_attr_int $I11, $P11, rx53_curclass, "$!pos"
    lt $I11, 0, rx53_fail125
    repr_get_attr_int rx53_pos, $P11, rx53_curclass, "$!pos"
  alt66_end155:
    rx53_cur."!cursor_pass"(rx53_pos, "nibbler", 'backtrack'=>1)
    .return (rx53_cur)
  rx53_restart124:
    repr_get_attr_obj rx53_cstack, rx53_cur, rx53_curclass, "$!cstack"
  rx53_fail125:
    unless rx53_bstack, rx53_done123
    pop $I19, rx53_bstack
    if_null rx53_cstack, rx53_cstack_done128
    unless rx53_cstack, rx53_cstack_done128
    dec $I19
    set $P11, rx53_cstack[$I19]
  rx53_cstack_done128:
    pop rx53_rep, rx53_bstack
    pop rx53_pos, rx53_bstack
    pop $I19, rx53_bstack
    lt rx53_pos, -1, rx53_done123
    lt rx53_pos, 0, rx53_fail125
    eq $I19, 0, rx53_fail125
    nqp_islist $I20, rx53_cstack
    unless $I20, rx53_jump126
    elements $I18, rx53_bstack
    le $I18, 0, rx53_cut127
    dec $I18
    set $I18, rx53_bstack[$I18]
  rx53_cut127:
    assign rx53_cstack, $I18
  rx53_jump126:
    jump $I19
  rx53_done123:
    rx53_cur."!cursor_fail"()
    .return (rx53_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_206_1381281822.05887") :anon :lex :outer("cuid_11_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 91
    .const 'Sub' $P5007 = 'cuid_205_1381281822.05887' 
    capture_lex $P5007 
    find_lex $P5004, "$OLDRX"
    set $P5001, $P5004
    iter $P5003, $P5004
  for_next142:
    unless $P5003, for_done144
    shift $P5006, $P5003
  for_redo143:
    .const 'Sub' $P5005 = 'cuid_205_1381281822.05887' 
    capture_lex $P5005
    $P5001 = $P5005($P5006)
    goto for_next142
  for_done144:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_205_1381281822.05887") :anon :lex :outer("cuid_206_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 92
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_3 
    .local pmc pkg_viv_tmp_3 
    find_dynamic_lex $P5001, "%*RX"
    unless_null $P5001, fallback137
    nqp_get_sc_object $P5003, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 0
    get_who $P5002, $P5003
    set pkg_viv_tmp_3, $P5002
    set fb_tmp_3, pkg_viv_tmp_3
    repr_defined $I5001, fb_tmp_3
    unless $I5001 goto if58_else138 
    set $P5004, fb_tmp_3["%RX"]
    set $P5006, $P5004
    goto if58_end139
  if58_else138:
    null $P5005
    set $P5006, $P5005
  if58_end139:
    unless_null $P5006, vivi_59140
    new $P5007, 'Hash'
    set pkg_viv_tmp_3["%RX"], $P5007
    set $P5006, $P5007
  vivi_59140:
    unless_null $P5006, vivi_60141
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5006, $P5008
  vivi_60141:
    set $P5001, $P5006
  fallback137:
    $P5009 = _lex_param_0."key"()
    set $S5001, $P5009
    $P5010 = _lex_param_0."value"()
    set $P5001[$S5001], $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_207_1381281822.05887") :anon :lex :outer("cuid_11_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 95

    box $P5001, 1
    store_dynamic_lex "$*SEQ", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_12_1381281822.05887") :anon :lex :outer("cuid_11_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx69_start
    .local string rx69_tgt
    .local int rx69_pos
    .local int rx69_off
    .local int rx69_eos
    .local int rx69_rep
    .local pmc rx69_cur
    .local pmc rx69_curclass
    .local pmc rx69_bstack
    .local pmc rx69_cstack
    rx69_start = self."!cursor_start_all"()
    set rx69_cur, rx69_start[0]
    set rx69_tgt, rx69_start[1]
    set rx69_pos, rx69_start[2]
    set rx69_curclass, rx69_start[3]
    set rx69_bstack, rx69_start[4]
    set $I19, rx69_start[5]
    store_lex unicode:"$\x{a2}", rx69_cur
    length rx69_eos, rx69_tgt
    eq $I19, 1, rx69_restart163
    gt rx69_pos, rx69_eos, rx69_fail164
    repr_get_attr_int $I11, self, rx69_curclass, "$!from"
    ne $I11, -1, rxscan70_done170
    goto rxscan70_scan169
  rxscan70_loop168:
    inc rx69_pos
    gt rx69_pos, rx69_eos, rx69_fail164
    repr_bind_attr_int rx69_cur, rx69_curclass, "$!from", rx69_pos
  rxscan70_scan169:
    nqp_rxmark rx69_bstack, rxscan70_loop168, rx69_pos, 0
  rxscan70_done170:
    ge rx69_pos, rx69_eos, rx69_fail164
    is_cclass $I11, .CCLASS_WORD, rx69_tgt, rx69_pos
    if $I11, rx69_fail164
    add rx69_pos, 1
    rx69_cur."!cursor_pass"(rx69_pos, 'backtrack'=>1)
    .return (rx69_cur)
  rx69_restart163:
    repr_get_attr_obj rx69_cstack, rx69_cur, rx69_curclass, "$!cstack"
  rx69_fail164:
    unless rx69_bstack, rx69_done162
    pop $I19, rx69_bstack
    if_null rx69_cstack, rx69_cstack_done167
    unless rx69_cstack, rx69_cstack_done167
    dec $I19
    set $P11, rx69_cstack[$I19]
  rx69_cstack_done167:
    pop rx69_rep, rx69_bstack
    pop rx69_pos, rx69_bstack
    pop $I19, rx69_bstack
    lt rx69_pos, -1, rx69_done162
    lt rx69_pos, 0, rx69_fail164
    eq $I19, 0, rx69_fail164
    nqp_islist $I20, rx69_cstack
    unless $I20, rx69_jump165
    elements $I18, rx69_bstack
    le $I18, 0, rx69_cut166
    dec $I18
    set $I18, rx69_bstack[$I18]
  rx69_cut166:
    assign rx69_cstack, $I18
  rx69_jump165:
    jump $I19
  rx69_done162:
    rx69_cur."!cursor_fail"()
    .return (rx69_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_208_1381281822.05887") :anon :lex :outer("cuid_11_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 104
    .local pmc fb_tmp_4 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$/"
    set fb_tmp_4, $P5003
    repr_defined $I5001, fb_tmp_4
    unless $I5001 goto if72_else172 
    set $P5004, fb_tmp_4[0]
    set $P5006, $P5004
    goto if72_end173
  if72_else172:
    null $P5005
    set $P5006, $P5005
  if72_end173:
    unless_null $P5006, vivi_73174
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_73174:
    set $S5001, $P5006
    $P5008 = $P5001."throw_unrecognized_metachar"($S5001)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "infixstopper" :subid("cuid_13_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 109
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_14_1381281822.05887' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_15_1381281822.05887' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx75_start
    .local string rx75_tgt
    .local int rx75_pos
    .local int rx75_off
    .local int rx75_eos
    .local int rx75_rep
    .local pmc rx75_cur
    .local pmc rx75_curclass
    .local pmc rx75_bstack
    .local pmc rx75_cstack
    rx75_start = self."!cursor_start_all"()
    set rx75_cur, rx75_start[0]
    set rx75_tgt, rx75_start[1]
    set rx75_pos, rx75_start[2]
    set rx75_curclass, rx75_start[3]
    set rx75_bstack, rx75_start[4]
    set $I19, rx75_start[5]
    store_lex unicode:"$\x{a2}", rx75_cur
    length rx75_eos, rx75_tgt
    eq $I19, 1, rx75_restart179
    gt rx75_pos, rx75_eos, rx75_fail180
    repr_get_attr_int $I11, self, rx75_curclass, "$!from"
    ne $I11, -1, rxscan76_done186
    goto rxscan76_scan185
  rxscan76_loop184:
    inc rx75_pos
    gt rx75_pos, rx75_eos, rx75_fail180
    repr_bind_attr_int rx75_cur, rx75_curclass, "$!from", rx75_pos
  rxscan76_scan185:
    nqp_rxmark rx75_bstack, rxscan76_loop184, rx75_pos, 0
  rxscan76_done186:
    rx75_cur."!dba"(rx75_pos, "infix stopper")
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt77_0188
    nqp_push_label $P11, alt77_1199
    nqp_push_label $P11, alt77_2210
    nqp_rxmark rx75_bstack, alt77_end187, -1, 0
    rx75_cur."!alt"(rx75_pos, "alt_nfa__4_1381281822.41961", $P11)
    goto rx75_fail180
  alt77_0188:
    .const 'Sub' $P5001 = 'cuid_14_1381281822.05887' 
    capture_lex $P5001
    repr_bind_attr_int rx75_cur, rx75_curclass, "$!pos", rx75_pos
    $P11 = rx75_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx75_curclass, "$!pos"
    lt $I11, 0, rx75_fail180
    goto alt77_end187
  alt77_1199:
    .const 'Sub' $P5002 = 'cuid_15_1381281822.05887' 
    capture_lex $P5002
    repr_bind_attr_int rx75_cur, rx75_curclass, "$!pos", rx75_pos
    $P11 = rx75_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx75_curclass, "$!pos"
    lt $I11, 0, rx75_fail180
    goto alt77_end187
  alt77_2210:
    repr_bind_attr_int rx75_cur, rx75_curclass, "$!pos", rx75_pos
    $P11 = rx75_cur."rxstopper"()
    repr_get_attr_int $I11, $P11, rx75_curclass, "$!pos"
    lt $I11, 0, rx75_fail180
    goto alt77_end187
  alt77_end187:
    rx75_cur."!cursor_pass"(rx75_pos, "infixstopper", 'backtrack'=>1)
    .return (rx75_cur)
  rx75_restart179:
    repr_get_attr_obj rx75_cstack, rx75_cur, rx75_curclass, "$!cstack"
  rx75_fail180:
    unless rx75_bstack, rx75_done178
    pop $I19, rx75_bstack
    if_null rx75_cstack, rx75_cstack_done183
    unless rx75_cstack, rx75_cstack_done183
    dec $I19
    set $P11, rx75_cstack[$I19]
  rx75_cstack_done183:
    pop rx75_rep, rx75_bstack
    pop rx75_pos, rx75_bstack
    pop $I19, rx75_bstack
    lt rx75_pos, -1, rx75_done178
    lt rx75_pos, 0, rx75_fail180
    eq $I19, 0, rx75_fail180
    nqp_islist $I20, rx75_cstack
    unless $I20, rx75_jump181
    elements $I18, rx75_bstack
    le $I18, 0, rx75_cut182
    dec $I18
    set $I18, rx75_bstack[$I18]
  rx75_cut182:
    assign rx75_cstack, $I18
  rx75_jump181:
    jump $I19
  rx75_done178:
    rx75_cur."!cursor_fail"()
    .return (rx75_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_14_1381281822.05887") :anon :lex :outer("cuid_13_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx78_start
    .local string rx78_tgt
    .local int rx78_pos
    .local int rx78_off
    .local int rx78_eos
    .local int rx78_rep
    .local pmc rx78_cur
    .local pmc rx78_curclass
    .local pmc rx78_bstack
    .local pmc rx78_cstack
    rx78_start = self."!cursor_start_all"()
    set rx78_cur, rx78_start[0]
    set rx78_tgt, rx78_start[1]
    set rx78_pos, rx78_start[2]
    set rx78_curclass, rx78_start[3]
    set rx78_bstack, rx78_start[4]
    set $I19, rx78_start[5]
    store_lex unicode:"$\x{a2}", rx78_cur
    length rx78_eos, rx78_tgt
    eq $I19, 1, rx78_restart191
    gt rx78_pos, rx78_eos, rx78_fail192
    repr_get_attr_int $I11, self, rx78_curclass, "$!from"
    ne $I11, -1, rxscan79_done198
    goto rxscan79_scan197
  rxscan79_loop196:
    inc rx78_pos
    gt rx78_pos, rx78_eos, rx78_fail192
    repr_bind_attr_int rx78_cur, rx78_curclass, "$!from", rx78_pos
  rxscan79_scan197:
    nqp_rxmark rx78_bstack, rxscan79_loop196, rx78_pos, 0
  rxscan79_done198:
    ge rx78_pos, rx78_eos, rx78_fail192
    substr $S11, rx78_tgt, rx78_pos, 1
    index $I11, ucs4:")}]", $S11
    lt $I11, 0, rx78_fail192
    inc rx78_pos
    rx78_cur."!cursor_pass"(rx78_pos, 'backtrack'=>1)
    .return (rx78_cur)
  rx78_restart191:
    repr_get_attr_obj rx78_cstack, rx78_cur, rx78_curclass, "$!cstack"
  rx78_fail192:
    unless rx78_bstack, rx78_done190
    pop $I19, rx78_bstack
    if_null rx78_cstack, rx78_cstack_done195
    unless rx78_cstack, rx78_cstack_done195
    dec $I19
    set $P11, rx78_cstack[$I19]
  rx78_cstack_done195:
    pop rx78_rep, rx78_bstack
    pop rx78_pos, rx78_bstack
    pop $I19, rx78_bstack
    lt rx78_pos, -1, rx78_done190
    lt rx78_pos, 0, rx78_fail192
    eq $I19, 0, rx78_fail192
    nqp_islist $I20, rx78_cstack
    unless $I20, rx78_jump193
    elements $I18, rx78_bstack
    le $I18, 0, rx78_cut194
    dec $I18
    set $I18, rx78_bstack[$I18]
  rx78_cut194:
    assign rx78_cstack, $I18
  rx78_jump193:
    jump $I19
  rx78_done190:
    rx78_cur."!cursor_fail"()
    .return (rx78_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_15_1381281822.05887") :anon :lex :outer("cuid_13_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx80_start
    .local string rx80_tgt
    .local int rx80_pos
    .local int rx80_off
    .local int rx80_eos
    .local int rx80_rep
    .local pmc rx80_cur
    .local pmc rx80_curclass
    .local pmc rx80_bstack
    .local pmc rx80_cstack
    rx80_start = self."!cursor_start_all"()
    set rx80_cur, rx80_start[0]
    set rx80_tgt, rx80_start[1]
    set rx80_pos, rx80_start[2]
    set rx80_curclass, rx80_start[3]
    set rx80_bstack, rx80_start[4]
    set $I19, rx80_start[5]
    store_lex unicode:"$\x{a2}", rx80_cur
    length rx80_eos, rx80_tgt
    eq $I19, 1, rx80_restart202
    gt rx80_pos, rx80_eos, rx80_fail203
    repr_get_attr_int $I11, self, rx80_curclass, "$!from"
    ne $I11, -1, rxscan81_done209
    goto rxscan81_scan208
  rxscan81_loop207:
    inc rx80_pos
    gt rx80_pos, rx80_eos, rx80_fail203
    repr_bind_attr_int rx80_cur, rx80_curclass, "$!from", rx80_pos
  rxscan81_scan208:
    nqp_rxmark rx80_bstack, rxscan81_loop207, rx80_pos, 0
  rxscan81_done209:
    add $I11, rx80_pos, 1
    gt $I11, rx80_eos, rx80_fail203
    substr $S10, rx80_tgt, rx80_pos, 1
    ne $S10, ucs4:">", rx80_fail203
    add rx80_pos, 1
    ge rx80_pos, rx80_eos, rx80_fail203
    substr $S11, rx80_tgt, rx80_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx80_fail203
    inc rx80_pos
    rx80_cur."!cursor_pass"(rx80_pos, 'backtrack'=>1)
    .return (rx80_cur)
  rx80_restart202:
    repr_get_attr_obj rx80_cstack, rx80_cur, rx80_curclass, "$!cstack"
  rx80_fail203:
    unless rx80_bstack, rx80_done201
    pop $I19, rx80_bstack
    if_null rx80_cstack, rx80_cstack_done206
    unless rx80_cstack, rx80_cstack_done206
    dec $I19
    set $P11, rx80_cstack[$I19]
  rx80_cstack_done206:
    pop rx80_rep, rx80_bstack
    pop rx80_pos, rx80_bstack
    pop $I19, rx80_bstack
    lt rx80_pos, -1, rx80_done201
    lt rx80_pos, 0, rx80_fail203
    eq $I19, 0, rx80_fail203
    nqp_islist $I20, rx80_cstack
    unless $I20, rx80_jump204
    elements $I18, rx80_bstack
    le $I18, 0, rx80_cut205
    dec $I18
    set $I18, rx80_bstack[$I18]
  rx80_cut205:
    assign rx80_cstack, $I18
  rx80_jump204:
    jump $I19
  rx80_done201:
    rx80_cur."!cursor_fail"()
    .return (rx80_cur) 
.end
.HLL "nqp"
.namespace []
.sub "rxstopper" :subid("cuid_16_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 118
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx82_start
    .local string rx82_tgt
    .local int rx82_pos
    .local int rx82_off
    .local int rx82_eos
    .local int rx82_rep
    .local pmc rx82_cur
    .local pmc rx82_curclass
    .local pmc rx82_bstack
    .local pmc rx82_cstack
    rx82_start = self."!cursor_start_all"()
    set rx82_cur, rx82_start[0]
    set rx82_tgt, rx82_start[1]
    set rx82_pos, rx82_start[2]
    set rx82_curclass, rx82_start[3]
    set rx82_bstack, rx82_start[4]
    set $I19, rx82_start[5]
    store_lex unicode:"$\x{a2}", rx82_cur
    length rx82_eos, rx82_tgt
    eq $I19, 1, rx82_restart213
    gt rx82_pos, rx82_eos, rx82_fail214
    repr_get_attr_int $I11, self, rx82_curclass, "$!from"
    ne $I11, -1, rxscan83_done220
    goto rxscan83_scan219
  rxscan83_loop218:
    inc rx82_pos
    gt rx82_pos, rx82_eos, rx82_fail214
    repr_bind_attr_int rx82_cur, rx82_curclass, "$!from", rx82_pos
  rxscan83_scan219:
    nqp_rxmark rx82_bstack, rxscan83_loop218, rx82_pos, 0
  rxscan83_done220:
    lt rx82_pos, rx82_eos, rx82_fail214
    rx82_cur."!cursor_pass"(rx82_pos, "rxstopper", 'backtrack'=>1)
    .return (rx82_cur)
  rx82_restart213:
    repr_get_attr_obj rx82_cstack, rx82_cur, rx82_curclass, "$!cstack"
  rx82_fail214:
    unless rx82_bstack, rx82_done212
    pop $I19, rx82_bstack
    if_null rx82_cstack, rx82_cstack_done217
    unless rx82_cstack, rx82_cstack_done217
    dec $I19
    set $P11, rx82_cstack[$I19]
  rx82_cstack_done217:
    pop rx82_rep, rx82_bstack
    pop rx82_pos, rx82_bstack
    pop $I19, rx82_bstack
    lt rx82_pos, -1, rx82_done212
    lt rx82_pos, 0, rx82_fail214
    eq $I19, 0, rx82_fail214
    nqp_islist $I20, rx82_cstack
    unless $I20, rx82_jump215
    elements $I18, rx82_bstack
    le $I18, 0, rx82_cut216
    dec $I18
    set $I18, rx82_bstack[$I18]
  rx82_cut216:
    assign rx82_cstack, $I18
  rx82_jump215:
    jump $I19
  rx82_done212:
    rx82_cur."!cursor_fail"()
    .return (rx82_cur) 
.end
.HLL "nqp"
.namespace []
.sub "termaltseq" :subid("cuid_17_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 120
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_209_1381281822.05887' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx85_start
    .local string rx85_tgt
    .local int rx85_pos
    .local int rx85_off
    .local int rx85_eos
    .local int rx85_rep
    .local pmc rx85_cur
    .local pmc rx85_curclass
    .local pmc rx85_bstack
    .local pmc rx85_cstack
    rx85_start = self."!cursor_start_all"()
    set rx85_cur, rx85_start[0]
    set rx85_tgt, rx85_start[1]
    set rx85_pos, rx85_start[2]
    set rx85_curclass, rx85_start[3]
    set rx85_bstack, rx85_start[4]
    set $I19, rx85_start[5]
    store_lex unicode:"$\x{a2}", rx85_cur
    length rx85_eos, rx85_tgt
    eq $I19, 1, rx85_restart224
    gt rx85_pos, rx85_eos, rx85_fail225
    repr_get_attr_int $I11, self, rx85_curclass, "$!from"
    ne $I11, -1, rxscan86_done231
    goto rxscan86_scan230
  rxscan86_loop229:
    inc rx85_pos
    gt rx85_pos, rx85_eos, rx85_fail225
    repr_bind_attr_int rx85_cur, rx85_curclass, "$!from", rx85_pos
  rxscan86_scan230:
    nqp_rxmark rx85_bstack, rxscan86_loop229, rx85_pos, 0
  rxscan86_done231:
    repr_bind_attr_int rx85_cur, rx85_curclass, "$!pos", rx85_pos
    $P11 = rx85_cur."termconjseq"()
    repr_get_attr_int $I11, $P11, rx85_curclass, "$!pos"
    lt $I11, 0, rx85_fail225
    nqp_rxmark rx85_bstack, rxsubrule87_pass232, -1, 0
  rxsubrule87_pass232:
    rx85_cstack = rx85_cur."!cursor_capture"($P11, "termconjseq")
    repr_get_attr_int rx85_pos, $P11, rx85_curclass, "$!pos"
    nqp_rxmark rx85_bstack, rxquantr88_done234, rx85_pos, 0
  rxquantr88_loop233:
    add $I11, rx85_pos, 2
    gt $I11, rx85_eos, rx85_fail225
    substr $S10, rx85_tgt, rx85_pos, 2
    ne $S10, ucs4:"||", rx85_fail225
    add rx85_pos, 2
  alt89_0236:
    nqp_rxmark rx85_bstack, alt89_1238, rx85_pos, 0
    repr_bind_attr_int rx85_cur, rx85_curclass, "$!pos", rx85_pos
    store_lex unicode:"$\x{a2}", rx85_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_209_1381281822.05887' 
    capture_lex $P5002
    $P5003 = $P5002()
    repr_bind_attr_int rx85_cur, rx85_curclass, "$!pos", rx85_pos
    $P11 = rx85_cur."termconjseq"()
    repr_get_attr_int $I11, $P11, rx85_curclass, "$!pos"
    lt $I11, 0, rx85_fail225
    nqp_rxmark rx85_bstack, rxsubrule90_pass237, -1, 0
  rxsubrule90_pass237:
    rx85_cstack = rx85_cur."!cursor_capture"($P11, "termconjseq")
    repr_get_attr_int rx85_pos, $P11, rx85_curclass, "$!pos"
    goto alt89_end235
  alt89_1238:
    repr_bind_attr_int rx85_cur, rx85_curclass, "$!pos", rx85_pos
    $P11 = rx85_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx85_curclass, "$!pos"
    lt $I11, 0, rx85_fail225
    repr_get_attr_int rx85_pos, $P11, rx85_curclass, "$!pos"
  alt89_end235:
    nqp_rxpeek $I19, rx85_bstack, rxquantr88_done234
    inc $I19
    inc $I19
    set rx85_rep, rx85_bstack[$I19]
    nqp_rxcommit rx85_bstack, rxquantr88_done234
    inc rx85_rep
    nqp_rxmark rx85_bstack, rxquantr88_done234, rx85_pos, rx85_rep
    goto rxquantr88_loop233
  rxquantr88_done234:
    rx85_cur."!cursor_pass"(rx85_pos, "termaltseq", 'backtrack'=>1)
    .return (rx85_cur)
  rx85_restart224:
    repr_get_attr_obj rx85_cstack, rx85_cur, rx85_curclass, "$!cstack"
  rx85_fail225:
    unless rx85_bstack, rx85_done223
    pop $I19, rx85_bstack
    if_null rx85_cstack, rx85_cstack_done228
    unless rx85_cstack, rx85_cstack_done228
    dec $I19
    set $P11, rx85_cstack[$I19]
  rx85_cstack_done228:
    pop rx85_rep, rx85_bstack
    pop rx85_pos, rx85_bstack
    pop $I19, rx85_bstack
    lt rx85_pos, -1, rx85_done223
    lt rx85_pos, 0, rx85_fail225
    eq $I19, 0, rx85_fail225
    nqp_islist $I20, rx85_cstack
    unless $I20, rx85_jump226
    elements $I18, rx85_bstack
    le $I18, 0, rx85_cut227
    dec $I18
    set $I18, rx85_bstack[$I18]
  rx85_cut227:
    assign rx85_cstack, $I18
  rx85_jump226:
    jump $I19
  rx85_done223:
    rx85_cur."!cursor_fail"()
    .return (rx85_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_209_1381281822.05887") :anon :lex :outer("cuid_17_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 122

    box $P5001, 1
    store_dynamic_lex "$*SEQ", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "termconjseq" :subid("cuid_18_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 125
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_210_1381281822.05887' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx92_start
    .local string rx92_tgt
    .local int rx92_pos
    .local int rx92_off
    .local int rx92_eos
    .local int rx92_rep
    .local pmc rx92_cur
    .local pmc rx92_curclass
    .local pmc rx92_bstack
    .local pmc rx92_cstack
    rx92_start = self."!cursor_start_all"()
    set rx92_cur, rx92_start[0]
    set rx92_tgt, rx92_start[1]
    set rx92_pos, rx92_start[2]
    set rx92_curclass, rx92_start[3]
    set rx92_bstack, rx92_start[4]
    set $I19, rx92_start[5]
    store_lex unicode:"$\x{a2}", rx92_cur
    length rx92_eos, rx92_tgt
    eq $I19, 1, rx92_restart242
    gt rx92_pos, rx92_eos, rx92_fail243
    repr_get_attr_int $I11, self, rx92_curclass, "$!from"
    ne $I11, -1, rxscan93_done249
    goto rxscan93_scan248
  rxscan93_loop247:
    inc rx92_pos
    gt rx92_pos, rx92_eos, rx92_fail243
    repr_bind_attr_int rx92_cur, rx92_curclass, "$!from", rx92_pos
  rxscan93_scan248:
    nqp_rxmark rx92_bstack, rxscan93_loop247, rx92_pos, 0
  rxscan93_done249:
    repr_bind_attr_int rx92_cur, rx92_curclass, "$!pos", rx92_pos
    $P11 = rx92_cur."termalt"()
    repr_get_attr_int $I11, $P11, rx92_curclass, "$!pos"
    lt $I11, 0, rx92_fail243
    nqp_rxmark rx92_bstack, rxsubrule94_pass250, -1, 0
  rxsubrule94_pass250:
    rx92_cstack = rx92_cur."!cursor_capture"($P11, "termalt")
    repr_get_attr_int rx92_pos, $P11, rx92_curclass, "$!pos"
    nqp_rxmark rx92_bstack, rxquantr95_done252, rx92_pos, 0
  rxquantr95_loop251:
    add $I11, rx92_pos, 2
    gt $I11, rx92_eos, rx92_fail243
    substr $S10, rx92_tgt, rx92_pos, 2
    ne $S10, ucs4:"&&", rx92_fail243
    add rx92_pos, 2
  alt96_0254:
    nqp_rxmark rx92_bstack, alt96_1256, rx92_pos, 0
    repr_bind_attr_int rx92_cur, rx92_curclass, "$!pos", rx92_pos
    store_lex unicode:"$\x{a2}", rx92_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_210_1381281822.05887' 
    capture_lex $P5002
    $P5003 = $P5002()
    repr_bind_attr_int rx92_cur, rx92_curclass, "$!pos", rx92_pos
    $P11 = rx92_cur."termalt"()
    repr_get_attr_int $I11, $P11, rx92_curclass, "$!pos"
    lt $I11, 0, rx92_fail243
    nqp_rxmark rx92_bstack, rxsubrule97_pass255, -1, 0
  rxsubrule97_pass255:
    rx92_cstack = rx92_cur."!cursor_capture"($P11, "termalt")
    repr_get_attr_int rx92_pos, $P11, rx92_curclass, "$!pos"
    goto alt96_end253
  alt96_1256:
    repr_bind_attr_int rx92_cur, rx92_curclass, "$!pos", rx92_pos
    $P11 = rx92_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx92_curclass, "$!pos"
    lt $I11, 0, rx92_fail243
    repr_get_attr_int rx92_pos, $P11, rx92_curclass, "$!pos"
  alt96_end253:
    nqp_rxpeek $I19, rx92_bstack, rxquantr95_done252
    inc $I19
    inc $I19
    set rx92_rep, rx92_bstack[$I19]
    nqp_rxcommit rx92_bstack, rxquantr95_done252
    inc rx92_rep
    nqp_rxmark rx92_bstack, rxquantr95_done252, rx92_pos, rx92_rep
    goto rxquantr95_loop251
  rxquantr95_done252:
    rx92_cur."!cursor_pass"(rx92_pos, "termconjseq", 'backtrack'=>1)
    .return (rx92_cur)
  rx92_restart242:
    repr_get_attr_obj rx92_cstack, rx92_cur, rx92_curclass, "$!cstack"
  rx92_fail243:
    unless rx92_bstack, rx92_done241
    pop $I19, rx92_bstack
    if_null rx92_cstack, rx92_cstack_done246
    unless rx92_cstack, rx92_cstack_done246
    dec $I19
    set $P11, rx92_cstack[$I19]
  rx92_cstack_done246:
    pop rx92_rep, rx92_bstack
    pop rx92_pos, rx92_bstack
    pop $I19, rx92_bstack
    lt rx92_pos, -1, rx92_done241
    lt rx92_pos, 0, rx92_fail243
    eq $I19, 0, rx92_fail243
    nqp_islist $I20, rx92_cstack
    unless $I20, rx92_jump244
    elements $I18, rx92_bstack
    le $I18, 0, rx92_cut245
    dec $I18
    set $I18, rx92_bstack[$I18]
  rx92_cut245:
    assign rx92_cstack, $I18
  rx92_jump244:
    jump $I19
  rx92_done241:
    rx92_cur."!cursor_fail"()
    .return (rx92_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_210_1381281822.05887") :anon :lex :outer("cuid_18_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 127

    box $P5001, 0
    store_dynamic_lex "$*SEQ", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "termalt" :subid("cuid_19_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 130
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_211_1381281822.05887' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx99_start
    .local string rx99_tgt
    .local int rx99_pos
    .local int rx99_off
    .local int rx99_eos
    .local int rx99_rep
    .local pmc rx99_cur
    .local pmc rx99_curclass
    .local pmc rx99_bstack
    .local pmc rx99_cstack
    rx99_start = self."!cursor_start_all"()
    set rx99_cur, rx99_start[0]
    set rx99_tgt, rx99_start[1]
    set rx99_pos, rx99_start[2]
    set rx99_curclass, rx99_start[3]
    set rx99_bstack, rx99_start[4]
    set $I19, rx99_start[5]
    store_lex unicode:"$\x{a2}", rx99_cur
    length rx99_eos, rx99_tgt
    eq $I19, 1, rx99_restart260
    gt rx99_pos, rx99_eos, rx99_fail261
    repr_get_attr_int $I11, self, rx99_curclass, "$!from"
    ne $I11, -1, rxscan100_done267
    goto rxscan100_scan266
  rxscan100_loop265:
    inc rx99_pos
    gt rx99_pos, rx99_eos, rx99_fail261
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!from", rx99_pos
  rxscan100_scan266:
    nqp_rxmark rx99_bstack, rxscan100_loop265, rx99_pos, 0
  rxscan100_done267:
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!pos", rx99_pos
    $P11 = rx99_cur."termconj"()
    repr_get_attr_int $I11, $P11, rx99_curclass, "$!pos"
    lt $I11, 0, rx99_fail261
    nqp_rxmark rx99_bstack, rxsubrule101_pass268, -1, 0
  rxsubrule101_pass268:
    rx99_cstack = rx99_cur."!cursor_capture"($P11, "termconj")
    repr_get_attr_int rx99_pos, $P11, rx99_curclass, "$!pos"
    nqp_rxmark rx99_bstack, rxquantr102_done270, rx99_pos, 0
  rxquantr102_loop269:
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!pos", rx99_pos
    $P11 = rx99_cur."rxstopper"()
    repr_get_attr_int $I11, $P11, rx99_curclass, "$!pos"
    ge $I11, 0, rx99_fail261
    add $I11, rx99_pos, 1
    gt $I11, rx99_eos, rx99_fail261
    substr $S10, rx99_tgt, rx99_pos, 1
    ne $S10, ucs4:"|", rx99_fail261
    add rx99_pos, 1
    ge rx99_pos, rx99_eos, rx99_fail261
    substr $S11, rx99_tgt, rx99_pos, 1
    index $I11, ucs4:"|", $S11
    ge $I11, 0, rx99_fail261
  alt103_0272:
    nqp_rxmark rx99_bstack, alt103_1274, rx99_pos, 0
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!pos", rx99_pos
    store_lex unicode:"$\x{a2}", rx99_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_211_1381281822.05887' 
    capture_lex $P5002
    $P5003 = $P5002()
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!pos", rx99_pos
    $P11 = rx99_cur."termconj"()
    repr_get_attr_int $I11, $P11, rx99_curclass, "$!pos"
    lt $I11, 0, rx99_fail261
    nqp_rxmark rx99_bstack, rxsubrule104_pass273, -1, 0
  rxsubrule104_pass273:
    rx99_cstack = rx99_cur."!cursor_capture"($P11, "termconj")
    repr_get_attr_int rx99_pos, $P11, rx99_curclass, "$!pos"
    goto alt103_end271
  alt103_1274:
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!pos", rx99_pos
    $P11 = rx99_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx99_curclass, "$!pos"
    lt $I11, 0, rx99_fail261
    repr_get_attr_int rx99_pos, $P11, rx99_curclass, "$!pos"
  alt103_end271:
    nqp_rxpeek $I19, rx99_bstack, rxquantr102_done270
    inc $I19
    inc $I19
    set rx99_rep, rx99_bstack[$I19]
    nqp_rxcommit rx99_bstack, rxquantr102_done270
    inc rx99_rep
    nqp_rxmark rx99_bstack, rxquantr102_done270, rx99_pos, rx99_rep
    goto rxquantr102_loop269
  rxquantr102_done270:
    rx99_cur."!cursor_pass"(rx99_pos, "termalt", 'backtrack'=>1)
    .return (rx99_cur)
  rx99_restart260:
    repr_get_attr_obj rx99_cstack, rx99_cur, rx99_curclass, "$!cstack"
  rx99_fail261:
    unless rx99_bstack, rx99_done259
    pop $I19, rx99_bstack
    if_null rx99_cstack, rx99_cstack_done264
    unless rx99_cstack, rx99_cstack_done264
    dec $I19
    set $P11, rx99_cstack[$I19]
  rx99_cstack_done264:
    pop rx99_rep, rx99_bstack
    pop rx99_pos, rx99_bstack
    pop $I19, rx99_bstack
    lt rx99_pos, -1, rx99_done259
    lt rx99_pos, 0, rx99_fail261
    eq $I19, 0, rx99_fail261
    nqp_islist $I20, rx99_cstack
    unless $I20, rx99_jump262
    elements $I18, rx99_bstack
    le $I18, 0, rx99_cut263
    dec $I18
    set $I18, rx99_bstack[$I18]
  rx99_cut263:
    assign rx99_cstack, $I18
  rx99_jump262:
    jump $I19
  rx99_done259:
    rx99_cur."!cursor_fail"()
    .return (rx99_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_211_1381281822.05887") :anon :lex :outer("cuid_19_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 132

    box $P5001, 0
    store_dynamic_lex "$*SEQ", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "termconj" :subid("cuid_20_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 135
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_212_1381281822.05887' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx106_start
    .local string rx106_tgt
    .local int rx106_pos
    .local int rx106_off
    .local int rx106_eos
    .local int rx106_rep
    .local pmc rx106_cur
    .local pmc rx106_curclass
    .local pmc rx106_bstack
    .local pmc rx106_cstack
    rx106_start = self."!cursor_start_all"()
    set rx106_cur, rx106_start[0]
    set rx106_tgt, rx106_start[1]
    set rx106_pos, rx106_start[2]
    set rx106_curclass, rx106_start[3]
    set rx106_bstack, rx106_start[4]
    set $I19, rx106_start[5]
    store_lex unicode:"$\x{a2}", rx106_cur
    length rx106_eos, rx106_tgt
    eq $I19, 1, rx106_restart278
    gt rx106_pos, rx106_eos, rx106_fail279
    repr_get_attr_int $I11, self, rx106_curclass, "$!from"
    ne $I11, -1, rxscan107_done285
    goto rxscan107_scan284
  rxscan107_loop283:
    inc rx106_pos
    gt rx106_pos, rx106_eos, rx106_fail279
    repr_bind_attr_int rx106_cur, rx106_curclass, "$!from", rx106_pos
  rxscan107_scan284:
    nqp_rxmark rx106_bstack, rxscan107_loop283, rx106_pos, 0
  rxscan107_done285:
    repr_bind_attr_int rx106_cur, rx106_curclass, "$!pos", rx106_pos
    $P11 = rx106_cur."termish"()
    repr_get_attr_int $I11, $P11, rx106_curclass, "$!pos"
    lt $I11, 0, rx106_fail279
    nqp_rxmark rx106_bstack, rxsubrule108_pass286, -1, 0
  rxsubrule108_pass286:
    rx106_cstack = rx106_cur."!cursor_capture"($P11, "termish")
    repr_get_attr_int rx106_pos, $P11, rx106_curclass, "$!pos"
    nqp_rxmark rx106_bstack, rxquantr109_done288, rx106_pos, 0
  rxquantr109_loop287:
    repr_bind_attr_int rx106_cur, rx106_curclass, "$!pos", rx106_pos
    $P11 = rx106_cur."rxstopper"()
    repr_get_attr_int $I11, $P11, rx106_curclass, "$!pos"
    ge $I11, 0, rx106_fail279
    add $I11, rx106_pos, 1
    gt $I11, rx106_eos, rx106_fail279
    substr $S10, rx106_tgt, rx106_pos, 1
    ne $S10, ucs4:"&", rx106_fail279
    add rx106_pos, 1
    ge rx106_pos, rx106_eos, rx106_fail279
    substr $S11, rx106_tgt, rx106_pos, 1
    index $I11, ucs4:"&", $S11
    ge $I11, 0, rx106_fail279
  alt110_0290:
    nqp_rxmark rx106_bstack, alt110_1292, rx106_pos, 0
    repr_bind_attr_int rx106_cur, rx106_curclass, "$!pos", rx106_pos
    store_lex unicode:"$\x{a2}", rx106_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_212_1381281822.05887' 
    capture_lex $P5002
    $P5003 = $P5002()
    repr_bind_attr_int rx106_cur, rx106_curclass, "$!pos", rx106_pos
    $P11 = rx106_cur."termish"()
    repr_get_attr_int $I11, $P11, rx106_curclass, "$!pos"
    lt $I11, 0, rx106_fail279
    nqp_rxmark rx106_bstack, rxsubrule111_pass291, -1, 0
  rxsubrule111_pass291:
    rx106_cstack = rx106_cur."!cursor_capture"($P11, "termish")
    repr_get_attr_int rx106_pos, $P11, rx106_curclass, "$!pos"
    goto alt110_end289
  alt110_1292:
    repr_bind_attr_int rx106_cur, rx106_curclass, "$!pos", rx106_pos
    $P11 = rx106_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx106_curclass, "$!pos"
    lt $I11, 0, rx106_fail279
    repr_get_attr_int rx106_pos, $P11, rx106_curclass, "$!pos"
  alt110_end289:
    nqp_rxpeek $I19, rx106_bstack, rxquantr109_done288
    inc $I19
    inc $I19
    set rx106_rep, rx106_bstack[$I19]
    nqp_rxcommit rx106_bstack, rxquantr109_done288
    inc rx106_rep
    nqp_rxmark rx106_bstack, rxquantr109_done288, rx106_pos, rx106_rep
    goto rxquantr109_loop287
  rxquantr109_done288:
    rx106_cur."!cursor_pass"(rx106_pos, "termconj", 'backtrack'=>1)
    .return (rx106_cur)
  rx106_restart278:
    repr_get_attr_obj rx106_cstack, rx106_cur, rx106_curclass, "$!cstack"
  rx106_fail279:
    unless rx106_bstack, rx106_done277
    pop $I19, rx106_bstack
    if_null rx106_cstack, rx106_cstack_done282
    unless rx106_cstack, rx106_cstack_done282
    dec $I19
    set $P11, rx106_cstack[$I19]
  rx106_cstack_done282:
    pop rx106_rep, rx106_bstack
    pop rx106_pos, rx106_bstack
    pop $I19, rx106_bstack
    lt rx106_pos, -1, rx106_done277
    lt rx106_pos, 0, rx106_fail279
    eq $I19, 0, rx106_fail279
    nqp_islist $I20, rx106_cstack
    unless $I20, rx106_jump280
    elements $I18, rx106_bstack
    le $I18, 0, rx106_cut281
    dec $I18
    set $I18, rx106_bstack[$I18]
  rx106_cut281:
    assign rx106_cstack, $I18
  rx106_jump280:
    jump $I19
  rx106_done277:
    rx106_cur."!cursor_fail"()
    .return (rx106_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_212_1381281822.05887") :anon :lex :outer("cuid_20_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 137

    box $P5001, 0
    store_dynamic_lex "$*SEQ", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "termish" :subid("cuid_21_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 140
    .param pmc _lex_param_0 
    .const 'Sub' $P5006 = 'cuid_22_1381281822.05887' 
    capture_lex $P5006 
    .const 'Sub' $P5006 = 'cuid_23_1381281822.05887' 
    capture_lex $P5006 
    .const 'Sub' $P5006 = 'cuid_213_1381281822.05887' 
    capture_lex $P5006 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx113_start
    .local string rx113_tgt
    .local int rx113_pos
    .local int rx113_off
    .local int rx113_eos
    .local int rx113_rep
    .local pmc rx113_cur
    .local pmc rx113_curclass
    .local pmc rx113_bstack
    .local pmc rx113_cstack
    rx113_start = self."!cursor_start_all"()
    set rx113_cur, rx113_start[0]
    set rx113_tgt, rx113_start[1]
    set rx113_pos, rx113_start[2]
    set rx113_curclass, rx113_start[3]
    set rx113_bstack, rx113_start[4]
    set $I19, rx113_start[5]
    store_lex unicode:"$\x{a2}", rx113_cur
    length rx113_eos, rx113_tgt
    eq $I19, 1, rx113_restart296
    gt rx113_pos, rx113_eos, rx113_fail297
    repr_get_attr_int $I11, self, rx113_curclass, "$!from"
    ne $I11, -1, rxscan114_done303
    goto rxscan114_scan302
  rxscan114_loop301:
    inc rx113_pos
    gt rx113_pos, rx113_eos, rx113_fail297
    repr_bind_attr_int rx113_cur, rx113_curclass, "$!from", rx113_pos
  rxscan114_scan302:
    nqp_rxmark rx113_bstack, rxscan114_loop301, rx113_pos, 0
  rxscan114_done303:
  alt115_0305:
    nqp_rxmark rx113_bstack, alt115_1310, rx113_pos, 0
    nqp_rxmark rx113_bstack, rxquantr116_done307, -1, 0
  rxquantr116_loop306:
    repr_bind_attr_int rx113_cur, rx113_curclass, "$!pos", rx113_pos
    $P11 = rx113_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx113_curclass, "$!pos"
    lt $I11, 0, rx113_fail297
    goto rxsubrule117_pass308
  rxsubrule117_back309:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx113_curclass, "$!pos"
    lt $I11, 0, rx113_fail297
  rxsubrule117_pass308:
    rx113_cstack = rx113_cur."!cursor_capture"($P11, "noun")
    set_addr $I11, rxsubrule117_back309
    push rx113_bstack, $I11
    push rx113_bstack, 0
    push rx113_bstack, rx113_pos
    elements $I11, rx113_cstack
    push rx113_bstack, $I11
    repr_get_attr_int rx113_pos, $P11, rx113_curclass, "$!pos"
    nqp_rxpeek $I19, rx113_bstack, rxquantr116_done307
    inc $I19
    inc $I19
    set rx113_rep, rx113_bstack[$I19]
    nqp_rxcommit rx113_bstack, rxquantr116_done307
    inc rx113_rep
    nqp_rxmark rx113_bstack, rxquantr116_done307, rx113_pos, rx113_rep
    goto rxquantr116_loop306
  rxquantr116_done307:
    goto alt115_end304
  alt115_1310:
    nqp_rxmark rx113_bstack, alt115_2326, rx113_pos, 0
    .const 'Sub' $P5001 = 'cuid_22_1381281822.05887' 
    capture_lex $P5001
    repr_bind_attr_int rx113_cur, rx113_curclass, "$!pos", rx113_pos
    $P11 = rx113_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx113_curclass, "$!pos"
    lt $I11, 0, rx113_fail297
    repr_bind_attr_int rx113_cur, rx113_curclass, "$!pos", rx113_pos
    $P11 = rx113_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx113_curclass, "$!pos"
    lt $I11, 0, rx113_fail297
    repr_get_attr_int rx113_pos, $P11, rx113_curclass, "$!pos"
    goto alt115_end304
  alt115_2326:
    .const 'Sub' $P5002 = 'cuid_23_1381281822.05887' 
    capture_lex $P5002
    repr_bind_attr_int rx113_cur, rx113_curclass, "$!pos", rx113_pos
    $P11 = rx113_cur.$P5002()
    repr_get_attr_int $I11, $P11, rx113_curclass, "$!pos"
    lt $I11, 0, rx113_fail297
    nqp_rxmark rx113_bstack, rxsubrule125_pass337, -1, 0
  rxsubrule125_pass337:
    rx113_cstack = rx113_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx113_pos, $P11, rx113_curclass, "$!pos"
    repr_bind_attr_int rx113_cur, rx113_curclass, "$!pos", rx113_pos
    store_lex unicode:"$\x{a2}", rx113_cur
    $P5003 = $P101."MATCH"()
    set $P102, $P5003
    .const 'Sub' $P5004 = 'cuid_213_1381281822.05887' 
    capture_lex $P5004
    $P5005 = $P5004()
  alt115_end304:
    rx113_cur."!cursor_pass"(rx113_pos, "termish", 'backtrack'=>1)
    .return (rx113_cur)
  rx113_restart296:
    repr_get_attr_obj rx113_cstack, rx113_cur, rx113_curclass, "$!cstack"
  rx113_fail297:
    unless rx113_bstack, rx113_done295
    pop $I19, rx113_bstack
    if_null rx113_cstack, rx113_cstack_done300
    unless rx113_cstack, rx113_cstack_done300
    dec $I19
    set $P11, rx113_cstack[$I19]
  rx113_cstack_done300:
    pop rx113_rep, rx113_bstack
    pop rx113_pos, rx113_bstack
    pop $I19, rx113_bstack
    lt rx113_pos, -1, rx113_done295
    lt rx113_pos, 0, rx113_fail297
    eq $I19, 0, rx113_fail297
    nqp_islist $I20, rx113_cstack
    unless $I20, rx113_jump298
    elements $I18, rx113_bstack
    le $I18, 0, rx113_cut299
    dec $I18
    set $I18, rx113_bstack[$I18]
  rx113_cut299:
    assign rx113_cstack, $I18
  rx113_jump298:
    jump $I19
  rx113_done295:
    rx113_cur."!cursor_fail"()
    .return (rx113_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_22_1381281822.05887") :anon :lex :outer("cuid_21_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx118_start
    .local string rx118_tgt
    .local int rx118_pos
    .local int rx118_off
    .local int rx118_eos
    .local int rx118_rep
    .local pmc rx118_cur
    .local pmc rx118_curclass
    .local pmc rx118_bstack
    .local pmc rx118_cstack
    rx118_start = self."!cursor_start_all"()
    set rx118_cur, rx118_start[0]
    set rx118_tgt, rx118_start[1]
    set rx118_pos, rx118_start[2]
    set rx118_curclass, rx118_start[3]
    set rx118_bstack, rx118_start[4]
    set $I19, rx118_start[5]
    store_lex unicode:"$\x{a2}", rx118_cur
    length rx118_eos, rx118_tgt
    eq $I19, 1, rx118_restart313
    gt rx118_pos, rx118_eos, rx118_fail314
    repr_get_attr_int $I11, self, rx118_curclass, "$!from"
    ne $I11, -1, rxscan119_done320
    goto rxscan119_scan319
  rxscan119_loop318:
    inc rx118_pos
    gt rx118_pos, rx118_eos, rx118_fail314
    repr_bind_attr_int rx118_cur, rx118_curclass, "$!from", rx118_pos
  rxscan119_scan319:
    nqp_rxmark rx118_bstack, rxscan119_loop318, rx118_pos, 0
  rxscan119_done320:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt120_0322
    nqp_push_label $P11, alt120_1324
    nqp_rxmark rx118_bstack, alt120_end321, -1, 0
    rx118_cur."!alt"(rx118_pos, "alt_nfa__5_1381281822.5158", $P11)
    goto rx118_fail314
  alt120_0322:
    repr_bind_attr_int rx118_cur, rx118_curclass, "$!pos", rx118_pos
    $P11 = rx118_cur."stopper"()
    repr_get_attr_int $I11, $P11, rx118_curclass, "$!pos"
    lt $I11, 0, rx118_fail314
    nqp_rxmark rx118_bstack, rxsubrule121_pass323, -1, 0
  rxsubrule121_pass323:
    rx118_cstack = rx118_cur."!cursor_capture"($P11, "stopper")
    repr_get_attr_int rx118_pos, $P11, rx118_curclass, "$!pos"
    goto alt120_end321
  alt120_1324:
    ge rx118_pos, rx118_eos, rx118_fail314
    substr $S11, rx118_tgt, rx118_pos, 1
    index $I11, ucs4:"&|~", $S11
    lt $I11, 0, rx118_fail314
    inc rx118_pos
    goto alt120_end321
  alt120_end321:
    rx118_cur."!cursor_pass"(rx118_pos, 'backtrack'=>1)
    .return (rx118_cur)
  rx118_restart313:
    repr_get_attr_obj rx118_cstack, rx118_cur, rx118_curclass, "$!cstack"
  rx118_fail314:
    unless rx118_bstack, rx118_done312
    pop $I19, rx118_bstack
    if_null rx118_cstack, rx118_cstack_done317
    unless rx118_cstack, rx118_cstack_done317
    dec $I19
    set $P11, rx118_cstack[$I19]
  rx118_cstack_done317:
    pop rx118_rep, rx118_bstack
    pop rx118_pos, rx118_bstack
    pop $I19, rx118_bstack
    lt rx118_pos, -1, rx118_done312
    lt rx118_pos, 0, rx118_fail314
    eq $I19, 0, rx118_fail314
    nqp_islist $I20, rx118_cstack
    unless $I20, rx118_jump315
    elements $I18, rx118_bstack
    le $I18, 0, rx118_cut316
    dec $I18
    set $I18, rx118_bstack[$I18]
  rx118_cut316:
    assign rx118_cstack, $I18
  rx118_jump315:
    jump $I19
  rx118_done312:
    rx118_cur."!cursor_fail"()
    .return (rx118_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_23_1381281822.05887") :anon :lex :outer("cuid_21_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx123_start
    .local string rx123_tgt
    .local int rx123_pos
    .local int rx123_off
    .local int rx123_eos
    .local int rx123_rep
    .local pmc rx123_cur
    .local pmc rx123_curclass
    .local pmc rx123_bstack
    .local pmc rx123_cstack
    rx123_start = self."!cursor_start_all"()
    set rx123_cur, rx123_start[0]
    set rx123_tgt, rx123_start[1]
    set rx123_pos, rx123_start[2]
    set rx123_curclass, rx123_start[3]
    set rx123_bstack, rx123_start[4]
    set $I19, rx123_start[5]
    store_lex unicode:"$\x{a2}", rx123_cur
    length rx123_eos, rx123_tgt
    eq $I19, 1, rx123_restart329
    gt rx123_pos, rx123_eos, rx123_fail330
    repr_get_attr_int $I11, self, rx123_curclass, "$!from"
    ne $I11, -1, rxscan124_done336
    goto rxscan124_scan335
  rxscan124_loop334:
    inc rx123_pos
    gt rx123_pos, rx123_eos, rx123_fail330
    repr_bind_attr_int rx123_cur, rx123_curclass, "$!from", rx123_pos
  rxscan124_scan335:
    nqp_rxmark rx123_bstack, rxscan124_loop334, rx123_pos, 0
  rxscan124_done336:
    ge rx123_pos, rx123_eos, rx123_fail330
    is_cclass $I11, .CCLASS_WORD, rx123_tgt, rx123_pos
    if $I11, rx123_fail330
    add rx123_pos, 1
    rx123_cur."!cursor_pass"(rx123_pos, 'backtrack'=>1)
    .return (rx123_cur)
  rx123_restart329:
    repr_get_attr_obj rx123_cstack, rx123_cur, rx123_curclass, "$!cstack"
  rx123_fail330:
    unless rx123_bstack, rx123_done328
    pop $I19, rx123_bstack
    if_null rx123_cstack, rx123_cstack_done333
    unless rx123_cstack, rx123_cstack_done333
    dec $I19
    set $P11, rx123_cstack[$I19]
  rx123_cstack_done333:
    pop rx123_rep, rx123_bstack
    pop rx123_pos, rx123_bstack
    pop $I19, rx123_bstack
    lt rx123_pos, -1, rx123_done328
    lt rx123_pos, 0, rx123_fail330
    eq $I19, 0, rx123_fail330
    nqp_islist $I20, rx123_cstack
    unless $I20, rx123_jump331
    elements $I18, rx123_bstack
    le $I18, 0, rx123_cut332
    dec $I18
    set $I18, rx123_bstack[$I18]
  rx123_cut332:
    assign rx123_cstack, $I18
  rx123_jump331:
    jump $I19
  rx123_done328:
    rx123_cur."!cursor_fail"()
    .return (rx123_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_213_1381281822.05887") :anon :lex :outer("cuid_21_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 143
    .local pmc fb_tmp_5 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$/"
    set fb_tmp_5, $P5003
    repr_defined $I5001, fb_tmp_5
    unless $I5001 goto if126_else338 
    set $P5004, fb_tmp_5[0]
    set $P5006, $P5004
    goto if126_end339
  if126_else338:
    null $P5005
    set $P5006, $P5005
  if126_end339:
    unless_null $P5006, vivi_127340
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_127340:
    set $S5001, $P5006
    $P5008 = $P5001."throw_unrecognized_metachar"($S5001)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "quantified_atom" :subid("cuid_24_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 146
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_25_1381281822.05887' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx128_start
    .local string rx128_tgt
    .local int rx128_pos
    .local int rx128_off
    .local int rx128_eos
    .local int rx128_rep
    .local pmc rx128_cur
    .local pmc rx128_curclass
    .local pmc rx128_bstack
    .local pmc rx128_cstack
    rx128_start = self."!cursor_start_all"()
    set rx128_cur, rx128_start[0]
    set rx128_tgt, rx128_start[1]
    set rx128_pos, rx128_start[2]
    set rx128_curclass, rx128_start[3]
    set rx128_bstack, rx128_start[4]
    set $I19, rx128_start[5]
    store_lex unicode:"$\x{a2}", rx128_cur
    length rx128_eos, rx128_tgt
    eq $I19, 1, rx128_restart343
    gt rx128_pos, rx128_eos, rx128_fail344
    repr_get_attr_int $I11, self, rx128_curclass, "$!from"
    ne $I11, -1, rxscan129_done350
    goto rxscan129_scan349
  rxscan129_loop348:
    inc rx128_pos
    gt rx128_pos, rx128_eos, rx128_fail344
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!from", rx128_pos
  rxscan129_scan349:
    nqp_rxmark rx128_bstack, rxscan129_loop348, rx128_pos, 0
  rxscan129_done350:
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."rxstopper"()
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    ge $I11, 0, rx128_fail344
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."atom"()
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    lt $I11, 0, rx128_fail344
    nqp_rxmark rx128_bstack, rxsubrule130_pass351, -1, 0
  rxsubrule130_pass351:
    rx128_cstack = rx128_cur."!cursor_capture"($P11, "atom")
    repr_get_attr_int rx128_pos, $P11, rx128_curclass, "$!pos"
    nqp_rxmark rx128_bstack, rxquantr131_done353, rx128_pos, 0
  rxquantr131_loop352:
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."ws"()
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    lt $I11, 0, rx128_fail344
    repr_get_attr_int rx128_pos, $P11, rx128_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt133_0356
    nqp_push_label $P11, alt133_1358
    nqp_rxmark rx128_bstack, alt133_end355, -1, 0
    rx128_cur."!alt"(rx128_pos, "alt_nfa__6_1381281822.55605", $P11)
    goto rx128_fail344
  alt133_0356:
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."rxstopper"()
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    ge $I11, 0, rx128_fail344
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."quantifier"()
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    lt $I11, 0, rx128_fail344
    nqp_rxmark rx128_bstack, rxsubrule134_pass357, -1, 0
  rxsubrule134_pass357:
    rx128_cstack = rx128_cur."!cursor_capture"($P11, "quantifier")
    repr_get_attr_int rx128_pos, $P11, rx128_curclass, "$!pos"
    goto alt133_end355
  alt133_1358:
    .const 'Sub' $P5001 = 'cuid_25_1381281822.05887' 
    capture_lex $P5001
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    lt $I11, 0, rx128_fail344
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    lt $I11, 0, rx128_fail344
    nqp_rxmark rx128_bstack, rxsubrule137_pass369, -1, 0
  rxsubrule137_pass369:
    rx128_cstack = rx128_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx128_pos, $P11, rx128_curclass, "$!pos"
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."alpha"()
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    ge $I11, 0, rx128_fail344
    goto alt133_end355
  alt133_end355:
    nqp_rxcommit rx128_bstack, alt133_end355
    nqp_rxmark rx128_bstack, rxquantr138_done371, rx128_pos, 0
  rxquantr138_loop370:
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."ws"()
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    lt $I11, 0, rx128_fail344
    repr_get_attr_int rx128_pos, $P11, rx128_curclass, "$!pos"
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."separator"()
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    lt $I11, 0, rx128_fail344
    nqp_rxmark rx128_bstack, rxsubrule140_pass373, -1, 0
  rxsubrule140_pass373:
    rx128_cstack = rx128_cur."!cursor_capture"($P11, "separator")
    repr_get_attr_int rx128_pos, $P11, rx128_curclass, "$!pos"
    nqp_rxpeek $I19, rx128_bstack, rxquantr138_done371
    inc $I19
    inc $I19
    set rx128_rep, rx128_bstack[$I19]
    nqp_rxcommit rx128_bstack, rxquantr138_done371
    inc rx128_rep
  rxquantr138_done371:
    nqp_rxpeek $I19, rx128_bstack, rxquantr131_done353
    inc $I19
    inc $I19
    set rx128_rep, rx128_bstack[$I19]
    nqp_rxcommit rx128_bstack, rxquantr131_done353
    inc rx128_rep
  rxquantr131_done353:
    rx128_cur."!cursor_pass"(rx128_pos, "quantified_atom", 'backtrack'=>1)
    .return (rx128_cur)
  rx128_restart343:
    repr_get_attr_obj rx128_cstack, rx128_cur, rx128_curclass, "$!cstack"
  rx128_fail344:
    unless rx128_bstack, rx128_done342
    pop $I19, rx128_bstack
    if_null rx128_cstack, rx128_cstack_done347
    unless rx128_cstack, rx128_cstack_done347
    dec $I19
    set $P11, rx128_cstack[$I19]
  rx128_cstack_done347:
    pop rx128_rep, rx128_bstack
    pop rx128_pos, rx128_bstack
    pop $I19, rx128_bstack
    lt rx128_pos, -1, rx128_done342
    lt rx128_pos, 0, rx128_fail344
    eq $I19, 0, rx128_fail344
    nqp_islist $I20, rx128_cstack
    unless $I20, rx128_jump345
    elements $I18, rx128_bstack
    le $I18, 0, rx128_cut346
    dec $I18
    set $I18, rx128_bstack[$I18]
  rx128_cut346:
    assign rx128_cstack, $I18
  rx128_jump345:
    jump $I19
  rx128_done342:
    rx128_cur."!cursor_fail"()
    .return (rx128_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_25_1381281822.05887") :anon :lex :outer("cuid_24_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx135_start
    .local string rx135_tgt
    .local int rx135_pos
    .local int rx135_off
    .local int rx135_eos
    .local int rx135_rep
    .local pmc rx135_cur
    .local pmc rx135_curclass
    .local pmc rx135_bstack
    .local pmc rx135_cstack
    rx135_start = self."!cursor_start_all"()
    set rx135_cur, rx135_start[0]
    set rx135_tgt, rx135_start[1]
    set rx135_pos, rx135_start[2]
    set rx135_curclass, rx135_start[3]
    set rx135_bstack, rx135_start[4]
    set $I19, rx135_start[5]
    store_lex unicode:"$\x{a2}", rx135_cur
    length rx135_eos, rx135_tgt
    eq $I19, 1, rx135_restart361
    gt rx135_pos, rx135_eos, rx135_fail362
    repr_get_attr_int $I11, self, rx135_curclass, "$!from"
    ne $I11, -1, rxscan136_done368
    goto rxscan136_scan367
  rxscan136_loop366:
    inc rx135_pos
    gt rx135_pos, rx135_eos, rx135_fail362
    repr_bind_attr_int rx135_cur, rx135_curclass, "$!from", rx135_pos
  rxscan136_scan367:
    nqp_rxmark rx135_bstack, rxscan136_loop366, rx135_pos, 0
  rxscan136_done368:
    add $I11, rx135_pos, 1
    gt $I11, rx135_eos, rx135_fail362
    substr $S10, rx135_tgt, rx135_pos, 1
    ne $S10, ucs4:":", rx135_fail362
    add rx135_pos, 1
    rx135_cur."!cursor_pass"(rx135_pos, 'backtrack'=>1)
    .return (rx135_cur)
  rx135_restart361:
    repr_get_attr_obj rx135_cstack, rx135_cur, rx135_curclass, "$!cstack"
  rx135_fail362:
    unless rx135_bstack, rx135_done360
    pop $I19, rx135_bstack
    if_null rx135_cstack, rx135_cstack_done365
    unless rx135_cstack, rx135_cstack_done365
    dec $I19
    set $P11, rx135_cstack[$I19]
  rx135_cstack_done365:
    pop rx135_rep, rx135_bstack
    pop rx135_pos, rx135_bstack
    pop $I19, rx135_bstack
    lt rx135_pos, -1, rx135_done360
    lt rx135_pos, 0, rx135_fail362
    eq $I19, 0, rx135_fail362
    nqp_islist $I20, rx135_cstack
    unless $I20, rx135_jump363
    elements $I18, rx135_bstack
    le $I18, 0, rx135_cut364
    dec $I18
    set $I18, rx135_bstack[$I18]
  rx135_cut364:
    assign rx135_cstack, $I18
  rx135_jump363:
    jump $I19
  rx135_done360:
    rx135_cur."!cursor_fail"()
    .return (rx135_cur) 
.end
.HLL "nqp"
.namespace []
.sub "separator" :subid("cuid_26_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 155
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx141_start
    .local string rx141_tgt
    .local int rx141_pos
    .local int rx141_off
    .local int rx141_eos
    .local int rx141_rep
    .local pmc rx141_cur
    .local pmc rx141_curclass
    .local pmc rx141_bstack
    .local pmc rx141_cstack
    rx141_start = self."!cursor_start_all"()
    set rx141_cur, rx141_start[0]
    set rx141_tgt, rx141_start[1]
    set rx141_pos, rx141_start[2]
    set rx141_curclass, rx141_start[3]
    set rx141_bstack, rx141_start[4]
    set $I19, rx141_start[5]
    store_lex unicode:"$\x{a2}", rx141_cur
    length rx141_eos, rx141_tgt
    eq $I19, 1, rx141_restart376
    gt rx141_pos, rx141_eos, rx141_fail377
    repr_get_attr_int $I11, self, rx141_curclass, "$!from"
    ne $I11, -1, rxscan142_done383
    goto rxscan142_scan382
  rxscan142_loop381:
    inc rx141_pos
    gt rx141_pos, rx141_eos, rx141_fail377
    repr_bind_attr_int rx141_cur, rx141_curclass, "$!from", rx141_pos
  rxscan142_scan382:
    nqp_rxmark rx141_bstack, rxscan142_loop381, rx141_pos, 0
  rxscan142_done383:
    nqp_rxmark rx141_bstack, rxcap143_fail385, rx141_pos, 0
    add $I11, rx141_pos, 1
    gt $I11, rx141_eos, rx141_fail377
    substr $S10, rx141_tgt, rx141_pos, 1
    ne $S10, ucs4:"%", rx141_fail377
    add rx141_pos, 1
    nqp_rxmark rx141_bstack, rxquantr144_done387, rx141_pos, 0
  rxquantr144_loop386:
    add $I11, rx141_pos, 1
    gt $I11, rx141_eos, rx141_fail377
    substr $S10, rx141_tgt, rx141_pos, 1
    ne $S10, ucs4:"%", rx141_fail377
    add rx141_pos, 1
    nqp_rxpeek $I19, rx141_bstack, rxquantr144_done387
    inc $I19
    inc $I19
    set rx141_rep, rx141_bstack[$I19]
    nqp_rxcommit rx141_bstack, rxquantr144_done387
    inc rx141_rep
  rxquantr144_done387:
    nqp_rxpeek $I19, rx141_bstack, rxcap143_fail385
    inc $I19
    set $I11, rx141_bstack[$I19]
    repr_bind_attr_int rx141_cur, rx141_curclass, "$!pos", rx141_pos
    $P11 = rx141_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx141_pos)
    rx141_cstack = rx141_cur."!cursor_capture"($P11, "septype")
    goto rxcap143_done384
  rxcap143_fail385:
    goto rx141_fail377
  rxcap143_done384:
    nqp_rxmark rx141_bstack, rxquantr145_done389, rx141_pos, 0
  rxquantr145_loop388:
    repr_bind_attr_int rx141_cur, rx141_curclass, "$!pos", rx141_pos
    $P11 = rx141_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx141_curclass, "$!pos"
    lt $I11, 0, rx141_fail377
    goto rxsubrule146_pass390
  rxsubrule146_back391:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx141_curclass, "$!pos"
    lt $I11, 0, rx141_fail377
  rxsubrule146_pass390:
    rx141_cstack = rx141_cur."!cursor_capture"($P11, "normspace")
    set_addr $I11, rxsubrule146_back391
    push rx141_bstack, $I11
    push rx141_bstack, 0
    push rx141_bstack, rx141_pos
    elements $I11, rx141_cstack
    push rx141_bstack, $I11
    repr_get_attr_int rx141_pos, $P11, rx141_curclass, "$!pos"
    nqp_rxpeek $I19, rx141_bstack, rxquantr145_done389
    inc $I19
    inc $I19
    set rx141_rep, rx141_bstack[$I19]
    nqp_rxcommit rx141_bstack, rxquantr145_done389
    inc rx141_rep
  rxquantr145_done389:
    repr_bind_attr_int rx141_cur, rx141_curclass, "$!pos", rx141_pos
    $P11 = rx141_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx141_curclass, "$!pos"
    lt $I11, 0, rx141_fail377
    nqp_rxmark rx141_bstack, rxsubrule147_pass392, -1, 0
  rxsubrule147_pass392:
    rx141_cstack = rx141_cur."!cursor_capture"($P11, "quantified_atom")
    repr_get_attr_int rx141_pos, $P11, rx141_curclass, "$!pos"
    rx141_cur."!cursor_pass"(rx141_pos, "separator", 'backtrack'=>1)
    .return (rx141_cur)
  rx141_restart376:
    repr_get_attr_obj rx141_cstack, rx141_cur, rx141_curclass, "$!cstack"
  rx141_fail377:
    unless rx141_bstack, rx141_done375
    pop $I19, rx141_bstack
    if_null rx141_cstack, rx141_cstack_done380
    unless rx141_cstack, rx141_cstack_done380
    dec $I19
    set $P11, rx141_cstack[$I19]
  rx141_cstack_done380:
    pop rx141_rep, rx141_bstack
    pop rx141_pos, rx141_bstack
    pop $I19, rx141_bstack
    lt rx141_pos, -1, rx141_done375
    lt rx141_pos, 0, rx141_fail377
    eq $I19, 0, rx141_fail377
    nqp_islist $I20, rx141_cstack
    unless $I20, rx141_jump378
    elements $I18, rx141_bstack
    le $I18, 0, rx141_cut379
    dec $I18
    set $I18, rx141_bstack[$I18]
  rx141_cut379:
    assign rx141_cstack, $I18
  rx141_jump378:
    jump $I19
  rx141_done375:
    rx141_cur."!cursor_fail"()
    .return (rx141_cur) 
.end
.HLL "nqp"
.namespace []
.sub "atom" :subid("cuid_27_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 159
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_28_1381281822.05887' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx148_start
    .local string rx148_tgt
    .local int rx148_pos
    .local int rx148_off
    .local int rx148_eos
    .local int rx148_rep
    .local pmc rx148_cur
    .local pmc rx148_curclass
    .local pmc rx148_bstack
    .local pmc rx148_cstack
    rx148_start = self."!cursor_start_all"()
    set rx148_cur, rx148_start[0]
    set rx148_tgt, rx148_start[1]
    set rx148_pos, rx148_start[2]
    set rx148_curclass, rx148_start[3]
    set rx148_bstack, rx148_start[4]
    set $I19, rx148_start[5]
    store_lex unicode:"$\x{a2}", rx148_cur
    length rx148_eos, rx148_tgt
    eq $I19, 1, rx148_restart395
    gt rx148_pos, rx148_eos, rx148_fail396
    repr_get_attr_int $I11, self, rx148_curclass, "$!from"
    ne $I11, -1, rxscan149_done402
    goto rxscan149_scan401
  rxscan149_loop400:
    inc rx148_pos
    gt rx148_pos, rx148_eos, rx148_fail396
    repr_bind_attr_int rx148_cur, rx148_curclass, "$!from", rx148_pos
  rxscan149_scan401:
    nqp_rxmark rx148_bstack, rxscan149_loop400, rx148_pos, 0
  rxscan149_done402:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt150_0404
    nqp_push_label $P11, alt150_1419
    nqp_rxmark rx148_bstack, alt150_end403, -1, 0
    rx148_cur."!alt"(rx148_pos, "alt_nfa__7_1381281822.58423", $P11)
    goto rx148_fail396
  alt150_0404:
    ge rx148_pos, rx148_eos, rx148_fail396
    is_cclass $I11, .CCLASS_WORD, rx148_tgt, rx148_pos
    unless $I11, rx148_fail396
    add rx148_pos, 1
    nqp_rxmark rx148_bstack, rxquantr151_done406, rx148_pos, 0
  rxquantr151_loop405:
  rxquantg152_loop407:
    ge rx148_pos, rx148_eos, rx148_fail396
    is_cclass $I11, .CCLASS_WORD, rx148_tgt, rx148_pos
    unless $I11, rx148_fail396
    add rx148_pos, 1
    nqp_rxmark rx148_bstack, rxquantg152_done408, rx148_pos, rx148_rep
    goto rxquantg152_loop407
  rxquantg152_done408:
    .const 'Sub' $P5001 = 'cuid_28_1381281822.05887' 
    capture_lex $P5001
    repr_bind_attr_int rx148_cur, rx148_curclass, "$!pos", rx148_pos
    $P11 = rx148_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx148_curclass, "$!pos"
    lt $I11, 0, rx148_fail396
    nqp_rxpeek $I19, rx148_bstack, rxquantr151_done406
    inc $I19
    inc $I19
    set rx148_rep, rx148_bstack[$I19]
    nqp_rxcommit rx148_bstack, rxquantr151_done406
    inc rx148_rep
  rxquantr151_done406:
    goto alt150_end403
  alt150_1419:
    repr_bind_attr_int rx148_cur, rx148_curclass, "$!pos", rx148_pos
    $P11 = rx148_cur."metachar"()
    repr_get_attr_int $I11, $P11, rx148_curclass, "$!pos"
    lt $I11, 0, rx148_fail396
    nqp_rxmark rx148_bstack, rxsubrule155_pass420, -1, 0
  rxsubrule155_pass420:
    rx148_cstack = rx148_cur."!cursor_capture"($P11, "metachar")
    repr_get_attr_int rx148_pos, $P11, rx148_curclass, "$!pos"
    goto alt150_end403
  alt150_end403:
    nqp_rxcommit rx148_bstack, alt150_end403
    rx148_cur."!cursor_pass"(rx148_pos, "atom", 'backtrack'=>1)
    .return (rx148_cur)
  rx148_restart395:
    repr_get_attr_obj rx148_cstack, rx148_cur, rx148_curclass, "$!cstack"
  rx148_fail396:
    unless rx148_bstack, rx148_done394
    pop $I19, rx148_bstack
    if_null rx148_cstack, rx148_cstack_done399
    unless rx148_cstack, rx148_cstack_done399
    dec $I19
    set $P11, rx148_cstack[$I19]
  rx148_cstack_done399:
    pop rx148_rep, rx148_bstack
    pop rx148_pos, rx148_bstack
    pop $I19, rx148_bstack
    lt rx148_pos, -1, rx148_done394
    lt rx148_pos, 0, rx148_fail396
    eq $I19, 0, rx148_fail396
    nqp_islist $I20, rx148_cstack
    unless $I20, rx148_jump397
    elements $I18, rx148_bstack
    le $I18, 0, rx148_cut398
    dec $I18
    set $I18, rx148_bstack[$I18]
  rx148_cut398:
    assign rx148_cstack, $I18
  rx148_jump397:
    jump $I19
  rx148_done394:
    rx148_cur."!cursor_fail"()
    .return (rx148_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_28_1381281822.05887") :anon :lex :outer("cuid_27_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx153_start
    .local string rx153_tgt
    .local int rx153_pos
    .local int rx153_off
    .local int rx153_eos
    .local int rx153_rep
    .local pmc rx153_cur
    .local pmc rx153_curclass
    .local pmc rx153_bstack
    .local pmc rx153_cstack
    rx153_start = self."!cursor_start_all"()
    set rx153_cur, rx153_start[0]
    set rx153_tgt, rx153_start[1]
    set rx153_pos, rx153_start[2]
    set rx153_curclass, rx153_start[3]
    set rx153_bstack, rx153_start[4]
    set $I19, rx153_start[5]
    store_lex unicode:"$\x{a2}", rx153_cur
    length rx153_eos, rx153_tgt
    eq $I19, 1, rx153_restart411
    gt rx153_pos, rx153_eos, rx153_fail412
    repr_get_attr_int $I11, self, rx153_curclass, "$!from"
    ne $I11, -1, rxscan154_done418
    goto rxscan154_scan417
  rxscan154_loop416:
    inc rx153_pos
    gt rx153_pos, rx153_eos, rx153_fail412
    repr_bind_attr_int rx153_cur, rx153_curclass, "$!from", rx153_pos
  rxscan154_scan417:
    nqp_rxmark rx153_bstack, rxscan154_loop416, rx153_pos, 0
  rxscan154_done418:
    ge rx153_pos, rx153_eos, rx153_fail412
    is_cclass $I11, .CCLASS_WORD, rx153_tgt, rx153_pos
    unless $I11, rx153_fail412
    add rx153_pos, 1
    rx153_cur."!cursor_pass"(rx153_pos, 'backtrack'=>1)
    .return (rx153_cur)
  rx153_restart411:
    repr_get_attr_obj rx153_cstack, rx153_cur, rx153_curclass, "$!cstack"
  rx153_fail412:
    unless rx153_bstack, rx153_done410
    pop $I19, rx153_bstack
    if_null rx153_cstack, rx153_cstack_done415
    unless rx153_cstack, rx153_cstack_done415
    dec $I19
    set $P11, rx153_cstack[$I19]
  rx153_cstack_done415:
    pop rx153_rep, rx153_bstack
    pop rx153_pos, rx153_bstack
    pop $I19, rx153_bstack
    lt rx153_pos, -1, rx153_done410
    lt rx153_pos, 0, rx153_fail412
    eq $I19, 0, rx153_fail412
    nqp_islist $I20, rx153_cstack
    unless $I20, rx153_jump413
    elements $I18, rx153_bstack
    le $I18, 0, rx153_cut414
    dec $I18
    set $I18, rx153_bstack[$I18]
  rx153_cut414:
    assign rx153_cstack, $I18
  rx153_jump413:
    jump $I19
  rx153_done410:
    rx153_cur."!cursor_fail"()
    .return (rx153_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier" :subid("cuid_29_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 167
    .param pmc self 
    $P5001 = self."!protoregex"("quantifier")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<*>" :subid("cuid_30_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 168
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx156_start
    .local string rx156_tgt
    .local int rx156_pos
    .local int rx156_off
    .local int rx156_eos
    .local int rx156_rep
    .local pmc rx156_cur
    .local pmc rx156_curclass
    .local pmc rx156_bstack
    .local pmc rx156_cstack
    rx156_start = self."!cursor_start_all"()
    set rx156_cur, rx156_start[0]
    set rx156_tgt, rx156_start[1]
    set rx156_pos, rx156_start[2]
    set rx156_curclass, rx156_start[3]
    set rx156_bstack, rx156_start[4]
    set $I19, rx156_start[5]
    store_lex unicode:"$\x{a2}", rx156_cur
    length rx156_eos, rx156_tgt
    eq $I19, 1, rx156_restart423
    gt rx156_pos, rx156_eos, rx156_fail424
    repr_get_attr_int $I11, self, rx156_curclass, "$!from"
    ne $I11, -1, rxscan157_done430
    goto rxscan157_scan429
  rxscan157_loop428:
    inc rx156_pos
    gt rx156_pos, rx156_eos, rx156_fail424
    repr_bind_attr_int rx156_cur, rx156_curclass, "$!from", rx156_pos
  rxscan157_scan429:
    nqp_rxmark rx156_bstack, rxscan157_loop428, rx156_pos, 0
  rxscan157_done430:
    nqp_rxmark rx156_bstack, rxcap158_fail432, rx156_pos, 0
    add $I11, rx156_pos, 1
    gt $I11, rx156_eos, rx156_fail424
    substr $S10, rx156_tgt, rx156_pos, 1
    ne $S10, ucs4:"*", rx156_fail424
    add rx156_pos, 1
    nqp_rxpeek $I19, rx156_bstack, rxcap158_fail432
    inc $I19
    set $I11, rx156_bstack[$I19]
    repr_bind_attr_int rx156_cur, rx156_curclass, "$!pos", rx156_pos
    $P11 = rx156_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx156_pos)
    rx156_cstack = rx156_cur."!cursor_capture"($P11, "sym")
    goto rxcap158_done431
  rxcap158_fail432:
    goto rx156_fail424
  rxcap158_done431:
    repr_bind_attr_int rx156_cur, rx156_curclass, "$!pos", rx156_pos
    $P11 = rx156_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx156_curclass, "$!pos"
    lt $I11, 0, rx156_fail424
    nqp_rxmark rx156_bstack, rxsubrule159_pass433, -1, 0
  rxsubrule159_pass433:
    rx156_cstack = rx156_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx156_pos, $P11, rx156_curclass, "$!pos"
    rx156_cur."!cursor_pass"(rx156_pos, "quantifier:sym<*>", 'backtrack'=>1)
    .return (rx156_cur)
  rx156_restart423:
    repr_get_attr_obj rx156_cstack, rx156_cur, rx156_curclass, "$!cstack"
  rx156_fail424:
    unless rx156_bstack, rx156_done422
    pop $I19, rx156_bstack
    if_null rx156_cstack, rx156_cstack_done427
    unless rx156_cstack, rx156_cstack_done427
    dec $I19
    set $P11, rx156_cstack[$I19]
  rx156_cstack_done427:
    pop rx156_rep, rx156_bstack
    pop rx156_pos, rx156_bstack
    pop $I19, rx156_bstack
    lt rx156_pos, -1, rx156_done422
    lt rx156_pos, 0, rx156_fail424
    eq $I19, 0, rx156_fail424
    nqp_islist $I20, rx156_cstack
    unless $I20, rx156_jump425
    elements $I18, rx156_bstack
    le $I18, 0, rx156_cut426
    dec $I18
    set $I18, rx156_bstack[$I18]
  rx156_cut426:
    assign rx156_cstack, $I18
  rx156_jump425:
    jump $I19
  rx156_done422:
    rx156_cur."!cursor_fail"()
    .return (rx156_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<+>" :subid("cuid_31_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 169
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx160_start
    .local string rx160_tgt
    .local int rx160_pos
    .local int rx160_off
    .local int rx160_eos
    .local int rx160_rep
    .local pmc rx160_cur
    .local pmc rx160_curclass
    .local pmc rx160_bstack
    .local pmc rx160_cstack
    rx160_start = self."!cursor_start_all"()
    set rx160_cur, rx160_start[0]
    set rx160_tgt, rx160_start[1]
    set rx160_pos, rx160_start[2]
    set rx160_curclass, rx160_start[3]
    set rx160_bstack, rx160_start[4]
    set $I19, rx160_start[5]
    store_lex unicode:"$\x{a2}", rx160_cur
    length rx160_eos, rx160_tgt
    eq $I19, 1, rx160_restart436
    gt rx160_pos, rx160_eos, rx160_fail437
    repr_get_attr_int $I11, self, rx160_curclass, "$!from"
    ne $I11, -1, rxscan161_done443
    goto rxscan161_scan442
  rxscan161_loop441:
    inc rx160_pos
    gt rx160_pos, rx160_eos, rx160_fail437
    repr_bind_attr_int rx160_cur, rx160_curclass, "$!from", rx160_pos
  rxscan161_scan442:
    nqp_rxmark rx160_bstack, rxscan161_loop441, rx160_pos, 0
  rxscan161_done443:
    nqp_rxmark rx160_bstack, rxcap162_fail445, rx160_pos, 0
    add $I11, rx160_pos, 1
    gt $I11, rx160_eos, rx160_fail437
    substr $S10, rx160_tgt, rx160_pos, 1
    ne $S10, ucs4:"+", rx160_fail437
    add rx160_pos, 1
    nqp_rxpeek $I19, rx160_bstack, rxcap162_fail445
    inc $I19
    set $I11, rx160_bstack[$I19]
    repr_bind_attr_int rx160_cur, rx160_curclass, "$!pos", rx160_pos
    $P11 = rx160_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx160_pos)
    rx160_cstack = rx160_cur."!cursor_capture"($P11, "sym")
    goto rxcap162_done444
  rxcap162_fail445:
    goto rx160_fail437
  rxcap162_done444:
    repr_bind_attr_int rx160_cur, rx160_curclass, "$!pos", rx160_pos
    $P11 = rx160_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx160_curclass, "$!pos"
    lt $I11, 0, rx160_fail437
    nqp_rxmark rx160_bstack, rxsubrule163_pass446, -1, 0
  rxsubrule163_pass446:
    rx160_cstack = rx160_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx160_pos, $P11, rx160_curclass, "$!pos"
    rx160_cur."!cursor_pass"(rx160_pos, "quantifier:sym<+>", 'backtrack'=>1)
    .return (rx160_cur)
  rx160_restart436:
    repr_get_attr_obj rx160_cstack, rx160_cur, rx160_curclass, "$!cstack"
  rx160_fail437:
    unless rx160_bstack, rx160_done435
    pop $I19, rx160_bstack
    if_null rx160_cstack, rx160_cstack_done440
    unless rx160_cstack, rx160_cstack_done440
    dec $I19
    set $P11, rx160_cstack[$I19]
  rx160_cstack_done440:
    pop rx160_rep, rx160_bstack
    pop rx160_pos, rx160_bstack
    pop $I19, rx160_bstack
    lt rx160_pos, -1, rx160_done435
    lt rx160_pos, 0, rx160_fail437
    eq $I19, 0, rx160_fail437
    nqp_islist $I20, rx160_cstack
    unless $I20, rx160_jump438
    elements $I18, rx160_bstack
    le $I18, 0, rx160_cut439
    dec $I18
    set $I18, rx160_bstack[$I18]
  rx160_cut439:
    assign rx160_cstack, $I18
  rx160_jump438:
    jump $I19
  rx160_done435:
    rx160_cur."!cursor_fail"()
    .return (rx160_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<?>" :subid("cuid_32_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 170
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx164_start
    .local string rx164_tgt
    .local int rx164_pos
    .local int rx164_off
    .local int rx164_eos
    .local int rx164_rep
    .local pmc rx164_cur
    .local pmc rx164_curclass
    .local pmc rx164_bstack
    .local pmc rx164_cstack
    rx164_start = self."!cursor_start_all"()
    set rx164_cur, rx164_start[0]
    set rx164_tgt, rx164_start[1]
    set rx164_pos, rx164_start[2]
    set rx164_curclass, rx164_start[3]
    set rx164_bstack, rx164_start[4]
    set $I19, rx164_start[5]
    store_lex unicode:"$\x{a2}", rx164_cur
    length rx164_eos, rx164_tgt
    eq $I19, 1, rx164_restart449
    gt rx164_pos, rx164_eos, rx164_fail450
    repr_get_attr_int $I11, self, rx164_curclass, "$!from"
    ne $I11, -1, rxscan165_done456
    goto rxscan165_scan455
  rxscan165_loop454:
    inc rx164_pos
    gt rx164_pos, rx164_eos, rx164_fail450
    repr_bind_attr_int rx164_cur, rx164_curclass, "$!from", rx164_pos
  rxscan165_scan455:
    nqp_rxmark rx164_bstack, rxscan165_loop454, rx164_pos, 0
  rxscan165_done456:
    nqp_rxmark rx164_bstack, rxcap166_fail458, rx164_pos, 0
    add $I11, rx164_pos, 1
    gt $I11, rx164_eos, rx164_fail450
    substr $S10, rx164_tgt, rx164_pos, 1
    ne $S10, ucs4:"?", rx164_fail450
    add rx164_pos, 1
    nqp_rxpeek $I19, rx164_bstack, rxcap166_fail458
    inc $I19
    set $I11, rx164_bstack[$I19]
    repr_bind_attr_int rx164_cur, rx164_curclass, "$!pos", rx164_pos
    $P11 = rx164_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx164_pos)
    rx164_cstack = rx164_cur."!cursor_capture"($P11, "sym")
    goto rxcap166_done457
  rxcap166_fail458:
    goto rx164_fail450
  rxcap166_done457:
    repr_bind_attr_int rx164_cur, rx164_curclass, "$!pos", rx164_pos
    $P11 = rx164_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx164_curclass, "$!pos"
    lt $I11, 0, rx164_fail450
    nqp_rxmark rx164_bstack, rxsubrule167_pass459, -1, 0
  rxsubrule167_pass459:
    rx164_cstack = rx164_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx164_pos, $P11, rx164_curclass, "$!pos"
    rx164_cur."!cursor_pass"(rx164_pos, "quantifier:sym<?>", 'backtrack'=>1)
    .return (rx164_cur)
  rx164_restart449:
    repr_get_attr_obj rx164_cstack, rx164_cur, rx164_curclass, "$!cstack"
  rx164_fail450:
    unless rx164_bstack, rx164_done448
    pop $I19, rx164_bstack
    if_null rx164_cstack, rx164_cstack_done453
    unless rx164_cstack, rx164_cstack_done453
    dec $I19
    set $P11, rx164_cstack[$I19]
  rx164_cstack_done453:
    pop rx164_rep, rx164_bstack
    pop rx164_pos, rx164_bstack
    pop $I19, rx164_bstack
    lt rx164_pos, -1, rx164_done448
    lt rx164_pos, 0, rx164_fail450
    eq $I19, 0, rx164_fail450
    nqp_islist $I20, rx164_cstack
    unless $I20, rx164_jump451
    elements $I18, rx164_bstack
    le $I18, 0, rx164_cut452
    dec $I18
    set $I18, rx164_bstack[$I18]
  rx164_cut452:
    assign rx164_cstack, $I18
  rx164_jump451:
    jump $I19
  rx164_done448:
    rx164_cur."!cursor_fail"()
    .return (rx164_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<{N,M}>" :subid("cuid_33_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 171
    .param pmc _lex_param_0 
    .const 'Sub' $P5007 = 'cuid_214_1381281822.05887' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_34_1381281822.05887' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_35_1381281822.05887' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_36_1381281822.05887' 
    capture_lex $P5007 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx168_start
    .local string rx168_tgt
    .local int rx168_pos
    .local int rx168_off
    .local int rx168_eos
    .local int rx168_rep
    .local pmc rx168_cur
    .local pmc rx168_curclass
    .local pmc rx168_bstack
    .local pmc rx168_cstack
    rx168_start = self."!cursor_start_all"()
    set rx168_cur, rx168_start[0]
    set rx168_tgt, rx168_start[1]
    set rx168_pos, rx168_start[2]
    set rx168_curclass, rx168_start[3]
    set rx168_bstack, rx168_start[4]
    set $I19, rx168_start[5]
    store_lex unicode:"$\x{a2}", rx168_cur
    length rx168_eos, rx168_tgt
    eq $I19, 1, rx168_restart462
    gt rx168_pos, rx168_eos, rx168_fail463
    repr_get_attr_int $I11, self, rx168_curclass, "$!from"
    ne $I11, -1, rxscan169_done469
    goto rxscan169_scan468
  rxscan169_loop467:
    inc rx168_pos
    gt rx168_pos, rx168_eos, rx168_fail463
    repr_bind_attr_int rx168_cur, rx168_curclass, "$!from", rx168_pos
  rxscan169_scan468:
    nqp_rxmark rx168_bstack, rxscan169_loop467, rx168_pos, 0
  rxscan169_done469:
    repr_bind_attr_int rx168_cur, rx168_curclass, "$!pos", rx168_pos
    store_lex unicode:"$\x{a2}", rx168_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_214_1381281822.05887' 
    capture_lex $P5002
    $P5003 = $P5002()
    add $I11, rx168_pos, 1
    gt $I11, rx168_eos, rx168_fail463
    substr $S10, rx168_tgt, rx168_pos, 1
    ne $S10, ucs4:"{", rx168_fail463
    add rx168_pos, 1
    .const 'Sub' $P5004 = 'cuid_34_1381281822.05887' 
    capture_lex $P5004
    repr_bind_attr_int rx168_cur, rx168_curclass, "$!pos", rx168_pos
    $P11 = rx168_cur.$P5004()
    repr_get_attr_int $I11, $P11, rx168_curclass, "$!pos"
    lt $I11, 0, rx168_fail463
    nqp_rxmark rx168_bstack, rxsubrule173_pass482, -1, 0
  rxsubrule173_pass482:
    rx168_cstack = rx168_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx168_pos, $P11, rx168_curclass, "$!pos"
    .const 'Sub' $P5005 = 'cuid_35_1381281822.05887' 
    capture_lex $P5005
    repr_bind_attr_int rx168_cur, rx168_curclass, "$!pos", rx168_pos
    $P11 = rx168_cur.$P5005()
    repr_get_attr_int $I11, $P11, rx168_curclass, "$!pos"
    lt $I11, 0, rx168_fail463
    nqp_rxmark rx168_bstack, rxsubrule177_pass495, -1, 0
  rxsubrule177_pass495:
    rx168_cstack = rx168_cur."!cursor_capture"($P11, "1")
    repr_get_attr_int rx168_pos, $P11, rx168_curclass, "$!pos"
    .const 'Sub' $P5006 = 'cuid_36_1381281822.05887' 
    capture_lex $P5006
    repr_bind_attr_int rx168_cur, rx168_curclass, "$!pos", rx168_pos
    $P11 = rx168_cur.$P5006()
    repr_get_attr_int $I11, $P11, rx168_curclass, "$!pos"
    lt $I11, 0, rx168_fail463
    nqp_rxmark rx168_bstack, rxsubrule181_pass508, -1, 0
  rxsubrule181_pass508:
    rx168_cstack = rx168_cur."!cursor_capture"($P11, "2")
    repr_get_attr_int rx168_pos, $P11, rx168_curclass, "$!pos"
    add $I11, rx168_pos, 1
    gt $I11, rx168_eos, rx168_fail463
    substr $S10, rx168_tgt, rx168_pos, 1
    ne $S10, ucs4:"}", rx168_fail463
    add rx168_pos, 1
    repr_bind_attr_int rx168_cur, rx168_curclass, "$!pos", rx168_pos
    $P11 = rx168_cur."obs"("{N,M} as general quantifier", "** N..M (or ** N..*)")
    repr_get_attr_int $I11, $P11, rx168_curclass, "$!pos"
    lt $I11, 0, rx168_fail463
    repr_get_attr_int rx168_pos, $P11, rx168_curclass, "$!pos"
    rx168_cur."!cursor_pass"(rx168_pos, "quantifier:sym<{N,M}>", 'backtrack'=>1)
    .return (rx168_cur)
  rx168_restart462:
    repr_get_attr_obj rx168_cstack, rx168_cur, rx168_curclass, "$!cstack"
  rx168_fail463:
    unless rx168_bstack, rx168_done461
    pop $I19, rx168_bstack
    if_null rx168_cstack, rx168_cstack_done466
    unless rx168_cstack, rx168_cstack_done466
    dec $I19
    set $P11, rx168_cstack[$I19]
  rx168_cstack_done466:
    pop rx168_rep, rx168_bstack
    pop rx168_pos, rx168_bstack
    pop $I19, rx168_bstack
    lt rx168_pos, -1, rx168_done461
    lt rx168_pos, 0, rx168_fail463
    eq $I19, 0, rx168_fail463
    nqp_islist $I20, rx168_cstack
    unless $I20, rx168_jump464
    elements $I18, rx168_bstack
    le $I18, 0, rx168_cut465
    dec $I18
    set $I18, rx168_bstack[$I18]
  rx168_cut465:
    assign rx168_cstack, $I18
  rx168_jump464:
    jump $I19
  rx168_done461:
    rx168_cur."!cursor_fail"()
    .return (rx168_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_214_1381281822.05887") :anon :lex :outer("cuid_33_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 171

    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_34_1381281822.05887") :anon :lex :outer("cuid_33_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx170_start
    .local string rx170_tgt
    .local int rx170_pos
    .local int rx170_off
    .local int rx170_eos
    .local int rx170_rep
    .local pmc rx170_cur
    .local pmc rx170_curclass
    .local pmc rx170_bstack
    .local pmc rx170_cstack
    rx170_start = self."!cursor_start_all"()
    set rx170_cur, rx170_start[0]
    set rx170_tgt, rx170_start[1]
    set rx170_pos, rx170_start[2]
    set rx170_curclass, rx170_start[3]
    set rx170_bstack, rx170_start[4]
    set $I19, rx170_start[5]
    store_lex unicode:"$\x{a2}", rx170_cur
    length rx170_eos, rx170_tgt
    eq $I19, 1, rx170_restart472
    gt rx170_pos, rx170_eos, rx170_fail473
    repr_get_attr_int $I11, self, rx170_curclass, "$!from"
    ne $I11, -1, rxscan171_done479
    goto rxscan171_scan478
  rxscan171_loop477:
    inc rx170_pos
    gt rx170_pos, rx170_eos, rx170_fail473
    repr_bind_attr_int rx170_cur, rx170_curclass, "$!from", rx170_pos
  rxscan171_scan478:
    nqp_rxmark rx170_bstack, rxscan171_loop477, rx170_pos, 0
  rxscan171_done479:
    nqp_rxmark rx170_bstack, rxquantr172_done481, -1, 0
  rxquantr172_loop480:
    ge rx170_pos, rx170_eos, rx170_fail473
    is_cclass $I11, .CCLASS_NUMERIC, rx170_tgt, rx170_pos
    unless $I11, rx170_fail473
    add rx170_pos, 1
    nqp_rxpeek $I19, rx170_bstack, rxquantr172_done481
    inc $I19
    inc $I19
    set rx170_rep, rx170_bstack[$I19]
    nqp_rxcommit rx170_bstack, rxquantr172_done481
    inc rx170_rep
    nqp_rxmark rx170_bstack, rxquantr172_done481, rx170_pos, rx170_rep
    goto rxquantr172_loop480
  rxquantr172_done481:
    rx170_cur."!cursor_pass"(rx170_pos, 'backtrack'=>1)
    .return (rx170_cur)
  rx170_restart472:
    repr_get_attr_obj rx170_cstack, rx170_cur, rx170_curclass, "$!cstack"
  rx170_fail473:
    unless rx170_bstack, rx170_done471
    pop $I19, rx170_bstack
    if_null rx170_cstack, rx170_cstack_done476
    unless rx170_cstack, rx170_cstack_done476
    dec $I19
    set $P11, rx170_cstack[$I19]
  rx170_cstack_done476:
    pop rx170_rep, rx170_bstack
    pop rx170_pos, rx170_bstack
    pop $I19, rx170_bstack
    lt rx170_pos, -1, rx170_done471
    lt rx170_pos, 0, rx170_fail473
    eq $I19, 0, rx170_fail473
    nqp_islist $I20, rx170_cstack
    unless $I20, rx170_jump474
    elements $I18, rx170_bstack
    le $I18, 0, rx170_cut475
    dec $I18
    set $I18, rx170_bstack[$I18]
  rx170_cut475:
    assign rx170_cstack, $I18
  rx170_jump474:
    jump $I19
  rx170_done471:
    rx170_cur."!cursor_fail"()
    .return (rx170_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_35_1381281822.05887") :anon :lex :outer("cuid_33_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx174_start
    .local string rx174_tgt
    .local int rx174_pos
    .local int rx174_off
    .local int rx174_eos
    .local int rx174_rep
    .local pmc rx174_cur
    .local pmc rx174_curclass
    .local pmc rx174_bstack
    .local pmc rx174_cstack
    rx174_start = self."!cursor_start_all"()
    set rx174_cur, rx174_start[0]
    set rx174_tgt, rx174_start[1]
    set rx174_pos, rx174_start[2]
    set rx174_curclass, rx174_start[3]
    set rx174_bstack, rx174_start[4]
    set $I19, rx174_start[5]
    store_lex unicode:"$\x{a2}", rx174_cur
    length rx174_eos, rx174_tgt
    eq $I19, 1, rx174_restart485
    gt rx174_pos, rx174_eos, rx174_fail486
    repr_get_attr_int $I11, self, rx174_curclass, "$!from"
    ne $I11, -1, rxscan175_done492
    goto rxscan175_scan491
  rxscan175_loop490:
    inc rx174_pos
    gt rx174_pos, rx174_eos, rx174_fail486
    repr_bind_attr_int rx174_cur, rx174_curclass, "$!from", rx174_pos
  rxscan175_scan491:
    nqp_rxmark rx174_bstack, rxscan175_loop490, rx174_pos, 0
  rxscan175_done492:
    nqp_rxmark rx174_bstack, rxquantr176_done494, rx174_pos, 0
  rxquantr176_loop493:
    add $I11, rx174_pos, 1
    gt $I11, rx174_eos, rx174_fail486
    substr $S10, rx174_tgt, rx174_pos, 1
    ne $S10, ucs4:",", rx174_fail486
    add rx174_pos, 1
    nqp_rxpeek $I19, rx174_bstack, rxquantr176_done494
    inc $I19
    inc $I19
    set rx174_rep, rx174_bstack[$I19]
    nqp_rxcommit rx174_bstack, rxquantr176_done494
    inc rx174_rep
  rxquantr176_done494:
    rx174_cur."!cursor_pass"(rx174_pos, 'backtrack'=>1)
    .return (rx174_cur)
  rx174_restart485:
    repr_get_attr_obj rx174_cstack, rx174_cur, rx174_curclass, "$!cstack"
  rx174_fail486:
    unless rx174_bstack, rx174_done484
    pop $I19, rx174_bstack
    if_null rx174_cstack, rx174_cstack_done489
    unless rx174_cstack, rx174_cstack_done489
    dec $I19
    set $P11, rx174_cstack[$I19]
  rx174_cstack_done489:
    pop rx174_rep, rx174_bstack
    pop rx174_pos, rx174_bstack
    pop $I19, rx174_bstack
    lt rx174_pos, -1, rx174_done484
    lt rx174_pos, 0, rx174_fail486
    eq $I19, 0, rx174_fail486
    nqp_islist $I20, rx174_cstack
    unless $I20, rx174_jump487
    elements $I18, rx174_bstack
    le $I18, 0, rx174_cut488
    dec $I18
    set $I18, rx174_bstack[$I18]
  rx174_cut488:
    assign rx174_cstack, $I18
  rx174_jump487:
    jump $I19
  rx174_done484:
    rx174_cur."!cursor_fail"()
    .return (rx174_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_36_1381281822.05887") :anon :lex :outer("cuid_33_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx178_start
    .local string rx178_tgt
    .local int rx178_pos
    .local int rx178_off
    .local int rx178_eos
    .local int rx178_rep
    .local pmc rx178_cur
    .local pmc rx178_curclass
    .local pmc rx178_bstack
    .local pmc rx178_cstack
    rx178_start = self."!cursor_start_all"()
    set rx178_cur, rx178_start[0]
    set rx178_tgt, rx178_start[1]
    set rx178_pos, rx178_start[2]
    set rx178_curclass, rx178_start[3]
    set rx178_bstack, rx178_start[4]
    set $I19, rx178_start[5]
    store_lex unicode:"$\x{a2}", rx178_cur
    length rx178_eos, rx178_tgt
    eq $I19, 1, rx178_restart498
    gt rx178_pos, rx178_eos, rx178_fail499
    repr_get_attr_int $I11, self, rx178_curclass, "$!from"
    ne $I11, -1, rxscan179_done505
    goto rxscan179_scan504
  rxscan179_loop503:
    inc rx178_pos
    gt rx178_pos, rx178_eos, rx178_fail499
    repr_bind_attr_int rx178_cur, rx178_curclass, "$!from", rx178_pos
  rxscan179_scan504:
    nqp_rxmark rx178_bstack, rxscan179_loop503, rx178_pos, 0
  rxscan179_done505:
    nqp_rxmark rx178_bstack, rxquantr180_done507, rx178_pos, 0
  rxquantr180_loop506:
    ge rx178_pos, rx178_eos, rx178_fail499
    is_cclass $I11, .CCLASS_NUMERIC, rx178_tgt, rx178_pos
    unless $I11, rx178_fail499
    add rx178_pos, 1
    nqp_rxpeek $I19, rx178_bstack, rxquantr180_done507
    inc $I19
    inc $I19
    set rx178_rep, rx178_bstack[$I19]
    nqp_rxcommit rx178_bstack, rxquantr180_done507
    inc rx178_rep
    nqp_rxmark rx178_bstack, rxquantr180_done507, rx178_pos, rx178_rep
    goto rxquantr180_loop506
  rxquantr180_done507:
    rx178_cur."!cursor_pass"(rx178_pos, 'backtrack'=>1)
    .return (rx178_cur)
  rx178_restart498:
    repr_get_attr_obj rx178_cstack, rx178_cur, rx178_curclass, "$!cstack"
  rx178_fail499:
    unless rx178_bstack, rx178_done497
    pop $I19, rx178_bstack
    if_null rx178_cstack, rx178_cstack_done502
    unless rx178_cstack, rx178_cstack_done502
    dec $I19
    set $P11, rx178_cstack[$I19]
  rx178_cstack_done502:
    pop rx178_rep, rx178_bstack
    pop rx178_pos, rx178_bstack
    pop $I19, rx178_bstack
    lt rx178_pos, -1, rx178_done497
    lt rx178_pos, 0, rx178_fail499
    eq $I19, 0, rx178_fail499
    nqp_islist $I20, rx178_cstack
    unless $I20, rx178_jump500
    elements $I18, rx178_bstack
    le $I18, 0, rx178_cut501
    dec $I18
    set $I18, rx178_bstack[$I18]
  rx178_cut501:
    assign rx178_cstack, $I18
  rx178_jump500:
    jump $I19
  rx178_done497:
    rx178_cur."!cursor_fail"()
    .return (rx178_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<**>" :subid("cuid_37_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 174
    .param pmc _lex_param_0 
    .const 'Sub' $P5010 = 'cuid_215_1381281822.05887' 
    capture_lex $P5010 
    .const 'Sub' $P5010 = 'cuid_216_1381281822.05887' 
    capture_lex $P5010 
    .const 'Sub' $P5010 = 'cuid_217_1381281822.05887' 
    capture_lex $P5010 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx183_start
    .local string rx183_tgt
    .local int rx183_pos
    .local int rx183_off
    .local int rx183_eos
    .local int rx183_rep
    .local pmc rx183_cur
    .local pmc rx183_curclass
    .local pmc rx183_bstack
    .local pmc rx183_cstack
    rx183_start = self."!cursor_start_all"()
    set rx183_cur, rx183_start[0]
    set rx183_tgt, rx183_start[1]
    set rx183_pos, rx183_start[2]
    set rx183_curclass, rx183_start[3]
    set rx183_bstack, rx183_start[4]
    set $I19, rx183_start[5]
    store_lex unicode:"$\x{a2}", rx183_cur
    length rx183_eos, rx183_tgt
    eq $I19, 1, rx183_restart512
    gt rx183_pos, rx183_eos, rx183_fail513
    repr_get_attr_int $I11, self, rx183_curclass, "$!from"
    ne $I11, -1, rxscan184_done519
    goto rxscan184_scan518
  rxscan184_loop517:
    inc rx183_pos
    gt rx183_pos, rx183_eos, rx183_fail513
    repr_bind_attr_int rx183_cur, rx183_curclass, "$!from", rx183_pos
  rxscan184_scan518:
    nqp_rxmark rx183_bstack, rxscan184_loop517, rx183_pos, 0
  rxscan184_done519:
    nqp_rxmark rx183_bstack, rxcap185_fail521, rx183_pos, 0
    add $I11, rx183_pos, 2
    gt $I11, rx183_eos, rx183_fail513
    substr $S10, rx183_tgt, rx183_pos, 2
    ne $S10, ucs4:"**", rx183_fail513
    add rx183_pos, 2
    nqp_rxpeek $I19, rx183_bstack, rxcap185_fail521
    inc $I19
    set $I11, rx183_bstack[$I19]
    repr_bind_attr_int rx183_cur, rx183_curclass, "$!pos", rx183_pos
    $P11 = rx183_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx183_pos)
    rx183_cstack = rx183_cur."!cursor_capture"($P11, "sym")
    goto rxcap185_done520
  rxcap185_fail521:
    goto rx183_fail513
  rxcap185_done520:
    nqp_rxmark rx183_bstack, rxquantr186_done523, rx183_pos, 0
  rxquantr186_loop522:
    repr_bind_attr_int rx183_cur, rx183_curclass, "$!pos", rx183_pos
    $P11 = rx183_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx183_curclass, "$!pos"
    lt $I11, 0, rx183_fail513
    goto rxsubrule187_pass524
  rxsubrule187_back525:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx183_curclass, "$!pos"
    lt $I11, 0, rx183_fail513
  rxsubrule187_pass524:
    rx183_cstack = rx183_cur."!cursor_capture"($P11, "normspace")
    set_addr $I11, rxsubrule187_back525
    push rx183_bstack, $I11
    push rx183_bstack, 0
    push rx183_bstack, rx183_pos
    elements $I11, rx183_cstack
    push rx183_bstack, $I11
    repr_get_attr_int rx183_pos, $P11, rx183_curclass, "$!pos"
    nqp_rxpeek $I19, rx183_bstack, rxquantr186_done523
    inc $I19
    inc $I19
    set rx183_rep, rx183_bstack[$I19]
    nqp_rxcommit rx183_bstack, rxquantr186_done523
    inc rx183_rep
  rxquantr186_done523:
    repr_bind_attr_int rx183_cur, rx183_curclass, "$!pos", rx183_pos
    $P11 = rx183_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx183_curclass, "$!pos"
    lt $I11, 0, rx183_fail513
    nqp_rxmark rx183_bstack, rxsubrule188_pass526, -1, 0
  rxsubrule188_pass526:
    rx183_cstack = rx183_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx183_pos, $P11, rx183_curclass, "$!pos"
    nqp_rxmark rx183_bstack, rxquantr189_done528, rx183_pos, 0
  rxquantr189_loop527:
    repr_bind_attr_int rx183_cur, rx183_curclass, "$!pos", rx183_pos
    $P11 = rx183_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx183_curclass, "$!pos"
    lt $I11, 0, rx183_fail513
    goto rxsubrule190_pass529
  rxsubrule190_back530:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx183_curclass, "$!pos"
    lt $I11, 0, rx183_fail513
  rxsubrule190_pass529:
    rx183_cstack = rx183_cur."!cursor_capture"($P11, "normspace")
    set_addr $I11, rxsubrule190_back530
    push rx183_bstack, $I11
    push rx183_bstack, 0
    push rx183_bstack, rx183_pos
    elements $I11, rx183_cstack
    push rx183_bstack, $I11
    repr_get_attr_int rx183_pos, $P11, rx183_curclass, "$!pos"
    nqp_rxpeek $I19, rx183_bstack, rxquantr189_done528
    inc $I19
    inc $I19
    set rx183_rep, rx183_bstack[$I19]
    nqp_rxcommit rx183_bstack, rxquantr189_done528
    inc rx183_rep
  rxquantr189_done528:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt191_0532
    nqp_push_label $P11, alt191_1537
    nqp_push_label $P11, alt191_2561
    nqp_rxmark rx183_bstack, alt191_end531, -1, 0
    rx183_cur."!alt"(rx183_pos, "alt_nfa__9_1381281822.79778", $P11)
    goto rx183_fail513
  alt191_0532:
    repr_bind_attr_int rx183_cur, rx183_curclass, "$!pos", rx183_pos
    $P11 = rx183_cur."decint"()
    repr_get_attr_int $I11, $P11, rx183_curclass, "$!pos"
    lt $I11, 0, rx183_fail513
    repr_get_attr_int rx183_pos, $P11, rx183_curclass, "$!pos"
    nqp_rxmark rx183_bstack, rxquantr193_done535, -1, 0
  rxquantr193_loop534:
    ge rx183_pos, rx183_eos, rx183_fail513
    is_cclass $I11, .CCLASS_WHITESPACE, rx183_tgt, rx183_pos
    unless $I11, rx183_fail513
    add rx183_pos, 1
    nqp_rxpeek $I19, rx183_bstack, rxquantr193_done535
    inc $I19
    inc $I19
    set rx183_rep, rx183_bstack[$I19]
    nqp_rxcommit rx183_bstack, rxquantr193_done535
    inc rx183_rep
    nqp_rxmark rx183_bstack, rxquantr193_done535, rx183_pos, rx183_rep
    goto rxquantr193_loop534
  rxquantr193_done535:
    add $I11, rx183_pos, 2
    gt $I11, rx183_eos, rx183_fail513
    substr $S10, rx183_tgt, rx183_pos, 2
    ne $S10, ucs4:"..", rx183_fail513
    add rx183_pos, 2
    repr_bind_attr_int rx183_cur, rx183_curclass, "$!pos", rx183_pos
    $P11 = rx183_cur."panic"("Spaces not allowed in bare range")
    repr_get_attr_int $I11, $P11, rx183_curclass, "$!pos"
    lt $I11, 0, rx183_fail513
    repr_get_attr_int rx183_pos, $P11, rx183_curclass, "$!pos"
    goto alt191_end531
  alt191_1537:
    repr_bind_attr_int rx183_cur, rx183_curclass, "$!pos", rx183_pos
    $P11 = rx183_cur."decint"()
    repr_get_attr_int $I11, $P11, rx183_curclass, "$!pos"
    lt $I11, 0, rx183_fail513
    nqp_rxmark rx183_bstack, rxsubrule195_pass538, -1, 0
  rxsubrule195_pass538:
    rx183_cstack = rx183_cur."!cursor_capture"($P11, "min")
    repr_get_attr_int rx183_pos, $P11, rx183_curclass, "$!pos"
    nqp_rxmark rx183_bstack, rxquantr196_done540, rx183_pos, 0
  rxquantr196_loop539:
    add $I11, rx183_pos, 2
    gt $I11, rx183_eos, rx183_fail513
    substr $S10, rx183_tgt, rx183_pos, 2
    ne $S10, ucs4:"..", rx183_fail513
    add rx183_pos, 2
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt197_0542
    nqp_push_label $P11, alt197_1550
    nqp_push_label $P11, alt197_2553
    nqp_rxmark rx183_bstack, alt197_end541, -1, 0
    rx183_cur."!alt"(rx183_pos, "alt_nfa__8_1381281822.79723", $P11)
    goto rx183_fail513
  alt197_0542:
    repr_bind_attr_int rx183_cur, rx183_curclass, "$!pos", rx183_pos
    $P11 = rx183_cur."decint"()
    repr_get_attr_int $I11, $P11, rx183_curclass, "$!pos"
    lt $I11, 0, rx183_fail513
    nqp_rxmark rx183_bstack, rxsubrule198_pass543, -1, 0
  rxsubrule198_pass543:
    rx183_cstack = rx183_cur."!cursor_capture"($P11, "max")
    repr_get_attr_int rx183_pos, $P11, rx183_curclass, "$!pos"
    repr_bind_attr_int rx183_cur, rx183_curclass, "$!pos", rx183_pos
    store_lex unicode:"$\x{a2}", rx183_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_215_1381281822.05887' 
    capture_lex $P5002
    $P5003 = $P5002()
    goto alt197_end541
  alt197_1550:
    nqp_rxmark rx183_bstack, rxcap202_fail552, rx183_pos, 0
    add $I11, rx183_pos, 1
    gt $I11, rx183_eos, rx183_fail513
    substr $S10, rx183_tgt, rx183_pos, 1
    ne $S10, ucs4:"*", rx183_fail513
    add rx183_pos, 1
    nqp_rxpeek $I19, rx183_bstack, rxcap202_fail552
    inc $I19
    set $I11, rx183_bstack[$I19]
    repr_bind_attr_int rx183_cur, rx183_curclass, "$!pos", rx183_pos
    $P11 = rx183_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx183_pos)
    rx183_cstack = rx183_cur."!cursor_capture"($P11, "max")
    goto rxcap202_done551
  rxcap202_fail552:
    goto rx183_fail513
  rxcap202_done551:
    goto alt197_end541
  alt197_2553:
    repr_bind_attr_int rx183_cur, rx183_curclass, "$!pos", rx183_pos
    $P11 = rx183_cur."panic"("Malformed range")
    repr_get_attr_int $I11, $P11, rx183_curclass, "$!pos"
    lt $I11, 0, rx183_fail513
    repr_get_attr_int rx183_pos, $P11, rx183_curclass, "$!pos"
    goto alt197_end541
  alt197_end541:
    nqp_rxcommit rx183_bstack, alt197_end541
    nqp_rxpeek $I19, rx183_bstack, rxquantr196_done540
    inc $I19
    inc $I19
    set rx183_rep, rx183_bstack[$I19]
    nqp_rxcommit rx183_bstack, rxquantr196_done540
    inc rx183_rep
  rxquantr196_done540:
    repr_bind_attr_int rx183_cur, rx183_curclass, "$!pos", rx183_pos
    store_lex unicode:"$\x{a2}", rx183_cur
    $P5004 = $P101."MATCH"()
    set $P102, $P5004
    .const 'Sub' $P5005 = 'cuid_216_1381281822.05887' 
    capture_lex $P5005
    $P5006 = $P5005()
    goto alt191_end531
  alt191_2561:
    ge rx183_pos, rx183_eos, rx183_fail513
    substr $S11, rx183_tgt, rx183_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx183_fail513
    repr_bind_attr_int rx183_cur, rx183_curclass, "$!pos", rx183_pos
    store_lex unicode:"$\x{a2}", rx183_cur
    $P5007 = $P101."MATCH"()
    set $P102, $P5007
    .const 'Sub' $P5008 = 'cuid_217_1381281822.05887' 
    capture_lex $P5008
    $P5009 = $P5008()
    goto alt191_end531
  alt191_end531:
    nqp_rxcommit rx183_bstack, alt191_end531
    rx183_cur."!cursor_pass"(rx183_pos, "quantifier:sym<**>", 'backtrack'=>1)
    .return (rx183_cur)
  rx183_restart512:
    repr_get_attr_obj rx183_cstack, rx183_cur, rx183_curclass, "$!cstack"
  rx183_fail513:
    unless rx183_bstack, rx183_done511
    pop $I19, rx183_bstack
    if_null rx183_cstack, rx183_cstack_done516
    unless rx183_cstack, rx183_cstack_done516
    dec $I19
    set $P11, rx183_cstack[$I19]
  rx183_cstack_done516:
    pop rx183_rep, rx183_bstack
    pop rx183_pos, rx183_bstack
    pop $I19, rx183_bstack
    lt rx183_pos, -1, rx183_done511
    lt rx183_pos, 0, rx183_fail513
    eq $I19, 0, rx183_fail513
    nqp_islist $I20, rx183_cstack
    unless $I20, rx183_jump514
    elements $I18, rx183_bstack
    le $I18, 0, rx183_cut515
    dec $I18
    set $I18, rx183_bstack[$I18]
  rx183_cut515:
    assign rx183_cstack, $I18
  rx183_jump514:
    jump $I19
  rx183_done511:
    rx183_cur."!cursor_fail"()
    .return (rx183_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_215_1381281822.05887") :anon :lex :outer("cuid_37_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 181
    .local pmc fb_tmp_6 
.annotate 'line', 182
    find_lex $P5001, "$/"
    unless_null $P5001, fallback548
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5001, $P5002
  fallback548:
    set fb_tmp_6, $P5001
    repr_defined $I5002, fb_tmp_6
    unless $I5002 goto if200_else546 
    set $P5003, fb_tmp_6["max"]
    set $P5005, $P5003
    goto if200_end547
  if200_else546:
    null $P5004
    set $P5005, $P5004
  if200_end547:
    unless_null $P5005, vivi_201549
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5005, $P5006
  vivi_201549:
    $P5007 = $P5005."Str"()
    set $N5001, $P5007
    set $N5002, 0
    islt $I5001, $N5001, $N5002
    box $P5012, $I5001
    set $P5011, $P5012
    unless $I5001 goto if199_end545 
    find_lex $P5008, "$/"
    $P5009 = $P5008."CURSOR"()
    $P5010 = $P5009."panic"("Negative numbers are not allowed as quantifiers")
    set $P5011, $P5010
  if199_end545:
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_216_1381281822.05887") :anon :lex :outer("cuid_37_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 188
    .local pmc fb_tmp_7 
    find_lex $P5001, "$/"
    unless_null $P5001, fallback559
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5001, $P5002
  fallback559:
    set fb_tmp_7, $P5001
    repr_defined $I5002, fb_tmp_7
    unless $I5002 goto if205_else557 
    set $P5003, fb_tmp_7["min"]
    set $P5005, $P5003
    goto if205_end558
  if205_else557:
    null $P5004
    set $P5005, $P5004
  if205_end558:
    unless_null $P5005, vivi_206560
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5005, $P5006
  vivi_206560:
    $P5007 = $P5005."Str"()
    set $N5001, $P5007
    set $N5002, 0
    islt $I5001, $N5001, $N5002
    box $P5012, $I5001
    set $P5011, $P5012
    unless $I5001 goto if204_end556 
    find_lex $P5008, "$/"
    $P5009 = $P5008."CURSOR"()
    $P5010 = $P5009."panic"("Negative numbers are not allowed as quantifiers")
    set $P5011, $P5010
  if204_end556:
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_217_1381281822.05887") :anon :lex :outer("cuid_37_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 189

    find_lex $P5001, "$/"
    $P5002 = $P5001."CURSOR"()
    $P5003 = $P5002."panic"("Block case of ** quantifier not yet implemented")
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "backmod" :subid("cuid_38_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 193
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_39_1381281822.05887' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx207_start
    .local string rx207_tgt
    .local int rx207_pos
    .local int rx207_off
    .local int rx207_eos
    .local int rx207_rep
    .local pmc rx207_cur
    .local pmc rx207_curclass
    .local pmc rx207_bstack
    .local pmc rx207_cstack
    rx207_start = self."!cursor_start_all"()
    set rx207_cur, rx207_start[0]
    set rx207_tgt, rx207_start[1]
    set rx207_pos, rx207_start[2]
    set rx207_curclass, rx207_start[3]
    set rx207_bstack, rx207_start[4]
    set $I19, rx207_start[5]
    store_lex unicode:"$\x{a2}", rx207_cur
    length rx207_eos, rx207_tgt
    eq $I19, 1, rx207_restart564
    gt rx207_pos, rx207_eos, rx207_fail565
    repr_get_attr_int $I11, self, rx207_curclass, "$!from"
    ne $I11, -1, rxscan208_done571
    goto rxscan208_scan570
  rxscan208_loop569:
    inc rx207_pos
    gt rx207_pos, rx207_eos, rx207_fail565
    repr_bind_attr_int rx207_cur, rx207_curclass, "$!from", rx207_pos
  rxscan208_scan570:
    nqp_rxmark rx207_bstack, rxscan208_loop569, rx207_pos, 0
  rxscan208_done571:
    nqp_rxmark rx207_bstack, rxquantr209_done573, rx207_pos, 0
  rxquantr209_loop572:
    add $I11, rx207_pos, 1
    gt $I11, rx207_eos, rx207_fail565
    substr $S10, rx207_tgt, rx207_pos, 1
    ne $S10, ucs4:":", rx207_fail565
    add rx207_pos, 1
    nqp_rxpeek $I19, rx207_bstack, rxquantr209_done573
    inc $I19
    inc $I19
    set rx207_rep, rx207_bstack[$I19]
    nqp_rxcommit rx207_bstack, rxquantr209_done573
    inc rx207_rep
  rxquantr209_done573:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt210_0575
    nqp_push_label $P11, alt210_1576
    nqp_push_label $P11, alt210_2577
    nqp_rxmark rx207_bstack, alt210_end574, -1, 0
    rx207_cur."!alt"(rx207_pos, "alt_nfa__10_1381281822.81257", $P11)
    goto rx207_fail565
  alt210_0575:
    add $I11, rx207_pos, 1
    gt $I11, rx207_eos, rx207_fail565
    substr $S10, rx207_tgt, rx207_pos, 1
    ne $S10, ucs4:"?", rx207_fail565
    add rx207_pos, 1
    goto alt210_end574
  alt210_1576:
    add $I11, rx207_pos, 1
    gt $I11, rx207_eos, rx207_fail565
    substr $S10, rx207_tgt, rx207_pos, 1
    ne $S10, ucs4:"!", rx207_fail565
    add rx207_pos, 1
    goto alt210_end574
  alt210_2577:
    .const 'Sub' $P5001 = 'cuid_39_1381281822.05887' 
    capture_lex $P5001
    repr_bind_attr_int rx207_cur, rx207_curclass, "$!pos", rx207_pos
    $P11 = rx207_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx207_curclass, "$!pos"
    ge $I11, 0, rx207_fail565
    goto alt210_end574
  alt210_end574:
    nqp_rxcommit rx207_bstack, alt210_end574
    rx207_cur."!cursor_pass"(rx207_pos, "backmod", 'backtrack'=>1)
    .return (rx207_cur)
  rx207_restart564:
    repr_get_attr_obj rx207_cstack, rx207_cur, rx207_curclass, "$!cstack"
  rx207_fail565:
    unless rx207_bstack, rx207_done563
    pop $I19, rx207_bstack
    if_null rx207_cstack, rx207_cstack_done568
    unless rx207_cstack, rx207_cstack_done568
    dec $I19
    set $P11, rx207_cstack[$I19]
  rx207_cstack_done568:
    pop rx207_rep, rx207_bstack
    pop rx207_pos, rx207_bstack
    pop $I19, rx207_bstack
    lt rx207_pos, -1, rx207_done563
    lt rx207_pos, 0, rx207_fail565
    eq $I19, 0, rx207_fail565
    nqp_islist $I20, rx207_cstack
    unless $I20, rx207_jump566
    elements $I18, rx207_bstack
    le $I18, 0, rx207_cut567
    dec $I18
    set $I18, rx207_bstack[$I18]
  rx207_cut567:
    assign rx207_cstack, $I18
  rx207_jump566:
    jump $I19
  rx207_done563:
    rx207_cur."!cursor_fail"()
    .return (rx207_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_39_1381281822.05887") :anon :lex :outer("cuid_38_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx211_start
    .local string rx211_tgt
    .local int rx211_pos
    .local int rx211_off
    .local int rx211_eos
    .local int rx211_rep
    .local pmc rx211_cur
    .local pmc rx211_curclass
    .local pmc rx211_bstack
    .local pmc rx211_cstack
    rx211_start = self."!cursor_start_all"()
    set rx211_cur, rx211_start[0]
    set rx211_tgt, rx211_start[1]
    set rx211_pos, rx211_start[2]
    set rx211_curclass, rx211_start[3]
    set rx211_bstack, rx211_start[4]
    set $I19, rx211_start[5]
    store_lex unicode:"$\x{a2}", rx211_cur
    length rx211_eos, rx211_tgt
    eq $I19, 1, rx211_restart580
    gt rx211_pos, rx211_eos, rx211_fail581
    repr_get_attr_int $I11, self, rx211_curclass, "$!from"
    ne $I11, -1, rxscan212_done587
    goto rxscan212_scan586
  rxscan212_loop585:
    inc rx211_pos
    gt rx211_pos, rx211_eos, rx211_fail581
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!from", rx211_pos
  rxscan212_scan586:
    nqp_rxmark rx211_bstack, rxscan212_loop585, rx211_pos, 0
  rxscan212_done587:
    add $I11, rx211_pos, 1
    gt $I11, rx211_eos, rx211_fail581
    substr $S10, rx211_tgt, rx211_pos, 1
    ne $S10, ucs4:":", rx211_fail581
    add rx211_pos, 1
    rx211_cur."!cursor_pass"(rx211_pos, 'backtrack'=>1)
    .return (rx211_cur)
  rx211_restart580:
    repr_get_attr_obj rx211_cstack, rx211_cur, rx211_curclass, "$!cstack"
  rx211_fail581:
    unless rx211_bstack, rx211_done579
    pop $I19, rx211_bstack
    if_null rx211_cstack, rx211_cstack_done584
    unless rx211_cstack, rx211_cstack_done584
    dec $I19
    set $P11, rx211_cstack[$I19]
  rx211_cstack_done584:
    pop rx211_rep, rx211_bstack
    pop rx211_pos, rx211_bstack
    pop $I19, rx211_bstack
    lt rx211_pos, -1, rx211_done579
    lt rx211_pos, 0, rx211_fail581
    eq $I19, 0, rx211_fail581
    nqp_islist $I20, rx211_cstack
    unless $I20, rx211_jump582
    elements $I18, rx211_bstack
    le $I18, 0, rx211_cut583
    dec $I18
    set $I18, rx211_bstack[$I18]
  rx211_cut583:
    assign rx211_cstack, $I18
  rx211_jump582:
    jump $I19
  rx211_done579:
    rx211_cur."!cursor_fail"()
    .return (rx211_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar" :subid("cuid_40_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 195
    .param pmc self 
    $P5001 = self."!protoregex"("metachar")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<ws>" :subid("cuid_41_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 196
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx213_start
    .local string rx213_tgt
    .local int rx213_pos
    .local int rx213_off
    .local int rx213_eos
    .local int rx213_rep
    .local pmc rx213_cur
    .local pmc rx213_curclass
    .local pmc rx213_bstack
    .local pmc rx213_cstack
    rx213_start = self."!cursor_start_all"()
    set rx213_cur, rx213_start[0]
    set rx213_tgt, rx213_start[1]
    set rx213_pos, rx213_start[2]
    set rx213_curclass, rx213_start[3]
    set rx213_bstack, rx213_start[4]
    set $I19, rx213_start[5]
    store_lex unicode:"$\x{a2}", rx213_cur
    length rx213_eos, rx213_tgt
    eq $I19, 1, rx213_restart590
    gt rx213_pos, rx213_eos, rx213_fail591
    repr_get_attr_int $I11, self, rx213_curclass, "$!from"
    ne $I11, -1, rxscan214_done597
    goto rxscan214_scan596
  rxscan214_loop595:
    inc rx213_pos
    gt rx213_pos, rx213_eos, rx213_fail591
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!from", rx213_pos
  rxscan214_scan596:
    nqp_rxmark rx213_bstack, rxscan214_loop595, rx213_pos, 0
  rxscan214_done597:
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail591
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
    rx213_cur."!cursor_pass"(rx213_pos, "metachar:sym<ws>", 'backtrack'=>1)
    .return (rx213_cur)
  rx213_restart590:
    repr_get_attr_obj rx213_cstack, rx213_cur, rx213_curclass, "$!cstack"
  rx213_fail591:
    unless rx213_bstack, rx213_done589
    pop $I19, rx213_bstack
    if_null rx213_cstack, rx213_cstack_done594
    unless rx213_cstack, rx213_cstack_done594
    dec $I19
    set $P11, rx213_cstack[$I19]
  rx213_cstack_done594:
    pop rx213_rep, rx213_bstack
    pop rx213_pos, rx213_bstack
    pop $I19, rx213_bstack
    lt rx213_pos, -1, rx213_done589
    lt rx213_pos, 0, rx213_fail591
    eq $I19, 0, rx213_fail591
    nqp_islist $I20, rx213_cstack
    unless $I20, rx213_jump592
    elements $I18, rx213_bstack
    le $I18, 0, rx213_cut593
    dec $I18
    set $I18, rx213_bstack[$I18]
  rx213_cut593:
    assign rx213_cstack, $I18
  rx213_jump592:
    jump $I19
  rx213_done589:
    rx213_cur."!cursor_fail"()
    .return (rx213_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<[ ]>" :subid("cuid_42_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 197
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx216_start
    .local string rx216_tgt
    .local int rx216_pos
    .local int rx216_off
    .local int rx216_eos
    .local int rx216_rep
    .local pmc rx216_cur
    .local pmc rx216_curclass
    .local pmc rx216_bstack
    .local pmc rx216_cstack
    rx216_start = self."!cursor_start_all"()
    set rx216_cur, rx216_start[0]
    set rx216_tgt, rx216_start[1]
    set rx216_pos, rx216_start[2]
    set rx216_curclass, rx216_start[3]
    set rx216_bstack, rx216_start[4]
    set $I19, rx216_start[5]
    store_lex unicode:"$\x{a2}", rx216_cur
    length rx216_eos, rx216_tgt
    eq $I19, 1, rx216_restart601
    gt rx216_pos, rx216_eos, rx216_fail602
    repr_get_attr_int $I11, self, rx216_curclass, "$!from"
    ne $I11, -1, rxscan217_done608
    goto rxscan217_scan607
  rxscan217_loop606:
    inc rx216_pos
    gt rx216_pos, rx216_eos, rx216_fail602
    repr_bind_attr_int rx216_cur, rx216_curclass, "$!from", rx216_pos
  rxscan217_scan607:
    nqp_rxmark rx216_bstack, rxscan217_loop606, rx216_pos, 0
  rxscan217_done608:
    add $I11, rx216_pos, 1
    gt $I11, rx216_eos, rx216_fail602
    substr $S10, rx216_tgt, rx216_pos, 1
    ne $S10, ucs4:"[", rx216_fail602
    add rx216_pos, 1
    repr_bind_attr_int rx216_cur, rx216_curclass, "$!pos", rx216_pos
    $P11 = rx216_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx216_curclass, "$!pos"
    lt $I11, 0, rx216_fail602
    nqp_rxmark rx216_bstack, rxsubrule218_pass609, -1, 0
  rxsubrule218_pass609:
    rx216_cstack = rx216_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx216_pos, $P11, rx216_curclass, "$!pos"
    add $I11, rx216_pos, 1
    gt $I11, rx216_eos, rx216_fail602
    substr $S10, rx216_tgt, rx216_pos, 1
    ne $S10, ucs4:"]", rx216_fail602
    add rx216_pos, 1
    rx216_cur."!cursor_pass"(rx216_pos, "metachar:sym<[ ]>", 'backtrack'=>1)
    .return (rx216_cur)
  rx216_restart601:
    repr_get_attr_obj rx216_cstack, rx216_cur, rx216_curclass, "$!cstack"
  rx216_fail602:
    unless rx216_bstack, rx216_done600
    pop $I19, rx216_bstack
    if_null rx216_cstack, rx216_cstack_done605
    unless rx216_cstack, rx216_cstack_done605
    dec $I19
    set $P11, rx216_cstack[$I19]
  rx216_cstack_done605:
    pop rx216_rep, rx216_bstack
    pop rx216_pos, rx216_bstack
    pop $I19, rx216_bstack
    lt rx216_pos, -1, rx216_done600
    lt rx216_pos, 0, rx216_fail602
    eq $I19, 0, rx216_fail602
    nqp_islist $I20, rx216_cstack
    unless $I20, rx216_jump603
    elements $I18, rx216_bstack
    le $I18, 0, rx216_cut604
    dec $I18
    set $I18, rx216_bstack[$I18]
  rx216_cut604:
    assign rx216_cstack, $I18
  rx216_jump603:
    jump $I19
  rx216_done600:
    rx216_cur."!cursor_fail"()
    .return (rx216_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<( )>" :subid("cuid_43_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 198
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx219_start
    .local string rx219_tgt
    .local int rx219_pos
    .local int rx219_off
    .local int rx219_eos
    .local int rx219_rep
    .local pmc rx219_cur
    .local pmc rx219_curclass
    .local pmc rx219_bstack
    .local pmc rx219_cstack
    rx219_start = self."!cursor_start_all"()
    set rx219_cur, rx219_start[0]
    set rx219_tgt, rx219_start[1]
    set rx219_pos, rx219_start[2]
    set rx219_curclass, rx219_start[3]
    set rx219_bstack, rx219_start[4]
    set $I19, rx219_start[5]
    store_lex unicode:"$\x{a2}", rx219_cur
    length rx219_eos, rx219_tgt
    eq $I19, 1, rx219_restart612
    gt rx219_pos, rx219_eos, rx219_fail613
    repr_get_attr_int $I11, self, rx219_curclass, "$!from"
    ne $I11, -1, rxscan220_done619
    goto rxscan220_scan618
  rxscan220_loop617:
    inc rx219_pos
    gt rx219_pos, rx219_eos, rx219_fail613
    repr_bind_attr_int rx219_cur, rx219_curclass, "$!from", rx219_pos
  rxscan220_scan618:
    nqp_rxmark rx219_bstack, rxscan220_loop617, rx219_pos, 0
  rxscan220_done619:
    add $I11, rx219_pos, 1
    gt $I11, rx219_eos, rx219_fail613
    substr $S10, rx219_tgt, rx219_pos, 1
    ne $S10, ucs4:"(", rx219_fail613
    add rx219_pos, 1
    repr_bind_attr_int rx219_cur, rx219_curclass, "$!pos", rx219_pos
    $P11 = rx219_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx219_curclass, "$!pos"
    lt $I11, 0, rx219_fail613
    nqp_rxmark rx219_bstack, rxsubrule221_pass620, -1, 0
  rxsubrule221_pass620:
    rx219_cstack = rx219_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx219_pos, $P11, rx219_curclass, "$!pos"
    add $I11, rx219_pos, 1
    gt $I11, rx219_eos, rx219_fail613
    substr $S10, rx219_tgt, rx219_pos, 1
    ne $S10, ucs4:")", rx219_fail613
    add rx219_pos, 1
    rx219_cur."!cursor_pass"(rx219_pos, "metachar:sym<( )>", 'backtrack'=>1)
    .return (rx219_cur)
  rx219_restart612:
    repr_get_attr_obj rx219_cstack, rx219_cur, rx219_curclass, "$!cstack"
  rx219_fail613:
    unless rx219_bstack, rx219_done611
    pop $I19, rx219_bstack
    if_null rx219_cstack, rx219_cstack_done616
    unless rx219_cstack, rx219_cstack_done616
    dec $I19
    set $P11, rx219_cstack[$I19]
  rx219_cstack_done616:
    pop rx219_rep, rx219_bstack
    pop rx219_pos, rx219_bstack
    pop $I19, rx219_bstack
    lt rx219_pos, -1, rx219_done611
    lt rx219_pos, 0, rx219_fail613
    eq $I19, 0, rx219_fail613
    nqp_islist $I20, rx219_cstack
    unless $I20, rx219_jump614
    elements $I18, rx219_bstack
    le $I18, 0, rx219_cut615
    dec $I18
    set $I18, rx219_bstack[$I18]
  rx219_cut615:
    assign rx219_cstack, $I18
  rx219_jump614:
    jump $I19
  rx219_done611:
    rx219_cur."!cursor_fail"()
    .return (rx219_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<'>" :subid("cuid_44_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 199
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx222_start
    .local string rx222_tgt
    .local int rx222_pos
    .local int rx222_off
    .local int rx222_eos
    .local int rx222_rep
    .local pmc rx222_cur
    .local pmc rx222_curclass
    .local pmc rx222_bstack
    .local pmc rx222_cstack
    rx222_start = self."!cursor_start_all"()
    set rx222_cur, rx222_start[0]
    set rx222_tgt, rx222_start[1]
    set rx222_pos, rx222_start[2]
    set rx222_curclass, rx222_start[3]
    set rx222_bstack, rx222_start[4]
    set $I19, rx222_start[5]
    store_lex unicode:"$\x{a2}", rx222_cur
    length rx222_eos, rx222_tgt
    eq $I19, 1, rx222_restart623
    gt rx222_pos, rx222_eos, rx222_fail624
    repr_get_attr_int $I11, self, rx222_curclass, "$!from"
    ne $I11, -1, rxscan223_done630
    goto rxscan223_scan629
  rxscan223_loop628:
    inc rx222_pos
    gt rx222_pos, rx222_eos, rx222_fail624
    repr_bind_attr_int rx222_cur, rx222_curclass, "$!from", rx222_pos
  rxscan223_scan629:
    nqp_rxmark rx222_bstack, rxscan223_loop628, rx222_pos, 0
  rxscan223_done630:
    ge rx222_pos, rx222_eos, rx222_fail624
    substr $S11, rx222_tgt, rx222_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx222_fail624
    repr_bind_attr_int rx222_cur, rx222_curclass, "$!pos", rx222_pos
    $P11 = rx222_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx222_curclass, "$!pos"
    lt $I11, 0, rx222_fail624
    nqp_rxmark rx222_bstack, rxsubrule224_pass631, -1, 0
  rxsubrule224_pass631:
    rx222_cstack = rx222_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx222_pos, $P11, rx222_curclass, "$!pos"
    rx222_cur."!cursor_pass"(rx222_pos, "metachar:sym<'>", 'backtrack'=>1)
    .return (rx222_cur)
  rx222_restart623:
    repr_get_attr_obj rx222_cstack, rx222_cur, rx222_curclass, "$!cstack"
  rx222_fail624:
    unless rx222_bstack, rx222_done622
    pop $I19, rx222_bstack
    if_null rx222_cstack, rx222_cstack_done627
    unless rx222_cstack, rx222_cstack_done627
    dec $I19
    set $P11, rx222_cstack[$I19]
  rx222_cstack_done627:
    pop rx222_rep, rx222_bstack
    pop rx222_pos, rx222_bstack
    pop $I19, rx222_bstack
    lt rx222_pos, -1, rx222_done622
    lt rx222_pos, 0, rx222_fail624
    eq $I19, 0, rx222_fail624
    nqp_islist $I20, rx222_cstack
    unless $I20, rx222_jump625
    elements $I18, rx222_bstack
    le $I18, 0, rx222_cut626
    dec $I18
    set $I18, rx222_bstack[$I18]
  rx222_cut626:
    assign rx222_cstack, $I18
  rx222_jump625:
    jump $I19
  rx222_done622:
    rx222_cur."!cursor_fail"()
    .return (rx222_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<\">" :subid("cuid_45_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 200
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx225_start
    .local string rx225_tgt
    .local int rx225_pos
    .local int rx225_off
    .local int rx225_eos
    .local int rx225_rep
    .local pmc rx225_cur
    .local pmc rx225_curclass
    .local pmc rx225_bstack
    .local pmc rx225_cstack
    rx225_start = self."!cursor_start_all"()
    set rx225_cur, rx225_start[0]
    set rx225_tgt, rx225_start[1]
    set rx225_pos, rx225_start[2]
    set rx225_curclass, rx225_start[3]
    set rx225_bstack, rx225_start[4]
    set $I19, rx225_start[5]
    store_lex unicode:"$\x{a2}", rx225_cur
    length rx225_eos, rx225_tgt
    eq $I19, 1, rx225_restart634
    gt rx225_pos, rx225_eos, rx225_fail635
    repr_get_attr_int $I11, self, rx225_curclass, "$!from"
    ne $I11, -1, rxscan226_done641
    goto rxscan226_scan640
  rxscan226_loop639:
    inc rx225_pos
    gt rx225_pos, rx225_eos, rx225_fail635
    repr_bind_attr_int rx225_cur, rx225_curclass, "$!from", rx225_pos
  rxscan226_scan640:
    nqp_rxmark rx225_bstack, rxscan226_loop639, rx225_pos, 0
  rxscan226_done641:
    ge rx225_pos, rx225_eos, rx225_fail635
    substr $S11, rx225_tgt, rx225_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx225_fail635
    repr_bind_attr_int rx225_cur, rx225_curclass, "$!pos", rx225_pos
    $P11 = rx225_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx225_curclass, "$!pos"
    lt $I11, 0, rx225_fail635
    nqp_rxmark rx225_bstack, rxsubrule227_pass642, -1, 0
  rxsubrule227_pass642:
    rx225_cstack = rx225_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx225_pos, $P11, rx225_curclass, "$!pos"
    rx225_cur."!cursor_pass"(rx225_pos, "metachar:sym<\">", 'backtrack'=>1)
    .return (rx225_cur)
  rx225_restart634:
    repr_get_attr_obj rx225_cstack, rx225_cur, rx225_curclass, "$!cstack"
  rx225_fail635:
    unless rx225_bstack, rx225_done633
    pop $I19, rx225_bstack
    if_null rx225_cstack, rx225_cstack_done638
    unless rx225_cstack, rx225_cstack_done638
    dec $I19
    set $P11, rx225_cstack[$I19]
  rx225_cstack_done638:
    pop rx225_rep, rx225_bstack
    pop rx225_pos, rx225_bstack
    pop $I19, rx225_bstack
    lt rx225_pos, -1, rx225_done633
    lt rx225_pos, 0, rx225_fail635
    eq $I19, 0, rx225_fail635
    nqp_islist $I20, rx225_cstack
    unless $I20, rx225_jump636
    elements $I18, rx225_bstack
    le $I18, 0, rx225_cut637
    dec $I18
    set $I18, rx225_bstack[$I18]
  rx225_cut637:
    assign rx225_cstack, $I18
  rx225_jump636:
    jump $I19
  rx225_done633:
    rx225_cur."!cursor_fail"()
    .return (rx225_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<.>" :subid("cuid_46_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 201
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx228_start
    .local string rx228_tgt
    .local int rx228_pos
    .local int rx228_off
    .local int rx228_eos
    .local int rx228_rep
    .local pmc rx228_cur
    .local pmc rx228_curclass
    .local pmc rx228_bstack
    .local pmc rx228_cstack
    rx228_start = self."!cursor_start_all"()
    set rx228_cur, rx228_start[0]
    set rx228_tgt, rx228_start[1]
    set rx228_pos, rx228_start[2]
    set rx228_curclass, rx228_start[3]
    set rx228_bstack, rx228_start[4]
    set $I19, rx228_start[5]
    store_lex unicode:"$\x{a2}", rx228_cur
    length rx228_eos, rx228_tgt
    eq $I19, 1, rx228_restart645
    gt rx228_pos, rx228_eos, rx228_fail646
    repr_get_attr_int $I11, self, rx228_curclass, "$!from"
    ne $I11, -1, rxscan229_done652
    goto rxscan229_scan651
  rxscan229_loop650:
    inc rx228_pos
    gt rx228_pos, rx228_eos, rx228_fail646
    repr_bind_attr_int rx228_cur, rx228_curclass, "$!from", rx228_pos
  rxscan229_scan651:
    nqp_rxmark rx228_bstack, rxscan229_loop650, rx228_pos, 0
  rxscan229_done652:
    nqp_rxmark rx228_bstack, rxcap230_fail654, rx228_pos, 0
    add $I11, rx228_pos, 1
    gt $I11, rx228_eos, rx228_fail646
    substr $S10, rx228_tgt, rx228_pos, 1
    ne $S10, ucs4:".", rx228_fail646
    add rx228_pos, 1
    nqp_rxpeek $I19, rx228_bstack, rxcap230_fail654
    inc $I19
    set $I11, rx228_bstack[$I19]
    repr_bind_attr_int rx228_cur, rx228_curclass, "$!pos", rx228_pos
    $P11 = rx228_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx228_pos)
    rx228_cstack = rx228_cur."!cursor_capture"($P11, "sym")
    goto rxcap230_done653
  rxcap230_fail654:
    goto rx228_fail646
  rxcap230_done653:
    rx228_cur."!cursor_pass"(rx228_pos, "metachar:sym<.>", 'backtrack'=>1)
    .return (rx228_cur)
  rx228_restart645:
    repr_get_attr_obj rx228_cstack, rx228_cur, rx228_curclass, "$!cstack"
  rx228_fail646:
    unless rx228_bstack, rx228_done644
    pop $I19, rx228_bstack
    if_null rx228_cstack, rx228_cstack_done649
    unless rx228_cstack, rx228_cstack_done649
    dec $I19
    set $P11, rx228_cstack[$I19]
  rx228_cstack_done649:
    pop rx228_rep, rx228_bstack
    pop rx228_pos, rx228_bstack
    pop $I19, rx228_bstack
    lt rx228_pos, -1, rx228_done644
    lt rx228_pos, 0, rx228_fail646
    eq $I19, 0, rx228_fail646
    nqp_islist $I20, rx228_cstack
    unless $I20, rx228_jump647
    elements $I18, rx228_bstack
    le $I18, 0, rx228_cut648
    dec $I18
    set $I18, rx228_bstack[$I18]
  rx228_cut648:
    assign rx228_cstack, $I18
  rx228_jump647:
    jump $I19
  rx228_done644:
    rx228_cur."!cursor_fail"()
    .return (rx228_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^>" :subid("cuid_47_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 202
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx231_start
    .local string rx231_tgt
    .local int rx231_pos
    .local int rx231_off
    .local int rx231_eos
    .local int rx231_rep
    .local pmc rx231_cur
    .local pmc rx231_curclass
    .local pmc rx231_bstack
    .local pmc rx231_cstack
    rx231_start = self."!cursor_start_all"()
    set rx231_cur, rx231_start[0]
    set rx231_tgt, rx231_start[1]
    set rx231_pos, rx231_start[2]
    set rx231_curclass, rx231_start[3]
    set rx231_bstack, rx231_start[4]
    set $I19, rx231_start[5]
    store_lex unicode:"$\x{a2}", rx231_cur
    length rx231_eos, rx231_tgt
    eq $I19, 1, rx231_restart657
    gt rx231_pos, rx231_eos, rx231_fail658
    repr_get_attr_int $I11, self, rx231_curclass, "$!from"
    ne $I11, -1, rxscan232_done664
    goto rxscan232_scan663
  rxscan232_loop662:
    inc rx231_pos
    gt rx231_pos, rx231_eos, rx231_fail658
    repr_bind_attr_int rx231_cur, rx231_curclass, "$!from", rx231_pos
  rxscan232_scan663:
    nqp_rxmark rx231_bstack, rxscan232_loop662, rx231_pos, 0
  rxscan232_done664:
    nqp_rxmark rx231_bstack, rxcap233_fail666, rx231_pos, 0
    add $I11, rx231_pos, 1
    gt $I11, rx231_eos, rx231_fail658
    substr $S10, rx231_tgt, rx231_pos, 1
    ne $S10, ucs4:"^", rx231_fail658
    add rx231_pos, 1
    nqp_rxpeek $I19, rx231_bstack, rxcap233_fail666
    inc $I19
    set $I11, rx231_bstack[$I19]
    repr_bind_attr_int rx231_cur, rx231_curclass, "$!pos", rx231_pos
    $P11 = rx231_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx231_pos)
    rx231_cstack = rx231_cur."!cursor_capture"($P11, "sym")
    goto rxcap233_done665
  rxcap233_fail666:
    goto rx231_fail658
  rxcap233_done665:
    rx231_cur."!cursor_pass"(rx231_pos, "metachar:sym<^>", 'backtrack'=>1)
    .return (rx231_cur)
  rx231_restart657:
    repr_get_attr_obj rx231_cstack, rx231_cur, rx231_curclass, "$!cstack"
  rx231_fail658:
    unless rx231_bstack, rx231_done656
    pop $I19, rx231_bstack
    if_null rx231_cstack, rx231_cstack_done661
    unless rx231_cstack, rx231_cstack_done661
    dec $I19
    set $P11, rx231_cstack[$I19]
  rx231_cstack_done661:
    pop rx231_rep, rx231_bstack
    pop rx231_pos, rx231_bstack
    pop $I19, rx231_bstack
    lt rx231_pos, -1, rx231_done656
    lt rx231_pos, 0, rx231_fail658
    eq $I19, 0, rx231_fail658
    nqp_islist $I20, rx231_cstack
    unless $I20, rx231_jump659
    elements $I18, rx231_bstack
    le $I18, 0, rx231_cut660
    dec $I18
    set $I18, rx231_bstack[$I18]
  rx231_cut660:
    assign rx231_cstack, $I18
  rx231_jump659:
    jump $I19
  rx231_done656:
    rx231_cur."!cursor_fail"()
    .return (rx231_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^^>" :subid("cuid_48_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 203
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx234_start
    .local string rx234_tgt
    .local int rx234_pos
    .local int rx234_off
    .local int rx234_eos
    .local int rx234_rep
    .local pmc rx234_cur
    .local pmc rx234_curclass
    .local pmc rx234_bstack
    .local pmc rx234_cstack
    rx234_start = self."!cursor_start_all"()
    set rx234_cur, rx234_start[0]
    set rx234_tgt, rx234_start[1]
    set rx234_pos, rx234_start[2]
    set rx234_curclass, rx234_start[3]
    set rx234_bstack, rx234_start[4]
    set $I19, rx234_start[5]
    store_lex unicode:"$\x{a2}", rx234_cur
    length rx234_eos, rx234_tgt
    eq $I19, 1, rx234_restart669
    gt rx234_pos, rx234_eos, rx234_fail670
    repr_get_attr_int $I11, self, rx234_curclass, "$!from"
    ne $I11, -1, rxscan235_done676
    goto rxscan235_scan675
  rxscan235_loop674:
    inc rx234_pos
    gt rx234_pos, rx234_eos, rx234_fail670
    repr_bind_attr_int rx234_cur, rx234_curclass, "$!from", rx234_pos
  rxscan235_scan675:
    nqp_rxmark rx234_bstack, rxscan235_loop674, rx234_pos, 0
  rxscan235_done676:
    nqp_rxmark rx234_bstack, rxcap236_fail678, rx234_pos, 0
    add $I11, rx234_pos, 2
    gt $I11, rx234_eos, rx234_fail670
    substr $S10, rx234_tgt, rx234_pos, 2
    ne $S10, ucs4:"^^", rx234_fail670
    add rx234_pos, 2
    nqp_rxpeek $I19, rx234_bstack, rxcap236_fail678
    inc $I19
    set $I11, rx234_bstack[$I19]
    repr_bind_attr_int rx234_cur, rx234_curclass, "$!pos", rx234_pos
    $P11 = rx234_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx234_pos)
    rx234_cstack = rx234_cur."!cursor_capture"($P11, "sym")
    goto rxcap236_done677
  rxcap236_fail678:
    goto rx234_fail670
  rxcap236_done677:
    rx234_cur."!cursor_pass"(rx234_pos, "metachar:sym<^^>", 'backtrack'=>1)
    .return (rx234_cur)
  rx234_restart669:
    repr_get_attr_obj rx234_cstack, rx234_cur, rx234_curclass, "$!cstack"
  rx234_fail670:
    unless rx234_bstack, rx234_done668
    pop $I19, rx234_bstack
    if_null rx234_cstack, rx234_cstack_done673
    unless rx234_cstack, rx234_cstack_done673
    dec $I19
    set $P11, rx234_cstack[$I19]
  rx234_cstack_done673:
    pop rx234_rep, rx234_bstack
    pop rx234_pos, rx234_bstack
    pop $I19, rx234_bstack
    lt rx234_pos, -1, rx234_done668
    lt rx234_pos, 0, rx234_fail670
    eq $I19, 0, rx234_fail670
    nqp_islist $I20, rx234_cstack
    unless $I20, rx234_jump671
    elements $I18, rx234_bstack
    le $I18, 0, rx234_cut672
    dec $I18
    set $I18, rx234_bstack[$I18]
  rx234_cut672:
    assign rx234_cstack, $I18
  rx234_jump671:
    jump $I19
  rx234_done668:
    rx234_cur."!cursor_fail"()
    .return (rx234_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$>" :subid("cuid_49_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 204
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx237_start
    .local string rx237_tgt
    .local int rx237_pos
    .local int rx237_off
    .local int rx237_eos
    .local int rx237_rep
    .local pmc rx237_cur
    .local pmc rx237_curclass
    .local pmc rx237_bstack
    .local pmc rx237_cstack
    rx237_start = self."!cursor_start_all"()
    set rx237_cur, rx237_start[0]
    set rx237_tgt, rx237_start[1]
    set rx237_pos, rx237_start[2]
    set rx237_curclass, rx237_start[3]
    set rx237_bstack, rx237_start[4]
    set $I19, rx237_start[5]
    store_lex unicode:"$\x{a2}", rx237_cur
    length rx237_eos, rx237_tgt
    eq $I19, 1, rx237_restart681
    gt rx237_pos, rx237_eos, rx237_fail682
    repr_get_attr_int $I11, self, rx237_curclass, "$!from"
    ne $I11, -1, rxscan238_done688
    goto rxscan238_scan687
  rxscan238_loop686:
    inc rx237_pos
    gt rx237_pos, rx237_eos, rx237_fail682
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!from", rx237_pos
  rxscan238_scan687:
    nqp_rxmark rx237_bstack, rxscan238_loop686, rx237_pos, 0
  rxscan238_done688:
    nqp_rxmark rx237_bstack, rxcap239_fail690, rx237_pos, 0
    add $I11, rx237_pos, 1
    gt $I11, rx237_eos, rx237_fail682
    substr $S10, rx237_tgt, rx237_pos, 1
    ne $S10, ucs4:"$", rx237_fail682
    add rx237_pos, 1
    nqp_rxpeek $I19, rx237_bstack, rxcap239_fail690
    inc $I19
    set $I11, rx237_bstack[$I19]
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx237_pos)
    rx237_cstack = rx237_cur."!cursor_capture"($P11, "sym")
    goto rxcap239_done689
  rxcap239_fail690:
    goto rx237_fail682
  rxcap239_done689:
    rx237_cur."!cursor_pass"(rx237_pos, "metachar:sym<$>", 'backtrack'=>1)
    .return (rx237_cur)
  rx237_restart681:
    repr_get_attr_obj rx237_cstack, rx237_cur, rx237_curclass, "$!cstack"
  rx237_fail682:
    unless rx237_bstack, rx237_done680
    pop $I19, rx237_bstack
    if_null rx237_cstack, rx237_cstack_done685
    unless rx237_cstack, rx237_cstack_done685
    dec $I19
    set $P11, rx237_cstack[$I19]
  rx237_cstack_done685:
    pop rx237_rep, rx237_bstack
    pop rx237_pos, rx237_bstack
    pop $I19, rx237_bstack
    lt rx237_pos, -1, rx237_done680
    lt rx237_pos, 0, rx237_fail682
    eq $I19, 0, rx237_fail682
    nqp_islist $I20, rx237_cstack
    unless $I20, rx237_jump683
    elements $I18, rx237_bstack
    le $I18, 0, rx237_cut684
    dec $I18
    set $I18, rx237_bstack[$I18]
  rx237_cut684:
    assign rx237_cstack, $I18
  rx237_jump683:
    jump $I19
  rx237_done680:
    rx237_cur."!cursor_fail"()
    .return (rx237_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$$>" :subid("cuid_50_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 205
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx240_start
    .local string rx240_tgt
    .local int rx240_pos
    .local int rx240_off
    .local int rx240_eos
    .local int rx240_rep
    .local pmc rx240_cur
    .local pmc rx240_curclass
    .local pmc rx240_bstack
    .local pmc rx240_cstack
    rx240_start = self."!cursor_start_all"()
    set rx240_cur, rx240_start[0]
    set rx240_tgt, rx240_start[1]
    set rx240_pos, rx240_start[2]
    set rx240_curclass, rx240_start[3]
    set rx240_bstack, rx240_start[4]
    set $I19, rx240_start[5]
    store_lex unicode:"$\x{a2}", rx240_cur
    length rx240_eos, rx240_tgt
    eq $I19, 1, rx240_restart693
    gt rx240_pos, rx240_eos, rx240_fail694
    repr_get_attr_int $I11, self, rx240_curclass, "$!from"
    ne $I11, -1, rxscan241_done700
    goto rxscan241_scan699
  rxscan241_loop698:
    inc rx240_pos
    gt rx240_pos, rx240_eos, rx240_fail694
    repr_bind_attr_int rx240_cur, rx240_curclass, "$!from", rx240_pos
  rxscan241_scan699:
    nqp_rxmark rx240_bstack, rxscan241_loop698, rx240_pos, 0
  rxscan241_done700:
    nqp_rxmark rx240_bstack, rxcap242_fail702, rx240_pos, 0
    add $I11, rx240_pos, 2
    gt $I11, rx240_eos, rx240_fail694
    substr $S10, rx240_tgt, rx240_pos, 2
    ne $S10, ucs4:"$$", rx240_fail694
    add rx240_pos, 2
    nqp_rxpeek $I19, rx240_bstack, rxcap242_fail702
    inc $I19
    set $I11, rx240_bstack[$I19]
    repr_bind_attr_int rx240_cur, rx240_curclass, "$!pos", rx240_pos
    $P11 = rx240_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx240_pos)
    rx240_cstack = rx240_cur."!cursor_capture"($P11, "sym")
    goto rxcap242_done701
  rxcap242_fail702:
    goto rx240_fail694
  rxcap242_done701:
    rx240_cur."!cursor_pass"(rx240_pos, "metachar:sym<$$>", 'backtrack'=>1)
    .return (rx240_cur)
  rx240_restart693:
    repr_get_attr_obj rx240_cstack, rx240_cur, rx240_curclass, "$!cstack"
  rx240_fail694:
    unless rx240_bstack, rx240_done692
    pop $I19, rx240_bstack
    if_null rx240_cstack, rx240_cstack_done697
    unless rx240_cstack, rx240_cstack_done697
    dec $I19
    set $P11, rx240_cstack[$I19]
  rx240_cstack_done697:
    pop rx240_rep, rx240_bstack
    pop rx240_pos, rx240_bstack
    pop $I19, rx240_bstack
    lt rx240_pos, -1, rx240_done692
    lt rx240_pos, 0, rx240_fail694
    eq $I19, 0, rx240_fail694
    nqp_islist $I20, rx240_cstack
    unless $I20, rx240_jump695
    elements $I18, rx240_bstack
    le $I18, 0, rx240_cut696
    dec $I18
    set $I18, rx240_bstack[$I18]
  rx240_cut696:
    assign rx240_cstack, $I18
  rx240_jump695:
    jump $I19
  rx240_done692:
    rx240_cur."!cursor_fail"()
    .return (rx240_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:::>" :subid("cuid_51_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 206
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx243_start
    .local string rx243_tgt
    .local int rx243_pos
    .local int rx243_off
    .local int rx243_eos
    .local int rx243_rep
    .local pmc rx243_cur
    .local pmc rx243_curclass
    .local pmc rx243_bstack
    .local pmc rx243_cstack
    rx243_start = self."!cursor_start_all"()
    set rx243_cur, rx243_start[0]
    set rx243_tgt, rx243_start[1]
    set rx243_pos, rx243_start[2]
    set rx243_curclass, rx243_start[3]
    set rx243_bstack, rx243_start[4]
    set $I19, rx243_start[5]
    store_lex unicode:"$\x{a2}", rx243_cur
    length rx243_eos, rx243_tgt
    eq $I19, 1, rx243_restart705
    gt rx243_pos, rx243_eos, rx243_fail706
    repr_get_attr_int $I11, self, rx243_curclass, "$!from"
    ne $I11, -1, rxscan244_done712
    goto rxscan244_scan711
  rxscan244_loop710:
    inc rx243_pos
    gt rx243_pos, rx243_eos, rx243_fail706
    repr_bind_attr_int rx243_cur, rx243_curclass, "$!from", rx243_pos
  rxscan244_scan711:
    nqp_rxmark rx243_bstack, rxscan244_loop710, rx243_pos, 0
  rxscan244_done712:
    nqp_rxmark rx243_bstack, rxcap245_fail714, rx243_pos, 0
    add $I11, rx243_pos, 3
    gt $I11, rx243_eos, rx243_fail706
    substr $S10, rx243_tgt, rx243_pos, 3
    ne $S10, ucs4:":::", rx243_fail706
    add rx243_pos, 3
    nqp_rxpeek $I19, rx243_bstack, rxcap245_fail714
    inc $I19
    set $I11, rx243_bstack[$I19]
    repr_bind_attr_int rx243_cur, rx243_curclass, "$!pos", rx243_pos
    $P11 = rx243_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx243_pos)
    rx243_cstack = rx243_cur."!cursor_capture"($P11, "sym")
    goto rxcap245_done713
  rxcap245_fail714:
    goto rx243_fail706
  rxcap245_done713:
    repr_bind_attr_int rx243_cur, rx243_curclass, "$!pos", rx243_pos
    $P11 = rx243_cur."panic"("::: not yet implemented")
    repr_get_attr_int $I11, $P11, rx243_curclass, "$!pos"
    lt $I11, 0, rx243_fail706
    repr_get_attr_int rx243_pos, $P11, rx243_curclass, "$!pos"
    rx243_cur."!cursor_pass"(rx243_pos, "metachar:sym<:::>", 'backtrack'=>1)
    .return (rx243_cur)
  rx243_restart705:
    repr_get_attr_obj rx243_cstack, rx243_cur, rx243_curclass, "$!cstack"
  rx243_fail706:
    unless rx243_bstack, rx243_done704
    pop $I19, rx243_bstack
    if_null rx243_cstack, rx243_cstack_done709
    unless rx243_cstack, rx243_cstack_done709
    dec $I19
    set $P11, rx243_cstack[$I19]
  rx243_cstack_done709:
    pop rx243_rep, rx243_bstack
    pop rx243_pos, rx243_bstack
    pop $I19, rx243_bstack
    lt rx243_pos, -1, rx243_done704
    lt rx243_pos, 0, rx243_fail706
    eq $I19, 0, rx243_fail706
    nqp_islist $I20, rx243_cstack
    unless $I20, rx243_jump707
    elements $I18, rx243_bstack
    le $I18, 0, rx243_cut708
    dec $I18
    set $I18, rx243_bstack[$I18]
  rx243_cut708:
    assign rx243_cstack, $I18
  rx243_jump707:
    jump $I19
  rx243_done704:
    rx243_cur."!cursor_fail"()
    .return (rx243_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<::>" :subid("cuid_52_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 207
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx247_start
    .local string rx247_tgt
    .local int rx247_pos
    .local int rx247_off
    .local int rx247_eos
    .local int rx247_rep
    .local pmc rx247_cur
    .local pmc rx247_curclass
    .local pmc rx247_bstack
    .local pmc rx247_cstack
    rx247_start = self."!cursor_start_all"()
    set rx247_cur, rx247_start[0]
    set rx247_tgt, rx247_start[1]
    set rx247_pos, rx247_start[2]
    set rx247_curclass, rx247_start[3]
    set rx247_bstack, rx247_start[4]
    set $I19, rx247_start[5]
    store_lex unicode:"$\x{a2}", rx247_cur
    length rx247_eos, rx247_tgt
    eq $I19, 1, rx247_restart718
    gt rx247_pos, rx247_eos, rx247_fail719
    repr_get_attr_int $I11, self, rx247_curclass, "$!from"
    ne $I11, -1, rxscan248_done725
    goto rxscan248_scan724
  rxscan248_loop723:
    inc rx247_pos
    gt rx247_pos, rx247_eos, rx247_fail719
    repr_bind_attr_int rx247_cur, rx247_curclass, "$!from", rx247_pos
  rxscan248_scan724:
    nqp_rxmark rx247_bstack, rxscan248_loop723, rx247_pos, 0
  rxscan248_done725:
    nqp_rxmark rx247_bstack, rxcap249_fail727, rx247_pos, 0
    add $I11, rx247_pos, 2
    gt $I11, rx247_eos, rx247_fail719
    substr $S10, rx247_tgt, rx247_pos, 2
    ne $S10, ucs4:"::", rx247_fail719
    add rx247_pos, 2
    nqp_rxpeek $I19, rx247_bstack, rxcap249_fail727
    inc $I19
    set $I11, rx247_bstack[$I19]
    repr_bind_attr_int rx247_cur, rx247_curclass, "$!pos", rx247_pos
    $P11 = rx247_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx247_pos)
    rx247_cstack = rx247_cur."!cursor_capture"($P11, "sym")
    goto rxcap249_done726
  rxcap249_fail727:
    goto rx247_fail719
  rxcap249_done726:
    repr_bind_attr_int rx247_cur, rx247_curclass, "$!pos", rx247_pos
    $P11 = rx247_cur."panic"(":: not yet implemented")
    repr_get_attr_int $I11, $P11, rx247_curclass, "$!pos"
    lt $I11, 0, rx247_fail719
    repr_get_attr_int rx247_pos, $P11, rx247_curclass, "$!pos"
    rx247_cur."!cursor_pass"(rx247_pos, "metachar:sym<::>", 'backtrack'=>1)
    .return (rx247_cur)
  rx247_restart718:
    repr_get_attr_obj rx247_cstack, rx247_cur, rx247_curclass, "$!cstack"
  rx247_fail719:
    unless rx247_bstack, rx247_done717
    pop $I19, rx247_bstack
    if_null rx247_cstack, rx247_cstack_done722
    unless rx247_cstack, rx247_cstack_done722
    dec $I19
    set $P11, rx247_cstack[$I19]
  rx247_cstack_done722:
    pop rx247_rep, rx247_bstack
    pop rx247_pos, rx247_bstack
    pop $I19, rx247_bstack
    lt rx247_pos, -1, rx247_done717
    lt rx247_pos, 0, rx247_fail719
    eq $I19, 0, rx247_fail719
    nqp_islist $I20, rx247_cstack
    unless $I20, rx247_jump720
    elements $I18, rx247_bstack
    le $I18, 0, rx247_cut721
    dec $I18
    set $I18, rx247_bstack[$I18]
  rx247_cut721:
    assign rx247_cstack, $I18
  rx247_jump720:
    jump $I19
  rx247_done717:
    rx247_cur."!cursor_fail"()
    .return (rx247_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<lwb>" :subid("cuid_53_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 208
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx251_start
    .local string rx251_tgt
    .local int rx251_pos
    .local int rx251_off
    .local int rx251_eos
    .local int rx251_rep
    .local pmc rx251_cur
    .local pmc rx251_curclass
    .local pmc rx251_bstack
    .local pmc rx251_cstack
    rx251_start = self."!cursor_start_all"()
    set rx251_cur, rx251_start[0]
    set rx251_tgt, rx251_start[1]
    set rx251_pos, rx251_start[2]
    set rx251_curclass, rx251_start[3]
    set rx251_bstack, rx251_start[4]
    set $I19, rx251_start[5]
    store_lex unicode:"$\x{a2}", rx251_cur
    length rx251_eos, rx251_tgt
    eq $I19, 1, rx251_restart731
    gt rx251_pos, rx251_eos, rx251_fail732
    repr_get_attr_int $I11, self, rx251_curclass, "$!from"
    ne $I11, -1, rxscan252_done738
    goto rxscan252_scan737
  rxscan252_loop736:
    inc rx251_pos
    gt rx251_pos, rx251_eos, rx251_fail732
    repr_bind_attr_int rx251_cur, rx251_curclass, "$!from", rx251_pos
  rxscan252_scan737:
    nqp_rxmark rx251_bstack, rxscan252_loop736, rx251_pos, 0
  rxscan252_done738:
    nqp_rxmark rx251_bstack, rxcap253_fail740, rx251_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt254_0742
    nqp_push_label $P11, alt254_1743
    nqp_rxmark rx251_bstack, alt254_end741, -1, 0
    rx251_cur."!alt"(rx251_pos, "alt_nfa__11_1381281822.89775", $P11)
    goto rx251_fail732
  alt254_0742:
    add $I11, rx251_pos, 2
    gt $I11, rx251_eos, rx251_fail732
    substr $S10, rx251_tgt, rx251_pos, 2
    ne $S10, ucs4:"<<", rx251_fail732
    add rx251_pos, 2
    goto alt254_end741
  alt254_1743:
    add $I11, rx251_pos, 1
    gt $I11, rx251_eos, rx251_fail732
    substr $S10, rx251_tgt, rx251_pos, 1
    ne $S10, ucs4:"\x{ab}", rx251_fail732
    add rx251_pos, 1
    goto alt254_end741
  alt254_end741:
    nqp_rxcommit rx251_bstack, alt254_end741
    nqp_rxpeek $I19, rx251_bstack, rxcap253_fail740
    inc $I19
    set $I11, rx251_bstack[$I19]
    repr_bind_attr_int rx251_cur, rx251_curclass, "$!pos", rx251_pos
    $P11 = rx251_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx251_pos)
    rx251_cstack = rx251_cur."!cursor_capture"($P11, "sym")
    goto rxcap253_done739
  rxcap253_fail740:
    goto rx251_fail732
  rxcap253_done739:
    rx251_cur."!cursor_pass"(rx251_pos, "metachar:sym<lwb>", 'backtrack'=>1)
    .return (rx251_cur)
  rx251_restart731:
    repr_get_attr_obj rx251_cstack, rx251_cur, rx251_curclass, "$!cstack"
  rx251_fail732:
    unless rx251_bstack, rx251_done730
    pop $I19, rx251_bstack
    if_null rx251_cstack, rx251_cstack_done735
    unless rx251_cstack, rx251_cstack_done735
    dec $I19
    set $P11, rx251_cstack[$I19]
  rx251_cstack_done735:
    pop rx251_rep, rx251_bstack
    pop rx251_pos, rx251_bstack
    pop $I19, rx251_bstack
    lt rx251_pos, -1, rx251_done730
    lt rx251_pos, 0, rx251_fail732
    eq $I19, 0, rx251_fail732
    nqp_islist $I20, rx251_cstack
    unless $I20, rx251_jump733
    elements $I18, rx251_bstack
    le $I18, 0, rx251_cut734
    dec $I18
    set $I18, rx251_bstack[$I18]
  rx251_cut734:
    assign rx251_cstack, $I18
  rx251_jump733:
    jump $I19
  rx251_done730:
    rx251_cur."!cursor_fail"()
    .return (rx251_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<rwb>" :subid("cuid_54_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 209
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx255_start
    .local string rx255_tgt
    .local int rx255_pos
    .local int rx255_off
    .local int rx255_eos
    .local int rx255_rep
    .local pmc rx255_cur
    .local pmc rx255_curclass
    .local pmc rx255_bstack
    .local pmc rx255_cstack
    rx255_start = self."!cursor_start_all"()
    set rx255_cur, rx255_start[0]
    set rx255_tgt, rx255_start[1]
    set rx255_pos, rx255_start[2]
    set rx255_curclass, rx255_start[3]
    set rx255_bstack, rx255_start[4]
    set $I19, rx255_start[5]
    store_lex unicode:"$\x{a2}", rx255_cur
    length rx255_eos, rx255_tgt
    eq $I19, 1, rx255_restart746
    gt rx255_pos, rx255_eos, rx255_fail747
    repr_get_attr_int $I11, self, rx255_curclass, "$!from"
    ne $I11, -1, rxscan256_done753
    goto rxscan256_scan752
  rxscan256_loop751:
    inc rx255_pos
    gt rx255_pos, rx255_eos, rx255_fail747
    repr_bind_attr_int rx255_cur, rx255_curclass, "$!from", rx255_pos
  rxscan256_scan752:
    nqp_rxmark rx255_bstack, rxscan256_loop751, rx255_pos, 0
  rxscan256_done753:
    nqp_rxmark rx255_bstack, rxcap257_fail755, rx255_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt258_0757
    nqp_push_label $P11, alt258_1758
    nqp_rxmark rx255_bstack, alt258_end756, -1, 0
    rx255_cur."!alt"(rx255_pos, "alt_nfa__12_1381281822.90609", $P11)
    goto rx255_fail747
  alt258_0757:
    add $I11, rx255_pos, 2
    gt $I11, rx255_eos, rx255_fail747
    substr $S10, rx255_tgt, rx255_pos, 2
    ne $S10, ucs4:">>", rx255_fail747
    add rx255_pos, 2
    goto alt258_end756
  alt258_1758:
    add $I11, rx255_pos, 1
    gt $I11, rx255_eos, rx255_fail747
    substr $S10, rx255_tgt, rx255_pos, 1
    ne $S10, ucs4:"\x{bb}", rx255_fail747
    add rx255_pos, 1
    goto alt258_end756
  alt258_end756:
    nqp_rxcommit rx255_bstack, alt258_end756
    nqp_rxpeek $I19, rx255_bstack, rxcap257_fail755
    inc $I19
    set $I11, rx255_bstack[$I19]
    repr_bind_attr_int rx255_cur, rx255_curclass, "$!pos", rx255_pos
    $P11 = rx255_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx255_pos)
    rx255_cstack = rx255_cur."!cursor_capture"($P11, "sym")
    goto rxcap257_done754
  rxcap257_fail755:
    goto rx255_fail747
  rxcap257_done754:
    rx255_cur."!cursor_pass"(rx255_pos, "metachar:sym<rwb>", 'backtrack'=>1)
    .return (rx255_cur)
  rx255_restart746:
    repr_get_attr_obj rx255_cstack, rx255_cur, rx255_curclass, "$!cstack"
  rx255_fail747:
    unless rx255_bstack, rx255_done745
    pop $I19, rx255_bstack
    if_null rx255_cstack, rx255_cstack_done750
    unless rx255_cstack, rx255_cstack_done750
    dec $I19
    set $P11, rx255_cstack[$I19]
  rx255_cstack_done750:
    pop rx255_rep, rx255_bstack
    pop rx255_pos, rx255_bstack
    pop $I19, rx255_bstack
    lt rx255_pos, -1, rx255_done745
    lt rx255_pos, 0, rx255_fail747
    eq $I19, 0, rx255_fail747
    nqp_islist $I20, rx255_cstack
    unless $I20, rx255_jump748
    elements $I18, rx255_bstack
    le $I18, 0, rx255_cut749
    dec $I18
    set $I18, rx255_bstack[$I18]
  rx255_cut749:
    assign rx255_cstack, $I18
  rx255_jump748:
    jump $I19
  rx255_done745:
    rx255_cur."!cursor_fail"()
    .return (rx255_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<from>" :subid("cuid_55_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 210
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx259_start
    .local string rx259_tgt
    .local int rx259_pos
    .local int rx259_off
    .local int rx259_eos
    .local int rx259_rep
    .local pmc rx259_cur
    .local pmc rx259_curclass
    .local pmc rx259_bstack
    .local pmc rx259_cstack
    rx259_start = self."!cursor_start_all"()
    set rx259_cur, rx259_start[0]
    set rx259_tgt, rx259_start[1]
    set rx259_pos, rx259_start[2]
    set rx259_curclass, rx259_start[3]
    set rx259_bstack, rx259_start[4]
    set $I19, rx259_start[5]
    store_lex unicode:"$\x{a2}", rx259_cur
    length rx259_eos, rx259_tgt
    eq $I19, 1, rx259_restart761
    gt rx259_pos, rx259_eos, rx259_fail762
    repr_get_attr_int $I11, self, rx259_curclass, "$!from"
    ne $I11, -1, rxscan260_done768
    goto rxscan260_scan767
  rxscan260_loop766:
    inc rx259_pos
    gt rx259_pos, rx259_eos, rx259_fail762
    repr_bind_attr_int rx259_cur, rx259_curclass, "$!from", rx259_pos
  rxscan260_scan767:
    nqp_rxmark rx259_bstack, rxscan260_loop766, rx259_pos, 0
  rxscan260_done768:
    add $I11, rx259_pos, 2
    gt $I11, rx259_eos, rx259_fail762
    substr $S10, rx259_tgt, rx259_pos, 2
    ne $S10, ucs4:"<(", rx259_fail762
    add rx259_pos, 2
    rx259_cur."!cursor_pass"(rx259_pos, "metachar:sym<from>", 'backtrack'=>1)
    .return (rx259_cur)
  rx259_restart761:
    repr_get_attr_obj rx259_cstack, rx259_cur, rx259_curclass, "$!cstack"
  rx259_fail762:
    unless rx259_bstack, rx259_done760
    pop $I19, rx259_bstack
    if_null rx259_cstack, rx259_cstack_done765
    unless rx259_cstack, rx259_cstack_done765
    dec $I19
    set $P11, rx259_cstack[$I19]
  rx259_cstack_done765:
    pop rx259_rep, rx259_bstack
    pop rx259_pos, rx259_bstack
    pop $I19, rx259_bstack
    lt rx259_pos, -1, rx259_done760
    lt rx259_pos, 0, rx259_fail762
    eq $I19, 0, rx259_fail762
    nqp_islist $I20, rx259_cstack
    unless $I20, rx259_jump763
    elements $I18, rx259_bstack
    le $I18, 0, rx259_cut764
    dec $I18
    set $I18, rx259_bstack[$I18]
  rx259_cut764:
    assign rx259_cstack, $I18
  rx259_jump763:
    jump $I19
  rx259_done760:
    rx259_cur."!cursor_fail"()
    .return (rx259_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<to>" :subid("cuid_56_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 211
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx261_start
    .local string rx261_tgt
    .local int rx261_pos
    .local int rx261_off
    .local int rx261_eos
    .local int rx261_rep
    .local pmc rx261_cur
    .local pmc rx261_curclass
    .local pmc rx261_bstack
    .local pmc rx261_cstack
    rx261_start = self."!cursor_start_all"()
    set rx261_cur, rx261_start[0]
    set rx261_tgt, rx261_start[1]
    set rx261_pos, rx261_start[2]
    set rx261_curclass, rx261_start[3]
    set rx261_bstack, rx261_start[4]
    set $I19, rx261_start[5]
    store_lex unicode:"$\x{a2}", rx261_cur
    length rx261_eos, rx261_tgt
    eq $I19, 1, rx261_restart771
    gt rx261_pos, rx261_eos, rx261_fail772
    repr_get_attr_int $I11, self, rx261_curclass, "$!from"
    ne $I11, -1, rxscan262_done778
    goto rxscan262_scan777
  rxscan262_loop776:
    inc rx261_pos
    gt rx261_pos, rx261_eos, rx261_fail772
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!from", rx261_pos
  rxscan262_scan777:
    nqp_rxmark rx261_bstack, rxscan262_loop776, rx261_pos, 0
  rxscan262_done778:
    add $I11, rx261_pos, 2
    gt $I11, rx261_eos, rx261_fail772
    substr $S10, rx261_tgt, rx261_pos, 2
    ne $S10, ucs4:")>", rx261_fail772
    add rx261_pos, 2
    rx261_cur."!cursor_pass"(rx261_pos, "metachar:sym<to>", 'backtrack'=>1)
    .return (rx261_cur)
  rx261_restart771:
    repr_get_attr_obj rx261_cstack, rx261_cur, rx261_curclass, "$!cstack"
  rx261_fail772:
    unless rx261_bstack, rx261_done770
    pop $I19, rx261_bstack
    if_null rx261_cstack, rx261_cstack_done775
    unless rx261_cstack, rx261_cstack_done775
    dec $I19
    set $P11, rx261_cstack[$I19]
  rx261_cstack_done775:
    pop rx261_rep, rx261_bstack
    pop rx261_pos, rx261_bstack
    pop $I19, rx261_bstack
    lt rx261_pos, -1, rx261_done770
    lt rx261_pos, 0, rx261_fail772
    eq $I19, 0, rx261_fail772
    nqp_islist $I20, rx261_cstack
    unless $I20, rx261_jump773
    elements $I18, rx261_bstack
    le $I18, 0, rx261_cut774
    dec $I18
    set $I18, rx261_bstack[$I18]
  rx261_cut774:
    assign rx261_cstack, $I18
  rx261_jump773:
    jump $I19
  rx261_done770:
    rx261_cur."!cursor_fail"()
    .return (rx261_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<bs>" :subid("cuid_57_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 212
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx263_start
    .local string rx263_tgt
    .local int rx263_pos
    .local int rx263_off
    .local int rx263_eos
    .local int rx263_rep
    .local pmc rx263_cur
    .local pmc rx263_curclass
    .local pmc rx263_bstack
    .local pmc rx263_cstack
    rx263_start = self."!cursor_start_all"()
    set rx263_cur, rx263_start[0]
    set rx263_tgt, rx263_start[1]
    set rx263_pos, rx263_start[2]
    set rx263_curclass, rx263_start[3]
    set rx263_bstack, rx263_start[4]
    set $I19, rx263_start[5]
    store_lex unicode:"$\x{a2}", rx263_cur
    length rx263_eos, rx263_tgt
    eq $I19, 1, rx263_restart781
    gt rx263_pos, rx263_eos, rx263_fail782
    repr_get_attr_int $I11, self, rx263_curclass, "$!from"
    ne $I11, -1, rxscan264_done788
    goto rxscan264_scan787
  rxscan264_loop786:
    inc rx263_pos
    gt rx263_pos, rx263_eos, rx263_fail782
    repr_bind_attr_int rx263_cur, rx263_curclass, "$!from", rx263_pos
  rxscan264_scan787:
    nqp_rxmark rx263_bstack, rxscan264_loop786, rx263_pos, 0
  rxscan264_done788:
    ge rx263_pos, rx263_eos, rx263_fail782
    substr $S11, rx263_tgt, rx263_pos, 1
    index $I11, ucs4:"\\", $S11
    lt $I11, 0, rx263_fail782
    inc rx263_pos
    repr_bind_attr_int rx263_cur, rx263_curclass, "$!pos", rx263_pos
    $P11 = rx263_cur."backslash"()
    repr_get_attr_int $I11, $P11, rx263_curclass, "$!pos"
    lt $I11, 0, rx263_fail782
    nqp_rxmark rx263_bstack, rxsubrule265_pass789, -1, 0
  rxsubrule265_pass789:
    rx263_cstack = rx263_cur."!cursor_capture"($P11, "backslash")
    repr_get_attr_int rx263_pos, $P11, rx263_curclass, "$!pos"
    rx263_cur."!cursor_pass"(rx263_pos, "metachar:sym<bs>", 'backtrack'=>1)
    .return (rx263_cur)
  rx263_restart781:
    repr_get_attr_obj rx263_cstack, rx263_cur, rx263_curclass, "$!cstack"
  rx263_fail782:
    unless rx263_bstack, rx263_done780
    pop $I19, rx263_bstack
    if_null rx263_cstack, rx263_cstack_done785
    unless rx263_cstack, rx263_cstack_done785
    dec $I19
    set $P11, rx263_cstack[$I19]
  rx263_cstack_done785:
    pop rx263_rep, rx263_bstack
    pop rx263_pos, rx263_bstack
    pop $I19, rx263_bstack
    lt rx263_pos, -1, rx263_done780
    lt rx263_pos, 0, rx263_fail782
    eq $I19, 0, rx263_fail782
    nqp_islist $I20, rx263_cstack
    unless $I20, rx263_jump783
    elements $I18, rx263_bstack
    le $I18, 0, rx263_cut784
    dec $I18
    set $I18, rx263_bstack[$I18]
  rx263_cut784:
    assign rx263_cstack, $I18
  rx263_jump783:
    jump $I19
  rx263_done780:
    rx263_cur."!cursor_fail"()
    .return (rx263_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<mod>" :subid("cuid_58_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 213
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx266_start
    .local string rx266_tgt
    .local int rx266_pos
    .local int rx266_off
    .local int rx266_eos
    .local int rx266_rep
    .local pmc rx266_cur
    .local pmc rx266_curclass
    .local pmc rx266_bstack
    .local pmc rx266_cstack
    rx266_start = self."!cursor_start_all"()
    set rx266_cur, rx266_start[0]
    set rx266_tgt, rx266_start[1]
    set rx266_pos, rx266_start[2]
    set rx266_curclass, rx266_start[3]
    set rx266_bstack, rx266_start[4]
    set $I19, rx266_start[5]
    store_lex unicode:"$\x{a2}", rx266_cur
    length rx266_eos, rx266_tgt
    eq $I19, 1, rx266_restart792
    gt rx266_pos, rx266_eos, rx266_fail793
    repr_get_attr_int $I11, self, rx266_curclass, "$!from"
    ne $I11, -1, rxscan267_done799
    goto rxscan267_scan798
  rxscan267_loop797:
    inc rx266_pos
    gt rx266_pos, rx266_eos, rx266_fail793
    repr_bind_attr_int rx266_cur, rx266_curclass, "$!from", rx266_pos
  rxscan267_scan798:
    nqp_rxmark rx266_bstack, rxscan267_loop797, rx266_pos, 0
  rxscan267_done799:
    repr_bind_attr_int rx266_cur, rx266_curclass, "$!pos", rx266_pos
    $P11 = rx266_cur."mod_internal"()
    repr_get_attr_int $I11, $P11, rx266_curclass, "$!pos"
    lt $I11, 0, rx266_fail793
    nqp_rxmark rx266_bstack, rxsubrule268_pass800, -1, 0
  rxsubrule268_pass800:
    rx266_cstack = rx266_cur."!cursor_capture"($P11, "mod_internal")
    repr_get_attr_int rx266_pos, $P11, rx266_curclass, "$!pos"
    rx266_cur."!cursor_pass"(rx266_pos, "metachar:sym<mod>", 'backtrack'=>1)
    .return (rx266_cur)
  rx266_restart792:
    repr_get_attr_obj rx266_cstack, rx266_cur, rx266_curclass, "$!cstack"
  rx266_fail793:
    unless rx266_bstack, rx266_done791
    pop $I19, rx266_bstack
    if_null rx266_cstack, rx266_cstack_done796
    unless rx266_cstack, rx266_cstack_done796
    dec $I19
    set $P11, rx266_cstack[$I19]
  rx266_cstack_done796:
    pop rx266_rep, rx266_bstack
    pop rx266_pos, rx266_bstack
    pop $I19, rx266_bstack
    lt rx266_pos, -1, rx266_done791
    lt rx266_pos, 0, rx266_fail793
    eq $I19, 0, rx266_fail793
    nqp_islist $I20, rx266_cstack
    unless $I20, rx266_jump794
    elements $I18, rx266_bstack
    le $I18, 0, rx266_cut795
    dec $I18
    set $I18, rx266_bstack[$I18]
  rx266_cut795:
    assign rx266_cstack, $I18
  rx266_jump794:
    jump $I19
  rx266_done791:
    rx266_cur."!cursor_fail"()
    .return (rx266_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<quantifier>" :subid("cuid_59_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 214
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx269_start
    .local string rx269_tgt
    .local int rx269_pos
    .local int rx269_off
    .local int rx269_eos
    .local int rx269_rep
    .local pmc rx269_cur
    .local pmc rx269_curclass
    .local pmc rx269_bstack
    .local pmc rx269_cstack
    rx269_start = self."!cursor_start_all"()
    set rx269_cur, rx269_start[0]
    set rx269_tgt, rx269_start[1]
    set rx269_pos, rx269_start[2]
    set rx269_curclass, rx269_start[3]
    set rx269_bstack, rx269_start[4]
    set $I19, rx269_start[5]
    store_lex unicode:"$\x{a2}", rx269_cur
    length rx269_eos, rx269_tgt
    eq $I19, 1, rx269_restart803
    gt rx269_pos, rx269_eos, rx269_fail804
    repr_get_attr_int $I11, self, rx269_curclass, "$!from"
    ne $I11, -1, rxscan270_done810
    goto rxscan270_scan809
  rxscan270_loop808:
    inc rx269_pos
    gt rx269_pos, rx269_eos, rx269_fail804
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!from", rx269_pos
  rxscan270_scan809:
    nqp_rxmark rx269_bstack, rxscan270_loop808, rx269_pos, 0
  rxscan270_done810:
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!pos", rx269_pos
    $P11 = rx269_cur."rxstopper"()
    repr_get_attr_int $I11, $P11, rx269_curclass, "$!pos"
    ge $I11, 0, rx269_fail804
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!pos", rx269_pos
    $P11 = rx269_cur."quantifier"()
    repr_get_attr_int $I11, $P11, rx269_curclass, "$!pos"
    lt $I11, 0, rx269_fail804
    nqp_rxmark rx269_bstack, rxsubrule271_pass811, -1, 0
  rxsubrule271_pass811:
    rx269_cstack = rx269_cur."!cursor_capture"($P11, "quantifier")
    repr_get_attr_int rx269_pos, $P11, rx269_curclass, "$!pos"
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!pos", rx269_pos
    $P11 = rx269_cur."panic"("Quantifier quantifies nothing")
    repr_get_attr_int $I11, $P11, rx269_curclass, "$!pos"
    lt $I11, 0, rx269_fail804
    repr_get_attr_int rx269_pos, $P11, rx269_curclass, "$!pos"
    rx269_cur."!cursor_pass"(rx269_pos, "metachar:sym<quantifier>", 'backtrack'=>1)
    .return (rx269_cur)
  rx269_restart803:
    repr_get_attr_obj rx269_cstack, rx269_cur, rx269_curclass, "$!cstack"
  rx269_fail804:
    unless rx269_bstack, rx269_done802
    pop $I19, rx269_bstack
    if_null rx269_cstack, rx269_cstack_done807
    unless rx269_cstack, rx269_cstack_done807
    dec $I19
    set $P11, rx269_cstack[$I19]
  rx269_cstack_done807:
    pop rx269_rep, rx269_bstack
    pop rx269_pos, rx269_bstack
    pop $I19, rx269_bstack
    lt rx269_pos, -1, rx269_done802
    lt rx269_pos, 0, rx269_fail804
    eq $I19, 0, rx269_fail804
    nqp_islist $I20, rx269_cstack
    unless $I20, rx269_jump805
    elements $I18, rx269_bstack
    le $I18, 0, rx269_cut806
    dec $I18
    set $I18, rx269_bstack[$I18]
  rx269_cut806:
    assign rx269_cstack, $I18
  rx269_jump805:
    jump $I19
  rx269_done802:
    rx269_cur."!cursor_fail"()
    .return (rx269_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<~>" :subid("cuid_60_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 219
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx273_start
    .local string rx273_tgt
    .local int rx273_pos
    .local int rx273_off
    .local int rx273_eos
    .local int rx273_rep
    .local pmc rx273_cur
    .local pmc rx273_curclass
    .local pmc rx273_bstack
    .local pmc rx273_cstack
    rx273_start = self."!cursor_start_all"()
    set rx273_cur, rx273_start[0]
    set rx273_tgt, rx273_start[1]
    set rx273_pos, rx273_start[2]
    set rx273_curclass, rx273_start[3]
    set rx273_bstack, rx273_start[4]
    set $I19, rx273_start[5]
    store_lex unicode:"$\x{a2}", rx273_cur
    length rx273_eos, rx273_tgt
    eq $I19, 1, rx273_restart815
    gt rx273_pos, rx273_eos, rx273_fail816
    repr_get_attr_int $I11, self, rx273_curclass, "$!from"
    ne $I11, -1, rxscan274_done822
    goto rxscan274_scan821
  rxscan274_loop820:
    inc rx273_pos
    gt rx273_pos, rx273_eos, rx273_fail816
    repr_bind_attr_int rx273_cur, rx273_curclass, "$!from", rx273_pos
  rxscan274_scan821:
    nqp_rxmark rx273_bstack, rxscan274_loop820, rx273_pos, 0
  rxscan274_done822:
    nqp_rxmark rx273_bstack, rxcap275_fail824, rx273_pos, 0
    add $I11, rx273_pos, 1
    gt $I11, rx273_eos, rx273_fail816
    substr $S10, rx273_tgt, rx273_pos, 1
    ne $S10, ucs4:"~", rx273_fail816
    add rx273_pos, 1
    nqp_rxpeek $I19, rx273_bstack, rxcap275_fail824
    inc $I19
    set $I11, rx273_bstack[$I19]
    repr_bind_attr_int rx273_cur, rx273_curclass, "$!pos", rx273_pos
    $P11 = rx273_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx273_pos)
    rx273_cstack = rx273_cur."!cursor_capture"($P11, "sym")
    goto rxcap275_done823
  rxcap275_fail824:
    goto rx273_fail816
  rxcap275_done823:
    repr_bind_attr_int rx273_cur, rx273_curclass, "$!pos", rx273_pos
    $P11 = rx273_cur."ws"()
    repr_get_attr_int $I11, $P11, rx273_curclass, "$!pos"
    lt $I11, 0, rx273_fail816
    repr_get_attr_int rx273_pos, $P11, rx273_curclass, "$!pos"
    repr_bind_attr_int rx273_cur, rx273_curclass, "$!pos", rx273_pos
    $P11 = rx273_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx273_curclass, "$!pos"
    lt $I11, 0, rx273_fail816
    nqp_rxmark rx273_bstack, rxsubrule277_pass826, -1, 0
  rxsubrule277_pass826:
    rx273_cstack = rx273_cur."!cursor_capture"($P11, "GOAL")
    repr_get_attr_int rx273_pos, $P11, rx273_curclass, "$!pos"
    repr_bind_attr_int rx273_cur, rx273_curclass, "$!pos", rx273_pos
    $P11 = rx273_cur."ws"()
    repr_get_attr_int $I11, $P11, rx273_curclass, "$!pos"
    lt $I11, 0, rx273_fail816
    repr_get_attr_int rx273_pos, $P11, rx273_curclass, "$!pos"
    repr_bind_attr_int rx273_cur, rx273_curclass, "$!pos", rx273_pos
    $P11 = rx273_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx273_curclass, "$!pos"
    lt $I11, 0, rx273_fail816
    nqp_rxmark rx273_bstack, rxsubrule279_pass828, -1, 0
  rxsubrule279_pass828:
    rx273_cstack = rx273_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx273_pos, $P11, rx273_curclass, "$!pos"
    rx273_cur."!cursor_pass"(rx273_pos, "metachar:sym<~>", 'backtrack'=>1)
    .return (rx273_cur)
  rx273_restart815:
    repr_get_attr_obj rx273_cstack, rx273_cur, rx273_curclass, "$!cstack"
  rx273_fail816:
    unless rx273_bstack, rx273_done814
    pop $I19, rx273_bstack
    if_null rx273_cstack, rx273_cstack_done819
    unless rx273_cstack, rx273_cstack_done819
    dec $I19
    set $P11, rx273_cstack[$I19]
  rx273_cstack_done819:
    pop rx273_rep, rx273_bstack
    pop rx273_pos, rx273_bstack
    pop $I19, rx273_bstack
    lt rx273_pos, -1, rx273_done814
    lt rx273_pos, 0, rx273_fail816
    eq $I19, 0, rx273_fail816
    nqp_islist $I20, rx273_cstack
    unless $I20, rx273_jump817
    elements $I18, rx273_bstack
    le $I18, 0, rx273_cut818
    dec $I18
    set $I18, rx273_bstack[$I18]
  rx273_cut818:
    assign rx273_cstack, $I18
  rx273_jump817:
    jump $I19
  rx273_done814:
    rx273_cur."!cursor_fail"()
    .return (rx273_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{*}>" :subid("cuid_61_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 225
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx280_start
    .local string rx280_tgt
    .local int rx280_pos
    .local int rx280_off
    .local int rx280_eos
    .local int rx280_rep
    .local pmc rx280_cur
    .local pmc rx280_curclass
    .local pmc rx280_bstack
    .local pmc rx280_cstack
    rx280_start = self."!cursor_start_all"()
    set rx280_cur, rx280_start[0]
    set rx280_tgt, rx280_start[1]
    set rx280_pos, rx280_start[2]
    set rx280_curclass, rx280_start[3]
    set rx280_bstack, rx280_start[4]
    set $I19, rx280_start[5]
    store_lex unicode:"$\x{a2}", rx280_cur
    length rx280_eos, rx280_tgt
    eq $I19, 1, rx280_restart831
    gt rx280_pos, rx280_eos, rx280_fail832
    repr_get_attr_int $I11, self, rx280_curclass, "$!from"
    ne $I11, -1, rxscan281_done838
    goto rxscan281_scan837
  rxscan281_loop836:
    inc rx280_pos
    gt rx280_pos, rx280_eos, rx280_fail832
    repr_bind_attr_int rx280_cur, rx280_curclass, "$!from", rx280_pos
  rxscan281_scan837:
    nqp_rxmark rx280_bstack, rxscan281_loop836, rx280_pos, 0
  rxscan281_done838:
    nqp_rxmark rx280_bstack, rxcap282_fail840, rx280_pos, 0
    add $I11, rx280_pos, 3
    gt $I11, rx280_eos, rx280_fail832
    substr $S10, rx280_tgt, rx280_pos, 3
    ne $S10, ucs4:"{*}", rx280_fail832
    add rx280_pos, 3
    nqp_rxpeek $I19, rx280_bstack, rxcap282_fail840
    inc $I19
    set $I11, rx280_bstack[$I19]
    repr_bind_attr_int rx280_cur, rx280_curclass, "$!pos", rx280_pos
    $P11 = rx280_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx280_pos)
    rx280_cstack = rx280_cur."!cursor_capture"($P11, "sym")
    goto rxcap282_done839
  rxcap282_fail840:
    goto rx280_fail832
  rxcap282_done839:
    nqp_rxmark rx280_bstack, rxquantr283_done842, rx280_pos, 0
  rxquantr283_loop841:
    nqp_rxmark rx280_bstack, rxquantr284_done844, rx280_pos, 0
  rxquantr284_loop843:
    ge rx280_pos, rx280_eos, rx280_fail832
    substr $S11, rx280_tgt, rx280_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx280_fail832
    inc rx280_pos
    nqp_rxpeek $I19, rx280_bstack, rxquantr284_done844
    inc $I19
    inc $I19
    set rx280_rep, rx280_bstack[$I19]
    nqp_rxcommit rx280_bstack, rxquantr284_done844
    inc rx280_rep
    nqp_rxmark rx280_bstack, rxquantr284_done844, rx280_pos, rx280_rep
    goto rxquantr284_loop843
  rxquantr284_done844:
    add $I11, rx280_pos, 3
    gt $I11, rx280_eos, rx280_fail832
    substr $S10, rx280_tgt, rx280_pos, 3
    ne $S10, ucs4:"#= ", rx280_fail832
    add rx280_pos, 3
    nqp_rxmark rx280_bstack, rxquantr285_done846, rx280_pos, 0
  rxquantr285_loop845:
    ge rx280_pos, rx280_eos, rx280_fail832
    substr $S11, rx280_tgt, rx280_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx280_fail832
    inc rx280_pos
    nqp_rxpeek $I19, rx280_bstack, rxquantr285_done846
    inc $I19
    inc $I19
    set rx280_rep, rx280_bstack[$I19]
    nqp_rxcommit rx280_bstack, rxquantr285_done846
    inc rx280_rep
    nqp_rxmark rx280_bstack, rxquantr285_done846, rx280_pos, rx280_rep
    goto rxquantr285_loop845
  rxquantr285_done846:
    nqp_rxmark rx280_bstack, rxcap286_fail848, rx280_pos, 0
    nqp_rxmark rx280_bstack, rxquantr287_done850, -1, 0
  rxquantr287_loop849:
    ge rx280_pos, rx280_eos, rx280_fail832
    is_cclass $I11, .CCLASS_WHITESPACE, rx280_tgt, rx280_pos
    if $I11, rx280_fail832
    add rx280_pos, 1
    nqp_rxpeek $I19, rx280_bstack, rxquantr287_done850
    inc $I19
    inc $I19
    set rx280_rep, rx280_bstack[$I19]
    nqp_rxcommit rx280_bstack, rxquantr287_done850
    inc rx280_rep
    nqp_rxmark rx280_bstack, rxquantr287_done850, rx280_pos, rx280_rep
    goto rxquantr287_loop849
  rxquantr287_done850:
    nqp_rxmark rx280_bstack, rxquantr288_done852, rx280_pos, 0
  rxquantr288_loop851:
    nqp_rxmark rx280_bstack, rxquantr289_done854, -1, 0
  rxquantr289_loop853:
    ge rx280_pos, rx280_eos, rx280_fail832
    substr $S11, rx280_tgt, rx280_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx280_fail832
    inc rx280_pos
    nqp_rxpeek $I19, rx280_bstack, rxquantr289_done854
    inc $I19
    inc $I19
    set rx280_rep, rx280_bstack[$I19]
    nqp_rxcommit rx280_bstack, rxquantr289_done854
    inc rx280_rep
    nqp_rxmark rx280_bstack, rxquantr289_done854, rx280_pos, rx280_rep
    goto rxquantr289_loop853
  rxquantr289_done854:
    nqp_rxmark rx280_bstack, rxquantr290_done856, -1, 0
  rxquantr290_loop855:
    ge rx280_pos, rx280_eos, rx280_fail832
    is_cclass $I11, .CCLASS_WHITESPACE, rx280_tgt, rx280_pos
    if $I11, rx280_fail832
    add rx280_pos, 1
    nqp_rxpeek $I19, rx280_bstack, rxquantr290_done856
    inc $I19
    inc $I19
    set rx280_rep, rx280_bstack[$I19]
    nqp_rxcommit rx280_bstack, rxquantr290_done856
    inc rx280_rep
    nqp_rxmark rx280_bstack, rxquantr290_done856, rx280_pos, rx280_rep
    goto rxquantr290_loop855
  rxquantr290_done856:
    nqp_rxpeek $I19, rx280_bstack, rxquantr288_done852
    inc $I19
    inc $I19
    set rx280_rep, rx280_bstack[$I19]
    nqp_rxcommit rx280_bstack, rxquantr288_done852
    inc rx280_rep
    nqp_rxmark rx280_bstack, rxquantr288_done852, rx280_pos, rx280_rep
    goto rxquantr288_loop851
  rxquantr288_done852:
    nqp_rxpeek $I19, rx280_bstack, rxcap286_fail848
    inc $I19
    set $I11, rx280_bstack[$I19]
    repr_bind_attr_int rx280_cur, rx280_curclass, "$!pos", rx280_pos
    $P11 = rx280_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx280_pos)
    rx280_cstack = rx280_cur."!cursor_capture"($P11, "key")
    goto rxcap286_done847
  rxcap286_fail848:
    goto rx280_fail832
  rxcap286_done847:
    nqp_rxpeek $I19, rx280_bstack, rxquantr283_done842
    inc $I19
    inc $I19
    set rx280_rep, rx280_bstack[$I19]
    nqp_rxcommit rx280_bstack, rxquantr283_done842
    inc rx280_rep
  rxquantr283_done842:
    rx280_cur."!cursor_pass"(rx280_pos, "metachar:sym<{*}>", 'backtrack'=>1)
    .return (rx280_cur)
  rx280_restart831:
    repr_get_attr_obj rx280_cstack, rx280_cur, rx280_curclass, "$!cstack"
  rx280_fail832:
    unless rx280_bstack, rx280_done830
    pop $I19, rx280_bstack
    if_null rx280_cstack, rx280_cstack_done835
    unless rx280_cstack, rx280_cstack_done835
    dec $I19
    set $P11, rx280_cstack[$I19]
  rx280_cstack_done835:
    pop rx280_rep, rx280_bstack
    pop rx280_pos, rx280_bstack
    pop $I19, rx280_bstack
    lt rx280_pos, -1, rx280_done830
    lt rx280_pos, 0, rx280_fail832
    eq $I19, 0, rx280_fail832
    nqp_islist $I20, rx280_cstack
    unless $I20, rx280_jump833
    elements $I18, rx280_bstack
    le $I18, 0, rx280_cut834
    dec $I18
    set $I18, rx280_bstack[$I18]
  rx280_cut834:
    assign rx280_cstack, $I18
  rx280_jump833:
    jump $I19
  rx280_done830:
    rx280_cur."!cursor_fail"()
    .return (rx280_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<assert>" :subid("cuid_62_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 229
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx291_start
    .local string rx291_tgt
    .local int rx291_pos
    .local int rx291_off
    .local int rx291_eos
    .local int rx291_rep
    .local pmc rx291_cur
    .local pmc rx291_curclass
    .local pmc rx291_bstack
    .local pmc rx291_cstack
    rx291_start = self."!cursor_start_all"()
    set rx291_cur, rx291_start[0]
    set rx291_tgt, rx291_start[1]
    set rx291_pos, rx291_start[2]
    set rx291_curclass, rx291_start[3]
    set rx291_bstack, rx291_start[4]
    set $I19, rx291_start[5]
    store_lex unicode:"$\x{a2}", rx291_cur
    length rx291_eos, rx291_tgt
    eq $I19, 1, rx291_restart859
    gt rx291_pos, rx291_eos, rx291_fail860
    repr_get_attr_int $I11, self, rx291_curclass, "$!from"
    ne $I11, -1, rxscan292_done866
    goto rxscan292_scan865
  rxscan292_loop864:
    inc rx291_pos
    gt rx291_pos, rx291_eos, rx291_fail860
    repr_bind_attr_int rx291_cur, rx291_curclass, "$!from", rx291_pos
  rxscan292_scan865:
    nqp_rxmark rx291_bstack, rxscan292_loop864, rx291_pos, 0
  rxscan292_done866:
    add $I11, rx291_pos, 1
    gt $I11, rx291_eos, rx291_fail860
    substr $S10, rx291_tgt, rx291_pos, 1
    ne $S10, ucs4:"<", rx291_fail860
    add rx291_pos, 1
    repr_bind_attr_int rx291_cur, rx291_curclass, "$!pos", rx291_pos
    $P11 = rx291_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx291_curclass, "$!pos"
    lt $I11, 0, rx291_fail860
    nqp_rxmark rx291_bstack, rxsubrule293_pass867, -1, 0
  rxsubrule293_pass867:
    rx291_cstack = rx291_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx291_pos, $P11, rx291_curclass, "$!pos"
  alt294_0869:
    nqp_rxmark rx291_bstack, alt294_1870, rx291_pos, 0
    add $I11, rx291_pos, 1
    gt $I11, rx291_eos, rx291_fail860
    substr $S10, rx291_tgt, rx291_pos, 1
    ne $S10, ucs4:">", rx291_fail860
    add rx291_pos, 1
    goto alt294_end868
  alt294_1870:
    repr_bind_attr_int rx291_cur, rx291_curclass, "$!pos", rx291_pos
    $P11 = rx291_cur."panic"("regex assertion not terminated by angle bracket")
    repr_get_attr_int $I11, $P11, rx291_curclass, "$!pos"
    lt $I11, 0, rx291_fail860
    repr_get_attr_int rx291_pos, $P11, rx291_curclass, "$!pos"
  alt294_end868:
    rx291_cur."!cursor_pass"(rx291_pos, "metachar:sym<assert>", 'backtrack'=>1)
    .return (rx291_cur)
  rx291_restart859:
    repr_get_attr_obj rx291_cstack, rx291_cur, rx291_curclass, "$!cstack"
  rx291_fail860:
    unless rx291_bstack, rx291_done858
    pop $I19, rx291_bstack
    if_null rx291_cstack, rx291_cstack_done863
    unless rx291_cstack, rx291_cstack_done863
    dec $I19
    set $P11, rx291_cstack[$I19]
  rx291_cstack_done863:
    pop rx291_rep, rx291_bstack
    pop rx291_pos, rx291_bstack
    pop $I19, rx291_bstack
    lt rx291_pos, -1, rx291_done858
    lt rx291_pos, 0, rx291_fail860
    eq $I19, 0, rx291_fail860
    nqp_islist $I20, rx291_cstack
    unless $I20, rx291_jump861
    elements $I18, rx291_bstack
    le $I18, 0, rx291_cut862
    dec $I18
    set $I18, rx291_bstack[$I18]
  rx291_cut862:
    assign rx291_cstack, $I18
  rx291_jump861:
    jump $I19
  rx291_done858:
    rx291_cur."!cursor_fail"()
    .return (rx291_cur) 
.end
.HLL "nqp"
.namespace []
.sub "sigil" :subid("cuid_63_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 234
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx296_start
    .local string rx296_tgt
    .local int rx296_pos
    .local int rx296_off
    .local int rx296_eos
    .local int rx296_rep
    .local pmc rx296_cur
    .local pmc rx296_curclass
    .local pmc rx296_bstack
    .local pmc rx296_cstack
    rx296_start = self."!cursor_start_all"()
    set rx296_cur, rx296_start[0]
    set rx296_tgt, rx296_start[1]
    set rx296_pos, rx296_start[2]
    set rx296_curclass, rx296_start[3]
    set rx296_bstack, rx296_start[4]
    set $I19, rx296_start[5]
    store_lex unicode:"$\x{a2}", rx296_cur
    length rx296_eos, rx296_tgt
    eq $I19, 1, rx296_restart874
    gt rx296_pos, rx296_eos, rx296_fail875
    repr_get_attr_int $I11, self, rx296_curclass, "$!from"
    ne $I11, -1, rxscan297_done881
    goto rxscan297_scan880
  rxscan297_loop879:
    inc rx296_pos
    gt rx296_pos, rx296_eos, rx296_fail875
    repr_bind_attr_int rx296_cur, rx296_curclass, "$!from", rx296_pos
  rxscan297_scan880:
    nqp_rxmark rx296_bstack, rxscan297_loop879, rx296_pos, 0
  rxscan297_done881:
    ge rx296_pos, rx296_eos, rx296_fail875
    substr $S11, rx296_tgt, rx296_pos, 1
    index $I11, ucs4:"$@%&", $S11
    lt $I11, 0, rx296_fail875
    inc rx296_pos
    rx296_cur."!cursor_pass"(rx296_pos, "sigil", 'backtrack'=>1)
    .return (rx296_cur)
  rx296_restart874:
    repr_get_attr_obj rx296_cstack, rx296_cur, rx296_curclass, "$!cstack"
  rx296_fail875:
    unless rx296_bstack, rx296_done873
    pop $I19, rx296_bstack
    if_null rx296_cstack, rx296_cstack_done878
    unless rx296_cstack, rx296_cstack_done878
    dec $I19
    set $P11, rx296_cstack[$I19]
  rx296_cstack_done878:
    pop rx296_rep, rx296_bstack
    pop rx296_pos, rx296_bstack
    pop $I19, rx296_bstack
    lt rx296_pos, -1, rx296_done873
    lt rx296_pos, 0, rx296_fail875
    eq $I19, 0, rx296_fail875
    nqp_islist $I20, rx296_cstack
    unless $I20, rx296_jump876
    elements $I18, rx296_bstack
    le $I18, 0, rx296_cut877
    dec $I18
    set $I18, rx296_bstack[$I18]
  rx296_cut877:
    assign rx296_cstack, $I18
  rx296_jump876:
    jump $I19
  rx296_done873:
    rx296_cur."!cursor_fail"()
    .return (rx296_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<var>" :subid("cuid_64_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 236
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx298_start
    .local string rx298_tgt
    .local int rx298_pos
    .local int rx298_off
    .local int rx298_eos
    .local int rx298_rep
    .local pmc rx298_cur
    .local pmc rx298_curclass
    .local pmc rx298_bstack
    .local pmc rx298_cstack
    rx298_start = self."!cursor_start_all"()
    set rx298_cur, rx298_start[0]
    set rx298_tgt, rx298_start[1]
    set rx298_pos, rx298_start[2]
    set rx298_curclass, rx298_start[3]
    set rx298_bstack, rx298_start[4]
    set $I19, rx298_start[5]
    store_lex unicode:"$\x{a2}", rx298_cur
    length rx298_eos, rx298_tgt
    eq $I19, 1, rx298_restart884
    gt rx298_pos, rx298_eos, rx298_fail885
    repr_get_attr_int $I11, self, rx298_curclass, "$!from"
    ne $I11, -1, rxscan299_done891
    goto rxscan299_scan890
  rxscan299_loop889:
    inc rx298_pos
    gt rx298_pos, rx298_eos, rx298_fail885
    repr_bind_attr_int rx298_cur, rx298_curclass, "$!from", rx298_pos
  rxscan299_scan890:
    nqp_rxmark rx298_bstack, rxscan299_loop889, rx298_pos, 0
  rxscan299_done891:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt300_0893
    nqp_push_label $P11, alt300_1898
    nqp_rxmark rx298_bstack, alt300_end892, -1, 0
    rx298_cur."!alt"(rx298_pos, "alt_nfa__13_1381281823.00833", $P11)
    goto rx298_fail885
  alt300_0893:
    add $I11, rx298_pos, 2
    gt $I11, rx298_eos, rx298_fail885
    substr $S10, rx298_tgt, rx298_pos, 2
    ne $S10, ucs4:"$<", rx298_fail885
    add rx298_pos, 2
    nqp_rxmark rx298_bstack, rxcap301_fail895, rx298_pos, 0
    nqp_rxmark rx298_bstack, rxquantr302_done897, -1, 0
  rxquantr302_loop896:
    ge rx298_pos, rx298_eos, rx298_fail885
    substr $S11, rx298_tgt, rx298_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx298_fail885
    inc rx298_pos
    nqp_rxpeek $I19, rx298_bstack, rxquantr302_done897
    inc $I19
    inc $I19
    set rx298_rep, rx298_bstack[$I19]
    nqp_rxcommit rx298_bstack, rxquantr302_done897
    inc rx298_rep
    nqp_rxmark rx298_bstack, rxquantr302_done897, rx298_pos, rx298_rep
    goto rxquantr302_loop896
  rxquantr302_done897:
    nqp_rxpeek $I19, rx298_bstack, rxcap301_fail895
    inc $I19
    set $I11, rx298_bstack[$I19]
    repr_bind_attr_int rx298_cur, rx298_curclass, "$!pos", rx298_pos
    $P11 = rx298_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx298_pos)
    rx298_cstack = rx298_cur."!cursor_capture"($P11, "name")
    goto rxcap301_done894
  rxcap301_fail895:
    goto rx298_fail885
  rxcap301_done894:
    add $I11, rx298_pos, 1
    gt $I11, rx298_eos, rx298_fail885
    substr $S10, rx298_tgt, rx298_pos, 1
    ne $S10, ucs4:">", rx298_fail885
    add rx298_pos, 1
    goto alt300_end892
  alt300_1898:
    add $I11, rx298_pos, 1
    gt $I11, rx298_eos, rx298_fail885
    substr $S10, rx298_tgt, rx298_pos, 1
    ne $S10, ucs4:"$", rx298_fail885
    add rx298_pos, 1
    nqp_rxmark rx298_bstack, rxcap303_fail900, rx298_pos, 0
    nqp_rxmark rx298_bstack, rxquantr304_done902, -1, 0
  rxquantr304_loop901:
    ge rx298_pos, rx298_eos, rx298_fail885
    is_cclass $I11, .CCLASS_NUMERIC, rx298_tgt, rx298_pos
    unless $I11, rx298_fail885
    add rx298_pos, 1
    nqp_rxpeek $I19, rx298_bstack, rxquantr304_done902
    inc $I19
    inc $I19
    set rx298_rep, rx298_bstack[$I19]
    nqp_rxcommit rx298_bstack, rxquantr304_done902
    inc rx298_rep
    nqp_rxmark rx298_bstack, rxquantr304_done902, rx298_pos, rx298_rep
    goto rxquantr304_loop901
  rxquantr304_done902:
    nqp_rxpeek $I19, rx298_bstack, rxcap303_fail900
    inc $I19
    set $I11, rx298_bstack[$I19]
    repr_bind_attr_int rx298_cur, rx298_curclass, "$!pos", rx298_pos
    $P11 = rx298_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx298_pos)
    rx298_cstack = rx298_cur."!cursor_capture"($P11, "pos")
    goto rxcap303_done899
  rxcap303_fail900:
    goto rx298_fail885
  rxcap303_done899:
    goto alt300_end892
  alt300_end892:
    nqp_rxcommit rx298_bstack, alt300_end892
    nqp_rxmark rx298_bstack, rxquantr305_done904, rx298_pos, 0
  rxquantr305_loop903:
    repr_bind_attr_int rx298_cur, rx298_curclass, "$!pos", rx298_pos
    $P11 = rx298_cur."ws"()
    repr_get_attr_int $I11, $P11, rx298_curclass, "$!pos"
    lt $I11, 0, rx298_fail885
    repr_get_attr_int rx298_pos, $P11, rx298_curclass, "$!pos"
    add $I11, rx298_pos, 1
    gt $I11, rx298_eos, rx298_fail885
    substr $S10, rx298_tgt, rx298_pos, 1
    ne $S10, ucs4:"=", rx298_fail885
    add rx298_pos, 1
    repr_bind_attr_int rx298_cur, rx298_curclass, "$!pos", rx298_pos
    $P11 = rx298_cur."ws"()
    repr_get_attr_int $I11, $P11, rx298_curclass, "$!pos"
    lt $I11, 0, rx298_fail885
    repr_get_attr_int rx298_pos, $P11, rx298_curclass, "$!pos"
    repr_bind_attr_int rx298_cur, rx298_curclass, "$!pos", rx298_pos
    $P11 = rx298_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx298_curclass, "$!pos"
    lt $I11, 0, rx298_fail885
    nqp_rxmark rx298_bstack, rxsubrule308_pass907, -1, 0
  rxsubrule308_pass907:
    rx298_cstack = rx298_cur."!cursor_capture"($P11, "quantified_atom")
    repr_get_attr_int rx298_pos, $P11, rx298_curclass, "$!pos"
    nqp_rxpeek $I19, rx298_bstack, rxquantr305_done904
    inc $I19
    inc $I19
    set rx298_rep, rx298_bstack[$I19]
    nqp_rxcommit rx298_bstack, rxquantr305_done904
    inc rx298_rep
  rxquantr305_done904:
    rx298_cur."!cursor_pass"(rx298_pos, "metachar:sym<var>", 'backtrack'=>1)
    .return (rx298_cur)
  rx298_restart884:
    repr_get_attr_obj rx298_cstack, rx298_cur, rx298_curclass, "$!cstack"
  rx298_fail885:
    unless rx298_bstack, rx298_done883
    pop $I19, rx298_bstack
    if_null rx298_cstack, rx298_cstack_done888
    unless rx298_cstack, rx298_cstack_done888
    dec $I19
    set $P11, rx298_cstack[$I19]
  rx298_cstack_done888:
    pop rx298_rep, rx298_bstack
    pop rx298_pos, rx298_bstack
    pop $I19, rx298_bstack
    lt rx298_pos, -1, rx298_done883
    lt rx298_pos, 0, rx298_fail885
    eq $I19, 0, rx298_fail885
    nqp_islist $I20, rx298_cstack
    unless $I20, rx298_jump886
    elements $I18, rx298_bstack
    le $I18, 0, rx298_cut887
    dec $I18
    set $I18, rx298_bstack[$I18]
  rx298_cut887:
    assign rx298_cstack, $I18
  rx298_jump886:
    jump $I19
  rx298_done883:
    rx298_cur."!cursor_fail"()
    .return (rx298_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash" :subid("cuid_65_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 245
    .param pmc self 
    $P5001 = self."!protoregex"("backslash")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<s>" :subid("cuid_66_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 246
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx309_start
    .local string rx309_tgt
    .local int rx309_pos
    .local int rx309_off
    .local int rx309_eos
    .local int rx309_rep
    .local pmc rx309_cur
    .local pmc rx309_curclass
    .local pmc rx309_bstack
    .local pmc rx309_cstack
    rx309_start = self."!cursor_start_all"()
    set rx309_cur, rx309_start[0]
    set rx309_tgt, rx309_start[1]
    set rx309_pos, rx309_start[2]
    set rx309_curclass, rx309_start[3]
    set rx309_bstack, rx309_start[4]
    set $I19, rx309_start[5]
    store_lex unicode:"$\x{a2}", rx309_cur
    length rx309_eos, rx309_tgt
    eq $I19, 1, rx309_restart910
    gt rx309_pos, rx309_eos, rx309_fail911
    repr_get_attr_int $I11, self, rx309_curclass, "$!from"
    ne $I11, -1, rxscan310_done917
    goto rxscan310_scan916
  rxscan310_loop915:
    inc rx309_pos
    gt rx309_pos, rx309_eos, rx309_fail911
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!from", rx309_pos
  rxscan310_scan916:
    nqp_rxmark rx309_bstack, rxscan310_loop915, rx309_pos, 0
  rxscan310_done917:
    nqp_rxmark rx309_bstack, rxcap311_fail919, rx309_pos, 0
    ge rx309_pos, rx309_eos, rx309_fail911
    substr $S11, rx309_tgt, rx309_pos, 1
    index $I11, ucs4:"dDnNsSwW", $S11
    lt $I11, 0, rx309_fail911
    inc rx309_pos
    nqp_rxpeek $I19, rx309_bstack, rxcap311_fail919
    inc $I19
    set $I11, rx309_bstack[$I19]
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!pos", rx309_pos
    $P11 = rx309_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx309_pos)
    rx309_cstack = rx309_cur."!cursor_capture"($P11, "sym")
    goto rxcap311_done918
  rxcap311_fail919:
    goto rx309_fail911
  rxcap311_done918:
    rx309_cur."!cursor_pass"(rx309_pos, "backslash:sym<s>", 'backtrack'=>1)
    .return (rx309_cur)
  rx309_restart910:
    repr_get_attr_obj rx309_cstack, rx309_cur, rx309_curclass, "$!cstack"
  rx309_fail911:
    unless rx309_bstack, rx309_done909
    pop $I19, rx309_bstack
    if_null rx309_cstack, rx309_cstack_done914
    unless rx309_cstack, rx309_cstack_done914
    dec $I19
    set $P11, rx309_cstack[$I19]
  rx309_cstack_done914:
    pop rx309_rep, rx309_bstack
    pop rx309_pos, rx309_bstack
    pop $I19, rx309_bstack
    lt rx309_pos, -1, rx309_done909
    lt rx309_pos, 0, rx309_fail911
    eq $I19, 0, rx309_fail911
    nqp_islist $I20, rx309_cstack
    unless $I20, rx309_jump912
    elements $I18, rx309_bstack
    le $I18, 0, rx309_cut913
    dec $I18
    set $I18, rx309_bstack[$I18]
  rx309_cut913:
    assign rx309_cstack, $I18
  rx309_jump912:
    jump $I19
  rx309_done909:
    rx309_cur."!cursor_fail"()
    .return (rx309_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<b>" :subid("cuid_67_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 247
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx312_start
    .local string rx312_tgt
    .local int rx312_pos
    .local int rx312_off
    .local int rx312_eos
    .local int rx312_rep
    .local pmc rx312_cur
    .local pmc rx312_curclass
    .local pmc rx312_bstack
    .local pmc rx312_cstack
    rx312_start = self."!cursor_start_all"()
    set rx312_cur, rx312_start[0]
    set rx312_tgt, rx312_start[1]
    set rx312_pos, rx312_start[2]
    set rx312_curclass, rx312_start[3]
    set rx312_bstack, rx312_start[4]
    set $I19, rx312_start[5]
    store_lex unicode:"$\x{a2}", rx312_cur
    length rx312_eos, rx312_tgt
    eq $I19, 1, rx312_restart922
    gt rx312_pos, rx312_eos, rx312_fail923
    repr_get_attr_int $I11, self, rx312_curclass, "$!from"
    ne $I11, -1, rxscan313_done929
    goto rxscan313_scan928
  rxscan313_loop927:
    inc rx312_pos
    gt rx312_pos, rx312_eos, rx312_fail923
    repr_bind_attr_int rx312_cur, rx312_curclass, "$!from", rx312_pos
  rxscan313_scan928:
    nqp_rxmark rx312_bstack, rxscan313_loop927, rx312_pos, 0
  rxscan313_done929:
    nqp_rxmark rx312_bstack, rxcap314_fail931, rx312_pos, 0
    ge rx312_pos, rx312_eos, rx312_fail923
    substr $S11, rx312_tgt, rx312_pos, 1
    index $I11, ucs4:"bB", $S11
    lt $I11, 0, rx312_fail923
    inc rx312_pos
    nqp_rxpeek $I19, rx312_bstack, rxcap314_fail931
    inc $I19
    set $I11, rx312_bstack[$I19]
    repr_bind_attr_int rx312_cur, rx312_curclass, "$!pos", rx312_pos
    $P11 = rx312_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx312_pos)
    rx312_cstack = rx312_cur."!cursor_capture"($P11, "sym")
    goto rxcap314_done930
  rxcap314_fail931:
    goto rx312_fail923
  rxcap314_done930:
    rx312_cur."!cursor_pass"(rx312_pos, "backslash:sym<b>", 'backtrack'=>1)
    .return (rx312_cur)
  rx312_restart922:
    repr_get_attr_obj rx312_cstack, rx312_cur, rx312_curclass, "$!cstack"
  rx312_fail923:
    unless rx312_bstack, rx312_done921
    pop $I19, rx312_bstack
    if_null rx312_cstack, rx312_cstack_done926
    unless rx312_cstack, rx312_cstack_done926
    dec $I19
    set $P11, rx312_cstack[$I19]
  rx312_cstack_done926:
    pop rx312_rep, rx312_bstack
    pop rx312_pos, rx312_bstack
    pop $I19, rx312_bstack
    lt rx312_pos, -1, rx312_done921
    lt rx312_pos, 0, rx312_fail923
    eq $I19, 0, rx312_fail923
    nqp_islist $I20, rx312_cstack
    unless $I20, rx312_jump924
    elements $I18, rx312_bstack
    le $I18, 0, rx312_cut925
    dec $I18
    set $I18, rx312_bstack[$I18]
  rx312_cut925:
    assign rx312_cstack, $I18
  rx312_jump924:
    jump $I19
  rx312_done921:
    rx312_cur."!cursor_fail"()
    .return (rx312_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<e>" :subid("cuid_68_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 248
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx315_start
    .local string rx315_tgt
    .local int rx315_pos
    .local int rx315_off
    .local int rx315_eos
    .local int rx315_rep
    .local pmc rx315_cur
    .local pmc rx315_curclass
    .local pmc rx315_bstack
    .local pmc rx315_cstack
    rx315_start = self."!cursor_start_all"()
    set rx315_cur, rx315_start[0]
    set rx315_tgt, rx315_start[1]
    set rx315_pos, rx315_start[2]
    set rx315_curclass, rx315_start[3]
    set rx315_bstack, rx315_start[4]
    set $I19, rx315_start[5]
    store_lex unicode:"$\x{a2}", rx315_cur
    length rx315_eos, rx315_tgt
    eq $I19, 1, rx315_restart934
    gt rx315_pos, rx315_eos, rx315_fail935
    repr_get_attr_int $I11, self, rx315_curclass, "$!from"
    ne $I11, -1, rxscan316_done941
    goto rxscan316_scan940
  rxscan316_loop939:
    inc rx315_pos
    gt rx315_pos, rx315_eos, rx315_fail935
    repr_bind_attr_int rx315_cur, rx315_curclass, "$!from", rx315_pos
  rxscan316_scan940:
    nqp_rxmark rx315_bstack, rxscan316_loop939, rx315_pos, 0
  rxscan316_done941:
    nqp_rxmark rx315_bstack, rxcap317_fail943, rx315_pos, 0
    ge rx315_pos, rx315_eos, rx315_fail935
    substr $S11, rx315_tgt, rx315_pos, 1
    index $I11, ucs4:"eE", $S11
    lt $I11, 0, rx315_fail935
    inc rx315_pos
    nqp_rxpeek $I19, rx315_bstack, rxcap317_fail943
    inc $I19
    set $I11, rx315_bstack[$I19]
    repr_bind_attr_int rx315_cur, rx315_curclass, "$!pos", rx315_pos
    $P11 = rx315_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx315_pos)
    rx315_cstack = rx315_cur."!cursor_capture"($P11, "sym")
    goto rxcap317_done942
  rxcap317_fail943:
    goto rx315_fail935
  rxcap317_done942:
    rx315_cur."!cursor_pass"(rx315_pos, "backslash:sym<e>", 'backtrack'=>1)
    .return (rx315_cur)
  rx315_restart934:
    repr_get_attr_obj rx315_cstack, rx315_cur, rx315_curclass, "$!cstack"
  rx315_fail935:
    unless rx315_bstack, rx315_done933
    pop $I19, rx315_bstack
    if_null rx315_cstack, rx315_cstack_done938
    unless rx315_cstack, rx315_cstack_done938
    dec $I19
    set $P11, rx315_cstack[$I19]
  rx315_cstack_done938:
    pop rx315_rep, rx315_bstack
    pop rx315_pos, rx315_bstack
    pop $I19, rx315_bstack
    lt rx315_pos, -1, rx315_done933
    lt rx315_pos, 0, rx315_fail935
    eq $I19, 0, rx315_fail935
    nqp_islist $I20, rx315_cstack
    unless $I20, rx315_jump936
    elements $I18, rx315_bstack
    le $I18, 0, rx315_cut937
    dec $I18
    set $I18, rx315_bstack[$I18]
  rx315_cut937:
    assign rx315_cstack, $I18
  rx315_jump936:
    jump $I19
  rx315_done933:
    rx315_cur."!cursor_fail"()
    .return (rx315_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<f>" :subid("cuid_69_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 249
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx318_start
    .local string rx318_tgt
    .local int rx318_pos
    .local int rx318_off
    .local int rx318_eos
    .local int rx318_rep
    .local pmc rx318_cur
    .local pmc rx318_curclass
    .local pmc rx318_bstack
    .local pmc rx318_cstack
    rx318_start = self."!cursor_start_all"()
    set rx318_cur, rx318_start[0]
    set rx318_tgt, rx318_start[1]
    set rx318_pos, rx318_start[2]
    set rx318_curclass, rx318_start[3]
    set rx318_bstack, rx318_start[4]
    set $I19, rx318_start[5]
    store_lex unicode:"$\x{a2}", rx318_cur
    length rx318_eos, rx318_tgt
    eq $I19, 1, rx318_restart946
    gt rx318_pos, rx318_eos, rx318_fail947
    repr_get_attr_int $I11, self, rx318_curclass, "$!from"
    ne $I11, -1, rxscan319_done953
    goto rxscan319_scan952
  rxscan319_loop951:
    inc rx318_pos
    gt rx318_pos, rx318_eos, rx318_fail947
    repr_bind_attr_int rx318_cur, rx318_curclass, "$!from", rx318_pos
  rxscan319_scan952:
    nqp_rxmark rx318_bstack, rxscan319_loop951, rx318_pos, 0
  rxscan319_done953:
    nqp_rxmark rx318_bstack, rxcap320_fail955, rx318_pos, 0
    ge rx318_pos, rx318_eos, rx318_fail947
    substr $S11, rx318_tgt, rx318_pos, 1
    index $I11, ucs4:"fF", $S11
    lt $I11, 0, rx318_fail947
    inc rx318_pos
    nqp_rxpeek $I19, rx318_bstack, rxcap320_fail955
    inc $I19
    set $I11, rx318_bstack[$I19]
    repr_bind_attr_int rx318_cur, rx318_curclass, "$!pos", rx318_pos
    $P11 = rx318_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx318_pos)
    rx318_cstack = rx318_cur."!cursor_capture"($P11, "sym")
    goto rxcap320_done954
  rxcap320_fail955:
    goto rx318_fail947
  rxcap320_done954:
    rx318_cur."!cursor_pass"(rx318_pos, "backslash:sym<f>", 'backtrack'=>1)
    .return (rx318_cur)
  rx318_restart946:
    repr_get_attr_obj rx318_cstack, rx318_cur, rx318_curclass, "$!cstack"
  rx318_fail947:
    unless rx318_bstack, rx318_done945
    pop $I19, rx318_bstack
    if_null rx318_cstack, rx318_cstack_done950
    unless rx318_cstack, rx318_cstack_done950
    dec $I19
    set $P11, rx318_cstack[$I19]
  rx318_cstack_done950:
    pop rx318_rep, rx318_bstack
    pop rx318_pos, rx318_bstack
    pop $I19, rx318_bstack
    lt rx318_pos, -1, rx318_done945
    lt rx318_pos, 0, rx318_fail947
    eq $I19, 0, rx318_fail947
    nqp_islist $I20, rx318_cstack
    unless $I20, rx318_jump948
    elements $I18, rx318_bstack
    le $I18, 0, rx318_cut949
    dec $I18
    set $I18, rx318_bstack[$I18]
  rx318_cut949:
    assign rx318_cstack, $I18
  rx318_jump948:
    jump $I19
  rx318_done945:
    rx318_cur."!cursor_fail"()
    .return (rx318_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<h>" :subid("cuid_70_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 250
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx321_start
    .local string rx321_tgt
    .local int rx321_pos
    .local int rx321_off
    .local int rx321_eos
    .local int rx321_rep
    .local pmc rx321_cur
    .local pmc rx321_curclass
    .local pmc rx321_bstack
    .local pmc rx321_cstack
    rx321_start = self."!cursor_start_all"()
    set rx321_cur, rx321_start[0]
    set rx321_tgt, rx321_start[1]
    set rx321_pos, rx321_start[2]
    set rx321_curclass, rx321_start[3]
    set rx321_bstack, rx321_start[4]
    set $I19, rx321_start[5]
    store_lex unicode:"$\x{a2}", rx321_cur
    length rx321_eos, rx321_tgt
    eq $I19, 1, rx321_restart958
    gt rx321_pos, rx321_eos, rx321_fail959
    repr_get_attr_int $I11, self, rx321_curclass, "$!from"
    ne $I11, -1, rxscan322_done965
    goto rxscan322_scan964
  rxscan322_loop963:
    inc rx321_pos
    gt rx321_pos, rx321_eos, rx321_fail959
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!from", rx321_pos
  rxscan322_scan964:
    nqp_rxmark rx321_bstack, rxscan322_loop963, rx321_pos, 0
  rxscan322_done965:
    nqp_rxmark rx321_bstack, rxcap323_fail967, rx321_pos, 0
    ge rx321_pos, rx321_eos, rx321_fail959
    substr $S11, rx321_tgt, rx321_pos, 1
    index $I11, ucs4:"hH", $S11
    lt $I11, 0, rx321_fail959
    inc rx321_pos
    nqp_rxpeek $I19, rx321_bstack, rxcap323_fail967
    inc $I19
    set $I11, rx321_bstack[$I19]
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!pos", rx321_pos
    $P11 = rx321_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx321_pos)
    rx321_cstack = rx321_cur."!cursor_capture"($P11, "sym")
    goto rxcap323_done966
  rxcap323_fail967:
    goto rx321_fail959
  rxcap323_done966:
    rx321_cur."!cursor_pass"(rx321_pos, "backslash:sym<h>", 'backtrack'=>1)
    .return (rx321_cur)
  rx321_restart958:
    repr_get_attr_obj rx321_cstack, rx321_cur, rx321_curclass, "$!cstack"
  rx321_fail959:
    unless rx321_bstack, rx321_done957
    pop $I19, rx321_bstack
    if_null rx321_cstack, rx321_cstack_done962
    unless rx321_cstack, rx321_cstack_done962
    dec $I19
    set $P11, rx321_cstack[$I19]
  rx321_cstack_done962:
    pop rx321_rep, rx321_bstack
    pop rx321_pos, rx321_bstack
    pop $I19, rx321_bstack
    lt rx321_pos, -1, rx321_done957
    lt rx321_pos, 0, rx321_fail959
    eq $I19, 0, rx321_fail959
    nqp_islist $I20, rx321_cstack
    unless $I20, rx321_jump960
    elements $I18, rx321_bstack
    le $I18, 0, rx321_cut961
    dec $I18
    set $I18, rx321_bstack[$I18]
  rx321_cut961:
    assign rx321_cstack, $I18
  rx321_jump960:
    jump $I19
  rx321_done957:
    rx321_cur."!cursor_fail"()
    .return (rx321_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<r>" :subid("cuid_71_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 251
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx324_start
    .local string rx324_tgt
    .local int rx324_pos
    .local int rx324_off
    .local int rx324_eos
    .local int rx324_rep
    .local pmc rx324_cur
    .local pmc rx324_curclass
    .local pmc rx324_bstack
    .local pmc rx324_cstack
    rx324_start = self."!cursor_start_all"()
    set rx324_cur, rx324_start[0]
    set rx324_tgt, rx324_start[1]
    set rx324_pos, rx324_start[2]
    set rx324_curclass, rx324_start[3]
    set rx324_bstack, rx324_start[4]
    set $I19, rx324_start[5]
    store_lex unicode:"$\x{a2}", rx324_cur
    length rx324_eos, rx324_tgt
    eq $I19, 1, rx324_restart970
    gt rx324_pos, rx324_eos, rx324_fail971
    repr_get_attr_int $I11, self, rx324_curclass, "$!from"
    ne $I11, -1, rxscan325_done977
    goto rxscan325_scan976
  rxscan325_loop975:
    inc rx324_pos
    gt rx324_pos, rx324_eos, rx324_fail971
    repr_bind_attr_int rx324_cur, rx324_curclass, "$!from", rx324_pos
  rxscan325_scan976:
    nqp_rxmark rx324_bstack, rxscan325_loop975, rx324_pos, 0
  rxscan325_done977:
    nqp_rxmark rx324_bstack, rxcap326_fail979, rx324_pos, 0
    ge rx324_pos, rx324_eos, rx324_fail971
    substr $S11, rx324_tgt, rx324_pos, 1
    index $I11, ucs4:"rR", $S11
    lt $I11, 0, rx324_fail971
    inc rx324_pos
    nqp_rxpeek $I19, rx324_bstack, rxcap326_fail979
    inc $I19
    set $I11, rx324_bstack[$I19]
    repr_bind_attr_int rx324_cur, rx324_curclass, "$!pos", rx324_pos
    $P11 = rx324_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx324_pos)
    rx324_cstack = rx324_cur."!cursor_capture"($P11, "sym")
    goto rxcap326_done978
  rxcap326_fail979:
    goto rx324_fail971
  rxcap326_done978:
    rx324_cur."!cursor_pass"(rx324_pos, "backslash:sym<r>", 'backtrack'=>1)
    .return (rx324_cur)
  rx324_restart970:
    repr_get_attr_obj rx324_cstack, rx324_cur, rx324_curclass, "$!cstack"
  rx324_fail971:
    unless rx324_bstack, rx324_done969
    pop $I19, rx324_bstack
    if_null rx324_cstack, rx324_cstack_done974
    unless rx324_cstack, rx324_cstack_done974
    dec $I19
    set $P11, rx324_cstack[$I19]
  rx324_cstack_done974:
    pop rx324_rep, rx324_bstack
    pop rx324_pos, rx324_bstack
    pop $I19, rx324_bstack
    lt rx324_pos, -1, rx324_done969
    lt rx324_pos, 0, rx324_fail971
    eq $I19, 0, rx324_fail971
    nqp_islist $I20, rx324_cstack
    unless $I20, rx324_jump972
    elements $I18, rx324_bstack
    le $I18, 0, rx324_cut973
    dec $I18
    set $I18, rx324_bstack[$I18]
  rx324_cut973:
    assign rx324_cstack, $I18
  rx324_jump972:
    jump $I19
  rx324_done969:
    rx324_cur."!cursor_fail"()
    .return (rx324_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<t>" :subid("cuid_72_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 252
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx327_start
    .local string rx327_tgt
    .local int rx327_pos
    .local int rx327_off
    .local int rx327_eos
    .local int rx327_rep
    .local pmc rx327_cur
    .local pmc rx327_curclass
    .local pmc rx327_bstack
    .local pmc rx327_cstack
    rx327_start = self."!cursor_start_all"()
    set rx327_cur, rx327_start[0]
    set rx327_tgt, rx327_start[1]
    set rx327_pos, rx327_start[2]
    set rx327_curclass, rx327_start[3]
    set rx327_bstack, rx327_start[4]
    set $I19, rx327_start[5]
    store_lex unicode:"$\x{a2}", rx327_cur
    length rx327_eos, rx327_tgt
    eq $I19, 1, rx327_restart982
    gt rx327_pos, rx327_eos, rx327_fail983
    repr_get_attr_int $I11, self, rx327_curclass, "$!from"
    ne $I11, -1, rxscan328_done989
    goto rxscan328_scan988
  rxscan328_loop987:
    inc rx327_pos
    gt rx327_pos, rx327_eos, rx327_fail983
    repr_bind_attr_int rx327_cur, rx327_curclass, "$!from", rx327_pos
  rxscan328_scan988:
    nqp_rxmark rx327_bstack, rxscan328_loop987, rx327_pos, 0
  rxscan328_done989:
    nqp_rxmark rx327_bstack, rxcap329_fail991, rx327_pos, 0
    ge rx327_pos, rx327_eos, rx327_fail983
    substr $S11, rx327_tgt, rx327_pos, 1
    index $I11, ucs4:"tT", $S11
    lt $I11, 0, rx327_fail983
    inc rx327_pos
    nqp_rxpeek $I19, rx327_bstack, rxcap329_fail991
    inc $I19
    set $I11, rx327_bstack[$I19]
    repr_bind_attr_int rx327_cur, rx327_curclass, "$!pos", rx327_pos
    $P11 = rx327_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx327_pos)
    rx327_cstack = rx327_cur."!cursor_capture"($P11, "sym")
    goto rxcap329_done990
  rxcap329_fail991:
    goto rx327_fail983
  rxcap329_done990:
    rx327_cur."!cursor_pass"(rx327_pos, "backslash:sym<t>", 'backtrack'=>1)
    .return (rx327_cur)
  rx327_restart982:
    repr_get_attr_obj rx327_cstack, rx327_cur, rx327_curclass, "$!cstack"
  rx327_fail983:
    unless rx327_bstack, rx327_done981
    pop $I19, rx327_bstack
    if_null rx327_cstack, rx327_cstack_done986
    unless rx327_cstack, rx327_cstack_done986
    dec $I19
    set $P11, rx327_cstack[$I19]
  rx327_cstack_done986:
    pop rx327_rep, rx327_bstack
    pop rx327_pos, rx327_bstack
    pop $I19, rx327_bstack
    lt rx327_pos, -1, rx327_done981
    lt rx327_pos, 0, rx327_fail983
    eq $I19, 0, rx327_fail983
    nqp_islist $I20, rx327_cstack
    unless $I20, rx327_jump984
    elements $I18, rx327_bstack
    le $I18, 0, rx327_cut985
    dec $I18
    set $I18, rx327_bstack[$I18]
  rx327_cut985:
    assign rx327_cstack, $I18
  rx327_jump984:
    jump $I19
  rx327_done981:
    rx327_cur."!cursor_fail"()
    .return (rx327_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<v>" :subid("cuid_73_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 253
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx330_start
    .local string rx330_tgt
    .local int rx330_pos
    .local int rx330_off
    .local int rx330_eos
    .local int rx330_rep
    .local pmc rx330_cur
    .local pmc rx330_curclass
    .local pmc rx330_bstack
    .local pmc rx330_cstack
    rx330_start = self."!cursor_start_all"()
    set rx330_cur, rx330_start[0]
    set rx330_tgt, rx330_start[1]
    set rx330_pos, rx330_start[2]
    set rx330_curclass, rx330_start[3]
    set rx330_bstack, rx330_start[4]
    set $I19, rx330_start[5]
    store_lex unicode:"$\x{a2}", rx330_cur
    length rx330_eos, rx330_tgt
    eq $I19, 1, rx330_restart994
    gt rx330_pos, rx330_eos, rx330_fail995
    repr_get_attr_int $I11, self, rx330_curclass, "$!from"
    ne $I11, -1, rxscan331_done1001
    goto rxscan331_scan1000
  rxscan331_loop999:
    inc rx330_pos
    gt rx330_pos, rx330_eos, rx330_fail995
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!from", rx330_pos
  rxscan331_scan1000:
    nqp_rxmark rx330_bstack, rxscan331_loop999, rx330_pos, 0
  rxscan331_done1001:
    nqp_rxmark rx330_bstack, rxcap332_fail1003, rx330_pos, 0
    ge rx330_pos, rx330_eos, rx330_fail995
    substr $S11, rx330_tgt, rx330_pos, 1
    index $I11, ucs4:"vV", $S11
    lt $I11, 0, rx330_fail995
    inc rx330_pos
    nqp_rxpeek $I19, rx330_bstack, rxcap332_fail1003
    inc $I19
    set $I11, rx330_bstack[$I19]
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx330_pos)
    rx330_cstack = rx330_cur."!cursor_capture"($P11, "sym")
    goto rxcap332_done1002
  rxcap332_fail1003:
    goto rx330_fail995
  rxcap332_done1002:
    rx330_cur."!cursor_pass"(rx330_pos, "backslash:sym<v>", 'backtrack'=>1)
    .return (rx330_cur)
  rx330_restart994:
    repr_get_attr_obj rx330_cstack, rx330_cur, rx330_curclass, "$!cstack"
  rx330_fail995:
    unless rx330_bstack, rx330_done993
    pop $I19, rx330_bstack
    if_null rx330_cstack, rx330_cstack_done998
    unless rx330_cstack, rx330_cstack_done998
    dec $I19
    set $P11, rx330_cstack[$I19]
  rx330_cstack_done998:
    pop rx330_rep, rx330_bstack
    pop rx330_pos, rx330_bstack
    pop $I19, rx330_bstack
    lt rx330_pos, -1, rx330_done993
    lt rx330_pos, 0, rx330_fail995
    eq $I19, 0, rx330_fail995
    nqp_islist $I20, rx330_cstack
    unless $I20, rx330_jump996
    elements $I18, rx330_bstack
    le $I18, 0, rx330_cut997
    dec $I18
    set $I18, rx330_bstack[$I18]
  rx330_cut997:
    assign rx330_cstack, $I18
  rx330_jump996:
    jump $I19
  rx330_done993:
    rx330_cur."!cursor_fail"()
    .return (rx330_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<o>" :subid("cuid_74_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 254
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx333_start
    .local string rx333_tgt
    .local int rx333_pos
    .local int rx333_off
    .local int rx333_eos
    .local int rx333_rep
    .local pmc rx333_cur
    .local pmc rx333_curclass
    .local pmc rx333_bstack
    .local pmc rx333_cstack
    rx333_start = self."!cursor_start_all"()
    set rx333_cur, rx333_start[0]
    set rx333_tgt, rx333_start[1]
    set rx333_pos, rx333_start[2]
    set rx333_curclass, rx333_start[3]
    set rx333_bstack, rx333_start[4]
    set $I19, rx333_start[5]
    store_lex unicode:"$\x{a2}", rx333_cur
    length rx333_eos, rx333_tgt
    eq $I19, 1, rx333_restart1006
    gt rx333_pos, rx333_eos, rx333_fail1007
    repr_get_attr_int $I11, self, rx333_curclass, "$!from"
    ne $I11, -1, rxscan334_done1013
    goto rxscan334_scan1012
  rxscan334_loop1011:
    inc rx333_pos
    gt rx333_pos, rx333_eos, rx333_fail1007
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!from", rx333_pos
  rxscan334_scan1012:
    nqp_rxmark rx333_bstack, rxscan334_loop1011, rx333_pos, 0
  rxscan334_done1013:
    nqp_rxmark rx333_bstack, rxcap335_fail1015, rx333_pos, 0
    ge rx333_pos, rx333_eos, rx333_fail1007
    substr $S11, rx333_tgt, rx333_pos, 1
    index $I11, ucs4:"oO", $S11
    lt $I11, 0, rx333_fail1007
    inc rx333_pos
    nqp_rxpeek $I19, rx333_bstack, rxcap335_fail1015
    inc $I19
    set $I11, rx333_bstack[$I19]
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!pos", rx333_pos
    $P11 = rx333_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx333_pos)
    rx333_cstack = rx333_cur."!cursor_capture"($P11, "sym")
    goto rxcap335_done1014
  rxcap335_fail1015:
    goto rx333_fail1007
  rxcap335_done1014:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt336_01017
    nqp_push_label $P11, alt336_11019
    nqp_rxmark rx333_bstack, alt336_end1016, -1, 0
    rx333_cur."!alt"(rx333_pos, "alt_nfa__14_1381281823.08074", $P11)
    goto rx333_fail1007
  alt336_01017:
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!pos", rx333_pos
    $P11 = rx333_cur."octint"()
    repr_get_attr_int $I11, $P11, rx333_curclass, "$!pos"
    lt $I11, 0, rx333_fail1007
    nqp_rxmark rx333_bstack, rxsubrule337_pass1018, -1, 0
  rxsubrule337_pass1018:
    rx333_cstack = rx333_cur."!cursor_capture"($P11, "octint")
    repr_get_attr_int rx333_pos, $P11, rx333_curclass, "$!pos"
    goto alt336_end1016
  alt336_11019:
    add $I11, rx333_pos, 1
    gt $I11, rx333_eos, rx333_fail1007
    substr $S10, rx333_tgt, rx333_pos, 1
    ne $S10, ucs4:"[", rx333_fail1007
    add rx333_pos, 1
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!pos", rx333_pos
    $P11 = rx333_cur."octints"()
    repr_get_attr_int $I11, $P11, rx333_curclass, "$!pos"
    lt $I11, 0, rx333_fail1007
    nqp_rxmark rx333_bstack, rxsubrule338_pass1020, -1, 0
  rxsubrule338_pass1020:
    rx333_cstack = rx333_cur."!cursor_capture"($P11, "octints")
    repr_get_attr_int rx333_pos, $P11, rx333_curclass, "$!pos"
    add $I11, rx333_pos, 1
    gt $I11, rx333_eos, rx333_fail1007
    substr $S10, rx333_tgt, rx333_pos, 1
    ne $S10, ucs4:"]", rx333_fail1007
    add rx333_pos, 1
    goto alt336_end1016
  alt336_end1016:
    nqp_rxcommit rx333_bstack, alt336_end1016
    rx333_cur."!cursor_pass"(rx333_pos, "backslash:sym<o>", 'backtrack'=>1)
    .return (rx333_cur)
  rx333_restart1006:
    repr_get_attr_obj rx333_cstack, rx333_cur, rx333_curclass, "$!cstack"
  rx333_fail1007:
    unless rx333_bstack, rx333_done1005
    pop $I19, rx333_bstack
    if_null rx333_cstack, rx333_cstack_done1010
    unless rx333_cstack, rx333_cstack_done1010
    dec $I19
    set $P11, rx333_cstack[$I19]
  rx333_cstack_done1010:
    pop rx333_rep, rx333_bstack
    pop rx333_pos, rx333_bstack
    pop $I19, rx333_bstack
    lt rx333_pos, -1, rx333_done1005
    lt rx333_pos, 0, rx333_fail1007
    eq $I19, 0, rx333_fail1007
    nqp_islist $I20, rx333_cstack
    unless $I20, rx333_jump1008
    elements $I18, rx333_bstack
    le $I18, 0, rx333_cut1009
    dec $I18
    set $I18, rx333_bstack[$I18]
  rx333_cut1009:
    assign rx333_cstack, $I18
  rx333_jump1008:
    jump $I19
  rx333_done1005:
    rx333_cur."!cursor_fail"()
    .return (rx333_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<x>" :subid("cuid_75_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 255
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx339_start
    .local string rx339_tgt
    .local int rx339_pos
    .local int rx339_off
    .local int rx339_eos
    .local int rx339_rep
    .local pmc rx339_cur
    .local pmc rx339_curclass
    .local pmc rx339_bstack
    .local pmc rx339_cstack
    rx339_start = self."!cursor_start_all"()
    set rx339_cur, rx339_start[0]
    set rx339_tgt, rx339_start[1]
    set rx339_pos, rx339_start[2]
    set rx339_curclass, rx339_start[3]
    set rx339_bstack, rx339_start[4]
    set $I19, rx339_start[5]
    store_lex unicode:"$\x{a2}", rx339_cur
    length rx339_eos, rx339_tgt
    eq $I19, 1, rx339_restart1023
    gt rx339_pos, rx339_eos, rx339_fail1024
    repr_get_attr_int $I11, self, rx339_curclass, "$!from"
    ne $I11, -1, rxscan340_done1030
    goto rxscan340_scan1029
  rxscan340_loop1028:
    inc rx339_pos
    gt rx339_pos, rx339_eos, rx339_fail1024
    repr_bind_attr_int rx339_cur, rx339_curclass, "$!from", rx339_pos
  rxscan340_scan1029:
    nqp_rxmark rx339_bstack, rxscan340_loop1028, rx339_pos, 0
  rxscan340_done1030:
    nqp_rxmark rx339_bstack, rxcap341_fail1032, rx339_pos, 0
    ge rx339_pos, rx339_eos, rx339_fail1024
    substr $S11, rx339_tgt, rx339_pos, 1
    index $I11, ucs4:"xX", $S11
    lt $I11, 0, rx339_fail1024
    inc rx339_pos
    nqp_rxpeek $I19, rx339_bstack, rxcap341_fail1032
    inc $I19
    set $I11, rx339_bstack[$I19]
    repr_bind_attr_int rx339_cur, rx339_curclass, "$!pos", rx339_pos
    $P11 = rx339_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx339_pos)
    rx339_cstack = rx339_cur."!cursor_capture"($P11, "sym")
    goto rxcap341_done1031
  rxcap341_fail1032:
    goto rx339_fail1024
  rxcap341_done1031:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt342_01034
    nqp_push_label $P11, alt342_11036
    nqp_rxmark rx339_bstack, alt342_end1033, -1, 0
    rx339_cur."!alt"(rx339_pos, "alt_nfa__15_1381281823.09518", $P11)
    goto rx339_fail1024
  alt342_01034:
    repr_bind_attr_int rx339_cur, rx339_curclass, "$!pos", rx339_pos
    $P11 = rx339_cur."hexint"()
    repr_get_attr_int $I11, $P11, rx339_curclass, "$!pos"
    lt $I11, 0, rx339_fail1024
    nqp_rxmark rx339_bstack, rxsubrule343_pass1035, -1, 0
  rxsubrule343_pass1035:
    rx339_cstack = rx339_cur."!cursor_capture"($P11, "hexint")
    repr_get_attr_int rx339_pos, $P11, rx339_curclass, "$!pos"
    goto alt342_end1033
  alt342_11036:
    add $I11, rx339_pos, 1
    gt $I11, rx339_eos, rx339_fail1024
    substr $S10, rx339_tgt, rx339_pos, 1
    ne $S10, ucs4:"[", rx339_fail1024
    add rx339_pos, 1
    repr_bind_attr_int rx339_cur, rx339_curclass, "$!pos", rx339_pos
    $P11 = rx339_cur."hexints"()
    repr_get_attr_int $I11, $P11, rx339_curclass, "$!pos"
    lt $I11, 0, rx339_fail1024
    nqp_rxmark rx339_bstack, rxsubrule344_pass1037, -1, 0
  rxsubrule344_pass1037:
    rx339_cstack = rx339_cur."!cursor_capture"($P11, "hexints")
    repr_get_attr_int rx339_pos, $P11, rx339_curclass, "$!pos"
    add $I11, rx339_pos, 1
    gt $I11, rx339_eos, rx339_fail1024
    substr $S10, rx339_tgt, rx339_pos, 1
    ne $S10, ucs4:"]", rx339_fail1024
    add rx339_pos, 1
    goto alt342_end1033
  alt342_end1033:
    nqp_rxcommit rx339_bstack, alt342_end1033
    rx339_cur."!cursor_pass"(rx339_pos, "backslash:sym<x>", 'backtrack'=>1)
    .return (rx339_cur)
  rx339_restart1023:
    repr_get_attr_obj rx339_cstack, rx339_cur, rx339_curclass, "$!cstack"
  rx339_fail1024:
    unless rx339_bstack, rx339_done1022
    pop $I19, rx339_bstack
    if_null rx339_cstack, rx339_cstack_done1027
    unless rx339_cstack, rx339_cstack_done1027
    dec $I19
    set $P11, rx339_cstack[$I19]
  rx339_cstack_done1027:
    pop rx339_rep, rx339_bstack
    pop rx339_pos, rx339_bstack
    pop $I19, rx339_bstack
    lt rx339_pos, -1, rx339_done1022
    lt rx339_pos, 0, rx339_fail1024
    eq $I19, 0, rx339_fail1024
    nqp_islist $I20, rx339_cstack
    unless $I20, rx339_jump1025
    elements $I18, rx339_bstack
    le $I18, 0, rx339_cut1026
    dec $I18
    set $I18, rx339_bstack[$I18]
  rx339_cut1026:
    assign rx339_cstack, $I18
  rx339_jump1025:
    jump $I19
  rx339_done1022:
    rx339_cur."!cursor_fail"()
    .return (rx339_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<c>" :subid("cuid_76_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 256
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx345_start
    .local string rx345_tgt
    .local int rx345_pos
    .local int rx345_off
    .local int rx345_eos
    .local int rx345_rep
    .local pmc rx345_cur
    .local pmc rx345_curclass
    .local pmc rx345_bstack
    .local pmc rx345_cstack
    rx345_start = self."!cursor_start_all"()
    set rx345_cur, rx345_start[0]
    set rx345_tgt, rx345_start[1]
    set rx345_pos, rx345_start[2]
    set rx345_curclass, rx345_start[3]
    set rx345_bstack, rx345_start[4]
    set $I19, rx345_start[5]
    store_lex unicode:"$\x{a2}", rx345_cur
    length rx345_eos, rx345_tgt
    eq $I19, 1, rx345_restart1040
    gt rx345_pos, rx345_eos, rx345_fail1041
    repr_get_attr_int $I11, self, rx345_curclass, "$!from"
    ne $I11, -1, rxscan346_done1047
    goto rxscan346_scan1046
  rxscan346_loop1045:
    inc rx345_pos
    gt rx345_pos, rx345_eos, rx345_fail1041
    repr_bind_attr_int rx345_cur, rx345_curclass, "$!from", rx345_pos
  rxscan346_scan1046:
    nqp_rxmark rx345_bstack, rxscan346_loop1045, rx345_pos, 0
  rxscan346_done1047:
    nqp_rxmark rx345_bstack, rxcap347_fail1049, rx345_pos, 0
    ge rx345_pos, rx345_eos, rx345_fail1041
    substr $S11, rx345_tgt, rx345_pos, 1
    index $I11, ucs4:"cC", $S11
    lt $I11, 0, rx345_fail1041
    inc rx345_pos
    nqp_rxpeek $I19, rx345_bstack, rxcap347_fail1049
    inc $I19
    set $I11, rx345_bstack[$I19]
    repr_bind_attr_int rx345_cur, rx345_curclass, "$!pos", rx345_pos
    $P11 = rx345_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx345_pos)
    rx345_cstack = rx345_cur."!cursor_capture"($P11, "sym")
    goto rxcap347_done1048
  rxcap347_fail1049:
    goto rx345_fail1041
  rxcap347_done1048:
    repr_bind_attr_int rx345_cur, rx345_curclass, "$!pos", rx345_pos
    $P11 = rx345_cur."charspec"()
    repr_get_attr_int $I11, $P11, rx345_curclass, "$!pos"
    lt $I11, 0, rx345_fail1041
    nqp_rxmark rx345_bstack, rxsubrule348_pass1050, -1, 0
  rxsubrule348_pass1050:
    rx345_cstack = rx345_cur."!cursor_capture"($P11, "charspec")
    repr_get_attr_int rx345_pos, $P11, rx345_curclass, "$!pos"
    rx345_cur."!cursor_pass"(rx345_pos, "backslash:sym<c>", 'backtrack'=>1)
    .return (rx345_cur)
  rx345_restart1040:
    repr_get_attr_obj rx345_cstack, rx345_cur, rx345_curclass, "$!cstack"
  rx345_fail1041:
    unless rx345_bstack, rx345_done1039
    pop $I19, rx345_bstack
    if_null rx345_cstack, rx345_cstack_done1044
    unless rx345_cstack, rx345_cstack_done1044
    dec $I19
    set $P11, rx345_cstack[$I19]
  rx345_cstack_done1044:
    pop rx345_rep, rx345_bstack
    pop rx345_pos, rx345_bstack
    pop $I19, rx345_bstack
    lt rx345_pos, -1, rx345_done1039
    lt rx345_pos, 0, rx345_fail1041
    eq $I19, 0, rx345_fail1041
    nqp_islist $I20, rx345_cstack
    unless $I20, rx345_jump1042
    elements $I18, rx345_bstack
    le $I18, 0, rx345_cut1043
    dec $I18
    set $I18, rx345_bstack[$I18]
  rx345_cut1043:
    assign rx345_cstack, $I18
  rx345_jump1042:
    jump $I19
  rx345_done1039:
    rx345_cur."!cursor_fail"()
    .return (rx345_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<A>" :subid("cuid_77_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 257
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx349_start
    .local string rx349_tgt
    .local int rx349_pos
    .local int rx349_off
    .local int rx349_eos
    .local int rx349_rep
    .local pmc rx349_cur
    .local pmc rx349_curclass
    .local pmc rx349_bstack
    .local pmc rx349_cstack
    rx349_start = self."!cursor_start_all"()
    set rx349_cur, rx349_start[0]
    set rx349_tgt, rx349_start[1]
    set rx349_pos, rx349_start[2]
    set rx349_curclass, rx349_start[3]
    set rx349_bstack, rx349_start[4]
    set $I19, rx349_start[5]
    store_lex unicode:"$\x{a2}", rx349_cur
    length rx349_eos, rx349_tgt
    eq $I19, 1, rx349_restart1053
    gt rx349_pos, rx349_eos, rx349_fail1054
    repr_get_attr_int $I11, self, rx349_curclass, "$!from"
    ne $I11, -1, rxscan350_done1060
    goto rxscan350_scan1059
  rxscan350_loop1058:
    inc rx349_pos
    gt rx349_pos, rx349_eos, rx349_fail1054
    repr_bind_attr_int rx349_cur, rx349_curclass, "$!from", rx349_pos
  rxscan350_scan1059:
    nqp_rxmark rx349_bstack, rxscan350_loop1058, rx349_pos, 0
  rxscan350_done1060:
    add $I11, rx349_pos, 1
    gt $I11, rx349_eos, rx349_fail1054
    substr $S10, rx349_tgt, rx349_pos, 1
    ne $S10, ucs4:"A", rx349_fail1054
    add rx349_pos, 1
    repr_bind_attr_int rx349_cur, rx349_curclass, "$!pos", rx349_pos
    $P11 = rx349_cur."obs"("\\\\A as beginning-of-string matcher", "^")
    repr_get_attr_int $I11, $P11, rx349_curclass, "$!pos"
    lt $I11, 0, rx349_fail1054
    repr_get_attr_int rx349_pos, $P11, rx349_curclass, "$!pos"
    rx349_cur."!cursor_pass"(rx349_pos, "backslash:sym<A>", 'backtrack'=>1)
    .return (rx349_cur)
  rx349_restart1053:
    repr_get_attr_obj rx349_cstack, rx349_cur, rx349_curclass, "$!cstack"
  rx349_fail1054:
    unless rx349_bstack, rx349_done1052
    pop $I19, rx349_bstack
    if_null rx349_cstack, rx349_cstack_done1057
    unless rx349_cstack, rx349_cstack_done1057
    dec $I19
    set $P11, rx349_cstack[$I19]
  rx349_cstack_done1057:
    pop rx349_rep, rx349_bstack
    pop rx349_pos, rx349_bstack
    pop $I19, rx349_bstack
    lt rx349_pos, -1, rx349_done1052
    lt rx349_pos, 0, rx349_fail1054
    eq $I19, 0, rx349_fail1054
    nqp_islist $I20, rx349_cstack
    unless $I20, rx349_jump1055
    elements $I18, rx349_bstack
    le $I18, 0, rx349_cut1056
    dec $I18
    set $I18, rx349_bstack[$I18]
  rx349_cut1056:
    assign rx349_cstack, $I18
  rx349_jump1055:
    jump $I19
  rx349_done1052:
    rx349_cur."!cursor_fail"()
    .return (rx349_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<z>" :subid("cuid_78_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 258
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx352_start
    .local string rx352_tgt
    .local int rx352_pos
    .local int rx352_off
    .local int rx352_eos
    .local int rx352_rep
    .local pmc rx352_cur
    .local pmc rx352_curclass
    .local pmc rx352_bstack
    .local pmc rx352_cstack
    rx352_start = self."!cursor_start_all"()
    set rx352_cur, rx352_start[0]
    set rx352_tgt, rx352_start[1]
    set rx352_pos, rx352_start[2]
    set rx352_curclass, rx352_start[3]
    set rx352_bstack, rx352_start[4]
    set $I19, rx352_start[5]
    store_lex unicode:"$\x{a2}", rx352_cur
    length rx352_eos, rx352_tgt
    eq $I19, 1, rx352_restart1064
    gt rx352_pos, rx352_eos, rx352_fail1065
    repr_get_attr_int $I11, self, rx352_curclass, "$!from"
    ne $I11, -1, rxscan353_done1071
    goto rxscan353_scan1070
  rxscan353_loop1069:
    inc rx352_pos
    gt rx352_pos, rx352_eos, rx352_fail1065
    repr_bind_attr_int rx352_cur, rx352_curclass, "$!from", rx352_pos
  rxscan353_scan1070:
    nqp_rxmark rx352_bstack, rxscan353_loop1069, rx352_pos, 0
  rxscan353_done1071:
    add $I11, rx352_pos, 1
    gt $I11, rx352_eos, rx352_fail1065
    substr $S10, rx352_tgt, rx352_pos, 1
    ne $S10, ucs4:"z", rx352_fail1065
    add rx352_pos, 1
    repr_bind_attr_int rx352_cur, rx352_curclass, "$!pos", rx352_pos
    $P11 = rx352_cur."obs"("\\\\z as end-of-string matcher", "$")
    repr_get_attr_int $I11, $P11, rx352_curclass, "$!pos"
    lt $I11, 0, rx352_fail1065
    repr_get_attr_int rx352_pos, $P11, rx352_curclass, "$!pos"
    rx352_cur."!cursor_pass"(rx352_pos, "backslash:sym<z>", 'backtrack'=>1)
    .return (rx352_cur)
  rx352_restart1064:
    repr_get_attr_obj rx352_cstack, rx352_cur, rx352_curclass, "$!cstack"
  rx352_fail1065:
    unless rx352_bstack, rx352_done1063
    pop $I19, rx352_bstack
    if_null rx352_cstack, rx352_cstack_done1068
    unless rx352_cstack, rx352_cstack_done1068
    dec $I19
    set $P11, rx352_cstack[$I19]
  rx352_cstack_done1068:
    pop rx352_rep, rx352_bstack
    pop rx352_pos, rx352_bstack
    pop $I19, rx352_bstack
    lt rx352_pos, -1, rx352_done1063
    lt rx352_pos, 0, rx352_fail1065
    eq $I19, 0, rx352_fail1065
    nqp_islist $I20, rx352_cstack
    unless $I20, rx352_jump1066
    elements $I18, rx352_bstack
    le $I18, 0, rx352_cut1067
    dec $I18
    set $I18, rx352_bstack[$I18]
  rx352_cut1067:
    assign rx352_cstack, $I18
  rx352_jump1066:
    jump $I19
  rx352_done1063:
    rx352_cur."!cursor_fail"()
    .return (rx352_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<Z>" :subid("cuid_79_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 259
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx355_start
    .local string rx355_tgt
    .local int rx355_pos
    .local int rx355_off
    .local int rx355_eos
    .local int rx355_rep
    .local pmc rx355_cur
    .local pmc rx355_curclass
    .local pmc rx355_bstack
    .local pmc rx355_cstack
    rx355_start = self."!cursor_start_all"()
    set rx355_cur, rx355_start[0]
    set rx355_tgt, rx355_start[1]
    set rx355_pos, rx355_start[2]
    set rx355_curclass, rx355_start[3]
    set rx355_bstack, rx355_start[4]
    set $I19, rx355_start[5]
    store_lex unicode:"$\x{a2}", rx355_cur
    length rx355_eos, rx355_tgt
    eq $I19, 1, rx355_restart1075
    gt rx355_pos, rx355_eos, rx355_fail1076
    repr_get_attr_int $I11, self, rx355_curclass, "$!from"
    ne $I11, -1, rxscan356_done1082
    goto rxscan356_scan1081
  rxscan356_loop1080:
    inc rx355_pos
    gt rx355_pos, rx355_eos, rx355_fail1076
    repr_bind_attr_int rx355_cur, rx355_curclass, "$!from", rx355_pos
  rxscan356_scan1081:
    nqp_rxmark rx355_bstack, rxscan356_loop1080, rx355_pos, 0
  rxscan356_done1082:
    add $I11, rx355_pos, 1
    gt $I11, rx355_eos, rx355_fail1076
    substr $S10, rx355_tgt, rx355_pos, 1
    ne $S10, ucs4:"Z", rx355_fail1076
    add rx355_pos, 1
    repr_bind_attr_int rx355_cur, rx355_curclass, "$!pos", rx355_pos
    $P11 = rx355_cur."obs"("\\\\Z as end-of-string matcher", "\\\\n?$")
    repr_get_attr_int $I11, $P11, rx355_curclass, "$!pos"
    lt $I11, 0, rx355_fail1076
    repr_get_attr_int rx355_pos, $P11, rx355_curclass, "$!pos"
    rx355_cur."!cursor_pass"(rx355_pos, "backslash:sym<Z>", 'backtrack'=>1)
    .return (rx355_cur)
  rx355_restart1075:
    repr_get_attr_obj rx355_cstack, rx355_cur, rx355_curclass, "$!cstack"
  rx355_fail1076:
    unless rx355_bstack, rx355_done1074
    pop $I19, rx355_bstack
    if_null rx355_cstack, rx355_cstack_done1079
    unless rx355_cstack, rx355_cstack_done1079
    dec $I19
    set $P11, rx355_cstack[$I19]
  rx355_cstack_done1079:
    pop rx355_rep, rx355_bstack
    pop rx355_pos, rx355_bstack
    pop $I19, rx355_bstack
    lt rx355_pos, -1, rx355_done1074
    lt rx355_pos, 0, rx355_fail1076
    eq $I19, 0, rx355_fail1076
    nqp_islist $I20, rx355_cstack
    unless $I20, rx355_jump1077
    elements $I18, rx355_bstack
    le $I18, 0, rx355_cut1078
    dec $I18
    set $I18, rx355_bstack[$I18]
  rx355_cut1078:
    assign rx355_cstack, $I18
  rx355_jump1077:
    jump $I19
  rx355_done1074:
    rx355_cur."!cursor_fail"()
    .return (rx355_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<Q>" :subid("cuid_80_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 260
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx358_start
    .local string rx358_tgt
    .local int rx358_pos
    .local int rx358_off
    .local int rx358_eos
    .local int rx358_rep
    .local pmc rx358_cur
    .local pmc rx358_curclass
    .local pmc rx358_bstack
    .local pmc rx358_cstack
    rx358_start = self."!cursor_start_all"()
    set rx358_cur, rx358_start[0]
    set rx358_tgt, rx358_start[1]
    set rx358_pos, rx358_start[2]
    set rx358_curclass, rx358_start[3]
    set rx358_bstack, rx358_start[4]
    set $I19, rx358_start[5]
    store_lex unicode:"$\x{a2}", rx358_cur
    length rx358_eos, rx358_tgt
    eq $I19, 1, rx358_restart1086
    gt rx358_pos, rx358_eos, rx358_fail1087
    repr_get_attr_int $I11, self, rx358_curclass, "$!from"
    ne $I11, -1, rxscan359_done1093
    goto rxscan359_scan1092
  rxscan359_loop1091:
    inc rx358_pos
    gt rx358_pos, rx358_eos, rx358_fail1087
    repr_bind_attr_int rx358_cur, rx358_curclass, "$!from", rx358_pos
  rxscan359_scan1092:
    nqp_rxmark rx358_bstack, rxscan359_loop1091, rx358_pos, 0
  rxscan359_done1093:
    add $I11, rx358_pos, 1
    gt $I11, rx358_eos, rx358_fail1087
    substr $S10, rx358_tgt, rx358_pos, 1
    ne $S10, ucs4:"Q", rx358_fail1087
    add rx358_pos, 1
    repr_bind_attr_int rx358_cur, rx358_curclass, "$!pos", rx358_pos
    $P11 = rx358_cur."obs"("\\\\Q as quotemeta", "quotes or literal variable match")
    repr_get_attr_int $I11, $P11, rx358_curclass, "$!pos"
    lt $I11, 0, rx358_fail1087
    repr_get_attr_int rx358_pos, $P11, rx358_curclass, "$!pos"
    rx358_cur."!cursor_pass"(rx358_pos, "backslash:sym<Q>", 'backtrack'=>1)
    .return (rx358_cur)
  rx358_restart1086:
    repr_get_attr_obj rx358_cstack, rx358_cur, rx358_curclass, "$!cstack"
  rx358_fail1087:
    unless rx358_bstack, rx358_done1085
    pop $I19, rx358_bstack
    if_null rx358_cstack, rx358_cstack_done1090
    unless rx358_cstack, rx358_cstack_done1090
    dec $I19
    set $P11, rx358_cstack[$I19]
  rx358_cstack_done1090:
    pop rx358_rep, rx358_bstack
    pop rx358_pos, rx358_bstack
    pop $I19, rx358_bstack
    lt rx358_pos, -1, rx358_done1085
    lt rx358_pos, 0, rx358_fail1087
    eq $I19, 0, rx358_fail1087
    nqp_islist $I20, rx358_cstack
    unless $I20, rx358_jump1088
    elements $I18, rx358_bstack
    le $I18, 0, rx358_cut1089
    dec $I18
    set $I18, rx358_bstack[$I18]
  rx358_cut1089:
    assign rx358_cstack, $I18
  rx358_jump1088:
    jump $I19
  rx358_done1085:
    rx358_cur."!cursor_fail"()
    .return (rx358_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<unrec>" :subid("cuid_81_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 261
    .param pmc _lex_param_0 
    .const 'Sub' $P5008 = 'cuid_218_1381281822.05887' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_82_1381281822.05887' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_219_1381281822.05887' 
    capture_lex $P5008 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx361_start
    .local string rx361_tgt
    .local int rx361_pos
    .local int rx361_off
    .local int rx361_eos
    .local int rx361_rep
    .local pmc rx361_cur
    .local pmc rx361_curclass
    .local pmc rx361_bstack
    .local pmc rx361_cstack
    rx361_start = self."!cursor_start_all"()
    set rx361_cur, rx361_start[0]
    set rx361_tgt, rx361_start[1]
    set rx361_pos, rx361_start[2]
    set rx361_curclass, rx361_start[3]
    set rx361_bstack, rx361_start[4]
    set $I19, rx361_start[5]
    store_lex unicode:"$\x{a2}", rx361_cur
    length rx361_eos, rx361_tgt
    eq $I19, 1, rx361_restart1097
    gt rx361_pos, rx361_eos, rx361_fail1098
    repr_get_attr_int $I11, self, rx361_curclass, "$!from"
    ne $I11, -1, rxscan362_done1104
    goto rxscan362_scan1103
  rxscan362_loop1102:
    inc rx361_pos
    gt rx361_pos, rx361_eos, rx361_fail1098
    repr_bind_attr_int rx361_cur, rx361_curclass, "$!from", rx361_pos
  rxscan362_scan1103:
    nqp_rxmark rx361_bstack, rxscan362_loop1102, rx361_pos, 0
  rxscan362_done1104:
    repr_bind_attr_int rx361_cur, rx361_curclass, "$!pos", rx361_pos
    store_lex unicode:"$\x{a2}", rx361_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_218_1381281822.05887' 
    capture_lex $P5002
    $P5003 = $P5002()
    .const 'Sub' $P5004 = 'cuid_82_1381281822.05887' 
    capture_lex $P5004
    repr_bind_attr_int rx361_cur, rx361_curclass, "$!pos", rx361_pos
    $P11 = rx361_cur.$P5004()
    repr_get_attr_int $I11, $P11, rx361_curclass, "$!pos"
    lt $I11, 0, rx361_fail1098
    nqp_rxmark rx361_bstack, rxsubrule365_pass1115, -1, 0
  rxsubrule365_pass1115:
    rx361_cstack = rx361_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx361_pos, $P11, rx361_curclass, "$!pos"
    repr_bind_attr_int rx361_cur, rx361_curclass, "$!pos", rx361_pos
    store_lex unicode:"$\x{a2}", rx361_cur
    $P5005 = $P101."MATCH"()
    set $P102, $P5005
    .const 'Sub' $P5006 = 'cuid_219_1381281822.05887' 
    capture_lex $P5006
    $P5007 = $P5006()
    rx361_cur."!cursor_pass"(rx361_pos, "backslash:sym<unrec>", 'backtrack'=>1)
    .return (rx361_cur)
  rx361_restart1097:
    repr_get_attr_obj rx361_cstack, rx361_cur, rx361_curclass, "$!cstack"
  rx361_fail1098:
    unless rx361_bstack, rx361_done1096
    pop $I19, rx361_bstack
    if_null rx361_cstack, rx361_cstack_done1101
    unless rx361_cstack, rx361_cstack_done1101
    dec $I19
    set $P11, rx361_cstack[$I19]
  rx361_cstack_done1101:
    pop rx361_rep, rx361_bstack
    pop rx361_pos, rx361_bstack
    pop $I19, rx361_bstack
    lt rx361_pos, -1, rx361_done1096
    lt rx361_pos, 0, rx361_fail1098
    eq $I19, 0, rx361_fail1098
    nqp_islist $I20, rx361_cstack
    unless $I20, rx361_jump1099
    elements $I18, rx361_bstack
    le $I18, 0, rx361_cut1100
    dec $I18
    set $I18, rx361_bstack[$I18]
  rx361_cut1100:
    assign rx361_cstack, $I18
  rx361_jump1099:
    jump $I19
  rx361_done1096:
    rx361_cur."!cursor_fail"()
    .return (rx361_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_218_1381281822.05887") :anon :lex :outer("cuid_81_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 261

    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_82_1381281822.05887") :anon :lex :outer("cuid_81_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx363_start
    .local string rx363_tgt
    .local int rx363_pos
    .local int rx363_off
    .local int rx363_eos
    .local int rx363_rep
    .local pmc rx363_cur
    .local pmc rx363_curclass
    .local pmc rx363_bstack
    .local pmc rx363_cstack
    rx363_start = self."!cursor_start_all"()
    set rx363_cur, rx363_start[0]
    set rx363_tgt, rx363_start[1]
    set rx363_pos, rx363_start[2]
    set rx363_curclass, rx363_start[3]
    set rx363_bstack, rx363_start[4]
    set $I19, rx363_start[5]
    store_lex unicode:"$\x{a2}", rx363_cur
    length rx363_eos, rx363_tgt
    eq $I19, 1, rx363_restart1107
    gt rx363_pos, rx363_eos, rx363_fail1108
    repr_get_attr_int $I11, self, rx363_curclass, "$!from"
    ne $I11, -1, rxscan364_done1114
    goto rxscan364_scan1113
  rxscan364_loop1112:
    inc rx363_pos
    gt rx363_pos, rx363_eos, rx363_fail1108
    repr_bind_attr_int rx363_cur, rx363_curclass, "$!from", rx363_pos
  rxscan364_scan1113:
    nqp_rxmark rx363_bstack, rxscan364_loop1112, rx363_pos, 0
  rxscan364_done1114:
    ge rx363_pos, rx363_eos, rx363_fail1108
    is_cclass $I11, .CCLASS_WORD, rx363_tgt, rx363_pos
    unless $I11, rx363_fail1108
    add rx363_pos, 1
    rx363_cur."!cursor_pass"(rx363_pos, 'backtrack'=>1)
    .return (rx363_cur)
  rx363_restart1107:
    repr_get_attr_obj rx363_cstack, rx363_cur, rx363_curclass, "$!cstack"
  rx363_fail1108:
    unless rx363_bstack, rx363_done1106
    pop $I19, rx363_bstack
    if_null rx363_cstack, rx363_cstack_done1111
    unless rx363_cstack, rx363_cstack_done1111
    dec $I19
    set $P11, rx363_cstack[$I19]
  rx363_cstack_done1111:
    pop rx363_rep, rx363_bstack
    pop rx363_pos, rx363_bstack
    pop $I19, rx363_bstack
    lt rx363_pos, -1, rx363_done1106
    lt rx363_pos, 0, rx363_fail1108
    eq $I19, 0, rx363_fail1108
    nqp_islist $I20, rx363_cstack
    unless $I20, rx363_jump1109
    elements $I18, rx363_bstack
    le $I18, 0, rx363_cut1110
    dec $I18
    set $I18, rx363_bstack[$I18]
  rx363_cut1110:
    assign rx363_cstack, $I18
  rx363_jump1109:
    jump $I19
  rx363_done1106:
    rx363_cur."!cursor_fail"()
    .return (rx363_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_219_1381281822.05887") :anon :lex :outer("cuid_81_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 261
    .local pmc fb_tmp_8 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$/"
    set fb_tmp_8, $P5003
    repr_defined $I5001, fb_tmp_8
    unless $I5001 goto if366_else1116 
    set $P5004, fb_tmp_8[0]
    set $P5006, $P5004
    goto if366_end1117
  if366_else1116:
    null $P5005
    set $P5006, $P5005
  if366_end1117:
    unless_null $P5006, vivi_3671118
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_3671118:
    $P5008 = $P5006."Str"()
    $P5009 = $P5001."throw_unrecog_backslash_seq"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<unsp>" :subid("cuid_83_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 262
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx368_start
    .local string rx368_tgt
    .local int rx368_pos
    .local int rx368_off
    .local int rx368_eos
    .local int rx368_rep
    .local pmc rx368_cur
    .local pmc rx368_curclass
    .local pmc rx368_bstack
    .local pmc rx368_cstack
    rx368_start = self."!cursor_start_all"()
    set rx368_cur, rx368_start[0]
    set rx368_tgt, rx368_start[1]
    set rx368_pos, rx368_start[2]
    set rx368_curclass, rx368_start[3]
    set rx368_bstack, rx368_start[4]
    set $I19, rx368_start[5]
    store_lex unicode:"$\x{a2}", rx368_cur
    length rx368_eos, rx368_tgt
    eq $I19, 1, rx368_restart1121
    gt rx368_pos, rx368_eos, rx368_fail1122
    repr_get_attr_int $I11, self, rx368_curclass, "$!from"
    ne $I11, -1, rxscan369_done1128
    goto rxscan369_scan1127
  rxscan369_loop1126:
    inc rx368_pos
    gt rx368_pos, rx368_eos, rx368_fail1122
    repr_bind_attr_int rx368_cur, rx368_curclass, "$!from", rx368_pos
  rxscan369_scan1127:
    nqp_rxmark rx368_bstack, rxscan369_loop1126, rx368_pos, 0
  rxscan369_done1128:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt370_01130
    nqp_push_label $P11, alt370_11131
    nqp_rxmark rx368_bstack, alt370_end1129, -1, 0
    rx368_cur."!alt"(rx368_pos, "alt_nfa__16_1381281823.16119", $P11)
    goto rx368_fail1122
  alt370_01130:
    ge rx368_pos, rx368_eos, rx368_fail1122
    is_cclass $I11, .CCLASS_WHITESPACE, rx368_tgt, rx368_pos
    unless $I11, rx368_fail1122
    add rx368_pos, 1
    goto alt370_end1129
  alt370_11131:
    add $I11, rx368_pos, 1
    gt $I11, rx368_eos, rx368_fail1122
    substr $S10, rx368_tgt, rx368_pos, 1
    ne $S10, ucs4:"#", rx368_fail1122
    add rx368_pos, 1
    goto alt370_end1129
  alt370_end1129:
    nqp_rxcommit rx368_bstack, alt370_end1129
    repr_bind_attr_int rx368_cur, rx368_curclass, "$!pos", rx368_pos
    $P11 = rx368_cur."panic"("Unspace not allowed in regex")
    repr_get_attr_int $I11, $P11, rx368_curclass, "$!pos"
    lt $I11, 0, rx368_fail1122
    repr_get_attr_int rx368_pos, $P11, rx368_curclass, "$!pos"
    rx368_cur."!cursor_pass"(rx368_pos, "backslash:sym<unsp>", 'backtrack'=>1)
    .return (rx368_cur)
  rx368_restart1121:
    repr_get_attr_obj rx368_cstack, rx368_cur, rx368_curclass, "$!cstack"
  rx368_fail1122:
    unless rx368_bstack, rx368_done1120
    pop $I19, rx368_bstack
    if_null rx368_cstack, rx368_cstack_done1125
    unless rx368_cstack, rx368_cstack_done1125
    dec $I19
    set $P11, rx368_cstack[$I19]
  rx368_cstack_done1125:
    pop rx368_rep, rx368_bstack
    pop rx368_pos, rx368_bstack
    pop $I19, rx368_bstack
    lt rx368_pos, -1, rx368_done1120
    lt rx368_pos, 0, rx368_fail1122
    eq $I19, 0, rx368_fail1122
    nqp_islist $I20, rx368_cstack
    unless $I20, rx368_jump1123
    elements $I18, rx368_bstack
    le $I18, 0, rx368_cut1124
    dec $I18
    set $I18, rx368_bstack[$I18]
  rx368_cut1124:
    assign rx368_cstack, $I18
  rx368_jump1123:
    jump $I19
  rx368_done1120:
    rx368_cur."!cursor_fail"()
    .return (rx368_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<misc>" :subid("cuid_84_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 263
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx372_start
    .local string rx372_tgt
    .local int rx372_pos
    .local int rx372_off
    .local int rx372_eos
    .local int rx372_rep
    .local pmc rx372_cur
    .local pmc rx372_curclass
    .local pmc rx372_bstack
    .local pmc rx372_cstack
    rx372_start = self."!cursor_start_all"()
    set rx372_cur, rx372_start[0]
    set rx372_tgt, rx372_start[1]
    set rx372_pos, rx372_start[2]
    set rx372_curclass, rx372_start[3]
    set rx372_bstack, rx372_start[4]
    set $I19, rx372_start[5]
    store_lex unicode:"$\x{a2}", rx372_cur
    length rx372_eos, rx372_tgt
    eq $I19, 1, rx372_restart1135
    gt rx372_pos, rx372_eos, rx372_fail1136
    repr_get_attr_int $I11, self, rx372_curclass, "$!from"
    ne $I11, -1, rxscan373_done1142
    goto rxscan373_scan1141
  rxscan373_loop1140:
    inc rx372_pos
    gt rx372_pos, rx372_eos, rx372_fail1136
    repr_bind_attr_int rx372_cur, rx372_curclass, "$!from", rx372_pos
  rxscan373_scan1141:
    nqp_rxmark rx372_bstack, rxscan373_loop1140, rx372_pos, 0
  rxscan373_done1142:
    ge rx372_pos, rx372_eos, rx372_fail1136
    is_cclass $I11, .CCLASS_WORD, rx372_tgt, rx372_pos
    if $I11, rx372_fail1136
    add rx372_pos, 1
    rx372_cur."!cursor_pass"(rx372_pos, "backslash:sym<misc>", 'backtrack'=>1)
    .return (rx372_cur)
  rx372_restart1135:
    repr_get_attr_obj rx372_cstack, rx372_cur, rx372_curclass, "$!cstack"
  rx372_fail1136:
    unless rx372_bstack, rx372_done1134
    pop $I19, rx372_bstack
    if_null rx372_cstack, rx372_cstack_done1139
    unless rx372_cstack, rx372_cstack_done1139
    dec $I19
    set $P11, rx372_cstack[$I19]
  rx372_cstack_done1139:
    pop rx372_rep, rx372_bstack
    pop rx372_pos, rx372_bstack
    pop $I19, rx372_bstack
    lt rx372_pos, -1, rx372_done1134
    lt rx372_pos, 0, rx372_fail1136
    eq $I19, 0, rx372_fail1136
    nqp_islist $I20, rx372_cstack
    unless $I20, rx372_jump1137
    elements $I18, rx372_bstack
    le $I18, 0, rx372_cut1138
    dec $I18
    set $I18, rx372_bstack[$I18]
  rx372_cut1138:
    assign rx372_cstack, $I18
  rx372_jump1137:
    jump $I19
  rx372_done1134:
    rx372_cur."!cursor_fail"()
    .return (rx372_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash" :subid("cuid_85_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 265
    .param pmc self 
    $P5001 = self."!protoregex"("cclass_backslash")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<s>" :subid("cuid_86_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 266
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx374_start
    .local string rx374_tgt
    .local int rx374_pos
    .local int rx374_off
    .local int rx374_eos
    .local int rx374_rep
    .local pmc rx374_cur
    .local pmc rx374_curclass
    .local pmc rx374_bstack
    .local pmc rx374_cstack
    rx374_start = self."!cursor_start_all"()
    set rx374_cur, rx374_start[0]
    set rx374_tgt, rx374_start[1]
    set rx374_pos, rx374_start[2]
    set rx374_curclass, rx374_start[3]
    set rx374_bstack, rx374_start[4]
    set $I19, rx374_start[5]
    store_lex unicode:"$\x{a2}", rx374_cur
    length rx374_eos, rx374_tgt
    eq $I19, 1, rx374_restart1145
    gt rx374_pos, rx374_eos, rx374_fail1146
    repr_get_attr_int $I11, self, rx374_curclass, "$!from"
    ne $I11, -1, rxscan375_done1152
    goto rxscan375_scan1151
  rxscan375_loop1150:
    inc rx374_pos
    gt rx374_pos, rx374_eos, rx374_fail1146
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!from", rx374_pos
  rxscan375_scan1151:
    nqp_rxmark rx374_bstack, rxscan375_loop1150, rx374_pos, 0
  rxscan375_done1152:
    nqp_rxmark rx374_bstack, rxcap376_fail1154, rx374_pos, 0
    ge rx374_pos, rx374_eos, rx374_fail1146
    substr $S11, rx374_tgt, rx374_pos, 1
    index $I11, ucs4:"dDnNsSwW", $S11
    lt $I11, 0, rx374_fail1146
    inc rx374_pos
    nqp_rxpeek $I19, rx374_bstack, rxcap376_fail1154
    inc $I19
    set $I11, rx374_bstack[$I19]
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!pos", rx374_pos
    $P11 = rx374_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx374_pos)
    rx374_cstack = rx374_cur."!cursor_capture"($P11, "sym")
    goto rxcap376_done1153
  rxcap376_fail1154:
    goto rx374_fail1146
  rxcap376_done1153:
    rx374_cur."!cursor_pass"(rx374_pos, "cclass_backslash:sym<s>", 'backtrack'=>1)
    .return (rx374_cur)
  rx374_restart1145:
    repr_get_attr_obj rx374_cstack, rx374_cur, rx374_curclass, "$!cstack"
  rx374_fail1146:
    unless rx374_bstack, rx374_done1144
    pop $I19, rx374_bstack
    if_null rx374_cstack, rx374_cstack_done1149
    unless rx374_cstack, rx374_cstack_done1149
    dec $I19
    set $P11, rx374_cstack[$I19]
  rx374_cstack_done1149:
    pop rx374_rep, rx374_bstack
    pop rx374_pos, rx374_bstack
    pop $I19, rx374_bstack
    lt rx374_pos, -1, rx374_done1144
    lt rx374_pos, 0, rx374_fail1146
    eq $I19, 0, rx374_fail1146
    nqp_islist $I20, rx374_cstack
    unless $I20, rx374_jump1147
    elements $I18, rx374_bstack
    le $I18, 0, rx374_cut1148
    dec $I18
    set $I18, rx374_bstack[$I18]
  rx374_cut1148:
    assign rx374_cstack, $I18
  rx374_jump1147:
    jump $I19
  rx374_done1144:
    rx374_cur."!cursor_fail"()
    .return (rx374_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<b>" :subid("cuid_87_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 267
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx377_start
    .local string rx377_tgt
    .local int rx377_pos
    .local int rx377_off
    .local int rx377_eos
    .local int rx377_rep
    .local pmc rx377_cur
    .local pmc rx377_curclass
    .local pmc rx377_bstack
    .local pmc rx377_cstack
    rx377_start = self."!cursor_start_all"()
    set rx377_cur, rx377_start[0]
    set rx377_tgt, rx377_start[1]
    set rx377_pos, rx377_start[2]
    set rx377_curclass, rx377_start[3]
    set rx377_bstack, rx377_start[4]
    set $I19, rx377_start[5]
    store_lex unicode:"$\x{a2}", rx377_cur
    length rx377_eos, rx377_tgt
    eq $I19, 1, rx377_restart1157
    gt rx377_pos, rx377_eos, rx377_fail1158
    repr_get_attr_int $I11, self, rx377_curclass, "$!from"
    ne $I11, -1, rxscan378_done1164
    goto rxscan378_scan1163
  rxscan378_loop1162:
    inc rx377_pos
    gt rx377_pos, rx377_eos, rx377_fail1158
    repr_bind_attr_int rx377_cur, rx377_curclass, "$!from", rx377_pos
  rxscan378_scan1163:
    nqp_rxmark rx377_bstack, rxscan378_loop1162, rx377_pos, 0
  rxscan378_done1164:
    nqp_rxmark rx377_bstack, rxcap379_fail1166, rx377_pos, 0
    ge rx377_pos, rx377_eos, rx377_fail1158
    substr $S11, rx377_tgt, rx377_pos, 1
    index $I11, ucs4:"bB", $S11
    lt $I11, 0, rx377_fail1158
    inc rx377_pos
    nqp_rxpeek $I19, rx377_bstack, rxcap379_fail1166
    inc $I19
    set $I11, rx377_bstack[$I19]
    repr_bind_attr_int rx377_cur, rx377_curclass, "$!pos", rx377_pos
    $P11 = rx377_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx377_pos)
    rx377_cstack = rx377_cur."!cursor_capture"($P11, "sym")
    goto rxcap379_done1165
  rxcap379_fail1166:
    goto rx377_fail1158
  rxcap379_done1165:
    rx377_cur."!cursor_pass"(rx377_pos, "cclass_backslash:sym<b>", 'backtrack'=>1)
    .return (rx377_cur)
  rx377_restart1157:
    repr_get_attr_obj rx377_cstack, rx377_cur, rx377_curclass, "$!cstack"
  rx377_fail1158:
    unless rx377_bstack, rx377_done1156
    pop $I19, rx377_bstack
    if_null rx377_cstack, rx377_cstack_done1161
    unless rx377_cstack, rx377_cstack_done1161
    dec $I19
    set $P11, rx377_cstack[$I19]
  rx377_cstack_done1161:
    pop rx377_rep, rx377_bstack
    pop rx377_pos, rx377_bstack
    pop $I19, rx377_bstack
    lt rx377_pos, -1, rx377_done1156
    lt rx377_pos, 0, rx377_fail1158
    eq $I19, 0, rx377_fail1158
    nqp_islist $I20, rx377_cstack
    unless $I20, rx377_jump1159
    elements $I18, rx377_bstack
    le $I18, 0, rx377_cut1160
    dec $I18
    set $I18, rx377_bstack[$I18]
  rx377_cut1160:
    assign rx377_cstack, $I18
  rx377_jump1159:
    jump $I19
  rx377_done1156:
    rx377_cur."!cursor_fail"()
    .return (rx377_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<e>" :subid("cuid_88_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 268
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx380_start
    .local string rx380_tgt
    .local int rx380_pos
    .local int rx380_off
    .local int rx380_eos
    .local int rx380_rep
    .local pmc rx380_cur
    .local pmc rx380_curclass
    .local pmc rx380_bstack
    .local pmc rx380_cstack
    rx380_start = self."!cursor_start_all"()
    set rx380_cur, rx380_start[0]
    set rx380_tgt, rx380_start[1]
    set rx380_pos, rx380_start[2]
    set rx380_curclass, rx380_start[3]
    set rx380_bstack, rx380_start[4]
    set $I19, rx380_start[5]
    store_lex unicode:"$\x{a2}", rx380_cur
    length rx380_eos, rx380_tgt
    eq $I19, 1, rx380_restart1169
    gt rx380_pos, rx380_eos, rx380_fail1170
    repr_get_attr_int $I11, self, rx380_curclass, "$!from"
    ne $I11, -1, rxscan381_done1176
    goto rxscan381_scan1175
  rxscan381_loop1174:
    inc rx380_pos
    gt rx380_pos, rx380_eos, rx380_fail1170
    repr_bind_attr_int rx380_cur, rx380_curclass, "$!from", rx380_pos
  rxscan381_scan1175:
    nqp_rxmark rx380_bstack, rxscan381_loop1174, rx380_pos, 0
  rxscan381_done1176:
    nqp_rxmark rx380_bstack, rxcap382_fail1178, rx380_pos, 0
    ge rx380_pos, rx380_eos, rx380_fail1170
    substr $S11, rx380_tgt, rx380_pos, 1
    index $I11, ucs4:"eE", $S11
    lt $I11, 0, rx380_fail1170
    inc rx380_pos
    nqp_rxpeek $I19, rx380_bstack, rxcap382_fail1178
    inc $I19
    set $I11, rx380_bstack[$I19]
    repr_bind_attr_int rx380_cur, rx380_curclass, "$!pos", rx380_pos
    $P11 = rx380_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx380_pos)
    rx380_cstack = rx380_cur."!cursor_capture"($P11, "sym")
    goto rxcap382_done1177
  rxcap382_fail1178:
    goto rx380_fail1170
  rxcap382_done1177:
    rx380_cur."!cursor_pass"(rx380_pos, "cclass_backslash:sym<e>", 'backtrack'=>1)
    .return (rx380_cur)
  rx380_restart1169:
    repr_get_attr_obj rx380_cstack, rx380_cur, rx380_curclass, "$!cstack"
  rx380_fail1170:
    unless rx380_bstack, rx380_done1168
    pop $I19, rx380_bstack
    if_null rx380_cstack, rx380_cstack_done1173
    unless rx380_cstack, rx380_cstack_done1173
    dec $I19
    set $P11, rx380_cstack[$I19]
  rx380_cstack_done1173:
    pop rx380_rep, rx380_bstack
    pop rx380_pos, rx380_bstack
    pop $I19, rx380_bstack
    lt rx380_pos, -1, rx380_done1168
    lt rx380_pos, 0, rx380_fail1170
    eq $I19, 0, rx380_fail1170
    nqp_islist $I20, rx380_cstack
    unless $I20, rx380_jump1171
    elements $I18, rx380_bstack
    le $I18, 0, rx380_cut1172
    dec $I18
    set $I18, rx380_bstack[$I18]
  rx380_cut1172:
    assign rx380_cstack, $I18
  rx380_jump1171:
    jump $I19
  rx380_done1168:
    rx380_cur."!cursor_fail"()
    .return (rx380_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<f>" :subid("cuid_89_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 269
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx383_start
    .local string rx383_tgt
    .local int rx383_pos
    .local int rx383_off
    .local int rx383_eos
    .local int rx383_rep
    .local pmc rx383_cur
    .local pmc rx383_curclass
    .local pmc rx383_bstack
    .local pmc rx383_cstack
    rx383_start = self."!cursor_start_all"()
    set rx383_cur, rx383_start[0]
    set rx383_tgt, rx383_start[1]
    set rx383_pos, rx383_start[2]
    set rx383_curclass, rx383_start[3]
    set rx383_bstack, rx383_start[4]
    set $I19, rx383_start[5]
    store_lex unicode:"$\x{a2}", rx383_cur
    length rx383_eos, rx383_tgt
    eq $I19, 1, rx383_restart1181
    gt rx383_pos, rx383_eos, rx383_fail1182
    repr_get_attr_int $I11, self, rx383_curclass, "$!from"
    ne $I11, -1, rxscan384_done1188
    goto rxscan384_scan1187
  rxscan384_loop1186:
    inc rx383_pos
    gt rx383_pos, rx383_eos, rx383_fail1182
    repr_bind_attr_int rx383_cur, rx383_curclass, "$!from", rx383_pos
  rxscan384_scan1187:
    nqp_rxmark rx383_bstack, rxscan384_loop1186, rx383_pos, 0
  rxscan384_done1188:
    nqp_rxmark rx383_bstack, rxcap385_fail1190, rx383_pos, 0
    ge rx383_pos, rx383_eos, rx383_fail1182
    substr $S11, rx383_tgt, rx383_pos, 1
    index $I11, ucs4:"fF", $S11
    lt $I11, 0, rx383_fail1182
    inc rx383_pos
    nqp_rxpeek $I19, rx383_bstack, rxcap385_fail1190
    inc $I19
    set $I11, rx383_bstack[$I19]
    repr_bind_attr_int rx383_cur, rx383_curclass, "$!pos", rx383_pos
    $P11 = rx383_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx383_pos)
    rx383_cstack = rx383_cur."!cursor_capture"($P11, "sym")
    goto rxcap385_done1189
  rxcap385_fail1190:
    goto rx383_fail1182
  rxcap385_done1189:
    rx383_cur."!cursor_pass"(rx383_pos, "cclass_backslash:sym<f>", 'backtrack'=>1)
    .return (rx383_cur)
  rx383_restart1181:
    repr_get_attr_obj rx383_cstack, rx383_cur, rx383_curclass, "$!cstack"
  rx383_fail1182:
    unless rx383_bstack, rx383_done1180
    pop $I19, rx383_bstack
    if_null rx383_cstack, rx383_cstack_done1185
    unless rx383_cstack, rx383_cstack_done1185
    dec $I19
    set $P11, rx383_cstack[$I19]
  rx383_cstack_done1185:
    pop rx383_rep, rx383_bstack
    pop rx383_pos, rx383_bstack
    pop $I19, rx383_bstack
    lt rx383_pos, -1, rx383_done1180
    lt rx383_pos, 0, rx383_fail1182
    eq $I19, 0, rx383_fail1182
    nqp_islist $I20, rx383_cstack
    unless $I20, rx383_jump1183
    elements $I18, rx383_bstack
    le $I18, 0, rx383_cut1184
    dec $I18
    set $I18, rx383_bstack[$I18]
  rx383_cut1184:
    assign rx383_cstack, $I18
  rx383_jump1183:
    jump $I19
  rx383_done1180:
    rx383_cur."!cursor_fail"()
    .return (rx383_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<h>" :subid("cuid_90_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 270
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx386_start
    .local string rx386_tgt
    .local int rx386_pos
    .local int rx386_off
    .local int rx386_eos
    .local int rx386_rep
    .local pmc rx386_cur
    .local pmc rx386_curclass
    .local pmc rx386_bstack
    .local pmc rx386_cstack
    rx386_start = self."!cursor_start_all"()
    set rx386_cur, rx386_start[0]
    set rx386_tgt, rx386_start[1]
    set rx386_pos, rx386_start[2]
    set rx386_curclass, rx386_start[3]
    set rx386_bstack, rx386_start[4]
    set $I19, rx386_start[5]
    store_lex unicode:"$\x{a2}", rx386_cur
    length rx386_eos, rx386_tgt
    eq $I19, 1, rx386_restart1193
    gt rx386_pos, rx386_eos, rx386_fail1194
    repr_get_attr_int $I11, self, rx386_curclass, "$!from"
    ne $I11, -1, rxscan387_done1200
    goto rxscan387_scan1199
  rxscan387_loop1198:
    inc rx386_pos
    gt rx386_pos, rx386_eos, rx386_fail1194
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!from", rx386_pos
  rxscan387_scan1199:
    nqp_rxmark rx386_bstack, rxscan387_loop1198, rx386_pos, 0
  rxscan387_done1200:
    nqp_rxmark rx386_bstack, rxcap388_fail1202, rx386_pos, 0
    ge rx386_pos, rx386_eos, rx386_fail1194
    substr $S11, rx386_tgt, rx386_pos, 1
    index $I11, ucs4:"hH", $S11
    lt $I11, 0, rx386_fail1194
    inc rx386_pos
    nqp_rxpeek $I19, rx386_bstack, rxcap388_fail1202
    inc $I19
    set $I11, rx386_bstack[$I19]
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!pos", rx386_pos
    $P11 = rx386_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx386_pos)
    rx386_cstack = rx386_cur."!cursor_capture"($P11, "sym")
    goto rxcap388_done1201
  rxcap388_fail1202:
    goto rx386_fail1194
  rxcap388_done1201:
    rx386_cur."!cursor_pass"(rx386_pos, "cclass_backslash:sym<h>", 'backtrack'=>1)
    .return (rx386_cur)
  rx386_restart1193:
    repr_get_attr_obj rx386_cstack, rx386_cur, rx386_curclass, "$!cstack"
  rx386_fail1194:
    unless rx386_bstack, rx386_done1192
    pop $I19, rx386_bstack
    if_null rx386_cstack, rx386_cstack_done1197
    unless rx386_cstack, rx386_cstack_done1197
    dec $I19
    set $P11, rx386_cstack[$I19]
  rx386_cstack_done1197:
    pop rx386_rep, rx386_bstack
    pop rx386_pos, rx386_bstack
    pop $I19, rx386_bstack
    lt rx386_pos, -1, rx386_done1192
    lt rx386_pos, 0, rx386_fail1194
    eq $I19, 0, rx386_fail1194
    nqp_islist $I20, rx386_cstack
    unless $I20, rx386_jump1195
    elements $I18, rx386_bstack
    le $I18, 0, rx386_cut1196
    dec $I18
    set $I18, rx386_bstack[$I18]
  rx386_cut1196:
    assign rx386_cstack, $I18
  rx386_jump1195:
    jump $I19
  rx386_done1192:
    rx386_cur."!cursor_fail"()
    .return (rx386_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<r>" :subid("cuid_91_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 271
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx389_start
    .local string rx389_tgt
    .local int rx389_pos
    .local int rx389_off
    .local int rx389_eos
    .local int rx389_rep
    .local pmc rx389_cur
    .local pmc rx389_curclass
    .local pmc rx389_bstack
    .local pmc rx389_cstack
    rx389_start = self."!cursor_start_all"()
    set rx389_cur, rx389_start[0]
    set rx389_tgt, rx389_start[1]
    set rx389_pos, rx389_start[2]
    set rx389_curclass, rx389_start[3]
    set rx389_bstack, rx389_start[4]
    set $I19, rx389_start[5]
    store_lex unicode:"$\x{a2}", rx389_cur
    length rx389_eos, rx389_tgt
    eq $I19, 1, rx389_restart1205
    gt rx389_pos, rx389_eos, rx389_fail1206
    repr_get_attr_int $I11, self, rx389_curclass, "$!from"
    ne $I11, -1, rxscan390_done1212
    goto rxscan390_scan1211
  rxscan390_loop1210:
    inc rx389_pos
    gt rx389_pos, rx389_eos, rx389_fail1206
    repr_bind_attr_int rx389_cur, rx389_curclass, "$!from", rx389_pos
  rxscan390_scan1211:
    nqp_rxmark rx389_bstack, rxscan390_loop1210, rx389_pos, 0
  rxscan390_done1212:
    nqp_rxmark rx389_bstack, rxcap391_fail1214, rx389_pos, 0
    ge rx389_pos, rx389_eos, rx389_fail1206
    substr $S11, rx389_tgt, rx389_pos, 1
    index $I11, ucs4:"rR", $S11
    lt $I11, 0, rx389_fail1206
    inc rx389_pos
    nqp_rxpeek $I19, rx389_bstack, rxcap391_fail1214
    inc $I19
    set $I11, rx389_bstack[$I19]
    repr_bind_attr_int rx389_cur, rx389_curclass, "$!pos", rx389_pos
    $P11 = rx389_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx389_pos)
    rx389_cstack = rx389_cur."!cursor_capture"($P11, "sym")
    goto rxcap391_done1213
  rxcap391_fail1214:
    goto rx389_fail1206
  rxcap391_done1213:
    rx389_cur."!cursor_pass"(rx389_pos, "cclass_backslash:sym<r>", 'backtrack'=>1)
    .return (rx389_cur)
  rx389_restart1205:
    repr_get_attr_obj rx389_cstack, rx389_cur, rx389_curclass, "$!cstack"
  rx389_fail1206:
    unless rx389_bstack, rx389_done1204
    pop $I19, rx389_bstack
    if_null rx389_cstack, rx389_cstack_done1209
    unless rx389_cstack, rx389_cstack_done1209
    dec $I19
    set $P11, rx389_cstack[$I19]
  rx389_cstack_done1209:
    pop rx389_rep, rx389_bstack
    pop rx389_pos, rx389_bstack
    pop $I19, rx389_bstack
    lt rx389_pos, -1, rx389_done1204
    lt rx389_pos, 0, rx389_fail1206
    eq $I19, 0, rx389_fail1206
    nqp_islist $I20, rx389_cstack
    unless $I20, rx389_jump1207
    elements $I18, rx389_bstack
    le $I18, 0, rx389_cut1208
    dec $I18
    set $I18, rx389_bstack[$I18]
  rx389_cut1208:
    assign rx389_cstack, $I18
  rx389_jump1207:
    jump $I19
  rx389_done1204:
    rx389_cur."!cursor_fail"()
    .return (rx389_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<t>" :subid("cuid_92_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 272
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx392_start
    .local string rx392_tgt
    .local int rx392_pos
    .local int rx392_off
    .local int rx392_eos
    .local int rx392_rep
    .local pmc rx392_cur
    .local pmc rx392_curclass
    .local pmc rx392_bstack
    .local pmc rx392_cstack
    rx392_start = self."!cursor_start_all"()
    set rx392_cur, rx392_start[0]
    set rx392_tgt, rx392_start[1]
    set rx392_pos, rx392_start[2]
    set rx392_curclass, rx392_start[3]
    set rx392_bstack, rx392_start[4]
    set $I19, rx392_start[5]
    store_lex unicode:"$\x{a2}", rx392_cur
    length rx392_eos, rx392_tgt
    eq $I19, 1, rx392_restart1217
    gt rx392_pos, rx392_eos, rx392_fail1218
    repr_get_attr_int $I11, self, rx392_curclass, "$!from"
    ne $I11, -1, rxscan393_done1224
    goto rxscan393_scan1223
  rxscan393_loop1222:
    inc rx392_pos
    gt rx392_pos, rx392_eos, rx392_fail1218
    repr_bind_attr_int rx392_cur, rx392_curclass, "$!from", rx392_pos
  rxscan393_scan1223:
    nqp_rxmark rx392_bstack, rxscan393_loop1222, rx392_pos, 0
  rxscan393_done1224:
    nqp_rxmark rx392_bstack, rxcap394_fail1226, rx392_pos, 0
    ge rx392_pos, rx392_eos, rx392_fail1218
    substr $S11, rx392_tgt, rx392_pos, 1
    index $I11, ucs4:"tT", $S11
    lt $I11, 0, rx392_fail1218
    inc rx392_pos
    nqp_rxpeek $I19, rx392_bstack, rxcap394_fail1226
    inc $I19
    set $I11, rx392_bstack[$I19]
    repr_bind_attr_int rx392_cur, rx392_curclass, "$!pos", rx392_pos
    $P11 = rx392_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx392_pos)
    rx392_cstack = rx392_cur."!cursor_capture"($P11, "sym")
    goto rxcap394_done1225
  rxcap394_fail1226:
    goto rx392_fail1218
  rxcap394_done1225:
    rx392_cur."!cursor_pass"(rx392_pos, "cclass_backslash:sym<t>", 'backtrack'=>1)
    .return (rx392_cur)
  rx392_restart1217:
    repr_get_attr_obj rx392_cstack, rx392_cur, rx392_curclass, "$!cstack"
  rx392_fail1218:
    unless rx392_bstack, rx392_done1216
    pop $I19, rx392_bstack
    if_null rx392_cstack, rx392_cstack_done1221
    unless rx392_cstack, rx392_cstack_done1221
    dec $I19
    set $P11, rx392_cstack[$I19]
  rx392_cstack_done1221:
    pop rx392_rep, rx392_bstack
    pop rx392_pos, rx392_bstack
    pop $I19, rx392_bstack
    lt rx392_pos, -1, rx392_done1216
    lt rx392_pos, 0, rx392_fail1218
    eq $I19, 0, rx392_fail1218
    nqp_islist $I20, rx392_cstack
    unless $I20, rx392_jump1219
    elements $I18, rx392_bstack
    le $I18, 0, rx392_cut1220
    dec $I18
    set $I18, rx392_bstack[$I18]
  rx392_cut1220:
    assign rx392_cstack, $I18
  rx392_jump1219:
    jump $I19
  rx392_done1216:
    rx392_cur."!cursor_fail"()
    .return (rx392_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<v>" :subid("cuid_93_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 273
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx395_start
    .local string rx395_tgt
    .local int rx395_pos
    .local int rx395_off
    .local int rx395_eos
    .local int rx395_rep
    .local pmc rx395_cur
    .local pmc rx395_curclass
    .local pmc rx395_bstack
    .local pmc rx395_cstack
    rx395_start = self."!cursor_start_all"()
    set rx395_cur, rx395_start[0]
    set rx395_tgt, rx395_start[1]
    set rx395_pos, rx395_start[2]
    set rx395_curclass, rx395_start[3]
    set rx395_bstack, rx395_start[4]
    set $I19, rx395_start[5]
    store_lex unicode:"$\x{a2}", rx395_cur
    length rx395_eos, rx395_tgt
    eq $I19, 1, rx395_restart1229
    gt rx395_pos, rx395_eos, rx395_fail1230
    repr_get_attr_int $I11, self, rx395_curclass, "$!from"
    ne $I11, -1, rxscan396_done1236
    goto rxscan396_scan1235
  rxscan396_loop1234:
    inc rx395_pos
    gt rx395_pos, rx395_eos, rx395_fail1230
    repr_bind_attr_int rx395_cur, rx395_curclass, "$!from", rx395_pos
  rxscan396_scan1235:
    nqp_rxmark rx395_bstack, rxscan396_loop1234, rx395_pos, 0
  rxscan396_done1236:
    nqp_rxmark rx395_bstack, rxcap397_fail1238, rx395_pos, 0
    ge rx395_pos, rx395_eos, rx395_fail1230
    substr $S11, rx395_tgt, rx395_pos, 1
    index $I11, ucs4:"vV", $S11
    lt $I11, 0, rx395_fail1230
    inc rx395_pos
    nqp_rxpeek $I19, rx395_bstack, rxcap397_fail1238
    inc $I19
    set $I11, rx395_bstack[$I19]
    repr_bind_attr_int rx395_cur, rx395_curclass, "$!pos", rx395_pos
    $P11 = rx395_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx395_pos)
    rx395_cstack = rx395_cur."!cursor_capture"($P11, "sym")
    goto rxcap397_done1237
  rxcap397_fail1238:
    goto rx395_fail1230
  rxcap397_done1237:
    rx395_cur."!cursor_pass"(rx395_pos, "cclass_backslash:sym<v>", 'backtrack'=>1)
    .return (rx395_cur)
  rx395_restart1229:
    repr_get_attr_obj rx395_cstack, rx395_cur, rx395_curclass, "$!cstack"
  rx395_fail1230:
    unless rx395_bstack, rx395_done1228
    pop $I19, rx395_bstack
    if_null rx395_cstack, rx395_cstack_done1233
    unless rx395_cstack, rx395_cstack_done1233
    dec $I19
    set $P11, rx395_cstack[$I19]
  rx395_cstack_done1233:
    pop rx395_rep, rx395_bstack
    pop rx395_pos, rx395_bstack
    pop $I19, rx395_bstack
    lt rx395_pos, -1, rx395_done1228
    lt rx395_pos, 0, rx395_fail1230
    eq $I19, 0, rx395_fail1230
    nqp_islist $I20, rx395_cstack
    unless $I20, rx395_jump1231
    elements $I18, rx395_bstack
    le $I18, 0, rx395_cut1232
    dec $I18
    set $I18, rx395_bstack[$I18]
  rx395_cut1232:
    assign rx395_cstack, $I18
  rx395_jump1231:
    jump $I19
  rx395_done1228:
    rx395_cur."!cursor_fail"()
    .return (rx395_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<o>" :subid("cuid_94_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 274
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx398_start
    .local string rx398_tgt
    .local int rx398_pos
    .local int rx398_off
    .local int rx398_eos
    .local int rx398_rep
    .local pmc rx398_cur
    .local pmc rx398_curclass
    .local pmc rx398_bstack
    .local pmc rx398_cstack
    rx398_start = self."!cursor_start_all"()
    set rx398_cur, rx398_start[0]
    set rx398_tgt, rx398_start[1]
    set rx398_pos, rx398_start[2]
    set rx398_curclass, rx398_start[3]
    set rx398_bstack, rx398_start[4]
    set $I19, rx398_start[5]
    store_lex unicode:"$\x{a2}", rx398_cur
    length rx398_eos, rx398_tgt
    eq $I19, 1, rx398_restart1241
    gt rx398_pos, rx398_eos, rx398_fail1242
    repr_get_attr_int $I11, self, rx398_curclass, "$!from"
    ne $I11, -1, rxscan399_done1248
    goto rxscan399_scan1247
  rxscan399_loop1246:
    inc rx398_pos
    gt rx398_pos, rx398_eos, rx398_fail1242
    repr_bind_attr_int rx398_cur, rx398_curclass, "$!from", rx398_pos
  rxscan399_scan1247:
    nqp_rxmark rx398_bstack, rxscan399_loop1246, rx398_pos, 0
  rxscan399_done1248:
    nqp_rxmark rx398_bstack, rxcap400_fail1250, rx398_pos, 0
    ge rx398_pos, rx398_eos, rx398_fail1242
    substr $S11, rx398_tgt, rx398_pos, 1
    index $I11, ucs4:"oO", $S11
    lt $I11, 0, rx398_fail1242
    inc rx398_pos
    nqp_rxpeek $I19, rx398_bstack, rxcap400_fail1250
    inc $I19
    set $I11, rx398_bstack[$I19]
    repr_bind_attr_int rx398_cur, rx398_curclass, "$!pos", rx398_pos
    $P11 = rx398_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx398_pos)
    rx398_cstack = rx398_cur."!cursor_capture"($P11, "sym")
    goto rxcap400_done1249
  rxcap400_fail1250:
    goto rx398_fail1242
  rxcap400_done1249:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt401_01252
    nqp_push_label $P11, alt401_11254
    nqp_rxmark rx398_bstack, alt401_end1251, -1, 0
    rx398_cur."!alt"(rx398_pos, "alt_nfa__17_1381281823.24025", $P11)
    goto rx398_fail1242
  alt401_01252:
    repr_bind_attr_int rx398_cur, rx398_curclass, "$!pos", rx398_pos
    $P11 = rx398_cur."octint"()
    repr_get_attr_int $I11, $P11, rx398_curclass, "$!pos"
    lt $I11, 0, rx398_fail1242
    nqp_rxmark rx398_bstack, rxsubrule402_pass1253, -1, 0
  rxsubrule402_pass1253:
    rx398_cstack = rx398_cur."!cursor_capture"($P11, "octint")
    repr_get_attr_int rx398_pos, $P11, rx398_curclass, "$!pos"
    goto alt401_end1251
  alt401_11254:
    add $I11, rx398_pos, 1
    gt $I11, rx398_eos, rx398_fail1242
    substr $S10, rx398_tgt, rx398_pos, 1
    ne $S10, ucs4:"[", rx398_fail1242
    add rx398_pos, 1
    repr_bind_attr_int rx398_cur, rx398_curclass, "$!pos", rx398_pos
    $P11 = rx398_cur."octints"()
    repr_get_attr_int $I11, $P11, rx398_curclass, "$!pos"
    lt $I11, 0, rx398_fail1242
    nqp_rxmark rx398_bstack, rxsubrule403_pass1255, -1, 0
  rxsubrule403_pass1255:
    rx398_cstack = rx398_cur."!cursor_capture"($P11, "octints")
    repr_get_attr_int rx398_pos, $P11, rx398_curclass, "$!pos"
    add $I11, rx398_pos, 1
    gt $I11, rx398_eos, rx398_fail1242
    substr $S10, rx398_tgt, rx398_pos, 1
    ne $S10, ucs4:"]", rx398_fail1242
    add rx398_pos, 1
    goto alt401_end1251
  alt401_end1251:
    nqp_rxcommit rx398_bstack, alt401_end1251
    rx398_cur."!cursor_pass"(rx398_pos, "cclass_backslash:sym<o>", 'backtrack'=>1)
    .return (rx398_cur)
  rx398_restart1241:
    repr_get_attr_obj rx398_cstack, rx398_cur, rx398_curclass, "$!cstack"
  rx398_fail1242:
    unless rx398_bstack, rx398_done1240
    pop $I19, rx398_bstack
    if_null rx398_cstack, rx398_cstack_done1245
    unless rx398_cstack, rx398_cstack_done1245
    dec $I19
    set $P11, rx398_cstack[$I19]
  rx398_cstack_done1245:
    pop rx398_rep, rx398_bstack
    pop rx398_pos, rx398_bstack
    pop $I19, rx398_bstack
    lt rx398_pos, -1, rx398_done1240
    lt rx398_pos, 0, rx398_fail1242
    eq $I19, 0, rx398_fail1242
    nqp_islist $I20, rx398_cstack
    unless $I20, rx398_jump1243
    elements $I18, rx398_bstack
    le $I18, 0, rx398_cut1244
    dec $I18
    set $I18, rx398_bstack[$I18]
  rx398_cut1244:
    assign rx398_cstack, $I18
  rx398_jump1243:
    jump $I19
  rx398_done1240:
    rx398_cur."!cursor_fail"()
    .return (rx398_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<x>" :subid("cuid_95_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 275
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx404_start
    .local string rx404_tgt
    .local int rx404_pos
    .local int rx404_off
    .local int rx404_eos
    .local int rx404_rep
    .local pmc rx404_cur
    .local pmc rx404_curclass
    .local pmc rx404_bstack
    .local pmc rx404_cstack
    rx404_start = self."!cursor_start_all"()
    set rx404_cur, rx404_start[0]
    set rx404_tgt, rx404_start[1]
    set rx404_pos, rx404_start[2]
    set rx404_curclass, rx404_start[3]
    set rx404_bstack, rx404_start[4]
    set $I19, rx404_start[5]
    store_lex unicode:"$\x{a2}", rx404_cur
    length rx404_eos, rx404_tgt
    eq $I19, 1, rx404_restart1258
    gt rx404_pos, rx404_eos, rx404_fail1259
    repr_get_attr_int $I11, self, rx404_curclass, "$!from"
    ne $I11, -1, rxscan405_done1265
    goto rxscan405_scan1264
  rxscan405_loop1263:
    inc rx404_pos
    gt rx404_pos, rx404_eos, rx404_fail1259
    repr_bind_attr_int rx404_cur, rx404_curclass, "$!from", rx404_pos
  rxscan405_scan1264:
    nqp_rxmark rx404_bstack, rxscan405_loop1263, rx404_pos, 0
  rxscan405_done1265:
    nqp_rxmark rx404_bstack, rxcap406_fail1267, rx404_pos, 0
    ge rx404_pos, rx404_eos, rx404_fail1259
    substr $S11, rx404_tgt, rx404_pos, 1
    index $I11, ucs4:"xX", $S11
    lt $I11, 0, rx404_fail1259
    inc rx404_pos
    nqp_rxpeek $I19, rx404_bstack, rxcap406_fail1267
    inc $I19
    set $I11, rx404_bstack[$I19]
    repr_bind_attr_int rx404_cur, rx404_curclass, "$!pos", rx404_pos
    $P11 = rx404_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx404_pos)
    rx404_cstack = rx404_cur."!cursor_capture"($P11, "sym")
    goto rxcap406_done1266
  rxcap406_fail1267:
    goto rx404_fail1259
  rxcap406_done1266:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt407_01269
    nqp_push_label $P11, alt407_11271
    nqp_rxmark rx404_bstack, alt407_end1268, -1, 0
    rx404_cur."!alt"(rx404_pos, "alt_nfa__18_1381281823.25533", $P11)
    goto rx404_fail1259
  alt407_01269:
    repr_bind_attr_int rx404_cur, rx404_curclass, "$!pos", rx404_pos
    $P11 = rx404_cur."hexint"()
    repr_get_attr_int $I11, $P11, rx404_curclass, "$!pos"
    lt $I11, 0, rx404_fail1259
    nqp_rxmark rx404_bstack, rxsubrule408_pass1270, -1, 0
  rxsubrule408_pass1270:
    rx404_cstack = rx404_cur."!cursor_capture"($P11, "hexint")
    repr_get_attr_int rx404_pos, $P11, rx404_curclass, "$!pos"
    goto alt407_end1268
  alt407_11271:
    add $I11, rx404_pos, 1
    gt $I11, rx404_eos, rx404_fail1259
    substr $S10, rx404_tgt, rx404_pos, 1
    ne $S10, ucs4:"[", rx404_fail1259
    add rx404_pos, 1
    repr_bind_attr_int rx404_cur, rx404_curclass, "$!pos", rx404_pos
    $P11 = rx404_cur."hexints"()
    repr_get_attr_int $I11, $P11, rx404_curclass, "$!pos"
    lt $I11, 0, rx404_fail1259
    nqp_rxmark rx404_bstack, rxsubrule409_pass1272, -1, 0
  rxsubrule409_pass1272:
    rx404_cstack = rx404_cur."!cursor_capture"($P11, "hexints")
    repr_get_attr_int rx404_pos, $P11, rx404_curclass, "$!pos"
    add $I11, rx404_pos, 1
    gt $I11, rx404_eos, rx404_fail1259
    substr $S10, rx404_tgt, rx404_pos, 1
    ne $S10, ucs4:"]", rx404_fail1259
    add rx404_pos, 1
    goto alt407_end1268
  alt407_end1268:
    nqp_rxcommit rx404_bstack, alt407_end1268
    rx404_cur."!cursor_pass"(rx404_pos, "cclass_backslash:sym<x>", 'backtrack'=>1)
    .return (rx404_cur)
  rx404_restart1258:
    repr_get_attr_obj rx404_cstack, rx404_cur, rx404_curclass, "$!cstack"
  rx404_fail1259:
    unless rx404_bstack, rx404_done1257
    pop $I19, rx404_bstack
    if_null rx404_cstack, rx404_cstack_done1262
    unless rx404_cstack, rx404_cstack_done1262
    dec $I19
    set $P11, rx404_cstack[$I19]
  rx404_cstack_done1262:
    pop rx404_rep, rx404_bstack
    pop rx404_pos, rx404_bstack
    pop $I19, rx404_bstack
    lt rx404_pos, -1, rx404_done1257
    lt rx404_pos, 0, rx404_fail1259
    eq $I19, 0, rx404_fail1259
    nqp_islist $I20, rx404_cstack
    unless $I20, rx404_jump1260
    elements $I18, rx404_bstack
    le $I18, 0, rx404_cut1261
    dec $I18
    set $I18, rx404_bstack[$I18]
  rx404_cut1261:
    assign rx404_cstack, $I18
  rx404_jump1260:
    jump $I19
  rx404_done1257:
    rx404_cur."!cursor_fail"()
    .return (rx404_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<c>" :subid("cuid_96_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 276
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx410_start
    .local string rx410_tgt
    .local int rx410_pos
    .local int rx410_off
    .local int rx410_eos
    .local int rx410_rep
    .local pmc rx410_cur
    .local pmc rx410_curclass
    .local pmc rx410_bstack
    .local pmc rx410_cstack
    rx410_start = self."!cursor_start_all"()
    set rx410_cur, rx410_start[0]
    set rx410_tgt, rx410_start[1]
    set rx410_pos, rx410_start[2]
    set rx410_curclass, rx410_start[3]
    set rx410_bstack, rx410_start[4]
    set $I19, rx410_start[5]
    store_lex unicode:"$\x{a2}", rx410_cur
    length rx410_eos, rx410_tgt
    eq $I19, 1, rx410_restart1275
    gt rx410_pos, rx410_eos, rx410_fail1276
    repr_get_attr_int $I11, self, rx410_curclass, "$!from"
    ne $I11, -1, rxscan411_done1282
    goto rxscan411_scan1281
  rxscan411_loop1280:
    inc rx410_pos
    gt rx410_pos, rx410_eos, rx410_fail1276
    repr_bind_attr_int rx410_cur, rx410_curclass, "$!from", rx410_pos
  rxscan411_scan1281:
    nqp_rxmark rx410_bstack, rxscan411_loop1280, rx410_pos, 0
  rxscan411_done1282:
    nqp_rxmark rx410_bstack, rxcap412_fail1284, rx410_pos, 0
    ge rx410_pos, rx410_eos, rx410_fail1276
    substr $S11, rx410_tgt, rx410_pos, 1
    index $I11, ucs4:"cC", $S11
    lt $I11, 0, rx410_fail1276
    inc rx410_pos
    nqp_rxpeek $I19, rx410_bstack, rxcap412_fail1284
    inc $I19
    set $I11, rx410_bstack[$I19]
    repr_bind_attr_int rx410_cur, rx410_curclass, "$!pos", rx410_pos
    $P11 = rx410_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx410_pos)
    rx410_cstack = rx410_cur."!cursor_capture"($P11, "sym")
    goto rxcap412_done1283
  rxcap412_fail1284:
    goto rx410_fail1276
  rxcap412_done1283:
    repr_bind_attr_int rx410_cur, rx410_curclass, "$!pos", rx410_pos
    $P11 = rx410_cur."charspec"()
    repr_get_attr_int $I11, $P11, rx410_curclass, "$!pos"
    lt $I11, 0, rx410_fail1276
    nqp_rxmark rx410_bstack, rxsubrule413_pass1285, -1, 0
  rxsubrule413_pass1285:
    rx410_cstack = rx410_cur."!cursor_capture"($P11, "charspec")
    repr_get_attr_int rx410_pos, $P11, rx410_curclass, "$!pos"
    rx410_cur."!cursor_pass"(rx410_pos, "cclass_backslash:sym<c>", 'backtrack'=>1)
    .return (rx410_cur)
  rx410_restart1275:
    repr_get_attr_obj rx410_cstack, rx410_cur, rx410_curclass, "$!cstack"
  rx410_fail1276:
    unless rx410_bstack, rx410_done1274
    pop $I19, rx410_bstack
    if_null rx410_cstack, rx410_cstack_done1279
    unless rx410_cstack, rx410_cstack_done1279
    dec $I19
    set $P11, rx410_cstack[$I19]
  rx410_cstack_done1279:
    pop rx410_rep, rx410_bstack
    pop rx410_pos, rx410_bstack
    pop $I19, rx410_bstack
    lt rx410_pos, -1, rx410_done1274
    lt rx410_pos, 0, rx410_fail1276
    eq $I19, 0, rx410_fail1276
    nqp_islist $I20, rx410_cstack
    unless $I20, rx410_jump1277
    elements $I18, rx410_bstack
    le $I18, 0, rx410_cut1278
    dec $I18
    set $I18, rx410_bstack[$I18]
  rx410_cut1278:
    assign rx410_cstack, $I18
  rx410_jump1277:
    jump $I19
  rx410_done1274:
    rx410_cur."!cursor_fail"()
    .return (rx410_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<any>" :subid("cuid_97_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 277
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx414_start
    .local string rx414_tgt
    .local int rx414_pos
    .local int rx414_off
    .local int rx414_eos
    .local int rx414_rep
    .local pmc rx414_cur
    .local pmc rx414_curclass
    .local pmc rx414_bstack
    .local pmc rx414_cstack
    rx414_start = self."!cursor_start_all"()
    set rx414_cur, rx414_start[0]
    set rx414_tgt, rx414_start[1]
    set rx414_pos, rx414_start[2]
    set rx414_curclass, rx414_start[3]
    set rx414_bstack, rx414_start[4]
    set $I19, rx414_start[5]
    store_lex unicode:"$\x{a2}", rx414_cur
    length rx414_eos, rx414_tgt
    eq $I19, 1, rx414_restart1288
    gt rx414_pos, rx414_eos, rx414_fail1289
    repr_get_attr_int $I11, self, rx414_curclass, "$!from"
    ne $I11, -1, rxscan415_done1295
    goto rxscan415_scan1294
  rxscan415_loop1293:
    inc rx414_pos
    gt rx414_pos, rx414_eos, rx414_fail1289
    repr_bind_attr_int rx414_cur, rx414_curclass, "$!from", rx414_pos
  rxscan415_scan1294:
    nqp_rxmark rx414_bstack, rxscan415_loop1293, rx414_pos, 0
  rxscan415_done1295:
    ge rx414_pos, rx414_eos, rx414_fail1289
    add rx414_pos, 1
    rx414_cur."!cursor_pass"(rx414_pos, "cclass_backslash:sym<any>", 'backtrack'=>1)
    .return (rx414_cur)
  rx414_restart1288:
    repr_get_attr_obj rx414_cstack, rx414_cur, rx414_curclass, "$!cstack"
  rx414_fail1289:
    unless rx414_bstack, rx414_done1287
    pop $I19, rx414_bstack
    if_null rx414_cstack, rx414_cstack_done1292
    unless rx414_cstack, rx414_cstack_done1292
    dec $I19
    set $P11, rx414_cstack[$I19]
  rx414_cstack_done1292:
    pop rx414_rep, rx414_bstack
    pop rx414_pos, rx414_bstack
    pop $I19, rx414_bstack
    lt rx414_pos, -1, rx414_done1287
    lt rx414_pos, 0, rx414_fail1289
    eq $I19, 0, rx414_fail1289
    nqp_islist $I20, rx414_cstack
    unless $I20, rx414_jump1290
    elements $I18, rx414_bstack
    le $I18, 0, rx414_cut1291
    dec $I18
    set $I18, rx414_bstack[$I18]
  rx414_cut1291:
    assign rx414_cstack, $I18
  rx414_jump1290:
    jump $I19
  rx414_done1287:
    rx414_cur."!cursor_fail"()
    .return (rx414_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion" :subid("cuid_98_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 279
    .param pmc self 
    $P5001 = self."!protoregex"("assertion")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_99_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 281
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_100_1381281822.05887' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx416_start
    .local string rx416_tgt
    .local int rx416_pos
    .local int rx416_off
    .local int rx416_eos
    .local int rx416_rep
    .local pmc rx416_cur
    .local pmc rx416_curclass
    .local pmc rx416_bstack
    .local pmc rx416_cstack
    rx416_start = self."!cursor_start_all"()
    set rx416_cur, rx416_start[0]
    set rx416_tgt, rx416_start[1]
    set rx416_pos, rx416_start[2]
    set rx416_curclass, rx416_start[3]
    set rx416_bstack, rx416_start[4]
    set $I19, rx416_start[5]
    store_lex unicode:"$\x{a2}", rx416_cur
    length rx416_eos, rx416_tgt
    eq $I19, 1, rx416_restart1298
    gt rx416_pos, rx416_eos, rx416_fail1299
    repr_get_attr_int $I11, self, rx416_curclass, "$!from"
    ne $I11, -1, rxscan417_done1305
    goto rxscan417_scan1304
  rxscan417_loop1303:
    inc rx416_pos
    gt rx416_pos, rx416_eos, rx416_fail1299
    repr_bind_attr_int rx416_cur, rx416_curclass, "$!from", rx416_pos
  rxscan417_scan1304:
    nqp_rxmark rx416_bstack, rxscan417_loop1303, rx416_pos, 0
  rxscan417_done1305:
    add $I11, rx416_pos, 1
    gt $I11, rx416_eos, rx416_fail1299
    substr $S10, rx416_tgt, rx416_pos, 1
    ne $S10, ucs4:"?", rx416_fail1299
    add rx416_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt418_01307
    nqp_push_label $P11, alt418_11318
    nqp_rxmark rx416_bstack, alt418_end1306, -1, 0
    rx416_cur."!alt"(rx416_pos, "alt_nfa__19_1381281823.28521", $P11)
    goto rx416_fail1299
  alt418_01307:
    .const 'Sub' $P5001 = 'cuid_100_1381281822.05887' 
    capture_lex $P5001
    repr_bind_attr_int rx416_cur, rx416_curclass, "$!pos", rx416_pos
    $P11 = rx416_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx416_curclass, "$!pos"
    lt $I11, 0, rx416_fail1299
    goto alt418_end1306
  alt418_11318:
    repr_bind_attr_int rx416_cur, rx416_curclass, "$!pos", rx416_pos
    $P11 = rx416_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx416_curclass, "$!pos"
    lt $I11, 0, rx416_fail1299
    nqp_rxmark rx416_bstack, rxsubrule421_pass1319, -1, 0
  rxsubrule421_pass1319:
    rx416_cstack = rx416_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx416_pos, $P11, rx416_curclass, "$!pos"
    goto alt418_end1306
  alt418_end1306:
    nqp_rxcommit rx416_bstack, alt418_end1306
    rx416_cur."!cursor_pass"(rx416_pos, "assertion:sym<?>", 'backtrack'=>1)
    .return (rx416_cur)
  rx416_restart1298:
    repr_get_attr_obj rx416_cstack, rx416_cur, rx416_curclass, "$!cstack"
  rx416_fail1299:
    unless rx416_bstack, rx416_done1297
    pop $I19, rx416_bstack
    if_null rx416_cstack, rx416_cstack_done1302
    unless rx416_cstack, rx416_cstack_done1302
    dec $I19
    set $P11, rx416_cstack[$I19]
  rx416_cstack_done1302:
    pop rx416_rep, rx416_bstack
    pop rx416_pos, rx416_bstack
    pop $I19, rx416_bstack
    lt rx416_pos, -1, rx416_done1297
    lt rx416_pos, 0, rx416_fail1299
    eq $I19, 0, rx416_fail1299
    nqp_islist $I20, rx416_cstack
    unless $I20, rx416_jump1300
    elements $I18, rx416_bstack
    le $I18, 0, rx416_cut1301
    dec $I18
    set $I18, rx416_bstack[$I18]
  rx416_cut1301:
    assign rx416_cstack, $I18
  rx416_jump1300:
    jump $I19
  rx416_done1297:
    rx416_cur."!cursor_fail"()
    .return (rx416_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_100_1381281822.05887") :anon :lex :outer("cuid_99_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx419_start
    .local string rx419_tgt
    .local int rx419_pos
    .local int rx419_off
    .local int rx419_eos
    .local int rx419_rep
    .local pmc rx419_cur
    .local pmc rx419_curclass
    .local pmc rx419_bstack
    .local pmc rx419_cstack
    rx419_start = self."!cursor_start_all"()
    set rx419_cur, rx419_start[0]
    set rx419_tgt, rx419_start[1]
    set rx419_pos, rx419_start[2]
    set rx419_curclass, rx419_start[3]
    set rx419_bstack, rx419_start[4]
    set $I19, rx419_start[5]
    store_lex unicode:"$\x{a2}", rx419_cur
    length rx419_eos, rx419_tgt
    eq $I19, 1, rx419_restart1310
    gt rx419_pos, rx419_eos, rx419_fail1311
    repr_get_attr_int $I11, self, rx419_curclass, "$!from"
    ne $I11, -1, rxscan420_done1317
    goto rxscan420_scan1316
  rxscan420_loop1315:
    inc rx419_pos
    gt rx419_pos, rx419_eos, rx419_fail1311
    repr_bind_attr_int rx419_cur, rx419_curclass, "$!from", rx419_pos
  rxscan420_scan1316:
    nqp_rxmark rx419_bstack, rxscan420_loop1315, rx419_pos, 0
  rxscan420_done1317:
    add $I11, rx419_pos, 1
    gt $I11, rx419_eos, rx419_fail1311
    substr $S10, rx419_tgt, rx419_pos, 1
    ne $S10, ucs4:">", rx419_fail1311
    add rx419_pos, 1
    rx419_cur."!cursor_pass"(rx419_pos, 'backtrack'=>1)
    .return (rx419_cur)
  rx419_restart1310:
    repr_get_attr_obj rx419_cstack, rx419_cur, rx419_curclass, "$!cstack"
  rx419_fail1311:
    unless rx419_bstack, rx419_done1309
    pop $I19, rx419_bstack
    if_null rx419_cstack, rx419_cstack_done1314
    unless rx419_cstack, rx419_cstack_done1314
    dec $I19
    set $P11, rx419_cstack[$I19]
  rx419_cstack_done1314:
    pop rx419_rep, rx419_bstack
    pop rx419_pos, rx419_bstack
    pop $I19, rx419_bstack
    lt rx419_pos, -1, rx419_done1309
    lt rx419_pos, 0, rx419_fail1311
    eq $I19, 0, rx419_fail1311
    nqp_islist $I20, rx419_cstack
    unless $I20, rx419_jump1312
    elements $I18, rx419_bstack
    le $I18, 0, rx419_cut1313
    dec $I18
    set $I18, rx419_bstack[$I18]
  rx419_cut1313:
    assign rx419_cstack, $I18
  rx419_jump1312:
    jump $I19
  rx419_done1309:
    rx419_cur."!cursor_fail"()
    .return (rx419_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_101_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 282
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_102_1381281822.05887' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx422_start
    .local string rx422_tgt
    .local int rx422_pos
    .local int rx422_off
    .local int rx422_eos
    .local int rx422_rep
    .local pmc rx422_cur
    .local pmc rx422_curclass
    .local pmc rx422_bstack
    .local pmc rx422_cstack
    rx422_start = self."!cursor_start_all"()
    set rx422_cur, rx422_start[0]
    set rx422_tgt, rx422_start[1]
    set rx422_pos, rx422_start[2]
    set rx422_curclass, rx422_start[3]
    set rx422_bstack, rx422_start[4]
    set $I19, rx422_start[5]
    store_lex unicode:"$\x{a2}", rx422_cur
    length rx422_eos, rx422_tgt
    eq $I19, 1, rx422_restart1322
    gt rx422_pos, rx422_eos, rx422_fail1323
    repr_get_attr_int $I11, self, rx422_curclass, "$!from"
    ne $I11, -1, rxscan423_done1329
    goto rxscan423_scan1328
  rxscan423_loop1327:
    inc rx422_pos
    gt rx422_pos, rx422_eos, rx422_fail1323
    repr_bind_attr_int rx422_cur, rx422_curclass, "$!from", rx422_pos
  rxscan423_scan1328:
    nqp_rxmark rx422_bstack, rxscan423_loop1327, rx422_pos, 0
  rxscan423_done1329:
    add $I11, rx422_pos, 1
    gt $I11, rx422_eos, rx422_fail1323
    substr $S10, rx422_tgt, rx422_pos, 1
    ne $S10, ucs4:"!", rx422_fail1323
    add rx422_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt424_01331
    nqp_push_label $P11, alt424_11342
    nqp_rxmark rx422_bstack, alt424_end1330, -1, 0
    rx422_cur."!alt"(rx422_pos, "alt_nfa__20_1381281823.29981", $P11)
    goto rx422_fail1323
  alt424_01331:
    .const 'Sub' $P5001 = 'cuid_102_1381281822.05887' 
    capture_lex $P5001
    repr_bind_attr_int rx422_cur, rx422_curclass, "$!pos", rx422_pos
    $P11 = rx422_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx422_curclass, "$!pos"
    lt $I11, 0, rx422_fail1323
    goto alt424_end1330
  alt424_11342:
    repr_bind_attr_int rx422_cur, rx422_curclass, "$!pos", rx422_pos
    $P11 = rx422_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx422_curclass, "$!pos"
    lt $I11, 0, rx422_fail1323
    nqp_rxmark rx422_bstack, rxsubrule427_pass1343, -1, 0
  rxsubrule427_pass1343:
    rx422_cstack = rx422_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx422_pos, $P11, rx422_curclass, "$!pos"
    goto alt424_end1330
  alt424_end1330:
    nqp_rxcommit rx422_bstack, alt424_end1330
    rx422_cur."!cursor_pass"(rx422_pos, "assertion:sym<!>", 'backtrack'=>1)
    .return (rx422_cur)
  rx422_restart1322:
    repr_get_attr_obj rx422_cstack, rx422_cur, rx422_curclass, "$!cstack"
  rx422_fail1323:
    unless rx422_bstack, rx422_done1321
    pop $I19, rx422_bstack
    if_null rx422_cstack, rx422_cstack_done1326
    unless rx422_cstack, rx422_cstack_done1326
    dec $I19
    set $P11, rx422_cstack[$I19]
  rx422_cstack_done1326:
    pop rx422_rep, rx422_bstack
    pop rx422_pos, rx422_bstack
    pop $I19, rx422_bstack
    lt rx422_pos, -1, rx422_done1321
    lt rx422_pos, 0, rx422_fail1323
    eq $I19, 0, rx422_fail1323
    nqp_islist $I20, rx422_cstack
    unless $I20, rx422_jump1324
    elements $I18, rx422_bstack
    le $I18, 0, rx422_cut1325
    dec $I18
    set $I18, rx422_bstack[$I18]
  rx422_cut1325:
    assign rx422_cstack, $I18
  rx422_jump1324:
    jump $I19
  rx422_done1321:
    rx422_cur."!cursor_fail"()
    .return (rx422_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_102_1381281822.05887") :anon :lex :outer("cuid_101_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx425_start
    .local string rx425_tgt
    .local int rx425_pos
    .local int rx425_off
    .local int rx425_eos
    .local int rx425_rep
    .local pmc rx425_cur
    .local pmc rx425_curclass
    .local pmc rx425_bstack
    .local pmc rx425_cstack
    rx425_start = self."!cursor_start_all"()
    set rx425_cur, rx425_start[0]
    set rx425_tgt, rx425_start[1]
    set rx425_pos, rx425_start[2]
    set rx425_curclass, rx425_start[3]
    set rx425_bstack, rx425_start[4]
    set $I19, rx425_start[5]
    store_lex unicode:"$\x{a2}", rx425_cur
    length rx425_eos, rx425_tgt
    eq $I19, 1, rx425_restart1334
    gt rx425_pos, rx425_eos, rx425_fail1335
    repr_get_attr_int $I11, self, rx425_curclass, "$!from"
    ne $I11, -1, rxscan426_done1341
    goto rxscan426_scan1340
  rxscan426_loop1339:
    inc rx425_pos
    gt rx425_pos, rx425_eos, rx425_fail1335
    repr_bind_attr_int rx425_cur, rx425_curclass, "$!from", rx425_pos
  rxscan426_scan1340:
    nqp_rxmark rx425_bstack, rxscan426_loop1339, rx425_pos, 0
  rxscan426_done1341:
    add $I11, rx425_pos, 1
    gt $I11, rx425_eos, rx425_fail1335
    substr $S10, rx425_tgt, rx425_pos, 1
    ne $S10, ucs4:">", rx425_fail1335
    add rx425_pos, 1
    rx425_cur."!cursor_pass"(rx425_pos, 'backtrack'=>1)
    .return (rx425_cur)
  rx425_restart1334:
    repr_get_attr_obj rx425_cstack, rx425_cur, rx425_curclass, "$!cstack"
  rx425_fail1335:
    unless rx425_bstack, rx425_done1333
    pop $I19, rx425_bstack
    if_null rx425_cstack, rx425_cstack_done1338
    unless rx425_cstack, rx425_cstack_done1338
    dec $I19
    set $P11, rx425_cstack[$I19]
  rx425_cstack_done1338:
    pop rx425_rep, rx425_bstack
    pop rx425_pos, rx425_bstack
    pop $I19, rx425_bstack
    lt rx425_pos, -1, rx425_done1333
    lt rx425_pos, 0, rx425_fail1335
    eq $I19, 0, rx425_fail1335
    nqp_islist $I20, rx425_cstack
    unless $I20, rx425_jump1336
    elements $I18, rx425_bstack
    le $I18, 0, rx425_cut1337
    dec $I18
    set $I18, rx425_bstack[$I18]
  rx425_cut1337:
    assign rx425_cstack, $I18
  rx425_jump1336:
    jump $I19
  rx425_done1333:
    rx425_cur."!cursor_fail"()
    .return (rx425_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<|>" :subid("cuid_103_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 283
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx428_start
    .local string rx428_tgt
    .local int rx428_pos
    .local int rx428_off
    .local int rx428_eos
    .local int rx428_rep
    .local pmc rx428_cur
    .local pmc rx428_curclass
    .local pmc rx428_bstack
    .local pmc rx428_cstack
    rx428_start = self."!cursor_start_all"()
    set rx428_cur, rx428_start[0]
    set rx428_tgt, rx428_start[1]
    set rx428_pos, rx428_start[2]
    set rx428_curclass, rx428_start[3]
    set rx428_bstack, rx428_start[4]
    set $I19, rx428_start[5]
    store_lex unicode:"$\x{a2}", rx428_cur
    length rx428_eos, rx428_tgt
    eq $I19, 1, rx428_restart1346
    gt rx428_pos, rx428_eos, rx428_fail1347
    repr_get_attr_int $I11, self, rx428_curclass, "$!from"
    ne $I11, -1, rxscan429_done1353
    goto rxscan429_scan1352
  rxscan429_loop1351:
    inc rx428_pos
    gt rx428_pos, rx428_eos, rx428_fail1347
    repr_bind_attr_int rx428_cur, rx428_curclass, "$!from", rx428_pos
  rxscan429_scan1352:
    nqp_rxmark rx428_bstack, rxscan429_loop1351, rx428_pos, 0
  rxscan429_done1353:
    add $I11, rx428_pos, 1
    gt $I11, rx428_eos, rx428_fail1347
    substr $S10, rx428_tgt, rx428_pos, 1
    ne $S10, ucs4:"|", rx428_fail1347
    add rx428_pos, 1
    repr_bind_attr_int rx428_cur, rx428_curclass, "$!pos", rx428_pos
    $P11 = rx428_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx428_curclass, "$!pos"
    lt $I11, 0, rx428_fail1347
    nqp_rxmark rx428_bstack, rxsubrule430_pass1354, -1, 0
  rxsubrule430_pass1354:
    rx428_cstack = rx428_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx428_pos, $P11, rx428_curclass, "$!pos"
    rx428_cur."!cursor_pass"(rx428_pos, "assertion:sym<|>", 'backtrack'=>1)
    .return (rx428_cur)
  rx428_restart1346:
    repr_get_attr_obj rx428_cstack, rx428_cur, rx428_curclass, "$!cstack"
  rx428_fail1347:
    unless rx428_bstack, rx428_done1345
    pop $I19, rx428_bstack
    if_null rx428_cstack, rx428_cstack_done1350
    unless rx428_cstack, rx428_cstack_done1350
    dec $I19
    set $P11, rx428_cstack[$I19]
  rx428_cstack_done1350:
    pop rx428_rep, rx428_bstack
    pop rx428_pos, rx428_bstack
    pop $I19, rx428_bstack
    lt rx428_pos, -1, rx428_done1345
    lt rx428_pos, 0, rx428_fail1347
    eq $I19, 0, rx428_fail1347
    nqp_islist $I20, rx428_cstack
    unless $I20, rx428_jump1348
    elements $I18, rx428_bstack
    le $I18, 0, rx428_cut1349
    dec $I18
    set $I18, rx428_bstack[$I18]
  rx428_cut1349:
    assign rx428_cstack, $I18
  rx428_jump1348:
    jump $I19
  rx428_done1345:
    rx428_cur."!cursor_fail"()
    .return (rx428_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<method>" :subid("cuid_104_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 285
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx431_start
    .local string rx431_tgt
    .local int rx431_pos
    .local int rx431_off
    .local int rx431_eos
    .local int rx431_rep
    .local pmc rx431_cur
    .local pmc rx431_curclass
    .local pmc rx431_bstack
    .local pmc rx431_cstack
    rx431_start = self."!cursor_start_all"()
    set rx431_cur, rx431_start[0]
    set rx431_tgt, rx431_start[1]
    set rx431_pos, rx431_start[2]
    set rx431_curclass, rx431_start[3]
    set rx431_bstack, rx431_start[4]
    set $I19, rx431_start[5]
    store_lex unicode:"$\x{a2}", rx431_cur
    length rx431_eos, rx431_tgt
    eq $I19, 1, rx431_restart1357
    gt rx431_pos, rx431_eos, rx431_fail1358
    repr_get_attr_int $I11, self, rx431_curclass, "$!from"
    ne $I11, -1, rxscan432_done1364
    goto rxscan432_scan1363
  rxscan432_loop1362:
    inc rx431_pos
    gt rx431_pos, rx431_eos, rx431_fail1358
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!from", rx431_pos
  rxscan432_scan1363:
    nqp_rxmark rx431_bstack, rxscan432_loop1362, rx431_pos, 0
  rxscan432_done1364:
    add $I11, rx431_pos, 1
    gt $I11, rx431_eos, rx431_fail1358
    substr $S10, rx431_tgt, rx431_pos, 1
    ne $S10, ucs4:".", rx431_fail1358
    add rx431_pos, 1
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail1358
    nqp_rxmark rx431_bstack, rxsubrule433_pass1365, -1, 0
  rxsubrule433_pass1365:
    rx431_cstack = rx431_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    rx431_cur."!cursor_pass"(rx431_pos, "assertion:sym<method>", 'backtrack'=>1)
    .return (rx431_cur)
  rx431_restart1357:
    repr_get_attr_obj rx431_cstack, rx431_cur, rx431_curclass, "$!cstack"
  rx431_fail1358:
    unless rx431_bstack, rx431_done1356
    pop $I19, rx431_bstack
    if_null rx431_cstack, rx431_cstack_done1361
    unless rx431_cstack, rx431_cstack_done1361
    dec $I19
    set $P11, rx431_cstack[$I19]
  rx431_cstack_done1361:
    pop rx431_rep, rx431_bstack
    pop rx431_pos, rx431_bstack
    pop $I19, rx431_bstack
    lt rx431_pos, -1, rx431_done1356
    lt rx431_pos, 0, rx431_fail1358
    eq $I19, 0, rx431_fail1358
    nqp_islist $I20, rx431_cstack
    unless $I20, rx431_jump1359
    elements $I18, rx431_bstack
    le $I18, 0, rx431_cut1360
    dec $I18
    set $I18, rx431_bstack[$I18]
  rx431_cut1360:
    assign rx431_cstack, $I18
  rx431_jump1359:
    jump $I19
  rx431_done1356:
    rx431_cur."!cursor_fail"()
    .return (rx431_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_105_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 289
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_106_1381281822.05887' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx434_start
    .local string rx434_tgt
    .local int rx434_pos
    .local int rx434_off
    .local int rx434_eos
    .local int rx434_rep
    .local pmc rx434_cur
    .local pmc rx434_curclass
    .local pmc rx434_bstack
    .local pmc rx434_cstack
    rx434_start = self."!cursor_start_all"()
    set rx434_cur, rx434_start[0]
    set rx434_tgt, rx434_start[1]
    set rx434_pos, rx434_start[2]
    set rx434_curclass, rx434_start[3]
    set rx434_bstack, rx434_start[4]
    set $I19, rx434_start[5]
    store_lex unicode:"$\x{a2}", rx434_cur
    length rx434_eos, rx434_tgt
    eq $I19, 1, rx434_restart1368
    gt rx434_pos, rx434_eos, rx434_fail1369
    repr_get_attr_int $I11, self, rx434_curclass, "$!from"
    ne $I11, -1, rxscan435_done1375
    goto rxscan435_scan1374
  rxscan435_loop1373:
    inc rx434_pos
    gt rx434_pos, rx434_eos, rx434_fail1369
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!from", rx434_pos
  rxscan435_scan1374:
    nqp_rxmark rx434_bstack, rxscan435_loop1373, rx434_pos, 0
  rxscan435_done1375:
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    lt $I11, 0, rx434_fail1369
    nqp_rxmark rx434_bstack, rxsubrule436_pass1376, -1, 0
  rxsubrule436_pass1376:
    rx434_cstack = rx434_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx434_pos, $P11, rx434_curclass, "$!pos"
    nqp_rxmark rx434_bstack, rxquantr437_done1378, rx434_pos, 0
  rxquantr437_loop1377:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt438_01380
    nqp_push_label $P11, alt438_11391
    nqp_push_label $P11, alt438_21393
    nqp_push_label $P11, alt438_31395
    nqp_push_label $P11, alt438_41397
    nqp_rxmark rx434_bstack, alt438_end1379, -1, 0
    rx434_cur."!alt"(rx434_pos, "alt_nfa__21_1381281823.43465", $P11)
    goto rx434_fail1369
  alt438_01380:
    .const 'Sub' $P5001 = 'cuid_106_1381281822.05887' 
    capture_lex $P5001
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    lt $I11, 0, rx434_fail1369
    goto alt438_end1379
  alt438_11391:
    add $I11, rx434_pos, 1
    gt $I11, rx434_eos, rx434_fail1369
    substr $S10, rx434_tgt, rx434_pos, 1
    ne $S10, ucs4:"=", rx434_fail1369
    add rx434_pos, 1
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    lt $I11, 0, rx434_fail1369
    nqp_rxmark rx434_bstack, rxsubrule441_pass1392, -1, 0
  rxsubrule441_pass1392:
    rx434_cstack = rx434_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx434_pos, $P11, rx434_curclass, "$!pos"
    goto alt438_end1379
  alt438_21393:
    add $I11, rx434_pos, 1
    gt $I11, rx434_eos, rx434_fail1369
    substr $S10, rx434_tgt, rx434_pos, 1
    ne $S10, ucs4:":", rx434_fail1369
    add rx434_pos, 1
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    lt $I11, 0, rx434_fail1369
    nqp_rxmark rx434_bstack, rxsubrule442_pass1394, -1, 0
  rxsubrule442_pass1394:
    rx434_cstack = rx434_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx434_pos, $P11, rx434_curclass, "$!pos"
    goto alt438_end1379
  alt438_31395:
    add $I11, rx434_pos, 1
    gt $I11, rx434_eos, rx434_fail1369
    substr $S10, rx434_tgt, rx434_pos, 1
    ne $S10, ucs4:"(", rx434_fail1369
    add rx434_pos, 1
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    lt $I11, 0, rx434_fail1369
    nqp_rxmark rx434_bstack, rxsubrule443_pass1396, -1, 0
  rxsubrule443_pass1396:
    rx434_cstack = rx434_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx434_pos, $P11, rx434_curclass, "$!pos"
    add $I11, rx434_pos, 1
    gt $I11, rx434_eos, rx434_fail1369
    substr $S10, rx434_tgt, rx434_pos, 1
    ne $S10, ucs4:")", rx434_fail1369
    add rx434_pos, 1
    goto alt438_end1379
  alt438_41397:
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    lt $I11, 0, rx434_fail1369
    repr_get_attr_int rx434_pos, $P11, rx434_curclass, "$!pos"
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    lt $I11, 0, rx434_fail1369
    nqp_rxmark rx434_bstack, rxsubrule445_pass1399, -1, 0
  rxsubrule445_pass1399:
    rx434_cstack = rx434_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx434_pos, $P11, rx434_curclass, "$!pos"
    goto alt438_end1379
  alt438_end1379:
    nqp_rxpeek $I19, rx434_bstack, rxquantr437_done1378
    inc $I19
    inc $I19
    set rx434_rep, rx434_bstack[$I19]
    nqp_rxcommit rx434_bstack, rxquantr437_done1378
    inc rx434_rep
  rxquantr437_done1378:
    rx434_cur."!cursor_pass"(rx434_pos, "assertion:sym<name>", 'backtrack'=>1)
    .return (rx434_cur)
  rx434_restart1368:
    repr_get_attr_obj rx434_cstack, rx434_cur, rx434_curclass, "$!cstack"
  rx434_fail1369:
    unless rx434_bstack, rx434_done1367
    pop $I19, rx434_bstack
    if_null rx434_cstack, rx434_cstack_done1372
    unless rx434_cstack, rx434_cstack_done1372
    dec $I19
    set $P11, rx434_cstack[$I19]
  rx434_cstack_done1372:
    pop rx434_rep, rx434_bstack
    pop rx434_pos, rx434_bstack
    pop $I19, rx434_bstack
    lt rx434_pos, -1, rx434_done1367
    lt rx434_pos, 0, rx434_fail1369
    eq $I19, 0, rx434_fail1369
    nqp_islist $I20, rx434_cstack
    unless $I20, rx434_jump1370
    elements $I18, rx434_bstack
    le $I18, 0, rx434_cut1371
    dec $I18
    set $I18, rx434_bstack[$I18]
  rx434_cut1371:
    assign rx434_cstack, $I18
  rx434_jump1370:
    jump $I19
  rx434_done1367:
    rx434_cur."!cursor_fail"()
    .return (rx434_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_106_1381281822.05887") :anon :lex :outer("cuid_105_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx439_start
    .local string rx439_tgt
    .local int rx439_pos
    .local int rx439_off
    .local int rx439_eos
    .local int rx439_rep
    .local pmc rx439_cur
    .local pmc rx439_curclass
    .local pmc rx439_bstack
    .local pmc rx439_cstack
    rx439_start = self."!cursor_start_all"()
    set rx439_cur, rx439_start[0]
    set rx439_tgt, rx439_start[1]
    set rx439_pos, rx439_start[2]
    set rx439_curclass, rx439_start[3]
    set rx439_bstack, rx439_start[4]
    set $I19, rx439_start[5]
    store_lex unicode:"$\x{a2}", rx439_cur
    length rx439_eos, rx439_tgt
    eq $I19, 1, rx439_restart1383
    gt rx439_pos, rx439_eos, rx439_fail1384
    repr_get_attr_int $I11, self, rx439_curclass, "$!from"
    ne $I11, -1, rxscan440_done1390
    goto rxscan440_scan1389
  rxscan440_loop1388:
    inc rx439_pos
    gt rx439_pos, rx439_eos, rx439_fail1384
    repr_bind_attr_int rx439_cur, rx439_curclass, "$!from", rx439_pos
  rxscan440_scan1389:
    nqp_rxmark rx439_bstack, rxscan440_loop1388, rx439_pos, 0
  rxscan440_done1390:
    add $I11, rx439_pos, 1
    gt $I11, rx439_eos, rx439_fail1384
    substr $S10, rx439_tgt, rx439_pos, 1
    ne $S10, ucs4:">", rx439_fail1384
    add rx439_pos, 1
    rx439_cur."!cursor_pass"(rx439_pos, 'backtrack'=>1)
    .return (rx439_cur)
  rx439_restart1383:
    repr_get_attr_obj rx439_cstack, rx439_cur, rx439_curclass, "$!cstack"
  rx439_fail1384:
    unless rx439_bstack, rx439_done1382
    pop $I19, rx439_bstack
    if_null rx439_cstack, rx439_cstack_done1387
    unless rx439_cstack, rx439_cstack_done1387
    dec $I19
    set $P11, rx439_cstack[$I19]
  rx439_cstack_done1387:
    pop rx439_rep, rx439_bstack
    pop rx439_pos, rx439_bstack
    pop $I19, rx439_bstack
    lt rx439_pos, -1, rx439_done1382
    lt rx439_pos, 0, rx439_fail1384
    eq $I19, 0, rx439_fail1384
    nqp_islist $I20, rx439_cstack
    unless $I20, rx439_jump1385
    elements $I18, rx439_bstack
    le $I18, 0, rx439_cut1386
    dec $I18
    set $I18, rx439_bstack[$I18]
  rx439_cut1386:
    assign rx439_cstack, $I18
  rx439_jump1385:
    jump $I19
  rx439_done1382:
    rx439_cur."!cursor_fail"()
    .return (rx439_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<[>" :subid("cuid_107_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 300
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_108_1381281822.05887' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx446_start
    .local string rx446_tgt
    .local int rx446_pos
    .local int rx446_off
    .local int rx446_eos
    .local int rx446_rep
    .local pmc rx446_cur
    .local pmc rx446_curclass
    .local pmc rx446_bstack
    .local pmc rx446_cstack
    rx446_start = self."!cursor_start_all"()
    set rx446_cur, rx446_start[0]
    set rx446_tgt, rx446_start[1]
    set rx446_pos, rx446_start[2]
    set rx446_curclass, rx446_start[3]
    set rx446_bstack, rx446_start[4]
    set $I19, rx446_start[5]
    store_lex unicode:"$\x{a2}", rx446_cur
    length rx446_eos, rx446_tgt
    eq $I19, 1, rx446_restart1402
    gt rx446_pos, rx446_eos, rx446_fail1403
    repr_get_attr_int $I11, self, rx446_curclass, "$!from"
    ne $I11, -1, rxscan447_done1409
    goto rxscan447_scan1408
  rxscan447_loop1407:
    inc rx446_pos
    gt rx446_pos, rx446_eos, rx446_fail1403
    repr_bind_attr_int rx446_cur, rx446_curclass, "$!from", rx446_pos
  rxscan447_scan1408:
    nqp_rxmark rx446_bstack, rxscan447_loop1407, rx446_pos, 0
  rxscan447_done1409:
    .const 'Sub' $P5001 = 'cuid_108_1381281822.05887' 
    capture_lex $P5001
    repr_bind_attr_int rx446_cur, rx446_curclass, "$!pos", rx446_pos
    $P11 = rx446_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx446_curclass, "$!pos"
    lt $I11, 0, rx446_fail1403
    nqp_rxmark rx446_bstack, rxquantr451_done1426, -1, 0
  rxquantr451_loop1425:
    repr_bind_attr_int rx446_cur, rx446_curclass, "$!pos", rx446_pos
    $P11 = rx446_cur."cclass_elem"()
    repr_get_attr_int $I11, $P11, rx446_curclass, "$!pos"
    lt $I11, 0, rx446_fail1403
    goto rxsubrule452_pass1427
  rxsubrule452_back1428:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx446_curclass, "$!pos"
    lt $I11, 0, rx446_fail1403
  rxsubrule452_pass1427:
    rx446_cstack = rx446_cur."!cursor_capture"($P11, "cclass_elem")
    set_addr $I11, rxsubrule452_back1428
    push rx446_bstack, $I11
    push rx446_bstack, 0
    push rx446_bstack, rx446_pos
    elements $I11, rx446_cstack
    push rx446_bstack, $I11
    repr_get_attr_int rx446_pos, $P11, rx446_curclass, "$!pos"
    nqp_rxpeek $I19, rx446_bstack, rxquantr451_done1426
    inc $I19
    inc $I19
    set rx446_rep, rx446_bstack[$I19]
    nqp_rxcommit rx446_bstack, rxquantr451_done1426
    inc rx446_rep
    nqp_rxmark rx446_bstack, rxquantr451_done1426, rx446_pos, rx446_rep
    goto rxquantr451_loop1425
  rxquantr451_done1426:
    rx446_cur."!cursor_pass"(rx446_pos, "assertion:sym<[>", 'backtrack'=>1)
    .return (rx446_cur)
  rx446_restart1402:
    repr_get_attr_obj rx446_cstack, rx446_cur, rx446_curclass, "$!cstack"
  rx446_fail1403:
    unless rx446_bstack, rx446_done1401
    pop $I19, rx446_bstack
    if_null rx446_cstack, rx446_cstack_done1406
    unless rx446_cstack, rx446_cstack_done1406
    dec $I19
    set $P11, rx446_cstack[$I19]
  rx446_cstack_done1406:
    pop rx446_rep, rx446_bstack
    pop rx446_pos, rx446_bstack
    pop $I19, rx446_bstack
    lt rx446_pos, -1, rx446_done1401
    lt rx446_pos, 0, rx446_fail1403
    eq $I19, 0, rx446_fail1403
    nqp_islist $I20, rx446_cstack
    unless $I20, rx446_jump1404
    elements $I18, rx446_bstack
    le $I18, 0, rx446_cut1405
    dec $I18
    set $I18, rx446_bstack[$I18]
  rx446_cut1405:
    assign rx446_cstack, $I18
  rx446_jump1404:
    jump $I19
  rx446_done1401:
    rx446_cur."!cursor_fail"()
    .return (rx446_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_108_1381281822.05887") :anon :lex :outer("cuid_107_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx448_start
    .local string rx448_tgt
    .local int rx448_pos
    .local int rx448_off
    .local int rx448_eos
    .local int rx448_rep
    .local pmc rx448_cur
    .local pmc rx448_curclass
    .local pmc rx448_bstack
    .local pmc rx448_cstack
    rx448_start = self."!cursor_start_all"()
    set rx448_cur, rx448_start[0]
    set rx448_tgt, rx448_start[1]
    set rx448_pos, rx448_start[2]
    set rx448_curclass, rx448_start[3]
    set rx448_bstack, rx448_start[4]
    set $I19, rx448_start[5]
    store_lex unicode:"$\x{a2}", rx448_cur
    length rx448_eos, rx448_tgt
    eq $I19, 1, rx448_restart1412
    gt rx448_pos, rx448_eos, rx448_fail1413
    repr_get_attr_int $I11, self, rx448_curclass, "$!from"
    ne $I11, -1, rxscan449_done1419
    goto rxscan449_scan1418
  rxscan449_loop1417:
    inc rx448_pos
    gt rx448_pos, rx448_eos, rx448_fail1413
    repr_bind_attr_int rx448_cur, rx448_curclass, "$!from", rx448_pos
  rxscan449_scan1418:
    nqp_rxmark rx448_bstack, rxscan449_loop1417, rx448_pos, 0
  rxscan449_done1419:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt450_01421
    nqp_push_label $P11, alt450_11422
    nqp_push_label $P11, alt450_21423
    nqp_push_label $P11, alt450_31424
    nqp_rxmark rx448_bstack, alt450_end1420, -1, 0
    rx448_cur."!alt"(rx448_pos, "alt_nfa__22_1381281823.44468", $P11)
    goto rx448_fail1413
  alt450_01421:
    add $I11, rx448_pos, 1
    gt $I11, rx448_eos, rx448_fail1413
    substr $S10, rx448_tgt, rx448_pos, 1
    ne $S10, ucs4:"[", rx448_fail1413
    add rx448_pos, 1
    goto alt450_end1420
  alt450_11422:
    add $I11, rx448_pos, 1
    gt $I11, rx448_eos, rx448_fail1413
    substr $S10, rx448_tgt, rx448_pos, 1
    ne $S10, ucs4:"+", rx448_fail1413
    add rx448_pos, 1
    goto alt450_end1420
  alt450_21423:
    add $I11, rx448_pos, 1
    gt $I11, rx448_eos, rx448_fail1413
    substr $S10, rx448_tgt, rx448_pos, 1
    ne $S10, ucs4:"-", rx448_fail1413
    add rx448_pos, 1
    goto alt450_end1420
  alt450_31424:
    add $I11, rx448_pos, 1
    gt $I11, rx448_eos, rx448_fail1413
    substr $S10, rx448_tgt, rx448_pos, 1
    ne $S10, ucs4:":", rx448_fail1413
    add rx448_pos, 1
    goto alt450_end1420
  alt450_end1420:
    rx448_cur."!cursor_pass"(rx448_pos, 'backtrack'=>1)
    .return (rx448_cur)
  rx448_restart1412:
    repr_get_attr_obj rx448_cstack, rx448_cur, rx448_curclass, "$!cstack"
  rx448_fail1413:
    unless rx448_bstack, rx448_done1411
    pop $I19, rx448_bstack
    if_null rx448_cstack, rx448_cstack_done1416
    unless rx448_cstack, rx448_cstack_done1416
    dec $I19
    set $P11, rx448_cstack[$I19]
  rx448_cstack_done1416:
    pop rx448_rep, rx448_bstack
    pop rx448_pos, rx448_bstack
    pop $I19, rx448_bstack
    lt rx448_pos, -1, rx448_done1411
    lt rx448_pos, 0, rx448_fail1413
    eq $I19, 0, rx448_fail1413
    nqp_islist $I20, rx448_cstack
    unless $I20, rx448_jump1414
    elements $I18, rx448_bstack
    le $I18, 0, rx448_cut1415
    dec $I18
    set $I18, rx448_bstack[$I18]
  rx448_cut1415:
    assign rx448_cstack, $I18
  rx448_jump1414:
    jump $I19
  rx448_done1411:
    rx448_cur."!cursor_fail"()
    .return (rx448_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_elem" :subid("cuid_109_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 302
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_115_1381281822.05887' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx453_start
    .local string rx453_tgt
    .local int rx453_pos
    .local int rx453_off
    .local int rx453_eos
    .local int rx453_rep
    .local pmc rx453_cur
    .local pmc rx453_curclass
    .local pmc rx453_bstack
    .local pmc rx453_cstack
    rx453_start = self."!cursor_start_all"()
    set rx453_cur, rx453_start[0]
    set rx453_tgt, rx453_start[1]
    set rx453_pos, rx453_start[2]
    set rx453_curclass, rx453_start[3]
    set rx453_bstack, rx453_start[4]
    set $I19, rx453_start[5]
    store_lex unicode:"$\x{a2}", rx453_cur
    length rx453_eos, rx453_tgt
    eq $I19, 1, rx453_restart1431
    gt rx453_pos, rx453_eos, rx453_fail1432
    repr_get_attr_int $I11, self, rx453_curclass, "$!from"
    ne $I11, -1, rxscan454_done1438
    goto rxscan454_scan1437
  rxscan454_loop1436:
    inc rx453_pos
    gt rx453_pos, rx453_eos, rx453_fail1432
    repr_bind_attr_int rx453_cur, rx453_curclass, "$!from", rx453_pos
  rxscan454_scan1437:
    nqp_rxmark rx453_bstack, rxscan454_loop1436, rx453_pos, 0
  rxscan454_done1438:
    nqp_rxmark rx453_bstack, rxcap455_fail1440, rx453_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt456_01442
    nqp_push_label $P11, alt456_11443
    nqp_push_label $P11, alt456_21444
    nqp_rxmark rx453_bstack, alt456_end1441, -1, 0
    rx453_cur."!alt"(rx453_pos, "alt_nfa__23_1381281823.52192", $P11)
    goto rx453_fail1432
  alt456_01442:
    add $I11, rx453_pos, 1
    gt $I11, rx453_eos, rx453_fail1432
    substr $S10, rx453_tgt, rx453_pos, 1
    ne $S10, ucs4:"+", rx453_fail1432
    add rx453_pos, 1
    goto alt456_end1441
  alt456_11443:
    add $I11, rx453_pos, 1
    gt $I11, rx453_eos, rx453_fail1432
    substr $S10, rx453_tgt, rx453_pos, 1
    ne $S10, ucs4:"-", rx453_fail1432
    add rx453_pos, 1
    goto alt456_end1441
  alt456_21444:
    goto alt456_end1441
  alt456_end1441:
    nqp_rxcommit rx453_bstack, alt456_end1441
    nqp_rxpeek $I19, rx453_bstack, rxcap455_fail1440
    inc $I19
    set $I11, rx453_bstack[$I19]
    repr_bind_attr_int rx453_cur, rx453_curclass, "$!pos", rx453_pos
    $P11 = rx453_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx453_pos)
    rx453_cstack = rx453_cur."!cursor_capture"($P11, "sign")
    goto rxcap455_done1439
  rxcap455_fail1440:
    goto rx453_fail1432
  rxcap455_done1439:
    nqp_rxmark rx453_bstack, rxquantr458_done1447, rx453_pos, 0
  rxquantr458_loop1446:
    repr_bind_attr_int rx453_cur, rx453_curclass, "$!pos", rx453_pos
    $P11 = rx453_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx453_curclass, "$!pos"
    lt $I11, 0, rx453_fail1432
    goto rxsubrule459_pass1448
  rxsubrule459_back1449:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx453_curclass, "$!pos"
    lt $I11, 0, rx453_fail1432
  rxsubrule459_pass1448:
    rx453_cstack = rx453_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule459_back1449
    push rx453_bstack, $I11
    push rx453_bstack, 0
    push rx453_bstack, rx453_pos
    elements $I11, rx453_cstack
    push rx453_bstack, $I11
    repr_get_attr_int rx453_pos, $P11, rx453_curclass, "$!pos"
    nqp_rxpeek $I19, rx453_bstack, rxquantr458_done1447
    inc $I19
    inc $I19
    set rx453_rep, rx453_bstack[$I19]
    nqp_rxcommit rx453_bstack, rxquantr458_done1447
    inc rx453_rep
  rxquantr458_done1447:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt460_01451
    nqp_push_label $P11, alt460_11546
    nqp_push_label $P11, alt460_21551
    nqp_rxmark rx453_bstack, alt460_end1450, -1, 0
    rx453_cur."!alt"(rx453_pos, "alt_nfa__25_1381281823.52293", $P11)
    goto rx453_fail1432
  alt460_01451:
    add $I11, rx453_pos, 1
    gt $I11, rx453_eos, rx453_fail1432
    substr $S10, rx453_tgt, rx453_pos, 1
    ne $S10, ucs4:"[", rx453_fail1432
    add rx453_pos, 1
    nqp_rxmark rx453_bstack, rxquantr461_done1453, rx453_pos, 0
  rxquantr461_loop1452:
    .const 'Sub' $P5001 = 'cuid_115_1381281822.05887' 
    capture_lex $P5001
    repr_bind_attr_int rx453_cur, rx453_curclass, "$!pos", rx453_pos
    $P11 = rx453_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx453_curclass, "$!pos"
    lt $I11, 0, rx453_fail1432
    goto rxsubrule490_pass1542
  rxsubrule490_back1543:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx453_curclass, "$!pos"
    lt $I11, 0, rx453_fail1432
  rxsubrule490_pass1542:
    rx453_cstack = rx453_cur."!cursor_capture"($P11, "charspec")
    set_addr $I11, rxsubrule490_back1543
    push rx453_bstack, $I11
    push rx453_bstack, 0
    push rx453_bstack, rx453_pos
    elements $I11, rx453_cstack
    push rx453_bstack, $I11
    repr_get_attr_int rx453_pos, $P11, rx453_curclass, "$!pos"
    nqp_rxpeek $I19, rx453_bstack, rxquantr461_done1453
    inc $I19
    inc $I19
    set rx453_rep, rx453_bstack[$I19]
    nqp_rxcommit rx453_bstack, rxquantr461_done1453
    inc rx453_rep
    nqp_rxmark rx453_bstack, rxquantr461_done1453, rx453_pos, rx453_rep
    goto rxquantr461_loop1452
  rxquantr461_done1453:
    nqp_rxmark rx453_bstack, rxquantr491_done1545, rx453_pos, 0
  rxquantr491_loop1544:
    ge rx453_pos, rx453_eos, rx453_fail1432
    is_cclass $I11, .CCLASS_WHITESPACE, rx453_tgt, rx453_pos
    unless $I11, rx453_fail1432
    add rx453_pos, 1
    nqp_rxpeek $I19, rx453_bstack, rxquantr491_done1545
    inc $I19
    inc $I19
    set rx453_rep, rx453_bstack[$I19]
    nqp_rxcommit rx453_bstack, rxquantr491_done1545
    inc rx453_rep
    nqp_rxmark rx453_bstack, rxquantr491_done1545, rx453_pos, rx453_rep
    goto rxquantr491_loop1544
  rxquantr491_done1545:
    add $I11, rx453_pos, 1
    gt $I11, rx453_eos, rx453_fail1432
    substr $S10, rx453_tgt, rx453_pos, 1
    ne $S10, ucs4:"]", rx453_fail1432
    add rx453_pos, 1
    goto alt460_end1450
  alt460_11546:
    nqp_rxmark rx453_bstack, rxcap492_fail1548, rx453_pos, 0
    nqp_rxmark rx453_bstack, rxquantr493_done1550, -1, 0
  rxquantr493_loop1549:
    ge rx453_pos, rx453_eos, rx453_fail1432
    is_cclass $I11, .CCLASS_WORD, rx453_tgt, rx453_pos
    unless $I11, rx453_fail1432
    add rx453_pos, 1
    nqp_rxpeek $I19, rx453_bstack, rxquantr493_done1550
    inc $I19
    inc $I19
    set rx453_rep, rx453_bstack[$I19]
    nqp_rxcommit rx453_bstack, rxquantr493_done1550
    inc rx453_rep
    nqp_rxmark rx453_bstack, rxquantr493_done1550, rx453_pos, rx453_rep
    goto rxquantr493_loop1549
  rxquantr493_done1550:
    nqp_rxpeek $I19, rx453_bstack, rxcap492_fail1548
    inc $I19
    set $I11, rx453_bstack[$I19]
    repr_bind_attr_int rx453_cur, rx453_curclass, "$!pos", rx453_pos
    $P11 = rx453_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx453_pos)
    rx453_cstack = rx453_cur."!cursor_capture"($P11, "name")
    goto rxcap492_done1547
  rxcap492_fail1548:
    goto rx453_fail1432
  rxcap492_done1547:
    goto alt460_end1450
  alt460_21551:
    add $I11, rx453_pos, 1
    gt $I11, rx453_eos, rx453_fail1432
    substr $S10, rx453_tgt, rx453_pos, 1
    ne $S10, ucs4:":", rx453_fail1432
    add rx453_pos, 1
    nqp_rxmark rx453_bstack, rxcap494_fail1553, rx453_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt495_01555
    nqp_push_label $P11, alt495_11556
    nqp_rxmark rx453_bstack, alt495_end1554, -1, 0
    rx453_cur."!alt"(rx453_pos, "alt_nfa__24_1381281823.52261", $P11)
    goto rx453_fail1432
  alt495_01555:
    add $I11, rx453_pos, 1
    gt $I11, rx453_eos, rx453_fail1432
    substr $S10, rx453_tgt, rx453_pos, 1
    ne $S10, ucs4:"!", rx453_fail1432
    add rx453_pos, 1
    goto alt495_end1554
  alt495_11556:
    goto alt495_end1554
  alt495_end1554:
    nqp_rxcommit rx453_bstack, alt495_end1554
    nqp_rxpeek $I19, rx453_bstack, rxcap494_fail1553
    inc $I19
    set $I11, rx453_bstack[$I19]
    repr_bind_attr_int rx453_cur, rx453_curclass, "$!pos", rx453_pos
    $P11 = rx453_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx453_pos)
    rx453_cstack = rx453_cur."!cursor_capture"($P11, "invert")
    goto rxcap494_done1552
  rxcap494_fail1553:
    goto rx453_fail1432
  rxcap494_done1552:
    nqp_rxmark rx453_bstack, rxcap497_fail1559, rx453_pos, 0
    nqp_rxmark rx453_bstack, rxquantr498_done1561, -1, 0
  rxquantr498_loop1560:
    ge rx453_pos, rx453_eos, rx453_fail1432
    is_cclass $I11, .CCLASS_WORD, rx453_tgt, rx453_pos
    unless $I11, rx453_fail1432
    add rx453_pos, 1
    nqp_rxpeek $I19, rx453_bstack, rxquantr498_done1561
    inc $I19
    inc $I19
    set rx453_rep, rx453_bstack[$I19]
    nqp_rxcommit rx453_bstack, rxquantr498_done1561
    inc rx453_rep
    nqp_rxmark rx453_bstack, rxquantr498_done1561, rx453_pos, rx453_rep
    goto rxquantr498_loop1560
  rxquantr498_done1561:
    nqp_rxpeek $I19, rx453_bstack, rxcap497_fail1559
    inc $I19
    set $I11, rx453_bstack[$I19]
    repr_bind_attr_int rx453_cur, rx453_curclass, "$!pos", rx453_pos
    $P11 = rx453_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx453_pos)
    rx453_cstack = rx453_cur."!cursor_capture"($P11, "uniprop")
    goto rxcap497_done1558
  rxcap497_fail1559:
    goto rx453_fail1432
  rxcap497_done1558:
    goto alt460_end1450
  alt460_end1450:
    nqp_rxcommit rx453_bstack, alt460_end1450
    nqp_rxmark rx453_bstack, rxquantr499_done1563, rx453_pos, 0
  rxquantr499_loop1562:
    repr_bind_attr_int rx453_cur, rx453_curclass, "$!pos", rx453_pos
    $P11 = rx453_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx453_curclass, "$!pos"
    lt $I11, 0, rx453_fail1432
    goto rxsubrule500_pass1564
  rxsubrule500_back1565:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx453_curclass, "$!pos"
    lt $I11, 0, rx453_fail1432
  rxsubrule500_pass1564:
    rx453_cstack = rx453_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule500_back1565
    push rx453_bstack, $I11
    push rx453_bstack, 0
    push rx453_bstack, rx453_pos
    elements $I11, rx453_cstack
    push rx453_bstack, $I11
    repr_get_attr_int rx453_pos, $P11, rx453_curclass, "$!pos"
    nqp_rxpeek $I19, rx453_bstack, rxquantr499_done1563
    inc $I19
    inc $I19
    set rx453_rep, rx453_bstack[$I19]
    nqp_rxcommit rx453_bstack, rxquantr499_done1563
    inc rx453_rep
  rxquantr499_done1563:
    rx453_cur."!cursor_pass"(rx453_pos, "cclass_elem", 'backtrack'=>1)
    .return (rx453_cur)
  rx453_restart1431:
    repr_get_attr_obj rx453_cstack, rx453_cur, rx453_curclass, "$!cstack"
  rx453_fail1432:
    unless rx453_bstack, rx453_done1430
    pop $I19, rx453_bstack
    if_null rx453_cstack, rx453_cstack_done1435
    unless rx453_cstack, rx453_cstack_done1435
    dec $I19
    set $P11, rx453_cstack[$I19]
  rx453_cstack_done1435:
    pop rx453_rep, rx453_bstack
    pop rx453_pos, rx453_bstack
    pop $I19, rx453_bstack
    lt rx453_pos, -1, rx453_done1430
    lt rx453_pos, 0, rx453_fail1432
    eq $I19, 0, rx453_fail1432
    nqp_islist $I20, rx453_cstack
    unless $I20, rx453_jump1433
    elements $I18, rx453_bstack
    le $I18, 0, rx453_cut1434
    dec $I18
    set $I18, rx453_bstack[$I18]
  rx453_cut1434:
    assign rx453_cstack, $I18
  rx453_jump1433:
    jump $I19
  rx453_done1430:
    rx453_cur."!cursor_fail"()
    .return (rx453_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_115_1381281822.05887") :anon :lex :outer("cuid_109_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .const 'Sub' $P5004 = 'cuid_110_1381281822.05887' 
    capture_lex $P5004 
    .const 'Sub' $P5004 = 'cuid_112_1381281822.05887' 
    capture_lex $P5004 
    .const 'Sub' $P5004 = 'cuid_114_1381281822.05887' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx462_start
    .local string rx462_tgt
    .local int rx462_pos
    .local int rx462_off
    .local int rx462_eos
    .local int rx462_rep
    .local pmc rx462_cur
    .local pmc rx462_curclass
    .local pmc rx462_bstack
    .local pmc rx462_cstack
    rx462_start = self."!cursor_start_all"()
    set rx462_cur, rx462_start[0]
    set rx462_tgt, rx462_start[1]
    set rx462_pos, rx462_start[2]
    set rx462_curclass, rx462_start[3]
    set rx462_bstack, rx462_start[4]
    set $I19, rx462_start[5]
    store_lex unicode:"$\x{a2}", rx462_cur
    length rx462_eos, rx462_tgt
    eq $I19, 1, rx462_restart1456
    gt rx462_pos, rx462_eos, rx462_fail1457
    repr_get_attr_int $I11, self, rx462_curclass, "$!from"
    ne $I11, -1, rxscan463_done1463
    goto rxscan463_scan1462
  rxscan463_loop1461:
    inc rx462_pos
    gt rx462_pos, rx462_eos, rx462_fail1457
    repr_bind_attr_int rx462_cur, rx462_curclass, "$!from", rx462_pos
  rxscan463_scan1462:
    nqp_rxmark rx462_bstack, rxscan463_loop1461, rx462_pos, 0
  rxscan463_done1463:
  alt464_01465:
    nqp_rxmark rx462_bstack, alt464_11481, rx462_pos, 0
    nqp_rxmark rx462_bstack, rxquantr465_done1467, rx462_pos, 0
  rxquantr465_loop1466:
    ge rx462_pos, rx462_eos, rx462_fail1457
    is_cclass $I11, .CCLASS_WHITESPACE, rx462_tgt, rx462_pos
    unless $I11, rx462_fail1457
    add rx462_pos, 1
    nqp_rxpeek $I19, rx462_bstack, rxquantr465_done1467
    inc $I19
    inc $I19
    set rx462_rep, rx462_bstack[$I19]
    nqp_rxcommit rx462_bstack, rxquantr465_done1467
    inc rx462_rep
    nqp_rxmark rx462_bstack, rxquantr465_done1467, rx462_pos, rx462_rep
    goto rxquantr465_loop1466
  rxquantr465_done1467:
    add $I11, rx462_pos, 1
    gt $I11, rx462_eos, rx462_fail1457
    substr $S10, rx462_tgt, rx462_pos, 1
    ne $S10, ucs4:"-", rx462_fail1457
    add rx462_pos, 1
    .const 'Sub' $P5001 = 'cuid_110_1381281822.05887' 
    capture_lex $P5001
    repr_bind_attr_int rx462_cur, rx462_curclass, "$!pos", rx462_pos
    $P11 = rx462_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx462_curclass, "$!pos"
    ge $I11, 0, rx462_fail1457
    repr_bind_attr_int rx462_cur, rx462_curclass, "$!pos", rx462_pos
    $P11 = rx462_cur."obs"("- as character range", ".. for range, for explicit - in character class, escape it or place as last thing")
    repr_get_attr_int $I11, $P11, rx462_curclass, "$!pos"
    lt $I11, 0, rx462_fail1457
    repr_get_attr_int rx462_pos, $P11, rx462_curclass, "$!pos"
    goto alt464_end1464
  alt464_11481:
    nqp_rxmark rx462_bstack, rxquantr470_done1483, rx462_pos, 0
  rxquantr470_loop1482:
    ge rx462_pos, rx462_eos, rx462_fail1457
    is_cclass $I11, .CCLASS_WHITESPACE, rx462_tgt, rx462_pos
    unless $I11, rx462_fail1457
    add rx462_pos, 1
    nqp_rxpeek $I19, rx462_bstack, rxquantr470_done1483
    inc $I19
    inc $I19
    set rx462_rep, rx462_bstack[$I19]
    nqp_rxcommit rx462_bstack, rxquantr470_done1483
    inc rx462_rep
    nqp_rxmark rx462_bstack, rxquantr470_done1483, rx462_pos, rx462_rep
    goto rxquantr470_loop1482
  rxquantr470_done1483:
    .const 'Sub' $P5002 = 'cuid_112_1381281822.05887' 
    capture_lex $P5002
    repr_bind_attr_int rx462_cur, rx462_curclass, "$!pos", rx462_pos
    $P11 = rx462_cur.$P5002()
    repr_get_attr_int $I11, $P11, rx462_curclass, "$!pos"
    lt $I11, 0, rx462_fail1457
    nqp_rxmark rx462_bstack, rxsubrule478_pass1509, -1, 0
  rxsubrule478_pass1509:
    rx462_cstack = rx462_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx462_pos, $P11, rx462_curclass, "$!pos"
    nqp_rxmark rx462_bstack, rxquantr479_done1511, rx462_pos, 0
  rxquantr479_loop1510:
    nqp_rxmark rx462_bstack, rxquantr480_done1513, rx462_pos, 0
  rxquantr480_loop1512:
    ge rx462_pos, rx462_eos, rx462_fail1457
    is_cclass $I11, .CCLASS_WHITESPACE, rx462_tgt, rx462_pos
    unless $I11, rx462_fail1457
    add rx462_pos, 1
    nqp_rxpeek $I19, rx462_bstack, rxquantr480_done1513
    inc $I19
    inc $I19
    set rx462_rep, rx462_bstack[$I19]
    nqp_rxcommit rx462_bstack, rxquantr480_done1513
    inc rx462_rep
    nqp_rxmark rx462_bstack, rxquantr480_done1513, rx462_pos, rx462_rep
    goto rxquantr480_loop1512
  rxquantr480_done1513:
    add $I11, rx462_pos, 2
    gt $I11, rx462_eos, rx462_fail1457
    substr $S10, rx462_tgt, rx462_pos, 2
    ne $S10, ucs4:"..", rx462_fail1457
    add rx462_pos, 2
    nqp_rxmark rx462_bstack, rxquantr481_done1515, rx462_pos, 0
  rxquantr481_loop1514:
    ge rx462_pos, rx462_eos, rx462_fail1457
    is_cclass $I11, .CCLASS_WHITESPACE, rx462_tgt, rx462_pos
    unless $I11, rx462_fail1457
    add rx462_pos, 1
    nqp_rxpeek $I19, rx462_bstack, rxquantr481_done1515
    inc $I19
    inc $I19
    set rx462_rep, rx462_bstack[$I19]
    nqp_rxcommit rx462_bstack, rxquantr481_done1515
    inc rx462_rep
    nqp_rxmark rx462_bstack, rxquantr481_done1515, rx462_pos, rx462_rep
    goto rxquantr481_loop1514
  rxquantr481_done1515:
    .const 'Sub' $P5003 = 'cuid_114_1381281822.05887' 
    capture_lex $P5003
    repr_bind_attr_int rx462_cur, rx462_curclass, "$!pos", rx462_pos
    $P11 = rx462_cur.$P5003()
    repr_get_attr_int $I11, $P11, rx462_curclass, "$!pos"
    lt $I11, 0, rx462_fail1457
    nqp_rxmark rx462_bstack, rxsubrule489_pass1541, -1, 0
  rxsubrule489_pass1541:
    rx462_cstack = rx462_cur."!cursor_capture"($P11, "1")
    repr_get_attr_int rx462_pos, $P11, rx462_curclass, "$!pos"
    nqp_rxpeek $I19, rx462_bstack, rxquantr479_done1511
    inc $I19
    inc $I19
    set rx462_rep, rx462_bstack[$I19]
    nqp_rxcommit rx462_bstack, rxquantr479_done1511
    inc rx462_rep
  rxquantr479_done1511:
  alt464_end1464:
    rx462_cur."!cursor_pass"(rx462_pos, 'backtrack'=>1)
    .return (rx462_cur)
  rx462_restart1456:
    repr_get_attr_obj rx462_cstack, rx462_cur, rx462_curclass, "$!cstack"
  rx462_fail1457:
    unless rx462_bstack, rx462_done1455
    pop $I19, rx462_bstack
    if_null rx462_cstack, rx462_cstack_done1460
    unless rx462_cstack, rx462_cstack_done1460
    dec $I19
    set $P11, rx462_cstack[$I19]
  rx462_cstack_done1460:
    pop rx462_rep, rx462_bstack
    pop rx462_pos, rx462_bstack
    pop $I19, rx462_bstack
    lt rx462_pos, -1, rx462_done1455
    lt rx462_pos, 0, rx462_fail1457
    eq $I19, 0, rx462_fail1457
    nqp_islist $I20, rx462_cstack
    unless $I20, rx462_jump1458
    elements $I18, rx462_bstack
    le $I18, 0, rx462_cut1459
    dec $I18
    set $I18, rx462_bstack[$I18]
  rx462_cut1459:
    assign rx462_cstack, $I18
  rx462_jump1458:
    jump $I19
  rx462_done1455:
    rx462_cur."!cursor_fail"()
    .return (rx462_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_110_1381281822.05887") :anon :lex :outer("cuid_115_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx466_start
    .local string rx466_tgt
    .local int rx466_pos
    .local int rx466_off
    .local int rx466_eos
    .local int rx466_rep
    .local pmc rx466_cur
    .local pmc rx466_curclass
    .local pmc rx466_bstack
    .local pmc rx466_cstack
    rx466_start = self."!cursor_start_all"()
    set rx466_cur, rx466_start[0]
    set rx466_tgt, rx466_start[1]
    set rx466_pos, rx466_start[2]
    set rx466_curclass, rx466_start[3]
    set rx466_bstack, rx466_start[4]
    set $I19, rx466_start[5]
    store_lex unicode:"$\x{a2}", rx466_cur
    length rx466_eos, rx466_tgt
    eq $I19, 1, rx466_restart1470
    gt rx466_pos, rx466_eos, rx466_fail1471
    repr_get_attr_int $I11, self, rx466_curclass, "$!from"
    ne $I11, -1, rxscan467_done1477
    goto rxscan467_scan1476
  rxscan467_loop1475:
    inc rx466_pos
    gt rx466_pos, rx466_eos, rx466_fail1471
    repr_bind_attr_int rx466_cur, rx466_curclass, "$!from", rx466_pos
  rxscan467_scan1476:
    nqp_rxmark rx466_bstack, rxscan467_loop1475, rx466_pos, 0
  rxscan467_done1477:
    nqp_rxmark rx466_bstack, rxquantr468_done1479, rx466_pos, 0
  rxquantr468_loop1478:
    ge rx466_pos, rx466_eos, rx466_fail1471
    is_cclass $I11, .CCLASS_WHITESPACE, rx466_tgt, rx466_pos
    unless $I11, rx466_fail1471
    add rx466_pos, 1
    nqp_rxpeek $I19, rx466_bstack, rxquantr468_done1479
    inc $I19
    inc $I19
    set rx466_rep, rx466_bstack[$I19]
    nqp_rxcommit rx466_bstack, rxquantr468_done1479
    inc rx466_rep
    nqp_rxmark rx466_bstack, rxquantr468_done1479, rx466_pos, rx466_rep
    goto rxquantr468_loop1478
  rxquantr468_done1479:
    add $I11, rx466_pos, 1
    gt $I11, rx466_eos, rx466_fail1471
    substr $S10, rx466_tgt, rx466_pos, 1
    ne $S10, ucs4:"]", rx466_fail1471
    add rx466_pos, 1
    rx466_cur."!cursor_pass"(rx466_pos, 'backtrack'=>1)
    .return (rx466_cur)
  rx466_restart1470:
    repr_get_attr_obj rx466_cstack, rx466_cur, rx466_curclass, "$!cstack"
  rx466_fail1471:
    unless rx466_bstack, rx466_done1469
    pop $I19, rx466_bstack
    if_null rx466_cstack, rx466_cstack_done1474
    unless rx466_cstack, rx466_cstack_done1474
    dec $I19
    set $P11, rx466_cstack[$I19]
  rx466_cstack_done1474:
    pop rx466_rep, rx466_bstack
    pop rx466_pos, rx466_bstack
    pop $I19, rx466_bstack
    lt rx466_pos, -1, rx466_done1469
    lt rx466_pos, 0, rx466_fail1471
    eq $I19, 0, rx466_fail1471
    nqp_islist $I20, rx466_cstack
    unless $I20, rx466_jump1472
    elements $I18, rx466_bstack
    le $I18, 0, rx466_cut1473
    dec $I18
    set $I18, rx466_bstack[$I18]
  rx466_cut1473:
    assign rx466_cstack, $I18
  rx466_jump1472:
    jump $I19
  rx466_done1469:
    rx466_cur."!cursor_fail"()
    .return (rx466_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_112_1381281822.05887") :anon :lex :outer("cuid_115_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .const 'Sub' $P5002 = 'cuid_111_1381281822.05887' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx471_start
    .local string rx471_tgt
    .local int rx471_pos
    .local int rx471_off
    .local int rx471_eos
    .local int rx471_rep
    .local pmc rx471_cur
    .local pmc rx471_curclass
    .local pmc rx471_bstack
    .local pmc rx471_cstack
    rx471_start = self."!cursor_start_all"()
    set rx471_cur, rx471_start[0]
    set rx471_tgt, rx471_start[1]
    set rx471_pos, rx471_start[2]
    set rx471_curclass, rx471_start[3]
    set rx471_bstack, rx471_start[4]
    set $I19, rx471_start[5]
    store_lex unicode:"$\x{a2}", rx471_cur
    length rx471_eos, rx471_tgt
    eq $I19, 1, rx471_restart1486
    gt rx471_pos, rx471_eos, rx471_fail1487
    repr_get_attr_int $I11, self, rx471_curclass, "$!from"
    ne $I11, -1, rxscan472_done1493
    goto rxscan472_scan1492
  rxscan472_loop1491:
    inc rx471_pos
    gt rx471_pos, rx471_eos, rx471_fail1487
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!from", rx471_pos
  rxscan472_scan1492:
    nqp_rxmark rx471_bstack, rxscan472_loop1491, rx471_pos, 0
  rxscan472_done1493:
  alt473_01495:
    nqp_rxmark rx471_bstack, alt473_11497, rx471_pos, 0
    add $I11, rx471_pos, 1
    gt $I11, rx471_eos, rx471_fail1487
    substr $S10, rx471_tgt, rx471_pos, 1
    ne $S10, ucs4:"\\", rx471_fail1487
    add rx471_pos, 1
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."cclass_backslash"()
    repr_get_attr_int $I11, $P11, rx471_curclass, "$!pos"
    lt $I11, 0, rx471_fail1487
    nqp_rxmark rx471_bstack, rxsubrule474_pass1496, -1, 0
  rxsubrule474_pass1496:
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "cclass_backslash")
    repr_get_attr_int rx471_pos, $P11, rx471_curclass, "$!pos"
    goto alt473_end1494
  alt473_11497:
    .const 'Sub' $P5001 = 'cuid_111_1381281822.05887' 
    capture_lex $P5001
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx471_curclass, "$!pos"
    lt $I11, 0, rx471_fail1487
    nqp_rxmark rx471_bstack, rxsubrule477_pass1508, -1, 0
  rxsubrule477_pass1508:
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx471_pos, $P11, rx471_curclass, "$!pos"
  alt473_end1494:
    rx471_cur."!cursor_pass"(rx471_pos, 'backtrack'=>1)
    .return (rx471_cur)
  rx471_restart1486:
    repr_get_attr_obj rx471_cstack, rx471_cur, rx471_curclass, "$!cstack"
  rx471_fail1487:
    unless rx471_bstack, rx471_done1485
    pop $I19, rx471_bstack
    if_null rx471_cstack, rx471_cstack_done1490
    unless rx471_cstack, rx471_cstack_done1490
    dec $I19
    set $P11, rx471_cstack[$I19]
  rx471_cstack_done1490:
    pop rx471_rep, rx471_bstack
    pop rx471_pos, rx471_bstack
    pop $I19, rx471_bstack
    lt rx471_pos, -1, rx471_done1485
    lt rx471_pos, 0, rx471_fail1487
    eq $I19, 0, rx471_fail1487
    nqp_islist $I20, rx471_cstack
    unless $I20, rx471_jump1488
    elements $I18, rx471_bstack
    le $I18, 0, rx471_cut1489
    dec $I18
    set $I18, rx471_bstack[$I18]
  rx471_cut1489:
    assign rx471_cstack, $I18
  rx471_jump1488:
    jump $I19
  rx471_done1485:
    rx471_cur."!cursor_fail"()
    .return (rx471_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_111_1381281822.05887") :anon :lex :outer("cuid_112_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx475_start
    .local string rx475_tgt
    .local int rx475_pos
    .local int rx475_off
    .local int rx475_eos
    .local int rx475_rep
    .local pmc rx475_cur
    .local pmc rx475_curclass
    .local pmc rx475_bstack
    .local pmc rx475_cstack
    rx475_start = self."!cursor_start_all"()
    set rx475_cur, rx475_start[0]
    set rx475_tgt, rx475_start[1]
    set rx475_pos, rx475_start[2]
    set rx475_curclass, rx475_start[3]
    set rx475_bstack, rx475_start[4]
    set $I19, rx475_start[5]
    store_lex unicode:"$\x{a2}", rx475_cur
    length rx475_eos, rx475_tgt
    eq $I19, 1, rx475_restart1500
    gt rx475_pos, rx475_eos, rx475_fail1501
    repr_get_attr_int $I11, self, rx475_curclass, "$!from"
    ne $I11, -1, rxscan476_done1507
    goto rxscan476_scan1506
  rxscan476_loop1505:
    inc rx475_pos
    gt rx475_pos, rx475_eos, rx475_fail1501
    repr_bind_attr_int rx475_cur, rx475_curclass, "$!from", rx475_pos
  rxscan476_scan1506:
    nqp_rxmark rx475_bstack, rxscan476_loop1505, rx475_pos, 0
  rxscan476_done1507:
    ge rx475_pos, rx475_eos, rx475_fail1501
    substr $S11, rx475_tgt, rx475_pos, 1
    index $I11, ucs4:"]\\", $S11
    ge $I11, 0, rx475_fail1501
    inc rx475_pos
    rx475_cur."!cursor_pass"(rx475_pos, 'backtrack'=>1)
    .return (rx475_cur)
  rx475_restart1500:
    repr_get_attr_obj rx475_cstack, rx475_cur, rx475_curclass, "$!cstack"
  rx475_fail1501:
    unless rx475_bstack, rx475_done1499
    pop $I19, rx475_bstack
    if_null rx475_cstack, rx475_cstack_done1504
    unless rx475_cstack, rx475_cstack_done1504
    dec $I19
    set $P11, rx475_cstack[$I19]
  rx475_cstack_done1504:
    pop rx475_rep, rx475_bstack
    pop rx475_pos, rx475_bstack
    pop $I19, rx475_bstack
    lt rx475_pos, -1, rx475_done1499
    lt rx475_pos, 0, rx475_fail1501
    eq $I19, 0, rx475_fail1501
    nqp_islist $I20, rx475_cstack
    unless $I20, rx475_jump1502
    elements $I18, rx475_bstack
    le $I18, 0, rx475_cut1503
    dec $I18
    set $I18, rx475_bstack[$I18]
  rx475_cut1503:
    assign rx475_cstack, $I18
  rx475_jump1502:
    jump $I19
  rx475_done1499:
    rx475_cur."!cursor_fail"()
    .return (rx475_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_114_1381281822.05887") :anon :lex :outer("cuid_115_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .const 'Sub' $P5002 = 'cuid_113_1381281822.05887' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx482_start
    .local string rx482_tgt
    .local int rx482_pos
    .local int rx482_off
    .local int rx482_eos
    .local int rx482_rep
    .local pmc rx482_cur
    .local pmc rx482_curclass
    .local pmc rx482_bstack
    .local pmc rx482_cstack
    rx482_start = self."!cursor_start_all"()
    set rx482_cur, rx482_start[0]
    set rx482_tgt, rx482_start[1]
    set rx482_pos, rx482_start[2]
    set rx482_curclass, rx482_start[3]
    set rx482_bstack, rx482_start[4]
    set $I19, rx482_start[5]
    store_lex unicode:"$\x{a2}", rx482_cur
    length rx482_eos, rx482_tgt
    eq $I19, 1, rx482_restart1518
    gt rx482_pos, rx482_eos, rx482_fail1519
    repr_get_attr_int $I11, self, rx482_curclass, "$!from"
    ne $I11, -1, rxscan483_done1525
    goto rxscan483_scan1524
  rxscan483_loop1523:
    inc rx482_pos
    gt rx482_pos, rx482_eos, rx482_fail1519
    repr_bind_attr_int rx482_cur, rx482_curclass, "$!from", rx482_pos
  rxscan483_scan1524:
    nqp_rxmark rx482_bstack, rxscan483_loop1523, rx482_pos, 0
  rxscan483_done1525:
  alt484_01527:
    nqp_rxmark rx482_bstack, alt484_11529, rx482_pos, 0
    add $I11, rx482_pos, 1
    gt $I11, rx482_eos, rx482_fail1519
    substr $S10, rx482_tgt, rx482_pos, 1
    ne $S10, ucs4:"\\", rx482_fail1519
    add rx482_pos, 1
    repr_bind_attr_int rx482_cur, rx482_curclass, "$!pos", rx482_pos
    $P11 = rx482_cur."cclass_backslash"()
    repr_get_attr_int $I11, $P11, rx482_curclass, "$!pos"
    lt $I11, 0, rx482_fail1519
    nqp_rxmark rx482_bstack, rxsubrule485_pass1528, -1, 0
  rxsubrule485_pass1528:
    rx482_cstack = rx482_cur."!cursor_capture"($P11, "cclass_backslash")
    repr_get_attr_int rx482_pos, $P11, rx482_curclass, "$!pos"
    goto alt484_end1526
  alt484_11529:
    .const 'Sub' $P5001 = 'cuid_113_1381281822.05887' 
    capture_lex $P5001
    repr_bind_attr_int rx482_cur, rx482_curclass, "$!pos", rx482_pos
    $P11 = rx482_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx482_curclass, "$!pos"
    lt $I11, 0, rx482_fail1519
    nqp_rxmark rx482_bstack, rxsubrule488_pass1540, -1, 0
  rxsubrule488_pass1540:
    rx482_cstack = rx482_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx482_pos, $P11, rx482_curclass, "$!pos"
  alt484_end1526:
    rx482_cur."!cursor_pass"(rx482_pos, 'backtrack'=>1)
    .return (rx482_cur)
  rx482_restart1518:
    repr_get_attr_obj rx482_cstack, rx482_cur, rx482_curclass, "$!cstack"
  rx482_fail1519:
    unless rx482_bstack, rx482_done1517
    pop $I19, rx482_bstack
    if_null rx482_cstack, rx482_cstack_done1522
    unless rx482_cstack, rx482_cstack_done1522
    dec $I19
    set $P11, rx482_cstack[$I19]
  rx482_cstack_done1522:
    pop rx482_rep, rx482_bstack
    pop rx482_pos, rx482_bstack
    pop $I19, rx482_bstack
    lt rx482_pos, -1, rx482_done1517
    lt rx482_pos, 0, rx482_fail1519
    eq $I19, 0, rx482_fail1519
    nqp_islist $I20, rx482_cstack
    unless $I20, rx482_jump1520
    elements $I18, rx482_bstack
    le $I18, 0, rx482_cut1521
    dec $I18
    set $I18, rx482_bstack[$I18]
  rx482_cut1521:
    assign rx482_cstack, $I18
  rx482_jump1520:
    jump $I19
  rx482_done1517:
    rx482_cur."!cursor_fail"()
    .return (rx482_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_113_1381281822.05887") :anon :lex :outer("cuid_114_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx486_start
    .local string rx486_tgt
    .local int rx486_pos
    .local int rx486_off
    .local int rx486_eos
    .local int rx486_rep
    .local pmc rx486_cur
    .local pmc rx486_curclass
    .local pmc rx486_bstack
    .local pmc rx486_cstack
    rx486_start = self."!cursor_start_all"()
    set rx486_cur, rx486_start[0]
    set rx486_tgt, rx486_start[1]
    set rx486_pos, rx486_start[2]
    set rx486_curclass, rx486_start[3]
    set rx486_bstack, rx486_start[4]
    set $I19, rx486_start[5]
    store_lex unicode:"$\x{a2}", rx486_cur
    length rx486_eos, rx486_tgt
    eq $I19, 1, rx486_restart1532
    gt rx486_pos, rx486_eos, rx486_fail1533
    repr_get_attr_int $I11, self, rx486_curclass, "$!from"
    ne $I11, -1, rxscan487_done1539
    goto rxscan487_scan1538
  rxscan487_loop1537:
    inc rx486_pos
    gt rx486_pos, rx486_eos, rx486_fail1533
    repr_bind_attr_int rx486_cur, rx486_curclass, "$!from", rx486_pos
  rxscan487_scan1538:
    nqp_rxmark rx486_bstack, rxscan487_loop1537, rx486_pos, 0
  rxscan487_done1539:
    ge rx486_pos, rx486_eos, rx486_fail1533
    substr $S11, rx486_tgt, rx486_pos, 1
    index $I11, ucs4:"]\\", $S11
    ge $I11, 0, rx486_fail1533
    inc rx486_pos
    rx486_cur."!cursor_pass"(rx486_pos, 'backtrack'=>1)
    .return (rx486_cur)
  rx486_restart1532:
    repr_get_attr_obj rx486_cstack, rx486_cur, rx486_curclass, "$!cstack"
  rx486_fail1533:
    unless rx486_bstack, rx486_done1531
    pop $I19, rx486_bstack
    if_null rx486_cstack, rx486_cstack_done1536
    unless rx486_cstack, rx486_cstack_done1536
    dec $I19
    set $P11, rx486_cstack[$I19]
  rx486_cstack_done1536:
    pop rx486_rep, rx486_bstack
    pop rx486_pos, rx486_bstack
    pop $I19, rx486_bstack
    lt rx486_pos, -1, rx486_done1531
    lt rx486_pos, 0, rx486_fail1533
    eq $I19, 0, rx486_fail1533
    nqp_islist $I20, rx486_cstack
    unless $I20, rx486_jump1534
    elements $I18, rx486_bstack
    le $I18, 0, rx486_cut1535
    dec $I18
    set $I18, rx486_bstack[$I18]
  rx486_cut1535:
    assign rx486_cstack, $I18
  rx486_jump1534:
    jump $I19
  rx486_done1531:
    rx486_cur."!cursor_fail"()
    .return (rx486_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_internal" :subid("cuid_116_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 321
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_117_1381281822.05887' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx501_start
    .local string rx501_tgt
    .local int rx501_pos
    .local int rx501_off
    .local int rx501_eos
    .local int rx501_rep
    .local pmc rx501_cur
    .local pmc rx501_curclass
    .local pmc rx501_bstack
    .local pmc rx501_cstack
    rx501_start = self."!cursor_start_all"()
    set rx501_cur, rx501_start[0]
    set rx501_tgt, rx501_start[1]
    set rx501_pos, rx501_start[2]
    set rx501_curclass, rx501_start[3]
    set rx501_bstack, rx501_start[4]
    set $I19, rx501_start[5]
    store_lex unicode:"$\x{a2}", rx501_cur
    length rx501_eos, rx501_tgt
    eq $I19, 1, rx501_restart1568
    gt rx501_pos, rx501_eos, rx501_fail1569
    repr_get_attr_int $I11, self, rx501_curclass, "$!from"
    ne $I11, -1, rxscan502_done1575
    goto rxscan502_scan1574
  rxscan502_loop1573:
    inc rx501_pos
    gt rx501_pos, rx501_eos, rx501_fail1569
    repr_bind_attr_int rx501_cur, rx501_curclass, "$!from", rx501_pos
  rxscan502_scan1574:
    nqp_rxmark rx501_bstack, rxscan502_loop1573, rx501_pos, 0
  rxscan502_done1575:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt503_01577
    nqp_push_label $P11, alt503_11599
    nqp_rxmark rx501_bstack, alt503_end1576, -1, 0
    rx501_cur."!alt"(rx501_pos, "alt_nfa__28_1381281823.5604", $P11)
    goto rx501_fail1569
  alt503_01577:
    add $I11, rx501_pos, 1
    gt $I11, rx501_eos, rx501_fail1569
    substr $S10, rx501_tgt, rx501_pos, 1
    ne $S10, ucs4:":", rx501_fail1569
    add rx501_pos, 1
    nqp_rxmark rx501_bstack, rxquantr504_done1579, -1, 0
  rxquantr504_loop1578:
    .const 'Sub' $P5001 = 'cuid_117_1381281822.05887' 
    capture_lex $P5001
    repr_bind_attr_int rx501_cur, rx501_curclass, "$!pos", rx501_pos
    $P11 = rx501_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx501_curclass, "$!pos"
    lt $I11, 0, rx501_fail1569
    goto rxsubrule509_pass1595
  rxsubrule509_back1596:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx501_curclass, "$!pos"
    lt $I11, 0, rx501_fail1569
  rxsubrule509_pass1595:
    rx501_cstack = rx501_cur."!cursor_capture"($P11, "n")
    set_addr $I11, rxsubrule509_back1596
    push rx501_bstack, $I11
    push rx501_bstack, 0
    push rx501_bstack, rx501_pos
    elements $I11, rx501_cstack
    push rx501_bstack, $I11
    repr_get_attr_int rx501_pos, $P11, rx501_curclass, "$!pos"
    nqp_rxpeek $I19, rx501_bstack, rxquantr504_done1579
    inc $I19
    inc $I19
    set rx501_rep, rx501_bstack[$I19]
    nqp_rxcommit rx501_bstack, rxquantr504_done1579
    inc rx501_rep
  rxquantr504_done1579:
    repr_bind_attr_int rx501_cur, rx501_curclass, "$!pos", rx501_pos
    $P11 = rx501_cur."mod_ident"()
    repr_get_attr_int $I11, $P11, rx501_curclass, "$!pos"
    lt $I11, 0, rx501_fail1569
    nqp_rxmark rx501_bstack, rxsubrule510_pass1597, -1, 0
  rxsubrule510_pass1597:
    rx501_cstack = rx501_cur."!cursor_capture"($P11, "mod_ident")
    repr_get_attr_int rx501_pos, $P11, rx501_curclass, "$!pos"
    le rx501_pos, 0, rx501_fail1569
    is_cclass $I11, .CCLASS_WORD, rx501_tgt, rx501_pos
    if $I11, rx501_fail1569
    sub $I11, rx501_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx501_tgt, $I11
    unless $I11, rx501_fail1569
    goto alt503_end1576
  alt503_11599:
    add $I11, rx501_pos, 1
    gt $I11, rx501_eos, rx501_fail1569
    substr $S10, rx501_tgt, rx501_pos, 1
    ne $S10, ucs4:":", rx501_fail1569
    add rx501_pos, 1
    repr_bind_attr_int rx501_cur, rx501_curclass, "$!pos", rx501_pos
    $P11 = rx501_cur."mod_ident"()
    repr_get_attr_int $I11, $P11, rx501_curclass, "$!pos"
    lt $I11, 0, rx501_fail1569
    nqp_rxmark rx501_bstack, rxsubrule512_pass1600, -1, 0
  rxsubrule512_pass1600:
    rx501_cstack = rx501_cur."!cursor_capture"($P11, "mod_ident")
    repr_get_attr_int rx501_pos, $P11, rx501_curclass, "$!pos"
    nqp_rxmark rx501_bstack, rxquantr513_done1602, rx501_pos, 0
  rxquantr513_loop1601:
    add $I11, rx501_pos, 1
    gt $I11, rx501_eos, rx501_fail1569
    substr $S10, rx501_tgt, rx501_pos, 1
    ne $S10, ucs4:"(", rx501_fail1569
    add rx501_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt514_01604
    nqp_push_label $P11, alt514_11609
    nqp_push_label $P11, alt514_21611
    nqp_rxmark rx501_bstack, alt514_end1603, -1, 0
    rx501_cur."!alt"(rx501_pos, "alt_nfa__27_1381281823.55989", $P11)
    goto rx501_fail1569
  alt514_01604:
    nqp_rxmark rx501_bstack, rxcap515_fail1606, rx501_pos, 0
    nqp_rxmark rx501_bstack, rxquantr516_done1608, -1, 0
  rxquantr516_loop1607:
    ge rx501_pos, rx501_eos, rx501_fail1569
    is_cclass $I11, .CCLASS_NUMERIC, rx501_tgt, rx501_pos
    unless $I11, rx501_fail1569
    add rx501_pos, 1
    nqp_rxpeek $I19, rx501_bstack, rxquantr516_done1608
    inc $I19
    inc $I19
    set rx501_rep, rx501_bstack[$I19]
    nqp_rxcommit rx501_bstack, rxquantr516_done1608
    inc rx501_rep
    nqp_rxmark rx501_bstack, rxquantr516_done1608, rx501_pos, rx501_rep
    goto rxquantr516_loop1607
  rxquantr516_done1608:
    nqp_rxpeek $I19, rx501_bstack, rxcap515_fail1606
    inc $I19
    set $I11, rx501_bstack[$I19]
    repr_bind_attr_int rx501_cur, rx501_curclass, "$!pos", rx501_pos
    $P11 = rx501_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx501_pos)
    rx501_cstack = rx501_cur."!cursor_capture"($P11, "n")
    goto rxcap515_done1605
  rxcap515_fail1606:
    goto rx501_fail1569
  rxcap515_done1605:
    goto alt514_end1603
  alt514_11609:
    ge rx501_pos, rx501_eos, rx501_fail1569
    substr $S11, rx501_tgt, rx501_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx501_fail1569
    repr_bind_attr_int rx501_cur, rx501_curclass, "$!pos", rx501_pos
    $P11 = rx501_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx501_curclass, "$!pos"
    lt $I11, 0, rx501_fail1569
    nqp_rxmark rx501_bstack, rxsubrule517_pass1610, -1, 0
  rxsubrule517_pass1610:
    rx501_cstack = rx501_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx501_pos, $P11, rx501_curclass, "$!pos"
    goto alt514_end1603
  alt514_21611:
    ge rx501_pos, rx501_eos, rx501_fail1569
    substr $S11, rx501_tgt, rx501_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx501_fail1569
    repr_bind_attr_int rx501_cur, rx501_curclass, "$!pos", rx501_pos
    $P11 = rx501_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx501_curclass, "$!pos"
    lt $I11, 0, rx501_fail1569
    nqp_rxmark rx501_bstack, rxsubrule518_pass1612, -1, 0
  rxsubrule518_pass1612:
    rx501_cstack = rx501_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx501_pos, $P11, rx501_curclass, "$!pos"
    goto alt514_end1603
  alt514_end1603:
    nqp_rxcommit rx501_bstack, alt514_end1603
    add $I11, rx501_pos, 1
    gt $I11, rx501_eos, rx501_fail1569
    substr $S10, rx501_tgt, rx501_pos, 1
    ne $S10, ucs4:")", rx501_fail1569
    add rx501_pos, 1
    nqp_rxpeek $I19, rx501_bstack, rxquantr513_done1602
    inc $I19
    inc $I19
    set rx501_rep, rx501_bstack[$I19]
    nqp_rxcommit rx501_bstack, rxquantr513_done1602
    inc rx501_rep
  rxquantr513_done1602:
    goto alt503_end1576
  alt503_end1576:
    nqp_rxcommit rx501_bstack, alt503_end1576
    rx501_cur."!cursor_pass"(rx501_pos, "mod_internal", 'backtrack'=>1)
    .return (rx501_cur)
  rx501_restart1568:
    repr_get_attr_obj rx501_cstack, rx501_cur, rx501_curclass, "$!cstack"
  rx501_fail1569:
    unless rx501_bstack, rx501_done1567
    pop $I19, rx501_bstack
    if_null rx501_cstack, rx501_cstack_done1572
    unless rx501_cstack, rx501_cstack_done1572
    dec $I19
    set $P11, rx501_cstack[$I19]
  rx501_cstack_done1572:
    pop rx501_rep, rx501_bstack
    pop rx501_pos, rx501_bstack
    pop $I19, rx501_bstack
    lt rx501_pos, -1, rx501_done1567
    lt rx501_pos, 0, rx501_fail1569
    eq $I19, 0, rx501_fail1569
    nqp_islist $I20, rx501_cstack
    unless $I20, rx501_jump1570
    elements $I18, rx501_bstack
    le $I18, 0, rx501_cut1571
    dec $I18
    set $I18, rx501_bstack[$I18]
  rx501_cut1571:
    assign rx501_cstack, $I18
  rx501_jump1570:
    jump $I19
  rx501_done1567:
    rx501_cur."!cursor_fail"()
    .return (rx501_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_117_1381281822.05887") :anon :lex :outer("cuid_116_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx505_start
    .local string rx505_tgt
    .local int rx505_pos
    .local int rx505_off
    .local int rx505_eos
    .local int rx505_rep
    .local pmc rx505_cur
    .local pmc rx505_curclass
    .local pmc rx505_bstack
    .local pmc rx505_cstack
    rx505_start = self."!cursor_start_all"()
    set rx505_cur, rx505_start[0]
    set rx505_tgt, rx505_start[1]
    set rx505_pos, rx505_start[2]
    set rx505_curclass, rx505_start[3]
    set rx505_bstack, rx505_start[4]
    set $I19, rx505_start[5]
    store_lex unicode:"$\x{a2}", rx505_cur
    length rx505_eos, rx505_tgt
    eq $I19, 1, rx505_restart1582
    gt rx505_pos, rx505_eos, rx505_fail1583
    repr_get_attr_int $I11, self, rx505_curclass, "$!from"
    ne $I11, -1, rxscan506_done1589
    goto rxscan506_scan1588
  rxscan506_loop1587:
    inc rx505_pos
    gt rx505_pos, rx505_eos, rx505_fail1583
    repr_bind_attr_int rx505_cur, rx505_curclass, "$!from", rx505_pos
  rxscan506_scan1588:
    nqp_rxmark rx505_bstack, rxscan506_loop1587, rx505_pos, 0
  rxscan506_done1589:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt507_01591
    nqp_push_label $P11, alt507_11592
    nqp_rxmark rx505_bstack, alt507_end1590, -1, 0
    rx505_cur."!alt"(rx505_pos, "alt_nfa__26_1381281823.53209", $P11)
    goto rx505_fail1583
  alt507_01591:
    add $I11, rx505_pos, 1
    gt $I11, rx505_eos, rx505_fail1583
    substr $S10, rx505_tgt, rx505_pos, 1
    ne $S10, ucs4:"!", rx505_fail1583
    add rx505_pos, 1
    goto alt507_end1590
  alt507_11592:
    nqp_rxmark rx505_bstack, rxquantr508_done1594, -1, 0
  rxquantr508_loop1593:
    ge rx505_pos, rx505_eos, rx505_fail1583
    is_cclass $I11, .CCLASS_NUMERIC, rx505_tgt, rx505_pos
    unless $I11, rx505_fail1583
    add rx505_pos, 1
    nqp_rxpeek $I19, rx505_bstack, rxquantr508_done1594
    inc $I19
    inc $I19
    set rx505_rep, rx505_bstack[$I19]
    nqp_rxcommit rx505_bstack, rxquantr508_done1594
    inc rx505_rep
    nqp_rxmark rx505_bstack, rxquantr508_done1594, rx505_pos, rx505_rep
    goto rxquantr508_loop1593
  rxquantr508_done1594:
    goto alt507_end1590
  alt507_end1590:
    rx505_cur."!cursor_pass"(rx505_pos, 'backtrack'=>1)
    .return (rx505_cur)
  rx505_restart1582:
    repr_get_attr_obj rx505_cstack, rx505_cur, rx505_curclass, "$!cstack"
  rx505_fail1583:
    unless rx505_bstack, rx505_done1581
    pop $I19, rx505_bstack
    if_null rx505_cstack, rx505_cstack_done1586
    unless rx505_cstack, rx505_cstack_done1586
    dec $I19
    set $P11, rx505_cstack[$I19]
  rx505_cstack_done1586:
    pop rx505_rep, rx505_bstack
    pop rx505_pos, rx505_bstack
    pop $I19, rx505_bstack
    lt rx505_pos, -1, rx505_done1581
    lt rx505_pos, 0, rx505_fail1583
    eq $I19, 0, rx505_fail1583
    nqp_islist $I20, rx505_cstack
    unless $I20, rx505_jump1584
    elements $I18, rx505_bstack
    le $I18, 0, rx505_cut1585
    dec $I18
    set $I18, rx505_bstack[$I18]
  rx505_cut1585:
    assign rx505_cstack, $I18
  rx505_jump1584:
    jump $I19
  rx505_done1581:
    rx505_cur."!cursor_fail"()
    .return (rx505_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident" :subid("cuid_118_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 337
    .param pmc self 
    $P5001 = self."!protoregex"("mod_ident")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<ignorecase>" :subid("cuid_119_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 338
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx519_start
    .local string rx519_tgt
    .local int rx519_pos
    .local int rx519_off
    .local int rx519_eos
    .local int rx519_rep
    .local pmc rx519_cur
    .local pmc rx519_curclass
    .local pmc rx519_bstack
    .local pmc rx519_cstack
    rx519_start = self."!cursor_start_all"()
    set rx519_cur, rx519_start[0]
    set rx519_tgt, rx519_start[1]
    set rx519_pos, rx519_start[2]
    set rx519_curclass, rx519_start[3]
    set rx519_bstack, rx519_start[4]
    set $I19, rx519_start[5]
    store_lex unicode:"$\x{a2}", rx519_cur
    length rx519_eos, rx519_tgt
    eq $I19, 1, rx519_restart1615
    gt rx519_pos, rx519_eos, rx519_fail1616
    repr_get_attr_int $I11, self, rx519_curclass, "$!from"
    ne $I11, -1, rxscan520_done1622
    goto rxscan520_scan1621
  rxscan520_loop1620:
    inc rx519_pos
    gt rx519_pos, rx519_eos, rx519_fail1616
    repr_bind_attr_int rx519_cur, rx519_curclass, "$!from", rx519_pos
  rxscan520_scan1621:
    nqp_rxmark rx519_bstack, rxscan520_loop1620, rx519_pos, 0
  rxscan520_done1622:
    nqp_rxmark rx519_bstack, rxcap521_fail1624, rx519_pos, 0
    add $I11, rx519_pos, 1
    gt $I11, rx519_eos, rx519_fail1616
    substr $S10, rx519_tgt, rx519_pos, 1
    ne $S10, ucs4:"i", rx519_fail1616
    add rx519_pos, 1
    nqp_rxpeek $I19, rx519_bstack, rxcap521_fail1624
    inc $I19
    set $I11, rx519_bstack[$I19]
    repr_bind_attr_int rx519_cur, rx519_curclass, "$!pos", rx519_pos
    $P11 = rx519_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx519_pos)
    rx519_cstack = rx519_cur."!cursor_capture"($P11, "sym")
    goto rxcap521_done1623
  rxcap521_fail1624:
    goto rx519_fail1616
  rxcap521_done1623:
    nqp_rxmark rx519_bstack, rxquantr522_done1626, rx519_pos, 0
  rxquantr522_loop1625:
    add $I11, rx519_pos, 9
    gt $I11, rx519_eos, rx519_fail1616
    substr $S10, rx519_tgt, rx519_pos, 9
    ne $S10, ucs4:"gnorecase", rx519_fail1616
    add rx519_pos, 9
    nqp_rxpeek $I19, rx519_bstack, rxquantr522_done1626
    inc $I19
    inc $I19
    set rx519_rep, rx519_bstack[$I19]
    nqp_rxcommit rx519_bstack, rxquantr522_done1626
    inc rx519_rep
  rxquantr522_done1626:
    le rx519_pos, 0, rx519_fail1616
    is_cclass $I11, .CCLASS_WORD, rx519_tgt, rx519_pos
    if $I11, rx519_fail1616
    sub $I11, rx519_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx519_tgt, $I11
    unless $I11, rx519_fail1616
    rx519_cur."!cursor_pass"(rx519_pos, "mod_ident:sym<ignorecase>", 'backtrack'=>1)
    .return (rx519_cur)
  rx519_restart1615:
    repr_get_attr_obj rx519_cstack, rx519_cur, rx519_curclass, "$!cstack"
  rx519_fail1616:
    unless rx519_bstack, rx519_done1614
    pop $I19, rx519_bstack
    if_null rx519_cstack, rx519_cstack_done1619
    unless rx519_cstack, rx519_cstack_done1619
    dec $I19
    set $P11, rx519_cstack[$I19]
  rx519_cstack_done1619:
    pop rx519_rep, rx519_bstack
    pop rx519_pos, rx519_bstack
    pop $I19, rx519_bstack
    lt rx519_pos, -1, rx519_done1614
    lt rx519_pos, 0, rx519_fail1616
    eq $I19, 0, rx519_fail1616
    nqp_islist $I20, rx519_cstack
    unless $I20, rx519_jump1617
    elements $I18, rx519_bstack
    le $I18, 0, rx519_cut1618
    dec $I18
    set $I18, rx519_bstack[$I18]
  rx519_cut1618:
    assign rx519_cstack, $I18
  rx519_jump1617:
    jump $I19
  rx519_done1614:
    rx519_cur."!cursor_fail"()
    .return (rx519_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<ratchet>" :subid("cuid_120_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 339
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx524_start
    .local string rx524_tgt
    .local int rx524_pos
    .local int rx524_off
    .local int rx524_eos
    .local int rx524_rep
    .local pmc rx524_cur
    .local pmc rx524_curclass
    .local pmc rx524_bstack
    .local pmc rx524_cstack
    rx524_start = self."!cursor_start_all"()
    set rx524_cur, rx524_start[0]
    set rx524_tgt, rx524_start[1]
    set rx524_pos, rx524_start[2]
    set rx524_curclass, rx524_start[3]
    set rx524_bstack, rx524_start[4]
    set $I19, rx524_start[5]
    store_lex unicode:"$\x{a2}", rx524_cur
    length rx524_eos, rx524_tgt
    eq $I19, 1, rx524_restart1630
    gt rx524_pos, rx524_eos, rx524_fail1631
    repr_get_attr_int $I11, self, rx524_curclass, "$!from"
    ne $I11, -1, rxscan525_done1637
    goto rxscan525_scan1636
  rxscan525_loop1635:
    inc rx524_pos
    gt rx524_pos, rx524_eos, rx524_fail1631
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!from", rx524_pos
  rxscan525_scan1636:
    nqp_rxmark rx524_bstack, rxscan525_loop1635, rx524_pos, 0
  rxscan525_done1637:
    nqp_rxmark rx524_bstack, rxcap526_fail1639, rx524_pos, 0
    add $I11, rx524_pos, 1
    gt $I11, rx524_eos, rx524_fail1631
    substr $S10, rx524_tgt, rx524_pos, 1
    ne $S10, ucs4:"r", rx524_fail1631
    add rx524_pos, 1
    nqp_rxpeek $I19, rx524_bstack, rxcap526_fail1639
    inc $I19
    set $I11, rx524_bstack[$I19]
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!pos", rx524_pos
    $P11 = rx524_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx524_pos)
    rx524_cstack = rx524_cur."!cursor_capture"($P11, "sym")
    goto rxcap526_done1638
  rxcap526_fail1639:
    goto rx524_fail1631
  rxcap526_done1638:
    nqp_rxmark rx524_bstack, rxquantr527_done1641, rx524_pos, 0
  rxquantr527_loop1640:
    add $I11, rx524_pos, 6
    gt $I11, rx524_eos, rx524_fail1631
    substr $S10, rx524_tgt, rx524_pos, 6
    ne $S10, ucs4:"atchet", rx524_fail1631
    add rx524_pos, 6
    nqp_rxpeek $I19, rx524_bstack, rxquantr527_done1641
    inc $I19
    inc $I19
    set rx524_rep, rx524_bstack[$I19]
    nqp_rxcommit rx524_bstack, rxquantr527_done1641
    inc rx524_rep
  rxquantr527_done1641:
    le rx524_pos, 0, rx524_fail1631
    is_cclass $I11, .CCLASS_WORD, rx524_tgt, rx524_pos
    if $I11, rx524_fail1631
    sub $I11, rx524_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx524_tgt, $I11
    unless $I11, rx524_fail1631
    rx524_cur."!cursor_pass"(rx524_pos, "mod_ident:sym<ratchet>", 'backtrack'=>1)
    .return (rx524_cur)
  rx524_restart1630:
    repr_get_attr_obj rx524_cstack, rx524_cur, rx524_curclass, "$!cstack"
  rx524_fail1631:
    unless rx524_bstack, rx524_done1629
    pop $I19, rx524_bstack
    if_null rx524_cstack, rx524_cstack_done1634
    unless rx524_cstack, rx524_cstack_done1634
    dec $I19
    set $P11, rx524_cstack[$I19]
  rx524_cstack_done1634:
    pop rx524_rep, rx524_bstack
    pop rx524_pos, rx524_bstack
    pop $I19, rx524_bstack
    lt rx524_pos, -1, rx524_done1629
    lt rx524_pos, 0, rx524_fail1631
    eq $I19, 0, rx524_fail1631
    nqp_islist $I20, rx524_cstack
    unless $I20, rx524_jump1632
    elements $I18, rx524_bstack
    le $I18, 0, rx524_cut1633
    dec $I18
    set $I18, rx524_bstack[$I18]
  rx524_cut1633:
    assign rx524_cstack, $I18
  rx524_jump1632:
    jump $I19
  rx524_done1629:
    rx524_cur."!cursor_fail"()
    .return (rx524_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<sigspace>" :subid("cuid_121_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 340
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx529_start
    .local string rx529_tgt
    .local int rx529_pos
    .local int rx529_off
    .local int rx529_eos
    .local int rx529_rep
    .local pmc rx529_cur
    .local pmc rx529_curclass
    .local pmc rx529_bstack
    .local pmc rx529_cstack
    rx529_start = self."!cursor_start_all"()
    set rx529_cur, rx529_start[0]
    set rx529_tgt, rx529_start[1]
    set rx529_pos, rx529_start[2]
    set rx529_curclass, rx529_start[3]
    set rx529_bstack, rx529_start[4]
    set $I19, rx529_start[5]
    store_lex unicode:"$\x{a2}", rx529_cur
    length rx529_eos, rx529_tgt
    eq $I19, 1, rx529_restart1645
    gt rx529_pos, rx529_eos, rx529_fail1646
    repr_get_attr_int $I11, self, rx529_curclass, "$!from"
    ne $I11, -1, rxscan530_done1652
    goto rxscan530_scan1651
  rxscan530_loop1650:
    inc rx529_pos
    gt rx529_pos, rx529_eos, rx529_fail1646
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!from", rx529_pos
  rxscan530_scan1651:
    nqp_rxmark rx529_bstack, rxscan530_loop1650, rx529_pos, 0
  rxscan530_done1652:
    nqp_rxmark rx529_bstack, rxcap531_fail1654, rx529_pos, 0
    add $I11, rx529_pos, 1
    gt $I11, rx529_eos, rx529_fail1646
    substr $S10, rx529_tgt, rx529_pos, 1
    ne $S10, ucs4:"s", rx529_fail1646
    add rx529_pos, 1
    nqp_rxpeek $I19, rx529_bstack, rxcap531_fail1654
    inc $I19
    set $I11, rx529_bstack[$I19]
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx529_pos)
    rx529_cstack = rx529_cur."!cursor_capture"($P11, "sym")
    goto rxcap531_done1653
  rxcap531_fail1654:
    goto rx529_fail1646
  rxcap531_done1653:
    nqp_rxmark rx529_bstack, rxquantr532_done1656, rx529_pos, 0
  rxquantr532_loop1655:
    add $I11, rx529_pos, 7
    gt $I11, rx529_eos, rx529_fail1646
    substr $S10, rx529_tgt, rx529_pos, 7
    ne $S10, ucs4:"igspace", rx529_fail1646
    add rx529_pos, 7
    nqp_rxpeek $I19, rx529_bstack, rxquantr532_done1656
    inc $I19
    inc $I19
    set rx529_rep, rx529_bstack[$I19]
    nqp_rxcommit rx529_bstack, rxquantr532_done1656
    inc rx529_rep
  rxquantr532_done1656:
    le rx529_pos, 0, rx529_fail1646
    is_cclass $I11, .CCLASS_WORD, rx529_tgt, rx529_pos
    if $I11, rx529_fail1646
    sub $I11, rx529_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx529_tgt, $I11
    unless $I11, rx529_fail1646
    rx529_cur."!cursor_pass"(rx529_pos, "mod_ident:sym<sigspace>", 'backtrack'=>1)
    .return (rx529_cur)
  rx529_restart1645:
    repr_get_attr_obj rx529_cstack, rx529_cur, rx529_curclass, "$!cstack"
  rx529_fail1646:
    unless rx529_bstack, rx529_done1644
    pop $I19, rx529_bstack
    if_null rx529_cstack, rx529_cstack_done1649
    unless rx529_cstack, rx529_cstack_done1649
    dec $I19
    set $P11, rx529_cstack[$I19]
  rx529_cstack_done1649:
    pop rx529_rep, rx529_bstack
    pop rx529_pos, rx529_bstack
    pop $I19, rx529_bstack
    lt rx529_pos, -1, rx529_done1644
    lt rx529_pos, 0, rx529_fail1646
    eq $I19, 0, rx529_fail1646
    nqp_islist $I20, rx529_cstack
    unless $I20, rx529_jump1647
    elements $I18, rx529_bstack
    le $I18, 0, rx529_cut1648
    dec $I18
    set $I18, rx529_bstack[$I18]
  rx529_cut1648:
    assign rx529_cstack, $I18
  rx529_jump1647:
    jump $I19
  rx529_done1644:
    rx529_cur."!cursor_fail"()
    .return (rx529_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<dba>" :subid("cuid_122_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 341
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx534_start
    .local string rx534_tgt
    .local int rx534_pos
    .local int rx534_off
    .local int rx534_eos
    .local int rx534_rep
    .local pmc rx534_cur
    .local pmc rx534_curclass
    .local pmc rx534_bstack
    .local pmc rx534_cstack
    rx534_start = self."!cursor_start_all"()
    set rx534_cur, rx534_start[0]
    set rx534_tgt, rx534_start[1]
    set rx534_pos, rx534_start[2]
    set rx534_curclass, rx534_start[3]
    set rx534_bstack, rx534_start[4]
    set $I19, rx534_start[5]
    store_lex unicode:"$\x{a2}", rx534_cur
    length rx534_eos, rx534_tgt
    eq $I19, 1, rx534_restart1660
    gt rx534_pos, rx534_eos, rx534_fail1661
    repr_get_attr_int $I11, self, rx534_curclass, "$!from"
    ne $I11, -1, rxscan535_done1667
    goto rxscan535_scan1666
  rxscan535_loop1665:
    inc rx534_pos
    gt rx534_pos, rx534_eos, rx534_fail1661
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!from", rx534_pos
  rxscan535_scan1666:
    nqp_rxmark rx534_bstack, rxscan535_loop1665, rx534_pos, 0
  rxscan535_done1667:
    nqp_rxmark rx534_bstack, rxcap536_fail1669, rx534_pos, 0
    add $I11, rx534_pos, 3
    gt $I11, rx534_eos, rx534_fail1661
    substr $S10, rx534_tgt, rx534_pos, 3
    ne $S10, ucs4:"dba", rx534_fail1661
    add rx534_pos, 3
    nqp_rxpeek $I19, rx534_bstack, rxcap536_fail1669
    inc $I19
    set $I11, rx534_bstack[$I19]
    repr_bind_attr_int rx534_cur, rx534_curclass, "$!pos", rx534_pos
    $P11 = rx534_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx534_pos)
    rx534_cstack = rx534_cur."!cursor_capture"($P11, "sym")
    goto rxcap536_done1668
  rxcap536_fail1669:
    goto rx534_fail1661
  rxcap536_done1668:
    le rx534_pos, 0, rx534_fail1661
    is_cclass $I11, .CCLASS_WORD, rx534_tgt, rx534_pos
    if $I11, rx534_fail1661
    sub $I11, rx534_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx534_tgt, $I11
    unless $I11, rx534_fail1661
    rx534_cur."!cursor_pass"(rx534_pos, "mod_ident:sym<dba>", 'backtrack'=>1)
    .return (rx534_cur)
  rx534_restart1660:
    repr_get_attr_obj rx534_cstack, rx534_cur, rx534_curclass, "$!cstack"
  rx534_fail1661:
    unless rx534_bstack, rx534_done1659
    pop $I19, rx534_bstack
    if_null rx534_cstack, rx534_cstack_done1664
    unless rx534_cstack, rx534_cstack_done1664
    dec $I19
    set $P11, rx534_cstack[$I19]
  rx534_cstack_done1664:
    pop rx534_rep, rx534_bstack
    pop rx534_pos, rx534_bstack
    pop $I19, rx534_bstack
    lt rx534_pos, -1, rx534_done1659
    lt rx534_pos, 0, rx534_fail1661
    eq $I19, 0, rx534_fail1661
    nqp_islist $I20, rx534_cstack
    unless $I20, rx534_jump1662
    elements $I18, rx534_bstack
    le $I18, 0, rx534_cut1663
    dec $I18
    set $I18, rx534_bstack[$I18]
  rx534_cut1663:
    assign rx534_cstack, $I18
  rx534_jump1662:
    jump $I19
  rx534_done1659:
    rx534_cur."!cursor_fail"()
    .return (rx534_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<oops>" :subid("cuid_123_1381281822.05887") :anon :lex :outer("cuid_204_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 342
    .param pmc _lex_param_0 
    .const 'Sub' $P5008 = 'cuid_220_1381281822.05887' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_124_1381281822.05887' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_221_1381281822.05887' 
    capture_lex $P5008 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx538_start
    .local string rx538_tgt
    .local int rx538_pos
    .local int rx538_off
    .local int rx538_eos
    .local int rx538_rep
    .local pmc rx538_cur
    .local pmc rx538_curclass
    .local pmc rx538_bstack
    .local pmc rx538_cstack
    rx538_start = self."!cursor_start_all"()
    set rx538_cur, rx538_start[0]
    set rx538_tgt, rx538_start[1]
    set rx538_pos, rx538_start[2]
    set rx538_curclass, rx538_start[3]
    set rx538_bstack, rx538_start[4]
    set $I19, rx538_start[5]
    store_lex unicode:"$\x{a2}", rx538_cur
    length rx538_eos, rx538_tgt
    eq $I19, 1, rx538_restart1673
    gt rx538_pos, rx538_eos, rx538_fail1674
    repr_get_attr_int $I11, self, rx538_curclass, "$!from"
    ne $I11, -1, rxscan539_done1680
    goto rxscan539_scan1679
  rxscan539_loop1678:
    inc rx538_pos
    gt rx538_pos, rx538_eos, rx538_fail1674
    repr_bind_attr_int rx538_cur, rx538_curclass, "$!from", rx538_pos
  rxscan539_scan1679:
    nqp_rxmark rx538_bstack, rxscan539_loop1678, rx538_pos, 0
  rxscan539_done1680:
    repr_bind_attr_int rx538_cur, rx538_curclass, "$!pos", rx538_pos
    store_lex unicode:"$\x{a2}", rx538_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_220_1381281822.05887' 
    capture_lex $P5002
    $P5003 = $P5002()
    .const 'Sub' $P5004 = 'cuid_124_1381281822.05887' 
    capture_lex $P5004
    repr_bind_attr_int rx538_cur, rx538_curclass, "$!pos", rx538_pos
    $P11 = rx538_cur.$P5004()
    repr_get_attr_int $I11, $P11, rx538_curclass, "$!pos"
    lt $I11, 0, rx538_fail1674
    nqp_rxmark rx538_bstack, rxsubrule543_pass1693, -1, 0
  rxsubrule543_pass1693:
    rx538_cstack = rx538_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx538_pos, $P11, rx538_curclass, "$!pos"
    repr_bind_attr_int rx538_cur, rx538_curclass, "$!pos", rx538_pos
    store_lex unicode:"$\x{a2}", rx538_cur
    $P5005 = $P101."MATCH"()
    set $P102, $P5005
    .const 'Sub' $P5006 = 'cuid_221_1381281822.05887' 
    capture_lex $P5006
    $P5007 = $P5006()
    rx538_cur."!cursor_pass"(rx538_pos, "mod_ident:sym<oops>", 'backtrack'=>1)
    .return (rx538_cur)
  rx538_restart1673:
    repr_get_attr_obj rx538_cstack, rx538_cur, rx538_curclass, "$!cstack"
  rx538_fail1674:
    unless rx538_bstack, rx538_done1672
    pop $I19, rx538_bstack
    if_null rx538_cstack, rx538_cstack_done1677
    unless rx538_cstack, rx538_cstack_done1677
    dec $I19
    set $P11, rx538_cstack[$I19]
  rx538_cstack_done1677:
    pop rx538_rep, rx538_bstack
    pop rx538_pos, rx538_bstack
    pop $I19, rx538_bstack
    lt rx538_pos, -1, rx538_done1672
    lt rx538_pos, 0, rx538_fail1674
    eq $I19, 0, rx538_fail1674
    nqp_islist $I20, rx538_cstack
    unless $I20, rx538_jump1675
    elements $I18, rx538_bstack
    le $I18, 0, rx538_cut1676
    dec $I18
    set $I18, rx538_bstack[$I18]
  rx538_cut1676:
    assign rx538_cstack, $I18
  rx538_jump1675:
    jump $I19
  rx538_done1672:
    rx538_cur."!cursor_fail"()
    .return (rx538_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_220_1381281822.05887") :anon :lex :outer("cuid_123_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 342

    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_124_1381281822.05887") :anon :lex :outer("cuid_123_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx540_start
    .local string rx540_tgt
    .local int rx540_pos
    .local int rx540_off
    .local int rx540_eos
    .local int rx540_rep
    .local pmc rx540_cur
    .local pmc rx540_curclass
    .local pmc rx540_bstack
    .local pmc rx540_cstack
    rx540_start = self."!cursor_start_all"()
    set rx540_cur, rx540_start[0]
    set rx540_tgt, rx540_start[1]
    set rx540_pos, rx540_start[2]
    set rx540_curclass, rx540_start[3]
    set rx540_bstack, rx540_start[4]
    set $I19, rx540_start[5]
    store_lex unicode:"$\x{a2}", rx540_cur
    length rx540_eos, rx540_tgt
    eq $I19, 1, rx540_restart1683
    gt rx540_pos, rx540_eos, rx540_fail1684
    repr_get_attr_int $I11, self, rx540_curclass, "$!from"
    ne $I11, -1, rxscan541_done1690
    goto rxscan541_scan1689
  rxscan541_loop1688:
    inc rx540_pos
    gt rx540_pos, rx540_eos, rx540_fail1684
    repr_bind_attr_int rx540_cur, rx540_curclass, "$!from", rx540_pos
  rxscan541_scan1689:
    nqp_rxmark rx540_bstack, rxscan541_loop1688, rx540_pos, 0
  rxscan541_done1690:
    nqp_rxmark rx540_bstack, rxquantr542_done1692, -1, 0
  rxquantr542_loop1691:
    ge rx540_pos, rx540_eos, rx540_fail1684
    is_cclass $I11, .CCLASS_WORD, rx540_tgt, rx540_pos
    unless $I11, rx540_fail1684
    add rx540_pos, 1
    nqp_rxpeek $I19, rx540_bstack, rxquantr542_done1692
    inc $I19
    inc $I19
    set rx540_rep, rx540_bstack[$I19]
    nqp_rxcommit rx540_bstack, rxquantr542_done1692
    inc rx540_rep
    nqp_rxmark rx540_bstack, rxquantr542_done1692, rx540_pos, rx540_rep
    goto rxquantr542_loop1691
  rxquantr542_done1692:
    rx540_cur."!cursor_pass"(rx540_pos, 'backtrack'=>1)
    .return (rx540_cur)
  rx540_restart1683:
    repr_get_attr_obj rx540_cstack, rx540_cur, rx540_curclass, "$!cstack"
  rx540_fail1684:
    unless rx540_bstack, rx540_done1682
    pop $I19, rx540_bstack
    if_null rx540_cstack, rx540_cstack_done1687
    unless rx540_cstack, rx540_cstack_done1687
    dec $I19
    set $P11, rx540_cstack[$I19]
  rx540_cstack_done1687:
    pop rx540_rep, rx540_bstack
    pop rx540_pos, rx540_bstack
    pop $I19, rx540_bstack
    lt rx540_pos, -1, rx540_done1682
    lt rx540_pos, 0, rx540_fail1684
    eq $I19, 0, rx540_fail1684
    nqp_islist $I20, rx540_cstack
    unless $I20, rx540_jump1685
    elements $I18, rx540_bstack
    le $I18, 0, rx540_cut1686
    dec $I18
    set $I18, rx540_bstack[$I18]
  rx540_cut1686:
    assign rx540_cstack, $I18
  rx540_jump1685:
    jump $I19
  rx540_done1682:
    rx540_cur."!cursor_fail"()
    .return (rx540_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_221_1381281822.05887") :anon :lex :outer("cuid_123_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 342
    .local pmc fb_tmp_9 
    find_lex $P5001, "$/"
    $P5002 = $P5001."CURSOR"()
    find_lex $P5003, "$/"
    set fb_tmp_9, $P5003
    repr_defined $I5001, fb_tmp_9
    unless $I5001 goto if544_else1694 
    set $P5004, fb_tmp_9[0]
    set $P5006, $P5004
    goto if544_end1695
  if544_else1694:
    null $P5005
    set $P5006, $P5005
  if544_end1695:
    unless_null $P5006, vivi_5451696
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_5451696:
    $P5008 = $P5006."Str"()
    set $S5002, $P5008
    concat $S5001, "Unrecognized regex modifier :", $S5002
    $P5009 = $P5002."panic"($S5001)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_222_1381281822.05887") :anon :lex :outer("cuid_200_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 346
    .const 'Sub' $P5078 = 'cuid_223_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_226_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_125_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_126_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_127_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_128_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_129_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_130_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_131_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_132_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_133_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_134_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_135_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_136_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_137_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_138_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_139_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_140_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_141_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_142_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_143_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_144_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_145_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_146_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_147_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_148_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_149_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_150_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_151_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_152_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_153_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_154_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_155_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_156_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_157_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_158_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_159_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_160_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_161_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_162_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_163_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_164_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_165_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_166_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_167_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_168_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_169_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_170_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_171_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_172_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_173_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_174_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_175_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_176_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_177_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_178_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_179_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_180_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_181_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_182_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_183_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_184_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_185_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_186_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_187_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_188_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_189_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_190_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_191_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_192_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_193_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_194_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_195_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_196_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_197_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_198_1381281822.05887' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_199_1381281822.05887' 
    capture_lex $P5078 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .lex "&backmod", $P103 
    .lex "&capnames", $P104 
    .const 'Sub' $P5001 = 'cuid_223_1381281822.05887' 
    capture_lex $P5001
    set $P103, $P5001
    .const 'Sub' $P5002 = 'cuid_226_1381281822.05887' 
    capture_lex $P5002
    set $P104, $P5002
    .const 'Sub' $P5003 = 'cuid_125_1381281822.05887' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_126_1381281822.05887' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_127_1381281822.05887' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_128_1381281822.05887' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_129_1381281822.05887' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_130_1381281822.05887' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_131_1381281822.05887' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_132_1381281822.05887' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_133_1381281822.05887' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_134_1381281822.05887' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_135_1381281822.05887' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_136_1381281822.05887' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_137_1381281822.05887' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_138_1381281822.05887' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_139_1381281822.05887' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_140_1381281822.05887' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_141_1381281822.05887' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_142_1381281822.05887' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_143_1381281822.05887' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_144_1381281822.05887' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_145_1381281822.05887' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_146_1381281822.05887' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_147_1381281822.05887' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_148_1381281822.05887' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_149_1381281822.05887' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_150_1381281822.05887' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_151_1381281822.05887' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_152_1381281822.05887' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_153_1381281822.05887' 
    capture_lex $P5031
    .const 'Sub' $P5032 = 'cuid_154_1381281822.05887' 
    capture_lex $P5032
    .const 'Sub' $P5033 = 'cuid_155_1381281822.05887' 
    capture_lex $P5033
    .const 'Sub' $P5034 = 'cuid_156_1381281822.05887' 
    capture_lex $P5034
    .const 'Sub' $P5035 = 'cuid_157_1381281822.05887' 
    capture_lex $P5035
    .const 'Sub' $P5036 = 'cuid_158_1381281822.05887' 
    capture_lex $P5036
    .const 'Sub' $P5037 = 'cuid_159_1381281822.05887' 
    capture_lex $P5037
    .const 'Sub' $P5038 = 'cuid_160_1381281822.05887' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_161_1381281822.05887' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_162_1381281822.05887' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_163_1381281822.05887' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_164_1381281822.05887' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_165_1381281822.05887' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_166_1381281822.05887' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_167_1381281822.05887' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_168_1381281822.05887' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_169_1381281822.05887' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_170_1381281822.05887' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_171_1381281822.05887' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_172_1381281822.05887' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_173_1381281822.05887' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_174_1381281822.05887' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_175_1381281822.05887' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_176_1381281822.05887' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_177_1381281822.05887' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_178_1381281822.05887' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_179_1381281822.05887' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_180_1381281822.05887' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_181_1381281822.05887' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_182_1381281822.05887' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_183_1381281822.05887' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_184_1381281822.05887' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_185_1381281822.05887' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_186_1381281822.05887' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_187_1381281822.05887' 
    capture_lex $P5065
    .const 'Sub' $P5066 = 'cuid_188_1381281822.05887' 
    capture_lex $P5066
    .const 'Sub' $P5067 = 'cuid_189_1381281822.05887' 
    capture_lex $P5067
    .const 'Sub' $P5068 = 'cuid_190_1381281822.05887' 
    capture_lex $P5068
    .const 'Sub' $P5069 = 'cuid_191_1381281822.05887' 
    capture_lex $P5069
    .const 'Sub' $P5070 = 'cuid_192_1381281822.05887' 
    capture_lex $P5070
    .const 'Sub' $P5071 = 'cuid_193_1381281822.05887' 
    capture_lex $P5071
    .const 'Sub' $P5072 = 'cuid_194_1381281822.05887' 
    capture_lex $P5072
    .const 'Sub' $P5073 = 'cuid_195_1381281822.05887' 
    capture_lex $P5073
    .const 'Sub' $P5074 = 'cuid_196_1381281822.05887' 
    capture_lex $P5074
    .const 'Sub' $P5075 = 'cuid_197_1381281822.05887' 
    capture_lex $P5075
    .const 'Sub' $P5076 = 'cuid_198_1381281822.05887' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_199_1381281822.05887' 
    capture_lex $P5077
    .return ($P5077) 
.end
.HLL "nqp"
.namespace []
.sub "backmod" :subid("cuid_223_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 991
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$ast", _lex_param_0 
    .lex "$backmod", _lex_param_1 
    set $S5001, _lex_param_1
    iseq $I5001, $S5001, ":"
    unless $I5001 goto if546_else1697 
.annotate 'line', 992
    $P5001 = _lex_param_0."backtrack"("r")
    goto if546_end1698
  if546_else1697:
    set $S5002, _lex_param_1
    iseq $I5002, $S5002, ":?"
    set $I5004, $I5002
    if $I5002 goto unless548_end1702 
    set $S5003, _lex_param_1
    iseq $I5003, $S5003, "?"
    set $I5004, $I5003
  unless548_end1702:
    unless $I5004 goto if547_else1699 
.annotate 'line', 993
    $P5002 = _lex_param_0."backtrack"("f")
    set $P5006, $P5002
    goto if547_end1700
  if547_else1699:
    set $S5004, _lex_param_1
    iseq $I5005, $S5004, ":!"
    set $I5007, $I5005
    if $I5005 goto unless550_end1706 
    set $S5005, _lex_param_1
    iseq $I5006, $S5005, "!"
    set $I5007, $I5006
  unless550_end1706:
    box $P5005, $I5007
    set $P5004, $P5005
    unless $I5007 goto if549_end1704 
.annotate 'line', 994
    $P5003 = _lex_param_0."backtrack"("g")
    set $P5004, $P5003
  if549_end1704:
    set $P5006, $P5004
  if547_end1700:
  if546_end1698:
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "capnames" :subid("cuid_226_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1035
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5024 = 'cuid_225_1381281822.05887' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_229_1381281822.05887' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_231_1381281822.05887' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_233_1381281822.05887' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_236_1381281822.05887' 
    capture_lex $P5024 
    .lex "%capnames", $P101 
    .lex "$rxtype", $P102 
    .lex "$ast", _lex_param_0 
    .lex "$count", _lex_param_1 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P102, $P5002
.annotate 'line', 1037
    $P5003 = _lex_param_0."rxtype"()
    set $P102, $P5003
    set $S5001, $P102
    iseq $I5001, $S5001, "concat"
    unless $I5001 goto if551_else1707 
.annotate 'line', 1038
.annotate 'line', 1039
    $P5007 = _lex_param_0."list"()
    set $P5004, $P5007
    iter $P5006, $P5007
  for_next1718:
    unless $P5006, for_done1720
    shift $P5009, $P5006
  for_redo1719:
    .const 'Sub' $P5008 = 'cuid_225_1381281822.05887' 
    capture_lex $P5008
    $P5004 = $P5008($P5009)
    goto for_next1718
  for_done1720:
    goto if551_end1708
  if551_else1707:
    set $S5002, $P102
    iseq $I5002, $S5002, "altseq"
    set $I5004, $I5002
    if $I5002 goto unless557_end1724 
    set $S5003, $P102
    iseq $I5003, $S5003, "alt"
    set $I5004, $I5003
  unless557_end1724:
    unless $I5004 goto if556_else1721 
    .const 'Sub' $P5010 = 'cuid_229_1381281822.05887' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5023, $P5011
    goto if556_end1722
  if556_else1721:
    set $S5004, $P102
    iseq $I5005, $S5004, "subrule"
    set $I5007, $I5005
    unless $I5005 goto if570_end1752 
.annotate 'line', 1056
    $P5012 = _lex_param_0."subtype"()
    set $S5005, $P5012
    iseq $I5006, $S5005, "capture"
    set $I5007, $I5006
  if570_end1752:
    unless $I5007 goto if569_else1749 
    .const 'Sub' $P5013 = 'cuid_231_1381281822.05887' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5022, $P5014
    goto if569_end1750
  if569_else1749:
    set $S5006, $P102
    iseq $I5008, $S5006, "subcapture"
    unless $I5008 goto if574_else1762 
    .const 'Sub' $P5015 = 'cuid_233_1381281822.05887' 
    capture_lex $P5015
    $P5016 = $P5015()
    set $P5021, $P5016
    goto if574_end1763
  if574_else1762:
    set $S5007, $P102
    iseq $I5009, $S5007, "quant"
    box $P5020, $I5009
    set $P5019, $P5020
    unless $I5009 goto if585_end1787 
    .const 'Sub' $P5017 = 'cuid_236_1381281822.05887' 
    capture_lex $P5017
    $P5018 = $P5017()
    set $P5019, $P5018
  if585_end1787:
    set $P5021, $P5019
  if574_end1763:
    set $P5022, $P5021
  if569_end1750:
    set $P5023, $P5022
  if556_end1722:
  if551_end1708:
    set $P101[""], _lex_param_1
    delete $P101["$!from"]
    delete $P101["$!to"]
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_225_1381281822.05887") :anon :lex :outer("cuid_226_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1039
    .param pmc _lex_param_0 
    .const 'Sub' $P5013 = 'cuid_224_1381281822.05887' 
    capture_lex $P5013 
    .lex "%x", $P101 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_11 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 1040
    find_lex $P5002, "$count"
    $P5003 = "&capnames"(_lex_param_0, $P5002)
    set $P101, $P5003
    set $P5004, $P101
    iter $P5006, $P101
  for_next1712:
    unless $P5006, for_done1714
    shift $P5008, $P5006
  for_redo1713:
    .const 'Sub' $P5007 = 'cuid_224_1381281822.05887' 
    capture_lex $P5007
    $P5004 = $P5007($P5008)
    goto for_next1712
  for_done1714:
    set fb_tmp_11, $P101
    repr_defined $I5001, fb_tmp_11
    unless $I5001 goto if554_else1715 
    set $P5009, fb_tmp_11[""]
    set $P5011, $P5009
    goto if554_end1716
  if554_else1715:
    null $P5010
    set $P5011, $P5010
  if554_end1716:
    unless_null $P5011, vivi_5551717
    nqp_get_sc_object $P5012, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5011, $P5012
  vivi_5551717:
    store_lex "$count", $P5011
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_224_1381281822.05887") :anon :lex :outer("cuid_225_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1041
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_10 
    find_lex $P5001, "%capnames"
    $P5002 = _lex_param_0."key"()
    set $S5001, $P5002
    find_lex $P5003, "%capnames"
    set fb_tmp_10, $P5003
    repr_defined $I5001, fb_tmp_10
    unless $I5001 goto if552_else1709 
    $P5005 = _lex_param_0."key"()
    set $S5002, $P5005
    set $P5004, fb_tmp_10[$S5002]
    set $P5007, $P5004
    goto if552_end1710
  if552_else1709:
    null $P5006
    set $P5007, $P5006
  if552_end1710:
    unless_null $P5007, vivi_5531711
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5007, $P5008
  vivi_5531711:
    set $N5002, $P5007
    $P5009 = _lex_param_0."value"()
    set $N5003, $P5009
    add $N5001, $N5002, $N5003
    box $P5010, $N5001
    set $P5001[$S5001], $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_229_1381281822.05887") :anon :lex :outer("cuid_226_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1045
    .const 'Sub' $P5010 = 'cuid_228_1381281822.05887' 
    capture_lex $P5010 
    .lex "$max", $P101 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
    find_lex $P5002, "$count"
    set $P101, $P5002
.annotate 'line', 1047
    find_lex $P5006, "$ast"
    $P5007 = $P5006."list"()
    set $P5003, $P5007
    iter $P5005, $P5007
  for_next1746:
    unless $P5005, for_done1748
    shift $P5009, $P5005
  for_redo1747:
    .const 'Sub' $P5008 = 'cuid_228_1381281822.05887' 
    capture_lex $P5008
    $P5003 = $P5008($P5009)
    goto for_next1746
  for_done1748:
    store_lex "$count", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_228_1381281822.05887") :anon :lex :outer("cuid_229_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1047
    .param pmc _lex_param_0 
    .const 'Sub' $P5020 = 'cuid_227_1381281822.05887' 
    capture_lex $P5020 
    .lex "%x", $P101 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_14 
    .local pmc fb_tmp_15 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 1048
    find_lex $P5002, "$count"
    $P5003 = "&capnames"(_lex_param_0, $P5002)
    set $P101, $P5003
    set $P5004, $P101
    iter $P5006, $P101
  for_next1735:
    unless $P5006, for_done1737
    shift $P5008, $P5006
  for_redo1736:
    .const 'Sub' $P5007 = 'cuid_227_1381281822.05887' 
    capture_lex $P5007
    $P5004 = $P5007($P5008)
    goto for_next1735
  for_done1737:
    set fb_tmp_14, $P101
    repr_defined $I5002, fb_tmp_14
    unless $I5002 goto if565_else1740 
    set $P5009, fb_tmp_14[""]
    set $P5011, $P5009
    goto if565_end1741
  if565_else1740:
    null $P5010
    set $P5011, $P5010
  if565_end1741:
    unless_null $P5011, vivi_5661742
    nqp_get_sc_object $P5012, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5011, $P5012
  vivi_5661742:
    set $N5001, $P5011
    find_lex $P5013, "$max"
    set $N5002, $P5013
    isgt $I5001, $N5001, $N5002
    box $P5019, $I5001
    set $P5018, $P5019
    unless $I5001 goto if564_end1739 
    set fb_tmp_15, $P101
    repr_defined $I5003, fb_tmp_15
    unless $I5003 goto if567_else1743 
    set $P5014, fb_tmp_15[""]
    set $P5016, $P5014
    goto if567_end1744
  if567_else1743:
    null $P5015
    set $P5016, $P5015
  if567_end1744:
    unless_null $P5016, vivi_5681745
    nqp_get_sc_object $P5017, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5016, $P5017
  vivi_5681745:
    store_lex "$max", $P5016
    set $P5018, $P5016
  if564_end1739:
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_227_1381281822.05887") :anon :lex :outer("cuid_228_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1049
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_12 
    .local pmc fb_tmp_13 
    find_lex $P5001, "%capnames"
.annotate 'line', 1050
    $P5002 = _lex_param_0."key"()
    set $S5001, $P5002
    find_lex $P5003, "%capnames"
    set fb_tmp_12, $P5003
    repr_defined $I5002, fb_tmp_12
    unless $I5002 goto if560_else1729 
    $P5005 = _lex_param_0."key"()
    set $S5002, $P5005
    set $P5004, fb_tmp_12[$S5002]
    set $P5007, $P5004
    goto if560_end1730
  if560_else1729:
    null $P5006
    set $P5007, $P5006
  if560_end1730:
    unless_null $P5007, vivi_5611731
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5007, $P5008
  vivi_5611731:
    set $N5001, $P5007
    set $N5002, 2
    islt $I5001, $N5001, $N5002
    set $I5005, $I5001
    unless $I5001 goto if559_end1728 
    find_lex $P5009, "%x"
    set fb_tmp_13, $P5009
    repr_defined $I5004, fb_tmp_13
    unless $I5004 goto if562_else1732 
    $P5011 = _lex_param_0."key"()
    set $S5003, $P5011
    set $P5010, fb_tmp_13[$S5003]
    set $P5013, $P5010
    goto if562_end1733
  if562_else1732:
    null $P5012
    set $P5013, $P5012
  if562_end1733:
    unless_null $P5013, vivi_5631734
    nqp_get_sc_object $P5014, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5013, $P5014
  vivi_5631734:
    set $N5003, $P5013
    set $N5004, 1
    iseq $I5003, $N5003, $N5004
    set $I5005, $I5003
  if559_end1728:
    unless $I5005 goto if558_else1725 
    set $I5006, 1
    goto if558_end1726
  if558_else1725:
    set $I5006, 2
  if558_end1726:
    box $P5015, $I5006
    set $P5001[$S5001], $P5015
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_231_1381281822.05887") :anon :lex :outer("cuid_226_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1056
    .const 'Sub' $P5014 = 'cuid_230_1381281822.05887' 
    capture_lex $P5014 
    .lex "$name", $P101 
    .lex "@names", $P102 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
.annotate 'line', 1057
    find_lex $P5003, "$ast"
    $P5004 = $P5003."name"()
    set $P101, $P5004
    set $S5001, $P101
    iseq $I5001, $S5001, ""
    unless $I5001 goto if571_end1754 
.annotate 'line', 1058
    find_lex $P5005, "$count"
    set $P101, $P5005
    find_lex $P5006, "$ast"
    $P5007 = $P5006."name"($P101)
  if571_end1754:
    set $S5002, $P101
    split $P5008, "=", $S5002
    set $P102, $P5008
    set $P5009, $P102
    iter $P5011, $P102
  for_next1759:
    unless $P5011, for_done1761
    shift $P5013, $P5011
  for_redo1760:
    .const 'Sub' $P5012 = 'cuid_230_1381281822.05887' 
    capture_lex $P5012
    $P5009 = $P5012($P5013)
    goto for_next1759
  for_done1761:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_230_1381281822.05887") :anon :lex :outer("cuid_231_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1060
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    set $S5001, _lex_param_0
    iseq $I5001, $S5001, "0"
    set $I5003, $I5001
    if $I5001 goto unless573_end1758 
    set $N5001, _lex_param_0
    set $N5002, 0
    isgt $I5002, $N5001, $N5002
    set $I5003, $I5002
  unless573_end1758:
    unless $I5003 goto if572_end1756 
.annotate 'line', 1061
    set $N5004, _lex_param_0
    set $N5005, 1
    add $N5003, $N5004, $N5005
    box $P5001, $N5003
    store_lex "$count", $P5001
  if572_end1756:
    find_lex $P5002, "%capnames"
    set $S5002, _lex_param_0
    box $P5003, 1
    set $P5002[$S5002], $P5003
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_233_1381281822.05887") :anon :lex :outer("cuid_226_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1065
    .const 'Sub' $P5026 = 'cuid_232_1381281822.05887' 
    capture_lex $P5026 
    .const 'Sub' $P5026 = 'cuid_234_1381281822.05887' 
    capture_lex $P5026 
    .lex "%x", $P101 
    .local pmc fb_tmp_16 
    .local pmc fb_tmp_19 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 1066
    find_lex $P5006, "$ast"
    $P5007 = $P5006."name"()
    set $S5001, $P5007
    split $P5005, " ", $S5001
    set $P5002, $P5005
    iter $P5004, $P5005
  for_next1768:
    unless $P5004, for_done1770
    shift $P5009, $P5004
  for_redo1769:
    .const 'Sub' $P5008 = 'cuid_232_1381281822.05887' 
    capture_lex $P5008
    $P5002 = $P5008($P5009)
    goto for_next1768
  for_done1770:
.annotate 'line', 1070
    find_lex $P5010, "$ast"
    set fb_tmp_16, $P5010
    repr_defined $I5001, fb_tmp_16
    unless $I5001 goto if577_else1771 
    set $P5011, fb_tmp_16[0]
    set $P5013, $P5011
    goto if577_end1772
  if577_else1771:
    null $P5012
    set $P5013, $P5012
  if577_end1772:
    unless_null $P5013, vivi_5781773
    nqp_get_sc_object $P5014, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5013, $P5014
  vivi_5781773:
    find_lex $P5015, "$count"
    $P5016 = "&capnames"($P5013, $P5015)
    set $P101, $P5016
    set $P5017, $P101
    iter $P5019, $P101
  for_next1780:
    unless $P5019, for_done1782
    shift $P5021, $P5019
  for_redo1781:
    .const 'Sub' $P5020 = 'cuid_234_1381281822.05887' 
    capture_lex $P5020
    $P5017 = $P5020($P5021)
    goto for_next1780
  for_done1782:
    set fb_tmp_19, $P101
    repr_defined $I5002, fb_tmp_19
    unless $I5002 goto if583_else1783 
    set $P5022, fb_tmp_19[""]
    set $P5024, $P5022
    goto if583_end1784
  if583_else1783:
    null $P5023
    set $P5024, $P5023
  if583_end1784:
    unless_null $P5024, vivi_5841785
    nqp_get_sc_object $P5025, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5024, $P5025
  vivi_5841785:
    store_lex "$count", $P5024
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_232_1381281822.05887") :anon :lex :outer("cuid_233_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1066
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    set $S5001, _lex_param_0
    iseq $I5001, $S5001, "0"
    set $I5003, $I5001
    if $I5001 goto unless576_end1767 
    set $N5001, _lex_param_0
    set $N5002, 0
    isgt $I5002, $N5001, $N5002
    set $I5003, $I5002
  unless576_end1767:
    unless $I5003 goto if575_end1765 
.annotate 'line', 1067
    set $N5004, _lex_param_0
    set $N5005, 1
    add $N5003, $N5004, $N5005
    box $P5001, $N5003
    store_lex "$count", $P5001
  if575_end1765:
    find_lex $P5002, "%capnames"
    set $S5002, _lex_param_0
    box $P5003, 1
    set $P5002[$S5002], $P5003
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_234_1381281822.05887") :anon :lex :outer("cuid_233_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1071
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_17 
    .local pmc fb_tmp_18 
    find_lex $P5001, "%capnames"
    $P5002 = _lex_param_0."key"()
    set $S5001, $P5002
    find_lex $P5003, "%capnames"
    set fb_tmp_17, $P5003
    repr_defined $I5001, fb_tmp_17
    unless $I5001 goto if579_else1774 
    $P5005 = _lex_param_0."key"()
    set $S5002, $P5005
    set $P5004, fb_tmp_17[$S5002]
    set $P5007, $P5004
    goto if579_end1775
  if579_else1774:
    null $P5006
    set $P5007, $P5006
  if579_end1775:
    unless_null $P5007, vivi_5801776
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5007, $P5008
  vivi_5801776:
    set $N5002, $P5007
    find_lex $P5009, "%x"
    set fb_tmp_18, $P5009
    repr_defined $I5002, fb_tmp_18
    unless $I5002 goto if581_else1777 
    $P5011 = _lex_param_0."key"()
    set $S5003, $P5011
    set $P5010, fb_tmp_18[$S5003]
    set $P5013, $P5010
    goto if581_end1778
  if581_else1777:
    null $P5012
    set $P5013, $P5012
  if581_end1778:
    unless_null $P5013, vivi_5821779
    nqp_get_sc_object $P5014, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5013, $P5014
  vivi_5821779:
    set $N5003, $P5013
    add $N5001, $N5002, $N5003
    box $P5015, $N5001
    set $P5001[$S5001], $P5015
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_236_1381281822.05887") :anon :lex :outer("cuid_226_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1074
    .const 'Sub' $P5030 = 'cuid_235_1381281822.05887' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_238_1381281822.05887' 
    capture_lex $P5030 
    .lex "$ilist", $P101 
    .lex "%astcap", $P102 
    .local pmc fb_tmp_20 
    .local pmc fb_tmp_21 
    .local pmc fb_tmp_22 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
.annotate 'line', 1075
    find_lex $P5003, "$ast"
    $P5004 = $P5003."subtype"()
    set $S5001, $P5004
    iseq $I5001, $S5001, "item"
    box $P5005, $I5001
    set $P101, $P5005
.annotate 'line', 1076
    find_lex $P5006, "$ast"
    set fb_tmp_20, $P5006
    repr_defined $I5002, fb_tmp_20
    unless $I5002 goto if586_else1788 
    set $P5007, fb_tmp_20[0]
    set $P5009, $P5007
    goto if586_end1789
  if586_else1788:
    null $P5008
    set $P5009, $P5008
  if586_end1789:
    unless_null $P5009, vivi_5871790
    nqp_get_sc_object $P5010, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5009, $P5010
  vivi_5871790:
    find_lex $P5011, "$count"
    $P5012 = "&capnames"($P5009, $P5011)
    set $P102, $P5012
    set $P5013, $P102
    iter $P5015, $P102
  for_next1793:
    unless $P5015, for_done1795
    shift $P5017, $P5015
  for_redo1794:
    .const 'Sub' $P5016 = 'cuid_235_1381281822.05887' 
    capture_lex $P5016
    $P5013 = $P5016($P5017)
    goto for_next1793
  for_done1795:
    set fb_tmp_21, $P102
    repr_defined $I5003, fb_tmp_21
    unless $I5003 goto if589_else1796 
    set $P5018, fb_tmp_21[""]
    set $P5020, $P5018
    goto if589_end1797
  if589_else1796:
    null $P5019
    set $P5020, $P5019
  if589_end1797:
    unless_null $P5020, vivi_5901798
    nqp_get_sc_object $P5021, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5020, $P5021
  vivi_5901798:
    store_lex "$count", $P5020
    find_lex $P5022, "$ast"
    set fb_tmp_22, $P5022
    repr_defined $I5004, fb_tmp_22
    unless $I5004 goto if592_else1801 
    set $P5023, fb_tmp_22[1]
    set $P5025, $P5023
    goto if592_end1802
  if592_else1801:
    null $P5024
    set $P5025, $P5024
  if592_end1802:
    unless_null $P5025, vivi_5931803
    nqp_get_sc_object $P5026, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5025, $P5026
  vivi_5931803:
    set $P5029, $P5025
    unless $P5025 goto if591_end1800 
    .const 'Sub' $P5027 = 'cuid_238_1381281822.05887' 
    capture_lex $P5027
    $P5028 = $P5027()
    set $P5029, $P5028
  if591_end1800:
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_235_1381281822.05887") :anon :lex :outer("cuid_236_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1077
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "%capnames"
    $P5002 = _lex_param_0."key"()
    set $S5001, $P5002
    find_lex $P5003, "$ilist"
    unless $P5003 goto if588_else1791 
    $P5004 = _lex_param_0."value"()
    set $P5005, $P5004
    goto if588_end1792
  if588_else1791:
    box $P5006, 2
    set $P5005, $P5006
  if588_end1792:
    set $P5001[$S5001], $P5005
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_238_1381281822.05887") :anon :lex :outer("cuid_236_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1079
    .const 'Sub' $P5018 = 'cuid_237_1381281822.05887' 
    capture_lex $P5018 
    .lex "%astcap", $P101 
    .local pmc fb_tmp_23 
    .local pmc fb_tmp_24 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 1081
    find_lex $P5002, "$ast"
    set fb_tmp_23, $P5002
    repr_defined $I5001, fb_tmp_23
    unless $I5001 goto if594_else1804 
    set $P5003, fb_tmp_23[1]
    set $P5005, $P5003
    goto if594_end1805
  if594_else1804:
    null $P5004
    set $P5005, $P5004
  if594_end1805:
    unless_null $P5005, vivi_5951806
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5005, $P5006
  vivi_5951806:
    find_lex $P5007, "$count"
    $P5008 = "&capnames"($P5005, $P5007)
    set $P101, $P5008
    set $P5009, $P101
    iter $P5011, $P101
  for_next1809:
    unless $P5011, for_done1811
    shift $P5013, $P5011
  for_redo1810:
    .const 'Sub' $P5012 = 'cuid_237_1381281822.05887' 
    capture_lex $P5012
    $P5009 = $P5012($P5013)
    goto for_next1809
  for_done1811:
    set fb_tmp_24, $P101
    repr_defined $I5002, fb_tmp_24
    unless $I5002 goto if597_else1812 
    set $P5014, fb_tmp_24[""]
    set $P5016, $P5014
    goto if597_end1813
  if597_else1812:
    null $P5015
    set $P5016, $P5015
  if597_end1813:
    unless_null $P5016, vivi_5981814
    nqp_get_sc_object $P5017, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5016, $P5017
  vivi_5981814:
    store_lex "$count", $P5016
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_237_1381281822.05887") :anon :lex :outer("cuid_238_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1082
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "%capnames"
    $P5002 = _lex_param_0."key"()
    set $S5001, $P5002
    find_lex $P5003, "$ilist"
    unless $P5003 goto if596_else1807 
    $P5004 = _lex_param_0."value"()
    set $P5005, $P5004
    goto if596_end1808
  if596_else1807:
    box $P5006, 2
    set $P5005, $P5006
  if596_end1808:
    set $P5001[$S5001], $P5005
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_125_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 347
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_25 
    .local pmc fb_tmp_26 
    .local pmc fb_tmp_27 
    .local pmc fb_tmp_28 
    .local pmc fb_tmp_29 
.annotate 'line', 348
    nqp_get_sc_object $P5001, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 120
.annotate 'line', 350
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback1815
    nqp_get_sc_object $P5004, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 0
    get_who $P5003, $P5004
    set fb_tmp_25, $P5003
    repr_defined $I5001, fb_tmp_25
    unless $I5001 goto if599_else1816 
    set $P5005, fb_tmp_25["$W"]
    set $P5007, $P5005
    goto if599_end1817
  if599_else1816:
    null $P5006
    set $P5007, $P5006
  if599_end1817:
    unless_null $P5007, vivi_6001818
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5007, $P5008
  vivi_6001818:
    unless_null $P5007, vivi_6011819
    die "Contextual $*W not found"
    box $P5009, "Contextual $*W not found"
    set $P5007, $P5009
  vivi_6011819:
    set $P5002, $P5007
  fallback1815:
    $P5010 = $P5002."sc"()
.annotate 'line', 351
    find_dynamic_lex $P5011, "$*W"
    unless_null $P5011, fallback1820
    nqp_get_sc_object $P5013, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 0
    get_who $P5012, $P5013
    set fb_tmp_26, $P5012
    repr_defined $I5002, fb_tmp_26
    unless $I5002 goto if602_else1821 
    set $P5014, fb_tmp_26["$W"]
    set $P5016, $P5014
    goto if602_end1822
  if602_else1821:
    null $P5015
    set $P5016, $P5015
  if602_end1822:
    unless_null $P5016, vivi_6031823
    nqp_get_sc_object $P5017, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5016, $P5017
  vivi_6031823:
    unless_null $P5016, vivi_6041824
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5016, $P5018
  vivi_6041824:
    set $P5011, $P5016
  fallback1820:
    $P5019 = $P5011."code_ref_blocks"()
.annotate 'line', 353
    find_dynamic_lex $P5020, "$*W"
    unless_null $P5020, fallback1825
    nqp_get_sc_object $P5022, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 0
    get_who $P5021, $P5022
    set fb_tmp_27, $P5021
    repr_defined $I5003, fb_tmp_27
    unless $I5003 goto if605_else1826 
    set $P5023, fb_tmp_27["$W"]
    set $P5025, $P5023
    goto if605_end1827
  if605_else1826:
    null $P5024
    set $P5025, $P5024
  if605_end1827:
    unless_null $P5025, vivi_6061828
    nqp_get_sc_object $P5026, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5025, $P5026
  vivi_6061828:
    unless_null $P5025, vivi_6071829
    die "Contextual $*W not found"
    box $P5027, "Contextual $*W not found"
    set $P5025, $P5027
  vivi_6071829:
    set $P5020, $P5025
  fallback1825:
    $P5028 = $P5020."load_dependency_tasks"()
.annotate 'line', 354
    find_dynamic_lex $P5029, "$*W"
    unless_null $P5029, fallback1830
    nqp_get_sc_object $P5031, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 0
    get_who $P5030, $P5031
    set fb_tmp_28, $P5030
    repr_defined $I5004, fb_tmp_28
    unless $I5004 goto if608_else1831 
    set $P5032, fb_tmp_28["$W"]
    set $P5034, $P5032
    goto if608_end1832
  if608_else1831:
    null $P5033
    set $P5034, $P5033
  if608_end1832:
    unless_null $P5034, vivi_6091833
    nqp_get_sc_object $P5035, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5034, $P5035
  vivi_6091833:
    unless_null $P5034, vivi_6101834
    die "Contextual $*W not found"
    box $P5036, "Contextual $*W not found"
    set $P5034, $P5036
  vivi_6101834:
    set $P5029, $P5034
  fallback1830:
    $P5037 = $P5029."fixup_tasks"()
.annotate 'line', 355
    nqp_decontainerize $P5038, _lex_param_0
    unless_null _lex_param_1, fallback1837
    nqp_get_sc_object $P5039, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5039
  fallback1837:
    set fb_tmp_29, _lex_param_1
    repr_defined $I5005, fb_tmp_29
    unless $I5005 goto if611_else1835 
    set $P5040, fb_tmp_29["nibbler"]
    set $P5042, $P5040
    goto if611_end1836
  if611_else1835:
    null $P5041
    set $P5042, $P5041
  if611_end1836:
    unless_null $P5042, vivi_6121838
    nqp_get_sc_object $P5043, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5042, $P5043
  vivi_6121838:
    $P5044 = $P5042."ast"()
    $P5045 = $P5038."qbuildsub"($P5044, 1 :named("anon"), 1 :named("addself"))
    $P5046 = $P5001."new"($P5045, "P6Regex" :named("hll"), $P5010 :named("sc"), $P5019 :named("code_ref_blocks"), 0 :named("compilation_mode"), $P5028 :named("pre_deserialize"), $P5037 :named("post_deserialize"))
    $P5047 = _lex_param_1."!make"($P5046)
    .return ($P5047) 
.end
.HLL "nqp"
.namespace []
.sub "nibbler" :subid("cuid_126_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 359
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_30 
    unless_null _lex_param_1, fallback1841
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5001
  fallback1841:
    set fb_tmp_30, _lex_param_1
    repr_defined $I5001, fb_tmp_30
    unless $I5001 goto if613_else1839 
    set $P5002, fb_tmp_30["termaltseq"]
    set $P5004, $P5002
    goto if613_end1840
  if613_else1839:
    null $P5003
    set $P5004, $P5003
  if613_end1840:
    unless_null $P5004, vivi_6141842
    nqp_get_sc_object $P5005, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5004, $P5005
  vivi_6141842:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "termaltseq" :subid("cuid_127_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 361
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_239_1381281822.05887' 
    capture_lex $P5030 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_31 
    .local pmc fb_tmp_32 
    .local pmc fb_tmp_33 
    .local pmc fb_tmp_34 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 362
    unless_null _lex_param_1, fallback1847
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5002
  fallback1847:
    set fb_tmp_32, _lex_param_1
    repr_defined $I5002, fb_tmp_32
    unless $I5002 goto if616_else1845 
    set $P5003, fb_tmp_32["termconjseq"]
    set $P5005, $P5003
    goto if616_end1846
  if616_else1845:
    null $P5004
    set $P5005, $P5004
  if616_end1846:
    unless_null $P5005, vivi_6171848
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5005, $P5006
  vivi_6171848:
    set fb_tmp_31, $P5005
    repr_defined $I5001, fb_tmp_31
    unless $I5001 goto if615_else1843 
    set $P5007, fb_tmp_31[0]
    set $P5009, $P5007
    goto if615_end1844
  if615_else1843:
    null $P5008
    set $P5009, $P5008
  if615_end1844:
    unless_null $P5009, vivi_6181849
    nqp_get_sc_object $P5010, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5009, $P5010
  vivi_6181849:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
    unless_null _lex_param_1, fallback1854
    nqp_get_sc_object $P5012, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5012
  fallback1854:
    set fb_tmp_33, _lex_param_1
    repr_defined $I5004, fb_tmp_33
    unless $I5004 goto if620_else1852 
    set $P5013, fb_tmp_33["termconjseq"]
    set $P5015, $P5013
    goto if620_end1853
  if620_else1852:
    null $P5014
    set $P5015, $P5014
  if620_end1853:
    unless_null $P5015, vivi_6211855
    nqp_get_sc_object $P5016, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5015, $P5016
  vivi_6211855:
    set $N5001, $P5015
    set $N5002, 1
    isgt $I5003, $N5001, $N5002
    unless $I5003 goto if619_end1851 
.annotate 'line', 363
.annotate 'line', 364
    nqp_get_sc_object $P5017, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5018 = $P5017."new"("altseq" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5018
    unless_null _lex_param_1, fallback1858
    nqp_get_sc_object $P5022, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5022
  fallback1858:
    set fb_tmp_34, _lex_param_1
    repr_defined $I5005, fb_tmp_34
    unless $I5005 goto if622_else1856 
    set $P5023, fb_tmp_34["termconjseq"]
    set $P5025, $P5023
    goto if622_end1857
  if622_else1856:
    null $P5024
    set $P5025, $P5024
  if622_end1857:
    unless_null $P5025, vivi_6231859
    nqp_get_sc_object $P5026, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5025, $P5026
  vivi_6231859:
    set $P5019, $P5025
    iter $P5021, $P5025
  for_next1860:
    unless $P5021, for_done1862
    shift $P5028, $P5021
  for_redo1861:
    .const 'Sub' $P5027 = 'cuid_239_1381281822.05887' 
    capture_lex $P5027
    $P5019 = $P5027($P5028)
    goto for_next1860
  for_done1862:
  if619_end1851:
.annotate 'line', 367
    $P5029 = _lex_param_1."!make"($P101)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_239_1381281822.05887") :anon :lex :outer("cuid_127_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 365
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termconjseq" :subid("cuid_128_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 370
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_240_1381281822.05887' 
    capture_lex $P5030 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_35 
    .local pmc fb_tmp_36 
    .local pmc fb_tmp_37 
    .local pmc fb_tmp_38 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 371
    unless_null _lex_param_1, fallback1867
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5002
  fallback1867:
    set fb_tmp_36, _lex_param_1
    repr_defined $I5002, fb_tmp_36
    unless $I5002 goto if625_else1865 
    set $P5003, fb_tmp_36["termalt"]
    set $P5005, $P5003
    goto if625_end1866
  if625_else1865:
    null $P5004
    set $P5005, $P5004
  if625_end1866:
    unless_null $P5005, vivi_6261868
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5005, $P5006
  vivi_6261868:
    set fb_tmp_35, $P5005
    repr_defined $I5001, fb_tmp_35
    unless $I5001 goto if624_else1863 
    set $P5007, fb_tmp_35[0]
    set $P5009, $P5007
    goto if624_end1864
  if624_else1863:
    null $P5008
    set $P5009, $P5008
  if624_end1864:
    unless_null $P5009, vivi_6271869
    nqp_get_sc_object $P5010, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5009, $P5010
  vivi_6271869:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
    unless_null _lex_param_1, fallback1874
    nqp_get_sc_object $P5012, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5012
  fallback1874:
    set fb_tmp_37, _lex_param_1
    repr_defined $I5004, fb_tmp_37
    unless $I5004 goto if629_else1872 
    set $P5013, fb_tmp_37["termalt"]
    set $P5015, $P5013
    goto if629_end1873
  if629_else1872:
    null $P5014
    set $P5015, $P5014
  if629_end1873:
    unless_null $P5015, vivi_6301875
    nqp_get_sc_object $P5016, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5015, $P5016
  vivi_6301875:
    set $N5001, $P5015
    set $N5002, 1
    isgt $I5003, $N5001, $N5002
    unless $I5003 goto if628_end1871 
.annotate 'line', 372
.annotate 'line', 373
    nqp_get_sc_object $P5017, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5018 = $P5017."new"("conjseq" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5018
    unless_null _lex_param_1, fallback1878
    nqp_get_sc_object $P5022, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5022
  fallback1878:
    set fb_tmp_38, _lex_param_1
    repr_defined $I5005, fb_tmp_38
    unless $I5005 goto if631_else1876 
    set $P5023, fb_tmp_38["termalt"]
    set $P5025, $P5023
    goto if631_end1877
  if631_else1876:
    null $P5024
    set $P5025, $P5024
  if631_end1877:
    unless_null $P5025, vivi_6321879
    nqp_get_sc_object $P5026, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5025, $P5026
  vivi_6321879:
    set $P5019, $P5025
    iter $P5021, $P5025
  for_next1880:
    unless $P5021, for_done1882
    shift $P5028, $P5021
  for_redo1881:
    .const 'Sub' $P5027 = 'cuid_240_1381281822.05887' 
    capture_lex $P5027
    $P5019 = $P5027($P5028)
    goto for_next1880
  for_done1882:
  if628_end1871:
.annotate 'line', 376
    $P5029 = _lex_param_1."!make"($P101)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_240_1381281822.05887") :anon :lex :outer("cuid_128_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 374
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termalt" :subid("cuid_129_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 379
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_241_1381281822.05887' 
    capture_lex $P5030 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_39 
    .local pmc fb_tmp_40 
    .local pmc fb_tmp_41 
    .local pmc fb_tmp_42 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 380
    unless_null _lex_param_1, fallback1887
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5002
  fallback1887:
    set fb_tmp_40, _lex_param_1
    repr_defined $I5002, fb_tmp_40
    unless $I5002 goto if634_else1885 
    set $P5003, fb_tmp_40["termconj"]
    set $P5005, $P5003
    goto if634_end1886
  if634_else1885:
    null $P5004
    set $P5005, $P5004
  if634_end1886:
    unless_null $P5005, vivi_6351888
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5005, $P5006
  vivi_6351888:
    set fb_tmp_39, $P5005
    repr_defined $I5001, fb_tmp_39
    unless $I5001 goto if633_else1883 
    set $P5007, fb_tmp_39[0]
    set $P5009, $P5007
    goto if633_end1884
  if633_else1883:
    null $P5008
    set $P5009, $P5008
  if633_end1884:
    unless_null $P5009, vivi_6361889
    nqp_get_sc_object $P5010, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5009, $P5010
  vivi_6361889:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
    unless_null _lex_param_1, fallback1894
    nqp_get_sc_object $P5012, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5012
  fallback1894:
    set fb_tmp_41, _lex_param_1
    repr_defined $I5004, fb_tmp_41
    unless $I5004 goto if638_else1892 
    set $P5013, fb_tmp_41["termconj"]
    set $P5015, $P5013
    goto if638_end1893
  if638_else1892:
    null $P5014
    set $P5015, $P5014
  if638_end1893:
    unless_null $P5015, vivi_6391895
    nqp_get_sc_object $P5016, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5015, $P5016
  vivi_6391895:
    set $N5001, $P5015
    set $N5002, 1
    isgt $I5003, $N5001, $N5002
    unless $I5003 goto if637_end1891 
.annotate 'line', 381
.annotate 'line', 382
    nqp_get_sc_object $P5017, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5018 = $P5017."new"("alt" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5018
    unless_null _lex_param_1, fallback1898
    nqp_get_sc_object $P5022, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5022
  fallback1898:
    set fb_tmp_42, _lex_param_1
    repr_defined $I5005, fb_tmp_42
    unless $I5005 goto if640_else1896 
    set $P5023, fb_tmp_42["termconj"]
    set $P5025, $P5023
    goto if640_end1897
  if640_else1896:
    null $P5024
    set $P5025, $P5024
  if640_end1897:
    unless_null $P5025, vivi_6411899
    nqp_get_sc_object $P5026, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5025, $P5026
  vivi_6411899:
    set $P5019, $P5025
    iter $P5021, $P5025
  for_next1900:
    unless $P5021, for_done1902
    shift $P5028, $P5021
  for_redo1901:
    .const 'Sub' $P5027 = 'cuid_241_1381281822.05887' 
    capture_lex $P5027
    $P5019 = $P5027($P5028)
    goto for_next1900
  for_done1902:
  if637_end1891:
.annotate 'line', 385
    $P5029 = _lex_param_1."!make"($P101)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_241_1381281822.05887") :anon :lex :outer("cuid_129_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 383
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termconj" :subid("cuid_130_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 388
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_242_1381281822.05887' 
    capture_lex $P5030 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_43 
    .local pmc fb_tmp_44 
    .local pmc fb_tmp_45 
    .local pmc fb_tmp_46 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 389
    unless_null _lex_param_1, fallback1907
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5002
  fallback1907:
    set fb_tmp_44, _lex_param_1
    repr_defined $I5002, fb_tmp_44
    unless $I5002 goto if643_else1905 
    set $P5003, fb_tmp_44["termish"]
    set $P5005, $P5003
    goto if643_end1906
  if643_else1905:
    null $P5004
    set $P5005, $P5004
  if643_end1906:
    unless_null $P5005, vivi_6441908
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5005, $P5006
  vivi_6441908:
    set fb_tmp_43, $P5005
    repr_defined $I5001, fb_tmp_43
    unless $I5001 goto if642_else1903 
    set $P5007, fb_tmp_43[0]
    set $P5009, $P5007
    goto if642_end1904
  if642_else1903:
    null $P5008
    set $P5009, $P5008
  if642_end1904:
    unless_null $P5009, vivi_6451909
    nqp_get_sc_object $P5010, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5009, $P5010
  vivi_6451909:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
    unless_null _lex_param_1, fallback1914
    nqp_get_sc_object $P5012, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5012
  fallback1914:
    set fb_tmp_45, _lex_param_1
    repr_defined $I5004, fb_tmp_45
    unless $I5004 goto if647_else1912 
    set $P5013, fb_tmp_45["termish"]
    set $P5015, $P5013
    goto if647_end1913
  if647_else1912:
    null $P5014
    set $P5015, $P5014
  if647_end1913:
    unless_null $P5015, vivi_6481915
    nqp_get_sc_object $P5016, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5015, $P5016
  vivi_6481915:
    set $N5001, $P5015
    set $N5002, 1
    isgt $I5003, $N5001, $N5002
    unless $I5003 goto if646_end1911 
.annotate 'line', 390
.annotate 'line', 391
    nqp_get_sc_object $P5017, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5018 = $P5017."new"("conj" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5018
    unless_null _lex_param_1, fallback1918
    nqp_get_sc_object $P5022, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5022
  fallback1918:
    set fb_tmp_46, _lex_param_1
    repr_defined $I5005, fb_tmp_46
    unless $I5005 goto if649_else1916 
    set $P5023, fb_tmp_46["termish"]
    set $P5025, $P5023
    goto if649_end1917
  if649_else1916:
    null $P5024
    set $P5025, $P5024
  if649_end1917:
    unless_null $P5025, vivi_6501919
    nqp_get_sc_object $P5026, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5025, $P5026
  vivi_6501919:
    set $P5019, $P5025
    iter $P5021, $P5025
  for_next1920:
    unless $P5021, for_done1922
    shift $P5028, $P5021
  for_redo1921:
    .const 'Sub' $P5027 = 'cuid_242_1381281822.05887' 
    capture_lex $P5027
    $P5019 = $P5027($P5028)
    goto for_next1920
  for_done1922:
  if646_end1911:
.annotate 'line', 394
    $P5029 = _lex_param_1."!make"($P101)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_242_1381281822.05887") :anon :lex :outer("cuid_130_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 392
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termish" :subid("cuid_131_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 397
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5017 = 'cuid_243_1381281822.05887' 
    capture_lex $P5017 
    .lex "$qast", $P101 
    .lex "$lastlit", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_47 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P102, $P5002
.annotate 'line', 398
    nqp_get_sc_object $P5003, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5004 = $P5003."new"("concat" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5004
    box $P5005, 0
    set $P102, $P5005
    unless_null _lex_param_1, fallback1925
    nqp_get_sc_object $P5009, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5009
  fallback1925:
    set fb_tmp_47, _lex_param_1
    repr_defined $I5001, fb_tmp_47
    unless $I5001 goto if651_else1923 
    set $P5010, fb_tmp_47["noun"]
    set $P5012, $P5010
    goto if651_end1924
  if651_else1923:
    null $P5011
    set $P5012, $P5011
  if651_end1924:
    unless_null $P5012, vivi_6521926
    nqp_get_sc_object $P5013, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5012, $P5013
  vivi_6521926:
    set $P5006, $P5012
    iter $P5008, $P5012
  for_next1951:
    unless $P5008, for_done1953
    shift $P5015, $P5008
  for_redo1952:
    .const 'Sub' $P5014 = 'cuid_243_1381281822.05887' 
    capture_lex $P5014
    $P5006 = $P5014($P5015)
    goto for_next1951
  for_done1953:
.annotate 'line', 415
    $P5016 = _lex_param_1."!make"($P101)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_243_1381281822.05887") :anon :lex :outer("cuid_131_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 400
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_48 
    .local pmc fb_tmp_49 
    .local pmc fb_tmp_50 
    .local pmc fb_tmp_51 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 401
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
    set $P5038, $P101
    unless $P101 goto if653_end1928 
.annotate 'line', 402
    find_lex $P5003, "$lastlit"
    set $P5005, $P5003
    unless $P5003 goto if656_end1934 
.annotate 'line', 403
    $P5004 = $P101."rxtype"()
    set $S5001, $P5004
    iseq $I5001, $S5001, "literal"
    box $P5006, $I5001
    set $P5005, $P5006
  if656_end1934:
    set $P5013, $P5005
    unless $P5005 goto if655_end1932 
.annotate 'line', 404
    nqp_get_sc_object $P5007, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 12
    set fb_tmp_48, $P101
    repr_defined $I5003, fb_tmp_48
    unless $I5003 goto if657_else1935 
    set $P5008, fb_tmp_48[0]
    set $P5010, $P5008
    goto if657_end1936
  if657_else1935:
    null $P5009
    set $P5010, $P5009
  if657_end1936:
    unless_null $P5010, vivi_6581937
    nqp_get_sc_object $P5011, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5010, $P5011
  vivi_6581937:
    $P5012 = $P5007."ACCEPTS"($P5010)
    isfalse $I5002, $P5012
    box $P5014, $I5002
    set $P5013, $P5014
  if655_end1932:
    unless $P5013 goto if654_else1929 
    find_lex $P5015, "$lastlit"
    find_lex $P5016, "$lastlit"
    set fb_tmp_49, $P5016
    repr_defined $I5004, fb_tmp_49
    unless $I5004 goto if659_else1938 
    set $P5017, fb_tmp_49[0]
    set $P5019, $P5017
    goto if659_end1939
  if659_else1938:
    null $P5018
    set $P5019, $P5018
  if659_end1939:
    unless_null $P5019, vivi_6601940
    nqp_get_sc_object $P5020, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5019, $P5020
  vivi_6601940:
    set $S5003, $P5019
    set fb_tmp_50, $P101
    repr_defined $I5005, fb_tmp_50
    unless $I5005 goto if661_else1941 
    set $P5021, fb_tmp_50[0]
    set $P5023, $P5021
    goto if661_end1942
  if661_else1941:
    null $P5022
    set $P5023, $P5022
  if661_end1942:
    unless_null $P5023, vivi_6621943
    nqp_get_sc_object $P5024, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5023, $P5024
  vivi_6621943:
    set $S5004, $P5023
    concat $S5002, $S5003, $S5004
    box $P5025, $S5002
    set $P5015[0], $P5025
    set $P5037, $P5025
    goto if654_end1930
  if654_else1929:
.annotate 'line', 407
.annotate 'line', 408
    find_lex $P5026, "$qast"
    $P5027 = _lex_param_0."ast"()
    $P5026."push"($P5027)
.annotate 'line', 409
    $P5028 = $P101."rxtype"()
    set $S5005, $P5028
    iseq $I5006, $S5005, "literal"
    set $I5009, $I5006
    unless $I5006 goto if664_end1947 
.annotate 'line', 410
    nqp_get_sc_object $P5029, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 12
    set fb_tmp_51, $P101
    repr_defined $I5008, fb_tmp_51
    unless $I5008 goto if665_else1948 
    set $P5030, fb_tmp_51[0]
    set $P5032, $P5030
    goto if665_end1949
  if665_else1948:
    null $P5031
    set $P5032, $P5031
  if665_end1949:
    unless_null $P5032, vivi_6661950
    nqp_get_sc_object $P5033, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5032, $P5033
  vivi_6661950:
    $P5034 = $P5029."ACCEPTS"($P5032)
    isfalse $I5007, $P5034
    set $I5009, $I5007
  if664_end1947:
    unless $I5009 goto if663_else1944 
    set $P5035, $P101
    goto if663_end1945
  if663_else1944:
    box $P5036, 0
    set $P5035, $P5036
  if663_end1945:
    store_lex "$lastlit", $P5035
    set $P5037, $P5035
  if654_end1930:
    set $P5038, $P5037
  if653_end1928:
    .return ($P5038) 
.end
.HLL "nqp"
.namespace []
.sub "quantified_atom" :subid("cuid_132_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 418
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5110 = 'cuid_244_1381281822.05887' 
    capture_lex $P5110 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_52 
    .local pmc fb_tmp_53 
    .local pmc fb_tmp_56 
    .local pmc fb_tmp_57 
    .local pmc fb_tmp_58 
    .local pmc fb_tmp_59 
    .local pmc fb_tmp_60 
    .local pmc fb_tmp_61 
    .local pmc fb_tmp_62 
    .local pmc fb_tmp_63 
    .local pmc fb_tmp_64 
    .local pmc fb_tmp_65 
    .local pmc fb_tmp_66 
    .local pmc fb_tmp_67 
    .local pmc fb_tmp_68 
    .local pmc pkg_viv_tmp_4 
    .local pmc fb_tmp_69 
    .local pmc fb_tmp_70 
    .local pmc fb_tmp_71 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 419
    unless_null _lex_param_1, fallback1956
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5002
  fallback1956:
    set fb_tmp_52, _lex_param_1
    repr_defined $I5001, fb_tmp_52
    unless $I5001 goto if667_else1954 
    set $P5003, fb_tmp_52["atom"]
    set $P5005, $P5003
    goto if667_end1955
  if667_else1954:
    null $P5004
    set $P5005, $P5004
  if667_end1955:
    unless_null $P5005, vivi_6681957
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5005, $P5006
  vivi_6681957:
    $P5007 = $P5005."ast"()
    set $P101, $P5007
    unless_null _lex_param_1, fallback1962
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5008
  fallback1962:
    set fb_tmp_53, _lex_param_1
    repr_defined $I5002, fb_tmp_53
    unless $I5002 goto if670_else1960 
    set $P5009, fb_tmp_53["quantifier"]
    set $P5011, $P5009
    goto if670_end1961
  if670_else1960:
    null $P5010
    set $P5011, $P5010
  if670_end1961:
    unless_null $P5011, vivi_6711963
    nqp_get_sc_object $P5012, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5011, $P5012
  vivi_6711963:
    unless $P5011 goto if669_end1959 
    .const 'Sub' $P5013 = 'cuid_244_1381281822.05887' 
    capture_lex $P5013
    $P5014 = $P5013()
  if669_end1959:
    unless_null _lex_param_1, fallback1977
    nqp_get_sc_object $P5015, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5015
  fallback1977:
    set fb_tmp_56, _lex_param_1
    repr_defined $I5003, fb_tmp_56
    unless $I5003 goto if678_else1975 
    set $P5016, fb_tmp_56["separator"]
    set $P5018, $P5016
    goto if678_end1976
  if678_else1975:
    null $P5017
    set $P5018, $P5017
  if678_end1976:
    unless_null $P5018, vivi_6791978
    nqp_get_sc_object $P5019, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5018, $P5019
  vivi_6791978:
    unless $P5018 goto if677_end1974 
.annotate 'line', 427
.annotate 'line', 428
    $P5020 = $P101."rxtype"()
    set $S5001, $P5020
    iseq $I5004, $S5001, "quant"
    if $I5004 goto unless680_end1980 
.annotate 'line', 429
    $P5021 = _lex_param_1."CURSOR"()
    unless_null _lex_param_1, fallback1987
    nqp_get_sc_object $P5022, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5022
  fallback1987:
    set fb_tmp_59, _lex_param_1
    repr_defined $I5007, fb_tmp_59
    unless $I5007 goto if683_else1985 
    set $P5023, fb_tmp_59["separator"]
    set $P5025, $P5023
    goto if683_end1986
  if683_else1985:
    null $P5024
    set $P5025, $P5024
  if683_end1986:
    unless_null $P5025, vivi_6841988
    nqp_get_sc_object $P5026, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5025, $P5026
  vivi_6841988:
    set fb_tmp_58, $P5025
    repr_defined $I5006, fb_tmp_58
    unless $I5006 goto if682_else1983 
    set $P5027, fb_tmp_58[0]
    set $P5029, $P5027
    goto if682_end1984
  if682_else1983:
    null $P5028
    set $P5029, $P5028
  if682_end1984:
    unless_null $P5029, vivi_6851989
    nqp_get_sc_object $P5030, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5029, $P5030
  vivi_6851989:
    set fb_tmp_57, $P5029
    repr_defined $I5005, fb_tmp_57
    unless $I5005 goto if681_else1981 
    set $P5031, fb_tmp_57["septype"]
    set $P5033, $P5031
    goto if681_end1982
  if681_else1981:
    null $P5032
    set $P5033, $P5032
  if681_end1982:
    unless_null $P5033, vivi_6861990
    nqp_get_sc_object $P5034, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5033, $P5034
  vivi_6861990:
    set $S5004, $P5033
    concat $S5003, "'", $S5004
    concat $S5002, $S5003, "' many only be used immediately following a quantifier"
    $P5035 = $P5021."panic"($S5002)
  unless680_end1980:
.annotate 'line', 432
    unless_null _lex_param_1, fallback1995
    nqp_get_sc_object $P5036, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5036
  fallback1995:
    set fb_tmp_61, _lex_param_1
    repr_defined $I5009, fb_tmp_61
    unless $I5009 goto if688_else1993 
    set $P5037, fb_tmp_61["separator"]
    set $P5039, $P5037
    goto if688_end1994
  if688_else1993:
    null $P5038
    set $P5039, $P5038
  if688_end1994:
    unless_null $P5039, vivi_6891996
    nqp_get_sc_object $P5040, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5039, $P5040
  vivi_6891996:
    set fb_tmp_60, $P5039
    repr_defined $I5008, fb_tmp_60
    unless $I5008 goto if687_else1991 
    set $P5041, fb_tmp_60[0]
    set $P5043, $P5041
    goto if687_end1992
  if687_else1991:
    null $P5042
    set $P5043, $P5042
  if687_end1992:
    unless_null $P5043, vivi_6901997
    nqp_get_sc_object $P5044, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5043, $P5044
  vivi_6901997:
    $P5045 = $P5043."ast"()
    $P101."push"($P5045)
    unless_null _lex_param_1, fallback2006
    nqp_get_sc_object $P5046, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5046
  fallback2006:
    set fb_tmp_64, _lex_param_1
    repr_defined $I5013, fb_tmp_64
    unless $I5013 goto if694_else2004 
    set $P5047, fb_tmp_64["separator"]
    set $P5049, $P5047
    goto if694_end2005
  if694_else2004:
    null $P5048
    set $P5049, $P5048
  if694_end2005:
    unless_null $P5049, vivi_6952007
    nqp_get_sc_object $P5050, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5049, $P5050
  vivi_6952007:
    set fb_tmp_63, $P5049
    repr_defined $I5012, fb_tmp_63
    unless $I5012 goto if693_else2002 
    set $P5051, fb_tmp_63[0]
    set $P5053, $P5051
    goto if693_end2003
  if693_else2002:
    null $P5052
    set $P5053, $P5052
  if693_end2003:
    unless_null $P5053, vivi_6962008
    nqp_get_sc_object $P5054, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5053, $P5054
  vivi_6962008:
    set fb_tmp_62, $P5053
    repr_defined $I5011, fb_tmp_62
    unless $I5011 goto if692_else2000 
    set $P5055, fb_tmp_62["septype"]
    set $P5057, $P5055
    goto if692_end2001
  if692_else2000:
    null $P5056
    set $P5057, $P5056
  if692_end2001:
    unless_null $P5057, vivi_6972009
    nqp_get_sc_object $P5058, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5057, $P5058
  vivi_6972009:
    set $S5005, $P5057
    iseq $I5010, $S5005, "%%"
    box $P5074, $I5010
    set $P5073, $P5074
    unless $I5010 goto if691_end1999 
.annotate 'line', 433
.annotate 'line', 434
    nqp_get_sc_object $P5059, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
.annotate 'line', 435
    nqp_get_sc_object $P5060, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    unless_null _lex_param_1, fallback2014
    nqp_get_sc_object $P5061, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5061
  fallback2014:
    set fb_tmp_66, _lex_param_1
    repr_defined $I5015, fb_tmp_66
    unless $I5015 goto if699_else2012 
    set $P5062, fb_tmp_66["separator"]
    set $P5064, $P5062
    goto if699_end2013
  if699_else2012:
    null $P5063
    set $P5064, $P5063
  if699_end2013:
    unless_null $P5064, vivi_7002015
    nqp_get_sc_object $P5065, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5064, $P5065
  vivi_7002015:
    set fb_tmp_65, $P5064
    repr_defined $I5014, fb_tmp_65
    unless $I5014 goto if698_else2010 
    set $P5066, fb_tmp_65[0]
    set $P5068, $P5066
    goto if698_end2011
  if698_else2010:
    null $P5067
    set $P5068, $P5067
  if698_end2011:
    unless_null $P5068, vivi_7012016
    nqp_get_sc_object $P5069, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5068, $P5069
  vivi_7012016:
    $P5070 = $P5068."ast"()
    $P5071 = $P5060."new"($P5070, "quant" :named("rxtype"), 0 :named("min"), 1 :named("max"))
    $P5072 = $P5059."new"($P101, $P5071, "concat" :named("rxtype"))
    set $P101, $P5072
    set $P5073, $P101
  if691_end1999:
  if677_end1974:
    set $P5076, $P101
    unless $P101 goto if704_end2022 
.annotate 'line', 438
    $P5075 = $P101."backtrack"()
    isfalse $I5016, $P5075
    box $P5077, $I5016
    set $P5076, $P5077
  if704_end2022:
    set $P5107, $P5076
    unless $P5076 goto if703_end2020 
    find_dynamic_lex $P5078, "%*RX"
    unless_null $P5078, fallback2027
    nqp_get_sc_object $P5080, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 0
    get_who $P5079, $P5080
    set pkg_viv_tmp_4, $P5079
    set fb_tmp_68, pkg_viv_tmp_4
    repr_defined $I5018, fb_tmp_68
    unless $I5018 goto if707_else2028 
    set $P5081, fb_tmp_68["%RX"]
    set $P5083, $P5081
    goto if707_end2029
  if707_else2028:
    null $P5082
    set $P5083, $P5082
  if707_end2029:
    unless_null $P5083, vivi_7082030
    new $P5084, 'Hash'
    set pkg_viv_tmp_4["%RX"], $P5084
    set $P5083, $P5084
  vivi_7082030:
    unless_null $P5083, vivi_7092031
    die "Contextual %*RX not found"
    box $P5085, "Contextual %*RX not found"
    set $P5083, $P5085
  vivi_7092031:
    set $P5078, $P5083
  fallback2027:
    set fb_tmp_67, $P5078
    repr_defined $I5017, fb_tmp_67
    unless $I5017 goto if706_else2025 
    set $P5086, fb_tmp_67["r"]
    set $P5088, $P5086
    goto if706_end2026
  if706_else2025:
    null $P5087
    set $P5088, $P5087
  if706_end2026:
    unless_null $P5088, vivi_7102032
    nqp_get_sc_object $P5089, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5088, $P5089
  vivi_7102032:
    set $P5106, $P5088
    if $P5088 goto unless705_end2024 
    unless_null _lex_param_1, fallback2037
    nqp_get_sc_object $P5090, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5090
  fallback2037:
    set fb_tmp_69, _lex_param_1
    repr_defined $I5019, fb_tmp_69
    unless $I5019 goto if712_else2035 
    set $P5091, fb_tmp_69["backmod"]
    set $P5093, $P5091
    goto if712_end2036
  if712_else2035:
    null $P5092
    set $P5093, $P5092
  if712_end2036:
    unless_null $P5093, vivi_7132038
    nqp_get_sc_object $P5094, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5093, $P5094
  vivi_7132038:
    set $P5104, $P5093
    unless $P5093 goto if711_end2034 
    unless_null _lex_param_1, fallback2043
    nqp_get_sc_object $P5095, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5095
  fallback2043:
    set fb_tmp_71, _lex_param_1
    repr_defined $I5022, fb_tmp_71
    unless $I5022 goto if715_else2041 
    set $P5096, fb_tmp_71["backmod"]
    set $P5098, $P5096
    goto if715_end2042
  if715_else2041:
    null $P5097
    set $P5098, $P5097
  if715_end2042:
    unless_null $P5098, vivi_7162044
    nqp_get_sc_object $P5099, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5098, $P5099
  vivi_7162044:
    set fb_tmp_70, $P5098
    repr_defined $I5021, fb_tmp_70
    unless $I5021 goto if714_else2039 
    set $P5100, fb_tmp_70[0]
    set $P5102, $P5100
    goto if714_end2040
  if714_else2039:
    null $P5101
    set $P5102, $P5101
  if714_end2040:
    unless_null $P5102, vivi_7172045
    nqp_get_sc_object $P5103, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5102, $P5103
  vivi_7172045:
    set $S5006, $P5102
    iseq $I5020, $S5006, ":"
    box $P5105, $I5020
    set $P5104, $P5105
  if711_end2034:
    set $P5106, $P5104
  unless705_end2024:
    set $P5107, $P5106
  if703_end2020:
    unless $P5107 goto if702_end2018 
    $P5108 = $P101."backtrack"("r")
  if702_end2018:
.annotate 'line', 440
    $P5109 = _lex_param_1."!make"($P101)
    .return ($P5109) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_244_1381281822.05887") :anon :lex :outer("cuid_132_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 420
    .lex "$ast", $P101 
    .local pmc fb_tmp_54 
    .local pmc fb_tmp_55 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
    find_lex $P5002, "$qast"
    if $P5002 goto unless672_end1965 
.annotate 'line', 421
    find_lex $P5003, "$/"
    $P5004 = $P5003."CURSOR"()
    $P5005 = $P5004."panic"("Quantifier quantifies nothing")
  unless672_end1965:
.annotate 'line', 423
    find_lex $P5006, "$/"
    unless_null $P5006, fallback1970
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  fallback1970:
    set fb_tmp_55, $P5006
    repr_defined $I5002, fb_tmp_55
    unless $I5002 goto if674_else1968 
    set $P5008, fb_tmp_55["quantifier"]
    set $P5010, $P5008
    goto if674_end1969
  if674_else1968:
    null $P5009
    set $P5010, $P5009
  if674_end1969:
    unless_null $P5010, vivi_6751971
    nqp_get_sc_object $P5011, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5010, $P5011
  vivi_6751971:
    set fb_tmp_54, $P5010
    repr_defined $I5001, fb_tmp_54
    unless $I5001 goto if673_else1966 
    set $P5012, fb_tmp_54[0]
    set $P5014, $P5012
    goto if673_end1967
  if673_else1966:
    null $P5013
    set $P5014, $P5013
  if673_end1967:
    unless_null $P5014, vivi_6761972
    nqp_get_sc_object $P5015, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5014, $P5015
  vivi_6761972:
    $P5016 = $P5014."ast"()
    set $P101, $P5016
.annotate 'line', 424
    find_lex $P5017, "$qast"
    $P101."unshift"($P5017)
    store_lex "$qast", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "separator" :subid("cuid_133_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 443
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_72 
.annotate 'line', 444
    unless_null _lex_param_1, fallback2048
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5001
  fallback2048:
    set fb_tmp_72, _lex_param_1
    repr_defined $I5001, fb_tmp_72
    unless $I5001 goto if718_else2046 
    set $P5002, fb_tmp_72["quantified_atom"]
    set $P5004, $P5002
    goto if718_end2047
  if718_else2046:
    null $P5003
    set $P5004, $P5003
  if718_end2047:
    unless_null $P5004, vivi_7192049
    nqp_get_sc_object $P5005, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5004, $P5005
  vivi_7192049:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "atom" :subid("cuid_134_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 447
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5016 = 'cuid_245_1381281822.05887' 
    capture_lex $P5016 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_73 
    .local pmc fb_tmp_74 
    unless_null _lex_param_1, fallback2054
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5001
  fallback2054:
    set fb_tmp_73, _lex_param_1
    repr_defined $I5001, fb_tmp_73
    unless $I5001 goto if721_else2052 
    set $P5002, fb_tmp_73["metachar"]
    set $P5004, $P5002
    goto if721_end2053
  if721_else2052:
    null $P5003
    set $P5004, $P5003
  if721_end2053:
    unless_null $P5004, vivi_7222055
    nqp_get_sc_object $P5005, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5004, $P5005
  vivi_7222055:
    unless $P5004 goto if720_else2050 
.annotate 'line', 448
.annotate 'line', 449
    unless_null _lex_param_1, fallback2058
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5006
  fallback2058:
    set fb_tmp_74, _lex_param_1
    repr_defined $I5002, fb_tmp_74
    unless $I5002 goto if723_else2056 
    set $P5007, fb_tmp_74["metachar"]
    set $P5009, $P5007
    goto if723_end2057
  if723_else2056:
    null $P5008
    set $P5009, $P5008
  if723_end2057:
    unless_null $P5009, vivi_7242059
    nqp_get_sc_object $P5010, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5009, $P5010
  vivi_7242059:
    $P5011 = $P5009."ast"()
    $P5012 = _lex_param_1."!make"($P5011)
    set $P5015, $P5012
    goto if720_end2051
  if720_else2050:
    .const 'Sub' $P5013 = 'cuid_245_1381281822.05887' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  if720_end2051:
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_245_1381281822.05887") :anon :lex :outer("cuid_134_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 451
    .lex "$qast", $P101 
    .local pmc fb_tmp_75 
    .local pmc fb_tmp_76 
    .local pmc pkg_viv_tmp_5 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 452
    nqp_get_sc_object $P5002, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    find_lex $P5003, "$/"
    set $S5001, $P5003
    find_lex $P5004, "$/"
    $P5005 = $P5002."new"($S5001, "literal" :named("rxtype"), $P5004 :named("node"))
    set $P101, $P5005
    find_dynamic_lex $P5006, "%*RX"
    unless_null $P5006, fallback2064
    nqp_get_sc_object $P5008, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 0
    get_who $P5007, $P5008
    set pkg_viv_tmp_5, $P5007
    set fb_tmp_76, pkg_viv_tmp_5
    repr_defined $I5002, fb_tmp_76
    unless $I5002 goto if727_else2065 
    set $P5009, fb_tmp_76["%RX"]
    set $P5011, $P5009
    goto if727_end2066
  if727_else2065:
    null $P5010
    set $P5011, $P5010
  if727_end2066:
    unless_null $P5011, vivi_7282067
    new $P5012, 'Hash'
    set pkg_viv_tmp_5["%RX"], $P5012
    set $P5011, $P5012
  vivi_7282067:
    unless_null $P5011, vivi_7292068
    die "Contextual %*RX not found"
    box $P5013, "Contextual %*RX not found"
    set $P5011, $P5013
  vivi_7292068:
    set $P5006, $P5011
  fallback2064:
    set fb_tmp_75, $P5006
    repr_defined $I5001, fb_tmp_75
    unless $I5001 goto if726_else2062 
    set $P5014, fb_tmp_75["i"]
    set $P5016, $P5014
    goto if726_end2063
  if726_else2062:
    null $P5015
    set $P5016, $P5015
  if726_end2063:
    unless_null $P5016, vivi_7302069
    nqp_get_sc_object $P5017, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5016, $P5017
  vivi_7302069:
    unless $P5016 goto if725_end2061 
.annotate 'line', 453
    $P5018 = $P101."subtype"("ignorecase")
  if725_end2061:
.annotate 'line', 454
    find_dynamic_lex $P5019, "$/"
    $P5020 = $P5019."!make"($P101)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<*>" :subid("cuid_135_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 458
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_77 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 459
    nqp_get_sc_object $P5002, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5003 = $P5002."new"("quant" :named("rxtype"), 0 :named("min"), -1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5003
.annotate 'line', 460
    unless_null _lex_param_1, fallback2072
    nqp_get_sc_object $P5004, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5004
  fallback2072:
    set fb_tmp_77, _lex_param_1
    repr_defined $I5001, fb_tmp_77
    unless $I5001 goto if731_else2070 
    set $P5005, fb_tmp_77["backmod"]
    set $P5007, $P5005
    goto if731_end2071
  if731_else2070:
    null $P5006
    set $P5007, $P5006
  if731_end2071:
    unless_null $P5007, vivi_7322073
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5007, $P5008
  vivi_7322073:
    $P5009 = "&backmod"($P101, $P5007)
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<+>" :subid("cuid_136_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 463
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_78 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 464
    nqp_get_sc_object $P5002, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5003 = $P5002."new"("quant" :named("rxtype"), 1 :named("min"), -1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5003
.annotate 'line', 465
    unless_null _lex_param_1, fallback2076
    nqp_get_sc_object $P5004, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5004
  fallback2076:
    set fb_tmp_78, _lex_param_1
    repr_defined $I5001, fb_tmp_78
    unless $I5001 goto if733_else2074 
    set $P5005, fb_tmp_78["backmod"]
    set $P5007, $P5005
    goto if733_end2075
  if733_else2074:
    null $P5006
    set $P5007, $P5006
  if733_end2075:
    unless_null $P5007, vivi_7342077
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5007, $P5008
  vivi_7342077:
    $P5009 = "&backmod"($P101, $P5007)
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<?>" :subid("cuid_137_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 468
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_79 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 469
    nqp_get_sc_object $P5002, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5003 = $P5002."new"("quant" :named("rxtype"), "item" :named("subtype"), 0 :named("min"), 1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5003
.annotate 'line', 470
    unless_null _lex_param_1, fallback2080
    nqp_get_sc_object $P5004, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5004
  fallback2080:
    set fb_tmp_79, _lex_param_1
    repr_defined $I5001, fb_tmp_79
    unless $I5001 goto if735_else2078 
    set $P5005, fb_tmp_79["backmod"]
    set $P5007, $P5005
    goto if735_end2079
  if735_else2078:
    null $P5006
    set $P5007, $P5006
  if735_end2079:
    unless_null $P5007, vivi_7362081
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5007, $P5008
  vivi_7362081:
    $P5009 = "&backmod"($P101, $P5007)
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<**>" :subid("cuid_138_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 473
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "$min", $P102 
    .lex "$max", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_80 
    .local pmc fb_tmp_81 
    .local pmc fb_tmp_82 
    .local pmc fb_tmp_83 
    .local pmc fb_tmp_84 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P103, $P5003
.annotate 'line', 475
    unless_null _lex_param_1, fallback2084
    nqp_get_sc_object $P5004, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5004
  fallback2084:
    set fb_tmp_80, _lex_param_1
    repr_defined $I5001, fb_tmp_80
    unless $I5001 goto if737_else2082 
    set $P5005, fb_tmp_80["min"]
    set $P5007, $P5005
    goto if737_end2083
  if737_else2082:
    null $P5006
    set $P5007, $P5006
  if737_end2083:
    unless_null $P5007, vivi_7382085
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5007, $P5008
  vivi_7382085:
    $P5009 = $P5007."ast"()
    set $P102, $P5009
    box $P5010, -1
    set $P103, $P5010
    unless_null _lex_param_1, fallback2090
    nqp_get_sc_object $P5011, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5011
  fallback2090:
    set fb_tmp_81, _lex_param_1
    repr_defined $I5003, fb_tmp_81
    unless $I5003 goto if740_else2088 
    set $P5012, fb_tmp_81["max"]
    set $P5014, $P5012
    goto if740_end2089
  if740_else2088:
    null $P5013
    set $P5014, $P5013
  if740_end2089:
    unless_null $P5014, vivi_7412091
    nqp_get_sc_object $P5015, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5014, $P5015
  vivi_7412091:
    isfalse $I5002, $P5014
    unless $I5002 goto if739_else2086 
.annotate 'line', 477
    set $P103, $P102
    goto if739_end2087
  if739_else2086:
    unless_null _lex_param_1, fallback2096
    nqp_get_sc_object $P5016, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5016
  fallback2096:
    set fb_tmp_82, _lex_param_1
    repr_defined $I5005, fb_tmp_82
    unless $I5005 goto if743_else2094 
    set $P5017, fb_tmp_82["max"]
    set $P5019, $P5017
    goto if743_end2095
  if743_else2094:
    null $P5018
    set $P5019, $P5018
  if743_end2095:
    unless_null $P5019, vivi_7442097
    nqp_get_sc_object $P5020, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5019, $P5020
  vivi_7442097:
    set $S5001, $P5019
    isne $I5004, $S5001, "*"
    box $P5032, $I5004
    set $P5031, $P5032
    unless $I5004 goto if742_end2093 
.annotate 'line', 478
.annotate 'line', 479
    unless_null _lex_param_1, fallback2100
    nqp_get_sc_object $P5021, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5021
  fallback2100:
    set fb_tmp_83, _lex_param_1
    repr_defined $I5006, fb_tmp_83
    unless $I5006 goto if745_else2098 
    set $P5022, fb_tmp_83["max"]
    set $P5024, $P5022
    goto if745_end2099
  if745_else2098:
    null $P5023
    set $P5024, $P5023
  if745_end2099:
    unless_null $P5024, vivi_7462101
    nqp_get_sc_object $P5025, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5024, $P5025
  vivi_7462101:
    $P5026 = $P5024."ast"()
    set $P103, $P5026
    set $N5001, $P102
    set $N5002, $P103
    isgt $I5007, $N5001, $N5002
    box $P5030, $I5007
    set $P5029, $P5030
    unless $I5007 goto if747_end2103 
.annotate 'line', 480
    $P5027 = _lex_param_1."CURSOR"()
    $P5028 = $P5027."panic"("Empty range")
    set $P5029, $P5028
  if747_end2103:
    set $P5031, $P5029
  if742_end2093:
  if739_end2087:
.annotate 'line', 482
    nqp_get_sc_object $P5033, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5034 = $P5033."new"("quant" :named("rxtype"), $P102 :named("min"), $P103 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5034
.annotate 'line', 483
    unless_null _lex_param_1, fallback2106
    nqp_get_sc_object $P5035, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5035
  fallback2106:
    set fb_tmp_84, _lex_param_1
    repr_defined $I5008, fb_tmp_84
    unless $I5008 goto if748_else2104 
    set $P5036, fb_tmp_84["backmod"]
    set $P5038, $P5036
    goto if748_end2105
  if748_else2104:
    null $P5037
    set $P5038, $P5037
  if748_end2105:
    unless_null $P5038, vivi_7492107
    nqp_get_sc_object $P5039, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5038, $P5039
  vivi_7492107:
    $P5040 = "&backmod"($P101, $P5038)
    $P5041 = _lex_param_1."!make"($P5040)
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<ws>" :subid("cuid_139_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 486
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_85 
    .local pmc fb_tmp_86 
    .local pmc pkg_viv_tmp_6 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
    find_dynamic_lex $P5002, "%*RX"
    unless_null $P5002, fallback2112
    nqp_get_sc_object $P5004, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 0
    get_who $P5003, $P5004
    set pkg_viv_tmp_6, $P5003
    set fb_tmp_86, pkg_viv_tmp_6
    repr_defined $I5002, fb_tmp_86
    unless $I5002 goto if752_else2113 
    set $P5005, fb_tmp_86["%RX"]
    set $P5007, $P5005
    goto if752_end2114
  if752_else2113:
    null $P5006
    set $P5007, $P5006
  if752_end2114:
    unless_null $P5007, vivi_7532115
    new $P5008, 'Hash'
    set pkg_viv_tmp_6["%RX"], $P5008
    set $P5007, $P5008
  vivi_7532115:
    unless_null $P5007, vivi_7542116
    die "Contextual %*RX not found"
    box $P5009, "Contextual %*RX not found"
    set $P5007, $P5009
  vivi_7542116:
    set $P5002, $P5007
  fallback2112:
    set fb_tmp_85, $P5002
    repr_defined $I5001, fb_tmp_85
    unless $I5001 goto if751_else2110 
    set $P5010, fb_tmp_85["s"]
    set $P5012, $P5010
    goto if751_end2111
  if751_else2110:
    null $P5011
    set $P5012, $P5011
  if751_end2111:
    unless_null $P5012, vivi_7552117
    nqp_get_sc_object $P5013, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5012, $P5013
  vivi_7552117:
    unless $P5012 goto if750_else2108 
.annotate 'line', 488
    nqp_get_sc_object $P5014, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
.annotate 'line', 489
    nqp_get_sc_object $P5015, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 12
    nqp_get_sc_object $P5016, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 55
    $P5017 = $P5016."new"("ws" :named("value"))
    $P5018 = $P5015."new"($P5017)
    $P5019 = $P5014."new"($P5018, "ws" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    set $P5020, $P5019
    goto if750_end2109
  if750_else2108:
    box $P5021, 0
    set $P5020, $P5021
  if750_end2109:
    set $P101, $P5020
.annotate 'line', 491
    $P5022 = _lex_param_1."!make"($P101)
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<[ ]>" :subid("cuid_140_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 494
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_87 
.annotate 'line', 495
    unless_null _lex_param_1, fallback2120
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5001
  fallback2120:
    set fb_tmp_87, _lex_param_1
    repr_defined $I5001, fb_tmp_87
    unless $I5001 goto if756_else2118 
    set $P5002, fb_tmp_87["nibbler"]
    set $P5004, $P5002
    goto if756_end2119
  if756_else2118:
    null $P5003
    set $P5004, $P5003
  if756_end2119:
    unless_null $P5004, vivi_7572121
    nqp_get_sc_object $P5005, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5004, $P5005
  vivi_7572121:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<( )>" :subid("cuid_141_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 498
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$subpast", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_88 
    .local pmc fb_tmp_89 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P102, $P5002
.annotate 'line', 499
    nqp_get_sc_object $P5003, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 12
    nqp_decontainerize $P5004, _lex_param_0
    unless_null _lex_param_1, fallback2124
    nqp_get_sc_object $P5005, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5005
  fallback2124:
    set fb_tmp_88, _lex_param_1
    repr_defined $I5001, fb_tmp_88
    unless $I5001 goto if758_else2122 
    set $P5006, fb_tmp_88["nibbler"]
    set $P5008, $P5006
    goto if758_end2123
  if758_else2122:
    null $P5007
    set $P5008, $P5007
  if758_end2123:
    unless_null $P5008, vivi_7592125
    nqp_get_sc_object $P5009, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5008, $P5009
  vivi_7592125:
    $P5010 = $P5008."ast"()
    $P5011 = $P5004."qbuildsub"($P5010, 1 :named("anon"), 1 :named("addself"))
    $P5012 = $P5003."new"($P5011)
    set $P101, $P5012
.annotate 'line', 500
    nqp_get_sc_object $P5013, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    unless_null _lex_param_1, fallback2128
    nqp_get_sc_object $P5014, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5014
  fallback2128:
    set fb_tmp_89, _lex_param_1
    repr_defined $I5002, fb_tmp_89
    unless $I5002 goto if760_else2126 
    set $P5015, fb_tmp_89["nibbler"]
    set $P5017, $P5015
    goto if760_end2127
  if760_else2126:
    null $P5016
    set $P5017, $P5016
  if760_end2127:
    unless_null $P5017, vivi_7612129
    nqp_get_sc_object $P5018, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5017, $P5018
  vivi_7612129:
    $P5019 = $P5017."ast"()
    $P5020 = $P5013."new"($P101, $P5019, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"))
    set $P102, $P5020
.annotate 'line', 502
    $P5021 = _lex_param_1."!make"($P102)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<'>" :subid("cuid_142_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 505
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$quote", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_90 
    .local pmc fb_tmp_91 
    .local pmc fb_tmp_92 
    .local pmc pkg_viv_tmp_7 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P102, $P5002
.annotate 'line', 506
    unless_null _lex_param_1, fallback2132
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5003
  fallback2132:
    set fb_tmp_90, _lex_param_1
    repr_defined $I5001, fb_tmp_90
    unless $I5001 goto if762_else2130 
    set $P5004, fb_tmp_90["quote_EXPR"]
    set $P5006, $P5004
    goto if762_end2131
  if762_else2130:
    null $P5005
    set $P5006, $P5005
  if762_end2131:
    unless_null $P5006, vivi_7632133
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_7632133:
    $P5008 = $P5006."ast"()
    set $P101, $P5008
.annotate 'line', 507
    nqp_get_sc_object $P5009, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 55
    $P5010 = $P5009."ACCEPTS"($P101)
    unless $P5010 goto if764_end2135 
    $P5011 = $P101."value"()
    set $P101, $P5011
  if764_end2135:
.annotate 'line', 508
    nqp_get_sc_object $P5012, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5013 = $P5012."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P102, $P5013
    find_dynamic_lex $P5014, "%*RX"
    unless_null $P5014, fallback2140
    nqp_get_sc_object $P5016, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 0
    get_who $P5015, $P5016
    set pkg_viv_tmp_7, $P5015
    set fb_tmp_92, pkg_viv_tmp_7
    repr_defined $I5003, fb_tmp_92
    unless $I5003 goto if767_else2141 
    set $P5017, fb_tmp_92["%RX"]
    set $P5019, $P5017
    goto if767_end2142
  if767_else2141:
    null $P5018
    set $P5019, $P5018
  if767_end2142:
    unless_null $P5019, vivi_7682143
    new $P5020, 'Hash'
    set pkg_viv_tmp_7["%RX"], $P5020
    set $P5019, $P5020
  vivi_7682143:
    unless_null $P5019, vivi_7692144
    die "Contextual %*RX not found"
    box $P5021, "Contextual %*RX not found"
    set $P5019, $P5021
  vivi_7692144:
    set $P5014, $P5019
  fallback2140:
    set fb_tmp_91, $P5014
    repr_defined $I5002, fb_tmp_91
    unless $I5002 goto if766_else2138 
    set $P5022, fb_tmp_91["i"]
    set $P5024, $P5022
    goto if766_end2139
  if766_else2138:
    null $P5023
    set $P5024, $P5023
  if766_end2139:
    unless_null $P5024, vivi_7702145
    nqp_get_sc_object $P5025, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5024, $P5025
  vivi_7702145:
    unless $P5024 goto if765_end2137 
.annotate 'line', 509
    $P5026 = $P102."subtype"("ignorecase")
  if765_end2137:
.annotate 'line', 510
    $P5027 = _lex_param_1."!make"($P102)
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<\">" :subid("cuid_143_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 513
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$quote", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_93 
    .local pmc fb_tmp_94 
    .local pmc fb_tmp_95 
    .local pmc pkg_viv_tmp_8 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P102, $P5002
.annotate 'line', 514
    unless_null _lex_param_1, fallback2148
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5003
  fallback2148:
    set fb_tmp_93, _lex_param_1
    repr_defined $I5001, fb_tmp_93
    unless $I5001 goto if771_else2146 
    set $P5004, fb_tmp_93["quote_EXPR"]
    set $P5006, $P5004
    goto if771_end2147
  if771_else2146:
    null $P5005
    set $P5006, $P5005
  if771_end2147:
    unless_null $P5006, vivi_7722149
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_7722149:
    $P5008 = $P5006."ast"()
    set $P101, $P5008
.annotate 'line', 515
    nqp_get_sc_object $P5009, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 55
    $P5010 = $P5009."ACCEPTS"($P101)
    unless $P5010 goto if773_end2151 
    $P5011 = $P101."value"()
    set $P101, $P5011
  if773_end2151:
.annotate 'line', 516
    nqp_get_sc_object $P5012, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5013 = $P5012."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P102, $P5013
    find_dynamic_lex $P5014, "%*RX"
    unless_null $P5014, fallback2156
    nqp_get_sc_object $P5016, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 0
    get_who $P5015, $P5016
    set pkg_viv_tmp_8, $P5015
    set fb_tmp_95, pkg_viv_tmp_8
    repr_defined $I5003, fb_tmp_95
    unless $I5003 goto if776_else2157 
    set $P5017, fb_tmp_95["%RX"]
    set $P5019, $P5017
    goto if776_end2158
  if776_else2157:
    null $P5018
    set $P5019, $P5018
  if776_end2158:
    unless_null $P5019, vivi_7772159
    new $P5020, 'Hash'
    set pkg_viv_tmp_8["%RX"], $P5020
    set $P5019, $P5020
  vivi_7772159:
    unless_null $P5019, vivi_7782160
    die "Contextual %*RX not found"
    box $P5021, "Contextual %*RX not found"
    set $P5019, $P5021
  vivi_7782160:
    set $P5014, $P5019
  fallback2156:
    set fb_tmp_94, $P5014
    repr_defined $I5002, fb_tmp_94
    unless $I5002 goto if775_else2154 
    set $P5022, fb_tmp_94["i"]
    set $P5024, $P5022
    goto if775_end2155
  if775_else2154:
    null $P5023
    set $P5024, $P5023
  if775_end2155:
    unless_null $P5024, vivi_7792161
    nqp_get_sc_object $P5025, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5024, $P5025
  vivi_7792161:
    unless $P5024 goto if774_end2153 
.annotate 'line', 517
    $P5026 = $P102."subtype"("ignorecase")
  if774_end2153:
.annotate 'line', 518
    $P5027 = _lex_param_1."!make"($P102)
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<.>" :subid("cuid_144_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 521
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 522
    nqp_get_sc_object $P5001, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5002 = $P5001."new"("cclass" :named("rxtype"), "." :named("name"), _lex_param_1 :named("node"))
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^>" :subid("cuid_145_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 525
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 526
    nqp_get_sc_object $P5001, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5002 = $P5001."new"("anchor" :named("rxtype"), "bos" :named("subtype"), _lex_param_1 :named("node"))
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^^>" :subid("cuid_146_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 529
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 530
    nqp_get_sc_object $P5001, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5002 = $P5001."new"("anchor" :named("rxtype"), "bol" :named("subtype"), _lex_param_1 :named("node"))
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$>" :subid("cuid_147_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 533
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 534
    nqp_get_sc_object $P5001, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5002 = $P5001."new"("anchor" :named("rxtype"), "eos" :named("subtype"), _lex_param_1 :named("node"))
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$$>" :subid("cuid_148_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 537
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 538
    nqp_get_sc_object $P5001, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5002 = $P5001."new"("anchor" :named("rxtype"), "eol" :named("subtype"), _lex_param_1 :named("node"))
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<lwb>" :subid("cuid_149_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 541
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 542
    nqp_get_sc_object $P5001, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5002 = $P5001."new"("anchor" :named("rxtype"), "lwb" :named("subtype"), _lex_param_1 :named("node"))
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<rwb>" :subid("cuid_150_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 545
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 546
    nqp_get_sc_object $P5001, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5002 = $P5001."new"("anchor" :named("rxtype"), "rwb" :named("subtype"), _lex_param_1 :named("node"))
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<from>" :subid("cuid_151_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 549
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 550
    nqp_get_sc_object $P5001, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
.annotate 'line', 552
    nqp_get_sc_object $P5002, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 12
.annotate 'line', 553
    nqp_get_sc_object $P5003, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 55
    $P5004 = $P5003."new"("!LITERAL" :named("value"))
.annotate 'line', 554
    nqp_get_sc_object $P5005, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 55
    $P5006 = $P5005."new"("" :named("value"))
    $P5007 = $P5002."new"($P5004, $P5006)
    $P5008 = $P5001."new"($P5007, "subrule" :named("rxtype"), "capture" :named("subtype"), "r" :named("backtrack"), "$!from" :named("name"), _lex_param_1 :named("node"))
    $P5009 = _lex_param_1."!make"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<to>" :subid("cuid_152_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 557
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 558
    nqp_get_sc_object $P5001, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
.annotate 'line', 560
    nqp_get_sc_object $P5002, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 12
.annotate 'line', 561
    nqp_get_sc_object $P5003, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 55
    $P5004 = $P5003."new"("!LITERAL" :named("value"))
.annotate 'line', 562
    nqp_get_sc_object $P5005, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 55
    $P5006 = $P5005."new"("" :named("value"))
    $P5007 = $P5002."new"($P5004, $P5006)
    $P5008 = $P5001."new"($P5007, "subrule" :named("rxtype"), "capture" :named("subtype"), "r" :named("backtrack"), "$!to" :named("name"), _lex_param_1 :named("node"))
    $P5009 = _lex_param_1."!make"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<bs>" :subid("cuid_153_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 565
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_96 
.annotate 'line', 566
    unless_null _lex_param_1, fallback2164
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5001
  fallback2164:
    set fb_tmp_96, _lex_param_1
    repr_defined $I5001, fb_tmp_96
    unless $I5001 goto if780_else2162 
    set $P5002, fb_tmp_96["backslash"]
    set $P5004, $P5002
    goto if780_end2163
  if780_else2162:
    null $P5003
    set $P5004, $P5003
  if780_end2163:
    unless_null $P5004, vivi_7812165
    nqp_get_sc_object $P5005, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5004, $P5005
  vivi_7812165:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<assert>" :subid("cuid_154_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 569
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_97 
.annotate 'line', 570
    unless_null _lex_param_1, fallback2168
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5001
  fallback2168:
    set fb_tmp_97, _lex_param_1
    repr_defined $I5001, fb_tmp_97
    unless $I5001 goto if782_else2166 
    set $P5002, fb_tmp_97["assertion"]
    set $P5004, $P5002
    goto if782_end2167
  if782_else2166:
    null $P5003
    set $P5004, $P5003
  if782_end2167:
    unless_null $P5004, vivi_7832169
    nqp_get_sc_object $P5005, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5004, $P5005
  vivi_7832169:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<var>" :subid("cuid_155_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 573
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "$name", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_98 
    .local pmc fb_tmp_99 
    .local pmc fb_tmp_100 
    .local pmc fb_tmp_101 
    .local pmc fb_tmp_102 
    .local pmc fb_tmp_103 
    .local pmc fb_tmp_104 
    .local pmc fb_tmp_105 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P102, $P5002
    unless_null _lex_param_1, fallback2174
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5003
  fallback2174:
    set fb_tmp_98, _lex_param_1
    repr_defined $I5001, fb_tmp_98
    unless $I5001 goto if785_else2172 
    set $P5004, fb_tmp_98["pos"]
    set $P5006, $P5004
    goto if785_end2173
  if785_else2172:
    null $P5005
    set $P5006, $P5005
  if785_end2173:
    unless_null $P5006, vivi_7862175
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_7862175:
    unless $P5006 goto if784_else2170 
    unless_null _lex_param_1, fallback2178
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5008
  fallback2178:
    set fb_tmp_99, _lex_param_1
    repr_defined $I5002, fb_tmp_99
    unless $I5002 goto if787_else2176 
    set $P5009, fb_tmp_99["pos"]
    set $P5011, $P5009
    goto if787_end2177
  if787_else2176:
    null $P5010
    set $P5011, $P5010
  if787_end2177:
    unless_null $P5011, vivi_7882179
    nqp_get_sc_object $P5012, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5011, $P5012
  vivi_7882179:
    set $N5001, $P5011
    box $P5019, $N5001
    set $P5018, $P5019
    goto if784_end2171
  if784_else2170:
    unless_null _lex_param_1, fallback2182
    nqp_get_sc_object $P5013, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5013
  fallback2182:
    set fb_tmp_100, _lex_param_1
    repr_defined $I5003, fb_tmp_100
    unless $I5003 goto if789_else2180 
    set $P5014, fb_tmp_100["name"]
    set $P5016, $P5014
    goto if789_end2181
  if789_else2180:
    null $P5015
    set $P5016, $P5015
  if789_end2181:
    unless_null $P5016, vivi_7902183
    nqp_get_sc_object $P5017, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5016, $P5017
  vivi_7902183:
    set $S5001, $P5016
    box $P5020, $S5001
    set $P5018, $P5020
  if784_end2171:
    set $P102, $P5018
    unless_null _lex_param_1, fallback2188
    nqp_get_sc_object $P5021, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5021
  fallback2188:
    set fb_tmp_101, _lex_param_1
    repr_defined $I5004, fb_tmp_101
    unless $I5004 goto if792_else2186 
    set $P5022, fb_tmp_101["quantified_atom"]
    set $P5024, $P5022
    goto if792_end2187
  if792_else2186:
    null $P5023
    set $P5024, $P5023
  if792_end2187:
    unless_null $P5024, vivi_7932189
    nqp_get_sc_object $P5025, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5024, $P5025
  vivi_7932189:
    unless $P5024 goto if791_else2184 
.annotate 'line', 576
.annotate 'line', 577
    unless_null _lex_param_1, fallback2194
    nqp_get_sc_object $P5026, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5026
  fallback2194:
    set fb_tmp_103, _lex_param_1
    repr_defined $I5006, fb_tmp_103
    unless $I5006 goto if795_else2192 
    set $P5027, fb_tmp_103["quantified_atom"]
    set $P5029, $P5027
    goto if795_end2193
  if795_else2192:
    null $P5028
    set $P5029, $P5028
  if795_end2193:
    unless_null $P5029, vivi_7962195
    nqp_get_sc_object $P5030, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5029, $P5030
  vivi_7962195:
    set fb_tmp_102, $P5029
    repr_defined $I5005, fb_tmp_102
    unless $I5005 goto if794_else2190 
    set $P5031, fb_tmp_102[0]
    set $P5033, $P5031
    goto if794_end2191
  if794_else2190:
    null $P5032
    set $P5033, $P5032
  if794_end2191:
    unless_null $P5033, vivi_7972196
    nqp_get_sc_object $P5034, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5033, $P5034
  vivi_7972196:
    $P5035 = $P5033."ast"()
    set $P101, $P5035
.annotate 'line', 578
    $P5036 = $P101."rxtype"()
    set $S5002, $P5036
    iseq $I5007, $S5002, "quant"
    set $I5010, $I5007
    unless $I5007 goto if799_end2200 
    set fb_tmp_104, $P101
    repr_defined $I5009, fb_tmp_104
    unless $I5009 goto if800_else2201 
    set $P5037, fb_tmp_104[0]
    set $P5039, $P5037
    goto if800_end2202
  if800_else2201:
    null $P5038
    set $P5039, $P5038
  if800_end2202:
    unless_null $P5039, vivi_8012203
    nqp_get_sc_object $P5040, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5039, $P5040
  vivi_8012203:
    $P5041 = $P5039."rxtype"()
    set $S5003, $P5041
    iseq $I5008, $S5003, "subrule"
    set $I5010, $I5008
  if799_end2200:
    unless $I5010 goto if798_else2197 
.annotate 'line', 579
    nqp_decontainerize $P5042, _lex_param_0
    set fb_tmp_105, $P101
    repr_defined $I5011, fb_tmp_105
    unless $I5011 goto if802_else2204 
    set $P5043, fb_tmp_105[0]
    set $P5045, $P5043
    goto if802_end2205
  if802_else2204:
    null $P5044
    set $P5045, $P5044
  if802_end2205:
    unless_null $P5045, vivi_8032206
    nqp_get_sc_object $P5046, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5045, $P5046
  vivi_8032206:
    $P5047 = $P5042."subrule_alias"($P5045, $P102)
    set $P5054, $P5047
    goto if798_end2198
  if798_else2197:
.annotate 'line', 581
    $P5048 = $P101."rxtype"()
    set $S5004, $P5048
    iseq $I5012, $S5004, "subrule"
    unless $I5012 goto if804_else2207 
.annotate 'line', 582
    nqp_decontainerize $P5049, _lex_param_0
    $P5050 = $P5049."subrule_alias"($P101, $P102)
    set $P5053, $P5050
    goto if804_end2208
  if804_else2207:
.annotate 'line', 584
.annotate 'line', 585
    nqp_get_sc_object $P5051, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5052 = $P5051."new"($P101, $P102 :named("name"), "subcapture" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5052
    set $P5053, $P101
  if804_end2208:
    set $P5054, $P5053
  if798_end2198:
    goto if791_end2185
  if791_else2184:
.annotate 'line', 589
.annotate 'line', 590
    nqp_get_sc_object $P5055, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
.annotate 'line', 591
    nqp_get_sc_object $P5056, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 12
.annotate 'line', 592
    nqp_get_sc_object $P5057, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 55
    $P5058 = $P5057."new"("!BACKREF" :named("value"))
.annotate 'line', 593
    nqp_get_sc_object $P5059, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 55
    $P5060 = $P5059."new"($P102 :named("value"))
    $P5061 = $P5056."new"($P5058, $P5060)
    $P5062 = $P5055."new"($P5061, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    set $P101, $P5062
  if791_end2185:
.annotate 'line', 595
    $P5063 = _lex_param_1."!make"($P101)
    .return ($P5063) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<~>" :subid("cuid_156_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 598
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "@dba", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_106 
    .local pmc pkg_viv_tmp_10 
    .local pmc fb_tmp_107 
    .local pmc fb_tmp_108 
    .local pmc pkg_viv_tmp_9 
    .local pmc fb_tmp_109 
    .local pmc fb_tmp_110 
    .local pmc fb_tmp_111 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_dynamic_lex $P5002, "%*RX"
    unless_null $P5002, fallback2211
    nqp_get_sc_object $P5004, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 0
    get_who $P5003, $P5004
    set pkg_viv_tmp_10, $P5003
    set fb_tmp_106, pkg_viv_tmp_10
    repr_defined $I5002, fb_tmp_106
    unless $I5002 goto if806_else2212 
    set $P5005, fb_tmp_106["%RX"]
    set $P5007, $P5005
    goto if806_end2213
  if806_else2212:
    null $P5006
    set $P5007, $P5006
  if806_end2213:
    unless_null $P5007, vivi_8072214
    new $P5008, 'Hash'
    set pkg_viv_tmp_10["%RX"], $P5008
    set $P5007, $P5008
  vivi_8072214:
    unless_null $P5007, vivi_8082215
    die "Contextual %*RX not found"
    box $P5009, "Contextual %*RX not found"
    set $P5007, $P5009
  vivi_8082215:
    set $P5002, $P5007
  fallback2211:
    exists $I5001, $P5002["dba"]
    unless $I5001 goto if805_end2210 
    new $P5010, 'ResizablePMCArray'
.annotate 'line', 599
    nqp_get_sc_object $P5011, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 55
    find_dynamic_lex $P5012, "%*RX"
    unless_null $P5012, fallback2218
    nqp_get_sc_object $P5014, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 0
    get_who $P5013, $P5014
    set pkg_viv_tmp_9, $P5013
    set fb_tmp_108, pkg_viv_tmp_9
    repr_defined $I5004, fb_tmp_108
    unless $I5004 goto if810_else2219 
    set $P5015, fb_tmp_108["%RX"]
    set $P5017, $P5015
    goto if810_end2220
  if810_else2219:
    null $P5016
    set $P5017, $P5016
  if810_end2220:
    unless_null $P5017, vivi_8112221
    new $P5018, 'Hash'
    set pkg_viv_tmp_9["%RX"], $P5018
    set $P5017, $P5018
  vivi_8112221:
    unless_null $P5017, vivi_8122222
    die "Contextual %*RX not found"
    box $P5019, "Contextual %*RX not found"
    set $P5017, $P5019
  vivi_8122222:
    set $P5012, $P5017
  fallback2218:
    set fb_tmp_107, $P5012
    repr_defined $I5003, fb_tmp_107
    unless $I5003 goto if809_else2216 
    set $P5020, fb_tmp_107["dba"]
    set $P5022, $P5020
    goto if809_end2217
  if809_else2216:
    null $P5021
    set $P5022, $P5021
  if809_end2217:
    unless_null $P5022, vivi_8132223
    nqp_get_sc_object $P5023, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5022, $P5023
  vivi_8132223:
    $P5024 = $P5011."new"($P5022 :named("value"))
    push $P5010, $P5024
    set $P101, $P5010
  if805_end2210:
.annotate 'line', 600
    nqp_get_sc_object $P5025, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
.annotate 'line', 601
    unless_null _lex_param_1, fallback2226
    nqp_get_sc_object $P5026, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5026
  fallback2226:
    set fb_tmp_109, _lex_param_1
    repr_defined $I5005, fb_tmp_109
    unless $I5005 goto if814_else2224 
    set $P5027, fb_tmp_109["EXPR"]
    set $P5029, $P5027
    goto if814_end2225
  if814_else2224:
    null $P5028
    set $P5029, $P5028
  if814_end2225:
    unless_null $P5029, vivi_8152227
    nqp_get_sc_object $P5030, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5029, $P5030
  vivi_8152227:
    $P5031 = $P5029."ast"()
.annotate 'line', 602
    nqp_get_sc_object $P5032, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
.annotate 'line', 603
    unless_null _lex_param_1, fallback2230
    nqp_get_sc_object $P5033, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5033
  fallback2230:
    set fb_tmp_110, _lex_param_1
    repr_defined $I5006, fb_tmp_110
    unless $I5006 goto if816_else2228 
    set $P5034, fb_tmp_110["GOAL"]
    set $P5036, $P5034
    goto if816_end2229
  if816_else2228:
    null $P5035
    set $P5036, $P5035
  if816_end2229:
    unless_null $P5036, vivi_8172231
    nqp_get_sc_object $P5037, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5036, $P5037
  vivi_8172231:
    $P5038 = $P5036."ast"()
.annotate 'line', 604
    nqp_get_sc_object $P5039, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
.annotate 'line', 605
    nqp_get_sc_object $P5040, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 12
.annotate 'line', 606
    nqp_get_sc_object $P5041, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 55
    $P5042 = $P5041."new"("FAILGOAL" :named("value"))
.annotate 'line', 607
    nqp_get_sc_object $P5043, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 55
    unless_null _lex_param_1, fallback2234
    nqp_get_sc_object $P5044, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5044
  fallback2234:
    set fb_tmp_111, _lex_param_1
    repr_defined $I5007, fb_tmp_111
    unless $I5007 goto if818_else2232 
    set $P5045, fb_tmp_111["GOAL"]
    set $P5047, $P5045
    goto if818_end2233
  if818_else2232:
    null $P5046
    set $P5047, $P5046
  if818_end2233:
    unless_null $P5047, vivi_8192235
    nqp_get_sc_object $P5048, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5047, $P5048
  vivi_8192235:
    set $S5001, $P5047
    $P5049 = $P5043."new"($S5001 :named("value"))
    $P5050 = $P5040."new"($P5042, $P5049, $P101 :flat)
    $P5051 = $P5039."new"($P5050, "subrule" :named("rxtype"), "method" :named("subtype"))
    $P5052 = $P5032."new"($P5038, $P5051, "altseq" :named("rxtype"))
    $P5053 = $P5025."new"($P5031, $P5052, "concat" :named("rxtype"))
    $P5054 = _lex_param_1."!make"($P5053)
    .return ($P5054) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<mod>" :subid("cuid_157_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 615
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_112 
    unless_null _lex_param_1, fallback2238
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5001
  fallback2238:
    set fb_tmp_112, _lex_param_1
    repr_defined $I5001, fb_tmp_112
    unless $I5001 goto if820_else2236 
    set $P5002, fb_tmp_112["mod_internal"]
    set $P5004, $P5002
    goto if820_end2237
  if820_else2236:
    null $P5003
    set $P5004, $P5003
  if820_end2237:
    unless_null $P5004, vivi_8212239
    nqp_get_sc_object $P5005, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5004, $P5005
  vivi_8212239:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<s>" :subid("cuid_158_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 617
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_113 
    .local pmc fb_tmp_114 
.annotate 'line', 618
    nqp_get_sc_object $P5001, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    unless_null _lex_param_1, fallback2242
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5002
  fallback2242:
    set fb_tmp_113, _lex_param_1
    repr_defined $I5001, fb_tmp_113
    unless $I5001 goto if822_else2240 
    set $P5003, fb_tmp_113["sym"]
    set $P5005, $P5003
    goto if822_end2241
  if822_else2240:
    null $P5004
    set $P5005, $P5004
  if822_end2241:
    unless_null $P5005, vivi_8232243
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5005, $P5006
  vivi_8232243:
    set $S5002, $P5005
    downcase $S5001, $S5002
    unless_null _lex_param_1, fallback2246
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5007
  fallback2246:
    set fb_tmp_114, _lex_param_1
    repr_defined $I5003, fb_tmp_114
    unless $I5003 goto if824_else2244 
    set $P5008, fb_tmp_114["sym"]
    set $P5010, $P5008
    goto if824_end2245
  if824_else2244:
    null $P5009
    set $P5010, $P5009
  if824_end2245:
    unless_null $P5010, vivi_8252247
    nqp_get_sc_object $P5011, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5010, $P5011
  vivi_8252247:
    set $S5003, $P5010
    isle $I5002, $S5003, "Z"
    $P5012 = $P5001."new"("cclass" :named("rxtype"), $S5001 :named("name"), $I5002 :named("negate"), _lex_param_1 :named("node"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<b>" :subid("cuid_159_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 622
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_115 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 623
    nqp_get_sc_object $P5002, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    unless_null _lex_param_1, fallback2250
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5003
  fallback2250:
    set fb_tmp_115, _lex_param_1
    repr_defined $I5002, fb_tmp_115
    unless $I5002 goto if826_else2248 
    set $P5004, fb_tmp_115["sym"]
    set $P5006, $P5004
    goto if826_end2249
  if826_else2248:
    null $P5005
    set $P5006, $P5005
  if826_end2249:
    unless_null $P5006, vivi_8272251
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_8272251:
    set $S5001, $P5006
    iseq $I5001, $S5001, "B"
    $P5008 = $P5002."new"("\b", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 625
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<e>" :subid("cuid_160_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 628
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_116 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 629
    nqp_get_sc_object $P5002, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    unless_null _lex_param_1, fallback2254
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5003
  fallback2254:
    set fb_tmp_116, _lex_param_1
    repr_defined $I5002, fb_tmp_116
    unless $I5002 goto if828_else2252 
    set $P5004, fb_tmp_116["sym"]
    set $P5006, $P5004
    goto if828_end2253
  if828_else2252:
    null $P5005
    set $P5006, $P5005
  if828_end2253:
    unless_null $P5006, vivi_8292255
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_8292255:
    set $S5001, $P5006
    iseq $I5001, $S5001, "E"
    $P5008 = $P5002."new"("\e", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 631
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<f>" :subid("cuid_161_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 634
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_117 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 635
    nqp_get_sc_object $P5002, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    unless_null _lex_param_1, fallback2258
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5003
  fallback2258:
    set fb_tmp_117, _lex_param_1
    repr_defined $I5002, fb_tmp_117
    unless $I5002 goto if830_else2256 
    set $P5004, fb_tmp_117["sym"]
    set $P5006, $P5004
    goto if830_end2257
  if830_else2256:
    null $P5005
    set $P5006, $P5005
  if830_end2257:
    unless_null $P5006, vivi_8312259
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_8312259:
    set $S5001, $P5006
    iseq $I5001, $S5001, "F"
    $P5008 = $P5002."new"("\f", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 637
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<h>" :subid("cuid_162_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 640
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_118 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 641
    nqp_get_sc_object $P5002, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    unless_null _lex_param_1, fallback2262
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5003
  fallback2262:
    set fb_tmp_118, _lex_param_1
    repr_defined $I5002, fb_tmp_118
    unless $I5002 goto if832_else2260 
    set $P5004, fb_tmp_118["sym"]
    set $P5006, $P5004
    goto if832_end2261
  if832_else2260:
    null $P5005
    set $P5006, $P5005
  if832_end2261:
    unless_null $P5006, vivi_8332263
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_8332263:
    set $S5001, $P5006
    iseq $I5001, $S5001, "H"
    $P5008 = $P5002."new"(utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 643
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<r>" :subid("cuid_163_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 646
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_119 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 647
    nqp_get_sc_object $P5002, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    unless_null _lex_param_1, fallback2266
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5003
  fallback2266:
    set fb_tmp_119, _lex_param_1
    repr_defined $I5002, fb_tmp_119
    unless $I5002 goto if834_else2264 
    set $P5004, fb_tmp_119["sym"]
    set $P5006, $P5004
    goto if834_end2265
  if834_else2264:
    null $P5005
    set $P5006, $P5005
  if834_end2265:
    unless_null $P5006, vivi_8352267
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_8352267:
    set $S5001, $P5006
    iseq $I5001, $S5001, "R"
    $P5008 = $P5002."new"("\r", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 649
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<t>" :subid("cuid_164_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 652
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_120 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 653
    nqp_get_sc_object $P5002, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    unless_null _lex_param_1, fallback2270
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5003
  fallback2270:
    set fb_tmp_120, _lex_param_1
    repr_defined $I5002, fb_tmp_120
    unless $I5002 goto if836_else2268 
    set $P5004, fb_tmp_120["sym"]
    set $P5006, $P5004
    goto if836_end2269
  if836_else2268:
    null $P5005
    set $P5006, $P5005
  if836_end2269:
    unless_null $P5006, vivi_8372271
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_8372271:
    set $S5001, $P5006
    iseq $I5001, $S5001, "T"
    $P5008 = $P5002."new"("\t", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 655
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<v>" :subid("cuid_165_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 658
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_121 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 659
    nqp_get_sc_object $P5002, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    unless_null _lex_param_1, fallback2274
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5003
  fallback2274:
    set fb_tmp_121, _lex_param_1
    repr_defined $I5002, fb_tmp_121
    unless $I5002 goto if838_else2272 
    set $P5004, fb_tmp_121["sym"]
    set $P5006, $P5004
    goto if838_end2273
  if838_else2272:
    null $P5005
    set $P5006, $P5005
  if838_end2273:
    unless_null $P5006, vivi_8392275
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_8392275:
    set $S5001, $P5006
    iseq $I5001, $S5001, "V"
    $P5008 = $P5002."new"(utf8:"\n\x{b}\f\r\x{85}\u2028\u2029", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 662
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<o>" :subid("cuid_166_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 665
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$octlit", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_122 
    .local pmc fb_tmp_123 
    .local pmc fb_tmp_124 
    .local pmc fb_tmp_125 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 667
    nqp_get_sc_object $P5002, "30F2FDCF121B88EF4D971E3D787EDDB9E926F649-1381281791.94485", 68
    unless_null _lex_param_1, fallback2280
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5003
  fallback2280:
    set fb_tmp_122, _lex_param_1
    repr_defined $I5001, fb_tmp_122
    unless $I5001 goto if841_else2278 
    set $P5004, fb_tmp_122["octint"]
    set $P5006, $P5004
    goto if841_end2279
  if841_else2278:
    null $P5005
    set $P5006, $P5005
  if841_end2279:
    unless_null $P5006, vivi_8422281
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_8422281:
    set $P5017, $P5006
    if $P5006 goto unless840_end2277 
    unless_null _lex_param_1, fallback2286
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5008
  fallback2286:
    set fb_tmp_124, _lex_param_1
    repr_defined $I5003, fb_tmp_124
    unless $I5003 goto if844_else2284 
    set $P5009, fb_tmp_124["octints"]
    set $P5011, $P5009
    goto if844_end2285
  if844_else2284:
    null $P5010
    set $P5011, $P5010
  if844_end2285:
    unless_null $P5011, vivi_8452287
    nqp_get_sc_object $P5012, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5011, $P5012
  vivi_8452287:
    set fb_tmp_123, $P5011
    repr_defined $I5002, fb_tmp_123
    unless $I5002 goto if843_else2282 
    set $P5013, fb_tmp_123["octint"]
    set $P5015, $P5013
    goto if843_end2283
  if843_else2282:
    null $P5014
    set $P5015, $P5014
  if843_end2283:
    unless_null $P5015, vivi_8462288
    nqp_get_sc_object $P5016, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5015, $P5016
  vivi_8462288:
    set $P5017, $P5015
  unless840_end2277:
    $P5018 = $P5002."ints_to_string"($P5017)
    set $P101, $P5018
.annotate 'line', 668
    unless_null _lex_param_1, fallback2293
    nqp_get_sc_object $P5019, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5019
  fallback2293:
    set fb_tmp_125, _lex_param_1
    repr_defined $I5005, fb_tmp_125
    unless $I5005 goto if848_else2291 
    set $P5020, fb_tmp_125["sym"]
    set $P5022, $P5020
    goto if848_end2292
  if848_else2291:
    null $P5021
    set $P5022, $P5021
  if848_end2292:
    unless_null $P5022, vivi_8492294
    nqp_get_sc_object $P5023, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5022, $P5023
  vivi_8492294:
    set $S5001, $P5022
    iseq $I5004, $S5001, "O"
    unless $I5004 goto if847_else2289 
.annotate 'line', 669
    nqp_get_sc_object $P5024, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5025 = $P5024."new"($P101, "enumcharlist" :named("rxtype"), 1 :named("negate"), _lex_param_1 :named("node"))
    set $P5028, $P5025
    goto if847_end2290
  if847_else2289:
.annotate 'line', 671
    nqp_get_sc_object $P5026, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5027 = $P5026."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P5028, $P5027
  if847_end2290:
    $P5029 = _lex_param_1."!make"($P5028)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<x>" :subid("cuid_167_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 674
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$hexlit", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_126 
    .local pmc fb_tmp_127 
    .local pmc fb_tmp_128 
    .local pmc fb_tmp_129 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 676
    nqp_get_sc_object $P5002, "30F2FDCF121B88EF4D971E3D787EDDB9E926F649-1381281791.94485", 68
    unless_null _lex_param_1, fallback2299
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5003
  fallback2299:
    set fb_tmp_126, _lex_param_1
    repr_defined $I5001, fb_tmp_126
    unless $I5001 goto if851_else2297 
    set $P5004, fb_tmp_126["hexint"]
    set $P5006, $P5004
    goto if851_end2298
  if851_else2297:
    null $P5005
    set $P5006, $P5005
  if851_end2298:
    unless_null $P5006, vivi_8522300
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_8522300:
    set $P5017, $P5006
    if $P5006 goto unless850_end2296 
    unless_null _lex_param_1, fallback2305
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5008
  fallback2305:
    set fb_tmp_128, _lex_param_1
    repr_defined $I5003, fb_tmp_128
    unless $I5003 goto if854_else2303 
    set $P5009, fb_tmp_128["hexints"]
    set $P5011, $P5009
    goto if854_end2304
  if854_else2303:
    null $P5010
    set $P5011, $P5010
  if854_end2304:
    unless_null $P5011, vivi_8552306
    nqp_get_sc_object $P5012, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5011, $P5012
  vivi_8552306:
    set fb_tmp_127, $P5011
    repr_defined $I5002, fb_tmp_127
    unless $I5002 goto if853_else2301 
    set $P5013, fb_tmp_127["hexint"]
    set $P5015, $P5013
    goto if853_end2302
  if853_else2301:
    null $P5014
    set $P5015, $P5014
  if853_end2302:
    unless_null $P5015, vivi_8562307
    nqp_get_sc_object $P5016, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5015, $P5016
  vivi_8562307:
    set $P5017, $P5015
  unless850_end2296:
    $P5018 = $P5002."ints_to_string"($P5017)
    set $P101, $P5018
.annotate 'line', 677
    unless_null _lex_param_1, fallback2312
    nqp_get_sc_object $P5019, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5019
  fallback2312:
    set fb_tmp_129, _lex_param_1
    repr_defined $I5005, fb_tmp_129
    unless $I5005 goto if858_else2310 
    set $P5020, fb_tmp_129["sym"]
    set $P5022, $P5020
    goto if858_end2311
  if858_else2310:
    null $P5021
    set $P5022, $P5021
  if858_end2311:
    unless_null $P5022, vivi_8592313
    nqp_get_sc_object $P5023, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5022, $P5023
  vivi_8592313:
    set $S5001, $P5022
    iseq $I5004, $S5001, "X"
    unless $I5004 goto if857_else2308 
.annotate 'line', 678
    nqp_get_sc_object $P5024, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5025 = $P5024."new"($P101, "enumcharlist" :named("rxtype"), 1 :named("negate"), _lex_param_1 :named("node"))
    set $P5028, $P5025
    goto if857_end2309
  if857_else2308:
.annotate 'line', 680
    nqp_get_sc_object $P5026, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5027 = $P5026."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P5028, $P5027
  if857_end2309:
    $P5029 = _lex_param_1."!make"($P5028)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<c>" :subid("cuid_168_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 683
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_130 
.annotate 'line', 684
    nqp_get_sc_object $P5001, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    unless_null _lex_param_1, fallback2316
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5002
  fallback2316:
    set fb_tmp_130, _lex_param_1
    repr_defined $I5001, fb_tmp_130
    unless $I5001 goto if860_else2314 
    set $P5003, fb_tmp_130["charspec"]
    set $P5005, $P5003
    goto if860_end2315
  if860_else2314:
    null $P5004
    set $P5005, $P5004
  if860_end2315:
    unless_null $P5005, vivi_8612317
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5005, $P5006
  vivi_8612317:
    $P5007 = $P5005."ast"()
    $P5008 = $P5001."new"($P5007, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    $P5009 = _lex_param_1."!make"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<misc>" :subid("cuid_169_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 687
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 688
    nqp_get_sc_object $P5002, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    set $S5001, _lex_param_1
    $P5003 = $P5002."new"($S5001, "enumcharlist" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5003
.annotate 'line', 689
    $P5004 = _lex_param_1."!make"($P101)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<s>" :subid("cuid_170_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 692
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_131 
    .local pmc fb_tmp_132 
.annotate 'line', 693
    nqp_get_sc_object $P5001, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    unless_null _lex_param_1, fallback2320
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5002
  fallback2320:
    set fb_tmp_131, _lex_param_1
    repr_defined $I5001, fb_tmp_131
    unless $I5001 goto if862_else2318 
    set $P5003, fb_tmp_131["sym"]
    set $P5005, $P5003
    goto if862_end2319
  if862_else2318:
    null $P5004
    set $P5005, $P5004
  if862_end2319:
    unless_null $P5005, vivi_8632321
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5005, $P5006
  vivi_8632321:
    set $S5002, $P5005
    downcase $S5001, $S5002
    unless_null _lex_param_1, fallback2324
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5007
  fallback2324:
    set fb_tmp_132, _lex_param_1
    repr_defined $I5003, fb_tmp_132
    unless $I5003 goto if864_else2322 
    set $P5008, fb_tmp_132["sym"]
    set $P5010, $P5008
    goto if864_end2323
  if864_else2322:
    null $P5009
    set $P5010, $P5009
  if864_end2323:
    unless_null $P5010, vivi_8652325
    nqp_get_sc_object $P5011, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5010, $P5011
  vivi_8652325:
    set $S5003, $P5010
    isle $I5002, $S5003, "Z"
    $P5012 = $P5001."new"("cclass" :named("rxtype"), $S5001 :named("name"), $I5002 :named("negate"), _lex_param_1 :named("node"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<b>" :subid("cuid_171_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 697
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_133 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 698
    nqp_get_sc_object $P5002, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    unless_null _lex_param_1, fallback2328
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5003
  fallback2328:
    set fb_tmp_133, _lex_param_1
    repr_defined $I5002, fb_tmp_133
    unless $I5002 goto if866_else2326 
    set $P5004, fb_tmp_133["sym"]
    set $P5006, $P5004
    goto if866_end2327
  if866_else2326:
    null $P5005
    set $P5006, $P5005
  if866_end2327:
    unless_null $P5006, vivi_8672329
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_8672329:
    set $S5001, $P5006
    iseq $I5001, $S5001, "B"
    $P5008 = $P5002."new"("\b", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 700
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<e>" :subid("cuid_172_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 703
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_134 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 704
    nqp_get_sc_object $P5002, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    unless_null _lex_param_1, fallback2332
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5003
  fallback2332:
    set fb_tmp_134, _lex_param_1
    repr_defined $I5002, fb_tmp_134
    unless $I5002 goto if868_else2330 
    set $P5004, fb_tmp_134["sym"]
    set $P5006, $P5004
    goto if868_end2331
  if868_else2330:
    null $P5005
    set $P5006, $P5005
  if868_end2331:
    unless_null $P5006, vivi_8692333
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_8692333:
    set $S5001, $P5006
    iseq $I5001, $S5001, "E"
    $P5008 = $P5002."new"("\e", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 706
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<f>" :subid("cuid_173_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 709
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_135 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 710
    nqp_get_sc_object $P5002, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    unless_null _lex_param_1, fallback2336
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5003
  fallback2336:
    set fb_tmp_135, _lex_param_1
    repr_defined $I5002, fb_tmp_135
    unless $I5002 goto if870_else2334 
    set $P5004, fb_tmp_135["sym"]
    set $P5006, $P5004
    goto if870_end2335
  if870_else2334:
    null $P5005
    set $P5006, $P5005
  if870_end2335:
    unless_null $P5006, vivi_8712337
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_8712337:
    set $S5001, $P5006
    iseq $I5001, $S5001, "F"
    $P5008 = $P5002."new"("\f", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 712
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<h>" :subid("cuid_174_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 715
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_136 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 716
    nqp_get_sc_object $P5002, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    unless_null _lex_param_1, fallback2340
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5003
  fallback2340:
    set fb_tmp_136, _lex_param_1
    repr_defined $I5002, fb_tmp_136
    unless $I5002 goto if872_else2338 
    set $P5004, fb_tmp_136["sym"]
    set $P5006, $P5004
    goto if872_end2339
  if872_else2338:
    null $P5005
    set $P5006, $P5005
  if872_end2339:
    unless_null $P5006, vivi_8732341
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_8732341:
    set $S5001, $P5006
    iseq $I5001, $S5001, "H"
    $P5008 = $P5002."new"(utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 718
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<r>" :subid("cuid_175_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 721
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_137 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 722
    nqp_get_sc_object $P5002, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    unless_null _lex_param_1, fallback2344
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5003
  fallback2344:
    set fb_tmp_137, _lex_param_1
    repr_defined $I5002, fb_tmp_137
    unless $I5002 goto if874_else2342 
    set $P5004, fb_tmp_137["sym"]
    set $P5006, $P5004
    goto if874_end2343
  if874_else2342:
    null $P5005
    set $P5006, $P5005
  if874_end2343:
    unless_null $P5006, vivi_8752345
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_8752345:
    set $S5001, $P5006
    iseq $I5001, $S5001, "R"
    $P5008 = $P5002."new"("\r", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 724
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<t>" :subid("cuid_176_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 727
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_138 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 728
    nqp_get_sc_object $P5002, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    unless_null _lex_param_1, fallback2348
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5003
  fallback2348:
    set fb_tmp_138, _lex_param_1
    repr_defined $I5002, fb_tmp_138
    unless $I5002 goto if876_else2346 
    set $P5004, fb_tmp_138["sym"]
    set $P5006, $P5004
    goto if876_end2347
  if876_else2346:
    null $P5005
    set $P5006, $P5005
  if876_end2347:
    unless_null $P5006, vivi_8772349
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_8772349:
    set $S5001, $P5006
    iseq $I5001, $S5001, "T"
    $P5008 = $P5002."new"("\t", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 730
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<v>" :subid("cuid_177_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 733
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_139 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 734
    nqp_get_sc_object $P5002, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    unless_null _lex_param_1, fallback2352
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5003
  fallback2352:
    set fb_tmp_139, _lex_param_1
    repr_defined $I5002, fb_tmp_139
    unless $I5002 goto if878_else2350 
    set $P5004, fb_tmp_139["sym"]
    set $P5006, $P5004
    goto if878_end2351
  if878_else2350:
    null $P5005
    set $P5006, $P5005
  if878_end2351:
    unless_null $P5006, vivi_8792353
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_8792353:
    set $S5001, $P5006
    iseq $I5001, $S5001, "V"
    $P5008 = $P5002."new"(utf8:"\n\x{b}\f\r\x{85}\u2028\u2029", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 737
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<o>" :subid("cuid_178_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 740
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$octlit", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_140 
    .local pmc fb_tmp_141 
    .local pmc fb_tmp_142 
    .local pmc fb_tmp_143 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 742
    nqp_get_sc_object $P5002, "30F2FDCF121B88EF4D971E3D787EDDB9E926F649-1381281791.94485", 68
    unless_null _lex_param_1, fallback2358
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5003
  fallback2358:
    set fb_tmp_140, _lex_param_1
    repr_defined $I5001, fb_tmp_140
    unless $I5001 goto if881_else2356 
    set $P5004, fb_tmp_140["octint"]
    set $P5006, $P5004
    goto if881_end2357
  if881_else2356:
    null $P5005
    set $P5006, $P5005
  if881_end2357:
    unless_null $P5006, vivi_8822359
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_8822359:
    set $P5017, $P5006
    if $P5006 goto unless880_end2355 
    unless_null _lex_param_1, fallback2364
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5008
  fallback2364:
    set fb_tmp_142, _lex_param_1
    repr_defined $I5003, fb_tmp_142
    unless $I5003 goto if884_else2362 
    set $P5009, fb_tmp_142["octints"]
    set $P5011, $P5009
    goto if884_end2363
  if884_else2362:
    null $P5010
    set $P5011, $P5010
  if884_end2363:
    unless_null $P5011, vivi_8852365
    nqp_get_sc_object $P5012, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5011, $P5012
  vivi_8852365:
    set fb_tmp_141, $P5011
    repr_defined $I5002, fb_tmp_141
    unless $I5002 goto if883_else2360 
    set $P5013, fb_tmp_141["octint"]
    set $P5015, $P5013
    goto if883_end2361
  if883_else2360:
    null $P5014
    set $P5015, $P5014
  if883_end2361:
    unless_null $P5015, vivi_8862366
    nqp_get_sc_object $P5016, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5015, $P5016
  vivi_8862366:
    set $P5017, $P5015
  unless880_end2355:
    $P5018 = $P5002."ints_to_string"($P5017)
    set $P101, $P5018
.annotate 'line', 743
    unless_null _lex_param_1, fallback2371
    nqp_get_sc_object $P5019, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5019
  fallback2371:
    set fb_tmp_143, _lex_param_1
    repr_defined $I5005, fb_tmp_143
    unless $I5005 goto if888_else2369 
    set $P5020, fb_tmp_143["sym"]
    set $P5022, $P5020
    goto if888_end2370
  if888_else2369:
    null $P5021
    set $P5022, $P5021
  if888_end2370:
    unless_null $P5022, vivi_8892372
    nqp_get_sc_object $P5023, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5022, $P5023
  vivi_8892372:
    set $S5001, $P5022
    iseq $I5004, $S5001, "O"
    unless $I5004 goto if887_else2367 
.annotate 'line', 744
    nqp_get_sc_object $P5024, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5025 = $P5024."new"($P101, "enumcharlist" :named("rxtype"), 1 :named("negate"), _lex_param_1 :named("node"))
    set $P5028, $P5025
    goto if887_end2368
  if887_else2367:
.annotate 'line', 746
    nqp_get_sc_object $P5026, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5027 = $P5026."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P5028, $P5027
  if887_end2368:
    $P5029 = _lex_param_1."!make"($P5028)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<x>" :subid("cuid_179_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 749
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$hexlit", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_144 
    .local pmc fb_tmp_145 
    .local pmc fb_tmp_146 
    .local pmc fb_tmp_147 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 751
    nqp_get_sc_object $P5002, "30F2FDCF121B88EF4D971E3D787EDDB9E926F649-1381281791.94485", 68
    unless_null _lex_param_1, fallback2377
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5003
  fallback2377:
    set fb_tmp_144, _lex_param_1
    repr_defined $I5001, fb_tmp_144
    unless $I5001 goto if891_else2375 
    set $P5004, fb_tmp_144["hexint"]
    set $P5006, $P5004
    goto if891_end2376
  if891_else2375:
    null $P5005
    set $P5006, $P5005
  if891_end2376:
    unless_null $P5006, vivi_8922378
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_8922378:
    set $P5017, $P5006
    if $P5006 goto unless890_end2374 
    unless_null _lex_param_1, fallback2383
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5008
  fallback2383:
    set fb_tmp_146, _lex_param_1
    repr_defined $I5003, fb_tmp_146
    unless $I5003 goto if894_else2381 
    set $P5009, fb_tmp_146["hexints"]
    set $P5011, $P5009
    goto if894_end2382
  if894_else2381:
    null $P5010
    set $P5011, $P5010
  if894_end2382:
    unless_null $P5011, vivi_8952384
    nqp_get_sc_object $P5012, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5011, $P5012
  vivi_8952384:
    set fb_tmp_145, $P5011
    repr_defined $I5002, fb_tmp_145
    unless $I5002 goto if893_else2379 
    set $P5013, fb_tmp_145["hexint"]
    set $P5015, $P5013
    goto if893_end2380
  if893_else2379:
    null $P5014
    set $P5015, $P5014
  if893_end2380:
    unless_null $P5015, vivi_8962385
    nqp_get_sc_object $P5016, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5015, $P5016
  vivi_8962385:
    set $P5017, $P5015
  unless890_end2374:
    $P5018 = $P5002."ints_to_string"($P5017)
    set $P101, $P5018
.annotate 'line', 752
    unless_null _lex_param_1, fallback2390
    nqp_get_sc_object $P5019, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5019
  fallback2390:
    set fb_tmp_147, _lex_param_1
    repr_defined $I5005, fb_tmp_147
    unless $I5005 goto if898_else2388 
    set $P5020, fb_tmp_147["sym"]
    set $P5022, $P5020
    goto if898_end2389
  if898_else2388:
    null $P5021
    set $P5022, $P5021
  if898_end2389:
    unless_null $P5022, vivi_8992391
    nqp_get_sc_object $P5023, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5022, $P5023
  vivi_8992391:
    set $S5001, $P5022
    iseq $I5004, $S5001, "X"
    unless $I5004 goto if897_else2386 
.annotate 'line', 753
    nqp_get_sc_object $P5024, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5025 = $P5024."new"($P101, "enumcharlist" :named("rxtype"), 1 :named("negate"), _lex_param_1 :named("node"))
    set $P5028, $P5025
    goto if897_end2387
  if897_else2386:
.annotate 'line', 755
    nqp_get_sc_object $P5026, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5027 = $P5026."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P5028, $P5027
  if897_end2387:
    $P5029 = _lex_param_1."!make"($P5028)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<c>" :subid("cuid_180_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 758
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_148 
.annotate 'line', 759
    nqp_get_sc_object $P5001, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    unless_null _lex_param_1, fallback2394
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5002
  fallback2394:
    set fb_tmp_148, _lex_param_1
    repr_defined $I5001, fb_tmp_148
    unless $I5001 goto if900_else2392 
    set $P5003, fb_tmp_148["charspec"]
    set $P5005, $P5003
    goto if900_end2393
  if900_else2392:
    null $P5004
    set $P5005, $P5004
  if900_end2393:
    unless_null $P5005, vivi_9012395
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5005, $P5006
  vivi_9012395:
    $P5007 = $P5005."ast"()
    $P5008 = $P5001."new"($P5007, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    $P5009 = _lex_param_1."!make"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<any>" :subid("cuid_181_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 762
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 763
    nqp_get_sc_object $P5002, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    set $S5001, _lex_param_1
    $P5003 = $P5002."new"($S5001, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5003
.annotate 'line', 764
    $P5004 = _lex_param_1."!make"($P101)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_182_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 767
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_149 
    .local pmc fb_tmp_150 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
    unless_null _lex_param_1, fallback2400
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5002
  fallback2400:
    set fb_tmp_149, _lex_param_1
    repr_defined $I5001, fb_tmp_149
    unless $I5001 goto if903_else2398 
    set $P5003, fb_tmp_149["assertion"]
    set $P5005, $P5003
    goto if903_end2399
  if903_else2398:
    null $P5004
    set $P5005, $P5004
  if903_end2399:
    unless_null $P5005, vivi_9042401
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5005, $P5006
  vivi_9042401:
    unless $P5005 goto if902_else2396 
.annotate 'line', 769
.annotate 'line', 770
    unless_null _lex_param_1, fallback2404
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5007
  fallback2404:
    set fb_tmp_150, _lex_param_1
    repr_defined $I5002, fb_tmp_150
    unless $I5002 goto if905_else2402 
    set $P5008, fb_tmp_150["assertion"]
    set $P5010, $P5008
    goto if905_end2403
  if905_else2402:
    null $P5009
    set $P5010, $P5009
  if905_end2403:
    unless_null $P5010, vivi_9062405
    nqp_get_sc_object $P5011, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5010, $P5011
  vivi_9062405:
    $P5012 = $P5010."ast"()
    set $P101, $P5012
.annotate 'line', 771
    $P5013 = $P101."subtype"("zerowidth")
    goto if902_end2397
  if902_else2396:
.annotate 'line', 773
.annotate 'line', 774
    nqp_get_sc_object $P5014, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5015 = $P5014."new"("anchor" :named("rxtype"), "pass" :named("subtype"), _lex_param_1 :named("node"))
    set $P101, $P5015
  if902_end2397:
.annotate 'line', 776
    $P5016 = _lex_param_1."!make"($P101)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_183_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 779
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_151 
    .local pmc fb_tmp_152 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
    unless_null _lex_param_1, fallback2410
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5002
  fallback2410:
    set fb_tmp_151, _lex_param_1
    repr_defined $I5001, fb_tmp_151
    unless $I5001 goto if908_else2408 
    set $P5003, fb_tmp_151["assertion"]
    set $P5005, $P5003
    goto if908_end2409
  if908_else2408:
    null $P5004
    set $P5005, $P5004
  if908_end2409:
    unless_null $P5005, vivi_9092411
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5005, $P5006
  vivi_9092411:
    unless $P5005 goto if907_else2406 
.annotate 'line', 781
.annotate 'line', 782
    unless_null _lex_param_1, fallback2414
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5007
  fallback2414:
    set fb_tmp_152, _lex_param_1
    repr_defined $I5002, fb_tmp_152
    unless $I5002 goto if910_else2412 
    set $P5008, fb_tmp_152["assertion"]
    set $P5010, $P5008
    goto if910_end2413
  if910_else2412:
    null $P5009
    set $P5010, $P5009
  if910_end2413:
    unless_null $P5010, vivi_9112415
    nqp_get_sc_object $P5011, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5010, $P5011
  vivi_9112415:
    $P5012 = $P5010."ast"()
    set $P101, $P5012
.annotate 'line', 783
    $P5013 = $P101."negate"()
    isfalse $I5003, $P5013
    $P101."negate"($I5003)
.annotate 'line', 784
    $P5014 = $P101."subtype"("zerowidth")
    goto if907_end2407
  if907_else2406:
.annotate 'line', 786
.annotate 'line', 787
    nqp_get_sc_object $P5015, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5016 = $P5015."new"("anchor" :named("rxtype"), "fail" :named("subtype"), _lex_param_1 :named("node"))
    set $P101, $P5016
  if907_end2407:
.annotate 'line', 789
    $P5017 = _lex_param_1."!make"($P101)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<|>" :subid("cuid_184_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 792
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "$name", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_153 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P102, $P5002
    unless_null _lex_param_1, fallback2418
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5003
  fallback2418:
    set fb_tmp_153, _lex_param_1
    repr_defined $I5001, fb_tmp_153
    unless $I5001 goto if912_else2416 
    set $P5004, fb_tmp_153["identifier"]
    set $P5006, $P5004
    goto if912_end2417
  if912_else2416:
    null $P5005
    set $P5006, $P5005
  if912_end2417:
    unless_null $P5006, vivi_9132419
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_9132419:
    set $S5001, $P5006
    box $P5008, $S5001
    set $P102, $P5008
    set $S5002, $P102
    iseq $I5002, $S5002, "c"
    unless $I5002 goto if914_else2420 
.annotate 'line', 795
    box $P5009, 0
    set $P101, $P5009
    goto if914_end2421
  if914_else2420:
    set $S5003, $P102
    iseq $I5003, $S5003, "w"
    box $P5017, $I5003
    set $P5016, $P5017
    unless $I5003 goto if915_end2423 
.annotate 'line', 800
.annotate 'line', 801
    nqp_get_sc_object $P5010, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
.annotate 'line', 803
    nqp_get_sc_object $P5011, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 12
    nqp_get_sc_object $P5012, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 55
    $P5013 = $P5012."new"("wb" :named("value"))
    $P5014 = $P5011."new"($P5013)
    $P5015 = $P5010."new"($P5014, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"), "" :named("name"))
    set $P101, $P5015
    set $P5016, $P101
  if915_end2423:
  if914_end2421:
.annotate 'line', 805
    $P5018 = _lex_param_1."!make"($P101)
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<method>" :subid("cuid_185_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 808
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_154 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 809
    unless_null _lex_param_1, fallback2426
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5002
  fallback2426:
    set fb_tmp_154, _lex_param_1
    repr_defined $I5001, fb_tmp_154
    unless $I5001 goto if916_else2424 
    set $P5003, fb_tmp_154["assertion"]
    set $P5005, $P5003
    goto if916_end2425
  if916_else2424:
    null $P5004
    set $P5005, $P5004
  if916_end2425:
    unless_null $P5005, vivi_9172427
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5005, $P5006
  vivi_9172427:
    $P5007 = $P5005."ast"()
    set $P101, $P5007
.annotate 'line', 810
    $P101."subtype"("method")
.annotate 'line', 811
    $P101."name"("")
.annotate 'line', 812
    $P5008 = _lex_param_1."!make"($P101)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_186_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 815
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5101 = 'cuid_246_1381281822.05887' 
    capture_lex $P5101 
    .const 'Sub' $P5101 = 'cuid_247_1381281822.05887' 
    capture_lex $P5101 
    .lex "$name", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_155 
    .local pmc fb_tmp_156 
    .local pmc fb_tmp_157 
    .local pmc fb_tmp_158 
    .local pmc fb_tmp_165 
    .local pmc fb_tmp_166 
    .local pmc fb_tmp_167 
    .local pmc fb_tmp_169 
    .local pmc fb_tmp_170 
    .local pmc fb_tmp_171 
    .local pmc fb_tmp_172 
    .local pmc fb_tmp_173 
    .local pmc fb_tmp_174 
    .local pmc fb_tmp_175 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P102, $P5002
    unless_null _lex_param_1, fallback2430
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5003
  fallback2430:
    set fb_tmp_155, _lex_param_1
    repr_defined $I5001, fb_tmp_155
    unless $I5001 goto if918_else2428 
    set $P5004, fb_tmp_155["longname"]
    set $P5006, $P5004
    goto if918_end2429
  if918_else2428:
    null $P5005
    set $P5006, $P5005
  if918_end2429:
    unless_null $P5006, vivi_9192431
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_9192431:
    set $S5001, $P5006
    box $P5008, $S5001
    set $P101, $P5008
    unless_null _lex_param_1, fallback2436
    nqp_get_sc_object $P5009, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5009
  fallback2436:
    set fb_tmp_156, _lex_param_1
    repr_defined $I5002, fb_tmp_156
    unless $I5002 goto if921_else2434 
    set $P5010, fb_tmp_156["assertion"]
    set $P5012, $P5010
    goto if921_end2435
  if921_else2434:
    null $P5011
    set $P5012, $P5011
  if921_end2435:
    unless_null $P5012, vivi_9222437
    nqp_get_sc_object $P5013, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5012, $P5013
  vivi_9222437:
    unless $P5012 goto if920_else2432 
.annotate 'line', 818
.annotate 'line', 819
    unless_null _lex_param_1, fallback2442
    nqp_get_sc_object $P5014, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5014
  fallback2442:
    set fb_tmp_158, _lex_param_1
    repr_defined $I5004, fb_tmp_158
    unless $I5004 goto if924_else2440 
    set $P5015, fb_tmp_158["assertion"]
    set $P5017, $P5015
    goto if924_end2441
  if924_else2440:
    null $P5016
    set $P5017, $P5016
  if924_end2441:
    unless_null $P5017, vivi_9252443
    nqp_get_sc_object $P5018, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5017, $P5018
  vivi_9252443:
    set fb_tmp_157, $P5017
    repr_defined $I5003, fb_tmp_157
    unless $I5003 goto if923_else2438 
    set $P5019, fb_tmp_157[0]
    set $P5021, $P5019
    goto if923_end2439
  if923_else2438:
    null $P5020
    set $P5021, $P5020
  if923_end2439:
    unless_null $P5021, vivi_9262444
    nqp_get_sc_object $P5022, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5021, $P5022
  vivi_9262444:
    $P5023 = $P5021."ast"()
    set $P102, $P5023
.annotate 'line', 820
    nqp_decontainerize $P5024, _lex_param_0
    $P5025 = $P5024."subrule_alias"($P102, $P101)
    goto if920_end2433
  if920_else2432:
    set $S5002, $P101
    iseq $I5005, $S5002, "sym"
    unless $I5005 goto if927_else2445 
    .const 'Sub' $P5026 = 'cuid_246_1381281822.05887' 
    capture_lex $P5026
    $P5027 = $P5026()
    set $P5099, $P5027
    goto if927_end2446
  if927_else2445:
.annotate 'line', 831
.annotate 'line', 832
    nqp_get_sc_object $P5028, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
.annotate 'line', 834
    nqp_get_sc_object $P5029, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 12
    nqp_get_sc_object $P5030, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 55
    $P5031 = $P5030."new"($P101 :named("value"))
    $P5032 = $P5029."new"($P5031)
    $P5033 = $P5028."new"($P5032, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"), $P101 :named("name"))
    set $P102, $P5033
    unless_null _lex_param_1, fallback2477
    nqp_get_sc_object $P5034, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5034
  fallback2477:
    set fb_tmp_165, _lex_param_1
    repr_defined $I5006, fb_tmp_165
    unless $I5006 goto if945_else2475 
    set $P5035, fb_tmp_165["arglist"]
    set $P5037, $P5035
    goto if945_end2476
  if945_else2475:
    null $P5036
    set $P5037, $P5036
  if945_end2476:
    unless_null $P5037, vivi_9462478
    nqp_get_sc_object $P5038, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5037, $P5038
  vivi_9462478:
    unless $P5037 goto if944_else2473 
.annotate 'line', 835
.annotate 'line', 836
    unless_null _lex_param_1, fallback2483
    nqp_get_sc_object $P5042, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5042
  fallback2483:
    set fb_tmp_167, _lex_param_1
    repr_defined $I5008, fb_tmp_167
    unless $I5008 goto if948_else2481 
    set $P5043, fb_tmp_167["arglist"]
    set $P5045, $P5043
    goto if948_end2482
  if948_else2481:
    null $P5044
    set $P5045, $P5044
  if948_end2482:
    unless_null $P5045, vivi_9492484
    nqp_get_sc_object $P5046, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5045, $P5046
  vivi_9492484:
    set fb_tmp_166, $P5045
    repr_defined $I5007, fb_tmp_166
    unless $I5007 goto if947_else2479 
    set $P5047, fb_tmp_166[0]
    set $P5049, $P5047
    goto if947_end2480
  if947_else2479:
    null $P5048
    set $P5049, $P5048
  if947_end2480:
    unless_null $P5049, vivi_9502485
    nqp_get_sc_object $P5050, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5049, $P5050
  vivi_9502485:
    $P5051 = $P5049."ast"()
    $P5052 = $P5051."list"()
    set $P5039, $P5052
    iter $P5041, $P5052
  for_next2489:
    unless $P5041, for_done2491
    shift $P5054, $P5041
  for_redo2490:
    .const 'Sub' $P5053 = 'cuid_247_1381281822.05887' 
    capture_lex $P5053
    $P5039 = $P5053($P5054)
    goto for_next2489
  for_done2491:
    set $P5098, $P5039
    goto if944_end2474
  if944_else2473:
    unless_null _lex_param_1, fallback2496
    nqp_get_sc_object $P5055, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5055
  fallback2496:
    set fb_tmp_169, _lex_param_1
    repr_defined $I5009, fb_tmp_169
    unless $I5009 goto if954_else2494 
    set $P5056, fb_tmp_169["nibbler"]
    set $P5058, $P5056
    goto if954_end2495
  if954_else2494:
    null $P5057
    set $P5058, $P5057
  if954_end2495:
    unless_null $P5058, vivi_9552497
    nqp_get_sc_object $P5059, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5058, $P5059
  vivi_9552497:
    set $P5097, $P5058
    unless $P5058 goto if953_end2493 
.annotate 'line', 838
    set $S5003, $P101
    iseq $I5010, $S5003, "after"
    unless $I5010 goto if956_else2498 
.annotate 'line', 840
    set fb_tmp_170, $P102
    repr_defined $I5011, fb_tmp_170
    unless $I5011 goto if957_else2500 
    set $P5060, fb_tmp_170[0]
    set $P5062, $P5060
    goto if957_end2501
  if957_else2500:
    null $P5061
    set $P5062, $P5061
  if957_end2501:
    unless_null $P5062, vivi_9582502
    nqp_get_sc_object $P5063, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5062, $P5063
  vivi_9582502:
    nqp_decontainerize $P5064, _lex_param_0
    nqp_decontainerize $P5065, _lex_param_0
    unless_null _lex_param_1, fallback2507
    nqp_get_sc_object $P5066, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5066
  fallback2507:
    set fb_tmp_172, _lex_param_1
    repr_defined $I5013, fb_tmp_172
    unless $I5013 goto if960_else2505 
    set $P5067, fb_tmp_172["nibbler"]
    set $P5069, $P5067
    goto if960_end2506
  if960_else2505:
    null $P5068
    set $P5069, $P5068
  if960_end2506:
    unless_null $P5069, vivi_9612508
    nqp_get_sc_object $P5070, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5069, $P5070
  vivi_9612508:
    set fb_tmp_171, $P5069
    repr_defined $I5012, fb_tmp_171
    unless $I5012 goto if959_else2503 
    set $P5071, fb_tmp_171[0]
    set $P5073, $P5071
    goto if959_end2504
  if959_else2503:
    null $P5072
    set $P5073, $P5072
  if959_end2504:
    unless_null $P5073, vivi_9622509
    nqp_get_sc_object $P5074, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5073, $P5074
  vivi_9622509:
    $P5075 = $P5073."ast"()
    $P5076 = $P5065."flip_ast"($P5075)
    $P5077 = $P5064."qbuildsub"($P5076, 1 :named("anon"), 1 :named("addself"))
    $P5078 = $P5062."push"($P5077)
    set $P5096, $P5078
    goto if956_end2499
  if956_else2498:
.annotate 'line', 841
    set fb_tmp_173, $P102
    repr_defined $I5014, fb_tmp_173
    unless $I5014 goto if963_else2510 
    set $P5079, fb_tmp_173[0]
    set $P5081, $P5079
    goto if963_end2511
  if963_else2510:
    null $P5080
    set $P5081, $P5080
  if963_end2511:
    unless_null $P5081, vivi_9642512
    nqp_get_sc_object $P5082, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5081, $P5082
  vivi_9642512:
    nqp_decontainerize $P5083, _lex_param_0
    unless_null _lex_param_1, fallback2517
    nqp_get_sc_object $P5084, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5084
  fallback2517:
    set fb_tmp_175, _lex_param_1
    repr_defined $I5016, fb_tmp_175
    unless $I5016 goto if966_else2515 
    set $P5085, fb_tmp_175["nibbler"]
    set $P5087, $P5085
    goto if966_end2516
  if966_else2515:
    null $P5086
    set $P5087, $P5086
  if966_end2516:
    unless_null $P5087, vivi_9672518
    nqp_get_sc_object $P5088, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5087, $P5088
  vivi_9672518:
    set fb_tmp_174, $P5087
    repr_defined $I5015, fb_tmp_174
    unless $I5015 goto if965_else2513 
    set $P5089, fb_tmp_174[0]
    set $P5091, $P5089
    goto if965_end2514
  if965_else2513:
    null $P5090
    set $P5091, $P5090
  if965_end2514:
    unless_null $P5091, vivi_9682519
    nqp_get_sc_object $P5092, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5091, $P5092
  vivi_9682519:
    $P5093 = $P5091."ast"()
    $P5094 = $P5083."qbuildsub"($P5093, 1 :named("anon"), 1 :named("addself"))
    $P5095 = $P5081."push"($P5094)
    set $P5096, $P5095
  if956_end2499:
    set $P5097, $P5096
  if953_end2493:
    set $P5098, $P5097
  if944_end2474:
    set $P5099, $P5098
  if927_end2446:
  if920_end2433:
.annotate 'line', 844
    $P5100 = _lex_param_1."!make"($P102)
    .return ($P5100) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_246_1381281822.05887") :anon :lex :outer("cuid_186_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 822
    .lex "$loc", $P101 
    .lex "$rxname", $P102 
    .local pmc fb_tmp_159 
    .local pmc fb_tmp_160 
    .local pmc pkg_viv_tmp_11 
    .local pmc fb_tmp_161 
    .local pmc fb_tmp_162 
    .local pmc pkg_viv_tmp_12 
    .local pmc fb_tmp_163 
    .local pmc fb_tmp_164 
    .local pmc pkg_viv_tmp_13 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P102, $P5002
    find_dynamic_lex $P5003, "%*RX"
    unless_null $P5003, fallback2449
    nqp_get_sc_object $P5005, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 0
    get_who $P5004, $P5005
    set pkg_viv_tmp_11, $P5004
    set fb_tmp_160, pkg_viv_tmp_11
    repr_defined $I5003, fb_tmp_160
    unless $I5003 goto if929_else2450 
    set $P5006, fb_tmp_160["%RX"]
    set $P5008, $P5006
    goto if929_end2451
  if929_else2450:
    null $P5007
    set $P5008, $P5007
  if929_end2451:
    unless_null $P5008, vivi_9302452
    new $P5009, 'Hash'
    set pkg_viv_tmp_11["%RX"], $P5009
    set $P5008, $P5009
  vivi_9302452:
    unless_null $P5008, vivi_9312453
    die "Contextual %*RX not found"
    box $P5010, "Contextual %*RX not found"
    set $P5008, $P5010
  vivi_9312453:
    set $P5003, $P5008
  fallback2449:
    set fb_tmp_159, $P5003
    repr_defined $I5002, fb_tmp_159
    unless $I5002 goto if928_else2447 
    set $P5011, fb_tmp_159["name"]
    set $P5013, $P5011
    goto if928_end2448
  if928_else2447:
    null $P5012
    set $P5013, $P5012
  if928_end2448:
    unless_null $P5013, vivi_9322454
    nqp_get_sc_object $P5014, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5013, $P5014
  vivi_9322454:
    set $S5001, $P5013
    index $I5001, $S5001, ":sym<", 0
    box $P5015, $I5001
    set $P101, $P5015
    set $N5001, $P101
    set $N5002, 0
    islt $I5004, $N5001, $N5002
    unless $I5004 goto if933_end2456 
    find_dynamic_lex $P5016, "%*RX"
    unless_null $P5016, fallback2459
    nqp_get_sc_object $P5018, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 0
    get_who $P5017, $P5018
    set pkg_viv_tmp_12, $P5017
    set fb_tmp_162, pkg_viv_tmp_12
    repr_defined $I5007, fb_tmp_162
    unless $I5007 goto if935_else2460 
    set $P5019, fb_tmp_162["%RX"]
    set $P5021, $P5019
    goto if935_end2461
  if935_else2460:
    null $P5020
    set $P5021, $P5020
  if935_end2461:
    unless_null $P5021, vivi_9362462
    new $P5022, 'Hash'
    set pkg_viv_tmp_12["%RX"], $P5022
    set $P5021, $P5022
  vivi_9362462:
    unless_null $P5021, vivi_9372463
    die "Contextual %*RX not found"
    box $P5023, "Contextual %*RX not found"
    set $P5021, $P5023
  vivi_9372463:
    set $P5016, $P5021
  fallback2459:
    set fb_tmp_161, $P5016
    repr_defined $I5006, fb_tmp_161
    unless $I5006 goto if934_else2457 
    set $P5024, fb_tmp_161["name"]
    set $P5026, $P5024
    goto if934_end2458
  if934_else2457:
    null $P5025
    set $P5026, $P5025
  if934_end2458:
    unless_null $P5026, vivi_9382464
    nqp_get_sc_object $P5027, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5026, $P5027
  vivi_9382464:
    set $S5002, $P5026
    index $I5005, $S5002, utf8:":sym\x{ab}", 0
    box $P5028, $I5005
    set $P101, $P5028
  if933_end2456:
    find_dynamic_lex $P5029, "%*RX"
    unless_null $P5029, fallback2467
    nqp_get_sc_object $P5031, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 0
    get_who $P5030, $P5031
    set pkg_viv_tmp_13, $P5030
    set fb_tmp_164, pkg_viv_tmp_13
    repr_defined $I5009, fb_tmp_164
    unless $I5009 goto if940_else2468 
    set $P5032, fb_tmp_164["%RX"]
    set $P5034, $P5032
    goto if940_end2469
  if940_else2468:
    null $P5033
    set $P5034, $P5033
  if940_end2469:
    unless_null $P5034, vivi_9412470
    new $P5035, 'Hash'
    set pkg_viv_tmp_13["%RX"], $P5035
    set $P5034, $P5035
  vivi_9412470:
    unless_null $P5034, vivi_9422471
    die "Contextual %*RX not found"
    box $P5036, "Contextual %*RX not found"
    set $P5034, $P5036
  vivi_9422471:
    set $P5029, $P5034
  fallback2467:
    set fb_tmp_163, $P5029
    repr_defined $I5008, fb_tmp_163
    unless $I5008 goto if939_else2465 
    set $P5037, fb_tmp_163["name"]
    set $P5039, $P5037
    goto if939_end2466
  if939_else2465:
    null $P5038
    set $P5039, $P5038
  if939_end2466:
    unless_null $P5039, vivi_9432472
    nqp_get_sc_object $P5040, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5039, $P5040
  vivi_9432472:
    set $S5004, $P5039
    set $N5004, $P101
    set $N5005, 5
    add $N5003, $N5004, $N5005
    set $I5010, $N5003
    substr $S5003, $S5004, $I5010
    box $P5041, $S5003
    set $P102, $P5041
    set $S5006, $P102
    set $S5007, $P102
    length $I5012, $S5007
    sub $I5011, $I5012, 1
    substr $S5005, $S5006, 0, $I5011
    box $P5042, $S5005
    set $P102, $P5042
.annotate 'line', 828
    nqp_get_sc_object $P5043, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    find_lex $P5044, "$/"
.annotate 'line', 829
    nqp_get_sc_object $P5045, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    find_lex $P5046, "$/"
    $P5047 = $P5045."new"($P102, "literal" :named("rxtype"), $P5046 :named("node"))
    $P5048 = $P5043."new"($P5047, "sym" :named("name"), "subcapture" :named("rxtype"), $P5044 :named("node"))
    store_lex "$qast", $P5048
    .return ($P5048) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_247_1381281822.05887") :anon :lex :outer("cuid_186_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 836
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_168 
    find_lex $P5001, "$qast"
    set fb_tmp_168, $P5001
    repr_defined $I5001, fb_tmp_168
    unless $I5001 goto if951_else2486 
    set $P5002, fb_tmp_168[0]
    set $P5004, $P5002
    goto if951_end2487
  if951_else2486:
    null $P5003
    set $P5004, $P5003
  if951_end2487:
    unless_null $P5004, vivi_9522488
    nqp_get_sc_object $P5005, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5004, $P5005
  vivi_9522488:
    $P5006 = $P5004."push"(_lex_param_0)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<[>" :subid("cuid_187_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 847
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_248_1381281822.05887' 
    capture_lex $P5030 
    .lex "$clist", $P101 
    .lex "$qast", $P102 
    .lex "$i", $P103 
    .lex "$n", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_176 
    .local pmc fb_tmp_177 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P103, $P5003
    nqp_get_sc_object $P5004, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P104, $P5004
    unless_null _lex_param_1, fallback2522
    nqp_get_sc_object $P5005, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5005
  fallback2522:
    set fb_tmp_176, _lex_param_1
    repr_defined $I5001, fb_tmp_176
    unless $I5001 goto if969_else2520 
    set $P5006, fb_tmp_176["cclass_elem"]
    set $P5008, $P5006
    goto if969_end2521
  if969_else2520:
    null $P5007
    set $P5008, $P5007
  if969_end2521:
    unless_null $P5008, vivi_9702523
    nqp_get_sc_object $P5009, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5008, $P5009
  vivi_9702523:
    set $P101, $P5008
.annotate 'line', 849
    set fb_tmp_177, $P101
    repr_defined $I5002, fb_tmp_177
    unless $I5002 goto if971_else2524 
    set $P5010, fb_tmp_177[0]
    set $P5012, $P5010
    goto if971_end2525
  if971_else2524:
    null $P5011
    set $P5012, $P5011
  if971_end2525:
    unless_null $P5012, vivi_9722526
    nqp_get_sc_object $P5013, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5012, $P5013
  vivi_9722526:
    $P5014 = $P5012."ast"()
    set $P102, $P5014
.annotate 'line', 850
    $P5015 = $P102."negate"()
    set $P5017, $P5015
    unless $P5015 goto if974_end2530 
    $P5016 = $P102."rxtype"()
    set $S5001, $P5016
    iseq $I5003, $S5001, "subrule"
    box $P5018, $I5003
    set $P5017, $P5018
  if974_end2530:
    unless $P5017 goto if973_end2528 
.annotate 'line', 851
    $P102."subtype"("zerowidth")
.annotate 'line', 852
    nqp_get_sc_object $P5019, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
.annotate 'line', 854
    nqp_get_sc_object $P5020, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5021 = $P5020."new"("cclass" :named("rxtype"), "." :named("name"))
    $P5022 = $P5019."new"($P102, $P5021, "concat" :named("rxtype"), _lex_param_1 :named("node"))
    set $P102, $P5022
  if973_end2528:
    box $P5023, 1
    set $P103, $P5023
    set $N5001, $P101
    box $P5024, $N5001
    set $P104, $P5024
  while975_test2531:
    set $N5002, $P103
    set $N5003, $P104
    islt $I5004, $N5002, $N5003
    box $P5028, $I5004
    set $P5027, $P5028
    unless $I5004 goto while975_done2535 
  while975_redo2533:
    .const 'Sub' $P5025 = 'cuid_248_1381281822.05887' 
    capture_lex $P5025
    $P5026 = $P5025()
    set $P5027, $P5026
    goto while975_test2531 
  while975_done2535:
.annotate 'line', 872
    $P5029 = _lex_param_1."!make"($P102)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_248_1381281822.05887") :anon :lex :outer("cuid_187_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 859
    .lex "$ast", $P101 
    .local pmc fb_tmp_178 
    .local pmc tmp_2 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 860
    find_lex $P5002, "$clist"
    set fb_tmp_178, $P5002
    repr_defined $I5001, fb_tmp_178
    unless $I5001 goto if976_else2536 
    find_lex $P5004, "$i"
    set $I5002, $P5004
    set $P5003, fb_tmp_178[$I5002]
    set $P5006, $P5003
    goto if976_end2537
  if976_else2536:
    null $P5005
    set $P5006, $P5005
  if976_end2537:
    unless_null $P5006, vivi_9772538
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_9772538:
    $P5008 = $P5006."ast"()
    set $P101, $P5008
.annotate 'line', 861
    $P5009 = $P101."negate"()
    set $P5012, $P5009
    if $P5009 goto unless979_end2542 
    $P5010 = $P101."rxtype"()
    set $S5001, $P5010
    iseq $I5003, $S5001, "cclass"
    set $I5005, $I5003
    unless $I5003 goto if980_end2544 
    $P5011 = $P101."node"()
    set $S5002, $P5011
    isle $I5004, $S5002, "Z"
    set $I5005, $I5004
  if980_end2544:
    box $P5013, $I5005
    set $P5012, $P5013
  unless979_end2542:
    unless $P5012 goto if978_else2539 
.annotate 'line', 862
    $P101."subtype"("zerowidth")
.annotate 'line', 863
    nqp_get_sc_object $P5014, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    find_lex $P5015, "$/"
.annotate 'line', 864
    nqp_get_sc_object $P5016, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5017 = $P5016."new"($P101, "conj" :named("rxtype"), "zerowidth" :named("subtype"))
    find_lex $P5018, "$qast"
    $P5019 = $P5014."new"($P5017, $P5018, "concat" :named("rxtype"), $P5015 :named("node"), "zerowidth" :named("subtype"), 1 :named("negate"))
    store_lex "$qast", $P5019
    goto if978_end2540
  if978_else2539:
.annotate 'line', 867
.annotate 'line', 868
    nqp_get_sc_object $P5020, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    find_lex $P5021, "$qast"
    find_lex $P5022, "$/"
    $P5023 = $P5020."new"($P5021, $P101, "altseq" :named("rxtype"), $P5022 :named("node"))
    store_lex "$qast", $P5023
  if978_end2540:
    find_lex $P5024, "$i"
    set tmp_2, $P5024
    set $N5002, tmp_2
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5025, $N5001
    store_lex "$i", $P5025
    .return (tmp_2) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_188_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 875
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_179 
    .local pmc fb_tmp_180 
    .local pmc fb_tmp_181 
.annotate 'line', 876
    unless_null _lex_param_1, fallback2549
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5001
  fallback2549:
    set fb_tmp_179, _lex_param_1
    repr_defined $I5001, fb_tmp_179
    unless $I5001 goto if982_else2547 
    set $P5002, fb_tmp_179["quote_EXPR"]
    set $P5004, $P5002
    goto if982_end2548
  if982_else2547:
    null $P5003
    set $P5004, $P5003
  if982_end2548:
    unless_null $P5004, vivi_9832550
    nqp_get_sc_object $P5005, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5004, $P5005
  vivi_9832550:
    unless $P5004 goto if981_else2545 
.annotate 'line', 877
    unless_null _lex_param_1, fallback2553
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5006
  fallback2553:
    set fb_tmp_180, _lex_param_1
    repr_defined $I5002, fb_tmp_180
    unless $I5002 goto if984_else2551 
    set $P5007, fb_tmp_180["quote_EXPR"]
    set $P5009, $P5007
    goto if984_end2552
  if984_else2551:
    null $P5008
    set $P5009, $P5008
  if984_end2552:
    unless_null $P5009, vivi_9852554
    nqp_get_sc_object $P5010, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5009, $P5010
  vivi_9852554:
    $P5011 = $P5009."ast"()
    set $P5019, $P5011
    goto if981_end2546
  if981_else2545:
.annotate 'line', 878
    nqp_get_sc_object $P5012, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 49
    unless_null _lex_param_1, fallback2557
    nqp_get_sc_object $P5013, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5013
  fallback2557:
    set fb_tmp_181, _lex_param_1
    repr_defined $I5003, fb_tmp_181
    unless $I5003 goto if986_else2555 
    set $P5014, fb_tmp_181["val"]
    set $P5016, $P5014
    goto if986_end2556
  if986_else2555:
    null $P5015
    set $P5016, $P5015
  if986_end2556:
    unless_null $P5016, vivi_9872558
    nqp_get_sc_object $P5017, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5016, $P5017
  vivi_9872558:
    set $N5001, $P5016
    $P5018 = $P5012."new"($N5001 :named("value"))
    set $P5019, $P5018
  if981_end2546:
    $P5020 = _lex_param_1."!make"($P5019)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_189_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 881
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5015 = 'cuid_249_1381281822.05887' 
    capture_lex $P5015 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_182 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 882
    nqp_get_sc_object $P5002, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 86
    $P5003 = $P5002."new"("list" :named("op"))
    set $P101, $P5003
    unless_null _lex_param_1, fallback2561
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5007
  fallback2561:
    set fb_tmp_182, _lex_param_1
    repr_defined $I5001, fb_tmp_182
    unless $I5001 goto if988_else2559 
    set $P5008, fb_tmp_182["arg"]
    set $P5010, $P5008
    goto if988_end2560
  if988_else2559:
    null $P5009
    set $P5010, $P5009
  if988_end2560:
    unless_null $P5010, vivi_9892562
    nqp_get_sc_object $P5011, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5010, $P5011
  vivi_9892562:
    set $P5004, $P5010
    iter $P5006, $P5010
  for_next2563:
    unless $P5006, for_done2565
    shift $P5013, $P5006
  for_redo2564:
    .const 'Sub' $P5012 = 'cuid_249_1381281822.05887' 
    capture_lex $P5012
    $P5004 = $P5012($P5013)
    goto for_next2563
  for_done2565:
.annotate 'line', 884
    $P5014 = _lex_param_1."!make"($P101)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_249_1381281822.05887") :anon :lex :outer("cuid_189_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 883
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$past"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_elem" :subid("cuid_190_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 887
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5022 = 'cuid_250_1381281822.05887' 
    capture_lex $P5022 
    .const 'Sub' $P5022 = 'cuid_251_1381281822.05887' 
    capture_lex $P5022 
    .const 'Sub' $P5022 = 'cuid_257_1381281822.05887' 
    capture_lex $P5022 
    .lex "$str", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_183 
    .local pmc fb_tmp_186 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P102, $P5002
    box $P5003, ""
    set $P101, $P5003
    unless_null _lex_param_1, fallback2570
    nqp_get_sc_object $P5004, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5004
  fallback2570:
    set fb_tmp_183, _lex_param_1
    repr_defined $I5001, fb_tmp_183
    unless $I5001 goto if991_else2568 
    set $P5005, fb_tmp_183["name"]
    set $P5007, $P5005
    goto if991_end2569
  if991_else2568:
    null $P5006
    set $P5007, $P5006
  if991_end2569:
    unless_null $P5007, vivi_9922571
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5007, $P5008
  vivi_9922571:
    unless $P5007 goto if990_else2566 
    .const 'Sub' $P5009 = 'cuid_250_1381281822.05887' 
    capture_lex $P5009
    $P5010 = $P5009()
    goto if990_end2567
  if990_else2566:
    unless_null _lex_param_1, fallback2584
    nqp_get_sc_object $P5011, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5011
  fallback2584:
    set fb_tmp_186, _lex_param_1
    repr_defined $I5002, fb_tmp_186
    unless $I5002 goto if998_else2582 
    set $P5012, fb_tmp_186["uniprop"]
    set $P5014, $P5012
    goto if998_end2583
  if998_else2582:
    null $P5013
    set $P5014, $P5013
  if998_end2583:
    unless_null $P5014, vivi_9992585
    nqp_get_sc_object $P5015, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5014, $P5015
  vivi_9992585:
    unless $P5014 goto if997_else2580 
    .const 'Sub' $P5016 = 'cuid_251_1381281822.05887' 
    capture_lex $P5016
    $P5017 = $P5016()
    set $P5020, $P5017
    goto if997_end2581
  if997_else2580:
    .const 'Sub' $P5018 = 'cuid_257_1381281822.05887' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5020, $P5019
  if997_end2581:
  if990_end2567:
.annotate 'line', 967
    $P5021 = _lex_param_1."!make"($P102)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_250_1381281822.05887") :anon :lex :outer("cuid_190_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 890
    .lex "$name", $P101 
    .local pmc fb_tmp_184 
    .local pmc fb_tmp_185 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
    find_lex $P5002, "$/"
    unless_null $P5002, fallback2574
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5002, $P5003
  fallback2574:
    set fb_tmp_184, $P5002
    repr_defined $I5001, fb_tmp_184
    unless $I5001 goto if993_else2572 
    set $P5004, fb_tmp_184["name"]
    set $P5006, $P5004
    goto if993_end2573
  if993_else2572:
    null $P5005
    set $P5006, $P5005
  if993_end2573:
    unless_null $P5006, vivi_9942575
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_9942575:
    set $S5001, $P5006
    box $P5008, $S5001
    set $P101, $P5008
.annotate 'line', 892
    nqp_get_sc_object $P5009, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    find_lex $P5010, "$/"
    unless_null $P5010, fallback2578
    nqp_get_sc_object $P5011, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5010, $P5011
  fallback2578:
    set fb_tmp_185, $P5010
    repr_defined $I5003, fb_tmp_185
    unless $I5003 goto if995_else2576 
    set $P5012, fb_tmp_185["sign"]
    set $P5014, $P5012
    goto if995_end2577
  if995_else2576:
    null $P5013
    set $P5014, $P5013
  if995_end2577:
    unless_null $P5014, vivi_9962579
    nqp_get_sc_object $P5015, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5014, $P5015
  vivi_9962579:
    set $S5002, $P5014
    iseq $I5002, $S5002, "-"
    find_lex $P5016, "$/"
.annotate 'line', 894
    nqp_get_sc_object $P5017, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 12
    nqp_get_sc_object $P5018, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 55
    $P5019 = $P5018."new"($P101 :named("value"))
    $P5020 = $P5017."new"($P5019)
    $P5021 = $P5009."new"($P5020, "subrule" :named("rxtype"), "method" :named("subtype"), $I5002 :named("negate"), $P5016 :named("node"))
    store_lex "$qast", $P5021
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_251_1381281822.05887") :anon :lex :outer("cuid_190_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 896
    .lex "$uniprop", $P101 
    .local pmc fb_tmp_187 
    .local pmc fb_tmp_188 
    .local pmc fb_tmp_189 
    .local pmc fb_tmp_190 
    .local pmc fb_tmp_191 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
    find_lex $P5002, "$/"
    unless_null $P5002, fallback2588
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5002, $P5003
  fallback2588:
    set fb_tmp_187, $P5002
    repr_defined $I5001, fb_tmp_187
    unless $I5001 goto if1000_else2586 
    set $P5004, fb_tmp_187["uniprop"]
    set $P5006, $P5004
    goto if1000_end2587
  if1000_else2586:
    null $P5005
    set $P5006, $P5005
  if1000_end2587:
    unless_null $P5006, vivi_10012589
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_10012589:
    set $S5001, $P5006
    box $P5008, $S5001
    set $P101, $P5008
.annotate 'line', 898
    nqp_get_sc_object $P5009, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    find_lex $P5010, "$/"
    unless_null $P5010, fallback2596
    nqp_get_sc_object $P5011, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5010, $P5011
  fallback2596:
    set fb_tmp_188, $P5010
    repr_defined $I5003, fb_tmp_188
    unless $I5003 goto if1004_else2594 
    set $P5012, fb_tmp_188["sign"]
    set $P5014, $P5012
    goto if1004_end2595
  if1004_else2594:
    null $P5013
    set $P5014, $P5013
  if1004_end2595:
    unless_null $P5014, vivi_10052597
    nqp_get_sc_object $P5015, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5014, $P5015
  vivi_10052597:
    set $S5002, $P5014
    iseq $I5002, $S5002, "-"
    set $I5006, $I5002
    unless $I5002 goto if1003_end2593 
    find_lex $P5016, "$/"
    unless_null $P5016, fallback2600
    nqp_get_sc_object $P5017, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5016, $P5017
  fallback2600:
    set fb_tmp_189, $P5016
    repr_defined $I5005, fb_tmp_189
    unless $I5005 goto if1006_else2598 
    set $P5018, fb_tmp_189["invert"]
    set $P5020, $P5018
    goto if1006_end2599
  if1006_else2598:
    null $P5019
    set $P5020, $P5019
  if1006_end2599:
    unless_null $P5020, vivi_10072601
    nqp_get_sc_object $P5021, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5020, $P5021
  vivi_10072601:
    set $S5003, $P5020
    isne $I5004, $S5003, "!"
    set $I5006, $I5004
  if1003_end2593:
    set $I5012, $I5006
    if $I5006 goto unless1002_end2591 
    find_lex $P5022, "$/"
    unless_null $P5022, fallback2606
    nqp_get_sc_object $P5023, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5022, $P5023
  fallback2606:
    set fb_tmp_190, $P5022
    repr_defined $I5008, fb_tmp_190
    unless $I5008 goto if1009_else2604 
    set $P5024, fb_tmp_190["sign"]
    set $P5026, $P5024
    goto if1009_end2605
  if1009_else2604:
    null $P5025
    set $P5026, $P5025
  if1009_end2605:
    unless_null $P5026, vivi_10102607
    nqp_get_sc_object $P5027, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5026, $P5027
  vivi_10102607:
    set $S5004, $P5026
    isne $I5007, $S5004, "-"
    set $I5011, $I5007
    unless $I5007 goto if1008_end2603 
    find_lex $P5028, "$/"
    unless_null $P5028, fallback2610
    nqp_get_sc_object $P5029, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5028, $P5029
  fallback2610:
    set fb_tmp_191, $P5028
    repr_defined $I5010, fb_tmp_191
    unless $I5010 goto if1011_else2608 
    set $P5030, fb_tmp_191["invert"]
    set $P5032, $P5030
    goto if1011_end2609
  if1011_else2608:
    null $P5031
    set $P5032, $P5031
  if1011_end2609:
    unless_null $P5032, vivi_10122611
    nqp_get_sc_object $P5033, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5032, $P5033
  vivi_10122611:
    set $S5005, $P5032
    iseq $I5009, $S5005, "!"
    set $I5011, $I5009
  if1008_end2603:
    set $I5012, $I5011
  unless1002_end2591:
    find_lex $P5034, "$/"
    $P5035 = $P5009."new"($P101, "uniprop" :named("rxtype"), $I5012 :named("negate"), $P5034 :named("node"))
    store_lex "$qast", $P5035
    .return ($P5035) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_257_1381281822.05887") :anon :lex :outer("cuid_190_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 902
    .const 'Sub' $P5046 = 'cuid_254_1381281822.05887' 
    capture_lex $P5046 
    .lex "@alts", $P101 
    .local pmc fb_tmp_192 
    .local pmc fb_tmp_224 
    .local pmc fb_tmp_225 
    .local pmc fb_tmp_226 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_lex $P5005, "$/"
    unless_null $P5005, fallback2614
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5005, $P5006
  fallback2614:
    set fb_tmp_192, $P5005
    repr_defined $I5001, fb_tmp_192
    unless $I5001 goto if1013_else2612 
    set $P5007, fb_tmp_192["charspec"]
    set $P5009, $P5007
    goto if1013_end2613
  if1013_else2612:
    null $P5008
    set $P5009, $P5008
  if1013_end2613:
    unless_null $P5009, vivi_10142615
    nqp_get_sc_object $P5010, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5009, $P5010
  vivi_10142615:
    set $P5002, $P5009
    iter $P5004, $P5009
  for_next2762:
    unless $P5004, for_done2764
    shift $P5012, $P5004
  for_redo2763:
    .const 'Sub' $P5011 = 'cuid_254_1381281822.05887' 
    capture_lex $P5011
    $P5002 = $P5011($P5012)
    goto for_next2762
  for_done2764:
    find_lex $P5013, "$str"
    set $S5001, $P5013
    length $I5002, $S5001
    unless $I5002 goto if1100_end2766 
.annotate 'line', 958
    nqp_get_sc_object $P5014, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    find_lex $P5015, "$str"
    find_lex $P5016, "$/"
    find_lex $P5017, "$/"
    unless_null $P5017, fallback2769
    nqp_get_sc_object $P5018, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5017, $P5018
  fallback2769:
    set fb_tmp_224, $P5017
    repr_defined $I5004, fb_tmp_224
    unless $I5004 goto if1101_else2767 
    set $P5019, fb_tmp_224["sign"]
    set $P5021, $P5019
    goto if1101_end2768
  if1101_else2767:
    null $P5020
    set $P5021, $P5020
  if1101_end2768:
    unless_null $P5021, vivi_11022770
    nqp_get_sc_object $P5022, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5021, $P5022
  vivi_11022770:
    set $S5002, $P5021
    iseq $I5003, $S5002, "-"
    $P5023 = $P5014."new"($P5015, "enumcharlist" :named("rxtype"), $P5016 :named("node"), $I5003 :named("negate"))
    $P5024 = $P101."push"($P5023)
  if1100_end2766:
    set $N5001, $P101
    set $N5002, 1
    iseq $I5005, $N5001, $N5002
    unless $I5005 goto if1103_else2771 
    set fb_tmp_225, $P101
    repr_defined $I5006, fb_tmp_225
    unless $I5006 goto if1104_else2773 
    set $P5025, fb_tmp_225[0]
    set $P5027, $P5025
    goto if1104_end2774
  if1104_else2773:
    null $P5026
    set $P5027, $P5026
  if1104_end2774:
    unless_null $P5027, vivi_11052775
    nqp_get_sc_object $P5028, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5027, $P5028
  vivi_11052775:
    set $P5045, $P5027
    goto if1103_end2772
  if1103_else2771:
    find_lex $P5029, "$/"
    unless_null $P5029, fallback2780
    nqp_get_sc_object $P5030, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5029, $P5030
  fallback2780:
    set fb_tmp_226, $P5029
    repr_defined $I5008, fb_tmp_226
    unless $I5008 goto if1107_else2778 
    set $P5031, fb_tmp_226["sign"]
    set $P5033, $P5031
    goto if1107_end2779
  if1107_else2778:
    null $P5032
    set $P5033, $P5032
  if1107_end2779:
    unless_null $P5033, vivi_11082781
    nqp_get_sc_object $P5034, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5033, $P5034
  vivi_11082781:
    set $S5003, $P5033
    iseq $I5007, $S5003, "-"
    unless $I5007 goto if1106_else2776 
.annotate 'line', 962
    nqp_get_sc_object $P5035, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    find_lex $P5036, "$/"
.annotate 'line', 963
    nqp_get_sc_object $P5037, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5038 = $P5037."new"($P101 :flat, "conj" :named("rxtype"), "zerowidth" :named("subtype"))
.annotate 'line', 964
    nqp_get_sc_object $P5039, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5040 = $P5039."new"("cclass" :named("rxtype"), "." :named("name"))
    $P5041 = $P5035."new"($P5038, $P5040, "concat" :named("rxtype"), $P5036 :named("node"), 1 :named("negate"))
    set $P5044, $P5041
    goto if1106_end2777
  if1106_else2776:
.annotate 'line', 965
    nqp_get_sc_object $P5042, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5043 = $P5042."new"($P101 :flat, "altseq" :named("rxtype"))
    set $P5044, $P5043
  if1106_end2777:
    set $P5045, $P5044
  if1103_end2772:
    store_lex "$qast", $P5045
    .return ($P5045) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_254_1381281822.05887") :anon :lex :outer("cuid_257_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 904
    .param pmc _lex_param_0 
    .const 'Sub' $P5021 = 'cuid_253_1381281822.05887' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_255_1381281822.05887' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_256_1381281822.05887' 
    capture_lex $P5021 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_193 
    .local pmc fb_tmp_215 
    .local pmc fb_tmp_216 
    set fb_tmp_193, _lex_param_0
    repr_defined $I5001, fb_tmp_193
    unless $I5001 goto if1016_else2618 
    set $P5001, fb_tmp_193[1]
    set $P5003, $P5001
    goto if1016_end2619
  if1016_else2618:
    null $P5002
    set $P5003, $P5002
  if1016_end2619:
    unless_null $P5003, vivi_10172620
    nqp_get_sc_object $P5004, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5003, $P5004
  vivi_10172620:
    unless $P5003 goto if1015_else2616 
    .const 'Sub' $P5005 = 'cuid_253_1381281822.05887' 
    capture_lex $P5005
    $P5006 = $P5005()
    set $P5020, $P5006
    goto if1015_end2617
  if1015_else2616:
    set fb_tmp_216, _lex_param_0
    repr_defined $I5003, fb_tmp_216
    unless $I5003 goto if1077_else2724 
    set $P5007, fb_tmp_216[0]
    set $P5009, $P5007
    goto if1077_end2725
  if1077_else2724:
    null $P5008
    set $P5009, $P5008
  if1077_end2725:
    unless_null $P5009, vivi_10782726
    nqp_get_sc_object $P5010, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5009, $P5010
  vivi_10782726:
    set fb_tmp_215, $P5009
    repr_defined $I5002, fb_tmp_215
    unless $I5002 goto if1076_else2722 
    set $P5011, fb_tmp_215["cclass_backslash"]
    set $P5013, $P5011
    goto if1076_end2723
  if1076_else2722:
    null $P5012
    set $P5013, $P5012
  if1076_end2723:
    unless_null $P5013, vivi_10792727
    nqp_get_sc_object $P5014, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5013, $P5014
  vivi_10792727:
    unless $P5013 goto if1075_else2720 
    .const 'Sub' $P5015 = 'cuid_255_1381281822.05887' 
    capture_lex $P5015
    $P5016 = $P5015()
    set $P5019, $P5016
    goto if1075_end2721
  if1075_else2720:
    .const 'Sub' $P5017 = 'cuid_256_1381281822.05887' 
    capture_lex $P5017
    $P5018 = $P5017()
    set $P5019, $P5018
  if1075_end2721:
    set $P5020, $P5019
  if1015_end2617:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_253_1381281822.05887") :anon :lex :outer("cuid_254_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 905
    .const 'Sub' $P5142 = 'cuid_252_1381281822.05887' 
    capture_lex $P5142 
    .lex "$node", $P101 
    .lex "$lhs", $P102 
    .lex "$rhs", $P103 
    .lex "$ord0", $P104 
    .lex "$ord1", $P105 
    .local pmc fb_tmp_194 
    .local pmc fb_tmp_195 
    .local pmc fb_tmp_196 
    .local pmc fb_tmp_197 
    .local pmc fb_tmp_198 
    .local pmc fb_tmp_199 
    .local pmc fb_tmp_200 
    .local pmc fb_tmp_201 
    .local pmc fb_tmp_202 
    .local pmc fb_tmp_203 
    .local pmc fb_tmp_204 
    .local pmc fb_tmp_205 
    .local pmc fb_tmp_206 
    .local pmc fb_tmp_207 
    .local pmc fb_tmp_208 
    .local pmc fb_tmp_209 
    .local pmc fb_tmp_210 
    .local pmc fb_tmp_211 
    .local pmc fb_tmp_212 
    .local pmc fb_tmp_213 
    .local pmc fb_tmp_214 
    .local pmc pkg_viv_tmp_14 
    .local pmc tmp_4 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P103, $P5003
    nqp_get_sc_object $P5004, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P104, $P5004
    nqp_get_sc_object $P5005, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P105, $P5005
    find_lex $P5006, "$_"
    set fb_tmp_195, $P5006
    repr_defined $I5002, fb_tmp_195
    unless $I5002 goto if1020_else2625 
    set $P5007, fb_tmp_195[0]
    set $P5009, $P5007
    goto if1020_end2626
  if1020_else2625:
    null $P5008
    set $P5009, $P5008
  if1020_end2626:
    unless_null $P5009, vivi_10212627
    nqp_get_sc_object $P5010, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5009, $P5010
  vivi_10212627:
    set fb_tmp_194, $P5009
    repr_defined $I5001, fb_tmp_194
    unless $I5001 goto if1019_else2623 
    set $P5011, fb_tmp_194["cclass_backslash"]
    set $P5013, $P5011
    goto if1019_end2624
  if1019_else2623:
    null $P5012
    set $P5013, $P5012
  if1019_end2624:
    unless_null $P5013, vivi_10222628
    nqp_get_sc_object $P5014, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5013, $P5014
  vivi_10222628:
    unless $P5013 goto if1018_else2621 
.annotate 'line', 909
.annotate 'line', 910
    find_lex $P5015, "$_"
    set fb_tmp_197, $P5015
    repr_defined $I5004, fb_tmp_197
    unless $I5004 goto if1024_else2631 
    set $P5016, fb_tmp_197[0]
    set $P5018, $P5016
    goto if1024_end2632
  if1024_else2631:
    null $P5017
    set $P5018, $P5017
  if1024_end2632:
    unless_null $P5018, vivi_10252633
    nqp_get_sc_object $P5019, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5018, $P5019
  vivi_10252633:
    set fb_tmp_196, $P5018
    repr_defined $I5003, fb_tmp_196
    unless $I5003 goto if1023_else2629 
    set $P5020, fb_tmp_196["cclass_backslash"]
    set $P5022, $P5020
    goto if1023_end2630
  if1023_else2629:
    null $P5021
    set $P5022, $P5021
  if1023_end2630:
    unless_null $P5022, vivi_10262634
    nqp_get_sc_object $P5023, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5022, $P5023
  vivi_10262634:
    $P5024 = $P5022."ast"()
    set $P101, $P5024
.annotate 'line', 912
    $P5025 = $P101."rxtype"()
    set $S5001, $P5025
    isne $I5005, $S5001, "literal"
    set $I5007, $I5005
    unless $I5005 goto if1030_end2642 
    $P5026 = $P101."rxtype"()
    set $S5002, $P5026
    isne $I5006, $S5002, "enumcharlist"
    set $I5007, $I5006
  if1030_end2642:
    box $P5029, $I5007
    set $P5028, $P5029
    if $I5007 goto unless1029_end2640 
.annotate 'line', 913
    $P5027 = $P101."negate"()
    set $P5028, $P5027
  unless1029_end2640:
    set $P5034, $P5028
    if $P5028 goto unless1028_end2638 
    set fb_tmp_198, $P101
    repr_defined $I5010, fb_tmp_198
    unless $I5010 goto if1031_else2643 
    set $P5030, fb_tmp_198[0]
    set $P5032, $P5030
    goto if1031_end2644
  if1031_else2643:
    null $P5031
    set $P5032, $P5031
  if1031_end2644:
    unless_null $P5032, vivi_10322645
    nqp_get_sc_object $P5033, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5032, $P5033
  vivi_10322645:
    set $S5003, $P5032
    length $I5009, $S5003
    set $N5001, $I5009
    set $N5002, 1
    isne $I5008, $N5001, $N5002
    box $P5035, $I5008
    set $P5034, $P5035
  unless1028_end2638:
    unless $P5034 goto if1027_end2636 
.annotate 'line', 911
    find_lex $P5036, "$/"
    $P5037 = $P5036."CURSOR"()
    find_lex $P5038, "$_"
    set $S5005, $P5038
    concat $S5004, "Illegal range endpoint in regex: ", $S5005
    $P5039 = $P5037."panic"($S5004)
  if1027_end2636:
    set fb_tmp_199, $P101
    repr_defined $I5011, fb_tmp_199
    unless $I5011 goto if1033_else2646 
    set $P5040, fb_tmp_199[0]
    set $P5042, $P5040
    goto if1033_end2647
  if1033_else2646:
    null $P5041
    set $P5042, $P5041
  if1033_end2647:
    unless_null $P5042, vivi_10342648
    nqp_get_sc_object $P5043, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5042, $P5043
  vivi_10342648:
    set $P102, $P5042
    goto if1018_end2622
  if1018_else2621:
.annotate 'line', 916
    find_lex $P5044, "$_"
    set fb_tmp_201, $P5044
    repr_defined $I5013, fb_tmp_201
    unless $I5013 goto if1036_else2651 
    set $P5045, fb_tmp_201[0]
    set $P5047, $P5045
    goto if1036_end2652
  if1036_else2651:
    null $P5046
    set $P5047, $P5046
  if1036_end2652:
    unless_null $P5047, vivi_10372653
    nqp_get_sc_object $P5048, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5047, $P5048
  vivi_10372653:
    set fb_tmp_200, $P5047
    repr_defined $I5012, fb_tmp_200
    unless $I5012 goto if1035_else2649 
    set $P5049, fb_tmp_200[0]
    set $P5051, $P5049
    goto if1035_end2650
  if1035_else2649:
    null $P5050
    set $P5051, $P5050
  if1035_end2650:
    unless_null $P5051, vivi_10382654
    nqp_get_sc_object $P5052, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5051, $P5052
  vivi_10382654:
    set $S5006, $P5051
    box $P5053, $S5006
    set $P102, $P5053
  if1018_end2622:
    find_lex $P5054, "$_"
    set fb_tmp_204, $P5054
    repr_defined $I5016, fb_tmp_204
    unless $I5016 goto if1042_else2661 
    set $P5055, fb_tmp_204[1]
    set $P5057, $P5055
    goto if1042_end2662
  if1042_else2661:
    null $P5056
    set $P5057, $P5056
  if1042_end2662:
    unless_null $P5057, vivi_10432663
    nqp_get_sc_object $P5058, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5057, $P5058
  vivi_10432663:
    set fb_tmp_203, $P5057
    repr_defined $I5015, fb_tmp_203
    unless $I5015 goto if1041_else2659 
    set $P5059, fb_tmp_203[0]
    set $P5061, $P5059
    goto if1041_end2660
  if1041_else2659:
    null $P5060
    set $P5061, $P5060
  if1041_end2660:
    unless_null $P5061, vivi_10442664
    nqp_get_sc_object $P5062, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5061, $P5062
  vivi_10442664:
    set fb_tmp_202, $P5061
    repr_defined $I5014, fb_tmp_202
    unless $I5014 goto if1040_else2657 
    set $P5063, fb_tmp_202["cclass_backslash"]
    set $P5065, $P5063
    goto if1040_end2658
  if1040_else2657:
    null $P5064
    set $P5065, $P5064
  if1040_end2658:
    unless_null $P5065, vivi_10452665
    nqp_get_sc_object $P5066, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5065, $P5066
  vivi_10452665:
    unless $P5065 goto if1039_else2655 
.annotate 'line', 919
.annotate 'line', 920
    find_lex $P5067, "$_"
    set fb_tmp_207, $P5067
    repr_defined $I5019, fb_tmp_207
    unless $I5019 goto if1048_else2670 
    set $P5068, fb_tmp_207[1]
    set $P5070, $P5068
    goto if1048_end2671
  if1048_else2670:
    null $P5069
    set $P5070, $P5069
  if1048_end2671:
    unless_null $P5070, vivi_10492672
    nqp_get_sc_object $P5071, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5070, $P5071
  vivi_10492672:
    set fb_tmp_206, $P5070
    repr_defined $I5018, fb_tmp_206
    unless $I5018 goto if1047_else2668 
    set $P5072, fb_tmp_206[0]
    set $P5074, $P5072
    goto if1047_end2669
  if1047_else2668:
    null $P5073
    set $P5074, $P5073
  if1047_end2669:
    unless_null $P5074, vivi_10502673
    nqp_get_sc_object $P5075, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5074, $P5075
  vivi_10502673:
    set fb_tmp_205, $P5074
    repr_defined $I5017, fb_tmp_205
    unless $I5017 goto if1046_else2666 
    set $P5076, fb_tmp_205["cclass_backslash"]
    set $P5078, $P5076
    goto if1046_end2667
  if1046_else2666:
    null $P5077
    set $P5078, $P5077
  if1046_end2667:
    unless_null $P5078, vivi_10512674
    nqp_get_sc_object $P5079, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5078, $P5079
  vivi_10512674:
    $P5080 = $P5078."ast"()
    set $P101, $P5080
.annotate 'line', 922
    $P5081 = $P101."rxtype"()
    set $S5007, $P5081
    isne $I5020, $S5007, "literal"
    set $I5022, $I5020
    unless $I5020 goto if1055_end2682 
    $P5082 = $P101."rxtype"()
    set $S5008, $P5082
    isne $I5021, $S5008, "enumcharlist"
    set $I5022, $I5021
  if1055_end2682:
    box $P5085, $I5022
    set $P5084, $P5085
    if $I5022 goto unless1054_end2680 
.annotate 'line', 923
    $P5083 = $P101."negate"()
    set $P5084, $P5083
  unless1054_end2680:
    set $P5090, $P5084
    if $P5084 goto unless1053_end2678 
    set fb_tmp_208, $P101
    repr_defined $I5025, fb_tmp_208
    unless $I5025 goto if1056_else2683 
    set $P5086, fb_tmp_208[0]
    set $P5088, $P5086
    goto if1056_end2684
  if1056_else2683:
    null $P5087
    set $P5088, $P5087
  if1056_end2684:
    unless_null $P5088, vivi_10572685
    nqp_get_sc_object $P5089, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5088, $P5089
  vivi_10572685:
    set $S5009, $P5088
    length $I5024, $S5009
    set $N5003, $I5024
    set $N5004, 1
    isne $I5023, $N5003, $N5004
    box $P5091, $I5023
    set $P5090, $P5091
  unless1053_end2678:
    unless $P5090 goto if1052_end2676 
.annotate 'line', 921
    find_lex $P5092, "$/"
    $P5093 = $P5092."CURSOR"()
    find_lex $P5094, "$_"
    set $S5011, $P5094
    concat $S5010, "Illegal range endpoint in regex: ", $S5011
    $P5095 = $P5093."panic"($S5010)
  if1052_end2676:
    set fb_tmp_209, $P101
    repr_defined $I5026, fb_tmp_209
    unless $I5026 goto if1058_else2686 
    set $P5096, fb_tmp_209[0]
    set $P5098, $P5096
    goto if1058_end2687
  if1058_else2686:
    null $P5097
    set $P5098, $P5097
  if1058_end2687:
    unless_null $P5098, vivi_10592688
    nqp_get_sc_object $P5099, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5098, $P5099
  vivi_10592688:
    set $P103, $P5098
    goto if1039_end2656
  if1039_else2655:
.annotate 'line', 926
    find_lex $P5100, "$_"
    set fb_tmp_212, $P5100
    repr_defined $I5029, fb_tmp_212
    unless $I5029 goto if1062_else2693 
    set $P5101, fb_tmp_212[1]
    set $P5103, $P5101
    goto if1062_end2694
  if1062_else2693:
    null $P5102
    set $P5103, $P5102
  if1062_end2694:
    unless_null $P5103, vivi_10632695
    nqp_get_sc_object $P5104, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5103, $P5104
  vivi_10632695:
    set fb_tmp_211, $P5103
    repr_defined $I5028, fb_tmp_211
    unless $I5028 goto if1061_else2691 
    set $P5105, fb_tmp_211[0]
    set $P5107, $P5105
    goto if1061_end2692
  if1061_else2691:
    null $P5106
    set $P5107, $P5106
  if1061_end2692:
    unless_null $P5107, vivi_10642696
    nqp_get_sc_object $P5108, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5107, $P5108
  vivi_10642696:
    set fb_tmp_210, $P5107
    repr_defined $I5027, fb_tmp_210
    unless $I5027 goto if1060_else2689 
    set $P5109, fb_tmp_210[0]
    set $P5111, $P5109
    goto if1060_end2690
  if1060_else2689:
    null $P5110
    set $P5111, $P5110
  if1060_end2690:
    unless_null $P5111, vivi_10652697
    nqp_get_sc_object $P5112, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5111, $P5112
  vivi_10652697:
    set $S5012, $P5111
    box $P5113, $S5012
    set $P103, $P5113
  if1039_end2656:
    set $S5013, $P102
    ord $I5030, $S5013
    box $P5114, $I5030
    set $P104, $P5114
    set $S5014, $P103
    ord $I5031, $S5014
    box $P5115, $I5031
    set $P105, $P5115
    set $N5005, $P104
    set $N5006, $P105
    isgt $I5032, $N5005, $N5006
    unless $I5032 goto if1066_end2699 
.annotate 'line', 931
    find_lex $P5116, "$/"
    $P5117 = $P5116."CURSOR"()
    find_lex $P5118, "$_"
    set $S5016, $P5118
    concat $S5015, "Illegal reversed character range in regex: ", $S5016
    $P5119 = $P5117."panic"($S5015)
  if1066_end2699:
    find_dynamic_lex $P5120, "%*RX"
    unless_null $P5120, fallback2704
    nqp_get_sc_object $P5122, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 0
    get_who $P5121, $P5122
    set pkg_viv_tmp_14, $P5121
    set fb_tmp_214, pkg_viv_tmp_14
    repr_defined $I5034, fb_tmp_214
    unless $I5034 goto if1069_else2705 
    set $P5123, fb_tmp_214["%RX"]
    set $P5125, $P5123
    goto if1069_end2706
  if1069_else2705:
    null $P5124
    set $P5125, $P5124
  if1069_end2706:
    unless_null $P5125, vivi_10702707
    new $P5126, 'Hash'
    set pkg_viv_tmp_14["%RX"], $P5126
    set $P5125, $P5126
  vivi_10702707:
    unless_null $P5125, vivi_10712708
    die "Contextual %*RX not found"
    box $P5127, "Contextual %*RX not found"
    set $P5125, $P5127
  vivi_10712708:
    set $P5120, $P5125
  fallback2704:
    set fb_tmp_213, $P5120
    repr_defined $I5033, fb_tmp_213
    unless $I5033 goto if1068_else2702 
    set $P5128, fb_tmp_213["i"]
    set $P5130, $P5128
    goto if1068_end2703
  if1068_else2702:
    null $P5129
    set $P5130, $P5129
  if1068_end2703:
    unless_null $P5130, vivi_10722709
    nqp_get_sc_object $P5131, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5130, $P5131
  vivi_10722709:
    unless $P5130 goto if1067_else2700 
.annotate 'line', 933
  while1073_test2710:
    set $N5007, $P104
    set $N5008, $P105
    isle $I5035, $N5007, $N5008
    box $P5135, $I5035
    set $P5134, $P5135
    unless $I5035 goto while1073_done2714 
  while1073_redo2712:
    .const 'Sub' $P5132 = 'cuid_252_1381281822.05887' 
    capture_lex $P5132
    $P5133 = $P5132()
    set $P5134, $P5133
    goto while1073_test2710 
  while1073_done2714:
    set $P5141, $P5134
    goto if1067_end2701
  if1067_else2700:
.annotate 'line', 939
    new $P5139, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5139, while1074_handlers2718
    push_eh $P5139
  while1074_test2715:
    set $N5009, $P104
    set $N5010, $P105
    isle $I5036, $N5009, $N5010
    box $P5140, $I5036
    set $P5138, $P5140
    unless $I5036 goto while1074_done2719 
  while1074_redo2717:
    find_lex $P5136, "$str"
    set $S5018, $P5136
    set tmp_4, $P104
    set $N5012, tmp_4
    set $N5013, 1
    add $N5011, $N5012, $N5013
    box $P5137, $N5011
    set $P104, $P5137
    set $I5037, tmp_4
    chr $S5019, $I5037
    concat $S5017, $S5018, $S5019
    box $P5137, $S5017
    store_lex "$str", $P5137
    set $P5138, $P5137
    goto while1074_test2715 
  while1074_handlers2718:
    .get_results ($P5139)
    pop_upto_eh $P5139
    getattribute $P5139, $P5139, 'type'
    eq $P5139, .CONTROL_LOOP_NEXT, while1074_test2715
    eq $P5139, .CONTROL_LOOP_REDO, while1074_redo2717
  while1074_done2719:
    pop_eh 
    set $P5141, $P5138
  if1067_end2701:
    .return ($P5141) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_252_1381281822.05887") :anon :lex :outer("cuid_253_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 934
    .lex "$c", $P101 
    .local pmc tmp_3 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
    find_lex $P5002, "$ord0"
    set tmp_3, $P5002
    set $N5002, tmp_3
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$ord0", $P5003
    set $I5001, tmp_3
    chr $S5001, $I5001
    box $P5002, $S5001
    set $P101, $P5002
    find_lex $P5003, "$str"
    set $S5003, $P5003
    set $S5006, $P101
    downcase $S5005, $S5006
    set $S5008, $P101
    upcase $S5007, $S5008
    concat $S5004, $S5005, $S5007
    concat $S5002, $S5003, $S5004
    box $P5004, $S5002
    store_lex "$str", $P5004
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_255_1381281822.05887") :anon :lex :outer("cuid_254_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 943
    .lex "$bs", $P101 
    .local pmc fb_tmp_217 
    .local pmc fb_tmp_218 
    .local pmc fb_tmp_219 
    .local pmc fb_tmp_220 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 944
    find_lex $P5002, "$_"
    set fb_tmp_218, $P5002
    repr_defined $I5002, fb_tmp_218
    unless $I5002 goto if1081_else2730 
    set $P5003, fb_tmp_218[0]
    set $P5005, $P5003
    goto if1081_end2731
  if1081_else2730:
    null $P5004
    set $P5005, $P5004
  if1081_end2731:
    unless_null $P5005, vivi_10822732
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5005, $P5006
  vivi_10822732:
    set fb_tmp_217, $P5005
    repr_defined $I5001, fb_tmp_217
    unless $I5001 goto if1080_else2728 
    set $P5007, fb_tmp_217["cclass_backslash"]
    set $P5009, $P5007
    goto if1080_end2729
  if1080_else2728:
    null $P5008
    set $P5009, $P5008
  if1080_end2729:
    unless_null $P5009, vivi_10832733
    nqp_get_sc_object $P5010, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5009, $P5010
  vivi_10832733:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
.annotate 'line', 945
    $P5012 = $P101."rxtype"()
    set $S5001, $P5012
    iseq $I5003, $S5001, "enumcharlist"
    set $I5005, $I5003
    unless $I5003 goto if1086_end2739 
    $P5013 = $P101."negate"()
    isfalse $I5004, $P5013
    set $I5005, $I5004
  if1086_end2739:
    set $I5007, $I5005
    if $I5005 goto unless1085_end2737 
    $P5014 = $P101."rxtype"()
    set $S5002, $P5014
    iseq $I5006, $S5002, "literal"
    set $I5007, $I5006
  unless1085_end2737:
    unless $I5007 goto if1084_else2734 
    find_lex $P5015, "$str"
    set $S5004, $P5015
    set fb_tmp_219, $P101
    repr_defined $I5008, fb_tmp_219
    unless $I5008 goto if1087_else2740 
    set $P5016, fb_tmp_219[0]
    set $P5018, $P5016
    goto if1087_end2741
  if1087_else2740:
    null $P5017
    set $P5018, $P5017
  if1087_end2741:
    unless_null $P5018, vivi_10882742
    nqp_get_sc_object $P5019, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5018, $P5019
  vivi_10882742:
    set $S5005, $P5018
    concat $S5003, $S5004, $S5005
    box $P5020, $S5003
    store_lex "$str", $P5020
    set $P5031, $P5020
    goto if1084_end2735
  if1084_else2734:
.annotate 'line', 948
    find_lex $P5021, "$/"
    unless_null $P5021, fallback2747
    nqp_get_sc_object $P5022, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5021, $P5022
  fallback2747:
    set fb_tmp_220, $P5021
    repr_defined $I5010, fb_tmp_220
    unless $I5010 goto if1090_else2745 
    set $P5023, fb_tmp_220["sign"]
    set $P5025, $P5023
    goto if1090_end2746
  if1090_else2745:
    null $P5024
    set $P5025, $P5024
  if1090_end2746:
    unless_null $P5025, vivi_10912748
    nqp_get_sc_object $P5026, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5025, $P5026
  vivi_10912748:
    set $S5006, $P5025
    iseq $I5009, $S5006, "-"
    unless $I5009 goto if1089_end2744 
.annotate 'line', 949
    $P5027 = $P101."negate"()
    isfalse $I5011, $P5027
    $P5028 = $P101."negate"($I5011)
  if1089_end2744:
.annotate 'line', 950
    find_lex $P5029, "@alts"
    $P5030 = $P5029."push"($P101)
    set $P5031, $P5030
  if1084_end2735:
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_256_1381281822.05887") :anon :lex :outer("cuid_254_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 953
    .lex "$c", $P101 
    .local pmc fb_tmp_221 
    .local pmc fb_tmp_222 
    .local pmc fb_tmp_223 
    .local pmc pkg_viv_tmp_15 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
    find_lex $P5002, "$_"
    set fb_tmp_221, $P5002
    repr_defined $I5001, fb_tmp_221
    unless $I5001 goto if1092_else2749 
    set $P5003, fb_tmp_221[0]
    set $P5005, $P5003
    goto if1092_end2750
  if1092_else2749:
    null $P5004
    set $P5005, $P5004
  if1092_end2750:
    unless_null $P5005, vivi_10932751
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5005, $P5006
  vivi_10932751:
    set $S5001, $P5005
    box $P5007, $S5001
    set $P101, $P5007
    find_lex $P5008, "$str"
    set $S5003, $P5008
    find_dynamic_lex $P5009, "%*RX"
    unless_null $P5009, fallback2756
    nqp_get_sc_object $P5011, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 0
    get_who $P5010, $P5011
    set pkg_viv_tmp_15, $P5010
    set fb_tmp_223, pkg_viv_tmp_15
    repr_defined $I5003, fb_tmp_223
    unless $I5003 goto if1096_else2757 
    set $P5012, fb_tmp_223["%RX"]
    set $P5014, $P5012
    goto if1096_end2758
  if1096_else2757:
    null $P5013
    set $P5014, $P5013
  if1096_end2758:
    unless_null $P5014, vivi_10972759
    new $P5015, 'Hash'
    set pkg_viv_tmp_15["%RX"], $P5015
    set $P5014, $P5015
  vivi_10972759:
    unless_null $P5014, vivi_10982760
    die "Contextual %*RX not found"
    box $P5016, "Contextual %*RX not found"
    set $P5014, $P5016
  vivi_10982760:
    set $P5009, $P5014
  fallback2756:
    set fb_tmp_222, $P5009
    repr_defined $I5002, fb_tmp_222
    unless $I5002 goto if1095_else2754 
    set $P5017, fb_tmp_222["i"]
    set $P5019, $P5017
    goto if1095_end2755
  if1095_else2754:
    null $P5018
    set $P5019, $P5018
  if1095_end2755:
    unless_null $P5019, vivi_10992761
    nqp_get_sc_object $P5020, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5019, $P5020
  vivi_10992761:
    unless $P5019 goto if1094_else2752 
    set $S5006, $P101
    downcase $S5005, $S5006
    set $S5008, $P101
    upcase $S5007, $S5008
    concat $S5004, $S5005, $S5007
    box $P5022, $S5004
    set $P5021, $P5022
    goto if1094_end2753
  if1094_else2752:
    set $P5021, $P101
  if1094_end2753:
    set $S5009, $P5021
    concat $S5002, $S5003, $S5009
    box $P5023, $S5002
    store_lex "$str", $P5023
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "mod_internal" :subid("cuid_191_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 970
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5026 = 'cuid_258_1381281822.05887' 
    capture_lex $P5026 
    .const 'Sub' $P5026 = 'cuid_259_1381281822.05887' 
    capture_lex $P5026 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_227 
    .local pmc fb_tmp_228 
    .local pmc fb_tmp_229 
    unless_null _lex_param_1, fallback2786
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5001
  fallback2786:
    set fb_tmp_227, _lex_param_1
    repr_defined $I5001, fb_tmp_227
    unless $I5001 goto if1110_else2784 
    set $P5002, fb_tmp_227["quote_EXPR"]
    set $P5004, $P5002
    goto if1110_end2785
  if1110_else2784:
    null $P5003
    set $P5004, $P5003
  if1110_end2785:
    unless_null $P5004, vivi_11112787
    nqp_get_sc_object $P5005, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5004, $P5005
  vivi_11112787:
    unless $P5004 goto if1109_else2782 
.annotate 'line', 971
.annotate 'line', 972
    nqp_get_sc_object $P5006, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 55
    unless_null _lex_param_1, fallback2794
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_1, $P5007
  fallback2794:
    set fb_tmp_229, _lex_param_1
    repr_defined $I5003, fb_tmp_229
    unless $I5003 goto if1114_else2792 
    set $P5008, fb_tmp_229["quote_EXPR"]
    set $P5010, $P5008
    goto if1114_end2793
  if1114_else2792:
    null $P5009
    set $P5010, $P5009
  if1114_end2793:
    unless_null $P5010, vivi_11152795
    nqp_get_sc_object $P5011, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5010, $P5011
  vivi_11152795:
    set fb_tmp_228, $P5010
    repr_defined $I5002, fb_tmp_228
    unless $I5002 goto if1113_else2790 
    set $P5012, fb_tmp_228[0]
    set $P5014, $P5012
    goto if1113_end2791
  if1113_else2790:
    null $P5013
    set $P5014, $P5013
  if1113_end2791:
    unless_null $P5014, vivi_11162796
    nqp_get_sc_object $P5015, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5014, $P5015
  vivi_11162796:
    $P5016 = $P5014."ast"()
    $P5017 = $P5006."ACCEPTS"($P5016)
    unless $P5017 goto if1112_else2788 
    .const 'Sub' $P5018 = 'cuid_258_1381281822.05887' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5022, $P5019
    goto if1112_end2789
  if1112_else2788:
.annotate 'line', 980
.annotate 'line', 981
    $P5020 = _lex_param_1."CURSOR"()
    $P5021 = $P5020."panic"("Internal modifier strings must be literals")
    set $P5022, $P5021
  if1112_end2789:
    set $P5025, $P5022
    goto if1109_end2783
  if1109_else2782:
    .const 'Sub' $P5023 = 'cuid_259_1381281822.05887' 
    capture_lex $P5023
    $P5024 = $P5023()
    set $P5025, $P5024
  if1109_end2783:
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_258_1381281822.05887") :anon :lex :outer("cuid_191_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 972
    .lex "$key", $P101 
    .lex "$val", $P102 
    .local pmc fb_tmp_230 
    .local pmc fb_tmp_231 
    .local pmc fb_tmp_232 
    .local pmc fb_tmp_233 
    .local pmc fb_tmp_234 
    .local pmc pkg_viv_tmp_16 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P102, $P5002
    find_lex $P5003, "$/"
    unless_null $P5003, fallback2801
    nqp_get_sc_object $P5004, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5003, $P5004
  fallback2801:
    set fb_tmp_231, $P5003
    repr_defined $I5002, fb_tmp_231
    unless $I5002 goto if1118_else2799 
    set $P5005, fb_tmp_231["mod_ident"]
    set $P5007, $P5005
    goto if1118_end2800
  if1118_else2799:
    null $P5006
    set $P5007, $P5006
  if1118_end2800:
    unless_null $P5007, vivi_11192802
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5007, $P5008
  vivi_11192802:
    set fb_tmp_230, $P5007
    repr_defined $I5001, fb_tmp_230
    unless $I5001 goto if1117_else2797 
    set $P5009, fb_tmp_230["sym"]
    set $P5011, $P5009
    goto if1117_end2798
  if1117_else2797:
    null $P5010
    set $P5011, $P5010
  if1117_end2798:
    unless_null $P5011, vivi_11202803
    nqp_get_sc_object $P5012, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5011, $P5012
  vivi_11202803:
    set $S5001, $P5011
    box $P5013, $S5001
    set $P101, $P5013
.annotate 'line', 974
    find_lex $P5014, "$/"
    unless_null $P5014, fallback2808
    nqp_get_sc_object $P5015, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5014, $P5015
  fallback2808:
    set fb_tmp_233, $P5014
    repr_defined $I5004, fb_tmp_233
    unless $I5004 goto if1122_else2806 
    set $P5016, fb_tmp_233["quote_EXPR"]
    set $P5018, $P5016
    goto if1122_end2807
  if1122_else2806:
    null $P5017
    set $P5018, $P5017
  if1122_end2807:
    unless_null $P5018, vivi_11232809
    nqp_get_sc_object $P5019, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5018, $P5019
  vivi_11232809:
    set fb_tmp_232, $P5018
    repr_defined $I5003, fb_tmp_232
    unless $I5003 goto if1121_else2804 
    set $P5020, fb_tmp_232[0]
    set $P5022, $P5020
    goto if1121_end2805
  if1121_else2804:
    null $P5021
    set $P5022, $P5021
  if1121_end2805:
    unless_null $P5022, vivi_11242810
    nqp_get_sc_object $P5023, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5022, $P5023
  vivi_11242810:
    $P5024 = $P5022."ast"()
    $P5025 = $P5024."value"()
    set $P102, $P5025
    find_dynamic_lex $P5026, "%*RX"
    unless_null $P5026, fallback2811
    nqp_get_sc_object $P5028, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 0
    get_who $P5027, $P5028
    set pkg_viv_tmp_16, $P5027
    set fb_tmp_234, pkg_viv_tmp_16
    repr_defined $I5005, fb_tmp_234
    unless $I5005 goto if1125_else2812 
    set $P5029, fb_tmp_234["%RX"]
    set $P5031, $P5029
    goto if1125_end2813
  if1125_else2812:
    null $P5030
    set $P5031, $P5030
  if1125_end2813:
    unless_null $P5031, vivi_11262814
    new $P5032, 'Hash'
    set pkg_viv_tmp_16["%RX"], $P5032
    set $P5031, $P5032
  vivi_11262814:
    unless_null $P5031, vivi_11272815
    die "Contextual %*RX not found"
    box $P5033, "Contextual %*RX not found"
    set $P5031, $P5033
  vivi_11272815:
    set $P5026, $P5031
  fallback2811:
    set $S5002, $P101
    set $P5026[$S5002], $P102
.annotate 'line', 976
    find_dynamic_lex $P5034, "$/"
    set $S5003, $P101
    iseq $I5006, $S5003, "dba"
    unless $I5006 goto if1128_else2816 
.annotate 'line', 977
    nqp_get_sc_object $P5035, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5036 = $P5035."new"("dba" :named("rxtype"), $P102 :named("name"))
    set $P5037, $P5036
    goto if1128_end2817
  if1128_else2816:
    box $P5038, 0
    set $P5037, $P5038
  if1128_end2817:
    $P5039 = $P5034."!make"($P5037)
    .return ($P5039) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_259_1381281822.05887") :anon :lex :outer("cuid_191_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 984
    .lex "$n", $P101 
    .local pmc fb_tmp_235 
    .local pmc fb_tmp_236 
    .local pmc fb_tmp_237 
    .local pmc fb_tmp_238 
    .local pmc fb_tmp_239 
    .local pmc pkg_viv_tmp_17 
    .local pmc fb_tmp_240 
    .local pmc fb_tmp_241 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
    find_lex $P5002, "$/"
    unless_null $P5002, fallback2824
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5002, $P5003
  fallback2824:
    set fb_tmp_236, $P5002
    repr_defined $I5003, fb_tmp_236
    unless $I5003 goto if1131_else2822 
    set $P5004, fb_tmp_236["n"]
    set $P5006, $P5004
    goto if1131_end2823
  if1131_else2822:
    null $P5005
    set $P5006, $P5005
  if1131_end2823:
    unless_null $P5006, vivi_11322825
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_11322825:
    set fb_tmp_235, $P5006
    repr_defined $I5002, fb_tmp_235
    unless $I5002 goto if1130_else2820 
    set $P5008, fb_tmp_235[0]
    set $P5010, $P5008
    goto if1130_end2821
  if1130_else2820:
    null $P5009
    set $P5010, $P5009
  if1130_end2821:
    unless_null $P5010, vivi_11332826
    nqp_get_sc_object $P5011, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5010, $P5011
  vivi_11332826:
    set $S5001, $P5010
    isgt $I5001, $S5001, ""
    unless $I5001 goto if1129_else2818 
    find_lex $P5012, "$/"
    unless_null $P5012, fallback2831
    nqp_get_sc_object $P5013, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5012, $P5013
  fallback2831:
    set fb_tmp_238, $P5012
    repr_defined $I5005, fb_tmp_238
    unless $I5005 goto if1135_else2829 
    set $P5014, fb_tmp_238["n"]
    set $P5016, $P5014
    goto if1135_end2830
  if1135_else2829:
    null $P5015
    set $P5016, $P5015
  if1135_end2830:
    unless_null $P5016, vivi_11362832
    nqp_get_sc_object $P5017, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5016, $P5017
  vivi_11362832:
    set fb_tmp_237, $P5016
    repr_defined $I5004, fb_tmp_237
    unless $I5004 goto if1134_else2827 
    set $P5018, fb_tmp_237[0]
    set $P5020, $P5018
    goto if1134_end2828
  if1134_else2827:
    null $P5019
    set $P5020, $P5019
  if1134_end2828:
    unless_null $P5020, vivi_11372833
    nqp_get_sc_object $P5021, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5020, $P5021
  vivi_11372833:
    set $N5001, $P5020
    box $P5023, $N5001
    set $P5022, $P5023
    goto if1129_end2819
  if1129_else2818:
    box $P5024, 1
    set $P5022, $P5024
  if1129_end2819:
    set $P101, $P5022
    find_dynamic_lex $P5025, "%*RX"
    unless_null $P5025, fallback2834
    nqp_get_sc_object $P5027, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 0
    get_who $P5026, $P5027
    set pkg_viv_tmp_17, $P5026
    set fb_tmp_239, pkg_viv_tmp_17
    repr_defined $I5006, fb_tmp_239
    unless $I5006 goto if1138_else2835 
    set $P5028, fb_tmp_239["%RX"]
    set $P5030, $P5028
    goto if1138_end2836
  if1138_else2835:
    null $P5029
    set $P5030, $P5029
  if1138_end2836:
    unless_null $P5030, vivi_11392837
    new $P5031, 'Hash'
    set pkg_viv_tmp_17["%RX"], $P5031
    set $P5030, $P5031
  vivi_11392837:
    unless_null $P5030, vivi_11402838
    die "Contextual %*RX not found"
    box $P5032, "Contextual %*RX not found"
    set $P5030, $P5032
  vivi_11402838:
    set $P5025, $P5030
  fallback2834:
    find_lex $P5033, "$/"
    unless_null $P5033, fallback2843
    nqp_get_sc_object $P5034, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5033, $P5034
  fallback2843:
    set fb_tmp_241, $P5033
    repr_defined $I5008, fb_tmp_241
    unless $I5008 goto if1142_else2841 
    set $P5035, fb_tmp_241["mod_ident"]
    set $P5037, $P5035
    goto if1142_end2842
  if1142_else2841:
    null $P5036
    set $P5037, $P5036
  if1142_end2842:
    unless_null $P5037, vivi_11432844
    nqp_get_sc_object $P5038, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5037, $P5038
  vivi_11432844:
    set fb_tmp_240, $P5037
    repr_defined $I5007, fb_tmp_240
    unless $I5007 goto if1141_else2839 
    set $P5039, fb_tmp_240["sym"]
    set $P5041, $P5039
    goto if1141_end2840
  if1141_else2839:
    null $P5040
    set $P5041, $P5040
  if1141_end2840:
    unless_null $P5041, vivi_11442845
    nqp_get_sc_object $P5042, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5041, $P5042
  vivi_11442845:
    set $S5002, $P5041
    set $P5025[$S5002], $P101
.annotate 'line', 987
    find_dynamic_lex $P5043, "$/"
    $P5044 = $P5043."!make"(0)
    .return ($P5044) 
.end
.HLL "nqp"
.namespace []
.sub "qbuildsub" :subid("cuid_192_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 998
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_2 :opt_flag 
    .param pmc _lex_param_3 :named("anon") :optional 
    .param int haz_param_3 :opt_flag 
    .param pmc _lex_param_4 :named("addself") :optional 
    .param int haz_param_4 :opt_flag 
    .param pmc _lex_param_5 :slurpy :named 
    .lex "$code_obj", $P101 
    .lex "self", _lex_param_0 
    .lex "$qast", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$anon", _lex_param_3 
    .lex "$addself", _lex_param_4 
    .lex "%rest", _lex_param_5 
    .local pmc fb_tmp_242 
    .local pmc fb_tmp_243 
    .local pmc fb_tmp_244 
    .local pmc pkg_viv_tmp_18 
    .local pmc fb_tmp_245 
    .local pmc fb_tmp_246 
    .local pmc pkg_viv_tmp_19 
    .local pmc fb_tmp_247 
    .local pmc fb_tmp_248 
    .local pmc pkg_viv_tmp_20 
    if haz_param_2, default2883
    nqp_get_sc_object $P5073, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 108
    $P5074 = $P5073."new"()
    set _lex_param_2, $P5074
  default2883:
    if haz_param_3, default2884
    nqp_get_sc_object $P5075, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_3, $P5075
  default2884:
    if haz_param_4, default2885
    nqp_get_sc_object $P5076, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set _lex_param_4, $P5076
  default2885:
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
    exists $I5001, _lex_param_5["code_obj"]
    unless $I5001 goto if1145_else2846 
    set fb_tmp_242, _lex_param_5
    repr_defined $I5002, fb_tmp_242
    unless $I5002 goto if1146_else2848 
    set $P5002, fb_tmp_242["code_obj"]
    set $P5004, $P5002
    goto if1146_end2849
  if1146_else2848:
    null $P5003
    set $P5004, $P5003
  if1146_end2849:
    unless_null $P5004, vivi_11472850
    nqp_get_sc_object $P5005, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5004, $P5005
  vivi_11472850:
    set $P5008, $P5004
    goto if1145_end2847
  if1145_else2846:
.annotate 'line', 1001
    nqp_decontainerize $P5006, _lex_param_0
    $P5007 = $P5006."create_regex_code_object"(_lex_param_2)
    set $P5008, $P5007
  if1145_end2847:
    set $P101, $P5008
    unless _lex_param_4 goto if1148_end2852 
.annotate 'line', 1003
.annotate 'line', 1004
    nqp_get_sc_object $P5009, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 74
    $P5010 = $P5009."new"("self" :named("name"), "local" :named("scope"), "param" :named("decl"))
    $P5011 = _lex_param_2."push"($P5010)
  if1148_end2852:
.annotate 'line', 1006
    $P5012 = _lex_param_2."symbol"(utf8:"$\x{a2}")
    if $P5012 goto unless1149_end2854 
.annotate 'line', 1007
    nqp_get_sc_object $P5013, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 74
    $P5014 = $P5013."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    _lex_param_2."push"($P5014)
.annotate 'line', 1008
    $P5015 = _lex_param_2."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
  unless1149_end2854:
.annotate 'line', 1011
    nqp_decontainerize $P5016, _lex_param_0
    $P5017 = "&capnames"(_lex_param_1, 0)
    $P5016."store_regex_caps"($P101, _lex_param_2, $P5017)
.annotate 'line', 1012
    nqp_decontainerize $P5018, _lex_param_0
    nqp_get_sc_object $P5019, "E7AD4B42F22CE3E5A839229F2FDCC4FBE891C4E3-1381281785.75165", 3
    $P5020 = $P5019."new"()
    $P5021 = $P5020."addnode"(_lex_param_1)
    $P5018."store_regex_nfa"($P101, _lex_param_2, $P5021)
.annotate 'line', 1013
    nqp_decontainerize $P5022, _lex_param_0
    $P5022."alt_nfas"($P101, _lex_param_2, _lex_param_1)
    set _lex_param_2["orig_qast"], _lex_param_1
.annotate 'line', 1016
    nqp_get_sc_object $P5023, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
.annotate 'line', 1017
    nqp_get_sc_object $P5024, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5025 = $P5024."new"("scan" :named("rxtype"))
    unless _lex_param_3 goto if1150_else2855 
.annotate 'line', 1020
    nqp_get_sc_object $P5026, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    $P5027 = $P5026."new"("pass" :named("rxtype"))
    set $P5071, $P5027
    goto if1150_end2856
  if1150_else2855:
    find_dynamic_lex $P5028, "%*RX"
    unless_null $P5028, fallback2861
    nqp_get_sc_object $P5030, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 0
    get_who $P5029, $P5030
    set pkg_viv_tmp_18, $P5029
    set fb_tmp_244, pkg_viv_tmp_18
    repr_defined $I5005, fb_tmp_244
    unless $I5005 goto if1153_else2862 
    set $P5031, fb_tmp_244["%RX"]
    set $P5033, $P5031
    goto if1153_end2863
  if1153_else2862:
    null $P5032
    set $P5033, $P5032
  if1153_end2863:
    unless_null $P5033, vivi_11542864
    new $P5034, 'Hash'
    set pkg_viv_tmp_18["%RX"], $P5034
    set $P5033, $P5034
  vivi_11542864:
    unless_null $P5033, vivi_11552865
    die "Contextual %*RX not found"
    box $P5035, "Contextual %*RX not found"
    set $P5033, $P5035
  vivi_11552865:
    set $P5028, $P5033
  fallback2861:
    set fb_tmp_243, $P5028
    repr_defined $I5004, fb_tmp_243
    unless $I5004 goto if1152_else2859 
    set $P5036, fb_tmp_243["name"]
    set $P5038, $P5036
    goto if1152_end2860
  if1152_else2859:
    null $P5037
    set $P5038, $P5037
  if1152_end2860:
    unless_null $P5038, vivi_11562866
    nqp_get_sc_object $P5039, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5038, $P5039
  vivi_11562866:
    set $S5002, $P5038
    substr $S5001, $S5002, 0, 12
    isne $I5003, $S5001, "!!LATENAME!!"
    unless $I5003 goto if1151_else2857 
.annotate 'line', 1022
    nqp_get_sc_object $P5040, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    find_dynamic_lex $P5041, "%*RX"
    unless_null $P5041, fallback2869
    nqp_get_sc_object $P5043, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 0
    get_who $P5042, $P5043
    set pkg_viv_tmp_19, $P5042
    set fb_tmp_246, pkg_viv_tmp_19
    repr_defined $I5007, fb_tmp_246
    unless $I5007 goto if1158_else2870 
    set $P5044, fb_tmp_246["%RX"]
    set $P5046, $P5044
    goto if1158_end2871
  if1158_else2870:
    null $P5045
    set $P5046, $P5045
  if1158_end2871:
    unless_null $P5046, vivi_11592872
    new $P5047, 'Hash'
    set pkg_viv_tmp_19["%RX"], $P5047
    set $P5046, $P5047
  vivi_11592872:
    unless_null $P5046, vivi_11602873
    die "Contextual %*RX not found"
    box $P5048, "Contextual %*RX not found"
    set $P5046, $P5048
  vivi_11602873:
    set $P5041, $P5046
  fallback2869:
    set fb_tmp_245, $P5041
    repr_defined $I5006, fb_tmp_245
    unless $I5006 goto if1157_else2867 
    set $P5049, fb_tmp_245["name"]
    set $P5051, $P5049
    goto if1157_end2868
  if1157_else2867:
    null $P5050
    set $P5051, $P5050
  if1157_end2868:
    unless_null $P5051, vivi_11612874
    nqp_get_sc_object $P5052, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5051, $P5052
  vivi_11612874:
    $P5053 = $P5040."new"("pass" :named("rxtype"), $P5051 :named("name"))
    set $P5070, $P5053
    goto if1151_end2858
  if1151_else2857:
.annotate 'line', 1023
    nqp_get_sc_object $P5054, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
.annotate 'line', 1024
    nqp_get_sc_object $P5055, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 74
    find_dynamic_lex $P5056, "%*RX"
    unless_null $P5056, fallback2877
    nqp_get_sc_object $P5058, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 0
    get_who $P5057, $P5058
    set pkg_viv_tmp_20, $P5057
    set fb_tmp_248, pkg_viv_tmp_20
    repr_defined $I5009, fb_tmp_248
    unless $I5009 goto if1163_else2878 
    set $P5059, fb_tmp_248["%RX"]
    set $P5061, $P5059
    goto if1163_end2879
  if1163_else2878:
    null $P5060
    set $P5061, $P5060
  if1163_end2879:
    unless_null $P5061, vivi_11642880
    new $P5062, 'Hash'
    set pkg_viv_tmp_20["%RX"], $P5062
    set $P5061, $P5062
  vivi_11642880:
    unless_null $P5061, vivi_11652881
    die "Contextual %*RX not found"
    box $P5063, "Contextual %*RX not found"
    set $P5061, $P5063
  vivi_11652881:
    set $P5056, $P5061
  fallback2877:
    set fb_tmp_247, $P5056
    repr_defined $I5008, fb_tmp_247
    unless $I5008 goto if1162_else2875 
    set $P5064, fb_tmp_247["name"]
    set $P5066, $P5064
    goto if1162_end2876
  if1162_else2875:
    null $P5065
    set $P5066, $P5065
  if1162_end2876:
    unless_null $P5066, vivi_11662882
    nqp_get_sc_object $P5067, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5066, $P5067
  vivi_11662882:
    set $S5004, $P5066
    substr $S5003, $S5004, 12
    $P5068 = $P5055."new"($S5003 :named("name"), "lexical" :named("scope"))
    $P5069 = $P5054."new"($P5068, "pass" :named("rxtype"))
    set $P5070, $P5069
  if1151_end2858:
    set $P5071, $P5070
  if1150_end2856:
    $P5072 = $P5023."new"($P5025, _lex_param_1, $P5071, "concat" :named("rxtype"))
    set _lex_param_1, $P5072
.annotate 'line', 1030
    _lex_param_2."push"(_lex_param_1)
    .return (_lex_param_2) 
.end
.HLL "nqp"
.namespace []
.sub "alt_nfas" :subid("cuid_193_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1092
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P5021 = 'cuid_261_1381281822.05887' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_262_1381281822.05887' 
    capture_lex $P5021 
    .lex "$rxtype", $P101 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$ast", _lex_param_3 
    .local pmc fb_tmp_249 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P101, $P5001
.annotate 'line', 1093
    $P5002 = _lex_param_3."rxtype"()
    set $P101, $P5002
    set $S5001, $P101
    iseq $I5001, $S5001, "alt"
    unless $I5001 goto if1167_else2886 
    .const 'Sub' $P5003 = 'cuid_261_1381281822.05887' 
    capture_lex $P5003
    $P5004 = $P5003()
    set $P5020, $P5004
    goto if1167_end2887
  if1167_else2886:
    set $S5002, $P101
    iseq $I5002, $S5002, "subcapture"
    set $I5004, $I5002
    if $I5002 goto unless1169_end2894 
    set $S5003, $P101
    iseq $I5003, $S5003, "quant"
    set $I5004, $I5003
  unless1169_end2894:
    unless $I5004 goto if1168_else2891 
.annotate 'line', 1103
.annotate 'line', 1104
    nqp_decontainerize $P5005, _lex_param_0
    set fb_tmp_249, _lex_param_3
    repr_defined $I5005, fb_tmp_249
    unless $I5005 goto if1170_else2895 
    set $P5006, fb_tmp_249[0]
    set $P5008, $P5006
    goto if1170_end2896
  if1170_else2895:
    null $P5007
    set $P5008, $P5007
  if1170_end2896:
    unless_null $P5008, vivi_11712897
    nqp_get_sc_object $P5009, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5008, $P5009
  vivi_11712897:
    $P5010 = $P5005."alt_nfas"(_lex_param_1, _lex_param_2, $P5008)
    set $P5019, $P5010
    goto if1168_end2892
  if1168_else2891:
    set $S5004, $P101
    iseq $I5006, $S5004, "concat"
    set $I5008, $I5006
    if $I5006 goto unless1175_end2905 
    set $S5005, $P101
    iseq $I5007, $S5005, "altseq"
    set $I5008, $I5007
  unless1175_end2905:
    set $I5010, $I5008
    if $I5008 goto unless1174_end2903 
    set $S5006, $P101
    iseq $I5009, $S5006, "conj"
    set $I5010, $I5009
  unless1174_end2903:
    set $I5012, $I5010
    if $I5010 goto unless1173_end2901 
    set $S5007, $P101
    iseq $I5011, $S5007, "conjseq"
    set $I5012, $I5011
  unless1173_end2901:
    box $P5018, $I5012
    set $P5017, $P5018
    unless $I5012 goto if1172_end2899 
.annotate 'line', 1106
.annotate 'line', 1107
    $P5014 = _lex_param_3."list"()
    set $P5011, $P5014
    iter $P5013, $P5014
  for_next2906:
    unless $P5013, for_done2908
    shift $P5016, $P5013
  for_redo2907:
    .const 'Sub' $P5015 = 'cuid_262_1381281822.05887' 
    capture_lex $P5015
    $P5011 = $P5015($P5016)
    goto for_next2906
  for_done2908:
    set $P5017, $P5011
  if1172_end2899:
    set $P5019, $P5017
  if1168_end2892:
    set $P5020, $P5019
  if1167_end2887:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_261_1381281822.05887") :anon :lex :outer("cuid_193_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1094
    .const 'Sub' $P5019 = 'cuid_260_1381281822.05887' 
    capture_lex $P5019 
    .lex "@alternatives", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 1096
    find_lex $P5005, "$ast"
    $P5006 = $P5005."list"()
    set $P5002, $P5006
    iter $P5004, $P5006
  for_next2888:
    unless $P5004, for_done2890
    shift $P5008, $P5004
  for_redo2889:
    .const 'Sub' $P5007 = 'cuid_260_1381281822.05887' 
    capture_lex $P5007
    $P5002 = $P5007($P5008)
    goto for_next2888
  for_done2890:
.annotate 'line', 1100
    find_lex $P5009, "$ast"
    nqp_get_sc_object $P5010, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 12
    $P5011 = $P5010."unique"("alt_nfa_")
    set $S5003, $P5011
    concat $S5002, $S5003, "_"
    time $N5001
    set $S5004, $N5001
    concat $S5001, $S5002, $S5004
    $P5009."name"($S5001)
.annotate 'line', 1101
    find_lex $P5013, "self"
    nqp_decontainerize $P5012, $P5013
    find_lex $P5014, "$code_obj"
    find_lex $P5015, "$block"
    find_lex $P5016, "$ast"
    $P5017 = $P5016."name"()
    $P5018 = $P5012."store_regex_alt_nfa"($P5014, $P5015, $P5017, $P101)
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_260_1381281822.05887") :anon :lex :outer("cuid_261_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1096
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 1097
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$code_obj"
    find_lex $P5004, "$block"
    $P5001."alt_nfas"($P5003, $P5004, _lex_param_0)
    find_lex $P5005, "@alternatives"
.annotate 'line', 1098
    nqp_get_sc_object $P5006, "E7AD4B42F22CE3E5A839229F2FDCC4FBE891C4E3-1381281785.75165", 3
    $P5007 = $P5006."new"()
    $P5008 = $P5007."addnode"(_lex_param_0)
    push $P5005, $P5008
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_262_1381281822.05887") :anon :lex :outer("cuid_193_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1107
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$code_obj"
    find_lex $P5004, "$block"
    $P5005 = $P5001."alt_nfas"($P5003, $P5004, _lex_param_0)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "subrule_alias" :subid("cuid_194_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1111
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "self", _lex_param_0 
    .lex "$ast", _lex_param_1 
    .lex "$name", _lex_param_2 
.annotate 'line', 1112
    $P5001 = _lex_param_1."name"()
    set $S5001, $P5001
    isgt $I5001, $S5001, ""
    unless $I5001 goto if1176_else2909 
    set $S5004, _lex_param_2
    concat $S5003, $S5004, "="
    $P5002 = _lex_param_1."name"()
    set $S5005, $P5002
    concat $S5002, $S5003, $S5005
    $P5003 = _lex_param_1."name"($S5002)
    goto if1176_end2910
  if1176_else2909:
.annotate 'line', 1113
    $P5004 = _lex_param_1."name"(_lex_param_2)
  if1176_end2910:
.annotate 'line', 1114
    $P5005 = _lex_param_1."subtype"("capture")
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "flip_ast" :subid("cuid_195_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1117
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5021 = 'cuid_263_1381281822.05887' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_264_1381281822.05887' 
    capture_lex $P5021 
    .lex "self", _lex_param_0 
    .lex "$qast", _lex_param_1 
    .local pmc fb_tmp_250 
    root_new $P101, ['parrot';'Continuation']
    set_label $P101, lexotic_2911
    .lex "RETURN", $P101
    nqp_get_sc_object $P5001, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924", 34
    type_check $I5001, _lex_param_1, $P5001
    if $I5001 goto unless1177_end2914 
    $P5002 = "RETURN"(_lex_param_1)
  unless1177_end2914:
.annotate 'line', 1119
    $P5003 = _lex_param_1."rxtype"()
    set $S5001, $P5003
    iseq $I5002, $S5001, "literal"
    unless $I5002 goto if1178_else2915 
    set fb_tmp_250, _lex_param_1
    repr_defined $I5003, fb_tmp_250
    unless $I5003 goto if1179_else2917 
    set $P5005, fb_tmp_250[0]
    set $P5007, $P5005
    goto if1179_end2918
  if1179_else2917:
    null $P5006
    set $P5007, $P5006
  if1179_end2918:
    unless_null $P5007, vivi_11802919
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5007, $P5008
  vivi_11802919:
    set $S5003, $P5007
    box $P5004, $S5003
    $P5009 = $P5004."reverse"()
    set $S5002, $P5009
    box $P5010, $S5002
    set _lex_param_1[0], $P5010
    goto if1178_end2916
  if1178_else2915:
.annotate 'line', 1122
    $P5011 = _lex_param_1."rxtype"()
    set $S5004, $P5011
    iseq $I5004, $S5004, "concat"
    unless $I5004 goto if1181_else2920 
    .const 'Sub' $P5012 = 'cuid_263_1381281822.05887' 
    capture_lex $P5012
    $P5013 = $P5012()
    set $P5020, $P5013
    goto if1181_end2921
  if1181_else2920:
.annotate 'line', 1127
    $P5017 = _lex_param_1."list"()
    set $P5014, $P5017
    iter $P5016, $P5017
  for_next2932:
    unless $P5016, for_done2934
    shift $P5019, $P5016
  for_redo2933:
    .const 'Sub' $P5018 = 'cuid_264_1381281822.05887' 
    capture_lex $P5018
    $P5014 = $P5018($P5019)
    goto for_next2932
  for_done2934:
    set $P5020, $P5014
  if1181_end2921:
  if1178_end2916:
    goto lexotic_2912
  lexotic_2911:
    .get_results (_lex_param_1)
  lexotic_2912:
    .return (_lex_param_1) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_263_1381281822.05887") :anon :lex :outer("cuid_195_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1122
    .lex "@tmp", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
  while1182_test2922:
    find_lex $P5002, "$qast"
    $P5003 = $P5002."list"()
    set $N5001, $P5003
    box $P5009, $N5001
    set $P5008, $P5009
    unless $N5001 goto while1182_done2926 
  while1182_redo2924:
.annotate 'line', 1124
    find_lex $P5004, "$qast"
    $P5005 = $P5004."list"()
    $P5006 = $P5005."shift"()
    $P5007 = $P101."push"($P5006)
    set $P5008, $P5007
    goto while1182_test2922 
  while1182_done2926:
  while1183_test2927:
    set $P5017, $P101
    unless $P101 goto while1183_done2931 
  while1183_redo2929:
.annotate 'line', 1125
    find_lex $P5010, "$qast"
    $P5011 = $P5010."list"()
    find_lex $P5013, "self"
    nqp_decontainerize $P5012, $P5013
    $P5014 = $P101."pop"()
    $P5015 = $P5012."flip_ast"($P5014)
    $P5016 = $P5011."push"($P5015)
    set $P5017, $P5016
    goto while1183_test2927 
  while1183_done2931:
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_264_1381281822.05887") :anon :lex :outer("cuid_195_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1128
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    $P5003 = $P5001."flip_ast"(_lex_param_0)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "create_regex_code_object" :subid("cuid_196_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1135
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
    .local pmc fb_tmp_251 
.annotate 'line', 1136
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback2935
    nqp_get_sc_object $P5003, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 0
    get_who $P5002, $P5003
    set fb_tmp_251, $P5002
    repr_defined $I5001, fb_tmp_251
    unless $I5001 goto if1184_else2936 
    set $P5004, fb_tmp_251["$W"]
    set $P5006, $P5004
    goto if1184_end2937
  if1184_else2936:
    null $P5005
    set $P5006, $P5005
  if1184_end2937:
    unless_null $P5006, vivi_11852938
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    set $P5006, $P5007
  vivi_11852938:
    unless_null $P5006, vivi_11862939
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5006, $P5008
  vivi_11862939:
    set $P5001, $P5006
  fallback2935:
    $P5009 = _lex_param_1."name"()
    $P5010 = $P5001."create_code"(_lex_param_1, $P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_caps" :subid("cuid_197_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1140
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "%caps", _lex_param_3 
.annotate 'line', 1141
    $P5001 = _lex_param_1."SET_CAPS"(_lex_param_3)
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_nfa" :subid("cuid_198_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1145
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$nfa", _lex_param_3 
.annotate 'line', 1146
    $P5001 = _lex_param_3."save"()
    $P5002 = _lex_param_1."SET_NFA"($P5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_alt_nfa" :subid("cuid_199_1381281822.05887") :anon :lex :outer("cuid_222_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1150
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .const 'Sub' $P5008 = 'cuid_265_1381281822.05887' 
    capture_lex $P5008 
    .lex "@saved", $P101 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$key", _lex_param_3 
    .lex "@alternatives", _lex_param_4 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    set $P5002, _lex_param_4
    iter $P5004, _lex_param_4
  for_next2940:
    unless $P5004, for_done2942
    shift $P5006, $P5004
  for_redo2941:
    .const 'Sub' $P5005 = 'cuid_265_1381281822.05887' 
    capture_lex $P5005
    $P5002 = $P5005($P5006)
    goto for_next2940
  for_done2942:
.annotate 'line', 1155
    $P5007 = _lex_param_1."SET_ALT_NFA"(_lex_param_3, $P101)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_265_1381281822.05887") :anon :lex :outer("cuid_199_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1152
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 1153
    find_lex $P5001, "@saved"
    $P5002 = _lex_param_0."save"(1 :named("non_empty"))
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_266_1381281822.05887") :anon :lex :outer("cuid_200_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1160
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314", 26
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_268_1381281822.05887") :load :init
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .const 'Sub' $P5001 = 'cuid_267_1381281822.05887' 
    capture_lex $P5001 
    .local pmc cur_sc 
    .local pmc conflicts 
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P5001
    get_class $P5002, "LexPad"
    get_class $P5003, "NQPLexPad"
    $P5004 = $P5001."hll_map"($P5002, $P5003)
    load_bytecode "ModuleLoader.pbc"
    .const 'Sub' $P5001 = "cuid_200_1381281822.05887" 
    get_hll_global $P5002, "ModuleLoader"
    $P5003 = $P5002."load_setting"("NQPCORE")
    $P5004 = $P5001."set_outer_ctx"($P5003)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("NQPHLL")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QAST")
    nqp_create_sc $P5001, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102"
    set cur_sc, $P5001
    $P5002 = cur_sc."set_description"("src/stage2/gen/NQPP6QRegex.nqp")
    new $P5003, 'ResizablePMCArray'
    set conflicts, $P5003
    new $P5004, 'ResizableStringArray'
    null $S5001
    push $P5004, $S5001
    push $P5004, "P6opaque"
    push $P5004, "QAST"
    push $P5004, "QRegex"
    push $P5004, "NQPCursorRole"
    push $P5004, "E7AD4B42F22CE3E5A839229F2FDCC4FBE891C4E3-1381281785.75165"
    push $P5004, "src/stage2/QRegex.nqp"
    push $P5004, "NQPMatch"
    push $P5004, "NQPCursor"
    push $P5004, "NQPRegexMethod"
    push $P5004, "NQPRegex"
    push $P5004, "HLL"
    push $P5004, "PIRT"
    push $P5004, "DEFAULT"
    push $P5004, "CREATE"
    push $P5004, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1381281780.68314"
    push $P5004, "src/stage2/NQPCORE.setting"
    push $P5004, "bless"
    push $P5004, "BUILDALL"
    push $P5004, "new"
    push $P5004, "Str"
    push $P5004, "Numeric"
    push $P5004, "Int"
    push $P5004, "defined"
    push $P5004, "ACCEPTS"
    push $P5004, "isa"
    push $P5004, "BUILD"
    push $P5004, "30F2FDCF121B88EF4D971E3D787EDDB9E926F649-1381281791.94485"
    push $P5004, "src/stage2/gen/NQPHLL.nqp"
    push $P5004, "slot_for_object"
    push $P5004, "add_object"
    push $P5004, "add_root_code_ref"
    push $P5004, "update_root_code_ref"
    push $P5004, "is_precompilation_mode"
    push $P5004, "add_load_dependency_task"
    push $P5004, "add_fixup_task"
    push $P5004, "sc"
    push $P5004, "handle"
    push $P5004, "code_ref_blocks"
    push $P5004, "load_dependency_tasks"
    push $P5004, "fixup_tasks"
    push $P5004, "create_code"
    push $P5004, "$!sc"
    push $P5004, "$!handle"
    push $P5004, "$!precomp_mode"
    push $P5004, "$!num_code_refs"
    push $P5004, "$!code_ref_blocks"
    push $P5004, "@!load_dependency_tasks"
    push $P5004, "@!fixup_tasks"
    push $P5004, "%!addr_to_slot"
    push $P5004, "MATCH"
    push $P5004, "Bool"
    push $P5004, "parse"
    push $P5004, "!INTERPOLATE"
    push $P5004, "!INTERPOLATE_REGEX"
    push $P5004, "orig"
    push $P5004, "target"
    push $P5004, "from"
    push $P5004, "pos"
    push $P5004, "CAPHASH"
    push $P5004, "!cursor_init"
    push $P5004, "!cursor_start_all"
    push $P5004, "!cursor_start_cur"
    push $P5004, "!cursor_start_fail"
    push $P5004, "!cursor_start_subcapture"
    push $P5004, "!cursor_capture"
    push $P5004, "!cursor_push_cstack"
    push $P5004, "!cursor_pass"
    push $P5004, "!cursor_fail"
    push $P5004, "!cursor_pos"
    push $P5004, "!cursor_next"
    push $P5004, "!cursor_more"
    push $P5004, "!reduce"
    push $P5004, "!reduce_with_match"
    push $P5004, "!shared"
    push $P5004, "!protoregex"
    push $P5004, "!protoregex_nfa"
    push $P5004, "!protoregex_table"
    push $P5004, "!alt"
    push $P5004, "!alt_nfa"
    push $P5004, "!precompute_nfas"
    push $P5004, "!dba"
    push $P5004, "!highwater"
    push $P5004, "!highexpect"
    push $P5004, "!fresh_highexpect"
    push $P5004, "!set_highexpect"
    push $P5004, "!clear_highwater"
    push $P5004, "!BACKREF"
    push $P5004, "!LITERAL"
    push $P5004, "at"
    push $P5004, "before"
    push $P5004, "after"
    push $P5004, "ws"
    push $P5004, "ww"
    push $P5004, "wb"
    push $P5004, "ident"
    push $P5004, "alpha"
    push $P5004, "alnum"
    push $P5004, "upper"
    push $P5004, "lower"
    push $P5004, "digit"
    push $P5004, "xdigit"
    push $P5004, "space"
    push $P5004, "blank"
    push $P5004, "cntrl"
    push $P5004, "punct"
    push $P5004, "FAILGOAL"
    push $P5004, "throw_unrecog_backslash_seq"
    push $P5004, "termish"
    push $P5004, "term"
    push $P5004, "infix"
    push $P5004, "prefix"
    push $P5004, "postfix"
    push $P5004, "circumfix"
    push $P5004, "postcircumfix"
    push $P5004, "term:sym<circumfix>"
    push $P5004, "infixish"
    push $P5004, "prefixish"
    push $P5004, "postfixish"
    push $P5004, "nullterm"
    push $P5004, "nullterm_alt"
    push $P5004, "nulltermish"
    push $P5004, "quote_delimited"
    push $P5004, "quote_atom"
    push $P5004, "decint"
    push $P5004, "decints"
    push $P5004, "hexint"
    push $P5004, "hexints"
    push $P5004, "octint"
    push $P5004, "octints"
    push $P5004, "binint"
    push $P5004, "binints"
    push $P5004, "integer"
    push $P5004, "dec_number"
    push $P5004, "escale"
    push $P5004, "quote_escape"
    push $P5004, "quote_escape:sym<backslash>"
    push $P5004, "quote_escape:sym<stopper>"
    push $P5004, "quote_escape:sym<bs>"
    push $P5004, "quote_escape:sym<nl>"
    push $P5004, "quote_escape:sym<cr>"
    push $P5004, "quote_escape:sym<tab>"
    push $P5004, "quote_escape:sym<ff>"
    push $P5004, "quote_escape:sym<esc>"
    push $P5004, "quote_escape:sym<hex>"
    push $P5004, "quote_escape:sym<oct>"
    push $P5004, "quote_escape:sym<chr>"
    push $P5004, "quote_escape:sym<0>"
    push $P5004, "quote_escape:sym<misc>"
    push $P5004, "charname"
    push $P5004, "charnames"
    push $P5004, "charspec"
    push $P5004, "O"
    push $P5004, "panic"
    push $P5004, "peek_delimiters"
    push $P5004, "quote_EXPR"
    push $P5004, "quotemod_check"
    push $P5004, "starter"
    push $P5004, "stopper"
    push $P5004, "split_words"
    push $P5004, "EXPR"
    push $P5004, "EXPR_reduce"
    push $P5004, "EXPR_nonassoc"
    push $P5004, "ternary"
    push $P5004, "MARKER"
    push $P5004, "MARKED"
    push $P5004, "LANG"
    push $P5004, "obs"
    push $P5004, "throw_unrecognized_metachar"
    push $P5004, "throw_null_pattern"
    push $P5004, "normspace"
    push $P5004, "identifier"
    push $P5004, "arg"
    push $P5004, "arglist"
    push $P5004, "TOP"
    push $P5004, "nibbler"
    push $P5004, "infixstopper"
    push $P5004, "rxstopper"
    push $P5004, "termaltseq"
    push $P5004, "termconjseq"
    push $P5004, "termalt"
    push $P5004, "termconj"
    push $P5004, "quantified_atom"
    push $P5004, "separator"
    push $P5004, "atom"
    push $P5004, "quantifier"
    push $P5004, "quantifier:sym<*>"
    push $P5004, "quantifier:sym<+>"
    push $P5004, "quantifier:sym<?>"
    push $P5004, "quantifier:sym<{N,M}>"
    push $P5004, "quantifier:sym<**>"
    push $P5004, "backmod"
    push $P5004, "metachar"
    push $P5004, "metachar:sym<ws>"
    push $P5004, "metachar:sym<[ ]>"
    push $P5004, "metachar:sym<( )>"
    push $P5004, "metachar:sym<'>"
    push $P5004, "metachar:sym<\">"
    push $P5004, "metachar:sym<.>"
    push $P5004, "metachar:sym<^>"
    push $P5004, "metachar:sym<^^>"
    push $P5004, "metachar:sym<$>"
    push $P5004, "metachar:sym<$$>"
    push $P5004, "metachar:sym<:::>"
    push $P5004, "metachar:sym<::>"
    push $P5004, "metachar:sym<lwb>"
    push $P5004, "metachar:sym<rwb>"
    push $P5004, "metachar:sym<from>"
    push $P5004, "metachar:sym<to>"
    push $P5004, "metachar:sym<bs>"
    push $P5004, "metachar:sym<mod>"
    push $P5004, "metachar:sym<quantifier>"
    push $P5004, "metachar:sym<~>"
    push $P5004, "metachar:sym<{*}>"
    push $P5004, "metachar:sym<assert>"
    push $P5004, "sigil"
    push $P5004, "metachar:sym<var>"
    push $P5004, "backslash"
    push $P5004, "backslash:sym<s>"
    push $P5004, "backslash:sym<b>"
    push $P5004, "backslash:sym<e>"
    push $P5004, "backslash:sym<f>"
    push $P5004, "backslash:sym<h>"
    push $P5004, "backslash:sym<r>"
    push $P5004, "backslash:sym<t>"
    push $P5004, "backslash:sym<v>"
    push $P5004, "backslash:sym<o>"
    push $P5004, "backslash:sym<x>"
    push $P5004, "backslash:sym<c>"
    push $P5004, "backslash:sym<A>"
    push $P5004, "backslash:sym<z>"
    push $P5004, "backslash:sym<Z>"
    push $P5004, "backslash:sym<Q>"
    push $P5004, "backslash:sym<unrec>"
    push $P5004, "backslash:sym<unsp>"
    push $P5004, "backslash:sym<misc>"
    push $P5004, "cclass_backslash"
    push $P5004, "cclass_backslash:sym<s>"
    push $P5004, "cclass_backslash:sym<b>"
    push $P5004, "cclass_backslash:sym<e>"
    push $P5004, "cclass_backslash:sym<f>"
    push $P5004, "cclass_backslash:sym<h>"
    push $P5004, "cclass_backslash:sym<r>"
    push $P5004, "cclass_backslash:sym<t>"
    push $P5004, "cclass_backslash:sym<v>"
    push $P5004, "cclass_backslash:sym<o>"
    push $P5004, "cclass_backslash:sym<x>"
    push $P5004, "cclass_backslash:sym<c>"
    push $P5004, "cclass_backslash:sym<any>"
    push $P5004, "assertion"
    push $P5004, "assertion:sym<?>"
    push $P5004, "assertion:sym<!>"
    push $P5004, "assertion:sym<|>"
    push $P5004, "assertion:sym<method>"
    push $P5004, "assertion:sym<name>"
    push $P5004, "assertion:sym<[>"
    push $P5004, "cclass_elem"
    push $P5004, "mod_internal"
    push $P5004, "mod_ident"
    push $P5004, "mod_ident:sym<ignorecase>"
    push $P5004, "mod_ident:sym<ratchet>"
    push $P5004, "mod_ident:sym<sigspace>"
    push $P5004, "mod_ident:sym<dba>"
    push $P5004, "mod_ident:sym<oops>"
    push $P5004, "$!shared"
    push $P5004, "$!from"
    push $P5004, "$!pos"
    push $P5004, "$!match"
    push $P5004, "$!name"
    push $P5004, "$!bstack"
    push $P5004, "$!cstack"
    push $P5004, "$!regexsub"
    push $P5004, "$!restart"
    push $P5004, "string_to_int"
    push $P5004, "ints_to_string"
    push $P5004, "CTXSAVE"
    push $P5004, "SET_BLOCK_OUTER_CTX"
    push $P5004, "qbuildsub"
    push $P5004, "alt_nfas"
    push $P5004, "subrule_alias"
    push $P5004, "flip_ast"
    push $P5004, "create_regex_code_object"
    push $P5004, "store_regex_caps"
    push $P5004, "store_regex_nfa"
    push $P5004, "store_regex_alt_nfa"
    push $P5004, "backend"
    push $P5004, "language"
    push $P5004, "compiler"
    push $P5004, "config"
    push $P5004, "autoprint"
    push $P5004, "interactive"
    push $P5004, "interactive_result"
    push $P5004, "interactive_exception"
    push $P5004, "eval"
    push $P5004, "ctxsave"
    push $P5004, "stages"
    push $P5004, "parsegrammar"
    push $P5004, "parseactions"
    push $P5004, "interactive_banner"
    push $P5004, "interactive_prompt"
    push $P5004, "compiler_progname"
    push $P5004, "commandline_options"
    push $P5004, "command_line"
    push $P5004, "command_eval"
    push $P5004, "process_args"
    push $P5004, "evalfiles"
    push $P5004, "exists_stage"
    push $P5004, "compile"
    push $P5004, "start"
    push $P5004, "ast"
    push $P5004, "dumper"
    push $P5004, "usage"
    push $P5004, "version"
    push $P5004, "show-config"
    push $P5004, "verbose-config"
    push $P5004, "nqpevent"
    push $P5004, "removestage"
    push $P5004, "addstage"
    push $P5004, "parse_name"
    push $P5004, "lineof"
    push $P5004, "user-progname"
    push $P5004, "cli-options"
    push $P5004, "cli-arguments"
    push $P5004, "recursion_limit"
    push $P5004, "default_backend"
    push $P5004, "@!stages"
    push $P5004, "$!parsegrammar"
    push $P5004, "$!parseactions"
    push $P5004, "@!cmdoptions"
    push $P5004, "$!compiler_progname"
    push $P5004, "$!language"
    push $P5004, "%!config"
    push $P5004, "$!user_progname"
    push $P5004, "@!cli-arguments"
    push $P5004, "%!cli-options"
    push $P5004, "$!backend"
    push $P5004, ""
    push $P5004, "alt_nfa__1_1381281822.25451"
    push $P5004, "-'"
    push $P5004, "val"
    push $P5004, "'"
    push $P5004, "\""
    push $P5004, "alt_nfa__2_1381281822.28975"
    push $P5004, "0"
    push $P5004, "alt_nfa__3_1381281822.39734"
    push $P5004, ")}]"
    push $P5004, ">"
    push $P5004, "alt_nfa__4_1381281822.41961"
    push $P5004, "noun"
    push $P5004, "&|~"
    push $P5004, "alt_nfa__5_1381281822.5158"
    push $P5004, "alt_nfa__6_1381281822.55605"
    push $P5004, "septype"
    push $P5004, "alt_nfa__7_1381281822.58423"
    push $P5004, "sym"
    push $P5004, "1"
    push $P5004, "2"
    push $P5004, "min"
    push $P5004, "max"
    push $P5004, "{"
    push $P5004, "alt_nfa__8_1381281822.79723"
    push $P5004, "alt_nfa__9_1381281822.79778"
    push $P5004, "alt_nfa__10_1381281822.81257"
    push $P5004, "alt_nfa__11_1381281822.89775"
    push $P5004, "alt_nfa__12_1381281822.90609"
    push $P5004, "\\"
    push $P5004, "GOAL"
    push $P5004, "key"
    push $P5004, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5004, "$@%&"
    push $P5004, "name"
    push $P5004, "alt_nfa__13_1381281823.00833"
    push $P5004, "dDnNsSwW"
    push $P5004, "bB"
    push $P5004, "eE"
    push $P5004, "fF"
    push $P5004, "hH"
    push $P5004, "rR"
    push $P5004, "tT"
    push $P5004, "vV"
    push $P5004, "oO"
    push $P5004, "alt_nfa__14_1381281823.08074"
    push $P5004, "xX"
    push $P5004, "alt_nfa__15_1381281823.09518"
    push $P5004, "cC"
    push $P5004, "alt_nfa__16_1381281823.16119"
    push $P5004, "alt_nfa__17_1381281823.24025"
    push $P5004, "alt_nfa__18_1381281823.25533"
    push $P5004, "alt_nfa__19_1381281823.28521"
    push $P5004, "alt_nfa__20_1381281823.29981"
    push $P5004, "longname"
    push $P5004, "alt_nfa__21_1381281823.43465"
    push $P5004, "alt_nfa__22_1381281823.44468"
    push $P5004, "sign"
    push $P5004, "invert"
    push $P5004, "uniprop"
    push $P5004, "alt_nfa__23_1381281823.52192"
    push $P5004, "alt_nfa__24_1381281823.52261"
    push $P5004, "alt_nfa__25_1381281823.52293"
    push $P5004, "]\\"
    push $P5004, "n"
    push $P5004, "alt_nfa__27_1381281823.55989"
    push $P5004, "alt_nfa__28_1381281823.5604"
    push $P5004, "alt_nfa__26_1381281823.53209"
    push $P5004, "__6MODEL_CORE__"
    push $P5004, "GLOBALish"
    push $P5004, "EXPORT"
    push $P5004, "82C8134F4F1F98F3955D960634CCE916B8CF0355-1381281775.85002"
    push $P5004, "src/stage2/gen/nqp-mo.nqp"
    push $P5004, "QRegex::P6Regex::World"
    push $P5004, "QRegex::P6Regex::Grammar"
    push $P5004, "alt_nfa__1_1381281792.20591"
    push $P5004, "alt_nfa__2_1381281792.24744"
    push $P5004, "alt_nfa__3_1381281792.33988"
    push $P5004, "alt_nfa__4_1381281792.34058"
    push $P5004, "alt_nfa__5_1381281792.36691"
    push $P5004, "alt_nfa__6_1381281792.46378"
    push $P5004, "alt_nfa__7_1381281792.48076"
    push $P5004, "alt_nfa__8_1381281792.62911"
    push $P5004, "alt_nfa__9_1381281792.67602"
    push $P5004, "shared"
    push $P5004, "match"
    push $P5004, "bstack"
    push $P5004, "cstack"
    push $P5004, "regexsub"
    push $P5004, "restart"
    push $P5004, "QRegex::P6Regex::Actions"
    push $P5004, "QRegex::P6Regex::Compiler"
    push $P5004, "CompileTimeValue"
    push $P5004, "8D7C40D4B41C0FB97C97F9FA59E4F60A345D73C3-1381281783.14924"
    push $P5004, "src/stage2/QASTNode.nqp"
    push $P5004, "SpecialArg"
    push $P5004, "Node"
    push $P5004, "Regex"
    push $P5004, "IVal"
    push $P5004, "NVal"
    push $P5004, "SVal"
    push $P5004, "BVal"
    push $P5004, "WVal"
    push $P5004, "Want"
    push $P5004, "Var"
    push $P5004, "VarWithFallback"
    push $P5004, "Op"
    push $P5004, "VM"
    push $P5004, "Stmts"
    push $P5004, "Stmt"
    push $P5004, "Block"
    push $P5004, "Unquote"
    push $P5004, "CompUnit"
    push $P5004, "InlinePlaceholder"
    push $P5004, "Operations"
    push $P5004, "96F80A66F2271DAB0F3CD1D5EC903FD7ED58994D-1381281801.12832"
    push $P5004, "src/stage2/QAST.nqp"
    push $P5004, "Compiler"
    push $P5004, "NFA"
    push $P5004, "P6Regex"
    push $P5004, "Grammar"
    push $P5004, "Actions"
    push $P5004, "Backend"
    push $P5004, "CommandLine"
    push $P5004, "World"
    push $P5004, "CallResult"
    push $P5004, "Sub"
    push $P5004, "Ops"
    push $P5004, "Label"
    push $P5004, "01234567"
    push $P5004, "0123456789abcdefABCDEF"
    push $P5004, "?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    push $P5004, "01"
    push $P5004, "Ee"
    push $P5004, "+-"
    .const 'Sub' $P5005 = 'cuid_267_1381281822.05887' 
    capture_lex $P5005
    $P5006 = $P5005()
    nqp_deserialize_sc "", cur_sc, $P5004, $P5006, conflicts
    unless conflicts goto if1188_end2946 
    die "Repossession conflicts occurred during deserialization"
  if1188_end2946:
    .const 'Sub' $P5001 = "cuid_1_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 4
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_2_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 6
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_3_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 7
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_4_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 8
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_5_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 9
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_6_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 10
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_7_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 11
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_8_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 12
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_9_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 13
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_10_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 14
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_11_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 15
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_12_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 16
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_13_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 17
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_14_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 18
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_15_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 19
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_16_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 20
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_17_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 21
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_18_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 22
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_19_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 23
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_20_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 24
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_21_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 25
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_22_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 26
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_23_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 27
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_24_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 28
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_25_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 29
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_26_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 30
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_27_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 31
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_28_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 32
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_29_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 33
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_30_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 34
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_31_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 35
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_32_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 36
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_33_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 37
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_34_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 38
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_35_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 39
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_36_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 40
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_37_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 41
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_38_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 42
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_39_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 43
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_40_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 44
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_41_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 45
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_42_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 46
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_43_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 47
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_44_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 48
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_45_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 49
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_46_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 50
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_47_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 51
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_48_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 52
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_49_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 53
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_50_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 54
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_51_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 55
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_52_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 56
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_53_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 57
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_54_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 58
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_55_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 59
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_56_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 60
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_57_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 61
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_58_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 62
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_59_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 63
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_60_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 64
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_61_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 65
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_62_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 66
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_63_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 67
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_64_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 68
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_65_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 69
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_66_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 70
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_67_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 71
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_68_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 72
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_69_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 73
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_70_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 74
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_71_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 75
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_72_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 76
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_73_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 77
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_74_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 78
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_75_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 79
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_76_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 80
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_77_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 81
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_78_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 82
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_79_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 83
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_80_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 84
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_81_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 85
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_82_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 86
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_83_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 87
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_84_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 88
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_85_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 89
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_86_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 90
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_87_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 91
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_88_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 92
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_89_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 93
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_90_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 94
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_91_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 95
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_92_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 96
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_93_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 97
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_94_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 98
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_95_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 99
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_96_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 100
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_97_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 101
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_98_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 102
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_99_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 103
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_100_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 104
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_101_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 105
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_102_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 106
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_103_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 107
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_104_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 108
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_105_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 109
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_106_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 110
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_107_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 111
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_108_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 112
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_109_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 113
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_110_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 114
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_111_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 115
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_112_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 116
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_113_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 117
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_114_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 118
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_115_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 119
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_116_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 120
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_117_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 121
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_118_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 122
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_119_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 123
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_120_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 124
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_121_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 125
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_122_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 126
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_123_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 127
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_124_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 128
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_125_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 130
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_126_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 131
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_127_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 132
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_128_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 133
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_129_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 134
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_130_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 135
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_131_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 136
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_132_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 137
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_133_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 138
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_134_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 139
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_135_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 140
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_136_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 141
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_137_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 142
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_138_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 143
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_139_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 144
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_140_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 145
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_141_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 146
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_142_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 147
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_143_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 148
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_144_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 149
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_145_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 150
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_146_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 151
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_147_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 152
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_148_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 153
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_149_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 154
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_150_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 155
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_151_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 156
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_152_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 157
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_153_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 158
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_154_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 159
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_155_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 160
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_156_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 161
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_157_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 162
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_158_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 163
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_159_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 164
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_160_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 165
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_161_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 166
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_162_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 167
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_163_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 168
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_164_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 169
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_165_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 170
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_166_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 171
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_167_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 172
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_168_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 173
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_169_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 174
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_170_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 175
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_171_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 176
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_172_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 177
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_173_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 178
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_174_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 179
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_175_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 180
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_176_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 181
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_177_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 182
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_178_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 183
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_179_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 184
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_180_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 185
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_181_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 186
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_182_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 187
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_183_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 188
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_184_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 189
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_185_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 190
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_186_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 191
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_187_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 192
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_188_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 193
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_189_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 194
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_190_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 195
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_191_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 196
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_192_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 197
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_193_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 198
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_194_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 199
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_195_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 200
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_196_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 201
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_197_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 202
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_198_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 203
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_199_1381281822.05887" 
    nqp_get_sc_object $P5002, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 204
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_200_1381281822.05887"
    new $P5002, 'ResizableStringArray'
    push $P5002, "GLOBALish"
    push $P5002, "$?PACKAGE"
    push $P5002, "EXPORT"
    push $P5002, "ParseShared"
    push $P5002, "NQPCursorRole"
    new $P5003, 'ResizablePMCArray'
    nqp_get_sc_object $P5004, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 0
    push $P5003, $P5004
    nqp_get_sc_object $P5005, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 0
    push $P5003, $P5005
    nqp_get_sc_object $P5006, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 1
    push $P5003, $P5006
    nqp_get_sc_object $P5007, "E7AD4B42F22CE3E5A839229F2FDCC4FBE891C4E3-1381281785.75165", 32
    push $P5003, $P5007
    nqp_get_sc_object $P5008, "E7AD4B42F22CE3E5A839229F2FDCC4FBE891C4E3-1381281785.75165", 35
    push $P5003, $P5008
    new $P5009, 'ResizableIntegerArray'
    push $P5009, 0
    push $P5009, 0
    push $P5009, 0
    push $P5009, 0
    push $P5009, 0
    $P5001."setup_static_lexpad"($P5002, $P5003, $P5009)
    .const "LexInfo" $P5001 = "cuid_202_1381281822.05887"
    new $P5002, 'ResizableStringArray'
    push $P5002, "$?PACKAGE"
    push $P5002, "$?CLASS"
    new $P5003, 'ResizablePMCArray'
    nqp_get_sc_object $P5004, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 3
    push $P5003, $P5004
    nqp_get_sc_object $P5005, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 3
    push $P5003, $P5005
    new $P5006, 'ResizableIntegerArray'
    push $P5006, 0
    push $P5006, 0
    $P5001."setup_static_lexpad"($P5002, $P5003, $P5006)
    .const "LexInfo" $P5001 = "cuid_204_1381281822.05887"
    new $P5002, 'ResizableStringArray'
    push $P5002, "$?PACKAGE"
    push $P5002, "$?CLASS"
    new $P5003, 'ResizablePMCArray'
    nqp_get_sc_object $P5004, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 5
    push $P5003, $P5004
    nqp_get_sc_object $P5005, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 5
    push $P5003, $P5005
    new $P5006, 'ResizableIntegerArray'
    push $P5006, 0
    push $P5006, 0
    $P5001."setup_static_lexpad"($P5002, $P5003, $P5006)
    .const "LexInfo" $P5001 = "cuid_222_1381281822.05887"
    new $P5002, 'ResizableStringArray'
    push $P5002, "$?PACKAGE"
    push $P5002, "$?CLASS"
    new $P5003, 'ResizablePMCArray'
    nqp_get_sc_object $P5004, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 129
    push $P5003, $P5004
    nqp_get_sc_object $P5005, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 129
    push $P5003, $P5005
    new $P5006, 'ResizableIntegerArray'
    push $P5006, 0
    push $P5006, 0
    $P5001."setup_static_lexpad"($P5002, $P5003, $P5006)
    .const "LexInfo" $P5001 = "cuid_266_1381281822.05887"
    new $P5002, 'ResizableStringArray'
    push $P5002, "$?PACKAGE"
    push $P5002, "$?CLASS"
    new $P5003, 'ResizablePMCArray'
    nqp_get_sc_object $P5004, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 205
    push $P5003, $P5004
    nqp_get_sc_object $P5005, "5D8A0D0FBDA2B081F5DDEAF8492A748F124D5C36-1381281822.09102", 205
    push $P5003, $P5005
    new $P5006, 'ResizableIntegerArray'
    push $P5006, 0
    push $P5006, 0
    $P5007 = $P5001."setup_static_lexpad"($P5002, $P5003, $P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_267_1381281822.05887") :anon :lex :outer("cuid_268_1381281822.05887")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    new $P5001, 'ResizablePMCArray'
    .const 'Sub' $P5002 = "cuid_1_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_2_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_3_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_4_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_5_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_6_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_7_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_8_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_9_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_10_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_11_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_12_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_13_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_14_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_15_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_16_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_17_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_18_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_19_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_20_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_21_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_22_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_23_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_24_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_25_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_26_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_27_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_28_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_29_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_30_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_31_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_32_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_33_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_34_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_35_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_36_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_37_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_38_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_39_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_40_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_41_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_42_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_43_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_44_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_45_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_46_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_47_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_48_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_49_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_50_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_51_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_52_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_53_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_54_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_55_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_56_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_57_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_58_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_59_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_60_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_61_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_62_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_63_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_64_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_65_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_66_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_67_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_68_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_69_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_70_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_71_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_72_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_73_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_74_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_75_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_76_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_77_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_78_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_79_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_80_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_81_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_82_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_83_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_84_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_85_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_86_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_87_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_88_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_89_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_90_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_91_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_92_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_93_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_94_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_95_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_96_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_97_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_98_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_99_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_100_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_101_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_102_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_103_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_104_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_105_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_106_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_107_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_108_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_109_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_110_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_111_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_112_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_113_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_114_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_115_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_116_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_117_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_118_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_119_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_120_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_121_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_122_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_123_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_124_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_125_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_126_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_127_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_128_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_129_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_130_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_131_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_132_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_133_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_134_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_135_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_136_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_137_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_138_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_139_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_140_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_141_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_142_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_143_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_144_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_145_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_146_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_147_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_148_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_149_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_150_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_151_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_152_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_153_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_154_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_155_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_156_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_157_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_158_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_159_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_160_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_161_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_162_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_163_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_164_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_165_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_166_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_167_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_168_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_169_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_170_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_171_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_172_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_173_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_174_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_175_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_176_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_177_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_178_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_179_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_180_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_181_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_182_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_183_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_184_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_185_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_186_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_187_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_188_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_189_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_190_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_191_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_192_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_193_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_194_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_195_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_196_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_197_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_198_1381281822.05887" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_199_1381281822.05887" 
    push $P5001, $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_269_1381281822.05887") :load
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .const 'Sub' $P5001 = "cuid_200_1381281822.05887" 
    $P5002 = $P5001()
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_270_1381281822.05887") :main
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc ARGS :slurpy 
    .const 'Sub' $P5001 = "cuid_200_1381281822.05887" 
    $P5002 = $P5001(ARGS :flat)
    .return ($P5002) 
.end