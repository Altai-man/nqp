.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'
.include 'libpaths.pasm'
.include 'nqp_const.pir'
.loadlib "nqp_group"
.loadlib "nqp_ops"
.loadlib "nqp_bigint_ops"
.loadlib "trans_ops"
.loadlib "io_ops"
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_177_1367388594.4399") :anon :lex
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc _lex_param_0 :slurpy 
    .const 'Sub' $P5021 = 'cuid_176_1367388594.4399' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_179_1367388594.4399' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_180_1367388594.4399' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_196_1367388594.4399' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_236_1367388594.4399' 
    capture_lex $P5021 
    .lex "GLOBALish", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "EXPORT", $P103 
    .lex "ParseShared", $P104 
    .lex "NQPCursorRole", $P105 
    .lex "$p6regex", $P106 
    .lex "&MAIN", $P107 
    .lex "@ARGS", _lex_param_0 
    .local pmc ctxsave 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P106, $P5001
    .const 'Sub' $P5002 = 'cuid_176_1367388594.4399' 
    capture_lex $P5002
    set $P107, $P5002
    find_dynamic_lex $P5003, "$*CTXSAVE"
    set ctxsave, $P5003
    isnull $I5001, ctxsave
    if $I5001 goto unless10_end11 
    can $I5002, ctxsave, "ctxsave"
    box $P5006, $I5002
    set $P5005, $P5006
    unless $I5002 goto if11_end13 
    $P5004 = ctxsave."ctxsave"()
    set $P5005, $P5004
  if11_end13:
  unless10_end11:
.annotate 'line', 1
    .const 'Sub' $P5007 = 'cuid_179_1367388594.4399' 
    capture_lex $P5007
    $P5008 = $P5007()
    .const 'Sub' $P5009 = 'cuid_180_1367388594.4399' 
    capture_lex $P5009
    $P5010 = $P5009()
    .const 'Sub' $P5011 = 'cuid_196_1367388594.4399' 
    capture_lex $P5011
    $P5012 = $P5011()
    .const 'Sub' $P5013 = 'cuid_236_1367388594.4399' 
    capture_lex $P5013
    $P5014 = $P5013()
.annotate 'line', 1043
    nqp_get_sc_object $P5015, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 181
    $P5016 = $P5015."new"()
    set $P106, $P5016
.annotate 'line', 1044
    $P106."language"("QRegex::P6Regex")
.annotate 'line', 1045
    nqp_get_sc_object $P5017, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 5
    $P106."parsegrammar"($P5017)
.annotate 'line', 1046
    nqp_get_sc_object $P5018, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 117
    $P106."parseactions"($P5018)
    unless _lex_param_0 goto if1090_end2692 
    .const 'Sub' $P5019 = "cuid_176_1367388594.4399" 
    $P5020 = $P5019(_lex_param_0 :flat)
  if1090_end2692:
    .return () 
.end
.HLL "nqp"
.namespace []
.sub "MAIN" :subid("cuid_176_1367388594.4399") :anon :lex :outer("cuid_177_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1048
    .param pmc _lex_param_0 
    .lex "@ARGS", _lex_param_0 
.annotate 'line', 1049
    find_lex $P5001, "$p6regex"
    $P5002 = $P5001."command_line"(_lex_param_0, "utf8" :named("encoding"), "ucs4" :named("transcode"))
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_179_1367388594.4399") :anon :lex :outer("cuid_177_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 9
    .const 'Sub' $P5002 = 'cuid_1_1367388594.4399' 
    capture_lex $P5002 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_1_1367388594.4399' 
    capture_lex $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "create_code" :subid("cuid_1_1367388594.4399") :anon :lex :outer("cuid_179_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 10
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .const 'Sub' $P5034 = 'cuid_178_1367388594.4399' 
    capture_lex $P5034 
    .lex "$dummy", $P101 
    .lex "$code_obj", $P102 
    .lex "$slot", $P103 
    .lex "$fixups", $P104 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    .lex "$name", _lex_param_2 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P103, $P5003
    nqp_get_sc_object $P5004, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P104, $P5004
    .const 'Sub' $P5007 = 'cuid_178_1367388594.4399' 
    capture_lex $P5007
    newclosure $P5006, $P5007
    nqp_fresh_stub $P5005, $P5006
    set $P101, $P5005
    set $S5001, _lex_param_2
    assign $P101, $S5001
    setprop $P101, 'STATIC_CODE_REF', $P101
.annotate 'line', 17
    nqp_decontainerize $P5008, _lex_param_0
    $P5008."add_root_code_ref"($P101, _lex_param_1)
    nqp_get_sc_object $P5010, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 9
    repr_instance_of $P5009, $P5010
    set $P102, $P5009
    nqp_get_sc_object $P5011, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 9
    setattribute $P102, $P5011, "$!do", $P101
.annotate 'line', 22
    nqp_decontainerize $P5012, _lex_param_0
    $P5013 = $P5012."add_object"($P102)
    set $P103, $P5013
.annotate 'line', 25
    nqp_get_sc_object $P5014, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 98
    $P5015 = $P5014."new"()
    set $P104, $P5015
.annotate 'line', 26
    nqp_get_sc_object $P5016, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 82
.annotate 'line', 28
    nqp_get_sc_object $P5017, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 61
    $P5018 = $P5017."new"($P102 :named("value"))
.annotate 'line', 29
    nqp_get_sc_object $P5019, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 61
    nqp_get_sc_object $P5020, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 9
    $P5021 = $P5019."new"($P5020 :named("value"))
.annotate 'line', 30
    nqp_get_sc_object $P5022, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 52
    $P5023 = $P5022."new"("$!do" :named("value"))
.annotate 'line', 31
    nqp_get_sc_object $P5024, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 57
    $P5025 = $P5024."new"(_lex_param_1 :named("value"))
    $P5026 = $P5016."new"($P5018, $P5021, $P5023, $P5025, "bindattr" :named("op"))
    $P104."push"($P5026)
.annotate 'line', 33
    nqp_get_sc_object $P5027, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 82
.annotate 'line', 35
    nqp_get_sc_object $P5028, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 57
    $P5029 = $P5028."new"(_lex_param_1 :named("value"))
.annotate 'line', 36
    nqp_get_sc_object $P5030, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 61
    $P5031 = $P5030."new"($P102 :named("value"))
    $P5032 = $P5027."new"($P5029, $P5031, "setcodeobj" :named("op"))
    $P104."push"($P5032)
.annotate 'line', 38
    nqp_decontainerize $P5033, _lex_param_0
    $P5033."add_fixup_task"($P104 :named("fixup_past"))
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_178_1367388594.4399") :anon :lex :outer("cuid_1_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 12

    box $P5001, "Uncompiled code executed"
    die $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_180_1367388594.4399") :anon :lex :outer("cuid_177_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 44
    .const 'Sub' $P5088 = 'cuid_2_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_3_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_4_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_5_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_6_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_8_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_9_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_10_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_11_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_12_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_14_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_18_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_19_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_20_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_21_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_22_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_23_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_26_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_28_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_29_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_31_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_32_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_33_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_34_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_35_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_39_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_40_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_42_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_43_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_44_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_45_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_46_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_47_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_48_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_49_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_50_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_51_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_52_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_53_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_54_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_55_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_56_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_57_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_58_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_59_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_60_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_61_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_62_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_63_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_64_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_65_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_66_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_67_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_68_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_69_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_70_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_71_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_72_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_73_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_74_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_75_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_76_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_77_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_78_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_79_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_80_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_81_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_82_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_83_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_85_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_86_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_87_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_89_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_91_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_92_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_93_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_95_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_97_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_104_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_106_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_107_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_108_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_109_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_110_1367388594.4399' 
    capture_lex $P5088 
    .const 'Sub' $P5088 = 'cuid_111_1367388594.4399' 
    capture_lex $P5088 
    .lex "$cur_handle", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "$?CLASS", $P103 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_2_1367388594.4399' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_3_1367388594.4399' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_4_1367388594.4399' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_5_1367388594.4399' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_6_1367388594.4399' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_8_1367388594.4399' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_9_1367388594.4399' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_10_1367388594.4399' 
    capture_lex $P5009
    box $P5010, 0
    set $P101, $P5010
    .const 'Sub' $P5011 = 'cuid_11_1367388594.4399' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_12_1367388594.4399' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_14_1367388594.4399' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_18_1367388594.4399' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_19_1367388594.4399' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_20_1367388594.4399' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_21_1367388594.4399' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_22_1367388594.4399' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_23_1367388594.4399' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_26_1367388594.4399' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_28_1367388594.4399' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_29_1367388594.4399' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_31_1367388594.4399' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_32_1367388594.4399' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_33_1367388594.4399' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_34_1367388594.4399' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_35_1367388594.4399' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_39_1367388594.4399' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_40_1367388594.4399' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_42_1367388594.4399' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_43_1367388594.4399' 
    capture_lex $P5031
    .const 'Sub' $P5032 = 'cuid_44_1367388594.4399' 
    capture_lex $P5032
    .const 'Sub' $P5033 = 'cuid_45_1367388594.4399' 
    capture_lex $P5033
    .const 'Sub' $P5034 = 'cuid_46_1367388594.4399' 
    capture_lex $P5034
    .const 'Sub' $P5035 = 'cuid_47_1367388594.4399' 
    capture_lex $P5035
    .const 'Sub' $P5036 = 'cuid_48_1367388594.4399' 
    capture_lex $P5036
    .const 'Sub' $P5037 = 'cuid_49_1367388594.4399' 
    capture_lex $P5037
    .const 'Sub' $P5038 = 'cuid_50_1367388594.4399' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_51_1367388594.4399' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_52_1367388594.4399' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_53_1367388594.4399' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_54_1367388594.4399' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_55_1367388594.4399' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_56_1367388594.4399' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_57_1367388594.4399' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_58_1367388594.4399' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_59_1367388594.4399' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_60_1367388594.4399' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_61_1367388594.4399' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_62_1367388594.4399' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_63_1367388594.4399' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_64_1367388594.4399' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_65_1367388594.4399' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_66_1367388594.4399' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_67_1367388594.4399' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_68_1367388594.4399' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_69_1367388594.4399' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_70_1367388594.4399' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_71_1367388594.4399' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_72_1367388594.4399' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_73_1367388594.4399' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_74_1367388594.4399' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_75_1367388594.4399' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_76_1367388594.4399' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_77_1367388594.4399' 
    capture_lex $P5065
    .const 'Sub' $P5066 = 'cuid_78_1367388594.4399' 
    capture_lex $P5066
    .const 'Sub' $P5067 = 'cuid_79_1367388594.4399' 
    capture_lex $P5067
    .const 'Sub' $P5068 = 'cuid_80_1367388594.4399' 
    capture_lex $P5068
    .const 'Sub' $P5069 = 'cuid_81_1367388594.4399' 
    capture_lex $P5069
    .const 'Sub' $P5070 = 'cuid_82_1367388594.4399' 
    capture_lex $P5070
    .const 'Sub' $P5071 = 'cuid_83_1367388594.4399' 
    capture_lex $P5071
    .const 'Sub' $P5072 = 'cuid_85_1367388594.4399' 
    capture_lex $P5072
    .const 'Sub' $P5073 = 'cuid_86_1367388594.4399' 
    capture_lex $P5073
    .const 'Sub' $P5074 = 'cuid_87_1367388594.4399' 
    capture_lex $P5074
    .const 'Sub' $P5075 = 'cuid_89_1367388594.4399' 
    capture_lex $P5075
    .const 'Sub' $P5076 = 'cuid_91_1367388594.4399' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_92_1367388594.4399' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_93_1367388594.4399' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_95_1367388594.4399' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_97_1367388594.4399' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_104_1367388594.4399' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_106_1367388594.4399' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_107_1367388594.4399' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_108_1367388594.4399' 
    capture_lex $P5084
    .const 'Sub' $P5085 = 'cuid_109_1367388594.4399' 
    capture_lex $P5085
    .const 'Sub' $P5086 = 'cuid_110_1367388594.4399' 
    capture_lex $P5086
    .const 'Sub' $P5087 = 'cuid_111_1367388594.4399' 
    capture_lex $P5087
    .return ($P5087) 
.end
.HLL "nqp"
.namespace []
.sub "obs" :subid("cuid_2_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 46
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 :optional 
    .param int haz_param_1 :opt_flag 
    .lex "self", _lex_param_0 
    .lex "$old", _lex_param_1 
    .lex "$new", _lex_param_2 
    .lex "$when", _lex_param_3 
    if haz_param_1, default14
    box $P5003, " in Perl 6"
    set _lex_param_3, $P5003
  default14:
.annotate 'line', 47
    nqp_decontainerize $P5001, _lex_param_0
    set $S5006, _lex_param_1
    concat $S5005, "Unsupported use of ", $S5006
    concat $S5004, $S5005, ";"
    set $S5007, _lex_param_3
    concat $S5003, $S5004, $S5007
    concat $S5002, $S5003, " please use "
    set $S5008, _lex_param_2
    concat $S5001, $S5002, $S5008
    $P5002 = $P5001."panic"($S5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "throw_unrecognized_metachar" :subid("cuid_3_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 54
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$char", _lex_param_1 
.annotate 'line', 55
    nqp_decontainerize $P5001, _lex_param_0
    set $S5003, _lex_param_1
    concat $S5002, "Unrecognized regex metacharacter ", $S5003
    concat $S5001, $S5002, " (must be quoted to match literally)"
    $P5002 = $P5001."panic"($S5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "throw_null_pattern" :subid("cuid_4_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 58
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 59
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."panic"("Null regex not allowed")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "ws" :subid("cuid_5_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 62
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx12_start
    .local string rx12_tgt
    .local int rx12_pos
    .local int rx12_off
    .local int rx12_eos
    .local int rx12_rep
    .local pmc rx12_cur
    .local pmc rx12_curclass
    .local pmc rx12_bstack
    .local pmc rx12_cstack
    rx12_start = self."!cursor_start_all"()
    set rx12_cur, rx12_start[0]
    set rx12_tgt, rx12_start[1]
    set rx12_pos, rx12_start[2]
    set rx12_curclass, rx12_start[3]
    set rx12_bstack, rx12_start[4]
    set $I19, rx12_start[5]
    store_lex unicode:"$\x{a2}", rx12_cur
    length rx12_eos, rx12_tgt
    eq $I19, 1, rx12_restart17
    gt rx12_pos, rx12_eos, rx12_fail18
    repr_get_attr_int $I11, self, rx12_curclass, "$!from"
    ne $I11, -1, rxscan13_done24
    goto rxscan13_scan23
  rxscan13_loop22:
    inc rx12_pos
    gt rx12_pos, rx12_eos, rx12_fail18
    repr_bind_attr_int rx12_cur, rx12_curclass, "$!from", rx12_pos
  rxscan13_scan23:
    nqp_rxmark rx12_bstack, rxscan13_loop22, rx12_pos, 0
  rxscan13_done24:
    nqp_rxmark rx12_bstack, rxquantr14_done26, rx12_pos, 0
  rxquantr14_loop25:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt15_028
    nqp_push_label $P11, alt15_131
    nqp_rxmark rx12_bstack, alt15_end27, -1, 0
    rx12_cur."!alt"(rx12_pos, "alt_nfa__1_1367388594.66098", $P11)
    goto rx12_fail18
  alt15_028:
    nqp_rxmark rx12_bstack, rxquantr16_done30, -1, 0
  rxquantr16_loop29:
    ge rx12_pos, rx12_eos, rx12_fail18
    is_cclass $I11, .CCLASS_WHITESPACE, rx12_tgt, rx12_pos
    unless $I11, rx12_fail18
    add rx12_pos, 1
    nqp_rxpeek $I19, rx12_bstack, rxquantr16_done30
    inc $I19
    inc $I19
    set rx12_rep, rx12_bstack[$I19]
    nqp_rxcommit rx12_bstack, rxquantr16_done30
    inc rx12_rep
    nqp_rxmark rx12_bstack, rxquantr16_done30, rx12_pos, rx12_rep
    goto rxquantr16_loop29
  rxquantr16_done30:
    goto alt15_end27
  alt15_131:
    add $I11, rx12_pos, 1
    gt $I11, rx12_eos, rx12_fail18
    substr $S10, rx12_tgt, rx12_pos, 1
    ne $S10, ucs4:"#", rx12_fail18
    add rx12_pos, 1
    nqp_rxmark rx12_bstack, rxquantr17_done33, rx12_pos, 0
  rxquantr17_loop32:
    ge rx12_pos, rx12_eos, rx12_fail18
    is_cclass $I11, .CCLASS_NEWLINE, rx12_tgt, rx12_pos
    if $I11, rx12_fail18
    substr $S10, rx12_tgt, rx12_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx12_pos, $I11
    add rx12_pos, 1
    nqp_rxpeek $I19, rx12_bstack, rxquantr17_done33
    inc $I19
    inc $I19
    set rx12_rep, rx12_bstack[$I19]
    nqp_rxcommit rx12_bstack, rxquantr17_done33
    inc rx12_rep
    nqp_rxmark rx12_bstack, rxquantr17_done33, rx12_pos, rx12_rep
    goto rxquantr17_loop32
  rxquantr17_done33:
    goto alt15_end27
  alt15_end27:
    nqp_rxpeek $I19, rx12_bstack, rxquantr14_done26
    inc $I19
    inc $I19
    set rx12_rep, rx12_bstack[$I19]
    nqp_rxcommit rx12_bstack, rxquantr14_done26
    inc rx12_rep
    nqp_rxmark rx12_bstack, rxquantr14_done26, rx12_pos, rx12_rep
    goto rxquantr14_loop25
  rxquantr14_done26:
    rx12_cur."!cursor_pass"(rx12_pos, "ws", 'backtrack'=>1)
    .return (rx12_cur)
  rx12_restart17:
    repr_get_attr_obj rx12_cstack, rx12_cur, rx12_curclass, "$!cstack"
  rx12_fail18:
    unless rx12_bstack, rx12_done16
    pop $I19, rx12_bstack
    if_null rx12_cstack, rx12_cstack_done21
    unless rx12_cstack, rx12_cstack_done21
    dec $I19
    set $P11, rx12_cstack[$I19]
  rx12_cstack_done21:
    pop rx12_rep, rx12_bstack
    pop rx12_pos, rx12_bstack
    pop $I19, rx12_bstack
    lt rx12_pos, -1, rx12_done16
    lt rx12_pos, 0, rx12_fail18
    eq $I19, 0, rx12_fail18
    nqp_islist $I20, rx12_cstack
    unless $I20, rx12_jump19
    elements $I18, rx12_bstack
    le $I18, 0, rx12_cut20
    dec $I18
    set $I18, rx12_bstack[$I18]
  rx12_cut20:
    assign rx12_cstack, $I18
  rx12_jump19:
    jump $I19
  rx12_done16:
    rx12_cur."!cursor_fail"()
    .return (rx12_cur) 
.end
.HLL "nqp"
.namespace []
.sub "normspace" :subid("cuid_6_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 64
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_7_1367388594.4399' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx18_start
    .local string rx18_tgt
    .local int rx18_pos
    .local int rx18_off
    .local int rx18_eos
    .local int rx18_rep
    .local pmc rx18_cur
    .local pmc rx18_curclass
    .local pmc rx18_bstack
    .local pmc rx18_cstack
    rx18_start = self."!cursor_start_all"()
    set rx18_cur, rx18_start[0]
    set rx18_tgt, rx18_start[1]
    set rx18_pos, rx18_start[2]
    set rx18_curclass, rx18_start[3]
    set rx18_bstack, rx18_start[4]
    set $I19, rx18_start[5]
    store_lex unicode:"$\x{a2}", rx18_cur
    length rx18_eos, rx18_tgt
    eq $I19, 1, rx18_restart36
    gt rx18_pos, rx18_eos, rx18_fail37
    repr_get_attr_int $I11, self, rx18_curclass, "$!from"
    ne $I11, -1, rxscan19_done43
    goto rxscan19_scan42
  rxscan19_loop41:
    inc rx18_pos
    gt rx18_pos, rx18_eos, rx18_fail37
    repr_bind_attr_int rx18_cur, rx18_curclass, "$!from", rx18_pos
  rxscan19_scan42:
    nqp_rxmark rx18_bstack, rxscan19_loop41, rx18_pos, 0
  rxscan19_done43:
    .const 'Sub' $P5001 = 'cuid_7_1367388594.4399' 
    capture_lex $P5001
    repr_bind_attr_int rx18_cur, rx18_curclass, "$!pos", rx18_pos
    $P11 = rx18_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx18_curclass, "$!pos"
    lt $I11, 0, rx18_fail37
    repr_bind_attr_int rx18_cur, rx18_curclass, "$!pos", rx18_pos
    $P11 = rx18_cur."ws"()
    repr_get_attr_int $I11, $P11, rx18_curclass, "$!pos"
    lt $I11, 0, rx18_fail37
    repr_get_attr_int rx18_pos, $P11, rx18_curclass, "$!pos"
    rx18_cur."!cursor_pass"(rx18_pos, "normspace", 'backtrack'=>1)
    .return (rx18_cur)
  rx18_restart36:
    repr_get_attr_obj rx18_cstack, rx18_cur, rx18_curclass, "$!cstack"
  rx18_fail37:
    unless rx18_bstack, rx18_done35
    pop $I19, rx18_bstack
    if_null rx18_cstack, rx18_cstack_done40
    unless rx18_cstack, rx18_cstack_done40
    dec $I19
    set $P11, rx18_cstack[$I19]
  rx18_cstack_done40:
    pop rx18_rep, rx18_bstack
    pop rx18_pos, rx18_bstack
    pop $I19, rx18_bstack
    lt rx18_pos, -1, rx18_done35
    lt rx18_pos, 0, rx18_fail37
    eq $I19, 0, rx18_fail37
    nqp_islist $I20, rx18_cstack
    unless $I20, rx18_jump38
    elements $I18, rx18_bstack
    le $I18, 0, rx18_cut39
    dec $I18
    set $I18, rx18_bstack[$I18]
  rx18_cut39:
    assign rx18_cstack, $I18
  rx18_jump38:
    jump $I19
  rx18_done35:
    rx18_cur."!cursor_fail"()
    .return (rx18_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_7_1367388594.4399") :anon :lex :outer("cuid_6_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx20_start
    .local string rx20_tgt
    .local int rx20_pos
    .local int rx20_off
    .local int rx20_eos
    .local int rx20_rep
    .local pmc rx20_cur
    .local pmc rx20_curclass
    .local pmc rx20_bstack
    .local pmc rx20_cstack
    rx20_start = self."!cursor_start_all"()
    set rx20_cur, rx20_start[0]
    set rx20_tgt, rx20_start[1]
    set rx20_pos, rx20_start[2]
    set rx20_curclass, rx20_start[3]
    set rx20_bstack, rx20_start[4]
    set $I19, rx20_start[5]
    store_lex unicode:"$\x{a2}", rx20_cur
    length rx20_eos, rx20_tgt
    eq $I19, 1, rx20_restart46
    gt rx20_pos, rx20_eos, rx20_fail47
    repr_get_attr_int $I11, self, rx20_curclass, "$!from"
    ne $I11, -1, rxscan21_done53
    goto rxscan21_scan52
  rxscan21_loop51:
    inc rx20_pos
    gt rx20_pos, rx20_eos, rx20_fail47
    repr_bind_attr_int rx20_cur, rx20_curclass, "$!from", rx20_pos
  rxscan21_scan52:
    nqp_rxmark rx20_bstack, rxscan21_loop51, rx20_pos, 0
  rxscan21_done53:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt22_055
    nqp_push_label $P11, alt22_156
    nqp_rxmark rx20_bstack, alt22_end54, -1, 0
    rx20_cur."!alt"(rx20_pos, "alt_nfa__2_1367388594.66922", $P11)
    goto rx20_fail47
  alt22_055:
    ge rx20_pos, rx20_eos, rx20_fail47
    is_cclass $I11, .CCLASS_WHITESPACE, rx20_tgt, rx20_pos
    unless $I11, rx20_fail47
    add rx20_pos, 1
    goto alt22_end54
  alt22_156:
    add $I11, rx20_pos, 1
    gt $I11, rx20_eos, rx20_fail47
    substr $S10, rx20_tgt, rx20_pos, 1
    ne $S10, ucs4:"#", rx20_fail47
    add rx20_pos, 1
    goto alt22_end54
  alt22_end54:
    rx20_cur."!cursor_pass"(rx20_pos, 'backtrack'=>1)
    .return (rx20_cur)
  rx20_restart46:
    repr_get_attr_obj rx20_cstack, rx20_cur, rx20_curclass, "$!cstack"
  rx20_fail47:
    unless rx20_bstack, rx20_done45
    pop $I19, rx20_bstack
    if_null rx20_cstack, rx20_cstack_done50
    unless rx20_cstack, rx20_cstack_done50
    dec $I19
    set $P11, rx20_cstack[$I19]
  rx20_cstack_done50:
    pop rx20_rep, rx20_bstack
    pop rx20_pos, rx20_bstack
    pop $I19, rx20_bstack
    lt rx20_pos, -1, rx20_done45
    lt rx20_pos, 0, rx20_fail47
    eq $I19, 0, rx20_fail47
    nqp_islist $I20, rx20_cstack
    unless $I20, rx20_jump48
    elements $I18, rx20_bstack
    le $I18, 0, rx20_cut49
    dec $I18
    set $I18, rx20_bstack[$I18]
  rx20_cut49:
    assign rx20_cstack, $I18
  rx20_jump48:
    jump $I19
  rx20_done45:
    rx20_cur."!cursor_fail"()
    .return (rx20_cur) 
.end
.HLL "nqp"
.namespace []
.sub "identifier" :subid("cuid_8_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 66
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx24_start
    .local string rx24_tgt
    .local int rx24_pos
    .local int rx24_off
    .local int rx24_eos
    .local int rx24_rep
    .local pmc rx24_cur
    .local pmc rx24_curclass
    .local pmc rx24_bstack
    .local pmc rx24_cstack
    rx24_start = self."!cursor_start_all"()
    set rx24_cur, rx24_start[0]
    set rx24_tgt, rx24_start[1]
    set rx24_pos, rx24_start[2]
    set rx24_curclass, rx24_start[3]
    set rx24_bstack, rx24_start[4]
    set $I19, rx24_start[5]
    store_lex unicode:"$\x{a2}", rx24_cur
    length rx24_eos, rx24_tgt
    eq $I19, 1, rx24_restart60
    gt rx24_pos, rx24_eos, rx24_fail61
    repr_get_attr_int $I11, self, rx24_curclass, "$!from"
    ne $I11, -1, rxscan25_done67
    goto rxscan25_scan66
  rxscan25_loop65:
    inc rx24_pos
    gt rx24_pos, rx24_eos, rx24_fail61
    repr_bind_attr_int rx24_cur, rx24_curclass, "$!from", rx24_pos
  rxscan25_scan66:
    nqp_rxmark rx24_bstack, rxscan25_loop65, rx24_pos, 0
  rxscan25_done67:
    repr_bind_attr_int rx24_cur, rx24_curclass, "$!pos", rx24_pos
    $P11 = rx24_cur."ident"()
    repr_get_attr_int $I11, $P11, rx24_curclass, "$!pos"
    lt $I11, 0, rx24_fail61
    repr_get_attr_int rx24_pos, $P11, rx24_curclass, "$!pos"
    nqp_rxmark rx24_bstack, rxquantr27_done70, rx24_pos, 0
  rxquantr27_loop69:
  alt28_072:
    nqp_rxmark rx24_bstack, alt28_173, rx24_pos, 0
    add $I11, rx24_pos, 1
    gt $I11, rx24_eos, rx24_fail61
    substr $S10, rx24_tgt, rx24_pos, 1
    ne $S10, ucs4:"-", rx24_fail61
    add rx24_pos, 1
    goto alt28_end71
  alt28_173:
    ge rx24_pos, rx24_eos, rx24_fail61
    substr $S11, rx24_tgt, rx24_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx24_fail61
    inc rx24_pos
  alt28_end71:
    repr_bind_attr_int rx24_cur, rx24_curclass, "$!pos", rx24_pos
    $P11 = rx24_cur."ident"()
    repr_get_attr_int $I11, $P11, rx24_curclass, "$!pos"
    lt $I11, 0, rx24_fail61
    repr_get_attr_int rx24_pos, $P11, rx24_curclass, "$!pos"
    nqp_rxpeek $I19, rx24_bstack, rxquantr27_done70
    inc $I19
    inc $I19
    set rx24_rep, rx24_bstack[$I19]
    nqp_rxcommit rx24_bstack, rxquantr27_done70
    inc rx24_rep
    nqp_rxmark rx24_bstack, rxquantr27_done70, rx24_pos, rx24_rep
    goto rxquantr27_loop69
  rxquantr27_done70:
    rx24_cur."!cursor_pass"(rx24_pos, "identifier", 'backtrack'=>1)
    .return (rx24_cur)
  rx24_restart60:
    repr_get_attr_obj rx24_cstack, rx24_cur, rx24_curclass, "$!cstack"
  rx24_fail61:
    unless rx24_bstack, rx24_done59
    pop $I19, rx24_bstack
    if_null rx24_cstack, rx24_cstack_done64
    unless rx24_cstack, rx24_cstack_done64
    dec $I19
    set $P11, rx24_cstack[$I19]
  rx24_cstack_done64:
    pop rx24_rep, rx24_bstack
    pop rx24_pos, rx24_bstack
    pop $I19, rx24_bstack
    lt rx24_pos, -1, rx24_done59
    lt rx24_pos, 0, rx24_fail61
    eq $I19, 0, rx24_fail61
    nqp_islist $I20, rx24_cstack
    unless $I20, rx24_jump62
    elements $I18, rx24_bstack
    le $I18, 0, rx24_cut63
    dec $I18
    set $I18, rx24_bstack[$I18]
  rx24_cut63:
    assign rx24_cstack, $I18
  rx24_jump62:
    jump $I19
  rx24_done59:
    rx24_cur."!cursor_fail"()
    .return (rx24_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_9_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 68
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx30_start
    .local string rx30_tgt
    .local int rx30_pos
    .local int rx30_off
    .local int rx30_eos
    .local int rx30_rep
    .local pmc rx30_cur
    .local pmc rx30_curclass
    .local pmc rx30_bstack
    .local pmc rx30_cstack
    rx30_start = self."!cursor_start_all"()
    set rx30_cur, rx30_start[0]
    set rx30_tgt, rx30_start[1]
    set rx30_pos, rx30_start[2]
    set rx30_curclass, rx30_start[3]
    set rx30_bstack, rx30_start[4]
    set $I19, rx30_start[5]
    store_lex unicode:"$\x{a2}", rx30_cur
    length rx30_eos, rx30_tgt
    eq $I19, 1, rx30_restart77
    gt rx30_pos, rx30_eos, rx30_fail78
    repr_get_attr_int $I11, self, rx30_curclass, "$!from"
    ne $I11, -1, rxscan31_done84
    goto rxscan31_scan83
  rxscan31_loop82:
    inc rx30_pos
    gt rx30_pos, rx30_eos, rx30_fail78
    repr_bind_attr_int rx30_cur, rx30_curclass, "$!from", rx30_pos
  rxscan31_scan83:
    nqp_rxmark rx30_bstack, rxscan31_loop82, rx30_pos, 0
  rxscan31_done84:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt32_086
    nqp_push_label $P11, alt32_188
    nqp_push_label $P11, alt32_290
    nqp_rxmark rx30_bstack, alt32_end85, -1, 0
    rx30_cur."!alt"(rx30_pos, "alt_nfa__3_1367388594.70242", $P11)
    goto rx30_fail78
  alt32_086:
    ge rx30_pos, rx30_eos, rx30_fail78
    substr $S11, rx30_tgt, rx30_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx30_fail78
    repr_bind_attr_int rx30_cur, rx30_curclass, "$!pos", rx30_pos
    $P11 = rx30_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx30_curclass, "$!pos"
    lt $I11, 0, rx30_fail78
    nqp_rxmark rx30_bstack, rxsubrule33_pass87, -1, 0
  rxsubrule33_pass87:
    rx30_cstack = rx30_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx30_pos, $P11, rx30_curclass, "$!pos"
    goto alt32_end85
  alt32_188:
    ge rx30_pos, rx30_eos, rx30_fail78
    substr $S11, rx30_tgt, rx30_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx30_fail78
    repr_bind_attr_int rx30_cur, rx30_curclass, "$!pos", rx30_pos
    $P11 = rx30_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx30_curclass, "$!pos"
    lt $I11, 0, rx30_fail78
    nqp_rxmark rx30_bstack, rxsubrule34_pass89, -1, 0
  rxsubrule34_pass89:
    rx30_cstack = rx30_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx30_pos, $P11, rx30_curclass, "$!pos"
    goto alt32_end85
  alt32_290:
    nqp_rxmark rx30_bstack, rxcap35_fail92, rx30_pos, 0
    nqp_rxmark rx30_bstack, rxquantr36_done94, -1, 0
  rxquantr36_loop93:
    ge rx30_pos, rx30_eos, rx30_fail78
    is_cclass $I11, .CCLASS_NUMERIC, rx30_tgt, rx30_pos
    unless $I11, rx30_fail78
    add rx30_pos, 1
    nqp_rxpeek $I19, rx30_bstack, rxquantr36_done94
    inc $I19
    inc $I19
    set rx30_rep, rx30_bstack[$I19]
    nqp_rxcommit rx30_bstack, rxquantr36_done94
    inc rx30_rep
    nqp_rxmark rx30_bstack, rxquantr36_done94, rx30_pos, rx30_rep
    goto rxquantr36_loop93
  rxquantr36_done94:
    nqp_rxpeek $I19, rx30_bstack, rxcap35_fail92
    inc $I19
    set $I11, rx30_bstack[$I19]
    repr_bind_attr_int rx30_cur, rx30_curclass, "$!pos", rx30_pos
    $P11 = rx30_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx30_pos)
    rx30_cstack = rx30_cur."!cursor_capture"($P11, "val")
    goto rxcap35_done91
  rxcap35_fail92:
    goto rx30_fail78
  rxcap35_done91:
    goto alt32_end85
  alt32_end85:
    nqp_rxcommit rx30_bstack, alt32_end85
    rx30_cur."!cursor_pass"(rx30_pos, "arg", 'backtrack'=>1)
    .return (rx30_cur)
  rx30_restart77:
    repr_get_attr_obj rx30_cstack, rx30_cur, rx30_curclass, "$!cstack"
  rx30_fail78:
    unless rx30_bstack, rx30_done76
    pop $I19, rx30_bstack
    if_null rx30_cstack, rx30_cstack_done81
    unless rx30_cstack, rx30_cstack_done81
    dec $I19
    set $P11, rx30_cstack[$I19]
  rx30_cstack_done81:
    pop rx30_rep, rx30_bstack
    pop rx30_pos, rx30_bstack
    pop $I19, rx30_bstack
    lt rx30_pos, -1, rx30_done76
    lt rx30_pos, 0, rx30_fail78
    eq $I19, 0, rx30_fail78
    nqp_islist $I20, rx30_cstack
    unless $I20, rx30_jump79
    elements $I18, rx30_bstack
    le $I18, 0, rx30_cut80
    dec $I18
    set $I18, rx30_bstack[$I18]
  rx30_cut80:
    assign rx30_cstack, $I18
  rx30_jump79:
    jump $I19
  rx30_done76:
    rx30_cur."!cursor_fail"()
    .return (rx30_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_10_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 76
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx37_start
    .local string rx37_tgt
    .local int rx37_pos
    .local int rx37_off
    .local int rx37_eos
    .local int rx37_rep
    .local pmc rx37_cur
    .local pmc rx37_curclass
    .local pmc rx37_bstack
    .local pmc rx37_cstack
    rx37_start = self."!cursor_start_all"()
    set rx37_cur, rx37_start[0]
    set rx37_tgt, rx37_start[1]
    set rx37_pos, rx37_start[2]
    set rx37_curclass, rx37_start[3]
    set rx37_bstack, rx37_start[4]
    set $I19, rx37_start[5]
    store_lex unicode:"$\x{a2}", rx37_cur
    length rx37_eos, rx37_tgt
    eq $I19, 1, rx37_restart97
    gt rx37_pos, rx37_eos, rx37_fail98
    repr_get_attr_int $I11, self, rx37_curclass, "$!from"
    ne $I11, -1, rxscan38_done104
    goto rxscan38_scan103
  rxscan38_loop102:
    inc rx37_pos
    gt rx37_pos, rx37_eos, rx37_fail98
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!from", rx37_pos
  rxscan38_scan103:
    nqp_rxmark rx37_bstack, rxscan38_loop102, rx37_pos, 0
  rxscan38_done104:
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."ws"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail98
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."arg"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail98
    nqp_rxmark rx37_bstack, rxsubrule40_pass106, -1, 0
  rxsubrule40_pass106:
    rx37_cstack = rx37_cur."!cursor_capture"($P11, "arg")
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."ws"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail98
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    nqp_rxmark rx37_bstack, rxquantr42_done109, rx37_pos, 0
  rxquantr42_loop108:
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."ws"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail98
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    add $I11, rx37_pos, 1
    gt $I11, rx37_eos, rx37_fail98
    substr $S10, rx37_tgt, rx37_pos, 1
    ne $S10, ucs4:",", rx37_fail98
    add rx37_pos, 1
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."ws"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail98
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."arg"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail98
    nqp_rxmark rx37_bstack, rxsubrule45_pass112, -1, 0
  rxsubrule45_pass112:
    rx37_cstack = rx37_cur."!cursor_capture"($P11, "arg")
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    nqp_rxpeek $I19, rx37_bstack, rxquantr42_done109
    inc $I19
    inc $I19
    set rx37_rep, rx37_bstack[$I19]
    nqp_rxcommit rx37_bstack, rxquantr42_done109
    inc rx37_rep
    nqp_rxmark rx37_bstack, rxquantr42_done109, rx37_pos, rx37_rep
    goto rxquantr42_loop108
  rxquantr42_done109:
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."ws"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail98
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    rx37_cur."!cursor_pass"(rx37_pos, "arglist", 'backtrack'=>1)
    .return (rx37_cur)
  rx37_restart97:
    repr_get_attr_obj rx37_cstack, rx37_cur, rx37_curclass, "$!cstack"
  rx37_fail98:
    unless rx37_bstack, rx37_done96
    pop $I19, rx37_bstack
    if_null rx37_cstack, rx37_cstack_done101
    unless rx37_cstack, rx37_cstack_done101
    dec $I19
    set $P11, rx37_cstack[$I19]
  rx37_cstack_done101:
    pop rx37_rep, rx37_bstack
    pop rx37_pos, rx37_bstack
    pop $I19, rx37_bstack
    lt rx37_pos, -1, rx37_done96
    lt rx37_pos, 0, rx37_fail98
    eq $I19, 0, rx37_fail98
    nqp_islist $I20, rx37_cstack
    unless $I20, rx37_jump99
    elements $I18, rx37_bstack
    le $I18, 0, rx37_cut100
    dec $I18
    set $I18, rx37_bstack[$I18]
  rx37_cut100:
    assign rx37_cstack, $I18
  rx37_jump99:
    jump $I19
  rx37_done96:
    rx37_cur."!cursor_fail"()
    .return (rx37_cur) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_11_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 79
    .param pmc _lex_param_0 
    .lex "%*RX", $P101 
    .lex "$handle", $P102 
    .lex "$*W", $P103 
    .lex utf8:"$\x{a2}", $P104 
    .lex "$/", $P105 
    .lex "self", _lex_param_0 
    .local pmc self 
    .local pmc fb_tmp_1 
    .local pmc pkg_viv_tmp_1 
    .local pmc tmp_1 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P103, $P5003
    set self, _lex_param_0
    .local pmc rx47_start
    .local string rx47_tgt
    .local int rx47_pos
    .local int rx47_off
    .local int rx47_eos
    .local int rx47_rep
    .local pmc rx47_cur
    .local pmc rx47_curclass
    .local pmc rx47_bstack
    .local pmc rx47_cstack
    rx47_start = self."!cursor_start_all"()
    set rx47_cur, rx47_start[0]
    set rx47_tgt, rx47_start[1]
    set rx47_pos, rx47_start[2]
    set rx47_curclass, rx47_start[3]
    set rx47_bstack, rx47_start[4]
    set $I19, rx47_start[5]
    store_lex unicode:"$\x{a2}", rx47_cur
    length rx47_eos, rx47_tgt
    eq $I19, 1, rx47_restart116
    gt rx47_pos, rx47_eos, rx47_fail117
    repr_get_attr_int $I11, self, rx47_curclass, "$!from"
    ne $I11, -1, rxscan48_done123
    goto rxscan48_scan122
  rxscan48_loop121:
    inc rx47_pos
    gt rx47_pos, rx47_eos, rx47_fail117
    repr_bind_attr_int rx47_cur, rx47_curclass, "$!from", rx47_pos
  rxscan48_scan122:
    nqp_rxmark rx47_bstack, rxscan48_loop121, rx47_pos, 0
  rxscan48_done123:
    repr_bind_attr_int rx47_cur, rx47_curclass, "$!pos", rx47_pos
    store_lex unicode:"$\x{a2}", rx47_cur
    unless_null $P101, fallback124
    nqp_get_sc_object $P5005, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 0
    get_who $P5004, $P5005
    set pkg_viv_tmp_1, $P5004
    set fb_tmp_1, pkg_viv_tmp_1
    repr_defined $I5001, fb_tmp_1
    unless $I5001 goto if49_else125 
    set $P5006, fb_tmp_1["%RX"]
    set $P5008, $P5006
    goto if49_end126
  if49_else125:
    null $P5007
    set $P5008, $P5007
  if49_end126:
    unless_null $P5008, vivi_50127
    new $P5009, 'Hash'
    set pkg_viv_tmp_1["%RX"], $P5009
    set $P5008, $P5009
  vivi_50127:
    unless_null $P5008, vivi_51128
    die "Contextual %*RX not found"
    box $P5010, "Contextual %*RX not found"
    set $P5008, $P5010
  vivi_51128:
    set $P101, $P5008
  fallback124:
    repr_bind_attr_int rx47_cur, rx47_curclass, "$!pos", rx47_pos
    store_lex unicode:"$\x{a2}", rx47_cur
    find_lex $P5011, "$cur_handle"
    set tmp_1, $P5011
    set $N5002, tmp_1
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5012, $N5001
    store_lex "$cur_handle", $P5012
    set $S5002, tmp_1
    concat $S5001, "__QREGEX_P6REGEX__", $S5002
    box $P5011, $S5001
    set $P102, $P5011
    repr_bind_attr_int rx47_cur, rx47_curclass, "$!pos", rx47_pos
    store_lex unicode:"$\x{a2}", rx47_cur
.annotate 'line', 82
    nqp_get_sc_object $P5012, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 3
    $P5013 = $P5012."new"($P102 :named("handle"))
    set $P103, $P5013
    repr_bind_attr_int rx47_cur, rx47_curclass, "$!pos", rx47_pos
    $P11 = rx47_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx47_curclass, "$!pos"
    lt $I11, 0, rx47_fail117
    nqp_rxmark rx47_bstack, rxsubrule52_pass129, -1, 0
  rxsubrule52_pass129:
    rx47_cstack = rx47_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx47_pos, $P11, rx47_curclass, "$!pos"
  alt53_0131:
    nqp_rxmark rx47_bstack, alt53_1133, rx47_pos, 0
    lt rx47_pos, rx47_eos, rx47_fail117
    goto alt53_end130
  alt53_1133:
    repr_bind_attr_int rx47_cur, rx47_curclass, "$!pos", rx47_pos
    $P11 = rx47_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx47_curclass, "$!pos"
    lt $I11, 0, rx47_fail117
    repr_get_attr_int rx47_pos, $P11, rx47_curclass, "$!pos"
  alt53_end130:
    rx47_cur."!cursor_pass"(rx47_pos, "TOP", 'backtrack'=>1)
    .return (rx47_cur)
  rx47_restart116:
    repr_get_attr_obj rx47_cstack, rx47_cur, rx47_curclass, "$!cstack"
  rx47_fail117:
    unless rx47_bstack, rx47_done115
    pop $I19, rx47_bstack
    if_null rx47_cstack, rx47_cstack_done120
    unless rx47_cstack, rx47_cstack_done120
    dec $I19
    set $P11, rx47_cstack[$I19]
  rx47_cstack_done120:
    pop rx47_rep, rx47_bstack
    pop rx47_pos, rx47_bstack
    pop $I19, rx47_bstack
    lt rx47_pos, -1, rx47_done115
    lt rx47_pos, 0, rx47_fail117
    eq $I19, 0, rx47_fail117
    nqp_islist $I20, rx47_cstack
    unless $I20, rx47_jump118
    elements $I18, rx47_bstack
    le $I18, 0, rx47_cut119
    dec $I18
    set $I18, rx47_bstack[$I18]
  rx47_cut119:
    assign rx47_cstack, $I18
  rx47_jump118:
    jump $I19
  rx47_done115:
    rx47_cur."!cursor_fail"()
    .return (rx47_cur) 
.end
.HLL "nqp"
.namespace []
.sub "nibbler" :subid("cuid_12_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 87
    .param pmc _lex_param_0 
    .const 'Sub' $P5023 = 'cuid_182_1367388594.4399' 
    capture_lex $P5023 
    .const 'Sub' $P5023 = 'cuid_183_1367388594.4399' 
    capture_lex $P5023 
    .const 'Sub' $P5023 = 'cuid_13_1367388594.4399' 
    capture_lex $P5023 
    .const 'Sub' $P5023 = 'cuid_184_1367388594.4399' 
    capture_lex $P5023 
    .lex "$OLDRX", $P101 
    .lex "%*RX", $P102 
    .lex "$*SEQ", $P103 
    .lex utf8:"$\x{a2}", $P104 
    .lex "$/", $P105 
    .lex "self", _lex_param_0 
    .local pmc self 
    .local pmc fb_tmp_2 
    .local pmc pkg_viv_tmp_2 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P103, $P5003
    set self, _lex_param_0
    .local pmc rx56_start
    .local string rx56_tgt
    .local int rx56_pos
    .local int rx56_off
    .local int rx56_eos
    .local int rx56_rep
    .local pmc rx56_cur
    .local pmc rx56_curclass
    .local pmc rx56_bstack
    .local pmc rx56_cstack
    rx56_start = self."!cursor_start_all"()
    set rx56_cur, rx56_start[0]
    set rx56_tgt, rx56_start[1]
    set rx56_pos, rx56_start[2]
    set rx56_curclass, rx56_start[3]
    set rx56_bstack, rx56_start[4]
    set $I19, rx56_start[5]
    store_lex unicode:"$\x{a2}", rx56_cur
    length rx56_eos, rx56_tgt
    eq $I19, 1, rx56_restart137
    gt rx56_pos, rx56_eos, rx56_fail138
    repr_get_attr_int $I11, self, rx56_curclass, "$!from"
    ne $I11, -1, rxscan57_done144
    goto rxscan57_scan143
  rxscan57_loop142:
    inc rx56_pos
    gt rx56_pos, rx56_eos, rx56_fail138
    repr_bind_attr_int rx56_cur, rx56_curclass, "$!from", rx56_pos
  rxscan57_scan143:
    nqp_rxmark rx56_bstack, rxscan57_loop142, rx56_pos, 0
  rxscan57_done144:
    repr_bind_attr_int rx56_cur, rx56_curclass, "$!pos", rx56_pos
    store_lex unicode:"$\x{a2}", rx56_cur
    find_dynamic_lex $P5004, "%*RX"
    set $P101, $P5004
    repr_bind_attr_int rx56_cur, rx56_curclass, "$!pos", rx56_pos
    store_lex unicode:"$\x{a2}", rx56_cur
    unless_null $P102, fallback145
    nqp_get_sc_object $P5006, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 0
    get_who $P5005, $P5006
    set pkg_viv_tmp_2, $P5005
    set fb_tmp_2, pkg_viv_tmp_2
    repr_defined $I5001, fb_tmp_2
    unless $I5001 goto if58_else146 
    set $P5007, fb_tmp_2["%RX"]
    set $P5009, $P5007
    goto if58_end147
  if58_else146:
    null $P5008
    set $P5009, $P5008
  if58_end147:
    unless_null $P5009, vivi_59148
    new $P5010, 'Hash'
    set pkg_viv_tmp_2["%RX"], $P5010
    set $P5009, $P5010
  vivi_59148:
    unless_null $P5009, vivi_60149
    die "Contextual %*RX not found"
    box $P5011, "Contextual %*RX not found"
    set $P5009, $P5011
  vivi_60149:
    set $P102, $P5009
  fallback145:
    repr_bind_attr_int rx56_cur, rx56_curclass, "$!pos", rx56_pos
    store_lex unicode:"$\x{a2}", rx56_cur
    box $P5012, 0
    set $P103, $P5012
    repr_bind_attr_int rx56_cur, rx56_curclass, "$!pos", rx56_pos
    store_lex unicode:"$\x{a2}", rx56_cur
    $P5013 = $P104."MATCH"()
    set $P105, $P5013
    .const 'Sub' $P5014 = 'cuid_182_1367388594.4399' 
    capture_lex $P5014
    $P5015 = $P5014()
    nqp_rxmark rx56_bstack, rxquantr64_done159, rx56_pos, 0
  rxquantr64_loop158:
    repr_bind_attr_int rx56_cur, rx56_curclass, "$!pos", rx56_pos
    $P11 = rx56_cur."ws"()
    repr_get_attr_int $I11, $P11, rx56_curclass, "$!pos"
    lt $I11, 0, rx56_fail138
    repr_get_attr_int rx56_pos, $P11, rx56_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt66_0162
    nqp_push_label $P11, alt66_1163
    nqp_push_label $P11, alt66_2164
    nqp_push_label $P11, alt66_3165
    nqp_rxmark rx56_bstack, alt66_end161, -1, 0
    rx56_cur."!alt"(rx56_pos, "alt_nfa__4_1367388594.8146", $P11)
    goto rx56_fail138
  alt66_0162:
    add $I11, rx56_pos, 2
    gt $I11, rx56_eos, rx56_fail138
    substr $S10, rx56_tgt, rx56_pos, 2
    ne $S10, ucs4:"||", rx56_fail138
    add rx56_pos, 2
    repr_bind_attr_int rx56_cur, rx56_curclass, "$!pos", rx56_pos
    store_lex unicode:"$\x{a2}", rx56_cur
    $P5016 = $P104."MATCH"()
    set $P105, $P5016
    .const 'Sub' $P5017 = 'cuid_183_1367388594.4399' 
    capture_lex $P5017
    $P5018 = $P5017()
    goto alt66_end161
  alt66_1163:
    add $I11, rx56_pos, 1
    gt $I11, rx56_eos, rx56_fail138
    substr $S10, rx56_tgt, rx56_pos, 1
    ne $S10, ucs4:"|", rx56_fail138
    add rx56_pos, 1
    goto alt66_end161
  alt66_2164:
    add $I11, rx56_pos, 2
    gt $I11, rx56_eos, rx56_fail138
    substr $S10, rx56_tgt, rx56_pos, 2
    ne $S10, ucs4:"&&", rx56_fail138
    add rx56_pos, 2
    goto alt66_end161
  alt66_3165:
    add $I11, rx56_pos, 1
    gt $I11, rx56_eos, rx56_fail138
    substr $S10, rx56_tgt, rx56_pos, 1
    ne $S10, ucs4:"&", rx56_fail138
    add rx56_pos, 1
    goto alt66_end161
  alt66_end161:
    nqp_rxcommit rx56_bstack, alt66_end161
    nqp_rxpeek $I19, rx56_bstack, rxquantr64_done159
    inc $I19
    inc $I19
    set rx56_rep, rx56_bstack[$I19]
    nqp_rxcommit rx56_bstack, rxquantr64_done159
    inc rx56_rep
  rxquantr64_done159:
    repr_bind_attr_int rx56_cur, rx56_curclass, "$!pos", rx56_pos
    $P11 = rx56_cur."termaltseq"()
    repr_get_attr_int $I11, $P11, rx56_curclass, "$!pos"
    lt $I11, 0, rx56_fail138
    nqp_rxmark rx56_bstack, rxsubrule67_pass166, -1, 0
  rxsubrule67_pass166:
    rx56_cstack = rx56_cur."!cursor_capture"($P11, "termaltseq")
    repr_get_attr_int rx56_pos, $P11, rx56_curclass, "$!pos"
    repr_bind_attr_int rx56_cur, rx56_curclass, "$!pos", rx56_pos
    $P11 = rx56_cur."ws"()
    repr_get_attr_int $I11, $P11, rx56_curclass, "$!pos"
    lt $I11, 0, rx56_fail138
    repr_get_attr_int rx56_pos, $P11, rx56_curclass, "$!pos"
  alt69_0169:
    nqp_rxmark rx56_bstack, alt69_1170, rx56_pos, 0
    repr_bind_attr_int rx56_cur, rx56_curclass, "$!pos", rx56_pos
    $P11 = rx56_cur."infixstopper"()
    repr_get_attr_int $I11, $P11, rx56_curclass, "$!pos"
    lt $I11, 0, rx56_fail138
    goto alt69_end168
  alt69_1170:
    nqp_rxmark rx56_bstack, alt69_2173, rx56_pos, 0
    is_cclass $I11, .CCLASS_NEWLINE, rx56_tgt, rx56_pos
    if $I11, rxanchor70_done171
    ne rx56_pos, rx56_eos, rx56_fail138
    eq rx56_pos, 0, rxanchor70_done171
    sub $I11, rx56_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx56_tgt, $I11
    if $I11, rx56_fail138
  rxanchor70_done171:
    repr_bind_attr_int rx56_cur, rx56_curclass, "$!pos", rx56_pos
    $P11 = rx56_cur."panic"("Regex not terminated")
    repr_get_attr_int $I11, $P11, rx56_curclass, "$!pos"
    lt $I11, 0, rx56_fail138
    repr_get_attr_int rx56_pos, $P11, rx56_curclass, "$!pos"
    goto alt69_end168
  alt69_2173:
    nqp_rxmark rx56_bstack, alt69_3188, rx56_pos, 0
    .const 'Sub' $P5019 = 'cuid_13_1367388594.4399' 
    capture_lex $P5019
    repr_bind_attr_int rx56_cur, rx56_curclass, "$!pos", rx56_pos
    $P11 = rx56_cur.$P5019()
    repr_get_attr_int $I11, $P11, rx56_curclass, "$!pos"
    lt $I11, 0, rx56_fail138
    nqp_rxmark rx56_bstack, rxsubrule74_pass184, -1, 0
  rxsubrule74_pass184:
    rx56_cstack = rx56_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx56_pos, $P11, rx56_curclass, "$!pos"
    repr_bind_attr_int rx56_cur, rx56_curclass, "$!pos", rx56_pos
    store_lex unicode:"$\x{a2}", rx56_cur
    $P5020 = $P104."MATCH"()
    set $P105, $P5020
    .const 'Sub' $P5021 = 'cuid_184_1367388594.4399' 
    capture_lex $P5021
    $P5022 = $P5021()
    goto alt69_end168
  alt69_3188:
    repr_bind_attr_int rx56_cur, rx56_curclass, "$!pos", rx56_pos
    $P11 = rx56_cur."panic"("Regex not terminated")
    repr_get_attr_int $I11, $P11, rx56_curclass, "$!pos"
    lt $I11, 0, rx56_fail138
    repr_get_attr_int rx56_pos, $P11, rx56_curclass, "$!pos"
  alt69_end168:
    rx56_cur."!cursor_pass"(rx56_pos, "nibbler", 'backtrack'=>1)
    .return (rx56_cur)
  rx56_restart137:
    repr_get_attr_obj rx56_cstack, rx56_cur, rx56_curclass, "$!cstack"
  rx56_fail138:
    unless rx56_bstack, rx56_done136
    pop $I19, rx56_bstack
    if_null rx56_cstack, rx56_cstack_done141
    unless rx56_cstack, rx56_cstack_done141
    dec $I19
    set $P11, rx56_cstack[$I19]
  rx56_cstack_done141:
    pop rx56_rep, rx56_bstack
    pop rx56_pos, rx56_bstack
    pop $I19, rx56_bstack
    lt rx56_pos, -1, rx56_done136
    lt rx56_pos, 0, rx56_fail138
    eq $I19, 0, rx56_fail138
    nqp_islist $I20, rx56_cstack
    unless $I20, rx56_jump139
    elements $I18, rx56_bstack
    le $I18, 0, rx56_cut140
    dec $I18
    set $I18, rx56_bstack[$I18]
  rx56_cut140:
    assign rx56_cstack, $I18
  rx56_jump139:
    jump $I19
  rx56_done136:
    rx56_cur."!cursor_fail"()
    .return (rx56_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_182_1367388594.4399") :anon :lex :outer("cuid_12_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 91
    .const 'Sub' $P5007 = 'cuid_181_1367388594.4399' 
    capture_lex $P5007 
    find_lex $P5004, "$OLDRX"
    set $P5001, $P5004
    iter $P5003, $P5004
  for_next155:
    unless $P5003, for_done157
    shift $P5006, $P5003
  for_redo156:
    .const 'Sub' $P5005 = 'cuid_181_1367388594.4399' 
    capture_lex $P5005
    $P5001 = $P5005($P5006)
    goto for_next155
  for_done157:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_181_1367388594.4399") :anon :lex :outer("cuid_182_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 92
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_3 
    .local pmc pkg_viv_tmp_3 
    find_dynamic_lex $P5001, "%*RX"
    unless_null $P5001, fallback150
    nqp_get_sc_object $P5003, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 0
    get_who $P5002, $P5003
    set pkg_viv_tmp_3, $P5002
    set fb_tmp_3, pkg_viv_tmp_3
    repr_defined $I5001, fb_tmp_3
    unless $I5001 goto if61_else151 
    set $P5004, fb_tmp_3["%RX"]
    set $P5006, $P5004
    goto if61_end152
  if61_else151:
    null $P5005
    set $P5006, $P5005
  if61_end152:
    unless_null $P5006, vivi_62153
    new $P5007, 'Hash'
    set pkg_viv_tmp_3["%RX"], $P5007
    set $P5006, $P5007
  vivi_62153:
    unless_null $P5006, vivi_63154
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5006, $P5008
  vivi_63154:
    set $P5001, $P5006
  fallback150:
    $P5009 = _lex_param_0."key"()
    set $S5001, $P5009
    $P5010 = _lex_param_0."value"()
    set $P5001[$S5001], $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_183_1367388594.4399") :anon :lex :outer("cuid_12_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 95

    box $P5001, 1
    store_dynamic_lex "$*SEQ", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_13_1367388594.4399") :anon :lex :outer("cuid_12_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx72_start
    .local string rx72_tgt
    .local int rx72_pos
    .local int rx72_off
    .local int rx72_eos
    .local int rx72_rep
    .local pmc rx72_cur
    .local pmc rx72_curclass
    .local pmc rx72_bstack
    .local pmc rx72_cstack
    rx72_start = self."!cursor_start_all"()
    set rx72_cur, rx72_start[0]
    set rx72_tgt, rx72_start[1]
    set rx72_pos, rx72_start[2]
    set rx72_curclass, rx72_start[3]
    set rx72_bstack, rx72_start[4]
    set $I19, rx72_start[5]
    store_lex unicode:"$\x{a2}", rx72_cur
    length rx72_eos, rx72_tgt
    eq $I19, 1, rx72_restart176
    gt rx72_pos, rx72_eos, rx72_fail177
    repr_get_attr_int $I11, self, rx72_curclass, "$!from"
    ne $I11, -1, rxscan73_done183
    goto rxscan73_scan182
  rxscan73_loop181:
    inc rx72_pos
    gt rx72_pos, rx72_eos, rx72_fail177
    repr_bind_attr_int rx72_cur, rx72_curclass, "$!from", rx72_pos
  rxscan73_scan182:
    nqp_rxmark rx72_bstack, rxscan73_loop181, rx72_pos, 0
  rxscan73_done183:
    ge rx72_pos, rx72_eos, rx72_fail177
    is_cclass $I11, .CCLASS_WORD, rx72_tgt, rx72_pos
    if $I11, rx72_fail177
    add rx72_pos, 1
    rx72_cur."!cursor_pass"(rx72_pos, 'backtrack'=>1)
    .return (rx72_cur)
  rx72_restart176:
    repr_get_attr_obj rx72_cstack, rx72_cur, rx72_curclass, "$!cstack"
  rx72_fail177:
    unless rx72_bstack, rx72_done175
    pop $I19, rx72_bstack
    if_null rx72_cstack, rx72_cstack_done180
    unless rx72_cstack, rx72_cstack_done180
    dec $I19
    set $P11, rx72_cstack[$I19]
  rx72_cstack_done180:
    pop rx72_rep, rx72_bstack
    pop rx72_pos, rx72_bstack
    pop $I19, rx72_bstack
    lt rx72_pos, -1, rx72_done175
    lt rx72_pos, 0, rx72_fail177
    eq $I19, 0, rx72_fail177
    nqp_islist $I20, rx72_cstack
    unless $I20, rx72_jump178
    elements $I18, rx72_bstack
    le $I18, 0, rx72_cut179
    dec $I18
    set $I18, rx72_bstack[$I18]
  rx72_cut179:
    assign rx72_cstack, $I18
  rx72_jump178:
    jump $I19
  rx72_done175:
    rx72_cur."!cursor_fail"()
    .return (rx72_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_184_1367388594.4399") :anon :lex :outer("cuid_12_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 104
    .local pmc fb_tmp_4 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$/"
    set fb_tmp_4, $P5003
    repr_defined $I5001, fb_tmp_4
    unless $I5001 goto if75_else185 
    set $P5004, fb_tmp_4[0]
    set $P5006, $P5004
    goto if75_end186
  if75_else185:
    null $P5005
    set $P5006, $P5005
  if75_end186:
    unless_null $P5006, vivi_76187
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5006, $P5007
  vivi_76187:
    set $S5001, $P5006
    $P5008 = $P5001."throw_unrecognized_metachar"($S5001)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "infixstopper" :subid("cuid_14_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 109
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_15_1367388594.4399' 
    capture_lex $P5004 
    .const 'Sub' $P5004 = 'cuid_16_1367388594.4399' 
    capture_lex $P5004 
    .const 'Sub' $P5004 = 'cuid_17_1367388594.4399' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx78_start
    .local string rx78_tgt
    .local int rx78_pos
    .local int rx78_off
    .local int rx78_eos
    .local int rx78_rep
    .local pmc rx78_cur
    .local pmc rx78_curclass
    .local pmc rx78_bstack
    .local pmc rx78_cstack
    rx78_start = self."!cursor_start_all"()
    set rx78_cur, rx78_start[0]
    set rx78_tgt, rx78_start[1]
    set rx78_pos, rx78_start[2]
    set rx78_curclass, rx78_start[3]
    set rx78_bstack, rx78_start[4]
    set $I19, rx78_start[5]
    store_lex unicode:"$\x{a2}", rx78_cur
    length rx78_eos, rx78_tgt
    eq $I19, 1, rx78_restart192
    gt rx78_pos, rx78_eos, rx78_fail193
    repr_get_attr_int $I11, self, rx78_curclass, "$!from"
    ne $I11, -1, rxscan79_done199
    goto rxscan79_scan198
  rxscan79_loop197:
    inc rx78_pos
    gt rx78_pos, rx78_eos, rx78_fail193
    repr_bind_attr_int rx78_cur, rx78_curclass, "$!from", rx78_pos
  rxscan79_scan198:
    nqp_rxmark rx78_bstack, rxscan79_loop197, rx78_pos, 0
  rxscan79_done199:
    rx78_cur."!dba"(rx78_pos, "infix stopper")
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt80_0201
    nqp_push_label $P11, alt80_1216
    nqp_push_label $P11, alt80_2227
    nqp_rxmark rx78_bstack, alt80_end200, -1, 0
    rx78_cur."!alt"(rx78_pos, "alt_nfa__5_1367388594.84029", $P11)
    goto rx78_fail193
  alt80_0201:
    .const 'Sub' $P5001 = 'cuid_15_1367388594.4399' 
    capture_lex $P5001
    repr_bind_attr_int rx78_cur, rx78_curclass, "$!pos", rx78_pos
    $P11 = rx78_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx78_curclass, "$!pos"
    lt $I11, 0, rx78_fail193
    goto alt80_end200
  alt80_1216:
    .const 'Sub' $P5002 = 'cuid_16_1367388594.4399' 
    capture_lex $P5002
    repr_bind_attr_int rx78_cur, rx78_curclass, "$!pos", rx78_pos
    $P11 = rx78_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx78_curclass, "$!pos"
    lt $I11, 0, rx78_fail193
    goto alt80_end200
  alt80_2227:
    .const 'Sub' $P5003 = 'cuid_17_1367388594.4399' 
    capture_lex $P5003
    repr_bind_attr_int rx78_cur, rx78_curclass, "$!pos", rx78_pos
    $P11 = rx78_cur."before"($P5003)
    repr_get_attr_int $I11, $P11, rx78_curclass, "$!pos"
    lt $I11, 0, rx78_fail193
    goto alt80_end200
  alt80_end200:
    rx78_cur."!cursor_pass"(rx78_pos, "infixstopper", 'backtrack'=>1)
    .return (rx78_cur)
  rx78_restart192:
    repr_get_attr_obj rx78_cstack, rx78_cur, rx78_curclass, "$!cstack"
  rx78_fail193:
    unless rx78_bstack, rx78_done191
    pop $I19, rx78_bstack
    if_null rx78_cstack, rx78_cstack_done196
    unless rx78_cstack, rx78_cstack_done196
    dec $I19
    set $P11, rx78_cstack[$I19]
  rx78_cstack_done196:
    pop rx78_rep, rx78_bstack
    pop rx78_pos, rx78_bstack
    pop $I19, rx78_bstack
    lt rx78_pos, -1, rx78_done191
    lt rx78_pos, 0, rx78_fail193
    eq $I19, 0, rx78_fail193
    nqp_islist $I20, rx78_cstack
    unless $I20, rx78_jump194
    elements $I18, rx78_bstack
    le $I18, 0, rx78_cut195
    dec $I18
    set $I18, rx78_bstack[$I18]
  rx78_cut195:
    assign rx78_cstack, $I18
  rx78_jump194:
    jump $I19
  rx78_done191:
    rx78_cur."!cursor_fail"()
    .return (rx78_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_15_1367388594.4399") :anon :lex :outer("cuid_14_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx81_start
    .local string rx81_tgt
    .local int rx81_pos
    .local int rx81_off
    .local int rx81_eos
    .local int rx81_rep
    .local pmc rx81_cur
    .local pmc rx81_curclass
    .local pmc rx81_bstack
    .local pmc rx81_cstack
    rx81_start = self."!cursor_start_all"()
    set rx81_cur, rx81_start[0]
    set rx81_tgt, rx81_start[1]
    set rx81_pos, rx81_start[2]
    set rx81_curclass, rx81_start[3]
    set rx81_bstack, rx81_start[4]
    set $I19, rx81_start[5]
    store_lex unicode:"$\x{a2}", rx81_cur
    length rx81_eos, rx81_tgt
    eq $I19, 1, rx81_restart204
    gt rx81_pos, rx81_eos, rx81_fail205
    repr_get_attr_int $I11, self, rx81_curclass, "$!from"
    ne $I11, -1, rxscan82_done211
    goto rxscan82_scan210
  rxscan82_loop209:
    inc rx81_pos
    gt rx81_pos, rx81_eos, rx81_fail205
    repr_bind_attr_int rx81_cur, rx81_curclass, "$!from", rx81_pos
  rxscan82_scan210:
    nqp_rxmark rx81_bstack, rxscan82_loop209, rx81_pos, 0
  rxscan82_done211:
  alt83_0213:
    nqp_rxmark rx81_bstack, alt83_1214, rx81_pos, 0
    add $I11, rx81_pos, 1
    gt $I11, rx81_eos, rx81_fail205
    substr $S10, rx81_tgt, rx81_pos, 1
    ne $S10, ucs4:")", rx81_fail205
    add rx81_pos, 1
    goto alt83_end212
  alt83_1214:
    nqp_rxmark rx81_bstack, alt83_2215, rx81_pos, 0
    add $I11, rx81_pos, 1
    gt $I11, rx81_eos, rx81_fail205
    substr $S10, rx81_tgt, rx81_pos, 1
    ne $S10, ucs4:"}", rx81_fail205
    add rx81_pos, 1
    goto alt83_end212
  alt83_2215:
    add $I11, rx81_pos, 1
    gt $I11, rx81_eos, rx81_fail205
    substr $S10, rx81_tgt, rx81_pos, 1
    ne $S10, ucs4:"]", rx81_fail205
    add rx81_pos, 1
  alt83_end212:
    rx81_cur."!cursor_pass"(rx81_pos, 'backtrack'=>1)
    .return (rx81_cur)
  rx81_restart204:
    repr_get_attr_obj rx81_cstack, rx81_cur, rx81_curclass, "$!cstack"
  rx81_fail205:
    unless rx81_bstack, rx81_done203
    pop $I19, rx81_bstack
    if_null rx81_cstack, rx81_cstack_done208
    unless rx81_cstack, rx81_cstack_done208
    dec $I19
    set $P11, rx81_cstack[$I19]
  rx81_cstack_done208:
    pop rx81_rep, rx81_bstack
    pop rx81_pos, rx81_bstack
    pop $I19, rx81_bstack
    lt rx81_pos, -1, rx81_done203
    lt rx81_pos, 0, rx81_fail205
    eq $I19, 0, rx81_fail205
    nqp_islist $I20, rx81_cstack
    unless $I20, rx81_jump206
    elements $I18, rx81_bstack
    le $I18, 0, rx81_cut207
    dec $I18
    set $I18, rx81_bstack[$I18]
  rx81_cut207:
    assign rx81_cstack, $I18
  rx81_jump206:
    jump $I19
  rx81_done203:
    rx81_cur."!cursor_fail"()
    .return (rx81_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_16_1367388594.4399") :anon :lex :outer("cuid_14_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx84_start
    .local string rx84_tgt
    .local int rx84_pos
    .local int rx84_off
    .local int rx84_eos
    .local int rx84_rep
    .local pmc rx84_cur
    .local pmc rx84_curclass
    .local pmc rx84_bstack
    .local pmc rx84_cstack
    rx84_start = self."!cursor_start_all"()
    set rx84_cur, rx84_start[0]
    set rx84_tgt, rx84_start[1]
    set rx84_pos, rx84_start[2]
    set rx84_curclass, rx84_start[3]
    set rx84_bstack, rx84_start[4]
    set $I19, rx84_start[5]
    store_lex unicode:"$\x{a2}", rx84_cur
    length rx84_eos, rx84_tgt
    eq $I19, 1, rx84_restart219
    gt rx84_pos, rx84_eos, rx84_fail220
    repr_get_attr_int $I11, self, rx84_curclass, "$!from"
    ne $I11, -1, rxscan85_done226
    goto rxscan85_scan225
  rxscan85_loop224:
    inc rx84_pos
    gt rx84_pos, rx84_eos, rx84_fail220
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!from", rx84_pos
  rxscan85_scan225:
    nqp_rxmark rx84_bstack, rxscan85_loop224, rx84_pos, 0
  rxscan85_done226:
    add $I11, rx84_pos, 1
    gt $I11, rx84_eos, rx84_fail220
    substr $S10, rx84_tgt, rx84_pos, 1
    ne $S10, ucs4:">", rx84_fail220
    add rx84_pos, 1
    ge rx84_pos, rx84_eos, rx84_fail220
    substr $S11, rx84_tgt, rx84_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx84_fail220
    inc rx84_pos
    rx84_cur."!cursor_pass"(rx84_pos, 'backtrack'=>1)
    .return (rx84_cur)
  rx84_restart219:
    repr_get_attr_obj rx84_cstack, rx84_cur, rx84_curclass, "$!cstack"
  rx84_fail220:
    unless rx84_bstack, rx84_done218
    pop $I19, rx84_bstack
    if_null rx84_cstack, rx84_cstack_done223
    unless rx84_cstack, rx84_cstack_done223
    dec $I19
    set $P11, rx84_cstack[$I19]
  rx84_cstack_done223:
    pop rx84_rep, rx84_bstack
    pop rx84_pos, rx84_bstack
    pop $I19, rx84_bstack
    lt rx84_pos, -1, rx84_done218
    lt rx84_pos, 0, rx84_fail220
    eq $I19, 0, rx84_fail220
    nqp_islist $I20, rx84_cstack
    unless $I20, rx84_jump221
    elements $I18, rx84_bstack
    le $I18, 0, rx84_cut222
    dec $I18
    set $I18, rx84_bstack[$I18]
  rx84_cut222:
    assign rx84_cstack, $I18
  rx84_jump221:
    jump $I19
  rx84_done218:
    rx84_cur."!cursor_fail"()
    .return (rx84_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_17_1367388594.4399") :anon :lex :outer("cuid_14_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx86_start
    .local string rx86_tgt
    .local int rx86_pos
    .local int rx86_off
    .local int rx86_eos
    .local int rx86_rep
    .local pmc rx86_cur
    .local pmc rx86_curclass
    .local pmc rx86_bstack
    .local pmc rx86_cstack
    rx86_start = self."!cursor_start_all"()
    set rx86_cur, rx86_start[0]
    set rx86_tgt, rx86_start[1]
    set rx86_pos, rx86_start[2]
    set rx86_curclass, rx86_start[3]
    set rx86_bstack, rx86_start[4]
    set $I19, rx86_start[5]
    store_lex unicode:"$\x{a2}", rx86_cur
    length rx86_eos, rx86_tgt
    eq $I19, 1, rx86_restart230
    gt rx86_pos, rx86_eos, rx86_fail231
    repr_get_attr_int $I11, self, rx86_curclass, "$!from"
    ne $I11, -1, rxscan87_done237
    goto rxscan87_scan236
  rxscan87_loop235:
    inc rx86_pos
    gt rx86_pos, rx86_eos, rx86_fail231
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!from", rx86_pos
  rxscan87_scan236:
    nqp_rxmark rx86_bstack, rxscan87_loop235, rx86_pos, 0
  rxscan87_done237:
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."rxstopper"()
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail231
    goto rxsubrule88_pass238
  rxsubrule88_back239:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail231
  rxsubrule88_pass238:
    rx86_cstack = rx86_cur."!cursor_capture"($P11, "rxstopper")
    set_addr $I11, rxsubrule88_back239
    push rx86_bstack, $I11
    push rx86_bstack, 0
    push rx86_bstack, rx86_pos
    elements $I11, rx86_cstack
    push rx86_bstack, $I11
    repr_get_attr_int rx86_pos, $P11, rx86_curclass, "$!pos"
    rx86_cur."!cursor_pass"(rx86_pos, 'backtrack'=>1)
    .return (rx86_cur)
  rx86_restart230:
    repr_get_attr_obj rx86_cstack, rx86_cur, rx86_curclass, "$!cstack"
  rx86_fail231:
    unless rx86_bstack, rx86_done229
    pop $I19, rx86_bstack
    if_null rx86_cstack, rx86_cstack_done234
    unless rx86_cstack, rx86_cstack_done234
    dec $I19
    set $P11, rx86_cstack[$I19]
  rx86_cstack_done234:
    pop rx86_rep, rx86_bstack
    pop rx86_pos, rx86_bstack
    pop $I19, rx86_bstack
    lt rx86_pos, -1, rx86_done229
    lt rx86_pos, 0, rx86_fail231
    eq $I19, 0, rx86_fail231
    nqp_islist $I20, rx86_cstack
    unless $I20, rx86_jump232
    elements $I18, rx86_bstack
    le $I18, 0, rx86_cut233
    dec $I18
    set $I18, rx86_bstack[$I18]
  rx86_cut233:
    assign rx86_cstack, $I18
  rx86_jump232:
    jump $I19
  rx86_done229:
    rx86_cur."!cursor_fail"()
    .return (rx86_cur) 
.end
.HLL "nqp"
.namespace []
.sub "rxstopper" :subid("cuid_18_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 118
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx89_start
    .local string rx89_tgt
    .local int rx89_pos
    .local int rx89_off
    .local int rx89_eos
    .local int rx89_rep
    .local pmc rx89_cur
    .local pmc rx89_curclass
    .local pmc rx89_bstack
    .local pmc rx89_cstack
    rx89_start = self."!cursor_start_all"()
    set rx89_cur, rx89_start[0]
    set rx89_tgt, rx89_start[1]
    set rx89_pos, rx89_start[2]
    set rx89_curclass, rx89_start[3]
    set rx89_bstack, rx89_start[4]
    set $I19, rx89_start[5]
    store_lex unicode:"$\x{a2}", rx89_cur
    length rx89_eos, rx89_tgt
    eq $I19, 1, rx89_restart242
    gt rx89_pos, rx89_eos, rx89_fail243
    repr_get_attr_int $I11, self, rx89_curclass, "$!from"
    ne $I11, -1, rxscan90_done249
    goto rxscan90_scan248
  rxscan90_loop247:
    inc rx89_pos
    gt rx89_pos, rx89_eos, rx89_fail243
    repr_bind_attr_int rx89_cur, rx89_curclass, "$!from", rx89_pos
  rxscan90_scan248:
    nqp_rxmark rx89_bstack, rxscan90_loop247, rx89_pos, 0
  rxscan90_done249:
    lt rx89_pos, rx89_eos, rx89_fail243
    rx89_cur."!cursor_pass"(rx89_pos, "rxstopper", 'backtrack'=>1)
    .return (rx89_cur)
  rx89_restart242:
    repr_get_attr_obj rx89_cstack, rx89_cur, rx89_curclass, "$!cstack"
  rx89_fail243:
    unless rx89_bstack, rx89_done241
    pop $I19, rx89_bstack
    if_null rx89_cstack, rx89_cstack_done246
    unless rx89_cstack, rx89_cstack_done246
    dec $I19
    set $P11, rx89_cstack[$I19]
  rx89_cstack_done246:
    pop rx89_rep, rx89_bstack
    pop rx89_pos, rx89_bstack
    pop $I19, rx89_bstack
    lt rx89_pos, -1, rx89_done241
    lt rx89_pos, 0, rx89_fail243
    eq $I19, 0, rx89_fail243
    nqp_islist $I20, rx89_cstack
    unless $I20, rx89_jump244
    elements $I18, rx89_bstack
    le $I18, 0, rx89_cut245
    dec $I18
    set $I18, rx89_bstack[$I18]
  rx89_cut245:
    assign rx89_cstack, $I18
  rx89_jump244:
    jump $I19
  rx89_done241:
    rx89_cur."!cursor_fail"()
    .return (rx89_cur) 
.end
.HLL "nqp"
.namespace []
.sub "termaltseq" :subid("cuid_19_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 120
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_185_1367388594.4399' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx92_start
    .local string rx92_tgt
    .local int rx92_pos
    .local int rx92_off
    .local int rx92_eos
    .local int rx92_rep
    .local pmc rx92_cur
    .local pmc rx92_curclass
    .local pmc rx92_bstack
    .local pmc rx92_cstack
    rx92_start = self."!cursor_start_all"()
    set rx92_cur, rx92_start[0]
    set rx92_tgt, rx92_start[1]
    set rx92_pos, rx92_start[2]
    set rx92_curclass, rx92_start[3]
    set rx92_bstack, rx92_start[4]
    set $I19, rx92_start[5]
    store_lex unicode:"$\x{a2}", rx92_cur
    length rx92_eos, rx92_tgt
    eq $I19, 1, rx92_restart253
    gt rx92_pos, rx92_eos, rx92_fail254
    repr_get_attr_int $I11, self, rx92_curclass, "$!from"
    ne $I11, -1, rxscan93_done260
    goto rxscan93_scan259
  rxscan93_loop258:
    inc rx92_pos
    gt rx92_pos, rx92_eos, rx92_fail254
    repr_bind_attr_int rx92_cur, rx92_curclass, "$!from", rx92_pos
  rxscan93_scan259:
    nqp_rxmark rx92_bstack, rxscan93_loop258, rx92_pos, 0
  rxscan93_done260:
    repr_bind_attr_int rx92_cur, rx92_curclass, "$!pos", rx92_pos
    $P11 = rx92_cur."termconjseq"()
    repr_get_attr_int $I11, $P11, rx92_curclass, "$!pos"
    lt $I11, 0, rx92_fail254
    nqp_rxmark rx92_bstack, rxsubrule94_pass261, -1, 0
  rxsubrule94_pass261:
    rx92_cstack = rx92_cur."!cursor_capture"($P11, "termconjseq")
    repr_get_attr_int rx92_pos, $P11, rx92_curclass, "$!pos"
    nqp_rxmark rx92_bstack, rxquantr95_done263, rx92_pos, 0
  rxquantr95_loop262:
    add $I11, rx92_pos, 2
    gt $I11, rx92_eos, rx92_fail254
    substr $S10, rx92_tgt, rx92_pos, 2
    ne $S10, ucs4:"||", rx92_fail254
    add rx92_pos, 2
  alt96_0265:
    nqp_rxmark rx92_bstack, alt96_1267, rx92_pos, 0
    repr_bind_attr_int rx92_cur, rx92_curclass, "$!pos", rx92_pos
    store_lex unicode:"$\x{a2}", rx92_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_185_1367388594.4399' 
    capture_lex $P5002
    $P5003 = $P5002()
    repr_bind_attr_int rx92_cur, rx92_curclass, "$!pos", rx92_pos
    $P11 = rx92_cur."termconjseq"()
    repr_get_attr_int $I11, $P11, rx92_curclass, "$!pos"
    lt $I11, 0, rx92_fail254
    nqp_rxmark rx92_bstack, rxsubrule97_pass266, -1, 0
  rxsubrule97_pass266:
    rx92_cstack = rx92_cur."!cursor_capture"($P11, "termconjseq")
    repr_get_attr_int rx92_pos, $P11, rx92_curclass, "$!pos"
    goto alt96_end264
  alt96_1267:
    repr_bind_attr_int rx92_cur, rx92_curclass, "$!pos", rx92_pos
    $P11 = rx92_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx92_curclass, "$!pos"
    lt $I11, 0, rx92_fail254
    repr_get_attr_int rx92_pos, $P11, rx92_curclass, "$!pos"
  alt96_end264:
    nqp_rxpeek $I19, rx92_bstack, rxquantr95_done263
    inc $I19
    inc $I19
    set rx92_rep, rx92_bstack[$I19]
    nqp_rxcommit rx92_bstack, rxquantr95_done263
    inc rx92_rep
    nqp_rxmark rx92_bstack, rxquantr95_done263, rx92_pos, rx92_rep
    goto rxquantr95_loop262
  rxquantr95_done263:
    rx92_cur."!cursor_pass"(rx92_pos, "termaltseq", 'backtrack'=>1)
    .return (rx92_cur)
  rx92_restart253:
    repr_get_attr_obj rx92_cstack, rx92_cur, rx92_curclass, "$!cstack"
  rx92_fail254:
    unless rx92_bstack, rx92_done252
    pop $I19, rx92_bstack
    if_null rx92_cstack, rx92_cstack_done257
    unless rx92_cstack, rx92_cstack_done257
    dec $I19
    set $P11, rx92_cstack[$I19]
  rx92_cstack_done257:
    pop rx92_rep, rx92_bstack
    pop rx92_pos, rx92_bstack
    pop $I19, rx92_bstack
    lt rx92_pos, -1, rx92_done252
    lt rx92_pos, 0, rx92_fail254
    eq $I19, 0, rx92_fail254
    nqp_islist $I20, rx92_cstack
    unless $I20, rx92_jump255
    elements $I18, rx92_bstack
    le $I18, 0, rx92_cut256
    dec $I18
    set $I18, rx92_bstack[$I18]
  rx92_cut256:
    assign rx92_cstack, $I18
  rx92_jump255:
    jump $I19
  rx92_done252:
    rx92_cur."!cursor_fail"()
    .return (rx92_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_185_1367388594.4399") :anon :lex :outer("cuid_19_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 122

    box $P5001, 1
    store_dynamic_lex "$*SEQ", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "termconjseq" :subid("cuid_20_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 125
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_186_1367388594.4399' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx99_start
    .local string rx99_tgt
    .local int rx99_pos
    .local int rx99_off
    .local int rx99_eos
    .local int rx99_rep
    .local pmc rx99_cur
    .local pmc rx99_curclass
    .local pmc rx99_bstack
    .local pmc rx99_cstack
    rx99_start = self."!cursor_start_all"()
    set rx99_cur, rx99_start[0]
    set rx99_tgt, rx99_start[1]
    set rx99_pos, rx99_start[2]
    set rx99_curclass, rx99_start[3]
    set rx99_bstack, rx99_start[4]
    set $I19, rx99_start[5]
    store_lex unicode:"$\x{a2}", rx99_cur
    length rx99_eos, rx99_tgt
    eq $I19, 1, rx99_restart271
    gt rx99_pos, rx99_eos, rx99_fail272
    repr_get_attr_int $I11, self, rx99_curclass, "$!from"
    ne $I11, -1, rxscan100_done278
    goto rxscan100_scan277
  rxscan100_loop276:
    inc rx99_pos
    gt rx99_pos, rx99_eos, rx99_fail272
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!from", rx99_pos
  rxscan100_scan277:
    nqp_rxmark rx99_bstack, rxscan100_loop276, rx99_pos, 0
  rxscan100_done278:
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!pos", rx99_pos
    $P11 = rx99_cur."termalt"()
    repr_get_attr_int $I11, $P11, rx99_curclass, "$!pos"
    lt $I11, 0, rx99_fail272
    nqp_rxmark rx99_bstack, rxsubrule101_pass279, -1, 0
  rxsubrule101_pass279:
    rx99_cstack = rx99_cur."!cursor_capture"($P11, "termalt")
    repr_get_attr_int rx99_pos, $P11, rx99_curclass, "$!pos"
    nqp_rxmark rx99_bstack, rxquantr102_done281, rx99_pos, 0
  rxquantr102_loop280:
    add $I11, rx99_pos, 2
    gt $I11, rx99_eos, rx99_fail272
    substr $S10, rx99_tgt, rx99_pos, 2
    ne $S10, ucs4:"&&", rx99_fail272
    add rx99_pos, 2
  alt103_0283:
    nqp_rxmark rx99_bstack, alt103_1285, rx99_pos, 0
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!pos", rx99_pos
    store_lex unicode:"$\x{a2}", rx99_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_186_1367388594.4399' 
    capture_lex $P5002
    $P5003 = $P5002()
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!pos", rx99_pos
    $P11 = rx99_cur."termalt"()
    repr_get_attr_int $I11, $P11, rx99_curclass, "$!pos"
    lt $I11, 0, rx99_fail272
    nqp_rxmark rx99_bstack, rxsubrule104_pass284, -1, 0
  rxsubrule104_pass284:
    rx99_cstack = rx99_cur."!cursor_capture"($P11, "termalt")
    repr_get_attr_int rx99_pos, $P11, rx99_curclass, "$!pos"
    goto alt103_end282
  alt103_1285:
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!pos", rx99_pos
    $P11 = rx99_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx99_curclass, "$!pos"
    lt $I11, 0, rx99_fail272
    repr_get_attr_int rx99_pos, $P11, rx99_curclass, "$!pos"
  alt103_end282:
    nqp_rxpeek $I19, rx99_bstack, rxquantr102_done281
    inc $I19
    inc $I19
    set rx99_rep, rx99_bstack[$I19]
    nqp_rxcommit rx99_bstack, rxquantr102_done281
    inc rx99_rep
    nqp_rxmark rx99_bstack, rxquantr102_done281, rx99_pos, rx99_rep
    goto rxquantr102_loop280
  rxquantr102_done281:
    rx99_cur."!cursor_pass"(rx99_pos, "termconjseq", 'backtrack'=>1)
    .return (rx99_cur)
  rx99_restart271:
    repr_get_attr_obj rx99_cstack, rx99_cur, rx99_curclass, "$!cstack"
  rx99_fail272:
    unless rx99_bstack, rx99_done270
    pop $I19, rx99_bstack
    if_null rx99_cstack, rx99_cstack_done275
    unless rx99_cstack, rx99_cstack_done275
    dec $I19
    set $P11, rx99_cstack[$I19]
  rx99_cstack_done275:
    pop rx99_rep, rx99_bstack
    pop rx99_pos, rx99_bstack
    pop $I19, rx99_bstack
    lt rx99_pos, -1, rx99_done270
    lt rx99_pos, 0, rx99_fail272
    eq $I19, 0, rx99_fail272
    nqp_islist $I20, rx99_cstack
    unless $I20, rx99_jump273
    elements $I18, rx99_bstack
    le $I18, 0, rx99_cut274
    dec $I18
    set $I18, rx99_bstack[$I18]
  rx99_cut274:
    assign rx99_cstack, $I18
  rx99_jump273:
    jump $I19
  rx99_done270:
    rx99_cur."!cursor_fail"()
    .return (rx99_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_186_1367388594.4399") :anon :lex :outer("cuid_20_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 127

    box $P5001, 0
    store_dynamic_lex "$*SEQ", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "termalt" :subid("cuid_21_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 130
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_187_1367388594.4399' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx106_start
    .local string rx106_tgt
    .local int rx106_pos
    .local int rx106_off
    .local int rx106_eos
    .local int rx106_rep
    .local pmc rx106_cur
    .local pmc rx106_curclass
    .local pmc rx106_bstack
    .local pmc rx106_cstack
    rx106_start = self."!cursor_start_all"()
    set rx106_cur, rx106_start[0]
    set rx106_tgt, rx106_start[1]
    set rx106_pos, rx106_start[2]
    set rx106_curclass, rx106_start[3]
    set rx106_bstack, rx106_start[4]
    set $I19, rx106_start[5]
    store_lex unicode:"$\x{a2}", rx106_cur
    length rx106_eos, rx106_tgt
    eq $I19, 1, rx106_restart289
    gt rx106_pos, rx106_eos, rx106_fail290
    repr_get_attr_int $I11, self, rx106_curclass, "$!from"
    ne $I11, -1, rxscan107_done296
    goto rxscan107_scan295
  rxscan107_loop294:
    inc rx106_pos
    gt rx106_pos, rx106_eos, rx106_fail290
    repr_bind_attr_int rx106_cur, rx106_curclass, "$!from", rx106_pos
  rxscan107_scan295:
    nqp_rxmark rx106_bstack, rxscan107_loop294, rx106_pos, 0
  rxscan107_done296:
    repr_bind_attr_int rx106_cur, rx106_curclass, "$!pos", rx106_pos
    $P11 = rx106_cur."termconj"()
    repr_get_attr_int $I11, $P11, rx106_curclass, "$!pos"
    lt $I11, 0, rx106_fail290
    nqp_rxmark rx106_bstack, rxsubrule108_pass297, -1, 0
  rxsubrule108_pass297:
    rx106_cstack = rx106_cur."!cursor_capture"($P11, "termconj")
    repr_get_attr_int rx106_pos, $P11, rx106_curclass, "$!pos"
    nqp_rxmark rx106_bstack, rxquantr109_done299, rx106_pos, 0
  rxquantr109_loop298:
    add $I11, rx106_pos, 1
    gt $I11, rx106_eos, rx106_fail290
    substr $S10, rx106_tgt, rx106_pos, 1
    ne $S10, ucs4:"|", rx106_fail290
    add rx106_pos, 1
    ge rx106_pos, rx106_eos, rx106_fail290
    substr $S11, rx106_tgt, rx106_pos, 1
    index $I11, ucs4:"|", $S11
    ge $I11, 0, rx106_fail290
  alt110_0301:
    nqp_rxmark rx106_bstack, alt110_1303, rx106_pos, 0
    repr_bind_attr_int rx106_cur, rx106_curclass, "$!pos", rx106_pos
    store_lex unicode:"$\x{a2}", rx106_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_187_1367388594.4399' 
    capture_lex $P5002
    $P5003 = $P5002()
    repr_bind_attr_int rx106_cur, rx106_curclass, "$!pos", rx106_pos
    $P11 = rx106_cur."termconj"()
    repr_get_attr_int $I11, $P11, rx106_curclass, "$!pos"
    lt $I11, 0, rx106_fail290
    nqp_rxmark rx106_bstack, rxsubrule111_pass302, -1, 0
  rxsubrule111_pass302:
    rx106_cstack = rx106_cur."!cursor_capture"($P11, "termconj")
    repr_get_attr_int rx106_pos, $P11, rx106_curclass, "$!pos"
    goto alt110_end300
  alt110_1303:
    repr_bind_attr_int rx106_cur, rx106_curclass, "$!pos", rx106_pos
    $P11 = rx106_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx106_curclass, "$!pos"
    lt $I11, 0, rx106_fail290
    repr_get_attr_int rx106_pos, $P11, rx106_curclass, "$!pos"
  alt110_end300:
    nqp_rxpeek $I19, rx106_bstack, rxquantr109_done299
    inc $I19
    inc $I19
    set rx106_rep, rx106_bstack[$I19]
    nqp_rxcommit rx106_bstack, rxquantr109_done299
    inc rx106_rep
    nqp_rxmark rx106_bstack, rxquantr109_done299, rx106_pos, rx106_rep
    goto rxquantr109_loop298
  rxquantr109_done299:
    rx106_cur."!cursor_pass"(rx106_pos, "termalt", 'backtrack'=>1)
    .return (rx106_cur)
  rx106_restart289:
    repr_get_attr_obj rx106_cstack, rx106_cur, rx106_curclass, "$!cstack"
  rx106_fail290:
    unless rx106_bstack, rx106_done288
    pop $I19, rx106_bstack
    if_null rx106_cstack, rx106_cstack_done293
    unless rx106_cstack, rx106_cstack_done293
    dec $I19
    set $P11, rx106_cstack[$I19]
  rx106_cstack_done293:
    pop rx106_rep, rx106_bstack
    pop rx106_pos, rx106_bstack
    pop $I19, rx106_bstack
    lt rx106_pos, -1, rx106_done288
    lt rx106_pos, 0, rx106_fail290
    eq $I19, 0, rx106_fail290
    nqp_islist $I20, rx106_cstack
    unless $I20, rx106_jump291
    elements $I18, rx106_bstack
    le $I18, 0, rx106_cut292
    dec $I18
    set $I18, rx106_bstack[$I18]
  rx106_cut292:
    assign rx106_cstack, $I18
  rx106_jump291:
    jump $I19
  rx106_done288:
    rx106_cur."!cursor_fail"()
    .return (rx106_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_187_1367388594.4399") :anon :lex :outer("cuid_21_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 132

    box $P5001, 0
    store_dynamic_lex "$*SEQ", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "termconj" :subid("cuid_22_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 135
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_188_1367388594.4399' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx113_start
    .local string rx113_tgt
    .local int rx113_pos
    .local int rx113_off
    .local int rx113_eos
    .local int rx113_rep
    .local pmc rx113_cur
    .local pmc rx113_curclass
    .local pmc rx113_bstack
    .local pmc rx113_cstack
    rx113_start = self."!cursor_start_all"()
    set rx113_cur, rx113_start[0]
    set rx113_tgt, rx113_start[1]
    set rx113_pos, rx113_start[2]
    set rx113_curclass, rx113_start[3]
    set rx113_bstack, rx113_start[4]
    set $I19, rx113_start[5]
    store_lex unicode:"$\x{a2}", rx113_cur
    length rx113_eos, rx113_tgt
    eq $I19, 1, rx113_restart307
    gt rx113_pos, rx113_eos, rx113_fail308
    repr_get_attr_int $I11, self, rx113_curclass, "$!from"
    ne $I11, -1, rxscan114_done314
    goto rxscan114_scan313
  rxscan114_loop312:
    inc rx113_pos
    gt rx113_pos, rx113_eos, rx113_fail308
    repr_bind_attr_int rx113_cur, rx113_curclass, "$!from", rx113_pos
  rxscan114_scan313:
    nqp_rxmark rx113_bstack, rxscan114_loop312, rx113_pos, 0
  rxscan114_done314:
    repr_bind_attr_int rx113_cur, rx113_curclass, "$!pos", rx113_pos
    $P11 = rx113_cur."termish"()
    repr_get_attr_int $I11, $P11, rx113_curclass, "$!pos"
    lt $I11, 0, rx113_fail308
    nqp_rxmark rx113_bstack, rxsubrule115_pass315, -1, 0
  rxsubrule115_pass315:
    rx113_cstack = rx113_cur."!cursor_capture"($P11, "termish")
    repr_get_attr_int rx113_pos, $P11, rx113_curclass, "$!pos"
    nqp_rxmark rx113_bstack, rxquantr116_done317, rx113_pos, 0
  rxquantr116_loop316:
    add $I11, rx113_pos, 1
    gt $I11, rx113_eos, rx113_fail308
    substr $S10, rx113_tgt, rx113_pos, 1
    ne $S10, ucs4:"&", rx113_fail308
    add rx113_pos, 1
    ge rx113_pos, rx113_eos, rx113_fail308
    substr $S11, rx113_tgt, rx113_pos, 1
    index $I11, ucs4:"&", $S11
    ge $I11, 0, rx113_fail308
  alt117_0319:
    nqp_rxmark rx113_bstack, alt117_1321, rx113_pos, 0
    repr_bind_attr_int rx113_cur, rx113_curclass, "$!pos", rx113_pos
    store_lex unicode:"$\x{a2}", rx113_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_188_1367388594.4399' 
    capture_lex $P5002
    $P5003 = $P5002()
    repr_bind_attr_int rx113_cur, rx113_curclass, "$!pos", rx113_pos
    $P11 = rx113_cur."termish"()
    repr_get_attr_int $I11, $P11, rx113_curclass, "$!pos"
    lt $I11, 0, rx113_fail308
    nqp_rxmark rx113_bstack, rxsubrule118_pass320, -1, 0
  rxsubrule118_pass320:
    rx113_cstack = rx113_cur."!cursor_capture"($P11, "termish")
    repr_get_attr_int rx113_pos, $P11, rx113_curclass, "$!pos"
    goto alt117_end318
  alt117_1321:
    repr_bind_attr_int rx113_cur, rx113_curclass, "$!pos", rx113_pos
    $P11 = rx113_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx113_curclass, "$!pos"
    lt $I11, 0, rx113_fail308
    repr_get_attr_int rx113_pos, $P11, rx113_curclass, "$!pos"
  alt117_end318:
    nqp_rxpeek $I19, rx113_bstack, rxquantr116_done317
    inc $I19
    inc $I19
    set rx113_rep, rx113_bstack[$I19]
    nqp_rxcommit rx113_bstack, rxquantr116_done317
    inc rx113_rep
    nqp_rxmark rx113_bstack, rxquantr116_done317, rx113_pos, rx113_rep
    goto rxquantr116_loop316
  rxquantr116_done317:
    rx113_cur."!cursor_pass"(rx113_pos, "termconj", 'backtrack'=>1)
    .return (rx113_cur)
  rx113_restart307:
    repr_get_attr_obj rx113_cstack, rx113_cur, rx113_curclass, "$!cstack"
  rx113_fail308:
    unless rx113_bstack, rx113_done306
    pop $I19, rx113_bstack
    if_null rx113_cstack, rx113_cstack_done311
    unless rx113_cstack, rx113_cstack_done311
    dec $I19
    set $P11, rx113_cstack[$I19]
  rx113_cstack_done311:
    pop rx113_rep, rx113_bstack
    pop rx113_pos, rx113_bstack
    pop $I19, rx113_bstack
    lt rx113_pos, -1, rx113_done306
    lt rx113_pos, 0, rx113_fail308
    eq $I19, 0, rx113_fail308
    nqp_islist $I20, rx113_cstack
    unless $I20, rx113_jump309
    elements $I18, rx113_bstack
    le $I18, 0, rx113_cut310
    dec $I18
    set $I18, rx113_bstack[$I18]
  rx113_cut310:
    assign rx113_cstack, $I18
  rx113_jump309:
    jump $I19
  rx113_done306:
    rx113_cur."!cursor_fail"()
    .return (rx113_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_188_1367388594.4399") :anon :lex :outer("cuid_22_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 137

    box $P5001, 0
    store_dynamic_lex "$*SEQ", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "termish" :subid("cuid_23_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 140
    .param pmc _lex_param_0 
    .const 'Sub' $P5006 = 'cuid_24_1367388594.4399' 
    capture_lex $P5006 
    .const 'Sub' $P5006 = 'cuid_25_1367388594.4399' 
    capture_lex $P5006 
    .const 'Sub' $P5006 = 'cuid_189_1367388594.4399' 
    capture_lex $P5006 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx120_start
    .local string rx120_tgt
    .local int rx120_pos
    .local int rx120_off
    .local int rx120_eos
    .local int rx120_rep
    .local pmc rx120_cur
    .local pmc rx120_curclass
    .local pmc rx120_bstack
    .local pmc rx120_cstack
    rx120_start = self."!cursor_start_all"()
    set rx120_cur, rx120_start[0]
    set rx120_tgt, rx120_start[1]
    set rx120_pos, rx120_start[2]
    set rx120_curclass, rx120_start[3]
    set rx120_bstack, rx120_start[4]
    set $I19, rx120_start[5]
    store_lex unicode:"$\x{a2}", rx120_cur
    length rx120_eos, rx120_tgt
    eq $I19, 1, rx120_restart325
    gt rx120_pos, rx120_eos, rx120_fail326
    repr_get_attr_int $I11, self, rx120_curclass, "$!from"
    ne $I11, -1, rxscan121_done332
    goto rxscan121_scan331
  rxscan121_loop330:
    inc rx120_pos
    gt rx120_pos, rx120_eos, rx120_fail326
    repr_bind_attr_int rx120_cur, rx120_curclass, "$!from", rx120_pos
  rxscan121_scan331:
    nqp_rxmark rx120_bstack, rxscan121_loop330, rx120_pos, 0
  rxscan121_done332:
  alt122_0334:
    nqp_rxmark rx120_bstack, alt122_1339, rx120_pos, 0
    nqp_rxmark rx120_bstack, rxquantr123_done336, -1, 0
  rxquantr123_loop335:
    repr_bind_attr_int rx120_cur, rx120_curclass, "$!pos", rx120_pos
    $P11 = rx120_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx120_curclass, "$!pos"
    lt $I11, 0, rx120_fail326
    goto rxsubrule124_pass337
  rxsubrule124_back338:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx120_curclass, "$!pos"
    lt $I11, 0, rx120_fail326
  rxsubrule124_pass337:
    rx120_cstack = rx120_cur."!cursor_capture"($P11, "noun")
    set_addr $I11, rxsubrule124_back338
    push rx120_bstack, $I11
    push rx120_bstack, 0
    push rx120_bstack, rx120_pos
    elements $I11, rx120_cstack
    push rx120_bstack, $I11
    repr_get_attr_int rx120_pos, $P11, rx120_curclass, "$!pos"
    nqp_rxpeek $I19, rx120_bstack, rxquantr123_done336
    inc $I19
    inc $I19
    set rx120_rep, rx120_bstack[$I19]
    nqp_rxcommit rx120_bstack, rxquantr123_done336
    inc rx120_rep
    nqp_rxmark rx120_bstack, rxquantr123_done336, rx120_pos, rx120_rep
    goto rxquantr123_loop335
  rxquantr123_done336:
    goto alt122_end333
  alt122_1339:
    nqp_rxmark rx120_bstack, alt122_2355, rx120_pos, 0
    .const 'Sub' $P5001 = 'cuid_24_1367388594.4399' 
    capture_lex $P5001
    repr_bind_attr_int rx120_cur, rx120_curclass, "$!pos", rx120_pos
    $P11 = rx120_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx120_curclass, "$!pos"
    lt $I11, 0, rx120_fail326
    repr_bind_attr_int rx120_cur, rx120_curclass, "$!pos", rx120_pos
    $P11 = rx120_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx120_curclass, "$!pos"
    lt $I11, 0, rx120_fail326
    repr_get_attr_int rx120_pos, $P11, rx120_curclass, "$!pos"
    goto alt122_end333
  alt122_2355:
    .const 'Sub' $P5002 = 'cuid_25_1367388594.4399' 
    capture_lex $P5002
    repr_bind_attr_int rx120_cur, rx120_curclass, "$!pos", rx120_pos
    $P11 = rx120_cur.$P5002()
    repr_get_attr_int $I11, $P11, rx120_curclass, "$!pos"
    lt $I11, 0, rx120_fail326
    nqp_rxmark rx120_bstack, rxsubrule132_pass366, -1, 0
  rxsubrule132_pass366:
    rx120_cstack = rx120_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx120_pos, $P11, rx120_curclass, "$!pos"
    repr_bind_attr_int rx120_cur, rx120_curclass, "$!pos", rx120_pos
    store_lex unicode:"$\x{a2}", rx120_cur
    $P5003 = $P101."MATCH"()
    set $P102, $P5003
    .const 'Sub' $P5004 = 'cuid_189_1367388594.4399' 
    capture_lex $P5004
    $P5005 = $P5004()
  alt122_end333:
    rx120_cur."!cursor_pass"(rx120_pos, "termish", 'backtrack'=>1)
    .return (rx120_cur)
  rx120_restart325:
    repr_get_attr_obj rx120_cstack, rx120_cur, rx120_curclass, "$!cstack"
  rx120_fail326:
    unless rx120_bstack, rx120_done324
    pop $I19, rx120_bstack
    if_null rx120_cstack, rx120_cstack_done329
    unless rx120_cstack, rx120_cstack_done329
    dec $I19
    set $P11, rx120_cstack[$I19]
  rx120_cstack_done329:
    pop rx120_rep, rx120_bstack
    pop rx120_pos, rx120_bstack
    pop $I19, rx120_bstack
    lt rx120_pos, -1, rx120_done324
    lt rx120_pos, 0, rx120_fail326
    eq $I19, 0, rx120_fail326
    nqp_islist $I20, rx120_cstack
    unless $I20, rx120_jump327
    elements $I18, rx120_bstack
    le $I18, 0, rx120_cut328
    dec $I18
    set $I18, rx120_bstack[$I18]
  rx120_cut328:
    assign rx120_cstack, $I18
  rx120_jump327:
    jump $I19
  rx120_done324:
    rx120_cur."!cursor_fail"()
    .return (rx120_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_24_1367388594.4399") :anon :lex :outer("cuid_23_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx125_start
    .local string rx125_tgt
    .local int rx125_pos
    .local int rx125_off
    .local int rx125_eos
    .local int rx125_rep
    .local pmc rx125_cur
    .local pmc rx125_curclass
    .local pmc rx125_bstack
    .local pmc rx125_cstack
    rx125_start = self."!cursor_start_all"()
    set rx125_cur, rx125_start[0]
    set rx125_tgt, rx125_start[1]
    set rx125_pos, rx125_start[2]
    set rx125_curclass, rx125_start[3]
    set rx125_bstack, rx125_start[4]
    set $I19, rx125_start[5]
    store_lex unicode:"$\x{a2}", rx125_cur
    length rx125_eos, rx125_tgt
    eq $I19, 1, rx125_restart342
    gt rx125_pos, rx125_eos, rx125_fail343
    repr_get_attr_int $I11, self, rx125_curclass, "$!from"
    ne $I11, -1, rxscan126_done349
    goto rxscan126_scan348
  rxscan126_loop347:
    inc rx125_pos
    gt rx125_pos, rx125_eos, rx125_fail343
    repr_bind_attr_int rx125_cur, rx125_curclass, "$!from", rx125_pos
  rxscan126_scan348:
    nqp_rxmark rx125_bstack, rxscan126_loop347, rx125_pos, 0
  rxscan126_done349:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt127_0351
    nqp_push_label $P11, alt127_1353
    nqp_rxmark rx125_bstack, alt127_end350, -1, 0
    rx125_cur."!alt"(rx125_pos, "alt_nfa__6_1367388594.93467", $P11)
    goto rx125_fail343
  alt127_0351:
    repr_bind_attr_int rx125_cur, rx125_curclass, "$!pos", rx125_pos
    $P11 = rx125_cur."stopper"()
    repr_get_attr_int $I11, $P11, rx125_curclass, "$!pos"
    lt $I11, 0, rx125_fail343
    nqp_rxmark rx125_bstack, rxsubrule128_pass352, -1, 0
  rxsubrule128_pass352:
    rx125_cstack = rx125_cur."!cursor_capture"($P11, "stopper")
    repr_get_attr_int rx125_pos, $P11, rx125_curclass, "$!pos"
    goto alt127_end350
  alt127_1353:
    ge rx125_pos, rx125_eos, rx125_fail343
    substr $S11, rx125_tgt, rx125_pos, 1
    index $I11, ucs4:"&|~", $S11
    lt $I11, 0, rx125_fail343
    inc rx125_pos
    goto alt127_end350
  alt127_end350:
    rx125_cur."!cursor_pass"(rx125_pos, 'backtrack'=>1)
    .return (rx125_cur)
  rx125_restart342:
    repr_get_attr_obj rx125_cstack, rx125_cur, rx125_curclass, "$!cstack"
  rx125_fail343:
    unless rx125_bstack, rx125_done341
    pop $I19, rx125_bstack
    if_null rx125_cstack, rx125_cstack_done346
    unless rx125_cstack, rx125_cstack_done346
    dec $I19
    set $P11, rx125_cstack[$I19]
  rx125_cstack_done346:
    pop rx125_rep, rx125_bstack
    pop rx125_pos, rx125_bstack
    pop $I19, rx125_bstack
    lt rx125_pos, -1, rx125_done341
    lt rx125_pos, 0, rx125_fail343
    eq $I19, 0, rx125_fail343
    nqp_islist $I20, rx125_cstack
    unless $I20, rx125_jump344
    elements $I18, rx125_bstack
    le $I18, 0, rx125_cut345
    dec $I18
    set $I18, rx125_bstack[$I18]
  rx125_cut345:
    assign rx125_cstack, $I18
  rx125_jump344:
    jump $I19
  rx125_done341:
    rx125_cur."!cursor_fail"()
    .return (rx125_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_25_1367388594.4399") :anon :lex :outer("cuid_23_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx130_start
    .local string rx130_tgt
    .local int rx130_pos
    .local int rx130_off
    .local int rx130_eos
    .local int rx130_rep
    .local pmc rx130_cur
    .local pmc rx130_curclass
    .local pmc rx130_bstack
    .local pmc rx130_cstack
    rx130_start = self."!cursor_start_all"()
    set rx130_cur, rx130_start[0]
    set rx130_tgt, rx130_start[1]
    set rx130_pos, rx130_start[2]
    set rx130_curclass, rx130_start[3]
    set rx130_bstack, rx130_start[4]
    set $I19, rx130_start[5]
    store_lex unicode:"$\x{a2}", rx130_cur
    length rx130_eos, rx130_tgt
    eq $I19, 1, rx130_restart358
    gt rx130_pos, rx130_eos, rx130_fail359
    repr_get_attr_int $I11, self, rx130_curclass, "$!from"
    ne $I11, -1, rxscan131_done365
    goto rxscan131_scan364
  rxscan131_loop363:
    inc rx130_pos
    gt rx130_pos, rx130_eos, rx130_fail359
    repr_bind_attr_int rx130_cur, rx130_curclass, "$!from", rx130_pos
  rxscan131_scan364:
    nqp_rxmark rx130_bstack, rxscan131_loop363, rx130_pos, 0
  rxscan131_done365:
    ge rx130_pos, rx130_eos, rx130_fail359
    is_cclass $I11, .CCLASS_WORD, rx130_tgt, rx130_pos
    if $I11, rx130_fail359
    add rx130_pos, 1
    rx130_cur."!cursor_pass"(rx130_pos, 'backtrack'=>1)
    .return (rx130_cur)
  rx130_restart358:
    repr_get_attr_obj rx130_cstack, rx130_cur, rx130_curclass, "$!cstack"
  rx130_fail359:
    unless rx130_bstack, rx130_done357
    pop $I19, rx130_bstack
    if_null rx130_cstack, rx130_cstack_done362
    unless rx130_cstack, rx130_cstack_done362
    dec $I19
    set $P11, rx130_cstack[$I19]
  rx130_cstack_done362:
    pop rx130_rep, rx130_bstack
    pop rx130_pos, rx130_bstack
    pop $I19, rx130_bstack
    lt rx130_pos, -1, rx130_done357
    lt rx130_pos, 0, rx130_fail359
    eq $I19, 0, rx130_fail359
    nqp_islist $I20, rx130_cstack
    unless $I20, rx130_jump360
    elements $I18, rx130_bstack
    le $I18, 0, rx130_cut361
    dec $I18
    set $I18, rx130_bstack[$I18]
  rx130_cut361:
    assign rx130_cstack, $I18
  rx130_jump360:
    jump $I19
  rx130_done357:
    rx130_cur."!cursor_fail"()
    .return (rx130_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_189_1367388594.4399") :anon :lex :outer("cuid_23_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 143
    .local pmc fb_tmp_5 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$/"
    set fb_tmp_5, $P5003
    repr_defined $I5001, fb_tmp_5
    unless $I5001 goto if133_else367 
    set $P5004, fb_tmp_5[0]
    set $P5006, $P5004
    goto if133_end368
  if133_else367:
    null $P5005
    set $P5006, $P5005
  if133_end368:
    unless_null $P5006, vivi_134369
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5006, $P5007
  vivi_134369:
    set $S5001, $P5006
    $P5008 = $P5001."throw_unrecognized_metachar"($S5001)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "quantified_atom" :subid("cuid_26_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 146
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_27_1367388594.4399' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx135_start
    .local string rx135_tgt
    .local int rx135_pos
    .local int rx135_off
    .local int rx135_eos
    .local int rx135_rep
    .local pmc rx135_cur
    .local pmc rx135_curclass
    .local pmc rx135_bstack
    .local pmc rx135_cstack
    rx135_start = self."!cursor_start_all"()
    set rx135_cur, rx135_start[0]
    set rx135_tgt, rx135_start[1]
    set rx135_pos, rx135_start[2]
    set rx135_curclass, rx135_start[3]
    set rx135_bstack, rx135_start[4]
    set $I19, rx135_start[5]
    store_lex unicode:"$\x{a2}", rx135_cur
    length rx135_eos, rx135_tgt
    eq $I19, 1, rx135_restart372
    gt rx135_pos, rx135_eos, rx135_fail373
    repr_get_attr_int $I11, self, rx135_curclass, "$!from"
    ne $I11, -1, rxscan136_done379
    goto rxscan136_scan378
  rxscan136_loop377:
    inc rx135_pos
    gt rx135_pos, rx135_eos, rx135_fail373
    repr_bind_attr_int rx135_cur, rx135_curclass, "$!from", rx135_pos
  rxscan136_scan378:
    nqp_rxmark rx135_bstack, rxscan136_loop377, rx135_pos, 0
  rxscan136_done379:
    repr_bind_attr_int rx135_cur, rx135_curclass, "$!pos", rx135_pos
    $P11 = rx135_cur."atom"()
    repr_get_attr_int $I11, $P11, rx135_curclass, "$!pos"
    lt $I11, 0, rx135_fail373
    nqp_rxmark rx135_bstack, rxsubrule137_pass380, -1, 0
  rxsubrule137_pass380:
    rx135_cstack = rx135_cur."!cursor_capture"($P11, "atom")
    repr_get_attr_int rx135_pos, $P11, rx135_curclass, "$!pos"
    nqp_rxmark rx135_bstack, rxquantr138_done382, rx135_pos, 0
  rxquantr138_loop381:
    repr_bind_attr_int rx135_cur, rx135_curclass, "$!pos", rx135_pos
    $P11 = rx135_cur."ws"()
    repr_get_attr_int $I11, $P11, rx135_curclass, "$!pos"
    lt $I11, 0, rx135_fail373
    repr_get_attr_int rx135_pos, $P11, rx135_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt140_0385
    nqp_push_label $P11, alt140_1387
    nqp_rxmark rx135_bstack, alt140_end384, -1, 0
    rx135_cur."!alt"(rx135_pos, "alt_nfa__7_1367388594.97169", $P11)
    goto rx135_fail373
  alt140_0385:
    repr_bind_attr_int rx135_cur, rx135_curclass, "$!pos", rx135_pos
    $P11 = rx135_cur."quantifier"()
    repr_get_attr_int $I11, $P11, rx135_curclass, "$!pos"
    lt $I11, 0, rx135_fail373
    nqp_rxmark rx135_bstack, rxsubrule141_pass386, -1, 0
  rxsubrule141_pass386:
    rx135_cstack = rx135_cur."!cursor_capture"($P11, "quantifier")
    repr_get_attr_int rx135_pos, $P11, rx135_curclass, "$!pos"
    goto alt140_end384
  alt140_1387:
    .const 'Sub' $P5001 = 'cuid_27_1367388594.4399' 
    capture_lex $P5001
    repr_bind_attr_int rx135_cur, rx135_curclass, "$!pos", rx135_pos
    $P11 = rx135_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx135_curclass, "$!pos"
    lt $I11, 0, rx135_fail373
    repr_bind_attr_int rx135_cur, rx135_curclass, "$!pos", rx135_pos
    $P11 = rx135_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx135_curclass, "$!pos"
    lt $I11, 0, rx135_fail373
    nqp_rxmark rx135_bstack, rxsubrule144_pass398, -1, 0
  rxsubrule144_pass398:
    rx135_cstack = rx135_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx135_pos, $P11, rx135_curclass, "$!pos"
    repr_bind_attr_int rx135_cur, rx135_curclass, "$!pos", rx135_pos
    $P11 = rx135_cur."alpha"()
    repr_get_attr_int $I11, $P11, rx135_curclass, "$!pos"
    ge $I11, 0, rx135_fail373
    goto alt140_end384
  alt140_end384:
    nqp_rxcommit rx135_bstack, alt140_end384
    nqp_rxmark rx135_bstack, rxquantr145_done400, rx135_pos, 0
  rxquantr145_loop399:
    repr_bind_attr_int rx135_cur, rx135_curclass, "$!pos", rx135_pos
    $P11 = rx135_cur."ws"()
    repr_get_attr_int $I11, $P11, rx135_curclass, "$!pos"
    lt $I11, 0, rx135_fail373
    repr_get_attr_int rx135_pos, $P11, rx135_curclass, "$!pos"
    repr_bind_attr_int rx135_cur, rx135_curclass, "$!pos", rx135_pos
    $P11 = rx135_cur."separator"()
    repr_get_attr_int $I11, $P11, rx135_curclass, "$!pos"
    lt $I11, 0, rx135_fail373
    nqp_rxmark rx135_bstack, rxsubrule147_pass402, -1, 0
  rxsubrule147_pass402:
    rx135_cstack = rx135_cur."!cursor_capture"($P11, "separator")
    repr_get_attr_int rx135_pos, $P11, rx135_curclass, "$!pos"
    nqp_rxpeek $I19, rx135_bstack, rxquantr145_done400
    inc $I19
    inc $I19
    set rx135_rep, rx135_bstack[$I19]
    nqp_rxcommit rx135_bstack, rxquantr145_done400
    inc rx135_rep
  rxquantr145_done400:
    nqp_rxpeek $I19, rx135_bstack, rxquantr138_done382
    inc $I19
    inc $I19
    set rx135_rep, rx135_bstack[$I19]
    nqp_rxcommit rx135_bstack, rxquantr138_done382
    inc rx135_rep
  rxquantr138_done382:
    rx135_cur."!cursor_pass"(rx135_pos, "quantified_atom", 'backtrack'=>1)
    .return (rx135_cur)
  rx135_restart372:
    repr_get_attr_obj rx135_cstack, rx135_cur, rx135_curclass, "$!cstack"
  rx135_fail373:
    unless rx135_bstack, rx135_done371
    pop $I19, rx135_bstack
    if_null rx135_cstack, rx135_cstack_done376
    unless rx135_cstack, rx135_cstack_done376
    dec $I19
    set $P11, rx135_cstack[$I19]
  rx135_cstack_done376:
    pop rx135_rep, rx135_bstack
    pop rx135_pos, rx135_bstack
    pop $I19, rx135_bstack
    lt rx135_pos, -1, rx135_done371
    lt rx135_pos, 0, rx135_fail373
    eq $I19, 0, rx135_fail373
    nqp_islist $I20, rx135_cstack
    unless $I20, rx135_jump374
    elements $I18, rx135_bstack
    le $I18, 0, rx135_cut375
    dec $I18
    set $I18, rx135_bstack[$I18]
  rx135_cut375:
    assign rx135_cstack, $I18
  rx135_jump374:
    jump $I19
  rx135_done371:
    rx135_cur."!cursor_fail"()
    .return (rx135_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_27_1367388594.4399") :anon :lex :outer("cuid_26_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx142_start
    .local string rx142_tgt
    .local int rx142_pos
    .local int rx142_off
    .local int rx142_eos
    .local int rx142_rep
    .local pmc rx142_cur
    .local pmc rx142_curclass
    .local pmc rx142_bstack
    .local pmc rx142_cstack
    rx142_start = self."!cursor_start_all"()
    set rx142_cur, rx142_start[0]
    set rx142_tgt, rx142_start[1]
    set rx142_pos, rx142_start[2]
    set rx142_curclass, rx142_start[3]
    set rx142_bstack, rx142_start[4]
    set $I19, rx142_start[5]
    store_lex unicode:"$\x{a2}", rx142_cur
    length rx142_eos, rx142_tgt
    eq $I19, 1, rx142_restart390
    gt rx142_pos, rx142_eos, rx142_fail391
    repr_get_attr_int $I11, self, rx142_curclass, "$!from"
    ne $I11, -1, rxscan143_done397
    goto rxscan143_scan396
  rxscan143_loop395:
    inc rx142_pos
    gt rx142_pos, rx142_eos, rx142_fail391
    repr_bind_attr_int rx142_cur, rx142_curclass, "$!from", rx142_pos
  rxscan143_scan396:
    nqp_rxmark rx142_bstack, rxscan143_loop395, rx142_pos, 0
  rxscan143_done397:
    add $I11, rx142_pos, 1
    gt $I11, rx142_eos, rx142_fail391
    substr $S10, rx142_tgt, rx142_pos, 1
    ne $S10, ucs4:":", rx142_fail391
    add rx142_pos, 1
    rx142_cur."!cursor_pass"(rx142_pos, 'backtrack'=>1)
    .return (rx142_cur)
  rx142_restart390:
    repr_get_attr_obj rx142_cstack, rx142_cur, rx142_curclass, "$!cstack"
  rx142_fail391:
    unless rx142_bstack, rx142_done389
    pop $I19, rx142_bstack
    if_null rx142_cstack, rx142_cstack_done394
    unless rx142_cstack, rx142_cstack_done394
    dec $I19
    set $P11, rx142_cstack[$I19]
  rx142_cstack_done394:
    pop rx142_rep, rx142_bstack
    pop rx142_pos, rx142_bstack
    pop $I19, rx142_bstack
    lt rx142_pos, -1, rx142_done389
    lt rx142_pos, 0, rx142_fail391
    eq $I19, 0, rx142_fail391
    nqp_islist $I20, rx142_cstack
    unless $I20, rx142_jump392
    elements $I18, rx142_bstack
    le $I18, 0, rx142_cut393
    dec $I18
    set $I18, rx142_bstack[$I18]
  rx142_cut393:
    assign rx142_cstack, $I18
  rx142_jump392:
    jump $I19
  rx142_done389:
    rx142_cur."!cursor_fail"()
    .return (rx142_cur) 
.end
.HLL "nqp"
.namespace []
.sub "separator" :subid("cuid_28_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 154
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx148_start
    .local string rx148_tgt
    .local int rx148_pos
    .local int rx148_off
    .local int rx148_eos
    .local int rx148_rep
    .local pmc rx148_cur
    .local pmc rx148_curclass
    .local pmc rx148_bstack
    .local pmc rx148_cstack
    rx148_start = self."!cursor_start_all"()
    set rx148_cur, rx148_start[0]
    set rx148_tgt, rx148_start[1]
    set rx148_pos, rx148_start[2]
    set rx148_curclass, rx148_start[3]
    set rx148_bstack, rx148_start[4]
    set $I19, rx148_start[5]
    store_lex unicode:"$\x{a2}", rx148_cur
    length rx148_eos, rx148_tgt
    eq $I19, 1, rx148_restart405
    gt rx148_pos, rx148_eos, rx148_fail406
    repr_get_attr_int $I11, self, rx148_curclass, "$!from"
    ne $I11, -1, rxscan149_done412
    goto rxscan149_scan411
  rxscan149_loop410:
    inc rx148_pos
    gt rx148_pos, rx148_eos, rx148_fail406
    repr_bind_attr_int rx148_cur, rx148_curclass, "$!from", rx148_pos
  rxscan149_scan411:
    nqp_rxmark rx148_bstack, rxscan149_loop410, rx148_pos, 0
  rxscan149_done412:
    nqp_rxmark rx148_bstack, rxcap150_fail414, rx148_pos, 0
    add $I11, rx148_pos, 1
    gt $I11, rx148_eos, rx148_fail406
    substr $S10, rx148_tgt, rx148_pos, 1
    ne $S10, ucs4:"%", rx148_fail406
    add rx148_pos, 1
    nqp_rxmark rx148_bstack, rxquantr151_done416, rx148_pos, 0
  rxquantr151_loop415:
    add $I11, rx148_pos, 1
    gt $I11, rx148_eos, rx148_fail406
    substr $S10, rx148_tgt, rx148_pos, 1
    ne $S10, ucs4:"%", rx148_fail406
    add rx148_pos, 1
    nqp_rxpeek $I19, rx148_bstack, rxquantr151_done416
    inc $I19
    inc $I19
    set rx148_rep, rx148_bstack[$I19]
    nqp_rxcommit rx148_bstack, rxquantr151_done416
    inc rx148_rep
  rxquantr151_done416:
    nqp_rxpeek $I19, rx148_bstack, rxcap150_fail414
    inc $I19
    set $I11, rx148_bstack[$I19]
    repr_bind_attr_int rx148_cur, rx148_curclass, "$!pos", rx148_pos
    $P11 = rx148_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx148_pos)
    rx148_cstack = rx148_cur."!cursor_capture"($P11, "septype")
    goto rxcap150_done413
  rxcap150_fail414:
    goto rx148_fail406
  rxcap150_done413:
    nqp_rxmark rx148_bstack, rxquantr152_done418, rx148_pos, 0
  rxquantr152_loop417:
    repr_bind_attr_int rx148_cur, rx148_curclass, "$!pos", rx148_pos
    $P11 = rx148_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx148_curclass, "$!pos"
    lt $I11, 0, rx148_fail406
    goto rxsubrule153_pass419
  rxsubrule153_back420:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx148_curclass, "$!pos"
    lt $I11, 0, rx148_fail406
  rxsubrule153_pass419:
    rx148_cstack = rx148_cur."!cursor_capture"($P11, "normspace")
    set_addr $I11, rxsubrule153_back420
    push rx148_bstack, $I11
    push rx148_bstack, 0
    push rx148_bstack, rx148_pos
    elements $I11, rx148_cstack
    push rx148_bstack, $I11
    repr_get_attr_int rx148_pos, $P11, rx148_curclass, "$!pos"
    nqp_rxpeek $I19, rx148_bstack, rxquantr152_done418
    inc $I19
    inc $I19
    set rx148_rep, rx148_bstack[$I19]
    nqp_rxcommit rx148_bstack, rxquantr152_done418
    inc rx148_rep
  rxquantr152_done418:
    repr_bind_attr_int rx148_cur, rx148_curclass, "$!pos", rx148_pos
    $P11 = rx148_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx148_curclass, "$!pos"
    lt $I11, 0, rx148_fail406
    nqp_rxmark rx148_bstack, rxsubrule154_pass421, -1, 0
  rxsubrule154_pass421:
    rx148_cstack = rx148_cur."!cursor_capture"($P11, "quantified_atom")
    repr_get_attr_int rx148_pos, $P11, rx148_curclass, "$!pos"
    rx148_cur."!cursor_pass"(rx148_pos, "separator", 'backtrack'=>1)
    .return (rx148_cur)
  rx148_restart405:
    repr_get_attr_obj rx148_cstack, rx148_cur, rx148_curclass, "$!cstack"
  rx148_fail406:
    unless rx148_bstack, rx148_done404
    pop $I19, rx148_bstack
    if_null rx148_cstack, rx148_cstack_done409
    unless rx148_cstack, rx148_cstack_done409
    dec $I19
    set $P11, rx148_cstack[$I19]
  rx148_cstack_done409:
    pop rx148_rep, rx148_bstack
    pop rx148_pos, rx148_bstack
    pop $I19, rx148_bstack
    lt rx148_pos, -1, rx148_done404
    lt rx148_pos, 0, rx148_fail406
    eq $I19, 0, rx148_fail406
    nqp_islist $I20, rx148_cstack
    unless $I20, rx148_jump407
    elements $I18, rx148_bstack
    le $I18, 0, rx148_cut408
    dec $I18
    set $I18, rx148_bstack[$I18]
  rx148_cut408:
    assign rx148_cstack, $I18
  rx148_jump407:
    jump $I19
  rx148_done404:
    rx148_cur."!cursor_fail"()
    .return (rx148_cur) 
.end
.HLL "nqp"
.namespace []
.sub "atom" :subid("cuid_29_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 158
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_30_1367388594.4399' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx155_start
    .local string rx155_tgt
    .local int rx155_pos
    .local int rx155_off
    .local int rx155_eos
    .local int rx155_rep
    .local pmc rx155_cur
    .local pmc rx155_curclass
    .local pmc rx155_bstack
    .local pmc rx155_cstack
    rx155_start = self."!cursor_start_all"()
    set rx155_cur, rx155_start[0]
    set rx155_tgt, rx155_start[1]
    set rx155_pos, rx155_start[2]
    set rx155_curclass, rx155_start[3]
    set rx155_bstack, rx155_start[4]
    set $I19, rx155_start[5]
    store_lex unicode:"$\x{a2}", rx155_cur
    length rx155_eos, rx155_tgt
    eq $I19, 1, rx155_restart424
    gt rx155_pos, rx155_eos, rx155_fail425
    repr_get_attr_int $I11, self, rx155_curclass, "$!from"
    ne $I11, -1, rxscan156_done431
    goto rxscan156_scan430
  rxscan156_loop429:
    inc rx155_pos
    gt rx155_pos, rx155_eos, rx155_fail425
    repr_bind_attr_int rx155_cur, rx155_curclass, "$!from", rx155_pos
  rxscan156_scan430:
    nqp_rxmark rx155_bstack, rxscan156_loop429, rx155_pos, 0
  rxscan156_done431:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt157_0433
    nqp_push_label $P11, alt157_1448
    nqp_rxmark rx155_bstack, alt157_end432, -1, 0
    rx155_cur."!alt"(rx155_pos, "alt_nfa__8_1367388594.99956", $P11)
    goto rx155_fail425
  alt157_0433:
    ge rx155_pos, rx155_eos, rx155_fail425
    is_cclass $I11, .CCLASS_WORD, rx155_tgt, rx155_pos
    unless $I11, rx155_fail425
    add rx155_pos, 1
    nqp_rxmark rx155_bstack, rxquantr158_done435, rx155_pos, 0
  rxquantr158_loop434:
  rxquantg159_loop436:
    ge rx155_pos, rx155_eos, rx155_fail425
    is_cclass $I11, .CCLASS_WORD, rx155_tgt, rx155_pos
    unless $I11, rx155_fail425
    add rx155_pos, 1
    nqp_rxmark rx155_bstack, rxquantg159_done437, rx155_pos, rx155_rep
    goto rxquantg159_loop436
  rxquantg159_done437:
    .const 'Sub' $P5001 = 'cuid_30_1367388594.4399' 
    capture_lex $P5001
    repr_bind_attr_int rx155_cur, rx155_curclass, "$!pos", rx155_pos
    $P11 = rx155_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx155_curclass, "$!pos"
    lt $I11, 0, rx155_fail425
    nqp_rxpeek $I19, rx155_bstack, rxquantr158_done435
    inc $I19
    inc $I19
    set rx155_rep, rx155_bstack[$I19]
    nqp_rxcommit rx155_bstack, rxquantr158_done435
    inc rx155_rep
  rxquantr158_done435:
    goto alt157_end432
  alt157_1448:
    repr_bind_attr_int rx155_cur, rx155_curclass, "$!pos", rx155_pos
    $P11 = rx155_cur."metachar"()
    repr_get_attr_int $I11, $P11, rx155_curclass, "$!pos"
    lt $I11, 0, rx155_fail425
    nqp_rxmark rx155_bstack, rxsubrule162_pass449, -1, 0
  rxsubrule162_pass449:
    rx155_cstack = rx155_cur."!cursor_capture"($P11, "metachar")
    repr_get_attr_int rx155_pos, $P11, rx155_curclass, "$!pos"
    goto alt157_end432
  alt157_end432:
    nqp_rxcommit rx155_bstack, alt157_end432
    rx155_cur."!cursor_pass"(rx155_pos, "atom", 'backtrack'=>1)
    .return (rx155_cur)
  rx155_restart424:
    repr_get_attr_obj rx155_cstack, rx155_cur, rx155_curclass, "$!cstack"
  rx155_fail425:
    unless rx155_bstack, rx155_done423
    pop $I19, rx155_bstack
    if_null rx155_cstack, rx155_cstack_done428
    unless rx155_cstack, rx155_cstack_done428
    dec $I19
    set $P11, rx155_cstack[$I19]
  rx155_cstack_done428:
    pop rx155_rep, rx155_bstack
    pop rx155_pos, rx155_bstack
    pop $I19, rx155_bstack
    lt rx155_pos, -1, rx155_done423
    lt rx155_pos, 0, rx155_fail425
    eq $I19, 0, rx155_fail425
    nqp_islist $I20, rx155_cstack
    unless $I20, rx155_jump426
    elements $I18, rx155_bstack
    le $I18, 0, rx155_cut427
    dec $I18
    set $I18, rx155_bstack[$I18]
  rx155_cut427:
    assign rx155_cstack, $I18
  rx155_jump426:
    jump $I19
  rx155_done423:
    rx155_cur."!cursor_fail"()
    .return (rx155_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_30_1367388594.4399") :anon :lex :outer("cuid_29_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx160_start
    .local string rx160_tgt
    .local int rx160_pos
    .local int rx160_off
    .local int rx160_eos
    .local int rx160_rep
    .local pmc rx160_cur
    .local pmc rx160_curclass
    .local pmc rx160_bstack
    .local pmc rx160_cstack
    rx160_start = self."!cursor_start_all"()
    set rx160_cur, rx160_start[0]
    set rx160_tgt, rx160_start[1]
    set rx160_pos, rx160_start[2]
    set rx160_curclass, rx160_start[3]
    set rx160_bstack, rx160_start[4]
    set $I19, rx160_start[5]
    store_lex unicode:"$\x{a2}", rx160_cur
    length rx160_eos, rx160_tgt
    eq $I19, 1, rx160_restart440
    gt rx160_pos, rx160_eos, rx160_fail441
    repr_get_attr_int $I11, self, rx160_curclass, "$!from"
    ne $I11, -1, rxscan161_done447
    goto rxscan161_scan446
  rxscan161_loop445:
    inc rx160_pos
    gt rx160_pos, rx160_eos, rx160_fail441
    repr_bind_attr_int rx160_cur, rx160_curclass, "$!from", rx160_pos
  rxscan161_scan446:
    nqp_rxmark rx160_bstack, rxscan161_loop445, rx160_pos, 0
  rxscan161_done447:
    ge rx160_pos, rx160_eos, rx160_fail441
    is_cclass $I11, .CCLASS_WORD, rx160_tgt, rx160_pos
    unless $I11, rx160_fail441
    add rx160_pos, 1
    rx160_cur."!cursor_pass"(rx160_pos, 'backtrack'=>1)
    .return (rx160_cur)
  rx160_restart440:
    repr_get_attr_obj rx160_cstack, rx160_cur, rx160_curclass, "$!cstack"
  rx160_fail441:
    unless rx160_bstack, rx160_done439
    pop $I19, rx160_bstack
    if_null rx160_cstack, rx160_cstack_done444
    unless rx160_cstack, rx160_cstack_done444
    dec $I19
    set $P11, rx160_cstack[$I19]
  rx160_cstack_done444:
    pop rx160_rep, rx160_bstack
    pop rx160_pos, rx160_bstack
    pop $I19, rx160_bstack
    lt rx160_pos, -1, rx160_done439
    lt rx160_pos, 0, rx160_fail441
    eq $I19, 0, rx160_fail441
    nqp_islist $I20, rx160_cstack
    unless $I20, rx160_jump442
    elements $I18, rx160_bstack
    le $I18, 0, rx160_cut443
    dec $I18
    set $I18, rx160_bstack[$I18]
  rx160_cut443:
    assign rx160_cstack, $I18
  rx160_jump442:
    jump $I19
  rx160_done439:
    rx160_cur."!cursor_fail"()
    .return (rx160_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier" :subid("cuid_31_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 166
    .param pmc self 
    $P5001 = self."!protoregex"("quantifier")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<*>" :subid("cuid_32_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 167
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx163_start
    .local string rx163_tgt
    .local int rx163_pos
    .local int rx163_off
    .local int rx163_eos
    .local int rx163_rep
    .local pmc rx163_cur
    .local pmc rx163_curclass
    .local pmc rx163_bstack
    .local pmc rx163_cstack
    rx163_start = self."!cursor_start_all"()
    set rx163_cur, rx163_start[0]
    set rx163_tgt, rx163_start[1]
    set rx163_pos, rx163_start[2]
    set rx163_curclass, rx163_start[3]
    set rx163_bstack, rx163_start[4]
    set $I19, rx163_start[5]
    store_lex unicode:"$\x{a2}", rx163_cur
    length rx163_eos, rx163_tgt
    eq $I19, 1, rx163_restart452
    gt rx163_pos, rx163_eos, rx163_fail453
    repr_get_attr_int $I11, self, rx163_curclass, "$!from"
    ne $I11, -1, rxscan164_done459
    goto rxscan164_scan458
  rxscan164_loop457:
    inc rx163_pos
    gt rx163_pos, rx163_eos, rx163_fail453
    repr_bind_attr_int rx163_cur, rx163_curclass, "$!from", rx163_pos
  rxscan164_scan458:
    nqp_rxmark rx163_bstack, rxscan164_loop457, rx163_pos, 0
  rxscan164_done459:
    nqp_rxmark rx163_bstack, rxcap165_fail461, rx163_pos, 0
    add $I11, rx163_pos, 1
    gt $I11, rx163_eos, rx163_fail453
    substr $S10, rx163_tgt, rx163_pos, 1
    ne $S10, ucs4:"*", rx163_fail453
    add rx163_pos, 1
    nqp_rxpeek $I19, rx163_bstack, rxcap165_fail461
    inc $I19
    set $I11, rx163_bstack[$I19]
    repr_bind_attr_int rx163_cur, rx163_curclass, "$!pos", rx163_pos
    $P11 = rx163_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx163_pos)
    rx163_cstack = rx163_cur."!cursor_capture"($P11, "sym")
    goto rxcap165_done460
  rxcap165_fail461:
    goto rx163_fail453
  rxcap165_done460:
    repr_bind_attr_int rx163_cur, rx163_curclass, "$!pos", rx163_pos
    $P11 = rx163_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx163_curclass, "$!pos"
    lt $I11, 0, rx163_fail453
    nqp_rxmark rx163_bstack, rxsubrule166_pass462, -1, 0
  rxsubrule166_pass462:
    rx163_cstack = rx163_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx163_pos, $P11, rx163_curclass, "$!pos"
    rx163_cur."!cursor_pass"(rx163_pos, "quantifier:sym<*>", 'backtrack'=>1)
    .return (rx163_cur)
  rx163_restart452:
    repr_get_attr_obj rx163_cstack, rx163_cur, rx163_curclass, "$!cstack"
  rx163_fail453:
    unless rx163_bstack, rx163_done451
    pop $I19, rx163_bstack
    if_null rx163_cstack, rx163_cstack_done456
    unless rx163_cstack, rx163_cstack_done456
    dec $I19
    set $P11, rx163_cstack[$I19]
  rx163_cstack_done456:
    pop rx163_rep, rx163_bstack
    pop rx163_pos, rx163_bstack
    pop $I19, rx163_bstack
    lt rx163_pos, -1, rx163_done451
    lt rx163_pos, 0, rx163_fail453
    eq $I19, 0, rx163_fail453
    nqp_islist $I20, rx163_cstack
    unless $I20, rx163_jump454
    elements $I18, rx163_bstack
    le $I18, 0, rx163_cut455
    dec $I18
    set $I18, rx163_bstack[$I18]
  rx163_cut455:
    assign rx163_cstack, $I18
  rx163_jump454:
    jump $I19
  rx163_done451:
    rx163_cur."!cursor_fail"()
    .return (rx163_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<+>" :subid("cuid_33_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 168
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx167_start
    .local string rx167_tgt
    .local int rx167_pos
    .local int rx167_off
    .local int rx167_eos
    .local int rx167_rep
    .local pmc rx167_cur
    .local pmc rx167_curclass
    .local pmc rx167_bstack
    .local pmc rx167_cstack
    rx167_start = self."!cursor_start_all"()
    set rx167_cur, rx167_start[0]
    set rx167_tgt, rx167_start[1]
    set rx167_pos, rx167_start[2]
    set rx167_curclass, rx167_start[3]
    set rx167_bstack, rx167_start[4]
    set $I19, rx167_start[5]
    store_lex unicode:"$\x{a2}", rx167_cur
    length rx167_eos, rx167_tgt
    eq $I19, 1, rx167_restart465
    gt rx167_pos, rx167_eos, rx167_fail466
    repr_get_attr_int $I11, self, rx167_curclass, "$!from"
    ne $I11, -1, rxscan168_done472
    goto rxscan168_scan471
  rxscan168_loop470:
    inc rx167_pos
    gt rx167_pos, rx167_eos, rx167_fail466
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!from", rx167_pos
  rxscan168_scan471:
    nqp_rxmark rx167_bstack, rxscan168_loop470, rx167_pos, 0
  rxscan168_done472:
    nqp_rxmark rx167_bstack, rxcap169_fail474, rx167_pos, 0
    add $I11, rx167_pos, 1
    gt $I11, rx167_eos, rx167_fail466
    substr $S10, rx167_tgt, rx167_pos, 1
    ne $S10, ucs4:"+", rx167_fail466
    add rx167_pos, 1
    nqp_rxpeek $I19, rx167_bstack, rxcap169_fail474
    inc $I19
    set $I11, rx167_bstack[$I19]
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx167_pos)
    rx167_cstack = rx167_cur."!cursor_capture"($P11, "sym")
    goto rxcap169_done473
  rxcap169_fail474:
    goto rx167_fail466
  rxcap169_done473:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx167_curclass, "$!pos"
    lt $I11, 0, rx167_fail466
    nqp_rxmark rx167_bstack, rxsubrule170_pass475, -1, 0
  rxsubrule170_pass475:
    rx167_cstack = rx167_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx167_pos, $P11, rx167_curclass, "$!pos"
    rx167_cur."!cursor_pass"(rx167_pos, "quantifier:sym<+>", 'backtrack'=>1)
    .return (rx167_cur)
  rx167_restart465:
    repr_get_attr_obj rx167_cstack, rx167_cur, rx167_curclass, "$!cstack"
  rx167_fail466:
    unless rx167_bstack, rx167_done464
    pop $I19, rx167_bstack
    if_null rx167_cstack, rx167_cstack_done469
    unless rx167_cstack, rx167_cstack_done469
    dec $I19
    set $P11, rx167_cstack[$I19]
  rx167_cstack_done469:
    pop rx167_rep, rx167_bstack
    pop rx167_pos, rx167_bstack
    pop $I19, rx167_bstack
    lt rx167_pos, -1, rx167_done464
    lt rx167_pos, 0, rx167_fail466
    eq $I19, 0, rx167_fail466
    nqp_islist $I20, rx167_cstack
    unless $I20, rx167_jump467
    elements $I18, rx167_bstack
    le $I18, 0, rx167_cut468
    dec $I18
    set $I18, rx167_bstack[$I18]
  rx167_cut468:
    assign rx167_cstack, $I18
  rx167_jump467:
    jump $I19
  rx167_done464:
    rx167_cur."!cursor_fail"()
    .return (rx167_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<?>" :subid("cuid_34_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 169
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx171_start
    .local string rx171_tgt
    .local int rx171_pos
    .local int rx171_off
    .local int rx171_eos
    .local int rx171_rep
    .local pmc rx171_cur
    .local pmc rx171_curclass
    .local pmc rx171_bstack
    .local pmc rx171_cstack
    rx171_start = self."!cursor_start_all"()
    set rx171_cur, rx171_start[0]
    set rx171_tgt, rx171_start[1]
    set rx171_pos, rx171_start[2]
    set rx171_curclass, rx171_start[3]
    set rx171_bstack, rx171_start[4]
    set $I19, rx171_start[5]
    store_lex unicode:"$\x{a2}", rx171_cur
    length rx171_eos, rx171_tgt
    eq $I19, 1, rx171_restart478
    gt rx171_pos, rx171_eos, rx171_fail479
    repr_get_attr_int $I11, self, rx171_curclass, "$!from"
    ne $I11, -1, rxscan172_done485
    goto rxscan172_scan484
  rxscan172_loop483:
    inc rx171_pos
    gt rx171_pos, rx171_eos, rx171_fail479
    repr_bind_attr_int rx171_cur, rx171_curclass, "$!from", rx171_pos
  rxscan172_scan484:
    nqp_rxmark rx171_bstack, rxscan172_loop483, rx171_pos, 0
  rxscan172_done485:
    nqp_rxmark rx171_bstack, rxcap173_fail487, rx171_pos, 0
    add $I11, rx171_pos, 1
    gt $I11, rx171_eos, rx171_fail479
    substr $S10, rx171_tgt, rx171_pos, 1
    ne $S10, ucs4:"?", rx171_fail479
    add rx171_pos, 1
    nqp_rxpeek $I19, rx171_bstack, rxcap173_fail487
    inc $I19
    set $I11, rx171_bstack[$I19]
    repr_bind_attr_int rx171_cur, rx171_curclass, "$!pos", rx171_pos
    $P11 = rx171_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx171_pos)
    rx171_cstack = rx171_cur."!cursor_capture"($P11, "sym")
    goto rxcap173_done486
  rxcap173_fail487:
    goto rx171_fail479
  rxcap173_done486:
    repr_bind_attr_int rx171_cur, rx171_curclass, "$!pos", rx171_pos
    $P11 = rx171_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx171_curclass, "$!pos"
    lt $I11, 0, rx171_fail479
    nqp_rxmark rx171_bstack, rxsubrule174_pass488, -1, 0
  rxsubrule174_pass488:
    rx171_cstack = rx171_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx171_pos, $P11, rx171_curclass, "$!pos"
    rx171_cur."!cursor_pass"(rx171_pos, "quantifier:sym<?>", 'backtrack'=>1)
    .return (rx171_cur)
  rx171_restart478:
    repr_get_attr_obj rx171_cstack, rx171_cur, rx171_curclass, "$!cstack"
  rx171_fail479:
    unless rx171_bstack, rx171_done477
    pop $I19, rx171_bstack
    if_null rx171_cstack, rx171_cstack_done482
    unless rx171_cstack, rx171_cstack_done482
    dec $I19
    set $P11, rx171_cstack[$I19]
  rx171_cstack_done482:
    pop rx171_rep, rx171_bstack
    pop rx171_pos, rx171_bstack
    pop $I19, rx171_bstack
    lt rx171_pos, -1, rx171_done477
    lt rx171_pos, 0, rx171_fail479
    eq $I19, 0, rx171_fail479
    nqp_islist $I20, rx171_cstack
    unless $I20, rx171_jump480
    elements $I18, rx171_bstack
    le $I18, 0, rx171_cut481
    dec $I18
    set $I18, rx171_bstack[$I18]
  rx171_cut481:
    assign rx171_cstack, $I18
  rx171_jump480:
    jump $I19
  rx171_done477:
    rx171_cur."!cursor_fail"()
    .return (rx171_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<{N,M}>" :subid("cuid_35_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 170
    .param pmc _lex_param_0 
    .const 'Sub' $P5007 = 'cuid_190_1367388594.4399' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_36_1367388594.4399' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_37_1367388594.4399' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_38_1367388594.4399' 
    capture_lex $P5007 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx175_start
    .local string rx175_tgt
    .local int rx175_pos
    .local int rx175_off
    .local int rx175_eos
    .local int rx175_rep
    .local pmc rx175_cur
    .local pmc rx175_curclass
    .local pmc rx175_bstack
    .local pmc rx175_cstack
    rx175_start = self."!cursor_start_all"()
    set rx175_cur, rx175_start[0]
    set rx175_tgt, rx175_start[1]
    set rx175_pos, rx175_start[2]
    set rx175_curclass, rx175_start[3]
    set rx175_bstack, rx175_start[4]
    set $I19, rx175_start[5]
    store_lex unicode:"$\x{a2}", rx175_cur
    length rx175_eos, rx175_tgt
    eq $I19, 1, rx175_restart491
    gt rx175_pos, rx175_eos, rx175_fail492
    repr_get_attr_int $I11, self, rx175_curclass, "$!from"
    ne $I11, -1, rxscan176_done498
    goto rxscan176_scan497
  rxscan176_loop496:
    inc rx175_pos
    gt rx175_pos, rx175_eos, rx175_fail492
    repr_bind_attr_int rx175_cur, rx175_curclass, "$!from", rx175_pos
  rxscan176_scan497:
    nqp_rxmark rx175_bstack, rxscan176_loop496, rx175_pos, 0
  rxscan176_done498:
    repr_bind_attr_int rx175_cur, rx175_curclass, "$!pos", rx175_pos
    store_lex unicode:"$\x{a2}", rx175_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_190_1367388594.4399' 
    capture_lex $P5002
    $P5003 = $P5002()
    add $I11, rx175_pos, 1
    gt $I11, rx175_eos, rx175_fail492
    substr $S10, rx175_tgt, rx175_pos, 1
    ne $S10, ucs4:"{", rx175_fail492
    add rx175_pos, 1
    .const 'Sub' $P5004 = 'cuid_36_1367388594.4399' 
    capture_lex $P5004
    repr_bind_attr_int rx175_cur, rx175_curclass, "$!pos", rx175_pos
    $P11 = rx175_cur.$P5004()
    repr_get_attr_int $I11, $P11, rx175_curclass, "$!pos"
    lt $I11, 0, rx175_fail492
    nqp_rxmark rx175_bstack, rxsubrule180_pass511, -1, 0
  rxsubrule180_pass511:
    rx175_cstack = rx175_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx175_pos, $P11, rx175_curclass, "$!pos"
    .const 'Sub' $P5005 = 'cuid_37_1367388594.4399' 
    capture_lex $P5005
    repr_bind_attr_int rx175_cur, rx175_curclass, "$!pos", rx175_pos
    $P11 = rx175_cur.$P5005()
    repr_get_attr_int $I11, $P11, rx175_curclass, "$!pos"
    lt $I11, 0, rx175_fail492
    nqp_rxmark rx175_bstack, rxsubrule184_pass524, -1, 0
  rxsubrule184_pass524:
    rx175_cstack = rx175_cur."!cursor_capture"($P11, "1")
    repr_get_attr_int rx175_pos, $P11, rx175_curclass, "$!pos"
    .const 'Sub' $P5006 = 'cuid_38_1367388594.4399' 
    capture_lex $P5006
    repr_bind_attr_int rx175_cur, rx175_curclass, "$!pos", rx175_pos
    $P11 = rx175_cur.$P5006()
    repr_get_attr_int $I11, $P11, rx175_curclass, "$!pos"
    lt $I11, 0, rx175_fail492
    nqp_rxmark rx175_bstack, rxsubrule188_pass537, -1, 0
  rxsubrule188_pass537:
    rx175_cstack = rx175_cur."!cursor_capture"($P11, "2")
    repr_get_attr_int rx175_pos, $P11, rx175_curclass, "$!pos"
    add $I11, rx175_pos, 1
    gt $I11, rx175_eos, rx175_fail492
    substr $S10, rx175_tgt, rx175_pos, 1
    ne $S10, ucs4:"}", rx175_fail492
    add rx175_pos, 1
    repr_bind_attr_int rx175_cur, rx175_curclass, "$!pos", rx175_pos
    $P11 = rx175_cur."obs"("{N,M} as general quantifier", "** N..M (or ** N..*)")
    repr_get_attr_int $I11, $P11, rx175_curclass, "$!pos"
    lt $I11, 0, rx175_fail492
    repr_get_attr_int rx175_pos, $P11, rx175_curclass, "$!pos"
    rx175_cur."!cursor_pass"(rx175_pos, "quantifier:sym<{N,M}>", 'backtrack'=>1)
    .return (rx175_cur)
  rx175_restart491:
    repr_get_attr_obj rx175_cstack, rx175_cur, rx175_curclass, "$!cstack"
  rx175_fail492:
    unless rx175_bstack, rx175_done490
    pop $I19, rx175_bstack
    if_null rx175_cstack, rx175_cstack_done495
    unless rx175_cstack, rx175_cstack_done495
    dec $I19
    set $P11, rx175_cstack[$I19]
  rx175_cstack_done495:
    pop rx175_rep, rx175_bstack
    pop rx175_pos, rx175_bstack
    pop $I19, rx175_bstack
    lt rx175_pos, -1, rx175_done490
    lt rx175_pos, 0, rx175_fail492
    eq $I19, 0, rx175_fail492
    nqp_islist $I20, rx175_cstack
    unless $I20, rx175_jump493
    elements $I18, rx175_bstack
    le $I18, 0, rx175_cut494
    dec $I18
    set $I18, rx175_bstack[$I18]
  rx175_cut494:
    assign rx175_cstack, $I18
  rx175_jump493:
    jump $I19
  rx175_done490:
    rx175_cur."!cursor_fail"()
    .return (rx175_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_190_1367388594.4399") :anon :lex :outer("cuid_35_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 170

    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_36_1367388594.4399") :anon :lex :outer("cuid_35_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx177_start
    .local string rx177_tgt
    .local int rx177_pos
    .local int rx177_off
    .local int rx177_eos
    .local int rx177_rep
    .local pmc rx177_cur
    .local pmc rx177_curclass
    .local pmc rx177_bstack
    .local pmc rx177_cstack
    rx177_start = self."!cursor_start_all"()
    set rx177_cur, rx177_start[0]
    set rx177_tgt, rx177_start[1]
    set rx177_pos, rx177_start[2]
    set rx177_curclass, rx177_start[3]
    set rx177_bstack, rx177_start[4]
    set $I19, rx177_start[5]
    store_lex unicode:"$\x{a2}", rx177_cur
    length rx177_eos, rx177_tgt
    eq $I19, 1, rx177_restart501
    gt rx177_pos, rx177_eos, rx177_fail502
    repr_get_attr_int $I11, self, rx177_curclass, "$!from"
    ne $I11, -1, rxscan178_done508
    goto rxscan178_scan507
  rxscan178_loop506:
    inc rx177_pos
    gt rx177_pos, rx177_eos, rx177_fail502
    repr_bind_attr_int rx177_cur, rx177_curclass, "$!from", rx177_pos
  rxscan178_scan507:
    nqp_rxmark rx177_bstack, rxscan178_loop506, rx177_pos, 0
  rxscan178_done508:
    nqp_rxmark rx177_bstack, rxquantr179_done510, -1, 0
  rxquantr179_loop509:
    ge rx177_pos, rx177_eos, rx177_fail502
    is_cclass $I11, .CCLASS_NUMERIC, rx177_tgt, rx177_pos
    unless $I11, rx177_fail502
    add rx177_pos, 1
    nqp_rxpeek $I19, rx177_bstack, rxquantr179_done510
    inc $I19
    inc $I19
    set rx177_rep, rx177_bstack[$I19]
    nqp_rxcommit rx177_bstack, rxquantr179_done510
    inc rx177_rep
    nqp_rxmark rx177_bstack, rxquantr179_done510, rx177_pos, rx177_rep
    goto rxquantr179_loop509
  rxquantr179_done510:
    rx177_cur."!cursor_pass"(rx177_pos, 'backtrack'=>1)
    .return (rx177_cur)
  rx177_restart501:
    repr_get_attr_obj rx177_cstack, rx177_cur, rx177_curclass, "$!cstack"
  rx177_fail502:
    unless rx177_bstack, rx177_done500
    pop $I19, rx177_bstack
    if_null rx177_cstack, rx177_cstack_done505
    unless rx177_cstack, rx177_cstack_done505
    dec $I19
    set $P11, rx177_cstack[$I19]
  rx177_cstack_done505:
    pop rx177_rep, rx177_bstack
    pop rx177_pos, rx177_bstack
    pop $I19, rx177_bstack
    lt rx177_pos, -1, rx177_done500
    lt rx177_pos, 0, rx177_fail502
    eq $I19, 0, rx177_fail502
    nqp_islist $I20, rx177_cstack
    unless $I20, rx177_jump503
    elements $I18, rx177_bstack
    le $I18, 0, rx177_cut504
    dec $I18
    set $I18, rx177_bstack[$I18]
  rx177_cut504:
    assign rx177_cstack, $I18
  rx177_jump503:
    jump $I19
  rx177_done500:
    rx177_cur."!cursor_fail"()
    .return (rx177_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_37_1367388594.4399") :anon :lex :outer("cuid_35_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx181_start
    .local string rx181_tgt
    .local int rx181_pos
    .local int rx181_off
    .local int rx181_eos
    .local int rx181_rep
    .local pmc rx181_cur
    .local pmc rx181_curclass
    .local pmc rx181_bstack
    .local pmc rx181_cstack
    rx181_start = self."!cursor_start_all"()
    set rx181_cur, rx181_start[0]
    set rx181_tgt, rx181_start[1]
    set rx181_pos, rx181_start[2]
    set rx181_curclass, rx181_start[3]
    set rx181_bstack, rx181_start[4]
    set $I19, rx181_start[5]
    store_lex unicode:"$\x{a2}", rx181_cur
    length rx181_eos, rx181_tgt
    eq $I19, 1, rx181_restart514
    gt rx181_pos, rx181_eos, rx181_fail515
    repr_get_attr_int $I11, self, rx181_curclass, "$!from"
    ne $I11, -1, rxscan182_done521
    goto rxscan182_scan520
  rxscan182_loop519:
    inc rx181_pos
    gt rx181_pos, rx181_eos, rx181_fail515
    repr_bind_attr_int rx181_cur, rx181_curclass, "$!from", rx181_pos
  rxscan182_scan520:
    nqp_rxmark rx181_bstack, rxscan182_loop519, rx181_pos, 0
  rxscan182_done521:
    nqp_rxmark rx181_bstack, rxquantr183_done523, rx181_pos, 0
  rxquantr183_loop522:
    add $I11, rx181_pos, 1
    gt $I11, rx181_eos, rx181_fail515
    substr $S10, rx181_tgt, rx181_pos, 1
    ne $S10, ucs4:",", rx181_fail515
    add rx181_pos, 1
    nqp_rxpeek $I19, rx181_bstack, rxquantr183_done523
    inc $I19
    inc $I19
    set rx181_rep, rx181_bstack[$I19]
    nqp_rxcommit rx181_bstack, rxquantr183_done523
    inc rx181_rep
  rxquantr183_done523:
    rx181_cur."!cursor_pass"(rx181_pos, 'backtrack'=>1)
    .return (rx181_cur)
  rx181_restart514:
    repr_get_attr_obj rx181_cstack, rx181_cur, rx181_curclass, "$!cstack"
  rx181_fail515:
    unless rx181_bstack, rx181_done513
    pop $I19, rx181_bstack
    if_null rx181_cstack, rx181_cstack_done518
    unless rx181_cstack, rx181_cstack_done518
    dec $I19
    set $P11, rx181_cstack[$I19]
  rx181_cstack_done518:
    pop rx181_rep, rx181_bstack
    pop rx181_pos, rx181_bstack
    pop $I19, rx181_bstack
    lt rx181_pos, -1, rx181_done513
    lt rx181_pos, 0, rx181_fail515
    eq $I19, 0, rx181_fail515
    nqp_islist $I20, rx181_cstack
    unless $I20, rx181_jump516
    elements $I18, rx181_bstack
    le $I18, 0, rx181_cut517
    dec $I18
    set $I18, rx181_bstack[$I18]
  rx181_cut517:
    assign rx181_cstack, $I18
  rx181_jump516:
    jump $I19
  rx181_done513:
    rx181_cur."!cursor_fail"()
    .return (rx181_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_38_1367388594.4399") :anon :lex :outer("cuid_35_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx185_start
    .local string rx185_tgt
    .local int rx185_pos
    .local int rx185_off
    .local int rx185_eos
    .local int rx185_rep
    .local pmc rx185_cur
    .local pmc rx185_curclass
    .local pmc rx185_bstack
    .local pmc rx185_cstack
    rx185_start = self."!cursor_start_all"()
    set rx185_cur, rx185_start[0]
    set rx185_tgt, rx185_start[1]
    set rx185_pos, rx185_start[2]
    set rx185_curclass, rx185_start[3]
    set rx185_bstack, rx185_start[4]
    set $I19, rx185_start[5]
    store_lex unicode:"$\x{a2}", rx185_cur
    length rx185_eos, rx185_tgt
    eq $I19, 1, rx185_restart527
    gt rx185_pos, rx185_eos, rx185_fail528
    repr_get_attr_int $I11, self, rx185_curclass, "$!from"
    ne $I11, -1, rxscan186_done534
    goto rxscan186_scan533
  rxscan186_loop532:
    inc rx185_pos
    gt rx185_pos, rx185_eos, rx185_fail528
    repr_bind_attr_int rx185_cur, rx185_curclass, "$!from", rx185_pos
  rxscan186_scan533:
    nqp_rxmark rx185_bstack, rxscan186_loop532, rx185_pos, 0
  rxscan186_done534:
    nqp_rxmark rx185_bstack, rxquantr187_done536, rx185_pos, 0
  rxquantr187_loop535:
    ge rx185_pos, rx185_eos, rx185_fail528
    is_cclass $I11, .CCLASS_NUMERIC, rx185_tgt, rx185_pos
    unless $I11, rx185_fail528
    add rx185_pos, 1
    nqp_rxpeek $I19, rx185_bstack, rxquantr187_done536
    inc $I19
    inc $I19
    set rx185_rep, rx185_bstack[$I19]
    nqp_rxcommit rx185_bstack, rxquantr187_done536
    inc rx185_rep
    nqp_rxmark rx185_bstack, rxquantr187_done536, rx185_pos, rx185_rep
    goto rxquantr187_loop535
  rxquantr187_done536:
    rx185_cur."!cursor_pass"(rx185_pos, 'backtrack'=>1)
    .return (rx185_cur)
  rx185_restart527:
    repr_get_attr_obj rx185_cstack, rx185_cur, rx185_curclass, "$!cstack"
  rx185_fail528:
    unless rx185_bstack, rx185_done526
    pop $I19, rx185_bstack
    if_null rx185_cstack, rx185_cstack_done531
    unless rx185_cstack, rx185_cstack_done531
    dec $I19
    set $P11, rx185_cstack[$I19]
  rx185_cstack_done531:
    pop rx185_rep, rx185_bstack
    pop rx185_pos, rx185_bstack
    pop $I19, rx185_bstack
    lt rx185_pos, -1, rx185_done526
    lt rx185_pos, 0, rx185_fail528
    eq $I19, 0, rx185_fail528
    nqp_islist $I20, rx185_cstack
    unless $I20, rx185_jump529
    elements $I18, rx185_bstack
    le $I18, 0, rx185_cut530
    dec $I18
    set $I18, rx185_bstack[$I18]
  rx185_cut530:
    assign rx185_cstack, $I18
  rx185_jump529:
    jump $I19
  rx185_done526:
    rx185_cur."!cursor_fail"()
    .return (rx185_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<**>" :subid("cuid_39_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 173
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx190_start
    .local string rx190_tgt
    .local int rx190_pos
    .local int rx190_off
    .local int rx190_eos
    .local int rx190_rep
    .local pmc rx190_cur
    .local pmc rx190_curclass
    .local pmc rx190_bstack
    .local pmc rx190_cstack
    rx190_start = self."!cursor_start_all"()
    set rx190_cur, rx190_start[0]
    set rx190_tgt, rx190_start[1]
    set rx190_pos, rx190_start[2]
    set rx190_curclass, rx190_start[3]
    set rx190_bstack, rx190_start[4]
    set $I19, rx190_start[5]
    store_lex unicode:"$\x{a2}", rx190_cur
    length rx190_eos, rx190_tgt
    eq $I19, 1, rx190_restart541
    gt rx190_pos, rx190_eos, rx190_fail542
    repr_get_attr_int $I11, self, rx190_curclass, "$!from"
    ne $I11, -1, rxscan191_done548
    goto rxscan191_scan547
  rxscan191_loop546:
    inc rx190_pos
    gt rx190_pos, rx190_eos, rx190_fail542
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!from", rx190_pos
  rxscan191_scan547:
    nqp_rxmark rx190_bstack, rxscan191_loop546, rx190_pos, 0
  rxscan191_done548:
    nqp_rxmark rx190_bstack, rxcap192_fail550, rx190_pos, 0
    add $I11, rx190_pos, 2
    gt $I11, rx190_eos, rx190_fail542
    substr $S10, rx190_tgt, rx190_pos, 2
    ne $S10, ucs4:"**", rx190_fail542
    add rx190_pos, 2
    nqp_rxpeek $I19, rx190_bstack, rxcap192_fail550
    inc $I19
    set $I11, rx190_bstack[$I19]
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!pos", rx190_pos
    $P11 = rx190_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx190_pos)
    rx190_cstack = rx190_cur."!cursor_capture"($P11, "sym")
    goto rxcap192_done549
  rxcap192_fail550:
    goto rx190_fail542
  rxcap192_done549:
    nqp_rxmark rx190_bstack, rxquantr193_done552, rx190_pos, 0
  rxquantr193_loop551:
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!pos", rx190_pos
    $P11 = rx190_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx190_curclass, "$!pos"
    lt $I11, 0, rx190_fail542
    goto rxsubrule194_pass553
  rxsubrule194_back554:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx190_curclass, "$!pos"
    lt $I11, 0, rx190_fail542
  rxsubrule194_pass553:
    rx190_cstack = rx190_cur."!cursor_capture"($P11, "normspace")
    set_addr $I11, rxsubrule194_back554
    push rx190_bstack, $I11
    push rx190_bstack, 0
    push rx190_bstack, rx190_pos
    elements $I11, rx190_cstack
    push rx190_bstack, $I11
    repr_get_attr_int rx190_pos, $P11, rx190_curclass, "$!pos"
    nqp_rxpeek $I19, rx190_bstack, rxquantr193_done552
    inc $I19
    inc $I19
    set rx190_rep, rx190_bstack[$I19]
    nqp_rxcommit rx190_bstack, rxquantr193_done552
    inc rx190_rep
  rxquantr193_done552:
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!pos", rx190_pos
    $P11 = rx190_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx190_curclass, "$!pos"
    lt $I11, 0, rx190_fail542
    nqp_rxmark rx190_bstack, rxsubrule195_pass555, -1, 0
  rxsubrule195_pass555:
    rx190_cstack = rx190_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx190_pos, $P11, rx190_curclass, "$!pos"
    nqp_rxmark rx190_bstack, rxquantr196_done557, rx190_pos, 0
  rxquantr196_loop556:
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!pos", rx190_pos
    $P11 = rx190_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx190_curclass, "$!pos"
    lt $I11, 0, rx190_fail542
    goto rxsubrule197_pass558
  rxsubrule197_back559:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx190_curclass, "$!pos"
    lt $I11, 0, rx190_fail542
  rxsubrule197_pass558:
    rx190_cstack = rx190_cur."!cursor_capture"($P11, "normspace")
    set_addr $I11, rxsubrule197_back559
    push rx190_bstack, $I11
    push rx190_bstack, 0
    push rx190_bstack, rx190_pos
    elements $I11, rx190_cstack
    push rx190_bstack, $I11
    repr_get_attr_int rx190_pos, $P11, rx190_curclass, "$!pos"
    nqp_rxpeek $I19, rx190_bstack, rxquantr196_done557
    inc $I19
    inc $I19
    set rx190_rep, rx190_bstack[$I19]
    nqp_rxcommit rx190_bstack, rxquantr196_done557
    inc rx190_rep
  rxquantr196_done557:
  alt198_0561:
    nqp_rxmark rx190_bstack, alt198_1581, rx190_pos, 0
    nqp_rxmark rx190_bstack, rxcap199_fail563, rx190_pos, 0
    nqp_rxmark rx190_bstack, rxquantr200_done565, -1, 0
  rxquantr200_loop564:
    ge rx190_pos, rx190_eos, rx190_fail542
    is_cclass $I11, .CCLASS_NUMERIC, rx190_tgt, rx190_pos
    unless $I11, rx190_fail542
    add rx190_pos, 1
    nqp_rxpeek $I19, rx190_bstack, rxquantr200_done565
    inc $I19
    inc $I19
    set rx190_rep, rx190_bstack[$I19]
    nqp_rxcommit rx190_bstack, rxquantr200_done565
    inc rx190_rep
    nqp_rxmark rx190_bstack, rxquantr200_done565, rx190_pos, rx190_rep
    goto rxquantr200_loop564
  rxquantr200_done565:
    nqp_rxpeek $I19, rx190_bstack, rxcap199_fail563
    inc $I19
    set $I11, rx190_bstack[$I19]
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!pos", rx190_pos
    $P11 = rx190_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx190_pos)
    rx190_cstack = rx190_cur."!cursor_capture"($P11, "min")
    goto rxcap199_done562
  rxcap199_fail563:
    goto rx190_fail542
  rxcap199_done562:
    nqp_rxmark rx190_bstack, rxquantr201_done567, rx190_pos, 0
  rxquantr201_loop566:
    add $I11, rx190_pos, 2
    gt $I11, rx190_eos, rx190_fail542
    substr $S10, rx190_tgt, rx190_pos, 2
    ne $S10, ucs4:"..", rx190_fail542
    add rx190_pos, 2
    nqp_rxmark rx190_bstack, rxcap202_fail569, rx190_pos, 0
  alt203_0571:
    nqp_rxmark rx190_bstack, alt203_1574, rx190_pos, 0
    nqp_rxmark rx190_bstack, rxquantr204_done573, -1, 0
  rxquantr204_loop572:
    ge rx190_pos, rx190_eos, rx190_fail542
    is_cclass $I11, .CCLASS_NUMERIC, rx190_tgt, rx190_pos
    unless $I11, rx190_fail542
    add rx190_pos, 1
    nqp_rxpeek $I19, rx190_bstack, rxquantr204_done573
    inc $I19
    inc $I19
    set rx190_rep, rx190_bstack[$I19]
    nqp_rxcommit rx190_bstack, rxquantr204_done573
    inc rx190_rep
    nqp_rxmark rx190_bstack, rxquantr204_done573, rx190_pos, rx190_rep
    goto rxquantr204_loop572
  rxquantr204_done573:
    goto alt203_end570
  alt203_1574:
    nqp_rxmark rx190_bstack, alt203_2575, rx190_pos, 0
    add $I11, rx190_pos, 1
    gt $I11, rx190_eos, rx190_fail542
    substr $S10, rx190_tgt, rx190_pos, 1
    ne $S10, ucs4:"*", rx190_fail542
    add rx190_pos, 1
    goto alt203_end570
  alt203_2575:
    nqp_rxmark rx190_bstack, alt203_3579, rx190_pos, 0
    add $I11, rx190_pos, 1
    gt $I11, rx190_eos, rx190_fail542
    substr $S10, rx190_tgt, rx190_pos, 1
    ne $S10, ucs4:"-", rx190_fail542
    add rx190_pos, 1
    nqp_rxmark rx190_bstack, rxquantr205_done577, -1, 0
  rxquantr205_loop576:
    ge rx190_pos, rx190_eos, rx190_fail542
    is_cclass $I11, .CCLASS_NUMERIC, rx190_tgt, rx190_pos
    unless $I11, rx190_fail542
    add rx190_pos, 1
    nqp_rxpeek $I19, rx190_bstack, rxquantr205_done577
    inc $I19
    inc $I19
    set rx190_rep, rx190_bstack[$I19]
    nqp_rxcommit rx190_bstack, rxquantr205_done577
    inc rx190_rep
    nqp_rxmark rx190_bstack, rxquantr205_done577, rx190_pos, rx190_rep
    goto rxquantr205_loop576
  rxquantr205_done577:
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!pos", rx190_pos
    $P11 = rx190_cur."panic"("Negative numbers are not allowed as range quantifier endpoint")
    repr_get_attr_int $I11, $P11, rx190_curclass, "$!pos"
    lt $I11, 0, rx190_fail542
    repr_get_attr_int rx190_pos, $P11, rx190_curclass, "$!pos"
    goto alt203_end570
  alt203_3579:
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!pos", rx190_pos
    $P11 = rx190_cur."panic"("Only integers or '*' allowed as range quantifier endpoint")
    repr_get_attr_int $I11, $P11, rx190_curclass, "$!pos"
    lt $I11, 0, rx190_fail542
    repr_get_attr_int rx190_pos, $P11, rx190_curclass, "$!pos"
  alt203_end570:
    nqp_rxpeek $I19, rx190_bstack, rxcap202_fail569
    inc $I19
    set $I11, rx190_bstack[$I19]
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!pos", rx190_pos
    $P11 = rx190_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx190_pos)
    rx190_cstack = rx190_cur."!cursor_capture"($P11, "max")
    goto rxcap202_done568
  rxcap202_fail569:
    goto rx190_fail542
  rxcap202_done568:
    nqp_rxpeek $I19, rx190_bstack, rxquantr201_done567
    inc $I19
    inc $I19
    set rx190_rep, rx190_bstack[$I19]
    nqp_rxcommit rx190_bstack, rxquantr201_done567
    inc rx190_rep
  rxquantr201_done567:
    goto alt198_end560
  alt198_1581:
    add $I11, rx190_pos, 1
    gt $I11, rx190_eos, rx190_fail542
    substr $S10, rx190_tgt, rx190_pos, 1
    ne $S10, ucs4:"-", rx190_fail542
    add rx190_pos, 1
    nqp_rxmark rx190_bstack, rxquantr208_done583, -1, 0
  rxquantr208_loop582:
    ge rx190_pos, rx190_eos, rx190_fail542
    is_cclass $I11, .CCLASS_NUMERIC, rx190_tgt, rx190_pos
    unless $I11, rx190_fail542
    add rx190_pos, 1
    nqp_rxpeek $I19, rx190_bstack, rxquantr208_done583
    inc $I19
    inc $I19
    set rx190_rep, rx190_bstack[$I19]
    nqp_rxcommit rx190_bstack, rxquantr208_done583
    inc rx190_rep
    nqp_rxmark rx190_bstack, rxquantr208_done583, rx190_pos, rx190_rep
    goto rxquantr208_loop582
  rxquantr208_done583:
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!pos", rx190_pos
    $P11 = rx190_cur."panic"("Negative numbers are not allowed as quantifiers")
    repr_get_attr_int $I11, $P11, rx190_curclass, "$!pos"
    lt $I11, 0, rx190_fail542
    repr_get_attr_int rx190_pos, $P11, rx190_curclass, "$!pos"
  alt198_end560:
    rx190_cur."!cursor_pass"(rx190_pos, "quantifier:sym<**>", 'backtrack'=>1)
    .return (rx190_cur)
  rx190_restart541:
    repr_get_attr_obj rx190_cstack, rx190_cur, rx190_curclass, "$!cstack"
  rx190_fail542:
    unless rx190_bstack, rx190_done540
    pop $I19, rx190_bstack
    if_null rx190_cstack, rx190_cstack_done545
    unless rx190_cstack, rx190_cstack_done545
    dec $I19
    set $P11, rx190_cstack[$I19]
  rx190_cstack_done545:
    pop rx190_rep, rx190_bstack
    pop rx190_pos, rx190_bstack
    pop $I19, rx190_bstack
    lt rx190_pos, -1, rx190_done540
    lt rx190_pos, 0, rx190_fail542
    eq $I19, 0, rx190_fail542
    nqp_islist $I20, rx190_cstack
    unless $I20, rx190_jump543
    elements $I18, rx190_bstack
    le $I18, 0, rx190_cut544
    dec $I18
    set $I18, rx190_bstack[$I18]
  rx190_cut544:
    assign rx190_cstack, $I18
  rx190_jump543:
    jump $I19
  rx190_done540:
    rx190_cur."!cursor_fail"()
    .return (rx190_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backmod" :subid("cuid_40_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 189
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_41_1367388594.4399' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx210_start
    .local string rx210_tgt
    .local int rx210_pos
    .local int rx210_off
    .local int rx210_eos
    .local int rx210_rep
    .local pmc rx210_cur
    .local pmc rx210_curclass
    .local pmc rx210_bstack
    .local pmc rx210_cstack
    rx210_start = self."!cursor_start_all"()
    set rx210_cur, rx210_start[0]
    set rx210_tgt, rx210_start[1]
    set rx210_pos, rx210_start[2]
    set rx210_curclass, rx210_start[3]
    set rx210_bstack, rx210_start[4]
    set $I19, rx210_start[5]
    store_lex unicode:"$\x{a2}", rx210_cur
    length rx210_eos, rx210_tgt
    eq $I19, 1, rx210_restart587
    gt rx210_pos, rx210_eos, rx210_fail588
    repr_get_attr_int $I11, self, rx210_curclass, "$!from"
    ne $I11, -1, rxscan211_done594
    goto rxscan211_scan593
  rxscan211_loop592:
    inc rx210_pos
    gt rx210_pos, rx210_eos, rx210_fail588
    repr_bind_attr_int rx210_cur, rx210_curclass, "$!from", rx210_pos
  rxscan211_scan593:
    nqp_rxmark rx210_bstack, rxscan211_loop592, rx210_pos, 0
  rxscan211_done594:
    nqp_rxmark rx210_bstack, rxquantr212_done596, rx210_pos, 0
  rxquantr212_loop595:
    add $I11, rx210_pos, 1
    gt $I11, rx210_eos, rx210_fail588
    substr $S10, rx210_tgt, rx210_pos, 1
    ne $S10, ucs4:":", rx210_fail588
    add rx210_pos, 1
    nqp_rxpeek $I19, rx210_bstack, rxquantr212_done596
    inc $I19
    inc $I19
    set rx210_rep, rx210_bstack[$I19]
    nqp_rxcommit rx210_bstack, rxquantr212_done596
    inc rx210_rep
  rxquantr212_done596:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt213_0598
    nqp_push_label $P11, alt213_1599
    nqp_push_label $P11, alt213_2600
    nqp_rxmark rx210_bstack, alt213_end597, -1, 0
    rx210_cur."!alt"(rx210_pos, "alt_nfa__9_1367388595.20845", $P11)
    goto rx210_fail588
  alt213_0598:
    add $I11, rx210_pos, 1
    gt $I11, rx210_eos, rx210_fail588
    substr $S10, rx210_tgt, rx210_pos, 1
    ne $S10, ucs4:"?", rx210_fail588
    add rx210_pos, 1
    goto alt213_end597
  alt213_1599:
    add $I11, rx210_pos, 1
    gt $I11, rx210_eos, rx210_fail588
    substr $S10, rx210_tgt, rx210_pos, 1
    ne $S10, ucs4:"!", rx210_fail588
    add rx210_pos, 1
    goto alt213_end597
  alt213_2600:
    .const 'Sub' $P5001 = 'cuid_41_1367388594.4399' 
    capture_lex $P5001
    repr_bind_attr_int rx210_cur, rx210_curclass, "$!pos", rx210_pos
    $P11 = rx210_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx210_curclass, "$!pos"
    ge $I11, 0, rx210_fail588
    goto alt213_end597
  alt213_end597:
    nqp_rxcommit rx210_bstack, alt213_end597
    rx210_cur."!cursor_pass"(rx210_pos, "backmod", 'backtrack'=>1)
    .return (rx210_cur)
  rx210_restart587:
    repr_get_attr_obj rx210_cstack, rx210_cur, rx210_curclass, "$!cstack"
  rx210_fail588:
    unless rx210_bstack, rx210_done586
    pop $I19, rx210_bstack
    if_null rx210_cstack, rx210_cstack_done591
    unless rx210_cstack, rx210_cstack_done591
    dec $I19
    set $P11, rx210_cstack[$I19]
  rx210_cstack_done591:
    pop rx210_rep, rx210_bstack
    pop rx210_pos, rx210_bstack
    pop $I19, rx210_bstack
    lt rx210_pos, -1, rx210_done586
    lt rx210_pos, 0, rx210_fail588
    eq $I19, 0, rx210_fail588
    nqp_islist $I20, rx210_cstack
    unless $I20, rx210_jump589
    elements $I18, rx210_bstack
    le $I18, 0, rx210_cut590
    dec $I18
    set $I18, rx210_bstack[$I18]
  rx210_cut590:
    assign rx210_cstack, $I18
  rx210_jump589:
    jump $I19
  rx210_done586:
    rx210_cur."!cursor_fail"()
    .return (rx210_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_41_1367388594.4399") :anon :lex :outer("cuid_40_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx214_start
    .local string rx214_tgt
    .local int rx214_pos
    .local int rx214_off
    .local int rx214_eos
    .local int rx214_rep
    .local pmc rx214_cur
    .local pmc rx214_curclass
    .local pmc rx214_bstack
    .local pmc rx214_cstack
    rx214_start = self."!cursor_start_all"()
    set rx214_cur, rx214_start[0]
    set rx214_tgt, rx214_start[1]
    set rx214_pos, rx214_start[2]
    set rx214_curclass, rx214_start[3]
    set rx214_bstack, rx214_start[4]
    set $I19, rx214_start[5]
    store_lex unicode:"$\x{a2}", rx214_cur
    length rx214_eos, rx214_tgt
    eq $I19, 1, rx214_restart603
    gt rx214_pos, rx214_eos, rx214_fail604
    repr_get_attr_int $I11, self, rx214_curclass, "$!from"
    ne $I11, -1, rxscan215_done610
    goto rxscan215_scan609
  rxscan215_loop608:
    inc rx214_pos
    gt rx214_pos, rx214_eos, rx214_fail604
    repr_bind_attr_int rx214_cur, rx214_curclass, "$!from", rx214_pos
  rxscan215_scan609:
    nqp_rxmark rx214_bstack, rxscan215_loop608, rx214_pos, 0
  rxscan215_done610:
    add $I11, rx214_pos, 1
    gt $I11, rx214_eos, rx214_fail604
    substr $S10, rx214_tgt, rx214_pos, 1
    ne $S10, ucs4:":", rx214_fail604
    add rx214_pos, 1
    rx214_cur."!cursor_pass"(rx214_pos, 'backtrack'=>1)
    .return (rx214_cur)
  rx214_restart603:
    repr_get_attr_obj rx214_cstack, rx214_cur, rx214_curclass, "$!cstack"
  rx214_fail604:
    unless rx214_bstack, rx214_done602
    pop $I19, rx214_bstack
    if_null rx214_cstack, rx214_cstack_done607
    unless rx214_cstack, rx214_cstack_done607
    dec $I19
    set $P11, rx214_cstack[$I19]
  rx214_cstack_done607:
    pop rx214_rep, rx214_bstack
    pop rx214_pos, rx214_bstack
    pop $I19, rx214_bstack
    lt rx214_pos, -1, rx214_done602
    lt rx214_pos, 0, rx214_fail604
    eq $I19, 0, rx214_fail604
    nqp_islist $I20, rx214_cstack
    unless $I20, rx214_jump605
    elements $I18, rx214_bstack
    le $I18, 0, rx214_cut606
    dec $I18
    set $I18, rx214_bstack[$I18]
  rx214_cut606:
    assign rx214_cstack, $I18
  rx214_jump605:
    jump $I19
  rx214_done602:
    rx214_cur."!cursor_fail"()
    .return (rx214_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar" :subid("cuid_42_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 191
    .param pmc self 
    $P5001 = self."!protoregex"("metachar")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<ws>" :subid("cuid_43_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 192
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx216_start
    .local string rx216_tgt
    .local int rx216_pos
    .local int rx216_off
    .local int rx216_eos
    .local int rx216_rep
    .local pmc rx216_cur
    .local pmc rx216_curclass
    .local pmc rx216_bstack
    .local pmc rx216_cstack
    rx216_start = self."!cursor_start_all"()
    set rx216_cur, rx216_start[0]
    set rx216_tgt, rx216_start[1]
    set rx216_pos, rx216_start[2]
    set rx216_curclass, rx216_start[3]
    set rx216_bstack, rx216_start[4]
    set $I19, rx216_start[5]
    store_lex unicode:"$\x{a2}", rx216_cur
    length rx216_eos, rx216_tgt
    eq $I19, 1, rx216_restart613
    gt rx216_pos, rx216_eos, rx216_fail614
    repr_get_attr_int $I11, self, rx216_curclass, "$!from"
    ne $I11, -1, rxscan217_done620
    goto rxscan217_scan619
  rxscan217_loop618:
    inc rx216_pos
    gt rx216_pos, rx216_eos, rx216_fail614
    repr_bind_attr_int rx216_cur, rx216_curclass, "$!from", rx216_pos
  rxscan217_scan619:
    nqp_rxmark rx216_bstack, rxscan217_loop618, rx216_pos, 0
  rxscan217_done620:
    repr_bind_attr_int rx216_cur, rx216_curclass, "$!pos", rx216_pos
    $P11 = rx216_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx216_curclass, "$!pos"
    lt $I11, 0, rx216_fail614
    repr_get_attr_int rx216_pos, $P11, rx216_curclass, "$!pos"
    rx216_cur."!cursor_pass"(rx216_pos, "metachar:sym<ws>", 'backtrack'=>1)
    .return (rx216_cur)
  rx216_restart613:
    repr_get_attr_obj rx216_cstack, rx216_cur, rx216_curclass, "$!cstack"
  rx216_fail614:
    unless rx216_bstack, rx216_done612
    pop $I19, rx216_bstack
    if_null rx216_cstack, rx216_cstack_done617
    unless rx216_cstack, rx216_cstack_done617
    dec $I19
    set $P11, rx216_cstack[$I19]
  rx216_cstack_done617:
    pop rx216_rep, rx216_bstack
    pop rx216_pos, rx216_bstack
    pop $I19, rx216_bstack
    lt rx216_pos, -1, rx216_done612
    lt rx216_pos, 0, rx216_fail614
    eq $I19, 0, rx216_fail614
    nqp_islist $I20, rx216_cstack
    unless $I20, rx216_jump615
    elements $I18, rx216_bstack
    le $I18, 0, rx216_cut616
    dec $I18
    set $I18, rx216_bstack[$I18]
  rx216_cut616:
    assign rx216_cstack, $I18
  rx216_jump615:
    jump $I19
  rx216_done612:
    rx216_cur."!cursor_fail"()
    .return (rx216_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<[ ]>" :subid("cuid_44_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 193
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx219_start
    .local string rx219_tgt
    .local int rx219_pos
    .local int rx219_off
    .local int rx219_eos
    .local int rx219_rep
    .local pmc rx219_cur
    .local pmc rx219_curclass
    .local pmc rx219_bstack
    .local pmc rx219_cstack
    rx219_start = self."!cursor_start_all"()
    set rx219_cur, rx219_start[0]
    set rx219_tgt, rx219_start[1]
    set rx219_pos, rx219_start[2]
    set rx219_curclass, rx219_start[3]
    set rx219_bstack, rx219_start[4]
    set $I19, rx219_start[5]
    store_lex unicode:"$\x{a2}", rx219_cur
    length rx219_eos, rx219_tgt
    eq $I19, 1, rx219_restart624
    gt rx219_pos, rx219_eos, rx219_fail625
    repr_get_attr_int $I11, self, rx219_curclass, "$!from"
    ne $I11, -1, rxscan220_done631
    goto rxscan220_scan630
  rxscan220_loop629:
    inc rx219_pos
    gt rx219_pos, rx219_eos, rx219_fail625
    repr_bind_attr_int rx219_cur, rx219_curclass, "$!from", rx219_pos
  rxscan220_scan630:
    nqp_rxmark rx219_bstack, rxscan220_loop629, rx219_pos, 0
  rxscan220_done631:
    add $I11, rx219_pos, 1
    gt $I11, rx219_eos, rx219_fail625
    substr $S10, rx219_tgt, rx219_pos, 1
    ne $S10, ucs4:"[", rx219_fail625
    add rx219_pos, 1
    repr_bind_attr_int rx219_cur, rx219_curclass, "$!pos", rx219_pos
    $P11 = rx219_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx219_curclass, "$!pos"
    lt $I11, 0, rx219_fail625
    nqp_rxmark rx219_bstack, rxsubrule221_pass632, -1, 0
  rxsubrule221_pass632:
    rx219_cstack = rx219_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx219_pos, $P11, rx219_curclass, "$!pos"
    add $I11, rx219_pos, 1
    gt $I11, rx219_eos, rx219_fail625
    substr $S10, rx219_tgt, rx219_pos, 1
    ne $S10, ucs4:"]", rx219_fail625
    add rx219_pos, 1
    rx219_cur."!cursor_pass"(rx219_pos, "metachar:sym<[ ]>", 'backtrack'=>1)
    .return (rx219_cur)
  rx219_restart624:
    repr_get_attr_obj rx219_cstack, rx219_cur, rx219_curclass, "$!cstack"
  rx219_fail625:
    unless rx219_bstack, rx219_done623
    pop $I19, rx219_bstack
    if_null rx219_cstack, rx219_cstack_done628
    unless rx219_cstack, rx219_cstack_done628
    dec $I19
    set $P11, rx219_cstack[$I19]
  rx219_cstack_done628:
    pop rx219_rep, rx219_bstack
    pop rx219_pos, rx219_bstack
    pop $I19, rx219_bstack
    lt rx219_pos, -1, rx219_done623
    lt rx219_pos, 0, rx219_fail625
    eq $I19, 0, rx219_fail625
    nqp_islist $I20, rx219_cstack
    unless $I20, rx219_jump626
    elements $I18, rx219_bstack
    le $I18, 0, rx219_cut627
    dec $I18
    set $I18, rx219_bstack[$I18]
  rx219_cut627:
    assign rx219_cstack, $I18
  rx219_jump626:
    jump $I19
  rx219_done623:
    rx219_cur."!cursor_fail"()
    .return (rx219_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<( )>" :subid("cuid_45_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 194
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx222_start
    .local string rx222_tgt
    .local int rx222_pos
    .local int rx222_off
    .local int rx222_eos
    .local int rx222_rep
    .local pmc rx222_cur
    .local pmc rx222_curclass
    .local pmc rx222_bstack
    .local pmc rx222_cstack
    rx222_start = self."!cursor_start_all"()
    set rx222_cur, rx222_start[0]
    set rx222_tgt, rx222_start[1]
    set rx222_pos, rx222_start[2]
    set rx222_curclass, rx222_start[3]
    set rx222_bstack, rx222_start[4]
    set $I19, rx222_start[5]
    store_lex unicode:"$\x{a2}", rx222_cur
    length rx222_eos, rx222_tgt
    eq $I19, 1, rx222_restart635
    gt rx222_pos, rx222_eos, rx222_fail636
    repr_get_attr_int $I11, self, rx222_curclass, "$!from"
    ne $I11, -1, rxscan223_done642
    goto rxscan223_scan641
  rxscan223_loop640:
    inc rx222_pos
    gt rx222_pos, rx222_eos, rx222_fail636
    repr_bind_attr_int rx222_cur, rx222_curclass, "$!from", rx222_pos
  rxscan223_scan641:
    nqp_rxmark rx222_bstack, rxscan223_loop640, rx222_pos, 0
  rxscan223_done642:
    add $I11, rx222_pos, 1
    gt $I11, rx222_eos, rx222_fail636
    substr $S10, rx222_tgt, rx222_pos, 1
    ne $S10, ucs4:"(", rx222_fail636
    add rx222_pos, 1
    repr_bind_attr_int rx222_cur, rx222_curclass, "$!pos", rx222_pos
    $P11 = rx222_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx222_curclass, "$!pos"
    lt $I11, 0, rx222_fail636
    nqp_rxmark rx222_bstack, rxsubrule224_pass643, -1, 0
  rxsubrule224_pass643:
    rx222_cstack = rx222_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx222_pos, $P11, rx222_curclass, "$!pos"
    add $I11, rx222_pos, 1
    gt $I11, rx222_eos, rx222_fail636
    substr $S10, rx222_tgt, rx222_pos, 1
    ne $S10, ucs4:")", rx222_fail636
    add rx222_pos, 1
    rx222_cur."!cursor_pass"(rx222_pos, "metachar:sym<( )>", 'backtrack'=>1)
    .return (rx222_cur)
  rx222_restart635:
    repr_get_attr_obj rx222_cstack, rx222_cur, rx222_curclass, "$!cstack"
  rx222_fail636:
    unless rx222_bstack, rx222_done634
    pop $I19, rx222_bstack
    if_null rx222_cstack, rx222_cstack_done639
    unless rx222_cstack, rx222_cstack_done639
    dec $I19
    set $P11, rx222_cstack[$I19]
  rx222_cstack_done639:
    pop rx222_rep, rx222_bstack
    pop rx222_pos, rx222_bstack
    pop $I19, rx222_bstack
    lt rx222_pos, -1, rx222_done634
    lt rx222_pos, 0, rx222_fail636
    eq $I19, 0, rx222_fail636
    nqp_islist $I20, rx222_cstack
    unless $I20, rx222_jump637
    elements $I18, rx222_bstack
    le $I18, 0, rx222_cut638
    dec $I18
    set $I18, rx222_bstack[$I18]
  rx222_cut638:
    assign rx222_cstack, $I18
  rx222_jump637:
    jump $I19
  rx222_done634:
    rx222_cur."!cursor_fail"()
    .return (rx222_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<'>" :subid("cuid_46_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 195
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx225_start
    .local string rx225_tgt
    .local int rx225_pos
    .local int rx225_off
    .local int rx225_eos
    .local int rx225_rep
    .local pmc rx225_cur
    .local pmc rx225_curclass
    .local pmc rx225_bstack
    .local pmc rx225_cstack
    rx225_start = self."!cursor_start_all"()
    set rx225_cur, rx225_start[0]
    set rx225_tgt, rx225_start[1]
    set rx225_pos, rx225_start[2]
    set rx225_curclass, rx225_start[3]
    set rx225_bstack, rx225_start[4]
    set $I19, rx225_start[5]
    store_lex unicode:"$\x{a2}", rx225_cur
    length rx225_eos, rx225_tgt
    eq $I19, 1, rx225_restart646
    gt rx225_pos, rx225_eos, rx225_fail647
    repr_get_attr_int $I11, self, rx225_curclass, "$!from"
    ne $I11, -1, rxscan226_done653
    goto rxscan226_scan652
  rxscan226_loop651:
    inc rx225_pos
    gt rx225_pos, rx225_eos, rx225_fail647
    repr_bind_attr_int rx225_cur, rx225_curclass, "$!from", rx225_pos
  rxscan226_scan652:
    nqp_rxmark rx225_bstack, rxscan226_loop651, rx225_pos, 0
  rxscan226_done653:
    ge rx225_pos, rx225_eos, rx225_fail647
    substr $S11, rx225_tgt, rx225_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx225_fail647
    repr_bind_attr_int rx225_cur, rx225_curclass, "$!pos", rx225_pos
    $P11 = rx225_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx225_curclass, "$!pos"
    lt $I11, 0, rx225_fail647
    nqp_rxmark rx225_bstack, rxsubrule227_pass654, -1, 0
  rxsubrule227_pass654:
    rx225_cstack = rx225_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx225_pos, $P11, rx225_curclass, "$!pos"
    rx225_cur."!cursor_pass"(rx225_pos, "metachar:sym<'>", 'backtrack'=>1)
    .return (rx225_cur)
  rx225_restart646:
    repr_get_attr_obj rx225_cstack, rx225_cur, rx225_curclass, "$!cstack"
  rx225_fail647:
    unless rx225_bstack, rx225_done645
    pop $I19, rx225_bstack
    if_null rx225_cstack, rx225_cstack_done650
    unless rx225_cstack, rx225_cstack_done650
    dec $I19
    set $P11, rx225_cstack[$I19]
  rx225_cstack_done650:
    pop rx225_rep, rx225_bstack
    pop rx225_pos, rx225_bstack
    pop $I19, rx225_bstack
    lt rx225_pos, -1, rx225_done645
    lt rx225_pos, 0, rx225_fail647
    eq $I19, 0, rx225_fail647
    nqp_islist $I20, rx225_cstack
    unless $I20, rx225_jump648
    elements $I18, rx225_bstack
    le $I18, 0, rx225_cut649
    dec $I18
    set $I18, rx225_bstack[$I18]
  rx225_cut649:
    assign rx225_cstack, $I18
  rx225_jump648:
    jump $I19
  rx225_done645:
    rx225_cur."!cursor_fail"()
    .return (rx225_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<\">" :subid("cuid_47_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 196
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx228_start
    .local string rx228_tgt
    .local int rx228_pos
    .local int rx228_off
    .local int rx228_eos
    .local int rx228_rep
    .local pmc rx228_cur
    .local pmc rx228_curclass
    .local pmc rx228_bstack
    .local pmc rx228_cstack
    rx228_start = self."!cursor_start_all"()
    set rx228_cur, rx228_start[0]
    set rx228_tgt, rx228_start[1]
    set rx228_pos, rx228_start[2]
    set rx228_curclass, rx228_start[3]
    set rx228_bstack, rx228_start[4]
    set $I19, rx228_start[5]
    store_lex unicode:"$\x{a2}", rx228_cur
    length rx228_eos, rx228_tgt
    eq $I19, 1, rx228_restart657
    gt rx228_pos, rx228_eos, rx228_fail658
    repr_get_attr_int $I11, self, rx228_curclass, "$!from"
    ne $I11, -1, rxscan229_done664
    goto rxscan229_scan663
  rxscan229_loop662:
    inc rx228_pos
    gt rx228_pos, rx228_eos, rx228_fail658
    repr_bind_attr_int rx228_cur, rx228_curclass, "$!from", rx228_pos
  rxscan229_scan663:
    nqp_rxmark rx228_bstack, rxscan229_loop662, rx228_pos, 0
  rxscan229_done664:
    ge rx228_pos, rx228_eos, rx228_fail658
    substr $S11, rx228_tgt, rx228_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx228_fail658
    repr_bind_attr_int rx228_cur, rx228_curclass, "$!pos", rx228_pos
    $P11 = rx228_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx228_curclass, "$!pos"
    lt $I11, 0, rx228_fail658
    nqp_rxmark rx228_bstack, rxsubrule230_pass665, -1, 0
  rxsubrule230_pass665:
    rx228_cstack = rx228_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx228_pos, $P11, rx228_curclass, "$!pos"
    rx228_cur."!cursor_pass"(rx228_pos, "metachar:sym<\">", 'backtrack'=>1)
    .return (rx228_cur)
  rx228_restart657:
    repr_get_attr_obj rx228_cstack, rx228_cur, rx228_curclass, "$!cstack"
  rx228_fail658:
    unless rx228_bstack, rx228_done656
    pop $I19, rx228_bstack
    if_null rx228_cstack, rx228_cstack_done661
    unless rx228_cstack, rx228_cstack_done661
    dec $I19
    set $P11, rx228_cstack[$I19]
  rx228_cstack_done661:
    pop rx228_rep, rx228_bstack
    pop rx228_pos, rx228_bstack
    pop $I19, rx228_bstack
    lt rx228_pos, -1, rx228_done656
    lt rx228_pos, 0, rx228_fail658
    eq $I19, 0, rx228_fail658
    nqp_islist $I20, rx228_cstack
    unless $I20, rx228_jump659
    elements $I18, rx228_bstack
    le $I18, 0, rx228_cut660
    dec $I18
    set $I18, rx228_bstack[$I18]
  rx228_cut660:
    assign rx228_cstack, $I18
  rx228_jump659:
    jump $I19
  rx228_done656:
    rx228_cur."!cursor_fail"()
    .return (rx228_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<.>" :subid("cuid_48_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 197
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx231_start
    .local string rx231_tgt
    .local int rx231_pos
    .local int rx231_off
    .local int rx231_eos
    .local int rx231_rep
    .local pmc rx231_cur
    .local pmc rx231_curclass
    .local pmc rx231_bstack
    .local pmc rx231_cstack
    rx231_start = self."!cursor_start_all"()
    set rx231_cur, rx231_start[0]
    set rx231_tgt, rx231_start[1]
    set rx231_pos, rx231_start[2]
    set rx231_curclass, rx231_start[3]
    set rx231_bstack, rx231_start[4]
    set $I19, rx231_start[5]
    store_lex unicode:"$\x{a2}", rx231_cur
    length rx231_eos, rx231_tgt
    eq $I19, 1, rx231_restart668
    gt rx231_pos, rx231_eos, rx231_fail669
    repr_get_attr_int $I11, self, rx231_curclass, "$!from"
    ne $I11, -1, rxscan232_done675
    goto rxscan232_scan674
  rxscan232_loop673:
    inc rx231_pos
    gt rx231_pos, rx231_eos, rx231_fail669
    repr_bind_attr_int rx231_cur, rx231_curclass, "$!from", rx231_pos
  rxscan232_scan674:
    nqp_rxmark rx231_bstack, rxscan232_loop673, rx231_pos, 0
  rxscan232_done675:
    nqp_rxmark rx231_bstack, rxcap233_fail677, rx231_pos, 0
    add $I11, rx231_pos, 1
    gt $I11, rx231_eos, rx231_fail669
    substr $S10, rx231_tgt, rx231_pos, 1
    ne $S10, ucs4:".", rx231_fail669
    add rx231_pos, 1
    nqp_rxpeek $I19, rx231_bstack, rxcap233_fail677
    inc $I19
    set $I11, rx231_bstack[$I19]
    repr_bind_attr_int rx231_cur, rx231_curclass, "$!pos", rx231_pos
    $P11 = rx231_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx231_pos)
    rx231_cstack = rx231_cur."!cursor_capture"($P11, "sym")
    goto rxcap233_done676
  rxcap233_fail677:
    goto rx231_fail669
  rxcap233_done676:
    rx231_cur."!cursor_pass"(rx231_pos, "metachar:sym<.>", 'backtrack'=>1)
    .return (rx231_cur)
  rx231_restart668:
    repr_get_attr_obj rx231_cstack, rx231_cur, rx231_curclass, "$!cstack"
  rx231_fail669:
    unless rx231_bstack, rx231_done667
    pop $I19, rx231_bstack
    if_null rx231_cstack, rx231_cstack_done672
    unless rx231_cstack, rx231_cstack_done672
    dec $I19
    set $P11, rx231_cstack[$I19]
  rx231_cstack_done672:
    pop rx231_rep, rx231_bstack
    pop rx231_pos, rx231_bstack
    pop $I19, rx231_bstack
    lt rx231_pos, -1, rx231_done667
    lt rx231_pos, 0, rx231_fail669
    eq $I19, 0, rx231_fail669
    nqp_islist $I20, rx231_cstack
    unless $I20, rx231_jump670
    elements $I18, rx231_bstack
    le $I18, 0, rx231_cut671
    dec $I18
    set $I18, rx231_bstack[$I18]
  rx231_cut671:
    assign rx231_cstack, $I18
  rx231_jump670:
    jump $I19
  rx231_done667:
    rx231_cur."!cursor_fail"()
    .return (rx231_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^>" :subid("cuid_49_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 198
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx234_start
    .local string rx234_tgt
    .local int rx234_pos
    .local int rx234_off
    .local int rx234_eos
    .local int rx234_rep
    .local pmc rx234_cur
    .local pmc rx234_curclass
    .local pmc rx234_bstack
    .local pmc rx234_cstack
    rx234_start = self."!cursor_start_all"()
    set rx234_cur, rx234_start[0]
    set rx234_tgt, rx234_start[1]
    set rx234_pos, rx234_start[2]
    set rx234_curclass, rx234_start[3]
    set rx234_bstack, rx234_start[4]
    set $I19, rx234_start[5]
    store_lex unicode:"$\x{a2}", rx234_cur
    length rx234_eos, rx234_tgt
    eq $I19, 1, rx234_restart680
    gt rx234_pos, rx234_eos, rx234_fail681
    repr_get_attr_int $I11, self, rx234_curclass, "$!from"
    ne $I11, -1, rxscan235_done687
    goto rxscan235_scan686
  rxscan235_loop685:
    inc rx234_pos
    gt rx234_pos, rx234_eos, rx234_fail681
    repr_bind_attr_int rx234_cur, rx234_curclass, "$!from", rx234_pos
  rxscan235_scan686:
    nqp_rxmark rx234_bstack, rxscan235_loop685, rx234_pos, 0
  rxscan235_done687:
    nqp_rxmark rx234_bstack, rxcap236_fail689, rx234_pos, 0
    add $I11, rx234_pos, 1
    gt $I11, rx234_eos, rx234_fail681
    substr $S10, rx234_tgt, rx234_pos, 1
    ne $S10, ucs4:"^", rx234_fail681
    add rx234_pos, 1
    nqp_rxpeek $I19, rx234_bstack, rxcap236_fail689
    inc $I19
    set $I11, rx234_bstack[$I19]
    repr_bind_attr_int rx234_cur, rx234_curclass, "$!pos", rx234_pos
    $P11 = rx234_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx234_pos)
    rx234_cstack = rx234_cur."!cursor_capture"($P11, "sym")
    goto rxcap236_done688
  rxcap236_fail689:
    goto rx234_fail681
  rxcap236_done688:
    rx234_cur."!cursor_pass"(rx234_pos, "metachar:sym<^>", 'backtrack'=>1)
    .return (rx234_cur)
  rx234_restart680:
    repr_get_attr_obj rx234_cstack, rx234_cur, rx234_curclass, "$!cstack"
  rx234_fail681:
    unless rx234_bstack, rx234_done679
    pop $I19, rx234_bstack
    if_null rx234_cstack, rx234_cstack_done684
    unless rx234_cstack, rx234_cstack_done684
    dec $I19
    set $P11, rx234_cstack[$I19]
  rx234_cstack_done684:
    pop rx234_rep, rx234_bstack
    pop rx234_pos, rx234_bstack
    pop $I19, rx234_bstack
    lt rx234_pos, -1, rx234_done679
    lt rx234_pos, 0, rx234_fail681
    eq $I19, 0, rx234_fail681
    nqp_islist $I20, rx234_cstack
    unless $I20, rx234_jump682
    elements $I18, rx234_bstack
    le $I18, 0, rx234_cut683
    dec $I18
    set $I18, rx234_bstack[$I18]
  rx234_cut683:
    assign rx234_cstack, $I18
  rx234_jump682:
    jump $I19
  rx234_done679:
    rx234_cur."!cursor_fail"()
    .return (rx234_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^^>" :subid("cuid_50_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 199
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx237_start
    .local string rx237_tgt
    .local int rx237_pos
    .local int rx237_off
    .local int rx237_eos
    .local int rx237_rep
    .local pmc rx237_cur
    .local pmc rx237_curclass
    .local pmc rx237_bstack
    .local pmc rx237_cstack
    rx237_start = self."!cursor_start_all"()
    set rx237_cur, rx237_start[0]
    set rx237_tgt, rx237_start[1]
    set rx237_pos, rx237_start[2]
    set rx237_curclass, rx237_start[3]
    set rx237_bstack, rx237_start[4]
    set $I19, rx237_start[5]
    store_lex unicode:"$\x{a2}", rx237_cur
    length rx237_eos, rx237_tgt
    eq $I19, 1, rx237_restart692
    gt rx237_pos, rx237_eos, rx237_fail693
    repr_get_attr_int $I11, self, rx237_curclass, "$!from"
    ne $I11, -1, rxscan238_done699
    goto rxscan238_scan698
  rxscan238_loop697:
    inc rx237_pos
    gt rx237_pos, rx237_eos, rx237_fail693
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!from", rx237_pos
  rxscan238_scan698:
    nqp_rxmark rx237_bstack, rxscan238_loop697, rx237_pos, 0
  rxscan238_done699:
    nqp_rxmark rx237_bstack, rxcap239_fail701, rx237_pos, 0
    add $I11, rx237_pos, 2
    gt $I11, rx237_eos, rx237_fail693
    substr $S10, rx237_tgt, rx237_pos, 2
    ne $S10, ucs4:"^^", rx237_fail693
    add rx237_pos, 2
    nqp_rxpeek $I19, rx237_bstack, rxcap239_fail701
    inc $I19
    set $I11, rx237_bstack[$I19]
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx237_pos)
    rx237_cstack = rx237_cur."!cursor_capture"($P11, "sym")
    goto rxcap239_done700
  rxcap239_fail701:
    goto rx237_fail693
  rxcap239_done700:
    rx237_cur."!cursor_pass"(rx237_pos, "metachar:sym<^^>", 'backtrack'=>1)
    .return (rx237_cur)
  rx237_restart692:
    repr_get_attr_obj rx237_cstack, rx237_cur, rx237_curclass, "$!cstack"
  rx237_fail693:
    unless rx237_bstack, rx237_done691
    pop $I19, rx237_bstack
    if_null rx237_cstack, rx237_cstack_done696
    unless rx237_cstack, rx237_cstack_done696
    dec $I19
    set $P11, rx237_cstack[$I19]
  rx237_cstack_done696:
    pop rx237_rep, rx237_bstack
    pop rx237_pos, rx237_bstack
    pop $I19, rx237_bstack
    lt rx237_pos, -1, rx237_done691
    lt rx237_pos, 0, rx237_fail693
    eq $I19, 0, rx237_fail693
    nqp_islist $I20, rx237_cstack
    unless $I20, rx237_jump694
    elements $I18, rx237_bstack
    le $I18, 0, rx237_cut695
    dec $I18
    set $I18, rx237_bstack[$I18]
  rx237_cut695:
    assign rx237_cstack, $I18
  rx237_jump694:
    jump $I19
  rx237_done691:
    rx237_cur."!cursor_fail"()
    .return (rx237_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$>" :subid("cuid_51_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 200
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx240_start
    .local string rx240_tgt
    .local int rx240_pos
    .local int rx240_off
    .local int rx240_eos
    .local int rx240_rep
    .local pmc rx240_cur
    .local pmc rx240_curclass
    .local pmc rx240_bstack
    .local pmc rx240_cstack
    rx240_start = self."!cursor_start_all"()
    set rx240_cur, rx240_start[0]
    set rx240_tgt, rx240_start[1]
    set rx240_pos, rx240_start[2]
    set rx240_curclass, rx240_start[3]
    set rx240_bstack, rx240_start[4]
    set $I19, rx240_start[5]
    store_lex unicode:"$\x{a2}", rx240_cur
    length rx240_eos, rx240_tgt
    eq $I19, 1, rx240_restart704
    gt rx240_pos, rx240_eos, rx240_fail705
    repr_get_attr_int $I11, self, rx240_curclass, "$!from"
    ne $I11, -1, rxscan241_done711
    goto rxscan241_scan710
  rxscan241_loop709:
    inc rx240_pos
    gt rx240_pos, rx240_eos, rx240_fail705
    repr_bind_attr_int rx240_cur, rx240_curclass, "$!from", rx240_pos
  rxscan241_scan710:
    nqp_rxmark rx240_bstack, rxscan241_loop709, rx240_pos, 0
  rxscan241_done711:
    nqp_rxmark rx240_bstack, rxcap242_fail713, rx240_pos, 0
    add $I11, rx240_pos, 1
    gt $I11, rx240_eos, rx240_fail705
    substr $S10, rx240_tgt, rx240_pos, 1
    ne $S10, ucs4:"$", rx240_fail705
    add rx240_pos, 1
    nqp_rxpeek $I19, rx240_bstack, rxcap242_fail713
    inc $I19
    set $I11, rx240_bstack[$I19]
    repr_bind_attr_int rx240_cur, rx240_curclass, "$!pos", rx240_pos
    $P11 = rx240_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx240_pos)
    rx240_cstack = rx240_cur."!cursor_capture"($P11, "sym")
    goto rxcap242_done712
  rxcap242_fail713:
    goto rx240_fail705
  rxcap242_done712:
    rx240_cur."!cursor_pass"(rx240_pos, "metachar:sym<$>", 'backtrack'=>1)
    .return (rx240_cur)
  rx240_restart704:
    repr_get_attr_obj rx240_cstack, rx240_cur, rx240_curclass, "$!cstack"
  rx240_fail705:
    unless rx240_bstack, rx240_done703
    pop $I19, rx240_bstack
    if_null rx240_cstack, rx240_cstack_done708
    unless rx240_cstack, rx240_cstack_done708
    dec $I19
    set $P11, rx240_cstack[$I19]
  rx240_cstack_done708:
    pop rx240_rep, rx240_bstack
    pop rx240_pos, rx240_bstack
    pop $I19, rx240_bstack
    lt rx240_pos, -1, rx240_done703
    lt rx240_pos, 0, rx240_fail705
    eq $I19, 0, rx240_fail705
    nqp_islist $I20, rx240_cstack
    unless $I20, rx240_jump706
    elements $I18, rx240_bstack
    le $I18, 0, rx240_cut707
    dec $I18
    set $I18, rx240_bstack[$I18]
  rx240_cut707:
    assign rx240_cstack, $I18
  rx240_jump706:
    jump $I19
  rx240_done703:
    rx240_cur."!cursor_fail"()
    .return (rx240_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$$>" :subid("cuid_52_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 201
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx243_start
    .local string rx243_tgt
    .local int rx243_pos
    .local int rx243_off
    .local int rx243_eos
    .local int rx243_rep
    .local pmc rx243_cur
    .local pmc rx243_curclass
    .local pmc rx243_bstack
    .local pmc rx243_cstack
    rx243_start = self."!cursor_start_all"()
    set rx243_cur, rx243_start[0]
    set rx243_tgt, rx243_start[1]
    set rx243_pos, rx243_start[2]
    set rx243_curclass, rx243_start[3]
    set rx243_bstack, rx243_start[4]
    set $I19, rx243_start[5]
    store_lex unicode:"$\x{a2}", rx243_cur
    length rx243_eos, rx243_tgt
    eq $I19, 1, rx243_restart716
    gt rx243_pos, rx243_eos, rx243_fail717
    repr_get_attr_int $I11, self, rx243_curclass, "$!from"
    ne $I11, -1, rxscan244_done723
    goto rxscan244_scan722
  rxscan244_loop721:
    inc rx243_pos
    gt rx243_pos, rx243_eos, rx243_fail717
    repr_bind_attr_int rx243_cur, rx243_curclass, "$!from", rx243_pos
  rxscan244_scan722:
    nqp_rxmark rx243_bstack, rxscan244_loop721, rx243_pos, 0
  rxscan244_done723:
    nqp_rxmark rx243_bstack, rxcap245_fail725, rx243_pos, 0
    add $I11, rx243_pos, 2
    gt $I11, rx243_eos, rx243_fail717
    substr $S10, rx243_tgt, rx243_pos, 2
    ne $S10, ucs4:"$$", rx243_fail717
    add rx243_pos, 2
    nqp_rxpeek $I19, rx243_bstack, rxcap245_fail725
    inc $I19
    set $I11, rx243_bstack[$I19]
    repr_bind_attr_int rx243_cur, rx243_curclass, "$!pos", rx243_pos
    $P11 = rx243_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx243_pos)
    rx243_cstack = rx243_cur."!cursor_capture"($P11, "sym")
    goto rxcap245_done724
  rxcap245_fail725:
    goto rx243_fail717
  rxcap245_done724:
    rx243_cur."!cursor_pass"(rx243_pos, "metachar:sym<$$>", 'backtrack'=>1)
    .return (rx243_cur)
  rx243_restart716:
    repr_get_attr_obj rx243_cstack, rx243_cur, rx243_curclass, "$!cstack"
  rx243_fail717:
    unless rx243_bstack, rx243_done715
    pop $I19, rx243_bstack
    if_null rx243_cstack, rx243_cstack_done720
    unless rx243_cstack, rx243_cstack_done720
    dec $I19
    set $P11, rx243_cstack[$I19]
  rx243_cstack_done720:
    pop rx243_rep, rx243_bstack
    pop rx243_pos, rx243_bstack
    pop $I19, rx243_bstack
    lt rx243_pos, -1, rx243_done715
    lt rx243_pos, 0, rx243_fail717
    eq $I19, 0, rx243_fail717
    nqp_islist $I20, rx243_cstack
    unless $I20, rx243_jump718
    elements $I18, rx243_bstack
    le $I18, 0, rx243_cut719
    dec $I18
    set $I18, rx243_bstack[$I18]
  rx243_cut719:
    assign rx243_cstack, $I18
  rx243_jump718:
    jump $I19
  rx243_done715:
    rx243_cur."!cursor_fail"()
    .return (rx243_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:::>" :subid("cuid_53_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 202
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx246_start
    .local string rx246_tgt
    .local int rx246_pos
    .local int rx246_off
    .local int rx246_eos
    .local int rx246_rep
    .local pmc rx246_cur
    .local pmc rx246_curclass
    .local pmc rx246_bstack
    .local pmc rx246_cstack
    rx246_start = self."!cursor_start_all"()
    set rx246_cur, rx246_start[0]
    set rx246_tgt, rx246_start[1]
    set rx246_pos, rx246_start[2]
    set rx246_curclass, rx246_start[3]
    set rx246_bstack, rx246_start[4]
    set $I19, rx246_start[5]
    store_lex unicode:"$\x{a2}", rx246_cur
    length rx246_eos, rx246_tgt
    eq $I19, 1, rx246_restart728
    gt rx246_pos, rx246_eos, rx246_fail729
    repr_get_attr_int $I11, self, rx246_curclass, "$!from"
    ne $I11, -1, rxscan247_done735
    goto rxscan247_scan734
  rxscan247_loop733:
    inc rx246_pos
    gt rx246_pos, rx246_eos, rx246_fail729
    repr_bind_attr_int rx246_cur, rx246_curclass, "$!from", rx246_pos
  rxscan247_scan734:
    nqp_rxmark rx246_bstack, rxscan247_loop733, rx246_pos, 0
  rxscan247_done735:
    nqp_rxmark rx246_bstack, rxcap248_fail737, rx246_pos, 0
    add $I11, rx246_pos, 3
    gt $I11, rx246_eos, rx246_fail729
    substr $S10, rx246_tgt, rx246_pos, 3
    ne $S10, ucs4:":::", rx246_fail729
    add rx246_pos, 3
    nqp_rxpeek $I19, rx246_bstack, rxcap248_fail737
    inc $I19
    set $I11, rx246_bstack[$I19]
    repr_bind_attr_int rx246_cur, rx246_curclass, "$!pos", rx246_pos
    $P11 = rx246_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx246_pos)
    rx246_cstack = rx246_cur."!cursor_capture"($P11, "sym")
    goto rxcap248_done736
  rxcap248_fail737:
    goto rx246_fail729
  rxcap248_done736:
    repr_bind_attr_int rx246_cur, rx246_curclass, "$!pos", rx246_pos
    $P11 = rx246_cur."panic"("::: not yet implemented")
    repr_get_attr_int $I11, $P11, rx246_curclass, "$!pos"
    lt $I11, 0, rx246_fail729
    repr_get_attr_int rx246_pos, $P11, rx246_curclass, "$!pos"
    rx246_cur."!cursor_pass"(rx246_pos, "metachar:sym<:::>", 'backtrack'=>1)
    .return (rx246_cur)
  rx246_restart728:
    repr_get_attr_obj rx246_cstack, rx246_cur, rx246_curclass, "$!cstack"
  rx246_fail729:
    unless rx246_bstack, rx246_done727
    pop $I19, rx246_bstack
    if_null rx246_cstack, rx246_cstack_done732
    unless rx246_cstack, rx246_cstack_done732
    dec $I19
    set $P11, rx246_cstack[$I19]
  rx246_cstack_done732:
    pop rx246_rep, rx246_bstack
    pop rx246_pos, rx246_bstack
    pop $I19, rx246_bstack
    lt rx246_pos, -1, rx246_done727
    lt rx246_pos, 0, rx246_fail729
    eq $I19, 0, rx246_fail729
    nqp_islist $I20, rx246_cstack
    unless $I20, rx246_jump730
    elements $I18, rx246_bstack
    le $I18, 0, rx246_cut731
    dec $I18
    set $I18, rx246_bstack[$I18]
  rx246_cut731:
    assign rx246_cstack, $I18
  rx246_jump730:
    jump $I19
  rx246_done727:
    rx246_cur."!cursor_fail"()
    .return (rx246_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<::>" :subid("cuid_54_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 203
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx250_start
    .local string rx250_tgt
    .local int rx250_pos
    .local int rx250_off
    .local int rx250_eos
    .local int rx250_rep
    .local pmc rx250_cur
    .local pmc rx250_curclass
    .local pmc rx250_bstack
    .local pmc rx250_cstack
    rx250_start = self."!cursor_start_all"()
    set rx250_cur, rx250_start[0]
    set rx250_tgt, rx250_start[1]
    set rx250_pos, rx250_start[2]
    set rx250_curclass, rx250_start[3]
    set rx250_bstack, rx250_start[4]
    set $I19, rx250_start[5]
    store_lex unicode:"$\x{a2}", rx250_cur
    length rx250_eos, rx250_tgt
    eq $I19, 1, rx250_restart741
    gt rx250_pos, rx250_eos, rx250_fail742
    repr_get_attr_int $I11, self, rx250_curclass, "$!from"
    ne $I11, -1, rxscan251_done748
    goto rxscan251_scan747
  rxscan251_loop746:
    inc rx250_pos
    gt rx250_pos, rx250_eos, rx250_fail742
    repr_bind_attr_int rx250_cur, rx250_curclass, "$!from", rx250_pos
  rxscan251_scan747:
    nqp_rxmark rx250_bstack, rxscan251_loop746, rx250_pos, 0
  rxscan251_done748:
    nqp_rxmark rx250_bstack, rxcap252_fail750, rx250_pos, 0
    add $I11, rx250_pos, 2
    gt $I11, rx250_eos, rx250_fail742
    substr $S10, rx250_tgt, rx250_pos, 2
    ne $S10, ucs4:"::", rx250_fail742
    add rx250_pos, 2
    nqp_rxpeek $I19, rx250_bstack, rxcap252_fail750
    inc $I19
    set $I11, rx250_bstack[$I19]
    repr_bind_attr_int rx250_cur, rx250_curclass, "$!pos", rx250_pos
    $P11 = rx250_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx250_pos)
    rx250_cstack = rx250_cur."!cursor_capture"($P11, "sym")
    goto rxcap252_done749
  rxcap252_fail750:
    goto rx250_fail742
  rxcap252_done749:
    repr_bind_attr_int rx250_cur, rx250_curclass, "$!pos", rx250_pos
    $P11 = rx250_cur."panic"(":: not yet implemented")
    repr_get_attr_int $I11, $P11, rx250_curclass, "$!pos"
    lt $I11, 0, rx250_fail742
    repr_get_attr_int rx250_pos, $P11, rx250_curclass, "$!pos"
    rx250_cur."!cursor_pass"(rx250_pos, "metachar:sym<::>", 'backtrack'=>1)
    .return (rx250_cur)
  rx250_restart741:
    repr_get_attr_obj rx250_cstack, rx250_cur, rx250_curclass, "$!cstack"
  rx250_fail742:
    unless rx250_bstack, rx250_done740
    pop $I19, rx250_bstack
    if_null rx250_cstack, rx250_cstack_done745
    unless rx250_cstack, rx250_cstack_done745
    dec $I19
    set $P11, rx250_cstack[$I19]
  rx250_cstack_done745:
    pop rx250_rep, rx250_bstack
    pop rx250_pos, rx250_bstack
    pop $I19, rx250_bstack
    lt rx250_pos, -1, rx250_done740
    lt rx250_pos, 0, rx250_fail742
    eq $I19, 0, rx250_fail742
    nqp_islist $I20, rx250_cstack
    unless $I20, rx250_jump743
    elements $I18, rx250_bstack
    le $I18, 0, rx250_cut744
    dec $I18
    set $I18, rx250_bstack[$I18]
  rx250_cut744:
    assign rx250_cstack, $I18
  rx250_jump743:
    jump $I19
  rx250_done740:
    rx250_cur."!cursor_fail"()
    .return (rx250_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<lwb>" :subid("cuid_55_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 204
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx254_start
    .local string rx254_tgt
    .local int rx254_pos
    .local int rx254_off
    .local int rx254_eos
    .local int rx254_rep
    .local pmc rx254_cur
    .local pmc rx254_curclass
    .local pmc rx254_bstack
    .local pmc rx254_cstack
    rx254_start = self."!cursor_start_all"()
    set rx254_cur, rx254_start[0]
    set rx254_tgt, rx254_start[1]
    set rx254_pos, rx254_start[2]
    set rx254_curclass, rx254_start[3]
    set rx254_bstack, rx254_start[4]
    set $I19, rx254_start[5]
    store_lex unicode:"$\x{a2}", rx254_cur
    length rx254_eos, rx254_tgt
    eq $I19, 1, rx254_restart754
    gt rx254_pos, rx254_eos, rx254_fail755
    repr_get_attr_int $I11, self, rx254_curclass, "$!from"
    ne $I11, -1, rxscan255_done761
    goto rxscan255_scan760
  rxscan255_loop759:
    inc rx254_pos
    gt rx254_pos, rx254_eos, rx254_fail755
    repr_bind_attr_int rx254_cur, rx254_curclass, "$!from", rx254_pos
  rxscan255_scan760:
    nqp_rxmark rx254_bstack, rxscan255_loop759, rx254_pos, 0
  rxscan255_done761:
    nqp_rxmark rx254_bstack, rxcap256_fail763, rx254_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt257_0765
    nqp_push_label $P11, alt257_1766
    nqp_rxmark rx254_bstack, alt257_end764, -1, 0
    rx254_cur."!alt"(rx254_pos, "alt_nfa__10_1367388595.29965", $P11)
    goto rx254_fail755
  alt257_0765:
    add $I11, rx254_pos, 2
    gt $I11, rx254_eos, rx254_fail755
    substr $S10, rx254_tgt, rx254_pos, 2
    ne $S10, ucs4:"<<", rx254_fail755
    add rx254_pos, 2
    goto alt257_end764
  alt257_1766:
    add $I11, rx254_pos, 1
    gt $I11, rx254_eos, rx254_fail755
    substr $S10, rx254_tgt, rx254_pos, 1
    ne $S10, ucs4:"\x{ab}", rx254_fail755
    add rx254_pos, 1
    goto alt257_end764
  alt257_end764:
    nqp_rxcommit rx254_bstack, alt257_end764
    nqp_rxpeek $I19, rx254_bstack, rxcap256_fail763
    inc $I19
    set $I11, rx254_bstack[$I19]
    repr_bind_attr_int rx254_cur, rx254_curclass, "$!pos", rx254_pos
    $P11 = rx254_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx254_pos)
    rx254_cstack = rx254_cur."!cursor_capture"($P11, "sym")
    goto rxcap256_done762
  rxcap256_fail763:
    goto rx254_fail755
  rxcap256_done762:
    rx254_cur."!cursor_pass"(rx254_pos, "metachar:sym<lwb>", 'backtrack'=>1)
    .return (rx254_cur)
  rx254_restart754:
    repr_get_attr_obj rx254_cstack, rx254_cur, rx254_curclass, "$!cstack"
  rx254_fail755:
    unless rx254_bstack, rx254_done753
    pop $I19, rx254_bstack
    if_null rx254_cstack, rx254_cstack_done758
    unless rx254_cstack, rx254_cstack_done758
    dec $I19
    set $P11, rx254_cstack[$I19]
  rx254_cstack_done758:
    pop rx254_rep, rx254_bstack
    pop rx254_pos, rx254_bstack
    pop $I19, rx254_bstack
    lt rx254_pos, -1, rx254_done753
    lt rx254_pos, 0, rx254_fail755
    eq $I19, 0, rx254_fail755
    nqp_islist $I20, rx254_cstack
    unless $I20, rx254_jump756
    elements $I18, rx254_bstack
    le $I18, 0, rx254_cut757
    dec $I18
    set $I18, rx254_bstack[$I18]
  rx254_cut757:
    assign rx254_cstack, $I18
  rx254_jump756:
    jump $I19
  rx254_done753:
    rx254_cur."!cursor_fail"()
    .return (rx254_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<rwb>" :subid("cuid_56_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 205
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx258_start
    .local string rx258_tgt
    .local int rx258_pos
    .local int rx258_off
    .local int rx258_eos
    .local int rx258_rep
    .local pmc rx258_cur
    .local pmc rx258_curclass
    .local pmc rx258_bstack
    .local pmc rx258_cstack
    rx258_start = self."!cursor_start_all"()
    set rx258_cur, rx258_start[0]
    set rx258_tgt, rx258_start[1]
    set rx258_pos, rx258_start[2]
    set rx258_curclass, rx258_start[3]
    set rx258_bstack, rx258_start[4]
    set $I19, rx258_start[5]
    store_lex unicode:"$\x{a2}", rx258_cur
    length rx258_eos, rx258_tgt
    eq $I19, 1, rx258_restart769
    gt rx258_pos, rx258_eos, rx258_fail770
    repr_get_attr_int $I11, self, rx258_curclass, "$!from"
    ne $I11, -1, rxscan259_done776
    goto rxscan259_scan775
  rxscan259_loop774:
    inc rx258_pos
    gt rx258_pos, rx258_eos, rx258_fail770
    repr_bind_attr_int rx258_cur, rx258_curclass, "$!from", rx258_pos
  rxscan259_scan775:
    nqp_rxmark rx258_bstack, rxscan259_loop774, rx258_pos, 0
  rxscan259_done776:
    nqp_rxmark rx258_bstack, rxcap260_fail778, rx258_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt261_0780
    nqp_push_label $P11, alt261_1781
    nqp_rxmark rx258_bstack, alt261_end779, -1, 0
    rx258_cur."!alt"(rx258_pos, "alt_nfa__11_1367388595.30832", $P11)
    goto rx258_fail770
  alt261_0780:
    add $I11, rx258_pos, 2
    gt $I11, rx258_eos, rx258_fail770
    substr $S10, rx258_tgt, rx258_pos, 2
    ne $S10, ucs4:">>", rx258_fail770
    add rx258_pos, 2
    goto alt261_end779
  alt261_1781:
    add $I11, rx258_pos, 1
    gt $I11, rx258_eos, rx258_fail770
    substr $S10, rx258_tgt, rx258_pos, 1
    ne $S10, ucs4:"\x{bb}", rx258_fail770
    add rx258_pos, 1
    goto alt261_end779
  alt261_end779:
    nqp_rxcommit rx258_bstack, alt261_end779
    nqp_rxpeek $I19, rx258_bstack, rxcap260_fail778
    inc $I19
    set $I11, rx258_bstack[$I19]
    repr_bind_attr_int rx258_cur, rx258_curclass, "$!pos", rx258_pos
    $P11 = rx258_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx258_pos)
    rx258_cstack = rx258_cur."!cursor_capture"($P11, "sym")
    goto rxcap260_done777
  rxcap260_fail778:
    goto rx258_fail770
  rxcap260_done777:
    rx258_cur."!cursor_pass"(rx258_pos, "metachar:sym<rwb>", 'backtrack'=>1)
    .return (rx258_cur)
  rx258_restart769:
    repr_get_attr_obj rx258_cstack, rx258_cur, rx258_curclass, "$!cstack"
  rx258_fail770:
    unless rx258_bstack, rx258_done768
    pop $I19, rx258_bstack
    if_null rx258_cstack, rx258_cstack_done773
    unless rx258_cstack, rx258_cstack_done773
    dec $I19
    set $P11, rx258_cstack[$I19]
  rx258_cstack_done773:
    pop rx258_rep, rx258_bstack
    pop rx258_pos, rx258_bstack
    pop $I19, rx258_bstack
    lt rx258_pos, -1, rx258_done768
    lt rx258_pos, 0, rx258_fail770
    eq $I19, 0, rx258_fail770
    nqp_islist $I20, rx258_cstack
    unless $I20, rx258_jump771
    elements $I18, rx258_bstack
    le $I18, 0, rx258_cut772
    dec $I18
    set $I18, rx258_bstack[$I18]
  rx258_cut772:
    assign rx258_cstack, $I18
  rx258_jump771:
    jump $I19
  rx258_done768:
    rx258_cur."!cursor_fail"()
    .return (rx258_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<from>" :subid("cuid_57_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 206
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx262_start
    .local string rx262_tgt
    .local int rx262_pos
    .local int rx262_off
    .local int rx262_eos
    .local int rx262_rep
    .local pmc rx262_cur
    .local pmc rx262_curclass
    .local pmc rx262_bstack
    .local pmc rx262_cstack
    rx262_start = self."!cursor_start_all"()
    set rx262_cur, rx262_start[0]
    set rx262_tgt, rx262_start[1]
    set rx262_pos, rx262_start[2]
    set rx262_curclass, rx262_start[3]
    set rx262_bstack, rx262_start[4]
    set $I19, rx262_start[5]
    store_lex unicode:"$\x{a2}", rx262_cur
    length rx262_eos, rx262_tgt
    eq $I19, 1, rx262_restart784
    gt rx262_pos, rx262_eos, rx262_fail785
    repr_get_attr_int $I11, self, rx262_curclass, "$!from"
    ne $I11, -1, rxscan263_done791
    goto rxscan263_scan790
  rxscan263_loop789:
    inc rx262_pos
    gt rx262_pos, rx262_eos, rx262_fail785
    repr_bind_attr_int rx262_cur, rx262_curclass, "$!from", rx262_pos
  rxscan263_scan790:
    nqp_rxmark rx262_bstack, rxscan263_loop789, rx262_pos, 0
  rxscan263_done791:
    add $I11, rx262_pos, 2
    gt $I11, rx262_eos, rx262_fail785
    substr $S10, rx262_tgt, rx262_pos, 2
    ne $S10, ucs4:"<(", rx262_fail785
    add rx262_pos, 2
    rx262_cur."!cursor_pass"(rx262_pos, "metachar:sym<from>", 'backtrack'=>1)
    .return (rx262_cur)
  rx262_restart784:
    repr_get_attr_obj rx262_cstack, rx262_cur, rx262_curclass, "$!cstack"
  rx262_fail785:
    unless rx262_bstack, rx262_done783
    pop $I19, rx262_bstack
    if_null rx262_cstack, rx262_cstack_done788
    unless rx262_cstack, rx262_cstack_done788
    dec $I19
    set $P11, rx262_cstack[$I19]
  rx262_cstack_done788:
    pop rx262_rep, rx262_bstack
    pop rx262_pos, rx262_bstack
    pop $I19, rx262_bstack
    lt rx262_pos, -1, rx262_done783
    lt rx262_pos, 0, rx262_fail785
    eq $I19, 0, rx262_fail785
    nqp_islist $I20, rx262_cstack
    unless $I20, rx262_jump786
    elements $I18, rx262_bstack
    le $I18, 0, rx262_cut787
    dec $I18
    set $I18, rx262_bstack[$I18]
  rx262_cut787:
    assign rx262_cstack, $I18
  rx262_jump786:
    jump $I19
  rx262_done783:
    rx262_cur."!cursor_fail"()
    .return (rx262_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<to>" :subid("cuid_58_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 207
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx264_start
    .local string rx264_tgt
    .local int rx264_pos
    .local int rx264_off
    .local int rx264_eos
    .local int rx264_rep
    .local pmc rx264_cur
    .local pmc rx264_curclass
    .local pmc rx264_bstack
    .local pmc rx264_cstack
    rx264_start = self."!cursor_start_all"()
    set rx264_cur, rx264_start[0]
    set rx264_tgt, rx264_start[1]
    set rx264_pos, rx264_start[2]
    set rx264_curclass, rx264_start[3]
    set rx264_bstack, rx264_start[4]
    set $I19, rx264_start[5]
    store_lex unicode:"$\x{a2}", rx264_cur
    length rx264_eos, rx264_tgt
    eq $I19, 1, rx264_restart794
    gt rx264_pos, rx264_eos, rx264_fail795
    repr_get_attr_int $I11, self, rx264_curclass, "$!from"
    ne $I11, -1, rxscan265_done801
    goto rxscan265_scan800
  rxscan265_loop799:
    inc rx264_pos
    gt rx264_pos, rx264_eos, rx264_fail795
    repr_bind_attr_int rx264_cur, rx264_curclass, "$!from", rx264_pos
  rxscan265_scan800:
    nqp_rxmark rx264_bstack, rxscan265_loop799, rx264_pos, 0
  rxscan265_done801:
    add $I11, rx264_pos, 2
    gt $I11, rx264_eos, rx264_fail795
    substr $S10, rx264_tgt, rx264_pos, 2
    ne $S10, ucs4:")>", rx264_fail795
    add rx264_pos, 2
    rx264_cur."!cursor_pass"(rx264_pos, "metachar:sym<to>", 'backtrack'=>1)
    .return (rx264_cur)
  rx264_restart794:
    repr_get_attr_obj rx264_cstack, rx264_cur, rx264_curclass, "$!cstack"
  rx264_fail795:
    unless rx264_bstack, rx264_done793
    pop $I19, rx264_bstack
    if_null rx264_cstack, rx264_cstack_done798
    unless rx264_cstack, rx264_cstack_done798
    dec $I19
    set $P11, rx264_cstack[$I19]
  rx264_cstack_done798:
    pop rx264_rep, rx264_bstack
    pop rx264_pos, rx264_bstack
    pop $I19, rx264_bstack
    lt rx264_pos, -1, rx264_done793
    lt rx264_pos, 0, rx264_fail795
    eq $I19, 0, rx264_fail795
    nqp_islist $I20, rx264_cstack
    unless $I20, rx264_jump796
    elements $I18, rx264_bstack
    le $I18, 0, rx264_cut797
    dec $I18
    set $I18, rx264_bstack[$I18]
  rx264_cut797:
    assign rx264_cstack, $I18
  rx264_jump796:
    jump $I19
  rx264_done793:
    rx264_cur."!cursor_fail"()
    .return (rx264_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<bs>" :subid("cuid_59_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 208
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx266_start
    .local string rx266_tgt
    .local int rx266_pos
    .local int rx266_off
    .local int rx266_eos
    .local int rx266_rep
    .local pmc rx266_cur
    .local pmc rx266_curclass
    .local pmc rx266_bstack
    .local pmc rx266_cstack
    rx266_start = self."!cursor_start_all"()
    set rx266_cur, rx266_start[0]
    set rx266_tgt, rx266_start[1]
    set rx266_pos, rx266_start[2]
    set rx266_curclass, rx266_start[3]
    set rx266_bstack, rx266_start[4]
    set $I19, rx266_start[5]
    store_lex unicode:"$\x{a2}", rx266_cur
    length rx266_eos, rx266_tgt
    eq $I19, 1, rx266_restart804
    gt rx266_pos, rx266_eos, rx266_fail805
    repr_get_attr_int $I11, self, rx266_curclass, "$!from"
    ne $I11, -1, rxscan267_done811
    goto rxscan267_scan810
  rxscan267_loop809:
    inc rx266_pos
    gt rx266_pos, rx266_eos, rx266_fail805
    repr_bind_attr_int rx266_cur, rx266_curclass, "$!from", rx266_pos
  rxscan267_scan810:
    nqp_rxmark rx266_bstack, rxscan267_loop809, rx266_pos, 0
  rxscan267_done811:
    add $I11, rx266_pos, 1
    gt $I11, rx266_eos, rx266_fail805
    substr $S10, rx266_tgt, rx266_pos, 1
    ne $S10, ucs4:"\\", rx266_fail805
    add rx266_pos, 1
    repr_bind_attr_int rx266_cur, rx266_curclass, "$!pos", rx266_pos
    $P11 = rx266_cur."backslash"()
    repr_get_attr_int $I11, $P11, rx266_curclass, "$!pos"
    lt $I11, 0, rx266_fail805
    nqp_rxmark rx266_bstack, rxsubrule268_pass812, -1, 0
  rxsubrule268_pass812:
    rx266_cstack = rx266_cur."!cursor_capture"($P11, "backslash")
    repr_get_attr_int rx266_pos, $P11, rx266_curclass, "$!pos"
    rx266_cur."!cursor_pass"(rx266_pos, "metachar:sym<bs>", 'backtrack'=>1)
    .return (rx266_cur)
  rx266_restart804:
    repr_get_attr_obj rx266_cstack, rx266_cur, rx266_curclass, "$!cstack"
  rx266_fail805:
    unless rx266_bstack, rx266_done803
    pop $I19, rx266_bstack
    if_null rx266_cstack, rx266_cstack_done808
    unless rx266_cstack, rx266_cstack_done808
    dec $I19
    set $P11, rx266_cstack[$I19]
  rx266_cstack_done808:
    pop rx266_rep, rx266_bstack
    pop rx266_pos, rx266_bstack
    pop $I19, rx266_bstack
    lt rx266_pos, -1, rx266_done803
    lt rx266_pos, 0, rx266_fail805
    eq $I19, 0, rx266_fail805
    nqp_islist $I20, rx266_cstack
    unless $I20, rx266_jump806
    elements $I18, rx266_bstack
    le $I18, 0, rx266_cut807
    dec $I18
    set $I18, rx266_bstack[$I18]
  rx266_cut807:
    assign rx266_cstack, $I18
  rx266_jump806:
    jump $I19
  rx266_done803:
    rx266_cur."!cursor_fail"()
    .return (rx266_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<mod>" :subid("cuid_60_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 209
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx269_start
    .local string rx269_tgt
    .local int rx269_pos
    .local int rx269_off
    .local int rx269_eos
    .local int rx269_rep
    .local pmc rx269_cur
    .local pmc rx269_curclass
    .local pmc rx269_bstack
    .local pmc rx269_cstack
    rx269_start = self."!cursor_start_all"()
    set rx269_cur, rx269_start[0]
    set rx269_tgt, rx269_start[1]
    set rx269_pos, rx269_start[2]
    set rx269_curclass, rx269_start[3]
    set rx269_bstack, rx269_start[4]
    set $I19, rx269_start[5]
    store_lex unicode:"$\x{a2}", rx269_cur
    length rx269_eos, rx269_tgt
    eq $I19, 1, rx269_restart815
    gt rx269_pos, rx269_eos, rx269_fail816
    repr_get_attr_int $I11, self, rx269_curclass, "$!from"
    ne $I11, -1, rxscan270_done822
    goto rxscan270_scan821
  rxscan270_loop820:
    inc rx269_pos
    gt rx269_pos, rx269_eos, rx269_fail816
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!from", rx269_pos
  rxscan270_scan821:
    nqp_rxmark rx269_bstack, rxscan270_loop820, rx269_pos, 0
  rxscan270_done822:
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!pos", rx269_pos
    $P11 = rx269_cur."mod_internal"()
    repr_get_attr_int $I11, $P11, rx269_curclass, "$!pos"
    lt $I11, 0, rx269_fail816
    nqp_rxmark rx269_bstack, rxsubrule271_pass823, -1, 0
  rxsubrule271_pass823:
    rx269_cstack = rx269_cur."!cursor_capture"($P11, "mod_internal")
    repr_get_attr_int rx269_pos, $P11, rx269_curclass, "$!pos"
    rx269_cur."!cursor_pass"(rx269_pos, "metachar:sym<mod>", 'backtrack'=>1)
    .return (rx269_cur)
  rx269_restart815:
    repr_get_attr_obj rx269_cstack, rx269_cur, rx269_curclass, "$!cstack"
  rx269_fail816:
    unless rx269_bstack, rx269_done814
    pop $I19, rx269_bstack
    if_null rx269_cstack, rx269_cstack_done819
    unless rx269_cstack, rx269_cstack_done819
    dec $I19
    set $P11, rx269_cstack[$I19]
  rx269_cstack_done819:
    pop rx269_rep, rx269_bstack
    pop rx269_pos, rx269_bstack
    pop $I19, rx269_bstack
    lt rx269_pos, -1, rx269_done814
    lt rx269_pos, 0, rx269_fail816
    eq $I19, 0, rx269_fail816
    nqp_islist $I20, rx269_cstack
    unless $I20, rx269_jump817
    elements $I18, rx269_bstack
    le $I18, 0, rx269_cut818
    dec $I18
    set $I18, rx269_bstack[$I18]
  rx269_cut818:
    assign rx269_cstack, $I18
  rx269_jump817:
    jump $I19
  rx269_done814:
    rx269_cur."!cursor_fail"()
    .return (rx269_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<quantifier>" :subid("cuid_61_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 210
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx272_start
    .local string rx272_tgt
    .local int rx272_pos
    .local int rx272_off
    .local int rx272_eos
    .local int rx272_rep
    .local pmc rx272_cur
    .local pmc rx272_curclass
    .local pmc rx272_bstack
    .local pmc rx272_cstack
    rx272_start = self."!cursor_start_all"()
    set rx272_cur, rx272_start[0]
    set rx272_tgt, rx272_start[1]
    set rx272_pos, rx272_start[2]
    set rx272_curclass, rx272_start[3]
    set rx272_bstack, rx272_start[4]
    set $I19, rx272_start[5]
    store_lex unicode:"$\x{a2}", rx272_cur
    length rx272_eos, rx272_tgt
    eq $I19, 1, rx272_restart826
    gt rx272_pos, rx272_eos, rx272_fail827
    repr_get_attr_int $I11, self, rx272_curclass, "$!from"
    ne $I11, -1, rxscan273_done833
    goto rxscan273_scan832
  rxscan273_loop831:
    inc rx272_pos
    gt rx272_pos, rx272_eos, rx272_fail827
    repr_bind_attr_int rx272_cur, rx272_curclass, "$!from", rx272_pos
  rxscan273_scan832:
    nqp_rxmark rx272_bstack, rxscan273_loop831, rx272_pos, 0
  rxscan273_done833:
    repr_bind_attr_int rx272_cur, rx272_curclass, "$!pos", rx272_pos
    $P11 = rx272_cur."quantifier"()
    repr_get_attr_int $I11, $P11, rx272_curclass, "$!pos"
    lt $I11, 0, rx272_fail827
    nqp_rxmark rx272_bstack, rxsubrule274_pass834, -1, 0
  rxsubrule274_pass834:
    rx272_cstack = rx272_cur."!cursor_capture"($P11, "quantifier")
    repr_get_attr_int rx272_pos, $P11, rx272_curclass, "$!pos"
    repr_bind_attr_int rx272_cur, rx272_curclass, "$!pos", rx272_pos
    $P11 = rx272_cur."panic"("Quantifier quantifies nothing")
    repr_get_attr_int $I11, $P11, rx272_curclass, "$!pos"
    lt $I11, 0, rx272_fail827
    repr_get_attr_int rx272_pos, $P11, rx272_curclass, "$!pos"
    rx272_cur."!cursor_pass"(rx272_pos, "metachar:sym<quantifier>", 'backtrack'=>1)
    .return (rx272_cur)
  rx272_restart826:
    repr_get_attr_obj rx272_cstack, rx272_cur, rx272_curclass, "$!cstack"
  rx272_fail827:
    unless rx272_bstack, rx272_done825
    pop $I19, rx272_bstack
    if_null rx272_cstack, rx272_cstack_done830
    unless rx272_cstack, rx272_cstack_done830
    dec $I19
    set $P11, rx272_cstack[$I19]
  rx272_cstack_done830:
    pop rx272_rep, rx272_bstack
    pop rx272_pos, rx272_bstack
    pop $I19, rx272_bstack
    lt rx272_pos, -1, rx272_done825
    lt rx272_pos, 0, rx272_fail827
    eq $I19, 0, rx272_fail827
    nqp_islist $I20, rx272_cstack
    unless $I20, rx272_jump828
    elements $I18, rx272_bstack
    le $I18, 0, rx272_cut829
    dec $I18
    set $I18, rx272_bstack[$I18]
  rx272_cut829:
    assign rx272_cstack, $I18
  rx272_jump828:
    jump $I19
  rx272_done825:
    rx272_cur."!cursor_fail"()
    .return (rx272_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<~>" :subid("cuid_62_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 215
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx276_start
    .local string rx276_tgt
    .local int rx276_pos
    .local int rx276_off
    .local int rx276_eos
    .local int rx276_rep
    .local pmc rx276_cur
    .local pmc rx276_curclass
    .local pmc rx276_bstack
    .local pmc rx276_cstack
    rx276_start = self."!cursor_start_all"()
    set rx276_cur, rx276_start[0]
    set rx276_tgt, rx276_start[1]
    set rx276_pos, rx276_start[2]
    set rx276_curclass, rx276_start[3]
    set rx276_bstack, rx276_start[4]
    set $I19, rx276_start[5]
    store_lex unicode:"$\x{a2}", rx276_cur
    length rx276_eos, rx276_tgt
    eq $I19, 1, rx276_restart838
    gt rx276_pos, rx276_eos, rx276_fail839
    repr_get_attr_int $I11, self, rx276_curclass, "$!from"
    ne $I11, -1, rxscan277_done845
    goto rxscan277_scan844
  rxscan277_loop843:
    inc rx276_pos
    gt rx276_pos, rx276_eos, rx276_fail839
    repr_bind_attr_int rx276_cur, rx276_curclass, "$!from", rx276_pos
  rxscan277_scan844:
    nqp_rxmark rx276_bstack, rxscan277_loop843, rx276_pos, 0
  rxscan277_done845:
    nqp_rxmark rx276_bstack, rxcap278_fail847, rx276_pos, 0
    add $I11, rx276_pos, 1
    gt $I11, rx276_eos, rx276_fail839
    substr $S10, rx276_tgt, rx276_pos, 1
    ne $S10, ucs4:"~", rx276_fail839
    add rx276_pos, 1
    nqp_rxpeek $I19, rx276_bstack, rxcap278_fail847
    inc $I19
    set $I11, rx276_bstack[$I19]
    repr_bind_attr_int rx276_cur, rx276_curclass, "$!pos", rx276_pos
    $P11 = rx276_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx276_pos)
    rx276_cstack = rx276_cur."!cursor_capture"($P11, "sym")
    goto rxcap278_done846
  rxcap278_fail847:
    goto rx276_fail839
  rxcap278_done846:
    repr_bind_attr_int rx276_cur, rx276_curclass, "$!pos", rx276_pos
    $P11 = rx276_cur."ws"()
    repr_get_attr_int $I11, $P11, rx276_curclass, "$!pos"
    lt $I11, 0, rx276_fail839
    repr_get_attr_int rx276_pos, $P11, rx276_curclass, "$!pos"
    repr_bind_attr_int rx276_cur, rx276_curclass, "$!pos", rx276_pos
    $P11 = rx276_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx276_curclass, "$!pos"
    lt $I11, 0, rx276_fail839
    nqp_rxmark rx276_bstack, rxsubrule280_pass849, -1, 0
  rxsubrule280_pass849:
    rx276_cstack = rx276_cur."!cursor_capture"($P11, "GOAL")
    repr_get_attr_int rx276_pos, $P11, rx276_curclass, "$!pos"
    repr_bind_attr_int rx276_cur, rx276_curclass, "$!pos", rx276_pos
    $P11 = rx276_cur."ws"()
    repr_get_attr_int $I11, $P11, rx276_curclass, "$!pos"
    lt $I11, 0, rx276_fail839
    repr_get_attr_int rx276_pos, $P11, rx276_curclass, "$!pos"
    repr_bind_attr_int rx276_cur, rx276_curclass, "$!pos", rx276_pos
    $P11 = rx276_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx276_curclass, "$!pos"
    lt $I11, 0, rx276_fail839
    nqp_rxmark rx276_bstack, rxsubrule282_pass851, -1, 0
  rxsubrule282_pass851:
    rx276_cstack = rx276_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx276_pos, $P11, rx276_curclass, "$!pos"
    rx276_cur."!cursor_pass"(rx276_pos, "metachar:sym<~>", 'backtrack'=>1)
    .return (rx276_cur)
  rx276_restart838:
    repr_get_attr_obj rx276_cstack, rx276_cur, rx276_curclass, "$!cstack"
  rx276_fail839:
    unless rx276_bstack, rx276_done837
    pop $I19, rx276_bstack
    if_null rx276_cstack, rx276_cstack_done842
    unless rx276_cstack, rx276_cstack_done842
    dec $I19
    set $P11, rx276_cstack[$I19]
  rx276_cstack_done842:
    pop rx276_rep, rx276_bstack
    pop rx276_pos, rx276_bstack
    pop $I19, rx276_bstack
    lt rx276_pos, -1, rx276_done837
    lt rx276_pos, 0, rx276_fail839
    eq $I19, 0, rx276_fail839
    nqp_islist $I20, rx276_cstack
    unless $I20, rx276_jump840
    elements $I18, rx276_bstack
    le $I18, 0, rx276_cut841
    dec $I18
    set $I18, rx276_bstack[$I18]
  rx276_cut841:
    assign rx276_cstack, $I18
  rx276_jump840:
    jump $I19
  rx276_done837:
    rx276_cur."!cursor_fail"()
    .return (rx276_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{*}>" :subid("cuid_63_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 221
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx283_start
    .local string rx283_tgt
    .local int rx283_pos
    .local int rx283_off
    .local int rx283_eos
    .local int rx283_rep
    .local pmc rx283_cur
    .local pmc rx283_curclass
    .local pmc rx283_bstack
    .local pmc rx283_cstack
    rx283_start = self."!cursor_start_all"()
    set rx283_cur, rx283_start[0]
    set rx283_tgt, rx283_start[1]
    set rx283_pos, rx283_start[2]
    set rx283_curclass, rx283_start[3]
    set rx283_bstack, rx283_start[4]
    set $I19, rx283_start[5]
    store_lex unicode:"$\x{a2}", rx283_cur
    length rx283_eos, rx283_tgt
    eq $I19, 1, rx283_restart854
    gt rx283_pos, rx283_eos, rx283_fail855
    repr_get_attr_int $I11, self, rx283_curclass, "$!from"
    ne $I11, -1, rxscan284_done861
    goto rxscan284_scan860
  rxscan284_loop859:
    inc rx283_pos
    gt rx283_pos, rx283_eos, rx283_fail855
    repr_bind_attr_int rx283_cur, rx283_curclass, "$!from", rx283_pos
  rxscan284_scan860:
    nqp_rxmark rx283_bstack, rxscan284_loop859, rx283_pos, 0
  rxscan284_done861:
    nqp_rxmark rx283_bstack, rxcap285_fail863, rx283_pos, 0
    add $I11, rx283_pos, 3
    gt $I11, rx283_eos, rx283_fail855
    substr $S10, rx283_tgt, rx283_pos, 3
    ne $S10, ucs4:"{*}", rx283_fail855
    add rx283_pos, 3
    nqp_rxpeek $I19, rx283_bstack, rxcap285_fail863
    inc $I19
    set $I11, rx283_bstack[$I19]
    repr_bind_attr_int rx283_cur, rx283_curclass, "$!pos", rx283_pos
    $P11 = rx283_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx283_pos)
    rx283_cstack = rx283_cur."!cursor_capture"($P11, "sym")
    goto rxcap285_done862
  rxcap285_fail863:
    goto rx283_fail855
  rxcap285_done862:
    nqp_rxmark rx283_bstack, rxquantr286_done865, rx283_pos, 0
  rxquantr286_loop864:
    nqp_rxmark rx283_bstack, rxquantr287_done867, rx283_pos, 0
  rxquantr287_loop866:
    ge rx283_pos, rx283_eos, rx283_fail855
    substr $S11, rx283_tgt, rx283_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx283_fail855
    inc rx283_pos
    nqp_rxpeek $I19, rx283_bstack, rxquantr287_done867
    inc $I19
    inc $I19
    set rx283_rep, rx283_bstack[$I19]
    nqp_rxcommit rx283_bstack, rxquantr287_done867
    inc rx283_rep
    nqp_rxmark rx283_bstack, rxquantr287_done867, rx283_pos, rx283_rep
    goto rxquantr287_loop866
  rxquantr287_done867:
    add $I11, rx283_pos, 3
    gt $I11, rx283_eos, rx283_fail855
    substr $S10, rx283_tgt, rx283_pos, 3
    ne $S10, ucs4:"#= ", rx283_fail855
    add rx283_pos, 3
    nqp_rxmark rx283_bstack, rxquantr288_done869, rx283_pos, 0
  rxquantr288_loop868:
    ge rx283_pos, rx283_eos, rx283_fail855
    substr $S11, rx283_tgt, rx283_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx283_fail855
    inc rx283_pos
    nqp_rxpeek $I19, rx283_bstack, rxquantr288_done869
    inc $I19
    inc $I19
    set rx283_rep, rx283_bstack[$I19]
    nqp_rxcommit rx283_bstack, rxquantr288_done869
    inc rx283_rep
    nqp_rxmark rx283_bstack, rxquantr288_done869, rx283_pos, rx283_rep
    goto rxquantr288_loop868
  rxquantr288_done869:
    nqp_rxmark rx283_bstack, rxcap289_fail871, rx283_pos, 0
    nqp_rxmark rx283_bstack, rxquantr290_done873, -1, 0
  rxquantr290_loop872:
    ge rx283_pos, rx283_eos, rx283_fail855
    is_cclass $I11, .CCLASS_WHITESPACE, rx283_tgt, rx283_pos
    if $I11, rx283_fail855
    add rx283_pos, 1
    nqp_rxpeek $I19, rx283_bstack, rxquantr290_done873
    inc $I19
    inc $I19
    set rx283_rep, rx283_bstack[$I19]
    nqp_rxcommit rx283_bstack, rxquantr290_done873
    inc rx283_rep
    nqp_rxmark rx283_bstack, rxquantr290_done873, rx283_pos, rx283_rep
    goto rxquantr290_loop872
  rxquantr290_done873:
    nqp_rxmark rx283_bstack, rxquantr291_done875, rx283_pos, 0
  rxquantr291_loop874:
    nqp_rxmark rx283_bstack, rxquantr292_done877, -1, 0
  rxquantr292_loop876:
    ge rx283_pos, rx283_eos, rx283_fail855
    substr $S11, rx283_tgt, rx283_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx283_fail855
    inc rx283_pos
    nqp_rxpeek $I19, rx283_bstack, rxquantr292_done877
    inc $I19
    inc $I19
    set rx283_rep, rx283_bstack[$I19]
    nqp_rxcommit rx283_bstack, rxquantr292_done877
    inc rx283_rep
    nqp_rxmark rx283_bstack, rxquantr292_done877, rx283_pos, rx283_rep
    goto rxquantr292_loop876
  rxquantr292_done877:
    nqp_rxmark rx283_bstack, rxquantr293_done879, -1, 0
  rxquantr293_loop878:
    ge rx283_pos, rx283_eos, rx283_fail855
    is_cclass $I11, .CCLASS_WHITESPACE, rx283_tgt, rx283_pos
    if $I11, rx283_fail855
    add rx283_pos, 1
    nqp_rxpeek $I19, rx283_bstack, rxquantr293_done879
    inc $I19
    inc $I19
    set rx283_rep, rx283_bstack[$I19]
    nqp_rxcommit rx283_bstack, rxquantr293_done879
    inc rx283_rep
    nqp_rxmark rx283_bstack, rxquantr293_done879, rx283_pos, rx283_rep
    goto rxquantr293_loop878
  rxquantr293_done879:
    nqp_rxpeek $I19, rx283_bstack, rxquantr291_done875
    inc $I19
    inc $I19
    set rx283_rep, rx283_bstack[$I19]
    nqp_rxcommit rx283_bstack, rxquantr291_done875
    inc rx283_rep
    nqp_rxmark rx283_bstack, rxquantr291_done875, rx283_pos, rx283_rep
    goto rxquantr291_loop874
  rxquantr291_done875:
    nqp_rxpeek $I19, rx283_bstack, rxcap289_fail871
    inc $I19
    set $I11, rx283_bstack[$I19]
    repr_bind_attr_int rx283_cur, rx283_curclass, "$!pos", rx283_pos
    $P11 = rx283_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx283_pos)
    rx283_cstack = rx283_cur."!cursor_capture"($P11, "key")
    goto rxcap289_done870
  rxcap289_fail871:
    goto rx283_fail855
  rxcap289_done870:
    nqp_rxpeek $I19, rx283_bstack, rxquantr286_done865
    inc $I19
    inc $I19
    set rx283_rep, rx283_bstack[$I19]
    nqp_rxcommit rx283_bstack, rxquantr286_done865
    inc rx283_rep
  rxquantr286_done865:
    rx283_cur."!cursor_pass"(rx283_pos, "metachar:sym<{*}>", 'backtrack'=>1)
    .return (rx283_cur)
  rx283_restart854:
    repr_get_attr_obj rx283_cstack, rx283_cur, rx283_curclass, "$!cstack"
  rx283_fail855:
    unless rx283_bstack, rx283_done853
    pop $I19, rx283_bstack
    if_null rx283_cstack, rx283_cstack_done858
    unless rx283_cstack, rx283_cstack_done858
    dec $I19
    set $P11, rx283_cstack[$I19]
  rx283_cstack_done858:
    pop rx283_rep, rx283_bstack
    pop rx283_pos, rx283_bstack
    pop $I19, rx283_bstack
    lt rx283_pos, -1, rx283_done853
    lt rx283_pos, 0, rx283_fail855
    eq $I19, 0, rx283_fail855
    nqp_islist $I20, rx283_cstack
    unless $I20, rx283_jump856
    elements $I18, rx283_bstack
    le $I18, 0, rx283_cut857
    dec $I18
    set $I18, rx283_bstack[$I18]
  rx283_cut857:
    assign rx283_cstack, $I18
  rx283_jump856:
    jump $I19
  rx283_done853:
    rx283_cur."!cursor_fail"()
    .return (rx283_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<assert>" :subid("cuid_64_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 225
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx294_start
    .local string rx294_tgt
    .local int rx294_pos
    .local int rx294_off
    .local int rx294_eos
    .local int rx294_rep
    .local pmc rx294_cur
    .local pmc rx294_curclass
    .local pmc rx294_bstack
    .local pmc rx294_cstack
    rx294_start = self."!cursor_start_all"()
    set rx294_cur, rx294_start[0]
    set rx294_tgt, rx294_start[1]
    set rx294_pos, rx294_start[2]
    set rx294_curclass, rx294_start[3]
    set rx294_bstack, rx294_start[4]
    set $I19, rx294_start[5]
    store_lex unicode:"$\x{a2}", rx294_cur
    length rx294_eos, rx294_tgt
    eq $I19, 1, rx294_restart882
    gt rx294_pos, rx294_eos, rx294_fail883
    repr_get_attr_int $I11, self, rx294_curclass, "$!from"
    ne $I11, -1, rxscan295_done889
    goto rxscan295_scan888
  rxscan295_loop887:
    inc rx294_pos
    gt rx294_pos, rx294_eos, rx294_fail883
    repr_bind_attr_int rx294_cur, rx294_curclass, "$!from", rx294_pos
  rxscan295_scan888:
    nqp_rxmark rx294_bstack, rxscan295_loop887, rx294_pos, 0
  rxscan295_done889:
    add $I11, rx294_pos, 1
    gt $I11, rx294_eos, rx294_fail883
    substr $S10, rx294_tgt, rx294_pos, 1
    ne $S10, ucs4:"<", rx294_fail883
    add rx294_pos, 1
    repr_bind_attr_int rx294_cur, rx294_curclass, "$!pos", rx294_pos
    $P11 = rx294_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx294_curclass, "$!pos"
    lt $I11, 0, rx294_fail883
    nqp_rxmark rx294_bstack, rxsubrule296_pass890, -1, 0
  rxsubrule296_pass890:
    rx294_cstack = rx294_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx294_pos, $P11, rx294_curclass, "$!pos"
  alt297_0892:
    nqp_rxmark rx294_bstack, alt297_1893, rx294_pos, 0
    add $I11, rx294_pos, 1
    gt $I11, rx294_eos, rx294_fail883
    substr $S10, rx294_tgt, rx294_pos, 1
    ne $S10, ucs4:">", rx294_fail883
    add rx294_pos, 1
    goto alt297_end891
  alt297_1893:
    repr_bind_attr_int rx294_cur, rx294_curclass, "$!pos", rx294_pos
    $P11 = rx294_cur."panic"("regex assertion not terminated by angle bracket")
    repr_get_attr_int $I11, $P11, rx294_curclass, "$!pos"
    lt $I11, 0, rx294_fail883
    repr_get_attr_int rx294_pos, $P11, rx294_curclass, "$!pos"
  alt297_end891:
    rx294_cur."!cursor_pass"(rx294_pos, "metachar:sym<assert>", 'backtrack'=>1)
    .return (rx294_cur)
  rx294_restart882:
    repr_get_attr_obj rx294_cstack, rx294_cur, rx294_curclass, "$!cstack"
  rx294_fail883:
    unless rx294_bstack, rx294_done881
    pop $I19, rx294_bstack
    if_null rx294_cstack, rx294_cstack_done886
    unless rx294_cstack, rx294_cstack_done886
    dec $I19
    set $P11, rx294_cstack[$I19]
  rx294_cstack_done886:
    pop rx294_rep, rx294_bstack
    pop rx294_pos, rx294_bstack
    pop $I19, rx294_bstack
    lt rx294_pos, -1, rx294_done881
    lt rx294_pos, 0, rx294_fail883
    eq $I19, 0, rx294_fail883
    nqp_islist $I20, rx294_cstack
    unless $I20, rx294_jump884
    elements $I18, rx294_bstack
    le $I18, 0, rx294_cut885
    dec $I18
    set $I18, rx294_bstack[$I18]
  rx294_cut885:
    assign rx294_cstack, $I18
  rx294_jump884:
    jump $I19
  rx294_done881:
    rx294_cur."!cursor_fail"()
    .return (rx294_cur) 
.end
.HLL "nqp"
.namespace []
.sub "sigil" :subid("cuid_65_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 230
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx299_start
    .local string rx299_tgt
    .local int rx299_pos
    .local int rx299_off
    .local int rx299_eos
    .local int rx299_rep
    .local pmc rx299_cur
    .local pmc rx299_curclass
    .local pmc rx299_bstack
    .local pmc rx299_cstack
    rx299_start = self."!cursor_start_all"()
    set rx299_cur, rx299_start[0]
    set rx299_tgt, rx299_start[1]
    set rx299_pos, rx299_start[2]
    set rx299_curclass, rx299_start[3]
    set rx299_bstack, rx299_start[4]
    set $I19, rx299_start[5]
    store_lex unicode:"$\x{a2}", rx299_cur
    length rx299_eos, rx299_tgt
    eq $I19, 1, rx299_restart897
    gt rx299_pos, rx299_eos, rx299_fail898
    repr_get_attr_int $I11, self, rx299_curclass, "$!from"
    ne $I11, -1, rxscan300_done904
    goto rxscan300_scan903
  rxscan300_loop902:
    inc rx299_pos
    gt rx299_pos, rx299_eos, rx299_fail898
    repr_bind_attr_int rx299_cur, rx299_curclass, "$!from", rx299_pos
  rxscan300_scan903:
    nqp_rxmark rx299_bstack, rxscan300_loop902, rx299_pos, 0
  rxscan300_done904:
    ge rx299_pos, rx299_eos, rx299_fail898
    substr $S11, rx299_tgt, rx299_pos, 1
    index $I11, ucs4:"$@%&", $S11
    lt $I11, 0, rx299_fail898
    inc rx299_pos
    rx299_cur."!cursor_pass"(rx299_pos, "sigil", 'backtrack'=>1)
    .return (rx299_cur)
  rx299_restart897:
    repr_get_attr_obj rx299_cstack, rx299_cur, rx299_curclass, "$!cstack"
  rx299_fail898:
    unless rx299_bstack, rx299_done896
    pop $I19, rx299_bstack
    if_null rx299_cstack, rx299_cstack_done901
    unless rx299_cstack, rx299_cstack_done901
    dec $I19
    set $P11, rx299_cstack[$I19]
  rx299_cstack_done901:
    pop rx299_rep, rx299_bstack
    pop rx299_pos, rx299_bstack
    pop $I19, rx299_bstack
    lt rx299_pos, -1, rx299_done896
    lt rx299_pos, 0, rx299_fail898
    eq $I19, 0, rx299_fail898
    nqp_islist $I20, rx299_cstack
    unless $I20, rx299_jump899
    elements $I18, rx299_bstack
    le $I18, 0, rx299_cut900
    dec $I18
    set $I18, rx299_bstack[$I18]
  rx299_cut900:
    assign rx299_cstack, $I18
  rx299_jump899:
    jump $I19
  rx299_done896:
    rx299_cur."!cursor_fail"()
    .return (rx299_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<var>" :subid("cuid_66_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 232
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx301_start
    .local string rx301_tgt
    .local int rx301_pos
    .local int rx301_off
    .local int rx301_eos
    .local int rx301_rep
    .local pmc rx301_cur
    .local pmc rx301_curclass
    .local pmc rx301_bstack
    .local pmc rx301_cstack
    rx301_start = self."!cursor_start_all"()
    set rx301_cur, rx301_start[0]
    set rx301_tgt, rx301_start[1]
    set rx301_pos, rx301_start[2]
    set rx301_curclass, rx301_start[3]
    set rx301_bstack, rx301_start[4]
    set $I19, rx301_start[5]
    store_lex unicode:"$\x{a2}", rx301_cur
    length rx301_eos, rx301_tgt
    eq $I19, 1, rx301_restart907
    gt rx301_pos, rx301_eos, rx301_fail908
    repr_get_attr_int $I11, self, rx301_curclass, "$!from"
    ne $I11, -1, rxscan302_done914
    goto rxscan302_scan913
  rxscan302_loop912:
    inc rx301_pos
    gt rx301_pos, rx301_eos, rx301_fail908
    repr_bind_attr_int rx301_cur, rx301_curclass, "$!from", rx301_pos
  rxscan302_scan913:
    nqp_rxmark rx301_bstack, rxscan302_loop912, rx301_pos, 0
  rxscan302_done914:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt303_0916
    nqp_push_label $P11, alt303_1921
    nqp_rxmark rx301_bstack, alt303_end915, -1, 0
    rx301_cur."!alt"(rx301_pos, "alt_nfa__12_1367388595.41314", $P11)
    goto rx301_fail908
  alt303_0916:
    add $I11, rx301_pos, 2
    gt $I11, rx301_eos, rx301_fail908
    substr $S10, rx301_tgt, rx301_pos, 2
    ne $S10, ucs4:"$<", rx301_fail908
    add rx301_pos, 2
    nqp_rxmark rx301_bstack, rxcap304_fail918, rx301_pos, 0
    nqp_rxmark rx301_bstack, rxquantr305_done920, -1, 0
  rxquantr305_loop919:
    ge rx301_pos, rx301_eos, rx301_fail908
    substr $S11, rx301_tgt, rx301_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx301_fail908
    inc rx301_pos
    nqp_rxpeek $I19, rx301_bstack, rxquantr305_done920
    inc $I19
    inc $I19
    set rx301_rep, rx301_bstack[$I19]
    nqp_rxcommit rx301_bstack, rxquantr305_done920
    inc rx301_rep
    nqp_rxmark rx301_bstack, rxquantr305_done920, rx301_pos, rx301_rep
    goto rxquantr305_loop919
  rxquantr305_done920:
    nqp_rxpeek $I19, rx301_bstack, rxcap304_fail918
    inc $I19
    set $I11, rx301_bstack[$I19]
    repr_bind_attr_int rx301_cur, rx301_curclass, "$!pos", rx301_pos
    $P11 = rx301_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx301_pos)
    rx301_cstack = rx301_cur."!cursor_capture"($P11, "name")
    goto rxcap304_done917
  rxcap304_fail918:
    goto rx301_fail908
  rxcap304_done917:
    add $I11, rx301_pos, 1
    gt $I11, rx301_eos, rx301_fail908
    substr $S10, rx301_tgt, rx301_pos, 1
    ne $S10, ucs4:">", rx301_fail908
    add rx301_pos, 1
    goto alt303_end915
  alt303_1921:
    add $I11, rx301_pos, 1
    gt $I11, rx301_eos, rx301_fail908
    substr $S10, rx301_tgt, rx301_pos, 1
    ne $S10, ucs4:"$", rx301_fail908
    add rx301_pos, 1
    nqp_rxmark rx301_bstack, rxcap306_fail923, rx301_pos, 0
    nqp_rxmark rx301_bstack, rxquantr307_done925, -1, 0
  rxquantr307_loop924:
    ge rx301_pos, rx301_eos, rx301_fail908
    is_cclass $I11, .CCLASS_NUMERIC, rx301_tgt, rx301_pos
    unless $I11, rx301_fail908
    add rx301_pos, 1
    nqp_rxpeek $I19, rx301_bstack, rxquantr307_done925
    inc $I19
    inc $I19
    set rx301_rep, rx301_bstack[$I19]
    nqp_rxcommit rx301_bstack, rxquantr307_done925
    inc rx301_rep
    nqp_rxmark rx301_bstack, rxquantr307_done925, rx301_pos, rx301_rep
    goto rxquantr307_loop924
  rxquantr307_done925:
    nqp_rxpeek $I19, rx301_bstack, rxcap306_fail923
    inc $I19
    set $I11, rx301_bstack[$I19]
    repr_bind_attr_int rx301_cur, rx301_curclass, "$!pos", rx301_pos
    $P11 = rx301_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx301_pos)
    rx301_cstack = rx301_cur."!cursor_capture"($P11, "pos")
    goto rxcap306_done922
  rxcap306_fail923:
    goto rx301_fail908
  rxcap306_done922:
    goto alt303_end915
  alt303_end915:
    nqp_rxcommit rx301_bstack, alt303_end915
    nqp_rxmark rx301_bstack, rxquantr308_done927, rx301_pos, 0
  rxquantr308_loop926:
    repr_bind_attr_int rx301_cur, rx301_curclass, "$!pos", rx301_pos
    $P11 = rx301_cur."ws"()
    repr_get_attr_int $I11, $P11, rx301_curclass, "$!pos"
    lt $I11, 0, rx301_fail908
    repr_get_attr_int rx301_pos, $P11, rx301_curclass, "$!pos"
    add $I11, rx301_pos, 1
    gt $I11, rx301_eos, rx301_fail908
    substr $S10, rx301_tgt, rx301_pos, 1
    ne $S10, ucs4:"=", rx301_fail908
    add rx301_pos, 1
    repr_bind_attr_int rx301_cur, rx301_curclass, "$!pos", rx301_pos
    $P11 = rx301_cur."ws"()
    repr_get_attr_int $I11, $P11, rx301_curclass, "$!pos"
    lt $I11, 0, rx301_fail908
    repr_get_attr_int rx301_pos, $P11, rx301_curclass, "$!pos"
    repr_bind_attr_int rx301_cur, rx301_curclass, "$!pos", rx301_pos
    $P11 = rx301_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx301_curclass, "$!pos"
    lt $I11, 0, rx301_fail908
    nqp_rxmark rx301_bstack, rxsubrule311_pass930, -1, 0
  rxsubrule311_pass930:
    rx301_cstack = rx301_cur."!cursor_capture"($P11, "quantified_atom")
    repr_get_attr_int rx301_pos, $P11, rx301_curclass, "$!pos"
    nqp_rxpeek $I19, rx301_bstack, rxquantr308_done927
    inc $I19
    inc $I19
    set rx301_rep, rx301_bstack[$I19]
    nqp_rxcommit rx301_bstack, rxquantr308_done927
    inc rx301_rep
  rxquantr308_done927:
    rx301_cur."!cursor_pass"(rx301_pos, "metachar:sym<var>", 'backtrack'=>1)
    .return (rx301_cur)
  rx301_restart907:
    repr_get_attr_obj rx301_cstack, rx301_cur, rx301_curclass, "$!cstack"
  rx301_fail908:
    unless rx301_bstack, rx301_done906
    pop $I19, rx301_bstack
    if_null rx301_cstack, rx301_cstack_done911
    unless rx301_cstack, rx301_cstack_done911
    dec $I19
    set $P11, rx301_cstack[$I19]
  rx301_cstack_done911:
    pop rx301_rep, rx301_bstack
    pop rx301_pos, rx301_bstack
    pop $I19, rx301_bstack
    lt rx301_pos, -1, rx301_done906
    lt rx301_pos, 0, rx301_fail908
    eq $I19, 0, rx301_fail908
    nqp_islist $I20, rx301_cstack
    unless $I20, rx301_jump909
    elements $I18, rx301_bstack
    le $I18, 0, rx301_cut910
    dec $I18
    set $I18, rx301_bstack[$I18]
  rx301_cut910:
    assign rx301_cstack, $I18
  rx301_jump909:
    jump $I19
  rx301_done906:
    rx301_cur."!cursor_fail"()
    .return (rx301_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash" :subid("cuid_67_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 241
    .param pmc self 
    $P5001 = self."!protoregex"("backslash")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<s>" :subid("cuid_68_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 242
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx312_start
    .local string rx312_tgt
    .local int rx312_pos
    .local int rx312_off
    .local int rx312_eos
    .local int rx312_rep
    .local pmc rx312_cur
    .local pmc rx312_curclass
    .local pmc rx312_bstack
    .local pmc rx312_cstack
    rx312_start = self."!cursor_start_all"()
    set rx312_cur, rx312_start[0]
    set rx312_tgt, rx312_start[1]
    set rx312_pos, rx312_start[2]
    set rx312_curclass, rx312_start[3]
    set rx312_bstack, rx312_start[4]
    set $I19, rx312_start[5]
    store_lex unicode:"$\x{a2}", rx312_cur
    length rx312_eos, rx312_tgt
    eq $I19, 1, rx312_restart933
    gt rx312_pos, rx312_eos, rx312_fail934
    repr_get_attr_int $I11, self, rx312_curclass, "$!from"
    ne $I11, -1, rxscan313_done940
    goto rxscan313_scan939
  rxscan313_loop938:
    inc rx312_pos
    gt rx312_pos, rx312_eos, rx312_fail934
    repr_bind_attr_int rx312_cur, rx312_curclass, "$!from", rx312_pos
  rxscan313_scan939:
    nqp_rxmark rx312_bstack, rxscan313_loop938, rx312_pos, 0
  rxscan313_done940:
    nqp_rxmark rx312_bstack, rxcap314_fail942, rx312_pos, 0
    ge rx312_pos, rx312_eos, rx312_fail934
    substr $S11, rx312_tgt, rx312_pos, 1
    index $I11, ucs4:"dDnNsSwW", $S11
    lt $I11, 0, rx312_fail934
    inc rx312_pos
    nqp_rxpeek $I19, rx312_bstack, rxcap314_fail942
    inc $I19
    set $I11, rx312_bstack[$I19]
    repr_bind_attr_int rx312_cur, rx312_curclass, "$!pos", rx312_pos
    $P11 = rx312_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx312_pos)
    rx312_cstack = rx312_cur."!cursor_capture"($P11, "sym")
    goto rxcap314_done941
  rxcap314_fail942:
    goto rx312_fail934
  rxcap314_done941:
    rx312_cur."!cursor_pass"(rx312_pos, "backslash:sym<s>", 'backtrack'=>1)
    .return (rx312_cur)
  rx312_restart933:
    repr_get_attr_obj rx312_cstack, rx312_cur, rx312_curclass, "$!cstack"
  rx312_fail934:
    unless rx312_bstack, rx312_done932
    pop $I19, rx312_bstack
    if_null rx312_cstack, rx312_cstack_done937
    unless rx312_cstack, rx312_cstack_done937
    dec $I19
    set $P11, rx312_cstack[$I19]
  rx312_cstack_done937:
    pop rx312_rep, rx312_bstack
    pop rx312_pos, rx312_bstack
    pop $I19, rx312_bstack
    lt rx312_pos, -1, rx312_done932
    lt rx312_pos, 0, rx312_fail934
    eq $I19, 0, rx312_fail934
    nqp_islist $I20, rx312_cstack
    unless $I20, rx312_jump935
    elements $I18, rx312_bstack
    le $I18, 0, rx312_cut936
    dec $I18
    set $I18, rx312_bstack[$I18]
  rx312_cut936:
    assign rx312_cstack, $I18
  rx312_jump935:
    jump $I19
  rx312_done932:
    rx312_cur."!cursor_fail"()
    .return (rx312_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<b>" :subid("cuid_69_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 243
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx315_start
    .local string rx315_tgt
    .local int rx315_pos
    .local int rx315_off
    .local int rx315_eos
    .local int rx315_rep
    .local pmc rx315_cur
    .local pmc rx315_curclass
    .local pmc rx315_bstack
    .local pmc rx315_cstack
    rx315_start = self."!cursor_start_all"()
    set rx315_cur, rx315_start[0]
    set rx315_tgt, rx315_start[1]
    set rx315_pos, rx315_start[2]
    set rx315_curclass, rx315_start[3]
    set rx315_bstack, rx315_start[4]
    set $I19, rx315_start[5]
    store_lex unicode:"$\x{a2}", rx315_cur
    length rx315_eos, rx315_tgt
    eq $I19, 1, rx315_restart945
    gt rx315_pos, rx315_eos, rx315_fail946
    repr_get_attr_int $I11, self, rx315_curclass, "$!from"
    ne $I11, -1, rxscan316_done952
    goto rxscan316_scan951
  rxscan316_loop950:
    inc rx315_pos
    gt rx315_pos, rx315_eos, rx315_fail946
    repr_bind_attr_int rx315_cur, rx315_curclass, "$!from", rx315_pos
  rxscan316_scan951:
    nqp_rxmark rx315_bstack, rxscan316_loop950, rx315_pos, 0
  rxscan316_done952:
    nqp_rxmark rx315_bstack, rxcap317_fail954, rx315_pos, 0
    ge rx315_pos, rx315_eos, rx315_fail946
    substr $S11, rx315_tgt, rx315_pos, 1
    index $I11, ucs4:"bB", $S11
    lt $I11, 0, rx315_fail946
    inc rx315_pos
    nqp_rxpeek $I19, rx315_bstack, rxcap317_fail954
    inc $I19
    set $I11, rx315_bstack[$I19]
    repr_bind_attr_int rx315_cur, rx315_curclass, "$!pos", rx315_pos
    $P11 = rx315_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx315_pos)
    rx315_cstack = rx315_cur."!cursor_capture"($P11, "sym")
    goto rxcap317_done953
  rxcap317_fail954:
    goto rx315_fail946
  rxcap317_done953:
    rx315_cur."!cursor_pass"(rx315_pos, "backslash:sym<b>", 'backtrack'=>1)
    .return (rx315_cur)
  rx315_restart945:
    repr_get_attr_obj rx315_cstack, rx315_cur, rx315_curclass, "$!cstack"
  rx315_fail946:
    unless rx315_bstack, rx315_done944
    pop $I19, rx315_bstack
    if_null rx315_cstack, rx315_cstack_done949
    unless rx315_cstack, rx315_cstack_done949
    dec $I19
    set $P11, rx315_cstack[$I19]
  rx315_cstack_done949:
    pop rx315_rep, rx315_bstack
    pop rx315_pos, rx315_bstack
    pop $I19, rx315_bstack
    lt rx315_pos, -1, rx315_done944
    lt rx315_pos, 0, rx315_fail946
    eq $I19, 0, rx315_fail946
    nqp_islist $I20, rx315_cstack
    unless $I20, rx315_jump947
    elements $I18, rx315_bstack
    le $I18, 0, rx315_cut948
    dec $I18
    set $I18, rx315_bstack[$I18]
  rx315_cut948:
    assign rx315_cstack, $I18
  rx315_jump947:
    jump $I19
  rx315_done944:
    rx315_cur."!cursor_fail"()
    .return (rx315_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<e>" :subid("cuid_70_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 244
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx318_start
    .local string rx318_tgt
    .local int rx318_pos
    .local int rx318_off
    .local int rx318_eos
    .local int rx318_rep
    .local pmc rx318_cur
    .local pmc rx318_curclass
    .local pmc rx318_bstack
    .local pmc rx318_cstack
    rx318_start = self."!cursor_start_all"()
    set rx318_cur, rx318_start[0]
    set rx318_tgt, rx318_start[1]
    set rx318_pos, rx318_start[2]
    set rx318_curclass, rx318_start[3]
    set rx318_bstack, rx318_start[4]
    set $I19, rx318_start[5]
    store_lex unicode:"$\x{a2}", rx318_cur
    length rx318_eos, rx318_tgt
    eq $I19, 1, rx318_restart957
    gt rx318_pos, rx318_eos, rx318_fail958
    repr_get_attr_int $I11, self, rx318_curclass, "$!from"
    ne $I11, -1, rxscan319_done964
    goto rxscan319_scan963
  rxscan319_loop962:
    inc rx318_pos
    gt rx318_pos, rx318_eos, rx318_fail958
    repr_bind_attr_int rx318_cur, rx318_curclass, "$!from", rx318_pos
  rxscan319_scan963:
    nqp_rxmark rx318_bstack, rxscan319_loop962, rx318_pos, 0
  rxscan319_done964:
    nqp_rxmark rx318_bstack, rxcap320_fail966, rx318_pos, 0
    ge rx318_pos, rx318_eos, rx318_fail958
    substr $S11, rx318_tgt, rx318_pos, 1
    index $I11, ucs4:"eE", $S11
    lt $I11, 0, rx318_fail958
    inc rx318_pos
    nqp_rxpeek $I19, rx318_bstack, rxcap320_fail966
    inc $I19
    set $I11, rx318_bstack[$I19]
    repr_bind_attr_int rx318_cur, rx318_curclass, "$!pos", rx318_pos
    $P11 = rx318_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx318_pos)
    rx318_cstack = rx318_cur."!cursor_capture"($P11, "sym")
    goto rxcap320_done965
  rxcap320_fail966:
    goto rx318_fail958
  rxcap320_done965:
    rx318_cur."!cursor_pass"(rx318_pos, "backslash:sym<e>", 'backtrack'=>1)
    .return (rx318_cur)
  rx318_restart957:
    repr_get_attr_obj rx318_cstack, rx318_cur, rx318_curclass, "$!cstack"
  rx318_fail958:
    unless rx318_bstack, rx318_done956
    pop $I19, rx318_bstack
    if_null rx318_cstack, rx318_cstack_done961
    unless rx318_cstack, rx318_cstack_done961
    dec $I19
    set $P11, rx318_cstack[$I19]
  rx318_cstack_done961:
    pop rx318_rep, rx318_bstack
    pop rx318_pos, rx318_bstack
    pop $I19, rx318_bstack
    lt rx318_pos, -1, rx318_done956
    lt rx318_pos, 0, rx318_fail958
    eq $I19, 0, rx318_fail958
    nqp_islist $I20, rx318_cstack
    unless $I20, rx318_jump959
    elements $I18, rx318_bstack
    le $I18, 0, rx318_cut960
    dec $I18
    set $I18, rx318_bstack[$I18]
  rx318_cut960:
    assign rx318_cstack, $I18
  rx318_jump959:
    jump $I19
  rx318_done956:
    rx318_cur."!cursor_fail"()
    .return (rx318_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<f>" :subid("cuid_71_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 245
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx321_start
    .local string rx321_tgt
    .local int rx321_pos
    .local int rx321_off
    .local int rx321_eos
    .local int rx321_rep
    .local pmc rx321_cur
    .local pmc rx321_curclass
    .local pmc rx321_bstack
    .local pmc rx321_cstack
    rx321_start = self."!cursor_start_all"()
    set rx321_cur, rx321_start[0]
    set rx321_tgt, rx321_start[1]
    set rx321_pos, rx321_start[2]
    set rx321_curclass, rx321_start[3]
    set rx321_bstack, rx321_start[4]
    set $I19, rx321_start[5]
    store_lex unicode:"$\x{a2}", rx321_cur
    length rx321_eos, rx321_tgt
    eq $I19, 1, rx321_restart969
    gt rx321_pos, rx321_eos, rx321_fail970
    repr_get_attr_int $I11, self, rx321_curclass, "$!from"
    ne $I11, -1, rxscan322_done976
    goto rxscan322_scan975
  rxscan322_loop974:
    inc rx321_pos
    gt rx321_pos, rx321_eos, rx321_fail970
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!from", rx321_pos
  rxscan322_scan975:
    nqp_rxmark rx321_bstack, rxscan322_loop974, rx321_pos, 0
  rxscan322_done976:
    nqp_rxmark rx321_bstack, rxcap323_fail978, rx321_pos, 0
    ge rx321_pos, rx321_eos, rx321_fail970
    substr $S11, rx321_tgt, rx321_pos, 1
    index $I11, ucs4:"fF", $S11
    lt $I11, 0, rx321_fail970
    inc rx321_pos
    nqp_rxpeek $I19, rx321_bstack, rxcap323_fail978
    inc $I19
    set $I11, rx321_bstack[$I19]
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!pos", rx321_pos
    $P11 = rx321_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx321_pos)
    rx321_cstack = rx321_cur."!cursor_capture"($P11, "sym")
    goto rxcap323_done977
  rxcap323_fail978:
    goto rx321_fail970
  rxcap323_done977:
    rx321_cur."!cursor_pass"(rx321_pos, "backslash:sym<f>", 'backtrack'=>1)
    .return (rx321_cur)
  rx321_restart969:
    repr_get_attr_obj rx321_cstack, rx321_cur, rx321_curclass, "$!cstack"
  rx321_fail970:
    unless rx321_bstack, rx321_done968
    pop $I19, rx321_bstack
    if_null rx321_cstack, rx321_cstack_done973
    unless rx321_cstack, rx321_cstack_done973
    dec $I19
    set $P11, rx321_cstack[$I19]
  rx321_cstack_done973:
    pop rx321_rep, rx321_bstack
    pop rx321_pos, rx321_bstack
    pop $I19, rx321_bstack
    lt rx321_pos, -1, rx321_done968
    lt rx321_pos, 0, rx321_fail970
    eq $I19, 0, rx321_fail970
    nqp_islist $I20, rx321_cstack
    unless $I20, rx321_jump971
    elements $I18, rx321_bstack
    le $I18, 0, rx321_cut972
    dec $I18
    set $I18, rx321_bstack[$I18]
  rx321_cut972:
    assign rx321_cstack, $I18
  rx321_jump971:
    jump $I19
  rx321_done968:
    rx321_cur."!cursor_fail"()
    .return (rx321_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<h>" :subid("cuid_72_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 246
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx324_start
    .local string rx324_tgt
    .local int rx324_pos
    .local int rx324_off
    .local int rx324_eos
    .local int rx324_rep
    .local pmc rx324_cur
    .local pmc rx324_curclass
    .local pmc rx324_bstack
    .local pmc rx324_cstack
    rx324_start = self."!cursor_start_all"()
    set rx324_cur, rx324_start[0]
    set rx324_tgt, rx324_start[1]
    set rx324_pos, rx324_start[2]
    set rx324_curclass, rx324_start[3]
    set rx324_bstack, rx324_start[4]
    set $I19, rx324_start[5]
    store_lex unicode:"$\x{a2}", rx324_cur
    length rx324_eos, rx324_tgt
    eq $I19, 1, rx324_restart981
    gt rx324_pos, rx324_eos, rx324_fail982
    repr_get_attr_int $I11, self, rx324_curclass, "$!from"
    ne $I11, -1, rxscan325_done988
    goto rxscan325_scan987
  rxscan325_loop986:
    inc rx324_pos
    gt rx324_pos, rx324_eos, rx324_fail982
    repr_bind_attr_int rx324_cur, rx324_curclass, "$!from", rx324_pos
  rxscan325_scan987:
    nqp_rxmark rx324_bstack, rxscan325_loop986, rx324_pos, 0
  rxscan325_done988:
    nqp_rxmark rx324_bstack, rxcap326_fail990, rx324_pos, 0
    ge rx324_pos, rx324_eos, rx324_fail982
    substr $S11, rx324_tgt, rx324_pos, 1
    index $I11, ucs4:"hH", $S11
    lt $I11, 0, rx324_fail982
    inc rx324_pos
    nqp_rxpeek $I19, rx324_bstack, rxcap326_fail990
    inc $I19
    set $I11, rx324_bstack[$I19]
    repr_bind_attr_int rx324_cur, rx324_curclass, "$!pos", rx324_pos
    $P11 = rx324_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx324_pos)
    rx324_cstack = rx324_cur."!cursor_capture"($P11, "sym")
    goto rxcap326_done989
  rxcap326_fail990:
    goto rx324_fail982
  rxcap326_done989:
    rx324_cur."!cursor_pass"(rx324_pos, "backslash:sym<h>", 'backtrack'=>1)
    .return (rx324_cur)
  rx324_restart981:
    repr_get_attr_obj rx324_cstack, rx324_cur, rx324_curclass, "$!cstack"
  rx324_fail982:
    unless rx324_bstack, rx324_done980
    pop $I19, rx324_bstack
    if_null rx324_cstack, rx324_cstack_done985
    unless rx324_cstack, rx324_cstack_done985
    dec $I19
    set $P11, rx324_cstack[$I19]
  rx324_cstack_done985:
    pop rx324_rep, rx324_bstack
    pop rx324_pos, rx324_bstack
    pop $I19, rx324_bstack
    lt rx324_pos, -1, rx324_done980
    lt rx324_pos, 0, rx324_fail982
    eq $I19, 0, rx324_fail982
    nqp_islist $I20, rx324_cstack
    unless $I20, rx324_jump983
    elements $I18, rx324_bstack
    le $I18, 0, rx324_cut984
    dec $I18
    set $I18, rx324_bstack[$I18]
  rx324_cut984:
    assign rx324_cstack, $I18
  rx324_jump983:
    jump $I19
  rx324_done980:
    rx324_cur."!cursor_fail"()
    .return (rx324_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<r>" :subid("cuid_73_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 247
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx327_start
    .local string rx327_tgt
    .local int rx327_pos
    .local int rx327_off
    .local int rx327_eos
    .local int rx327_rep
    .local pmc rx327_cur
    .local pmc rx327_curclass
    .local pmc rx327_bstack
    .local pmc rx327_cstack
    rx327_start = self."!cursor_start_all"()
    set rx327_cur, rx327_start[0]
    set rx327_tgt, rx327_start[1]
    set rx327_pos, rx327_start[2]
    set rx327_curclass, rx327_start[3]
    set rx327_bstack, rx327_start[4]
    set $I19, rx327_start[5]
    store_lex unicode:"$\x{a2}", rx327_cur
    length rx327_eos, rx327_tgt
    eq $I19, 1, rx327_restart993
    gt rx327_pos, rx327_eos, rx327_fail994
    repr_get_attr_int $I11, self, rx327_curclass, "$!from"
    ne $I11, -1, rxscan328_done1000
    goto rxscan328_scan999
  rxscan328_loop998:
    inc rx327_pos
    gt rx327_pos, rx327_eos, rx327_fail994
    repr_bind_attr_int rx327_cur, rx327_curclass, "$!from", rx327_pos
  rxscan328_scan999:
    nqp_rxmark rx327_bstack, rxscan328_loop998, rx327_pos, 0
  rxscan328_done1000:
    nqp_rxmark rx327_bstack, rxcap329_fail1002, rx327_pos, 0
    ge rx327_pos, rx327_eos, rx327_fail994
    substr $S11, rx327_tgt, rx327_pos, 1
    index $I11, ucs4:"rR", $S11
    lt $I11, 0, rx327_fail994
    inc rx327_pos
    nqp_rxpeek $I19, rx327_bstack, rxcap329_fail1002
    inc $I19
    set $I11, rx327_bstack[$I19]
    repr_bind_attr_int rx327_cur, rx327_curclass, "$!pos", rx327_pos
    $P11 = rx327_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx327_pos)
    rx327_cstack = rx327_cur."!cursor_capture"($P11, "sym")
    goto rxcap329_done1001
  rxcap329_fail1002:
    goto rx327_fail994
  rxcap329_done1001:
    rx327_cur."!cursor_pass"(rx327_pos, "backslash:sym<r>", 'backtrack'=>1)
    .return (rx327_cur)
  rx327_restart993:
    repr_get_attr_obj rx327_cstack, rx327_cur, rx327_curclass, "$!cstack"
  rx327_fail994:
    unless rx327_bstack, rx327_done992
    pop $I19, rx327_bstack
    if_null rx327_cstack, rx327_cstack_done997
    unless rx327_cstack, rx327_cstack_done997
    dec $I19
    set $P11, rx327_cstack[$I19]
  rx327_cstack_done997:
    pop rx327_rep, rx327_bstack
    pop rx327_pos, rx327_bstack
    pop $I19, rx327_bstack
    lt rx327_pos, -1, rx327_done992
    lt rx327_pos, 0, rx327_fail994
    eq $I19, 0, rx327_fail994
    nqp_islist $I20, rx327_cstack
    unless $I20, rx327_jump995
    elements $I18, rx327_bstack
    le $I18, 0, rx327_cut996
    dec $I18
    set $I18, rx327_bstack[$I18]
  rx327_cut996:
    assign rx327_cstack, $I18
  rx327_jump995:
    jump $I19
  rx327_done992:
    rx327_cur."!cursor_fail"()
    .return (rx327_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<t>" :subid("cuid_74_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 248
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx330_start
    .local string rx330_tgt
    .local int rx330_pos
    .local int rx330_off
    .local int rx330_eos
    .local int rx330_rep
    .local pmc rx330_cur
    .local pmc rx330_curclass
    .local pmc rx330_bstack
    .local pmc rx330_cstack
    rx330_start = self."!cursor_start_all"()
    set rx330_cur, rx330_start[0]
    set rx330_tgt, rx330_start[1]
    set rx330_pos, rx330_start[2]
    set rx330_curclass, rx330_start[3]
    set rx330_bstack, rx330_start[4]
    set $I19, rx330_start[5]
    store_lex unicode:"$\x{a2}", rx330_cur
    length rx330_eos, rx330_tgt
    eq $I19, 1, rx330_restart1005
    gt rx330_pos, rx330_eos, rx330_fail1006
    repr_get_attr_int $I11, self, rx330_curclass, "$!from"
    ne $I11, -1, rxscan331_done1012
    goto rxscan331_scan1011
  rxscan331_loop1010:
    inc rx330_pos
    gt rx330_pos, rx330_eos, rx330_fail1006
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!from", rx330_pos
  rxscan331_scan1011:
    nqp_rxmark rx330_bstack, rxscan331_loop1010, rx330_pos, 0
  rxscan331_done1012:
    nqp_rxmark rx330_bstack, rxcap332_fail1014, rx330_pos, 0
    ge rx330_pos, rx330_eos, rx330_fail1006
    substr $S11, rx330_tgt, rx330_pos, 1
    index $I11, ucs4:"tT", $S11
    lt $I11, 0, rx330_fail1006
    inc rx330_pos
    nqp_rxpeek $I19, rx330_bstack, rxcap332_fail1014
    inc $I19
    set $I11, rx330_bstack[$I19]
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx330_pos)
    rx330_cstack = rx330_cur."!cursor_capture"($P11, "sym")
    goto rxcap332_done1013
  rxcap332_fail1014:
    goto rx330_fail1006
  rxcap332_done1013:
    rx330_cur."!cursor_pass"(rx330_pos, "backslash:sym<t>", 'backtrack'=>1)
    .return (rx330_cur)
  rx330_restart1005:
    repr_get_attr_obj rx330_cstack, rx330_cur, rx330_curclass, "$!cstack"
  rx330_fail1006:
    unless rx330_bstack, rx330_done1004
    pop $I19, rx330_bstack
    if_null rx330_cstack, rx330_cstack_done1009
    unless rx330_cstack, rx330_cstack_done1009
    dec $I19
    set $P11, rx330_cstack[$I19]
  rx330_cstack_done1009:
    pop rx330_rep, rx330_bstack
    pop rx330_pos, rx330_bstack
    pop $I19, rx330_bstack
    lt rx330_pos, -1, rx330_done1004
    lt rx330_pos, 0, rx330_fail1006
    eq $I19, 0, rx330_fail1006
    nqp_islist $I20, rx330_cstack
    unless $I20, rx330_jump1007
    elements $I18, rx330_bstack
    le $I18, 0, rx330_cut1008
    dec $I18
    set $I18, rx330_bstack[$I18]
  rx330_cut1008:
    assign rx330_cstack, $I18
  rx330_jump1007:
    jump $I19
  rx330_done1004:
    rx330_cur."!cursor_fail"()
    .return (rx330_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<v>" :subid("cuid_75_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 249
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx333_start
    .local string rx333_tgt
    .local int rx333_pos
    .local int rx333_off
    .local int rx333_eos
    .local int rx333_rep
    .local pmc rx333_cur
    .local pmc rx333_curclass
    .local pmc rx333_bstack
    .local pmc rx333_cstack
    rx333_start = self."!cursor_start_all"()
    set rx333_cur, rx333_start[0]
    set rx333_tgt, rx333_start[1]
    set rx333_pos, rx333_start[2]
    set rx333_curclass, rx333_start[3]
    set rx333_bstack, rx333_start[4]
    set $I19, rx333_start[5]
    store_lex unicode:"$\x{a2}", rx333_cur
    length rx333_eos, rx333_tgt
    eq $I19, 1, rx333_restart1017
    gt rx333_pos, rx333_eos, rx333_fail1018
    repr_get_attr_int $I11, self, rx333_curclass, "$!from"
    ne $I11, -1, rxscan334_done1024
    goto rxscan334_scan1023
  rxscan334_loop1022:
    inc rx333_pos
    gt rx333_pos, rx333_eos, rx333_fail1018
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!from", rx333_pos
  rxscan334_scan1023:
    nqp_rxmark rx333_bstack, rxscan334_loop1022, rx333_pos, 0
  rxscan334_done1024:
    nqp_rxmark rx333_bstack, rxcap335_fail1026, rx333_pos, 0
    ge rx333_pos, rx333_eos, rx333_fail1018
    substr $S11, rx333_tgt, rx333_pos, 1
    index $I11, ucs4:"vV", $S11
    lt $I11, 0, rx333_fail1018
    inc rx333_pos
    nqp_rxpeek $I19, rx333_bstack, rxcap335_fail1026
    inc $I19
    set $I11, rx333_bstack[$I19]
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!pos", rx333_pos
    $P11 = rx333_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx333_pos)
    rx333_cstack = rx333_cur."!cursor_capture"($P11, "sym")
    goto rxcap335_done1025
  rxcap335_fail1026:
    goto rx333_fail1018
  rxcap335_done1025:
    rx333_cur."!cursor_pass"(rx333_pos, "backslash:sym<v>", 'backtrack'=>1)
    .return (rx333_cur)
  rx333_restart1017:
    repr_get_attr_obj rx333_cstack, rx333_cur, rx333_curclass, "$!cstack"
  rx333_fail1018:
    unless rx333_bstack, rx333_done1016
    pop $I19, rx333_bstack
    if_null rx333_cstack, rx333_cstack_done1021
    unless rx333_cstack, rx333_cstack_done1021
    dec $I19
    set $P11, rx333_cstack[$I19]
  rx333_cstack_done1021:
    pop rx333_rep, rx333_bstack
    pop rx333_pos, rx333_bstack
    pop $I19, rx333_bstack
    lt rx333_pos, -1, rx333_done1016
    lt rx333_pos, 0, rx333_fail1018
    eq $I19, 0, rx333_fail1018
    nqp_islist $I20, rx333_cstack
    unless $I20, rx333_jump1019
    elements $I18, rx333_bstack
    le $I18, 0, rx333_cut1020
    dec $I18
    set $I18, rx333_bstack[$I18]
  rx333_cut1020:
    assign rx333_cstack, $I18
  rx333_jump1019:
    jump $I19
  rx333_done1016:
    rx333_cur."!cursor_fail"()
    .return (rx333_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<o>" :subid("cuid_76_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 250
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx336_start
    .local string rx336_tgt
    .local int rx336_pos
    .local int rx336_off
    .local int rx336_eos
    .local int rx336_rep
    .local pmc rx336_cur
    .local pmc rx336_curclass
    .local pmc rx336_bstack
    .local pmc rx336_cstack
    rx336_start = self."!cursor_start_all"()
    set rx336_cur, rx336_start[0]
    set rx336_tgt, rx336_start[1]
    set rx336_pos, rx336_start[2]
    set rx336_curclass, rx336_start[3]
    set rx336_bstack, rx336_start[4]
    set $I19, rx336_start[5]
    store_lex unicode:"$\x{a2}", rx336_cur
    length rx336_eos, rx336_tgt
    eq $I19, 1, rx336_restart1029
    gt rx336_pos, rx336_eos, rx336_fail1030
    repr_get_attr_int $I11, self, rx336_curclass, "$!from"
    ne $I11, -1, rxscan337_done1036
    goto rxscan337_scan1035
  rxscan337_loop1034:
    inc rx336_pos
    gt rx336_pos, rx336_eos, rx336_fail1030
    repr_bind_attr_int rx336_cur, rx336_curclass, "$!from", rx336_pos
  rxscan337_scan1035:
    nqp_rxmark rx336_bstack, rxscan337_loop1034, rx336_pos, 0
  rxscan337_done1036:
    nqp_rxmark rx336_bstack, rxcap338_fail1038, rx336_pos, 0
    ge rx336_pos, rx336_eos, rx336_fail1030
    substr $S11, rx336_tgt, rx336_pos, 1
    index $I11, ucs4:"oO", $S11
    lt $I11, 0, rx336_fail1030
    inc rx336_pos
    nqp_rxpeek $I19, rx336_bstack, rxcap338_fail1038
    inc $I19
    set $I11, rx336_bstack[$I19]
    repr_bind_attr_int rx336_cur, rx336_curclass, "$!pos", rx336_pos
    $P11 = rx336_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx336_pos)
    rx336_cstack = rx336_cur."!cursor_capture"($P11, "sym")
    goto rxcap338_done1037
  rxcap338_fail1038:
    goto rx336_fail1030
  rxcap338_done1037:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt339_01040
    nqp_push_label $P11, alt339_11042
    nqp_rxmark rx336_bstack, alt339_end1039, -1, 0
    rx336_cur."!alt"(rx336_pos, "alt_nfa__13_1367388595.48764", $P11)
    goto rx336_fail1030
  alt339_01040:
    repr_bind_attr_int rx336_cur, rx336_curclass, "$!pos", rx336_pos
    $P11 = rx336_cur."octint"()
    repr_get_attr_int $I11, $P11, rx336_curclass, "$!pos"
    lt $I11, 0, rx336_fail1030
    nqp_rxmark rx336_bstack, rxsubrule340_pass1041, -1, 0
  rxsubrule340_pass1041:
    rx336_cstack = rx336_cur."!cursor_capture"($P11, "octint")
    repr_get_attr_int rx336_pos, $P11, rx336_curclass, "$!pos"
    goto alt339_end1039
  alt339_11042:
    add $I11, rx336_pos, 1
    gt $I11, rx336_eos, rx336_fail1030
    substr $S10, rx336_tgt, rx336_pos, 1
    ne $S10, ucs4:"[", rx336_fail1030
    add rx336_pos, 1
    repr_bind_attr_int rx336_cur, rx336_curclass, "$!pos", rx336_pos
    $P11 = rx336_cur."octints"()
    repr_get_attr_int $I11, $P11, rx336_curclass, "$!pos"
    lt $I11, 0, rx336_fail1030
    nqp_rxmark rx336_bstack, rxsubrule341_pass1043, -1, 0
  rxsubrule341_pass1043:
    rx336_cstack = rx336_cur."!cursor_capture"($P11, "octints")
    repr_get_attr_int rx336_pos, $P11, rx336_curclass, "$!pos"
    add $I11, rx336_pos, 1
    gt $I11, rx336_eos, rx336_fail1030
    substr $S10, rx336_tgt, rx336_pos, 1
    ne $S10, ucs4:"]", rx336_fail1030
    add rx336_pos, 1
    goto alt339_end1039
  alt339_end1039:
    nqp_rxcommit rx336_bstack, alt339_end1039
    rx336_cur."!cursor_pass"(rx336_pos, "backslash:sym<o>", 'backtrack'=>1)
    .return (rx336_cur)
  rx336_restart1029:
    repr_get_attr_obj rx336_cstack, rx336_cur, rx336_curclass, "$!cstack"
  rx336_fail1030:
    unless rx336_bstack, rx336_done1028
    pop $I19, rx336_bstack
    if_null rx336_cstack, rx336_cstack_done1033
    unless rx336_cstack, rx336_cstack_done1033
    dec $I19
    set $P11, rx336_cstack[$I19]
  rx336_cstack_done1033:
    pop rx336_rep, rx336_bstack
    pop rx336_pos, rx336_bstack
    pop $I19, rx336_bstack
    lt rx336_pos, -1, rx336_done1028
    lt rx336_pos, 0, rx336_fail1030
    eq $I19, 0, rx336_fail1030
    nqp_islist $I20, rx336_cstack
    unless $I20, rx336_jump1031
    elements $I18, rx336_bstack
    le $I18, 0, rx336_cut1032
    dec $I18
    set $I18, rx336_bstack[$I18]
  rx336_cut1032:
    assign rx336_cstack, $I18
  rx336_jump1031:
    jump $I19
  rx336_done1028:
    rx336_cur."!cursor_fail"()
    .return (rx336_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<x>" :subid("cuid_77_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 251
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx342_start
    .local string rx342_tgt
    .local int rx342_pos
    .local int rx342_off
    .local int rx342_eos
    .local int rx342_rep
    .local pmc rx342_cur
    .local pmc rx342_curclass
    .local pmc rx342_bstack
    .local pmc rx342_cstack
    rx342_start = self."!cursor_start_all"()
    set rx342_cur, rx342_start[0]
    set rx342_tgt, rx342_start[1]
    set rx342_pos, rx342_start[2]
    set rx342_curclass, rx342_start[3]
    set rx342_bstack, rx342_start[4]
    set $I19, rx342_start[5]
    store_lex unicode:"$\x{a2}", rx342_cur
    length rx342_eos, rx342_tgt
    eq $I19, 1, rx342_restart1046
    gt rx342_pos, rx342_eos, rx342_fail1047
    repr_get_attr_int $I11, self, rx342_curclass, "$!from"
    ne $I11, -1, rxscan343_done1053
    goto rxscan343_scan1052
  rxscan343_loop1051:
    inc rx342_pos
    gt rx342_pos, rx342_eos, rx342_fail1047
    repr_bind_attr_int rx342_cur, rx342_curclass, "$!from", rx342_pos
  rxscan343_scan1052:
    nqp_rxmark rx342_bstack, rxscan343_loop1051, rx342_pos, 0
  rxscan343_done1053:
    nqp_rxmark rx342_bstack, rxcap344_fail1055, rx342_pos, 0
    ge rx342_pos, rx342_eos, rx342_fail1047
    substr $S11, rx342_tgt, rx342_pos, 1
    index $I11, ucs4:"xX", $S11
    lt $I11, 0, rx342_fail1047
    inc rx342_pos
    nqp_rxpeek $I19, rx342_bstack, rxcap344_fail1055
    inc $I19
    set $I11, rx342_bstack[$I19]
    repr_bind_attr_int rx342_cur, rx342_curclass, "$!pos", rx342_pos
    $P11 = rx342_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx342_pos)
    rx342_cstack = rx342_cur."!cursor_capture"($P11, "sym")
    goto rxcap344_done1054
  rxcap344_fail1055:
    goto rx342_fail1047
  rxcap344_done1054:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt345_01057
    nqp_push_label $P11, alt345_11059
    nqp_rxmark rx342_bstack, alt345_end1056, -1, 0
    rx342_cur."!alt"(rx342_pos, "alt_nfa__14_1367388595.50225", $P11)
    goto rx342_fail1047
  alt345_01057:
    repr_bind_attr_int rx342_cur, rx342_curclass, "$!pos", rx342_pos
    $P11 = rx342_cur."hexint"()
    repr_get_attr_int $I11, $P11, rx342_curclass, "$!pos"
    lt $I11, 0, rx342_fail1047
    nqp_rxmark rx342_bstack, rxsubrule346_pass1058, -1, 0
  rxsubrule346_pass1058:
    rx342_cstack = rx342_cur."!cursor_capture"($P11, "hexint")
    repr_get_attr_int rx342_pos, $P11, rx342_curclass, "$!pos"
    goto alt345_end1056
  alt345_11059:
    add $I11, rx342_pos, 1
    gt $I11, rx342_eos, rx342_fail1047
    substr $S10, rx342_tgt, rx342_pos, 1
    ne $S10, ucs4:"[", rx342_fail1047
    add rx342_pos, 1
    repr_bind_attr_int rx342_cur, rx342_curclass, "$!pos", rx342_pos
    $P11 = rx342_cur."hexints"()
    repr_get_attr_int $I11, $P11, rx342_curclass, "$!pos"
    lt $I11, 0, rx342_fail1047
    nqp_rxmark rx342_bstack, rxsubrule347_pass1060, -1, 0
  rxsubrule347_pass1060:
    rx342_cstack = rx342_cur."!cursor_capture"($P11, "hexints")
    repr_get_attr_int rx342_pos, $P11, rx342_curclass, "$!pos"
    add $I11, rx342_pos, 1
    gt $I11, rx342_eos, rx342_fail1047
    substr $S10, rx342_tgt, rx342_pos, 1
    ne $S10, ucs4:"]", rx342_fail1047
    add rx342_pos, 1
    goto alt345_end1056
  alt345_end1056:
    nqp_rxcommit rx342_bstack, alt345_end1056
    rx342_cur."!cursor_pass"(rx342_pos, "backslash:sym<x>", 'backtrack'=>1)
    .return (rx342_cur)
  rx342_restart1046:
    repr_get_attr_obj rx342_cstack, rx342_cur, rx342_curclass, "$!cstack"
  rx342_fail1047:
    unless rx342_bstack, rx342_done1045
    pop $I19, rx342_bstack
    if_null rx342_cstack, rx342_cstack_done1050
    unless rx342_cstack, rx342_cstack_done1050
    dec $I19
    set $P11, rx342_cstack[$I19]
  rx342_cstack_done1050:
    pop rx342_rep, rx342_bstack
    pop rx342_pos, rx342_bstack
    pop $I19, rx342_bstack
    lt rx342_pos, -1, rx342_done1045
    lt rx342_pos, 0, rx342_fail1047
    eq $I19, 0, rx342_fail1047
    nqp_islist $I20, rx342_cstack
    unless $I20, rx342_jump1048
    elements $I18, rx342_bstack
    le $I18, 0, rx342_cut1049
    dec $I18
    set $I18, rx342_bstack[$I18]
  rx342_cut1049:
    assign rx342_cstack, $I18
  rx342_jump1048:
    jump $I19
  rx342_done1045:
    rx342_cur."!cursor_fail"()
    .return (rx342_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<c>" :subid("cuid_78_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 252
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx348_start
    .local string rx348_tgt
    .local int rx348_pos
    .local int rx348_off
    .local int rx348_eos
    .local int rx348_rep
    .local pmc rx348_cur
    .local pmc rx348_curclass
    .local pmc rx348_bstack
    .local pmc rx348_cstack
    rx348_start = self."!cursor_start_all"()
    set rx348_cur, rx348_start[0]
    set rx348_tgt, rx348_start[1]
    set rx348_pos, rx348_start[2]
    set rx348_curclass, rx348_start[3]
    set rx348_bstack, rx348_start[4]
    set $I19, rx348_start[5]
    store_lex unicode:"$\x{a2}", rx348_cur
    length rx348_eos, rx348_tgt
    eq $I19, 1, rx348_restart1063
    gt rx348_pos, rx348_eos, rx348_fail1064
    repr_get_attr_int $I11, self, rx348_curclass, "$!from"
    ne $I11, -1, rxscan349_done1070
    goto rxscan349_scan1069
  rxscan349_loop1068:
    inc rx348_pos
    gt rx348_pos, rx348_eos, rx348_fail1064
    repr_bind_attr_int rx348_cur, rx348_curclass, "$!from", rx348_pos
  rxscan349_scan1069:
    nqp_rxmark rx348_bstack, rxscan349_loop1068, rx348_pos, 0
  rxscan349_done1070:
    nqp_rxmark rx348_bstack, rxcap350_fail1072, rx348_pos, 0
    ge rx348_pos, rx348_eos, rx348_fail1064
    substr $S11, rx348_tgt, rx348_pos, 1
    index $I11, ucs4:"cC", $S11
    lt $I11, 0, rx348_fail1064
    inc rx348_pos
    nqp_rxpeek $I19, rx348_bstack, rxcap350_fail1072
    inc $I19
    set $I11, rx348_bstack[$I19]
    repr_bind_attr_int rx348_cur, rx348_curclass, "$!pos", rx348_pos
    $P11 = rx348_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx348_pos)
    rx348_cstack = rx348_cur."!cursor_capture"($P11, "sym")
    goto rxcap350_done1071
  rxcap350_fail1072:
    goto rx348_fail1064
  rxcap350_done1071:
    repr_bind_attr_int rx348_cur, rx348_curclass, "$!pos", rx348_pos
    $P11 = rx348_cur."charspec"()
    repr_get_attr_int $I11, $P11, rx348_curclass, "$!pos"
    lt $I11, 0, rx348_fail1064
    nqp_rxmark rx348_bstack, rxsubrule351_pass1073, -1, 0
  rxsubrule351_pass1073:
    rx348_cstack = rx348_cur."!cursor_capture"($P11, "charspec")
    repr_get_attr_int rx348_pos, $P11, rx348_curclass, "$!pos"
    rx348_cur."!cursor_pass"(rx348_pos, "backslash:sym<c>", 'backtrack'=>1)
    .return (rx348_cur)
  rx348_restart1063:
    repr_get_attr_obj rx348_cstack, rx348_cur, rx348_curclass, "$!cstack"
  rx348_fail1064:
    unless rx348_bstack, rx348_done1062
    pop $I19, rx348_bstack
    if_null rx348_cstack, rx348_cstack_done1067
    unless rx348_cstack, rx348_cstack_done1067
    dec $I19
    set $P11, rx348_cstack[$I19]
  rx348_cstack_done1067:
    pop rx348_rep, rx348_bstack
    pop rx348_pos, rx348_bstack
    pop $I19, rx348_bstack
    lt rx348_pos, -1, rx348_done1062
    lt rx348_pos, 0, rx348_fail1064
    eq $I19, 0, rx348_fail1064
    nqp_islist $I20, rx348_cstack
    unless $I20, rx348_jump1065
    elements $I18, rx348_bstack
    le $I18, 0, rx348_cut1066
    dec $I18
    set $I18, rx348_bstack[$I18]
  rx348_cut1066:
    assign rx348_cstack, $I18
  rx348_jump1065:
    jump $I19
  rx348_done1062:
    rx348_cur."!cursor_fail"()
    .return (rx348_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<A>" :subid("cuid_79_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 253
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx352_start
    .local string rx352_tgt
    .local int rx352_pos
    .local int rx352_off
    .local int rx352_eos
    .local int rx352_rep
    .local pmc rx352_cur
    .local pmc rx352_curclass
    .local pmc rx352_bstack
    .local pmc rx352_cstack
    rx352_start = self."!cursor_start_all"()
    set rx352_cur, rx352_start[0]
    set rx352_tgt, rx352_start[1]
    set rx352_pos, rx352_start[2]
    set rx352_curclass, rx352_start[3]
    set rx352_bstack, rx352_start[4]
    set $I19, rx352_start[5]
    store_lex unicode:"$\x{a2}", rx352_cur
    length rx352_eos, rx352_tgt
    eq $I19, 1, rx352_restart1076
    gt rx352_pos, rx352_eos, rx352_fail1077
    repr_get_attr_int $I11, self, rx352_curclass, "$!from"
    ne $I11, -1, rxscan353_done1083
    goto rxscan353_scan1082
  rxscan353_loop1081:
    inc rx352_pos
    gt rx352_pos, rx352_eos, rx352_fail1077
    repr_bind_attr_int rx352_cur, rx352_curclass, "$!from", rx352_pos
  rxscan353_scan1082:
    nqp_rxmark rx352_bstack, rxscan353_loop1081, rx352_pos, 0
  rxscan353_done1083:
    add $I11, rx352_pos, 1
    gt $I11, rx352_eos, rx352_fail1077
    substr $S10, rx352_tgt, rx352_pos, 1
    ne $S10, ucs4:"A", rx352_fail1077
    add rx352_pos, 1
    repr_bind_attr_int rx352_cur, rx352_curclass, "$!pos", rx352_pos
    $P11 = rx352_cur."obs"("\\\\A as beginning-of-string matcher", "^")
    repr_get_attr_int $I11, $P11, rx352_curclass, "$!pos"
    lt $I11, 0, rx352_fail1077
    repr_get_attr_int rx352_pos, $P11, rx352_curclass, "$!pos"
    rx352_cur."!cursor_pass"(rx352_pos, "backslash:sym<A>", 'backtrack'=>1)
    .return (rx352_cur)
  rx352_restart1076:
    repr_get_attr_obj rx352_cstack, rx352_cur, rx352_curclass, "$!cstack"
  rx352_fail1077:
    unless rx352_bstack, rx352_done1075
    pop $I19, rx352_bstack
    if_null rx352_cstack, rx352_cstack_done1080
    unless rx352_cstack, rx352_cstack_done1080
    dec $I19
    set $P11, rx352_cstack[$I19]
  rx352_cstack_done1080:
    pop rx352_rep, rx352_bstack
    pop rx352_pos, rx352_bstack
    pop $I19, rx352_bstack
    lt rx352_pos, -1, rx352_done1075
    lt rx352_pos, 0, rx352_fail1077
    eq $I19, 0, rx352_fail1077
    nqp_islist $I20, rx352_cstack
    unless $I20, rx352_jump1078
    elements $I18, rx352_bstack
    le $I18, 0, rx352_cut1079
    dec $I18
    set $I18, rx352_bstack[$I18]
  rx352_cut1079:
    assign rx352_cstack, $I18
  rx352_jump1078:
    jump $I19
  rx352_done1075:
    rx352_cur."!cursor_fail"()
    .return (rx352_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<z>" :subid("cuid_80_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 254
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx355_start
    .local string rx355_tgt
    .local int rx355_pos
    .local int rx355_off
    .local int rx355_eos
    .local int rx355_rep
    .local pmc rx355_cur
    .local pmc rx355_curclass
    .local pmc rx355_bstack
    .local pmc rx355_cstack
    rx355_start = self."!cursor_start_all"()
    set rx355_cur, rx355_start[0]
    set rx355_tgt, rx355_start[1]
    set rx355_pos, rx355_start[2]
    set rx355_curclass, rx355_start[3]
    set rx355_bstack, rx355_start[4]
    set $I19, rx355_start[5]
    store_lex unicode:"$\x{a2}", rx355_cur
    length rx355_eos, rx355_tgt
    eq $I19, 1, rx355_restart1087
    gt rx355_pos, rx355_eos, rx355_fail1088
    repr_get_attr_int $I11, self, rx355_curclass, "$!from"
    ne $I11, -1, rxscan356_done1094
    goto rxscan356_scan1093
  rxscan356_loop1092:
    inc rx355_pos
    gt rx355_pos, rx355_eos, rx355_fail1088
    repr_bind_attr_int rx355_cur, rx355_curclass, "$!from", rx355_pos
  rxscan356_scan1093:
    nqp_rxmark rx355_bstack, rxscan356_loop1092, rx355_pos, 0
  rxscan356_done1094:
    add $I11, rx355_pos, 1
    gt $I11, rx355_eos, rx355_fail1088
    substr $S10, rx355_tgt, rx355_pos, 1
    ne $S10, ucs4:"z", rx355_fail1088
    add rx355_pos, 1
    repr_bind_attr_int rx355_cur, rx355_curclass, "$!pos", rx355_pos
    $P11 = rx355_cur."obs"("\\\\z as end-of-string matcher", "$")
    repr_get_attr_int $I11, $P11, rx355_curclass, "$!pos"
    lt $I11, 0, rx355_fail1088
    repr_get_attr_int rx355_pos, $P11, rx355_curclass, "$!pos"
    rx355_cur."!cursor_pass"(rx355_pos, "backslash:sym<z>", 'backtrack'=>1)
    .return (rx355_cur)
  rx355_restart1087:
    repr_get_attr_obj rx355_cstack, rx355_cur, rx355_curclass, "$!cstack"
  rx355_fail1088:
    unless rx355_bstack, rx355_done1086
    pop $I19, rx355_bstack
    if_null rx355_cstack, rx355_cstack_done1091
    unless rx355_cstack, rx355_cstack_done1091
    dec $I19
    set $P11, rx355_cstack[$I19]
  rx355_cstack_done1091:
    pop rx355_rep, rx355_bstack
    pop rx355_pos, rx355_bstack
    pop $I19, rx355_bstack
    lt rx355_pos, -1, rx355_done1086
    lt rx355_pos, 0, rx355_fail1088
    eq $I19, 0, rx355_fail1088
    nqp_islist $I20, rx355_cstack
    unless $I20, rx355_jump1089
    elements $I18, rx355_bstack
    le $I18, 0, rx355_cut1090
    dec $I18
    set $I18, rx355_bstack[$I18]
  rx355_cut1090:
    assign rx355_cstack, $I18
  rx355_jump1089:
    jump $I19
  rx355_done1086:
    rx355_cur."!cursor_fail"()
    .return (rx355_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<Z>" :subid("cuid_81_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 255
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx358_start
    .local string rx358_tgt
    .local int rx358_pos
    .local int rx358_off
    .local int rx358_eos
    .local int rx358_rep
    .local pmc rx358_cur
    .local pmc rx358_curclass
    .local pmc rx358_bstack
    .local pmc rx358_cstack
    rx358_start = self."!cursor_start_all"()
    set rx358_cur, rx358_start[0]
    set rx358_tgt, rx358_start[1]
    set rx358_pos, rx358_start[2]
    set rx358_curclass, rx358_start[3]
    set rx358_bstack, rx358_start[4]
    set $I19, rx358_start[5]
    store_lex unicode:"$\x{a2}", rx358_cur
    length rx358_eos, rx358_tgt
    eq $I19, 1, rx358_restart1098
    gt rx358_pos, rx358_eos, rx358_fail1099
    repr_get_attr_int $I11, self, rx358_curclass, "$!from"
    ne $I11, -1, rxscan359_done1105
    goto rxscan359_scan1104
  rxscan359_loop1103:
    inc rx358_pos
    gt rx358_pos, rx358_eos, rx358_fail1099
    repr_bind_attr_int rx358_cur, rx358_curclass, "$!from", rx358_pos
  rxscan359_scan1104:
    nqp_rxmark rx358_bstack, rxscan359_loop1103, rx358_pos, 0
  rxscan359_done1105:
    add $I11, rx358_pos, 1
    gt $I11, rx358_eos, rx358_fail1099
    substr $S10, rx358_tgt, rx358_pos, 1
    ne $S10, ucs4:"Z", rx358_fail1099
    add rx358_pos, 1
    repr_bind_attr_int rx358_cur, rx358_curclass, "$!pos", rx358_pos
    $P11 = rx358_cur."obs"("\\\\Z as end-of-string matcher", "\\\\n?$")
    repr_get_attr_int $I11, $P11, rx358_curclass, "$!pos"
    lt $I11, 0, rx358_fail1099
    repr_get_attr_int rx358_pos, $P11, rx358_curclass, "$!pos"
    rx358_cur."!cursor_pass"(rx358_pos, "backslash:sym<Z>", 'backtrack'=>1)
    .return (rx358_cur)
  rx358_restart1098:
    repr_get_attr_obj rx358_cstack, rx358_cur, rx358_curclass, "$!cstack"
  rx358_fail1099:
    unless rx358_bstack, rx358_done1097
    pop $I19, rx358_bstack
    if_null rx358_cstack, rx358_cstack_done1102
    unless rx358_cstack, rx358_cstack_done1102
    dec $I19
    set $P11, rx358_cstack[$I19]
  rx358_cstack_done1102:
    pop rx358_rep, rx358_bstack
    pop rx358_pos, rx358_bstack
    pop $I19, rx358_bstack
    lt rx358_pos, -1, rx358_done1097
    lt rx358_pos, 0, rx358_fail1099
    eq $I19, 0, rx358_fail1099
    nqp_islist $I20, rx358_cstack
    unless $I20, rx358_jump1100
    elements $I18, rx358_bstack
    le $I18, 0, rx358_cut1101
    dec $I18
    set $I18, rx358_bstack[$I18]
  rx358_cut1101:
    assign rx358_cstack, $I18
  rx358_jump1100:
    jump $I19
  rx358_done1097:
    rx358_cur."!cursor_fail"()
    .return (rx358_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<Q>" :subid("cuid_82_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 256
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx361_start
    .local string rx361_tgt
    .local int rx361_pos
    .local int rx361_off
    .local int rx361_eos
    .local int rx361_rep
    .local pmc rx361_cur
    .local pmc rx361_curclass
    .local pmc rx361_bstack
    .local pmc rx361_cstack
    rx361_start = self."!cursor_start_all"()
    set rx361_cur, rx361_start[0]
    set rx361_tgt, rx361_start[1]
    set rx361_pos, rx361_start[2]
    set rx361_curclass, rx361_start[3]
    set rx361_bstack, rx361_start[4]
    set $I19, rx361_start[5]
    store_lex unicode:"$\x{a2}", rx361_cur
    length rx361_eos, rx361_tgt
    eq $I19, 1, rx361_restart1109
    gt rx361_pos, rx361_eos, rx361_fail1110
    repr_get_attr_int $I11, self, rx361_curclass, "$!from"
    ne $I11, -1, rxscan362_done1116
    goto rxscan362_scan1115
  rxscan362_loop1114:
    inc rx361_pos
    gt rx361_pos, rx361_eos, rx361_fail1110
    repr_bind_attr_int rx361_cur, rx361_curclass, "$!from", rx361_pos
  rxscan362_scan1115:
    nqp_rxmark rx361_bstack, rxscan362_loop1114, rx361_pos, 0
  rxscan362_done1116:
    add $I11, rx361_pos, 1
    gt $I11, rx361_eos, rx361_fail1110
    substr $S10, rx361_tgt, rx361_pos, 1
    ne $S10, ucs4:"Q", rx361_fail1110
    add rx361_pos, 1
    repr_bind_attr_int rx361_cur, rx361_curclass, "$!pos", rx361_pos
    $P11 = rx361_cur."obs"("\\\\Q as quotemeta", "quotes or literal variable match")
    repr_get_attr_int $I11, $P11, rx361_curclass, "$!pos"
    lt $I11, 0, rx361_fail1110
    repr_get_attr_int rx361_pos, $P11, rx361_curclass, "$!pos"
    rx361_cur."!cursor_pass"(rx361_pos, "backslash:sym<Q>", 'backtrack'=>1)
    .return (rx361_cur)
  rx361_restart1109:
    repr_get_attr_obj rx361_cstack, rx361_cur, rx361_curclass, "$!cstack"
  rx361_fail1110:
    unless rx361_bstack, rx361_done1108
    pop $I19, rx361_bstack
    if_null rx361_cstack, rx361_cstack_done1113
    unless rx361_cstack, rx361_cstack_done1113
    dec $I19
    set $P11, rx361_cstack[$I19]
  rx361_cstack_done1113:
    pop rx361_rep, rx361_bstack
    pop rx361_pos, rx361_bstack
    pop $I19, rx361_bstack
    lt rx361_pos, -1, rx361_done1108
    lt rx361_pos, 0, rx361_fail1110
    eq $I19, 0, rx361_fail1110
    nqp_islist $I20, rx361_cstack
    unless $I20, rx361_jump1111
    elements $I18, rx361_bstack
    le $I18, 0, rx361_cut1112
    dec $I18
    set $I18, rx361_bstack[$I18]
  rx361_cut1112:
    assign rx361_cstack, $I18
  rx361_jump1111:
    jump $I19
  rx361_done1108:
    rx361_cur."!cursor_fail"()
    .return (rx361_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<unrec>" :subid("cuid_83_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 257
    .param pmc _lex_param_0 
    .const 'Sub' $P5008 = 'cuid_191_1367388594.4399' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_84_1367388594.4399' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_192_1367388594.4399' 
    capture_lex $P5008 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx364_start
    .local string rx364_tgt
    .local int rx364_pos
    .local int rx364_off
    .local int rx364_eos
    .local int rx364_rep
    .local pmc rx364_cur
    .local pmc rx364_curclass
    .local pmc rx364_bstack
    .local pmc rx364_cstack
    rx364_start = self."!cursor_start_all"()
    set rx364_cur, rx364_start[0]
    set rx364_tgt, rx364_start[1]
    set rx364_pos, rx364_start[2]
    set rx364_curclass, rx364_start[3]
    set rx364_bstack, rx364_start[4]
    set $I19, rx364_start[5]
    store_lex unicode:"$\x{a2}", rx364_cur
    length rx364_eos, rx364_tgt
    eq $I19, 1, rx364_restart1120
    gt rx364_pos, rx364_eos, rx364_fail1121
    repr_get_attr_int $I11, self, rx364_curclass, "$!from"
    ne $I11, -1, rxscan365_done1127
    goto rxscan365_scan1126
  rxscan365_loop1125:
    inc rx364_pos
    gt rx364_pos, rx364_eos, rx364_fail1121
    repr_bind_attr_int rx364_cur, rx364_curclass, "$!from", rx364_pos
  rxscan365_scan1126:
    nqp_rxmark rx364_bstack, rxscan365_loop1125, rx364_pos, 0
  rxscan365_done1127:
    repr_bind_attr_int rx364_cur, rx364_curclass, "$!pos", rx364_pos
    store_lex unicode:"$\x{a2}", rx364_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_191_1367388594.4399' 
    capture_lex $P5002
    $P5003 = $P5002()
    .const 'Sub' $P5004 = 'cuid_84_1367388594.4399' 
    capture_lex $P5004
    repr_bind_attr_int rx364_cur, rx364_curclass, "$!pos", rx364_pos
    $P11 = rx364_cur.$P5004()
    repr_get_attr_int $I11, $P11, rx364_curclass, "$!pos"
    lt $I11, 0, rx364_fail1121
    nqp_rxmark rx364_bstack, rxsubrule368_pass1138, -1, 0
  rxsubrule368_pass1138:
    rx364_cstack = rx364_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx364_pos, $P11, rx364_curclass, "$!pos"
    repr_bind_attr_int rx364_cur, rx364_curclass, "$!pos", rx364_pos
    store_lex unicode:"$\x{a2}", rx364_cur
    $P5005 = $P101."MATCH"()
    set $P102, $P5005
    .const 'Sub' $P5006 = 'cuid_192_1367388594.4399' 
    capture_lex $P5006
    $P5007 = $P5006()
    rx364_cur."!cursor_pass"(rx364_pos, "backslash:sym<unrec>", 'backtrack'=>1)
    .return (rx364_cur)
  rx364_restart1120:
    repr_get_attr_obj rx364_cstack, rx364_cur, rx364_curclass, "$!cstack"
  rx364_fail1121:
    unless rx364_bstack, rx364_done1119
    pop $I19, rx364_bstack
    if_null rx364_cstack, rx364_cstack_done1124
    unless rx364_cstack, rx364_cstack_done1124
    dec $I19
    set $P11, rx364_cstack[$I19]
  rx364_cstack_done1124:
    pop rx364_rep, rx364_bstack
    pop rx364_pos, rx364_bstack
    pop $I19, rx364_bstack
    lt rx364_pos, -1, rx364_done1119
    lt rx364_pos, 0, rx364_fail1121
    eq $I19, 0, rx364_fail1121
    nqp_islist $I20, rx364_cstack
    unless $I20, rx364_jump1122
    elements $I18, rx364_bstack
    le $I18, 0, rx364_cut1123
    dec $I18
    set $I18, rx364_bstack[$I18]
  rx364_cut1123:
    assign rx364_cstack, $I18
  rx364_jump1122:
    jump $I19
  rx364_done1119:
    rx364_cur."!cursor_fail"()
    .return (rx364_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_191_1367388594.4399") :anon :lex :outer("cuid_83_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 257

    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_84_1367388594.4399") :anon :lex :outer("cuid_83_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx366_start
    .local string rx366_tgt
    .local int rx366_pos
    .local int rx366_off
    .local int rx366_eos
    .local int rx366_rep
    .local pmc rx366_cur
    .local pmc rx366_curclass
    .local pmc rx366_bstack
    .local pmc rx366_cstack
    rx366_start = self."!cursor_start_all"()
    set rx366_cur, rx366_start[0]
    set rx366_tgt, rx366_start[1]
    set rx366_pos, rx366_start[2]
    set rx366_curclass, rx366_start[3]
    set rx366_bstack, rx366_start[4]
    set $I19, rx366_start[5]
    store_lex unicode:"$\x{a2}", rx366_cur
    length rx366_eos, rx366_tgt
    eq $I19, 1, rx366_restart1130
    gt rx366_pos, rx366_eos, rx366_fail1131
    repr_get_attr_int $I11, self, rx366_curclass, "$!from"
    ne $I11, -1, rxscan367_done1137
    goto rxscan367_scan1136
  rxscan367_loop1135:
    inc rx366_pos
    gt rx366_pos, rx366_eos, rx366_fail1131
    repr_bind_attr_int rx366_cur, rx366_curclass, "$!from", rx366_pos
  rxscan367_scan1136:
    nqp_rxmark rx366_bstack, rxscan367_loop1135, rx366_pos, 0
  rxscan367_done1137:
    ge rx366_pos, rx366_eos, rx366_fail1131
    is_cclass $I11, .CCLASS_WORD, rx366_tgt, rx366_pos
    unless $I11, rx366_fail1131
    add rx366_pos, 1
    rx366_cur."!cursor_pass"(rx366_pos, 'backtrack'=>1)
    .return (rx366_cur)
  rx366_restart1130:
    repr_get_attr_obj rx366_cstack, rx366_cur, rx366_curclass, "$!cstack"
  rx366_fail1131:
    unless rx366_bstack, rx366_done1129
    pop $I19, rx366_bstack
    if_null rx366_cstack, rx366_cstack_done1134
    unless rx366_cstack, rx366_cstack_done1134
    dec $I19
    set $P11, rx366_cstack[$I19]
  rx366_cstack_done1134:
    pop rx366_rep, rx366_bstack
    pop rx366_pos, rx366_bstack
    pop $I19, rx366_bstack
    lt rx366_pos, -1, rx366_done1129
    lt rx366_pos, 0, rx366_fail1131
    eq $I19, 0, rx366_fail1131
    nqp_islist $I20, rx366_cstack
    unless $I20, rx366_jump1132
    elements $I18, rx366_bstack
    le $I18, 0, rx366_cut1133
    dec $I18
    set $I18, rx366_bstack[$I18]
  rx366_cut1133:
    assign rx366_cstack, $I18
  rx366_jump1132:
    jump $I19
  rx366_done1129:
    rx366_cur."!cursor_fail"()
    .return (rx366_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_192_1367388594.4399") :anon :lex :outer("cuid_83_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 257
    .local pmc fb_tmp_6 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$/"
    set fb_tmp_6, $P5003
    repr_defined $I5001, fb_tmp_6
    unless $I5001 goto if369_else1139 
    set $P5004, fb_tmp_6[0]
    set $P5006, $P5004
    goto if369_end1140
  if369_else1139:
    null $P5005
    set $P5006, $P5005
  if369_end1140:
    unless_null $P5006, vivi_3701141
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5006, $P5007
  vivi_3701141:
    $P5008 = $P5006."Str"()
    $P5009 = $P5001."throw_unrecog_backslash_seq"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<misc>" :subid("cuid_85_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 258
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx371_start
    .local string rx371_tgt
    .local int rx371_pos
    .local int rx371_off
    .local int rx371_eos
    .local int rx371_rep
    .local pmc rx371_cur
    .local pmc rx371_curclass
    .local pmc rx371_bstack
    .local pmc rx371_cstack
    rx371_start = self."!cursor_start_all"()
    set rx371_cur, rx371_start[0]
    set rx371_tgt, rx371_start[1]
    set rx371_pos, rx371_start[2]
    set rx371_curclass, rx371_start[3]
    set rx371_bstack, rx371_start[4]
    set $I19, rx371_start[5]
    store_lex unicode:"$\x{a2}", rx371_cur
    length rx371_eos, rx371_tgt
    eq $I19, 1, rx371_restart1144
    gt rx371_pos, rx371_eos, rx371_fail1145
    repr_get_attr_int $I11, self, rx371_curclass, "$!from"
    ne $I11, -1, rxscan372_done1151
    goto rxscan372_scan1150
  rxscan372_loop1149:
    inc rx371_pos
    gt rx371_pos, rx371_eos, rx371_fail1145
    repr_bind_attr_int rx371_cur, rx371_curclass, "$!from", rx371_pos
  rxscan372_scan1150:
    nqp_rxmark rx371_bstack, rxscan372_loop1149, rx371_pos, 0
  rxscan372_done1151:
    ge rx371_pos, rx371_eos, rx371_fail1145
    is_cclass $I11, .CCLASS_WORD, rx371_tgt, rx371_pos
    if $I11, rx371_fail1145
    add rx371_pos, 1
    rx371_cur."!cursor_pass"(rx371_pos, "backslash:sym<misc>", 'backtrack'=>1)
    .return (rx371_cur)
  rx371_restart1144:
    repr_get_attr_obj rx371_cstack, rx371_cur, rx371_curclass, "$!cstack"
  rx371_fail1145:
    unless rx371_bstack, rx371_done1143
    pop $I19, rx371_bstack
    if_null rx371_cstack, rx371_cstack_done1148
    unless rx371_cstack, rx371_cstack_done1148
    dec $I19
    set $P11, rx371_cstack[$I19]
  rx371_cstack_done1148:
    pop rx371_rep, rx371_bstack
    pop rx371_pos, rx371_bstack
    pop $I19, rx371_bstack
    lt rx371_pos, -1, rx371_done1143
    lt rx371_pos, 0, rx371_fail1145
    eq $I19, 0, rx371_fail1145
    nqp_islist $I20, rx371_cstack
    unless $I20, rx371_jump1146
    elements $I18, rx371_bstack
    le $I18, 0, rx371_cut1147
    dec $I18
    set $I18, rx371_bstack[$I18]
  rx371_cut1147:
    assign rx371_cstack, $I18
  rx371_jump1146:
    jump $I19
  rx371_done1143:
    rx371_cur."!cursor_fail"()
    .return (rx371_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion" :subid("cuid_86_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 260
    .param pmc self 
    $P5001 = self."!protoregex"("assertion")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_87_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 262
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_88_1367388594.4399' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx373_start
    .local string rx373_tgt
    .local int rx373_pos
    .local int rx373_off
    .local int rx373_eos
    .local int rx373_rep
    .local pmc rx373_cur
    .local pmc rx373_curclass
    .local pmc rx373_bstack
    .local pmc rx373_cstack
    rx373_start = self."!cursor_start_all"()
    set rx373_cur, rx373_start[0]
    set rx373_tgt, rx373_start[1]
    set rx373_pos, rx373_start[2]
    set rx373_curclass, rx373_start[3]
    set rx373_bstack, rx373_start[4]
    set $I19, rx373_start[5]
    store_lex unicode:"$\x{a2}", rx373_cur
    length rx373_eos, rx373_tgt
    eq $I19, 1, rx373_restart1154
    gt rx373_pos, rx373_eos, rx373_fail1155
    repr_get_attr_int $I11, self, rx373_curclass, "$!from"
    ne $I11, -1, rxscan374_done1161
    goto rxscan374_scan1160
  rxscan374_loop1159:
    inc rx373_pos
    gt rx373_pos, rx373_eos, rx373_fail1155
    repr_bind_attr_int rx373_cur, rx373_curclass, "$!from", rx373_pos
  rxscan374_scan1160:
    nqp_rxmark rx373_bstack, rxscan374_loop1159, rx373_pos, 0
  rxscan374_done1161:
    add $I11, rx373_pos, 1
    gt $I11, rx373_eos, rx373_fail1155
    substr $S10, rx373_tgt, rx373_pos, 1
    ne $S10, ucs4:"?", rx373_fail1155
    add rx373_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt375_01163
    nqp_push_label $P11, alt375_11174
    nqp_rxmark rx373_bstack, alt375_end1162, -1, 0
    rx373_cur."!alt"(rx373_pos, "alt_nfa__15_1367388595.58652", $P11)
    goto rx373_fail1155
  alt375_01163:
    .const 'Sub' $P5001 = 'cuid_88_1367388594.4399' 
    capture_lex $P5001
    repr_bind_attr_int rx373_cur, rx373_curclass, "$!pos", rx373_pos
    $P11 = rx373_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx373_curclass, "$!pos"
    lt $I11, 0, rx373_fail1155
    goto alt375_end1162
  alt375_11174:
    repr_bind_attr_int rx373_cur, rx373_curclass, "$!pos", rx373_pos
    $P11 = rx373_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx373_curclass, "$!pos"
    lt $I11, 0, rx373_fail1155
    nqp_rxmark rx373_bstack, rxsubrule378_pass1175, -1, 0
  rxsubrule378_pass1175:
    rx373_cstack = rx373_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx373_pos, $P11, rx373_curclass, "$!pos"
    goto alt375_end1162
  alt375_end1162:
    nqp_rxcommit rx373_bstack, alt375_end1162
    rx373_cur."!cursor_pass"(rx373_pos, "assertion:sym<?>", 'backtrack'=>1)
    .return (rx373_cur)
  rx373_restart1154:
    repr_get_attr_obj rx373_cstack, rx373_cur, rx373_curclass, "$!cstack"
  rx373_fail1155:
    unless rx373_bstack, rx373_done1153
    pop $I19, rx373_bstack
    if_null rx373_cstack, rx373_cstack_done1158
    unless rx373_cstack, rx373_cstack_done1158
    dec $I19
    set $P11, rx373_cstack[$I19]
  rx373_cstack_done1158:
    pop rx373_rep, rx373_bstack
    pop rx373_pos, rx373_bstack
    pop $I19, rx373_bstack
    lt rx373_pos, -1, rx373_done1153
    lt rx373_pos, 0, rx373_fail1155
    eq $I19, 0, rx373_fail1155
    nqp_islist $I20, rx373_cstack
    unless $I20, rx373_jump1156
    elements $I18, rx373_bstack
    le $I18, 0, rx373_cut1157
    dec $I18
    set $I18, rx373_bstack[$I18]
  rx373_cut1157:
    assign rx373_cstack, $I18
  rx373_jump1156:
    jump $I19
  rx373_done1153:
    rx373_cur."!cursor_fail"()
    .return (rx373_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_88_1367388594.4399") :anon :lex :outer("cuid_87_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx376_start
    .local string rx376_tgt
    .local int rx376_pos
    .local int rx376_off
    .local int rx376_eos
    .local int rx376_rep
    .local pmc rx376_cur
    .local pmc rx376_curclass
    .local pmc rx376_bstack
    .local pmc rx376_cstack
    rx376_start = self."!cursor_start_all"()
    set rx376_cur, rx376_start[0]
    set rx376_tgt, rx376_start[1]
    set rx376_pos, rx376_start[2]
    set rx376_curclass, rx376_start[3]
    set rx376_bstack, rx376_start[4]
    set $I19, rx376_start[5]
    store_lex unicode:"$\x{a2}", rx376_cur
    length rx376_eos, rx376_tgt
    eq $I19, 1, rx376_restart1166
    gt rx376_pos, rx376_eos, rx376_fail1167
    repr_get_attr_int $I11, self, rx376_curclass, "$!from"
    ne $I11, -1, rxscan377_done1173
    goto rxscan377_scan1172
  rxscan377_loop1171:
    inc rx376_pos
    gt rx376_pos, rx376_eos, rx376_fail1167
    repr_bind_attr_int rx376_cur, rx376_curclass, "$!from", rx376_pos
  rxscan377_scan1172:
    nqp_rxmark rx376_bstack, rxscan377_loop1171, rx376_pos, 0
  rxscan377_done1173:
    add $I11, rx376_pos, 1
    gt $I11, rx376_eos, rx376_fail1167
    substr $S10, rx376_tgt, rx376_pos, 1
    ne $S10, ucs4:">", rx376_fail1167
    add rx376_pos, 1
    rx376_cur."!cursor_pass"(rx376_pos, 'backtrack'=>1)
    .return (rx376_cur)
  rx376_restart1166:
    repr_get_attr_obj rx376_cstack, rx376_cur, rx376_curclass, "$!cstack"
  rx376_fail1167:
    unless rx376_bstack, rx376_done1165
    pop $I19, rx376_bstack
    if_null rx376_cstack, rx376_cstack_done1170
    unless rx376_cstack, rx376_cstack_done1170
    dec $I19
    set $P11, rx376_cstack[$I19]
  rx376_cstack_done1170:
    pop rx376_rep, rx376_bstack
    pop rx376_pos, rx376_bstack
    pop $I19, rx376_bstack
    lt rx376_pos, -1, rx376_done1165
    lt rx376_pos, 0, rx376_fail1167
    eq $I19, 0, rx376_fail1167
    nqp_islist $I20, rx376_cstack
    unless $I20, rx376_jump1168
    elements $I18, rx376_bstack
    le $I18, 0, rx376_cut1169
    dec $I18
    set $I18, rx376_bstack[$I18]
  rx376_cut1169:
    assign rx376_cstack, $I18
  rx376_jump1168:
    jump $I19
  rx376_done1165:
    rx376_cur."!cursor_fail"()
    .return (rx376_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_89_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 263
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_90_1367388594.4399' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx379_start
    .local string rx379_tgt
    .local int rx379_pos
    .local int rx379_off
    .local int rx379_eos
    .local int rx379_rep
    .local pmc rx379_cur
    .local pmc rx379_curclass
    .local pmc rx379_bstack
    .local pmc rx379_cstack
    rx379_start = self."!cursor_start_all"()
    set rx379_cur, rx379_start[0]
    set rx379_tgt, rx379_start[1]
    set rx379_pos, rx379_start[2]
    set rx379_curclass, rx379_start[3]
    set rx379_bstack, rx379_start[4]
    set $I19, rx379_start[5]
    store_lex unicode:"$\x{a2}", rx379_cur
    length rx379_eos, rx379_tgt
    eq $I19, 1, rx379_restart1178
    gt rx379_pos, rx379_eos, rx379_fail1179
    repr_get_attr_int $I11, self, rx379_curclass, "$!from"
    ne $I11, -1, rxscan380_done1185
    goto rxscan380_scan1184
  rxscan380_loop1183:
    inc rx379_pos
    gt rx379_pos, rx379_eos, rx379_fail1179
    repr_bind_attr_int rx379_cur, rx379_curclass, "$!from", rx379_pos
  rxscan380_scan1184:
    nqp_rxmark rx379_bstack, rxscan380_loop1183, rx379_pos, 0
  rxscan380_done1185:
    add $I11, rx379_pos, 1
    gt $I11, rx379_eos, rx379_fail1179
    substr $S10, rx379_tgt, rx379_pos, 1
    ne $S10, ucs4:"!", rx379_fail1179
    add rx379_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt381_01187
    nqp_push_label $P11, alt381_11198
    nqp_rxmark rx379_bstack, alt381_end1186, -1, 0
    rx379_cur."!alt"(rx379_pos, "alt_nfa__16_1367388595.5999", $P11)
    goto rx379_fail1179
  alt381_01187:
    .const 'Sub' $P5001 = 'cuid_90_1367388594.4399' 
    capture_lex $P5001
    repr_bind_attr_int rx379_cur, rx379_curclass, "$!pos", rx379_pos
    $P11 = rx379_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx379_curclass, "$!pos"
    lt $I11, 0, rx379_fail1179
    goto alt381_end1186
  alt381_11198:
    repr_bind_attr_int rx379_cur, rx379_curclass, "$!pos", rx379_pos
    $P11 = rx379_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx379_curclass, "$!pos"
    lt $I11, 0, rx379_fail1179
    nqp_rxmark rx379_bstack, rxsubrule384_pass1199, -1, 0
  rxsubrule384_pass1199:
    rx379_cstack = rx379_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx379_pos, $P11, rx379_curclass, "$!pos"
    goto alt381_end1186
  alt381_end1186:
    nqp_rxcommit rx379_bstack, alt381_end1186
    rx379_cur."!cursor_pass"(rx379_pos, "assertion:sym<!>", 'backtrack'=>1)
    .return (rx379_cur)
  rx379_restart1178:
    repr_get_attr_obj rx379_cstack, rx379_cur, rx379_curclass, "$!cstack"
  rx379_fail1179:
    unless rx379_bstack, rx379_done1177
    pop $I19, rx379_bstack
    if_null rx379_cstack, rx379_cstack_done1182
    unless rx379_cstack, rx379_cstack_done1182
    dec $I19
    set $P11, rx379_cstack[$I19]
  rx379_cstack_done1182:
    pop rx379_rep, rx379_bstack
    pop rx379_pos, rx379_bstack
    pop $I19, rx379_bstack
    lt rx379_pos, -1, rx379_done1177
    lt rx379_pos, 0, rx379_fail1179
    eq $I19, 0, rx379_fail1179
    nqp_islist $I20, rx379_cstack
    unless $I20, rx379_jump1180
    elements $I18, rx379_bstack
    le $I18, 0, rx379_cut1181
    dec $I18
    set $I18, rx379_bstack[$I18]
  rx379_cut1181:
    assign rx379_cstack, $I18
  rx379_jump1180:
    jump $I19
  rx379_done1177:
    rx379_cur."!cursor_fail"()
    .return (rx379_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_90_1367388594.4399") :anon :lex :outer("cuid_89_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx382_start
    .local string rx382_tgt
    .local int rx382_pos
    .local int rx382_off
    .local int rx382_eos
    .local int rx382_rep
    .local pmc rx382_cur
    .local pmc rx382_curclass
    .local pmc rx382_bstack
    .local pmc rx382_cstack
    rx382_start = self."!cursor_start_all"()
    set rx382_cur, rx382_start[0]
    set rx382_tgt, rx382_start[1]
    set rx382_pos, rx382_start[2]
    set rx382_curclass, rx382_start[3]
    set rx382_bstack, rx382_start[4]
    set $I19, rx382_start[5]
    store_lex unicode:"$\x{a2}", rx382_cur
    length rx382_eos, rx382_tgt
    eq $I19, 1, rx382_restart1190
    gt rx382_pos, rx382_eos, rx382_fail1191
    repr_get_attr_int $I11, self, rx382_curclass, "$!from"
    ne $I11, -1, rxscan383_done1197
    goto rxscan383_scan1196
  rxscan383_loop1195:
    inc rx382_pos
    gt rx382_pos, rx382_eos, rx382_fail1191
    repr_bind_attr_int rx382_cur, rx382_curclass, "$!from", rx382_pos
  rxscan383_scan1196:
    nqp_rxmark rx382_bstack, rxscan383_loop1195, rx382_pos, 0
  rxscan383_done1197:
    add $I11, rx382_pos, 1
    gt $I11, rx382_eos, rx382_fail1191
    substr $S10, rx382_tgt, rx382_pos, 1
    ne $S10, ucs4:">", rx382_fail1191
    add rx382_pos, 1
    rx382_cur."!cursor_pass"(rx382_pos, 'backtrack'=>1)
    .return (rx382_cur)
  rx382_restart1190:
    repr_get_attr_obj rx382_cstack, rx382_cur, rx382_curclass, "$!cstack"
  rx382_fail1191:
    unless rx382_bstack, rx382_done1189
    pop $I19, rx382_bstack
    if_null rx382_cstack, rx382_cstack_done1194
    unless rx382_cstack, rx382_cstack_done1194
    dec $I19
    set $P11, rx382_cstack[$I19]
  rx382_cstack_done1194:
    pop rx382_rep, rx382_bstack
    pop rx382_pos, rx382_bstack
    pop $I19, rx382_bstack
    lt rx382_pos, -1, rx382_done1189
    lt rx382_pos, 0, rx382_fail1191
    eq $I19, 0, rx382_fail1191
    nqp_islist $I20, rx382_cstack
    unless $I20, rx382_jump1192
    elements $I18, rx382_bstack
    le $I18, 0, rx382_cut1193
    dec $I18
    set $I18, rx382_bstack[$I18]
  rx382_cut1193:
    assign rx382_cstack, $I18
  rx382_jump1192:
    jump $I19
  rx382_done1189:
    rx382_cur."!cursor_fail"()
    .return (rx382_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<|>" :subid("cuid_91_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 264
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx385_start
    .local string rx385_tgt
    .local int rx385_pos
    .local int rx385_off
    .local int rx385_eos
    .local int rx385_rep
    .local pmc rx385_cur
    .local pmc rx385_curclass
    .local pmc rx385_bstack
    .local pmc rx385_cstack
    rx385_start = self."!cursor_start_all"()
    set rx385_cur, rx385_start[0]
    set rx385_tgt, rx385_start[1]
    set rx385_pos, rx385_start[2]
    set rx385_curclass, rx385_start[3]
    set rx385_bstack, rx385_start[4]
    set $I19, rx385_start[5]
    store_lex unicode:"$\x{a2}", rx385_cur
    length rx385_eos, rx385_tgt
    eq $I19, 1, rx385_restart1202
    gt rx385_pos, rx385_eos, rx385_fail1203
    repr_get_attr_int $I11, self, rx385_curclass, "$!from"
    ne $I11, -1, rxscan386_done1209
    goto rxscan386_scan1208
  rxscan386_loop1207:
    inc rx385_pos
    gt rx385_pos, rx385_eos, rx385_fail1203
    repr_bind_attr_int rx385_cur, rx385_curclass, "$!from", rx385_pos
  rxscan386_scan1208:
    nqp_rxmark rx385_bstack, rxscan386_loop1207, rx385_pos, 0
  rxscan386_done1209:
    add $I11, rx385_pos, 1
    gt $I11, rx385_eos, rx385_fail1203
    substr $S10, rx385_tgt, rx385_pos, 1
    ne $S10, ucs4:"|", rx385_fail1203
    add rx385_pos, 1
    repr_bind_attr_int rx385_cur, rx385_curclass, "$!pos", rx385_pos
    $P11 = rx385_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx385_curclass, "$!pos"
    lt $I11, 0, rx385_fail1203
    nqp_rxmark rx385_bstack, rxsubrule387_pass1210, -1, 0
  rxsubrule387_pass1210:
    rx385_cstack = rx385_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx385_pos, $P11, rx385_curclass, "$!pos"
    rx385_cur."!cursor_pass"(rx385_pos, "assertion:sym<|>", 'backtrack'=>1)
    .return (rx385_cur)
  rx385_restart1202:
    repr_get_attr_obj rx385_cstack, rx385_cur, rx385_curclass, "$!cstack"
  rx385_fail1203:
    unless rx385_bstack, rx385_done1201
    pop $I19, rx385_bstack
    if_null rx385_cstack, rx385_cstack_done1206
    unless rx385_cstack, rx385_cstack_done1206
    dec $I19
    set $P11, rx385_cstack[$I19]
  rx385_cstack_done1206:
    pop rx385_rep, rx385_bstack
    pop rx385_pos, rx385_bstack
    pop $I19, rx385_bstack
    lt rx385_pos, -1, rx385_done1201
    lt rx385_pos, 0, rx385_fail1203
    eq $I19, 0, rx385_fail1203
    nqp_islist $I20, rx385_cstack
    unless $I20, rx385_jump1204
    elements $I18, rx385_bstack
    le $I18, 0, rx385_cut1205
    dec $I18
    set $I18, rx385_bstack[$I18]
  rx385_cut1205:
    assign rx385_cstack, $I18
  rx385_jump1204:
    jump $I19
  rx385_done1201:
    rx385_cur."!cursor_fail"()
    .return (rx385_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<method>" :subid("cuid_92_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 266
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx388_start
    .local string rx388_tgt
    .local int rx388_pos
    .local int rx388_off
    .local int rx388_eos
    .local int rx388_rep
    .local pmc rx388_cur
    .local pmc rx388_curclass
    .local pmc rx388_bstack
    .local pmc rx388_cstack
    rx388_start = self."!cursor_start_all"()
    set rx388_cur, rx388_start[0]
    set rx388_tgt, rx388_start[1]
    set rx388_pos, rx388_start[2]
    set rx388_curclass, rx388_start[3]
    set rx388_bstack, rx388_start[4]
    set $I19, rx388_start[5]
    store_lex unicode:"$\x{a2}", rx388_cur
    length rx388_eos, rx388_tgt
    eq $I19, 1, rx388_restart1213
    gt rx388_pos, rx388_eos, rx388_fail1214
    repr_get_attr_int $I11, self, rx388_curclass, "$!from"
    ne $I11, -1, rxscan389_done1220
    goto rxscan389_scan1219
  rxscan389_loop1218:
    inc rx388_pos
    gt rx388_pos, rx388_eos, rx388_fail1214
    repr_bind_attr_int rx388_cur, rx388_curclass, "$!from", rx388_pos
  rxscan389_scan1219:
    nqp_rxmark rx388_bstack, rxscan389_loop1218, rx388_pos, 0
  rxscan389_done1220:
    add $I11, rx388_pos, 1
    gt $I11, rx388_eos, rx388_fail1214
    substr $S10, rx388_tgt, rx388_pos, 1
    ne $S10, ucs4:".", rx388_fail1214
    add rx388_pos, 1
    repr_bind_attr_int rx388_cur, rx388_curclass, "$!pos", rx388_pos
    $P11 = rx388_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx388_curclass, "$!pos"
    lt $I11, 0, rx388_fail1214
    nqp_rxmark rx388_bstack, rxsubrule390_pass1221, -1, 0
  rxsubrule390_pass1221:
    rx388_cstack = rx388_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx388_pos, $P11, rx388_curclass, "$!pos"
    rx388_cur."!cursor_pass"(rx388_pos, "assertion:sym<method>", 'backtrack'=>1)
    .return (rx388_cur)
  rx388_restart1213:
    repr_get_attr_obj rx388_cstack, rx388_cur, rx388_curclass, "$!cstack"
  rx388_fail1214:
    unless rx388_bstack, rx388_done1212
    pop $I19, rx388_bstack
    if_null rx388_cstack, rx388_cstack_done1217
    unless rx388_cstack, rx388_cstack_done1217
    dec $I19
    set $P11, rx388_cstack[$I19]
  rx388_cstack_done1217:
    pop rx388_rep, rx388_bstack
    pop rx388_pos, rx388_bstack
    pop $I19, rx388_bstack
    lt rx388_pos, -1, rx388_done1212
    lt rx388_pos, 0, rx388_fail1214
    eq $I19, 0, rx388_fail1214
    nqp_islist $I20, rx388_cstack
    unless $I20, rx388_jump1215
    elements $I18, rx388_bstack
    le $I18, 0, rx388_cut1216
    dec $I18
    set $I18, rx388_bstack[$I18]
  rx388_cut1216:
    assign rx388_cstack, $I18
  rx388_jump1215:
    jump $I19
  rx388_done1212:
    rx388_cur."!cursor_fail"()
    .return (rx388_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_93_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 270
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_94_1367388594.4399' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx391_start
    .local string rx391_tgt
    .local int rx391_pos
    .local int rx391_off
    .local int rx391_eos
    .local int rx391_rep
    .local pmc rx391_cur
    .local pmc rx391_curclass
    .local pmc rx391_bstack
    .local pmc rx391_cstack
    rx391_start = self."!cursor_start_all"()
    set rx391_cur, rx391_start[0]
    set rx391_tgt, rx391_start[1]
    set rx391_pos, rx391_start[2]
    set rx391_curclass, rx391_start[3]
    set rx391_bstack, rx391_start[4]
    set $I19, rx391_start[5]
    store_lex unicode:"$\x{a2}", rx391_cur
    length rx391_eos, rx391_tgt
    eq $I19, 1, rx391_restart1224
    gt rx391_pos, rx391_eos, rx391_fail1225
    repr_get_attr_int $I11, self, rx391_curclass, "$!from"
    ne $I11, -1, rxscan392_done1231
    goto rxscan392_scan1230
  rxscan392_loop1229:
    inc rx391_pos
    gt rx391_pos, rx391_eos, rx391_fail1225
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!from", rx391_pos
  rxscan392_scan1230:
    nqp_rxmark rx391_bstack, rxscan392_loop1229, rx391_pos, 0
  rxscan392_done1231:
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!pos", rx391_pos
    $P11 = rx391_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx391_curclass, "$!pos"
    lt $I11, 0, rx391_fail1225
    nqp_rxmark rx391_bstack, rxsubrule393_pass1232, -1, 0
  rxsubrule393_pass1232:
    rx391_cstack = rx391_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx391_pos, $P11, rx391_curclass, "$!pos"
    nqp_rxmark rx391_bstack, rxquantr394_done1234, rx391_pos, 0
  rxquantr394_loop1233:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt395_01236
    nqp_push_label $P11, alt395_11247
    nqp_push_label $P11, alt395_21249
    nqp_push_label $P11, alt395_31251
    nqp_push_label $P11, alt395_41253
    nqp_rxmark rx391_bstack, alt395_end1235, -1, 0
    rx391_cur."!alt"(rx391_pos, "alt_nfa__17_1367388595.64171", $P11)
    goto rx391_fail1225
  alt395_01236:
    .const 'Sub' $P5001 = 'cuid_94_1367388594.4399' 
    capture_lex $P5001
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!pos", rx391_pos
    $P11 = rx391_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx391_curclass, "$!pos"
    lt $I11, 0, rx391_fail1225
    goto alt395_end1235
  alt395_11247:
    add $I11, rx391_pos, 1
    gt $I11, rx391_eos, rx391_fail1225
    substr $S10, rx391_tgt, rx391_pos, 1
    ne $S10, ucs4:"=", rx391_fail1225
    add rx391_pos, 1
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!pos", rx391_pos
    $P11 = rx391_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx391_curclass, "$!pos"
    lt $I11, 0, rx391_fail1225
    nqp_rxmark rx391_bstack, rxsubrule398_pass1248, -1, 0
  rxsubrule398_pass1248:
    rx391_cstack = rx391_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx391_pos, $P11, rx391_curclass, "$!pos"
    goto alt395_end1235
  alt395_21249:
    add $I11, rx391_pos, 1
    gt $I11, rx391_eos, rx391_fail1225
    substr $S10, rx391_tgt, rx391_pos, 1
    ne $S10, ucs4:":", rx391_fail1225
    add rx391_pos, 1
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!pos", rx391_pos
    $P11 = rx391_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx391_curclass, "$!pos"
    lt $I11, 0, rx391_fail1225
    nqp_rxmark rx391_bstack, rxsubrule399_pass1250, -1, 0
  rxsubrule399_pass1250:
    rx391_cstack = rx391_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx391_pos, $P11, rx391_curclass, "$!pos"
    goto alt395_end1235
  alt395_31251:
    add $I11, rx391_pos, 1
    gt $I11, rx391_eos, rx391_fail1225
    substr $S10, rx391_tgt, rx391_pos, 1
    ne $S10, ucs4:"(", rx391_fail1225
    add rx391_pos, 1
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!pos", rx391_pos
    $P11 = rx391_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx391_curclass, "$!pos"
    lt $I11, 0, rx391_fail1225
    nqp_rxmark rx391_bstack, rxsubrule400_pass1252, -1, 0
  rxsubrule400_pass1252:
    rx391_cstack = rx391_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx391_pos, $P11, rx391_curclass, "$!pos"
    add $I11, rx391_pos, 1
    gt $I11, rx391_eos, rx391_fail1225
    substr $S10, rx391_tgt, rx391_pos, 1
    ne $S10, ucs4:")", rx391_fail1225
    add rx391_pos, 1
    goto alt395_end1235
  alt395_41253:
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!pos", rx391_pos
    $P11 = rx391_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx391_curclass, "$!pos"
    lt $I11, 0, rx391_fail1225
    repr_get_attr_int rx391_pos, $P11, rx391_curclass, "$!pos"
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!pos", rx391_pos
    $P11 = rx391_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx391_curclass, "$!pos"
    lt $I11, 0, rx391_fail1225
    nqp_rxmark rx391_bstack, rxsubrule402_pass1255, -1, 0
  rxsubrule402_pass1255:
    rx391_cstack = rx391_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx391_pos, $P11, rx391_curclass, "$!pos"
    goto alt395_end1235
  alt395_end1235:
    nqp_rxpeek $I19, rx391_bstack, rxquantr394_done1234
    inc $I19
    inc $I19
    set rx391_rep, rx391_bstack[$I19]
    nqp_rxcommit rx391_bstack, rxquantr394_done1234
    inc rx391_rep
  rxquantr394_done1234:
    rx391_cur."!cursor_pass"(rx391_pos, "assertion:sym<name>", 'backtrack'=>1)
    .return (rx391_cur)
  rx391_restart1224:
    repr_get_attr_obj rx391_cstack, rx391_cur, rx391_curclass, "$!cstack"
  rx391_fail1225:
    unless rx391_bstack, rx391_done1223
    pop $I19, rx391_bstack
    if_null rx391_cstack, rx391_cstack_done1228
    unless rx391_cstack, rx391_cstack_done1228
    dec $I19
    set $P11, rx391_cstack[$I19]
  rx391_cstack_done1228:
    pop rx391_rep, rx391_bstack
    pop rx391_pos, rx391_bstack
    pop $I19, rx391_bstack
    lt rx391_pos, -1, rx391_done1223
    lt rx391_pos, 0, rx391_fail1225
    eq $I19, 0, rx391_fail1225
    nqp_islist $I20, rx391_cstack
    unless $I20, rx391_jump1226
    elements $I18, rx391_bstack
    le $I18, 0, rx391_cut1227
    dec $I18
    set $I18, rx391_bstack[$I18]
  rx391_cut1227:
    assign rx391_cstack, $I18
  rx391_jump1226:
    jump $I19
  rx391_done1223:
    rx391_cur."!cursor_fail"()
    .return (rx391_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_94_1367388594.4399") :anon :lex :outer("cuid_93_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx396_start
    .local string rx396_tgt
    .local int rx396_pos
    .local int rx396_off
    .local int rx396_eos
    .local int rx396_rep
    .local pmc rx396_cur
    .local pmc rx396_curclass
    .local pmc rx396_bstack
    .local pmc rx396_cstack
    rx396_start = self."!cursor_start_all"()
    set rx396_cur, rx396_start[0]
    set rx396_tgt, rx396_start[1]
    set rx396_pos, rx396_start[2]
    set rx396_curclass, rx396_start[3]
    set rx396_bstack, rx396_start[4]
    set $I19, rx396_start[5]
    store_lex unicode:"$\x{a2}", rx396_cur
    length rx396_eos, rx396_tgt
    eq $I19, 1, rx396_restart1239
    gt rx396_pos, rx396_eos, rx396_fail1240
    repr_get_attr_int $I11, self, rx396_curclass, "$!from"
    ne $I11, -1, rxscan397_done1246
    goto rxscan397_scan1245
  rxscan397_loop1244:
    inc rx396_pos
    gt rx396_pos, rx396_eos, rx396_fail1240
    repr_bind_attr_int rx396_cur, rx396_curclass, "$!from", rx396_pos
  rxscan397_scan1245:
    nqp_rxmark rx396_bstack, rxscan397_loop1244, rx396_pos, 0
  rxscan397_done1246:
    add $I11, rx396_pos, 1
    gt $I11, rx396_eos, rx396_fail1240
    substr $S10, rx396_tgt, rx396_pos, 1
    ne $S10, ucs4:">", rx396_fail1240
    add rx396_pos, 1
    rx396_cur."!cursor_pass"(rx396_pos, 'backtrack'=>1)
    .return (rx396_cur)
  rx396_restart1239:
    repr_get_attr_obj rx396_cstack, rx396_cur, rx396_curclass, "$!cstack"
  rx396_fail1240:
    unless rx396_bstack, rx396_done1238
    pop $I19, rx396_bstack
    if_null rx396_cstack, rx396_cstack_done1243
    unless rx396_cstack, rx396_cstack_done1243
    dec $I19
    set $P11, rx396_cstack[$I19]
  rx396_cstack_done1243:
    pop rx396_rep, rx396_bstack
    pop rx396_pos, rx396_bstack
    pop $I19, rx396_bstack
    lt rx396_pos, -1, rx396_done1238
    lt rx396_pos, 0, rx396_fail1240
    eq $I19, 0, rx396_fail1240
    nqp_islist $I20, rx396_cstack
    unless $I20, rx396_jump1241
    elements $I18, rx396_bstack
    le $I18, 0, rx396_cut1242
    dec $I18
    set $I18, rx396_bstack[$I18]
  rx396_cut1242:
    assign rx396_cstack, $I18
  rx396_jump1241:
    jump $I19
  rx396_done1238:
    rx396_cur."!cursor_fail"()
    .return (rx396_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<[>" :subid("cuid_95_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 281
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_96_1367388594.4399' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx403_start
    .local string rx403_tgt
    .local int rx403_pos
    .local int rx403_off
    .local int rx403_eos
    .local int rx403_rep
    .local pmc rx403_cur
    .local pmc rx403_curclass
    .local pmc rx403_bstack
    .local pmc rx403_cstack
    rx403_start = self."!cursor_start_all"()
    set rx403_cur, rx403_start[0]
    set rx403_tgt, rx403_start[1]
    set rx403_pos, rx403_start[2]
    set rx403_curclass, rx403_start[3]
    set rx403_bstack, rx403_start[4]
    set $I19, rx403_start[5]
    store_lex unicode:"$\x{a2}", rx403_cur
    length rx403_eos, rx403_tgt
    eq $I19, 1, rx403_restart1258
    gt rx403_pos, rx403_eos, rx403_fail1259
    repr_get_attr_int $I11, self, rx403_curclass, "$!from"
    ne $I11, -1, rxscan404_done1265
    goto rxscan404_scan1264
  rxscan404_loop1263:
    inc rx403_pos
    gt rx403_pos, rx403_eos, rx403_fail1259
    repr_bind_attr_int rx403_cur, rx403_curclass, "$!from", rx403_pos
  rxscan404_scan1264:
    nqp_rxmark rx403_bstack, rxscan404_loop1263, rx403_pos, 0
  rxscan404_done1265:
    .const 'Sub' $P5001 = 'cuid_96_1367388594.4399' 
    capture_lex $P5001
    repr_bind_attr_int rx403_cur, rx403_curclass, "$!pos", rx403_pos
    $P11 = rx403_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx403_curclass, "$!pos"
    lt $I11, 0, rx403_fail1259
    nqp_rxmark rx403_bstack, rxquantr408_done1282, -1, 0
  rxquantr408_loop1281:
    repr_bind_attr_int rx403_cur, rx403_curclass, "$!pos", rx403_pos
    $P11 = rx403_cur."cclass_elem"()
    repr_get_attr_int $I11, $P11, rx403_curclass, "$!pos"
    lt $I11, 0, rx403_fail1259
    goto rxsubrule409_pass1283
  rxsubrule409_back1284:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx403_curclass, "$!pos"
    lt $I11, 0, rx403_fail1259
  rxsubrule409_pass1283:
    rx403_cstack = rx403_cur."!cursor_capture"($P11, "cclass_elem")
    set_addr $I11, rxsubrule409_back1284
    push rx403_bstack, $I11
    push rx403_bstack, 0
    push rx403_bstack, rx403_pos
    elements $I11, rx403_cstack
    push rx403_bstack, $I11
    repr_get_attr_int rx403_pos, $P11, rx403_curclass, "$!pos"
    nqp_rxpeek $I19, rx403_bstack, rxquantr408_done1282
    inc $I19
    inc $I19
    set rx403_rep, rx403_bstack[$I19]
    nqp_rxcommit rx403_bstack, rxquantr408_done1282
    inc rx403_rep
    nqp_rxmark rx403_bstack, rxquantr408_done1282, rx403_pos, rx403_rep
    goto rxquantr408_loop1281
  rxquantr408_done1282:
    rx403_cur."!cursor_pass"(rx403_pos, "assertion:sym<[>", 'backtrack'=>1)
    .return (rx403_cur)
  rx403_restart1258:
    repr_get_attr_obj rx403_cstack, rx403_cur, rx403_curclass, "$!cstack"
  rx403_fail1259:
    unless rx403_bstack, rx403_done1257
    pop $I19, rx403_bstack
    if_null rx403_cstack, rx403_cstack_done1262
    unless rx403_cstack, rx403_cstack_done1262
    dec $I19
    set $P11, rx403_cstack[$I19]
  rx403_cstack_done1262:
    pop rx403_rep, rx403_bstack
    pop rx403_pos, rx403_bstack
    pop $I19, rx403_bstack
    lt rx403_pos, -1, rx403_done1257
    lt rx403_pos, 0, rx403_fail1259
    eq $I19, 0, rx403_fail1259
    nqp_islist $I20, rx403_cstack
    unless $I20, rx403_jump1260
    elements $I18, rx403_bstack
    le $I18, 0, rx403_cut1261
    dec $I18
    set $I18, rx403_bstack[$I18]
  rx403_cut1261:
    assign rx403_cstack, $I18
  rx403_jump1260:
    jump $I19
  rx403_done1257:
    rx403_cur."!cursor_fail"()
    .return (rx403_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_96_1367388594.4399") :anon :lex :outer("cuid_95_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx405_start
    .local string rx405_tgt
    .local int rx405_pos
    .local int rx405_off
    .local int rx405_eos
    .local int rx405_rep
    .local pmc rx405_cur
    .local pmc rx405_curclass
    .local pmc rx405_bstack
    .local pmc rx405_cstack
    rx405_start = self."!cursor_start_all"()
    set rx405_cur, rx405_start[0]
    set rx405_tgt, rx405_start[1]
    set rx405_pos, rx405_start[2]
    set rx405_curclass, rx405_start[3]
    set rx405_bstack, rx405_start[4]
    set $I19, rx405_start[5]
    store_lex unicode:"$\x{a2}", rx405_cur
    length rx405_eos, rx405_tgt
    eq $I19, 1, rx405_restart1268
    gt rx405_pos, rx405_eos, rx405_fail1269
    repr_get_attr_int $I11, self, rx405_curclass, "$!from"
    ne $I11, -1, rxscan406_done1275
    goto rxscan406_scan1274
  rxscan406_loop1273:
    inc rx405_pos
    gt rx405_pos, rx405_eos, rx405_fail1269
    repr_bind_attr_int rx405_cur, rx405_curclass, "$!from", rx405_pos
  rxscan406_scan1274:
    nqp_rxmark rx405_bstack, rxscan406_loop1273, rx405_pos, 0
  rxscan406_done1275:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt407_01277
    nqp_push_label $P11, alt407_11278
    nqp_push_label $P11, alt407_21279
    nqp_push_label $P11, alt407_31280
    nqp_rxmark rx405_bstack, alt407_end1276, -1, 0
    rx405_cur."!alt"(rx405_pos, "alt_nfa__18_1367388595.6532", $P11)
    goto rx405_fail1269
  alt407_01277:
    add $I11, rx405_pos, 1
    gt $I11, rx405_eos, rx405_fail1269
    substr $S10, rx405_tgt, rx405_pos, 1
    ne $S10, ucs4:"[", rx405_fail1269
    add rx405_pos, 1
    goto alt407_end1276
  alt407_11278:
    add $I11, rx405_pos, 1
    gt $I11, rx405_eos, rx405_fail1269
    substr $S10, rx405_tgt, rx405_pos, 1
    ne $S10, ucs4:"+", rx405_fail1269
    add rx405_pos, 1
    goto alt407_end1276
  alt407_21279:
    add $I11, rx405_pos, 1
    gt $I11, rx405_eos, rx405_fail1269
    substr $S10, rx405_tgt, rx405_pos, 1
    ne $S10, ucs4:"-", rx405_fail1269
    add rx405_pos, 1
    goto alt407_end1276
  alt407_31280:
    add $I11, rx405_pos, 1
    gt $I11, rx405_eos, rx405_fail1269
    substr $S10, rx405_tgt, rx405_pos, 1
    ne $S10, ucs4:":", rx405_fail1269
    add rx405_pos, 1
    goto alt407_end1276
  alt407_end1276:
    rx405_cur."!cursor_pass"(rx405_pos, 'backtrack'=>1)
    .return (rx405_cur)
  rx405_restart1268:
    repr_get_attr_obj rx405_cstack, rx405_cur, rx405_curclass, "$!cstack"
  rx405_fail1269:
    unless rx405_bstack, rx405_done1267
    pop $I19, rx405_bstack
    if_null rx405_cstack, rx405_cstack_done1272
    unless rx405_cstack, rx405_cstack_done1272
    dec $I19
    set $P11, rx405_cstack[$I19]
  rx405_cstack_done1272:
    pop rx405_rep, rx405_bstack
    pop rx405_pos, rx405_bstack
    pop $I19, rx405_bstack
    lt rx405_pos, -1, rx405_done1267
    lt rx405_pos, 0, rx405_fail1269
    eq $I19, 0, rx405_fail1269
    nqp_islist $I20, rx405_cstack
    unless $I20, rx405_jump1270
    elements $I18, rx405_bstack
    le $I18, 0, rx405_cut1271
    dec $I18
    set $I18, rx405_bstack[$I18]
  rx405_cut1271:
    assign rx405_cstack, $I18
  rx405_jump1270:
    jump $I19
  rx405_done1267:
    rx405_cur."!cursor_fail"()
    .return (rx405_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_elem" :subid("cuid_97_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 283
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_103_1367388594.4399' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx410_start
    .local string rx410_tgt
    .local int rx410_pos
    .local int rx410_off
    .local int rx410_eos
    .local int rx410_rep
    .local pmc rx410_cur
    .local pmc rx410_curclass
    .local pmc rx410_bstack
    .local pmc rx410_cstack
    rx410_start = self."!cursor_start_all"()
    set rx410_cur, rx410_start[0]
    set rx410_tgt, rx410_start[1]
    set rx410_pos, rx410_start[2]
    set rx410_curclass, rx410_start[3]
    set rx410_bstack, rx410_start[4]
    set $I19, rx410_start[5]
    store_lex unicode:"$\x{a2}", rx410_cur
    length rx410_eos, rx410_tgt
    eq $I19, 1, rx410_restart1287
    gt rx410_pos, rx410_eos, rx410_fail1288
    repr_get_attr_int $I11, self, rx410_curclass, "$!from"
    ne $I11, -1, rxscan411_done1294
    goto rxscan411_scan1293
  rxscan411_loop1292:
    inc rx410_pos
    gt rx410_pos, rx410_eos, rx410_fail1288
    repr_bind_attr_int rx410_cur, rx410_curclass, "$!from", rx410_pos
  rxscan411_scan1293:
    nqp_rxmark rx410_bstack, rxscan411_loop1292, rx410_pos, 0
  rxscan411_done1294:
    nqp_rxmark rx410_bstack, rxcap412_fail1296, rx410_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt413_01298
    nqp_push_label $P11, alt413_11299
    nqp_push_label $P11, alt413_21300
    nqp_rxmark rx410_bstack, alt413_end1297, -1, 0
    rx410_cur."!alt"(rx410_pos, "alt_nfa__19_1367388595.82183", $P11)
    goto rx410_fail1288
  alt413_01298:
    add $I11, rx410_pos, 1
    gt $I11, rx410_eos, rx410_fail1288
    substr $S10, rx410_tgt, rx410_pos, 1
    ne $S10, ucs4:"+", rx410_fail1288
    add rx410_pos, 1
    goto alt413_end1297
  alt413_11299:
    add $I11, rx410_pos, 1
    gt $I11, rx410_eos, rx410_fail1288
    substr $S10, rx410_tgt, rx410_pos, 1
    ne $S10, ucs4:"-", rx410_fail1288
    add rx410_pos, 1
    goto alt413_end1297
  alt413_21300:
    goto alt413_end1297
  alt413_end1297:
    nqp_rxcommit rx410_bstack, alt413_end1297
    nqp_rxpeek $I19, rx410_bstack, rxcap412_fail1296
    inc $I19
    set $I11, rx410_bstack[$I19]
    repr_bind_attr_int rx410_cur, rx410_curclass, "$!pos", rx410_pos
    $P11 = rx410_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx410_pos)
    rx410_cstack = rx410_cur."!cursor_capture"($P11, "sign")
    goto rxcap412_done1295
  rxcap412_fail1296:
    goto rx410_fail1288
  rxcap412_done1295:
    nqp_rxmark rx410_bstack, rxquantr415_done1303, rx410_pos, 0
  rxquantr415_loop1302:
    repr_bind_attr_int rx410_cur, rx410_curclass, "$!pos", rx410_pos
    $P11 = rx410_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx410_curclass, "$!pos"
    lt $I11, 0, rx410_fail1288
    goto rxsubrule416_pass1304
  rxsubrule416_back1305:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx410_curclass, "$!pos"
    lt $I11, 0, rx410_fail1288
  rxsubrule416_pass1304:
    rx410_cstack = rx410_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule416_back1305
    push rx410_bstack, $I11
    push rx410_bstack, 0
    push rx410_bstack, rx410_pos
    elements $I11, rx410_cstack
    push rx410_bstack, $I11
    repr_get_attr_int rx410_pos, $P11, rx410_curclass, "$!pos"
    nqp_rxpeek $I19, rx410_bstack, rxquantr415_done1303
    inc $I19
    inc $I19
    set rx410_rep, rx410_bstack[$I19]
    nqp_rxcommit rx410_bstack, rxquantr415_done1303
    inc rx410_rep
  rxquantr415_done1303:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt417_01307
    nqp_push_label $P11, alt417_11406
    nqp_push_label $P11, alt417_21411
    nqp_rxmark rx410_bstack, alt417_end1306, -1, 0
    rx410_cur."!alt"(rx410_pos, "alt_nfa__21_1367388595.82285", $P11)
    goto rx410_fail1288
  alt417_01307:
    add $I11, rx410_pos, 1
    gt $I11, rx410_eos, rx410_fail1288
    substr $S10, rx410_tgt, rx410_pos, 1
    ne $S10, ucs4:"[", rx410_fail1288
    add rx410_pos, 1
    nqp_rxmark rx410_bstack, rxquantr418_done1309, rx410_pos, 0
  rxquantr418_loop1308:
    .const 'Sub' $P5001 = 'cuid_103_1367388594.4399' 
    capture_lex $P5001
    repr_bind_attr_int rx410_cur, rx410_curclass, "$!pos", rx410_pos
    $P11 = rx410_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx410_curclass, "$!pos"
    lt $I11, 0, rx410_fail1288
    goto rxsubrule449_pass1402
  rxsubrule449_back1403:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx410_curclass, "$!pos"
    lt $I11, 0, rx410_fail1288
  rxsubrule449_pass1402:
    rx410_cstack = rx410_cur."!cursor_capture"($P11, "charspec")
    set_addr $I11, rxsubrule449_back1403
    push rx410_bstack, $I11
    push rx410_bstack, 0
    push rx410_bstack, rx410_pos
    elements $I11, rx410_cstack
    push rx410_bstack, $I11
    repr_get_attr_int rx410_pos, $P11, rx410_curclass, "$!pos"
    nqp_rxpeek $I19, rx410_bstack, rxquantr418_done1309
    inc $I19
    inc $I19
    set rx410_rep, rx410_bstack[$I19]
    nqp_rxcommit rx410_bstack, rxquantr418_done1309
    inc rx410_rep
    nqp_rxmark rx410_bstack, rxquantr418_done1309, rx410_pos, rx410_rep
    goto rxquantr418_loop1308
  rxquantr418_done1309:
    nqp_rxmark rx410_bstack, rxquantr450_done1405, rx410_pos, 0
  rxquantr450_loop1404:
    ge rx410_pos, rx410_eos, rx410_fail1288
    is_cclass $I11, .CCLASS_WHITESPACE, rx410_tgt, rx410_pos
    unless $I11, rx410_fail1288
    add rx410_pos, 1
    nqp_rxpeek $I19, rx410_bstack, rxquantr450_done1405
    inc $I19
    inc $I19
    set rx410_rep, rx410_bstack[$I19]
    nqp_rxcommit rx410_bstack, rxquantr450_done1405
    inc rx410_rep
    nqp_rxmark rx410_bstack, rxquantr450_done1405, rx410_pos, rx410_rep
    goto rxquantr450_loop1404
  rxquantr450_done1405:
    add $I11, rx410_pos, 1
    gt $I11, rx410_eos, rx410_fail1288
    substr $S10, rx410_tgt, rx410_pos, 1
    ne $S10, ucs4:"]", rx410_fail1288
    add rx410_pos, 1
    goto alt417_end1306
  alt417_11406:
    nqp_rxmark rx410_bstack, rxcap451_fail1408, rx410_pos, 0
    nqp_rxmark rx410_bstack, rxquantr452_done1410, -1, 0
  rxquantr452_loop1409:
    ge rx410_pos, rx410_eos, rx410_fail1288
    is_cclass $I11, .CCLASS_WORD, rx410_tgt, rx410_pos
    unless $I11, rx410_fail1288
    add rx410_pos, 1
    nqp_rxpeek $I19, rx410_bstack, rxquantr452_done1410
    inc $I19
    inc $I19
    set rx410_rep, rx410_bstack[$I19]
    nqp_rxcommit rx410_bstack, rxquantr452_done1410
    inc rx410_rep
    nqp_rxmark rx410_bstack, rxquantr452_done1410, rx410_pos, rx410_rep
    goto rxquantr452_loop1409
  rxquantr452_done1410:
    nqp_rxpeek $I19, rx410_bstack, rxcap451_fail1408
    inc $I19
    set $I11, rx410_bstack[$I19]
    repr_bind_attr_int rx410_cur, rx410_curclass, "$!pos", rx410_pos
    $P11 = rx410_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx410_pos)
    rx410_cstack = rx410_cur."!cursor_capture"($P11, "name")
    goto rxcap451_done1407
  rxcap451_fail1408:
    goto rx410_fail1288
  rxcap451_done1407:
    goto alt417_end1306
  alt417_21411:
    add $I11, rx410_pos, 1
    gt $I11, rx410_eos, rx410_fail1288
    substr $S10, rx410_tgt, rx410_pos, 1
    ne $S10, ucs4:":", rx410_fail1288
    add rx410_pos, 1
    nqp_rxmark rx410_bstack, rxcap453_fail1413, rx410_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt454_01415
    nqp_push_label $P11, alt454_11416
    nqp_rxmark rx410_bstack, alt454_end1414, -1, 0
    rx410_cur."!alt"(rx410_pos, "alt_nfa__20_1367388595.82252", $P11)
    goto rx410_fail1288
  alt454_01415:
    add $I11, rx410_pos, 1
    gt $I11, rx410_eos, rx410_fail1288
    substr $S10, rx410_tgt, rx410_pos, 1
    ne $S10, ucs4:"!", rx410_fail1288
    add rx410_pos, 1
    goto alt454_end1414
  alt454_11416:
    goto alt454_end1414
  alt454_end1414:
    nqp_rxcommit rx410_bstack, alt454_end1414
    nqp_rxpeek $I19, rx410_bstack, rxcap453_fail1413
    inc $I19
    set $I11, rx410_bstack[$I19]
    repr_bind_attr_int rx410_cur, rx410_curclass, "$!pos", rx410_pos
    $P11 = rx410_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx410_pos)
    rx410_cstack = rx410_cur."!cursor_capture"($P11, "invert")
    goto rxcap453_done1412
  rxcap453_fail1413:
    goto rx410_fail1288
  rxcap453_done1412:
    nqp_rxmark rx410_bstack, rxcap456_fail1419, rx410_pos, 0
    nqp_rxmark rx410_bstack, rxquantr457_done1421, -1, 0
  rxquantr457_loop1420:
    ge rx410_pos, rx410_eos, rx410_fail1288
    is_cclass $I11, .CCLASS_WORD, rx410_tgt, rx410_pos
    unless $I11, rx410_fail1288
    add rx410_pos, 1
    nqp_rxpeek $I19, rx410_bstack, rxquantr457_done1421
    inc $I19
    inc $I19
    set rx410_rep, rx410_bstack[$I19]
    nqp_rxcommit rx410_bstack, rxquantr457_done1421
    inc rx410_rep
    nqp_rxmark rx410_bstack, rxquantr457_done1421, rx410_pos, rx410_rep
    goto rxquantr457_loop1420
  rxquantr457_done1421:
    nqp_rxpeek $I19, rx410_bstack, rxcap456_fail1419
    inc $I19
    set $I11, rx410_bstack[$I19]
    repr_bind_attr_int rx410_cur, rx410_curclass, "$!pos", rx410_pos
    $P11 = rx410_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx410_pos)
    rx410_cstack = rx410_cur."!cursor_capture"($P11, "uniprop")
    goto rxcap456_done1418
  rxcap456_fail1419:
    goto rx410_fail1288
  rxcap456_done1418:
    goto alt417_end1306
  alt417_end1306:
    nqp_rxcommit rx410_bstack, alt417_end1306
    nqp_rxmark rx410_bstack, rxquantr458_done1423, rx410_pos, 0
  rxquantr458_loop1422:
    repr_bind_attr_int rx410_cur, rx410_curclass, "$!pos", rx410_pos
    $P11 = rx410_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx410_curclass, "$!pos"
    lt $I11, 0, rx410_fail1288
    goto rxsubrule459_pass1424
  rxsubrule459_back1425:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx410_curclass, "$!pos"
    lt $I11, 0, rx410_fail1288
  rxsubrule459_pass1424:
    rx410_cstack = rx410_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule459_back1425
    push rx410_bstack, $I11
    push rx410_bstack, 0
    push rx410_bstack, rx410_pos
    elements $I11, rx410_cstack
    push rx410_bstack, $I11
    repr_get_attr_int rx410_pos, $P11, rx410_curclass, "$!pos"
    nqp_rxpeek $I19, rx410_bstack, rxquantr458_done1423
    inc $I19
    inc $I19
    set rx410_rep, rx410_bstack[$I19]
    nqp_rxcommit rx410_bstack, rxquantr458_done1423
    inc rx410_rep
  rxquantr458_done1423:
    rx410_cur."!cursor_pass"(rx410_pos, "cclass_elem", 'backtrack'=>1)
    .return (rx410_cur)
  rx410_restart1287:
    repr_get_attr_obj rx410_cstack, rx410_cur, rx410_curclass, "$!cstack"
  rx410_fail1288:
    unless rx410_bstack, rx410_done1286
    pop $I19, rx410_bstack
    if_null rx410_cstack, rx410_cstack_done1291
    unless rx410_cstack, rx410_cstack_done1291
    dec $I19
    set $P11, rx410_cstack[$I19]
  rx410_cstack_done1291:
    pop rx410_rep, rx410_bstack
    pop rx410_pos, rx410_bstack
    pop $I19, rx410_bstack
    lt rx410_pos, -1, rx410_done1286
    lt rx410_pos, 0, rx410_fail1288
    eq $I19, 0, rx410_fail1288
    nqp_islist $I20, rx410_cstack
    unless $I20, rx410_jump1289
    elements $I18, rx410_bstack
    le $I18, 0, rx410_cut1290
    dec $I18
    set $I18, rx410_bstack[$I18]
  rx410_cut1290:
    assign rx410_cstack, $I18
  rx410_jump1289:
    jump $I19
  rx410_done1286:
    rx410_cur."!cursor_fail"()
    .return (rx410_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_103_1367388594.4399") :anon :lex :outer("cuid_97_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .const 'Sub' $P5004 = 'cuid_98_1367388594.4399' 
    capture_lex $P5004 
    .const 'Sub' $P5004 = 'cuid_100_1367388594.4399' 
    capture_lex $P5004 
    .const 'Sub' $P5004 = 'cuid_102_1367388594.4399' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx419_start
    .local string rx419_tgt
    .local int rx419_pos
    .local int rx419_off
    .local int rx419_eos
    .local int rx419_rep
    .local pmc rx419_cur
    .local pmc rx419_curclass
    .local pmc rx419_bstack
    .local pmc rx419_cstack
    rx419_start = self."!cursor_start_all"()
    set rx419_cur, rx419_start[0]
    set rx419_tgt, rx419_start[1]
    set rx419_pos, rx419_start[2]
    set rx419_curclass, rx419_start[3]
    set rx419_bstack, rx419_start[4]
    set $I19, rx419_start[5]
    store_lex unicode:"$\x{a2}", rx419_cur
    length rx419_eos, rx419_tgt
    eq $I19, 1, rx419_restart1312
    gt rx419_pos, rx419_eos, rx419_fail1313
    repr_get_attr_int $I11, self, rx419_curclass, "$!from"
    ne $I11, -1, rxscan420_done1319
    goto rxscan420_scan1318
  rxscan420_loop1317:
    inc rx419_pos
    gt rx419_pos, rx419_eos, rx419_fail1313
    repr_bind_attr_int rx419_cur, rx419_curclass, "$!from", rx419_pos
  rxscan420_scan1318:
    nqp_rxmark rx419_bstack, rxscan420_loop1317, rx419_pos, 0
  rxscan420_done1319:
  alt421_01321:
    nqp_rxmark rx419_bstack, alt421_11337, rx419_pos, 0
    nqp_rxmark rx419_bstack, rxquantr422_done1323, rx419_pos, 0
  rxquantr422_loop1322:
    ge rx419_pos, rx419_eos, rx419_fail1313
    is_cclass $I11, .CCLASS_WHITESPACE, rx419_tgt, rx419_pos
    unless $I11, rx419_fail1313
    add rx419_pos, 1
    nqp_rxpeek $I19, rx419_bstack, rxquantr422_done1323
    inc $I19
    inc $I19
    set rx419_rep, rx419_bstack[$I19]
    nqp_rxcommit rx419_bstack, rxquantr422_done1323
    inc rx419_rep
    nqp_rxmark rx419_bstack, rxquantr422_done1323, rx419_pos, rx419_rep
    goto rxquantr422_loop1322
  rxquantr422_done1323:
    add $I11, rx419_pos, 1
    gt $I11, rx419_eos, rx419_fail1313
    substr $S10, rx419_tgt, rx419_pos, 1
    ne $S10, ucs4:"-", rx419_fail1313
    add rx419_pos, 1
    .const 'Sub' $P5001 = 'cuid_98_1367388594.4399' 
    capture_lex $P5001
    repr_bind_attr_int rx419_cur, rx419_curclass, "$!pos", rx419_pos
    $P11 = rx419_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx419_curclass, "$!pos"
    ge $I11, 0, rx419_fail1313
    repr_bind_attr_int rx419_cur, rx419_curclass, "$!pos", rx419_pos
    $P11 = rx419_cur."obs"("- as character range", ".. for range, for explicit - in character class, escape it or place as last thing")
    repr_get_attr_int $I11, $P11, rx419_curclass, "$!pos"
    lt $I11, 0, rx419_fail1313
    repr_get_attr_int rx419_pos, $P11, rx419_curclass, "$!pos"
    goto alt421_end1320
  alt421_11337:
    nqp_rxmark rx419_bstack, rxquantr427_done1339, rx419_pos, 0
  rxquantr427_loop1338:
    ge rx419_pos, rx419_eos, rx419_fail1313
    is_cclass $I11, .CCLASS_WHITESPACE, rx419_tgt, rx419_pos
    unless $I11, rx419_fail1313
    add rx419_pos, 1
    nqp_rxpeek $I19, rx419_bstack, rxquantr427_done1339
    inc $I19
    inc $I19
    set rx419_rep, rx419_bstack[$I19]
    nqp_rxcommit rx419_bstack, rxquantr427_done1339
    inc rx419_rep
    nqp_rxmark rx419_bstack, rxquantr427_done1339, rx419_pos, rx419_rep
    goto rxquantr427_loop1338
  rxquantr427_done1339:
    .const 'Sub' $P5002 = 'cuid_100_1367388594.4399' 
    capture_lex $P5002
    repr_bind_attr_int rx419_cur, rx419_curclass, "$!pos", rx419_pos
    $P11 = rx419_cur.$P5002()
    repr_get_attr_int $I11, $P11, rx419_curclass, "$!pos"
    lt $I11, 0, rx419_fail1313
    nqp_rxmark rx419_bstack, rxsubrule436_pass1367, -1, 0
  rxsubrule436_pass1367:
    rx419_cstack = rx419_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx419_pos, $P11, rx419_curclass, "$!pos"
    nqp_rxmark rx419_bstack, rxquantr437_done1369, rx419_pos, 0
  rxquantr437_loop1368:
    nqp_rxmark rx419_bstack, rxquantr438_done1371, rx419_pos, 0
  rxquantr438_loop1370:
    ge rx419_pos, rx419_eos, rx419_fail1313
    is_cclass $I11, .CCLASS_WHITESPACE, rx419_tgt, rx419_pos
    unless $I11, rx419_fail1313
    add rx419_pos, 1
    nqp_rxpeek $I19, rx419_bstack, rxquantr438_done1371
    inc $I19
    inc $I19
    set rx419_rep, rx419_bstack[$I19]
    nqp_rxcommit rx419_bstack, rxquantr438_done1371
    inc rx419_rep
    nqp_rxmark rx419_bstack, rxquantr438_done1371, rx419_pos, rx419_rep
    goto rxquantr438_loop1370
  rxquantr438_done1371:
    add $I11, rx419_pos, 2
    gt $I11, rx419_eos, rx419_fail1313
    substr $S10, rx419_tgt, rx419_pos, 2
    ne $S10, ucs4:"..", rx419_fail1313
    add rx419_pos, 2
    nqp_rxmark rx419_bstack, rxquantr439_done1373, rx419_pos, 0
  rxquantr439_loop1372:
    ge rx419_pos, rx419_eos, rx419_fail1313
    is_cclass $I11, .CCLASS_WHITESPACE, rx419_tgt, rx419_pos
    unless $I11, rx419_fail1313
    add rx419_pos, 1
    nqp_rxpeek $I19, rx419_bstack, rxquantr439_done1373
    inc $I19
    inc $I19
    set rx419_rep, rx419_bstack[$I19]
    nqp_rxcommit rx419_bstack, rxquantr439_done1373
    inc rx419_rep
    nqp_rxmark rx419_bstack, rxquantr439_done1373, rx419_pos, rx419_rep
    goto rxquantr439_loop1372
  rxquantr439_done1373:
    .const 'Sub' $P5003 = 'cuid_102_1367388594.4399' 
    capture_lex $P5003
    repr_bind_attr_int rx419_cur, rx419_curclass, "$!pos", rx419_pos
    $P11 = rx419_cur.$P5003()
    repr_get_attr_int $I11, $P11, rx419_curclass, "$!pos"
    lt $I11, 0, rx419_fail1313
    nqp_rxmark rx419_bstack, rxsubrule448_pass1401, -1, 0
  rxsubrule448_pass1401:
    rx419_cstack = rx419_cur."!cursor_capture"($P11, "1")
    repr_get_attr_int rx419_pos, $P11, rx419_curclass, "$!pos"
    nqp_rxpeek $I19, rx419_bstack, rxquantr437_done1369
    inc $I19
    inc $I19
    set rx419_rep, rx419_bstack[$I19]
    nqp_rxcommit rx419_bstack, rxquantr437_done1369
    inc rx419_rep
  rxquantr437_done1369:
  alt421_end1320:
    rx419_cur."!cursor_pass"(rx419_pos, 'backtrack'=>1)
    .return (rx419_cur)
  rx419_restart1312:
    repr_get_attr_obj rx419_cstack, rx419_cur, rx419_curclass, "$!cstack"
  rx419_fail1313:
    unless rx419_bstack, rx419_done1311
    pop $I19, rx419_bstack
    if_null rx419_cstack, rx419_cstack_done1316
    unless rx419_cstack, rx419_cstack_done1316
    dec $I19
    set $P11, rx419_cstack[$I19]
  rx419_cstack_done1316:
    pop rx419_rep, rx419_bstack
    pop rx419_pos, rx419_bstack
    pop $I19, rx419_bstack
    lt rx419_pos, -1, rx419_done1311
    lt rx419_pos, 0, rx419_fail1313
    eq $I19, 0, rx419_fail1313
    nqp_islist $I20, rx419_cstack
    unless $I20, rx419_jump1314
    elements $I18, rx419_bstack
    le $I18, 0, rx419_cut1315
    dec $I18
    set $I18, rx419_bstack[$I18]
  rx419_cut1315:
    assign rx419_cstack, $I18
  rx419_jump1314:
    jump $I19
  rx419_done1311:
    rx419_cur."!cursor_fail"()
    .return (rx419_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_98_1367388594.4399") :anon :lex :outer("cuid_103_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx423_start
    .local string rx423_tgt
    .local int rx423_pos
    .local int rx423_off
    .local int rx423_eos
    .local int rx423_rep
    .local pmc rx423_cur
    .local pmc rx423_curclass
    .local pmc rx423_bstack
    .local pmc rx423_cstack
    rx423_start = self."!cursor_start_all"()
    set rx423_cur, rx423_start[0]
    set rx423_tgt, rx423_start[1]
    set rx423_pos, rx423_start[2]
    set rx423_curclass, rx423_start[3]
    set rx423_bstack, rx423_start[4]
    set $I19, rx423_start[5]
    store_lex unicode:"$\x{a2}", rx423_cur
    length rx423_eos, rx423_tgt
    eq $I19, 1, rx423_restart1326
    gt rx423_pos, rx423_eos, rx423_fail1327
    repr_get_attr_int $I11, self, rx423_curclass, "$!from"
    ne $I11, -1, rxscan424_done1333
    goto rxscan424_scan1332
  rxscan424_loop1331:
    inc rx423_pos
    gt rx423_pos, rx423_eos, rx423_fail1327
    repr_bind_attr_int rx423_cur, rx423_curclass, "$!from", rx423_pos
  rxscan424_scan1332:
    nqp_rxmark rx423_bstack, rxscan424_loop1331, rx423_pos, 0
  rxscan424_done1333:
    nqp_rxmark rx423_bstack, rxquantr425_done1335, rx423_pos, 0
  rxquantr425_loop1334:
    ge rx423_pos, rx423_eos, rx423_fail1327
    is_cclass $I11, .CCLASS_WHITESPACE, rx423_tgt, rx423_pos
    unless $I11, rx423_fail1327
    add rx423_pos, 1
    nqp_rxpeek $I19, rx423_bstack, rxquantr425_done1335
    inc $I19
    inc $I19
    set rx423_rep, rx423_bstack[$I19]
    nqp_rxcommit rx423_bstack, rxquantr425_done1335
    inc rx423_rep
    nqp_rxmark rx423_bstack, rxquantr425_done1335, rx423_pos, rx423_rep
    goto rxquantr425_loop1334
  rxquantr425_done1335:
    add $I11, rx423_pos, 1
    gt $I11, rx423_eos, rx423_fail1327
    substr $S10, rx423_tgt, rx423_pos, 1
    ne $S10, ucs4:"]", rx423_fail1327
    add rx423_pos, 1
    rx423_cur."!cursor_pass"(rx423_pos, 'backtrack'=>1)
    .return (rx423_cur)
  rx423_restart1326:
    repr_get_attr_obj rx423_cstack, rx423_cur, rx423_curclass, "$!cstack"
  rx423_fail1327:
    unless rx423_bstack, rx423_done1325
    pop $I19, rx423_bstack
    if_null rx423_cstack, rx423_cstack_done1330
    unless rx423_cstack, rx423_cstack_done1330
    dec $I19
    set $P11, rx423_cstack[$I19]
  rx423_cstack_done1330:
    pop rx423_rep, rx423_bstack
    pop rx423_pos, rx423_bstack
    pop $I19, rx423_bstack
    lt rx423_pos, -1, rx423_done1325
    lt rx423_pos, 0, rx423_fail1327
    eq $I19, 0, rx423_fail1327
    nqp_islist $I20, rx423_cstack
    unless $I20, rx423_jump1328
    elements $I18, rx423_bstack
    le $I18, 0, rx423_cut1329
    dec $I18
    set $I18, rx423_bstack[$I18]
  rx423_cut1329:
    assign rx423_cstack, $I18
  rx423_jump1328:
    jump $I19
  rx423_done1325:
    rx423_cur."!cursor_fail"()
    .return (rx423_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_100_1367388594.4399") :anon :lex :outer("cuid_103_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .const 'Sub' $P5002 = 'cuid_99_1367388594.4399' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx428_start
    .local string rx428_tgt
    .local int rx428_pos
    .local int rx428_off
    .local int rx428_eos
    .local int rx428_rep
    .local pmc rx428_cur
    .local pmc rx428_curclass
    .local pmc rx428_bstack
    .local pmc rx428_cstack
    rx428_start = self."!cursor_start_all"()
    set rx428_cur, rx428_start[0]
    set rx428_tgt, rx428_start[1]
    set rx428_pos, rx428_start[2]
    set rx428_curclass, rx428_start[3]
    set rx428_bstack, rx428_start[4]
    set $I19, rx428_start[5]
    store_lex unicode:"$\x{a2}", rx428_cur
    length rx428_eos, rx428_tgt
    eq $I19, 1, rx428_restart1342
    gt rx428_pos, rx428_eos, rx428_fail1343
    repr_get_attr_int $I11, self, rx428_curclass, "$!from"
    ne $I11, -1, rxscan429_done1349
    goto rxscan429_scan1348
  rxscan429_loop1347:
    inc rx428_pos
    gt rx428_pos, rx428_eos, rx428_fail1343
    repr_bind_attr_int rx428_cur, rx428_curclass, "$!from", rx428_pos
  rxscan429_scan1348:
    nqp_rxmark rx428_bstack, rxscan429_loop1347, rx428_pos, 0
  rxscan429_done1349:
  alt430_01351:
    nqp_rxmark rx428_bstack, alt430_11353, rx428_pos, 0
    add $I11, rx428_pos, 1
    gt $I11, rx428_eos, rx428_fail1343
    substr $S10, rx428_tgt, rx428_pos, 1
    ne $S10, ucs4:"\\", rx428_fail1343
    add rx428_pos, 1
    repr_bind_attr_int rx428_cur, rx428_curclass, "$!pos", rx428_pos
    $P11 = rx428_cur."backslash"()
    repr_get_attr_int $I11, $P11, rx428_curclass, "$!pos"
    lt $I11, 0, rx428_fail1343
    nqp_rxmark rx428_bstack, rxsubrule431_pass1352, -1, 0
  rxsubrule431_pass1352:
    rx428_cstack = rx428_cur."!cursor_capture"($P11, "backslash")
    repr_get_attr_int rx428_pos, $P11, rx428_curclass, "$!pos"
    goto alt430_end1350
  alt430_11353:
    .const 'Sub' $P5001 = 'cuid_99_1367388594.4399' 
    capture_lex $P5001
    repr_bind_attr_int rx428_cur, rx428_curclass, "$!pos", rx428_pos
    $P11 = rx428_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx428_curclass, "$!pos"
    lt $I11, 0, rx428_fail1343
    nqp_rxmark rx428_bstack, rxsubrule435_pass1366, -1, 0
  rxsubrule435_pass1366:
    rx428_cstack = rx428_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx428_pos, $P11, rx428_curclass, "$!pos"
  alt430_end1350:
    rx428_cur."!cursor_pass"(rx428_pos, 'backtrack'=>1)
    .return (rx428_cur)
  rx428_restart1342:
    repr_get_attr_obj rx428_cstack, rx428_cur, rx428_curclass, "$!cstack"
  rx428_fail1343:
    unless rx428_bstack, rx428_done1341
    pop $I19, rx428_bstack
    if_null rx428_cstack, rx428_cstack_done1346
    unless rx428_cstack, rx428_cstack_done1346
    dec $I19
    set $P11, rx428_cstack[$I19]
  rx428_cstack_done1346:
    pop rx428_rep, rx428_bstack
    pop rx428_pos, rx428_bstack
    pop $I19, rx428_bstack
    lt rx428_pos, -1, rx428_done1341
    lt rx428_pos, 0, rx428_fail1343
    eq $I19, 0, rx428_fail1343
    nqp_islist $I20, rx428_cstack
    unless $I20, rx428_jump1344
    elements $I18, rx428_bstack
    le $I18, 0, rx428_cut1345
    dec $I18
    set $I18, rx428_bstack[$I18]
  rx428_cut1345:
    assign rx428_cstack, $I18
  rx428_jump1344:
    jump $I19
  rx428_done1341:
    rx428_cur."!cursor_fail"()
    .return (rx428_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_99_1367388594.4399") :anon :lex :outer("cuid_100_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx432_start
    .local string rx432_tgt
    .local int rx432_pos
    .local int rx432_off
    .local int rx432_eos
    .local int rx432_rep
    .local pmc rx432_cur
    .local pmc rx432_curclass
    .local pmc rx432_bstack
    .local pmc rx432_cstack
    rx432_start = self."!cursor_start_all"()
    set rx432_cur, rx432_start[0]
    set rx432_tgt, rx432_start[1]
    set rx432_pos, rx432_start[2]
    set rx432_curclass, rx432_start[3]
    set rx432_bstack, rx432_start[4]
    set $I19, rx432_start[5]
    store_lex unicode:"$\x{a2}", rx432_cur
    length rx432_eos, rx432_tgt
    eq $I19, 1, rx432_restart1356
    gt rx432_pos, rx432_eos, rx432_fail1357
    repr_get_attr_int $I11, self, rx432_curclass, "$!from"
    ne $I11, -1, rxscan433_done1363
    goto rxscan433_scan1362
  rxscan433_loop1361:
    inc rx432_pos
    gt rx432_pos, rx432_eos, rx432_fail1357
    repr_bind_attr_int rx432_cur, rx432_curclass, "$!from", rx432_pos
  rxscan433_scan1362:
    nqp_rxmark rx432_bstack, rxscan433_loop1361, rx432_pos, 0
  rxscan433_done1363:
    nqp_rxmark rx432_bstack, rxconj434_fail1364, rx432_pos, 0
    goto rxconj434_first1365
  rxconj434_fail1364:
    goto rx432_fail1357
  rxconj434_first1365:
    add $I11, rx432_pos, 1
    gt $I11, rx432_eos, rx432_fail1357
    substr $S10, rx432_tgt, rx432_pos, 1
    eq $S10, ucs4:"]", rx432_fail1357
    add rx432_pos, 1
    nqp_rxpeek $I19, rx432_bstack, rxconj434_fail1364
    inc $I19
    set $I11, rx432_bstack[$I19]
    nqp_rxmark rx432_bstack, rxconj434_fail1364, $I11, rx432_pos
    set rx432_pos, $I11
    add $I11, rx432_pos, 1
    gt $I11, rx432_eos, rx432_fail1357
    substr $S10, rx432_tgt, rx432_pos, 1
    eq $S10, ucs4:"\\", rx432_fail1357
    add rx432_pos, 1
    nqp_rxpeek $I19, rx432_bstack, rxconj434_fail1364
    inc $I19
    set $I11, rx432_bstack[$I19]
    inc $I19
    set $I12, rx432_bstack[$I19]
    ne rx432_pos, $I12, rx432_fail1357
    set rx432_pos, $I11
    ge rx432_pos, rx432_eos, rx432_fail1357
    add rx432_pos, 1
    rx432_cur."!cursor_pass"(rx432_pos, 'backtrack'=>1)
    .return (rx432_cur)
  rx432_restart1356:
    repr_get_attr_obj rx432_cstack, rx432_cur, rx432_curclass, "$!cstack"
  rx432_fail1357:
    unless rx432_bstack, rx432_done1355
    pop $I19, rx432_bstack
    if_null rx432_cstack, rx432_cstack_done1360
    unless rx432_cstack, rx432_cstack_done1360
    dec $I19
    set $P11, rx432_cstack[$I19]
  rx432_cstack_done1360:
    pop rx432_rep, rx432_bstack
    pop rx432_pos, rx432_bstack
    pop $I19, rx432_bstack
    lt rx432_pos, -1, rx432_done1355
    lt rx432_pos, 0, rx432_fail1357
    eq $I19, 0, rx432_fail1357
    nqp_islist $I20, rx432_cstack
    unless $I20, rx432_jump1358
    elements $I18, rx432_bstack
    le $I18, 0, rx432_cut1359
    dec $I18
    set $I18, rx432_bstack[$I18]
  rx432_cut1359:
    assign rx432_cstack, $I18
  rx432_jump1358:
    jump $I19
  rx432_done1355:
    rx432_cur."!cursor_fail"()
    .return (rx432_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_102_1367388594.4399") :anon :lex :outer("cuid_103_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .const 'Sub' $P5002 = 'cuid_101_1367388594.4399' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx440_start
    .local string rx440_tgt
    .local int rx440_pos
    .local int rx440_off
    .local int rx440_eos
    .local int rx440_rep
    .local pmc rx440_cur
    .local pmc rx440_curclass
    .local pmc rx440_bstack
    .local pmc rx440_cstack
    rx440_start = self."!cursor_start_all"()
    set rx440_cur, rx440_start[0]
    set rx440_tgt, rx440_start[1]
    set rx440_pos, rx440_start[2]
    set rx440_curclass, rx440_start[3]
    set rx440_bstack, rx440_start[4]
    set $I19, rx440_start[5]
    store_lex unicode:"$\x{a2}", rx440_cur
    length rx440_eos, rx440_tgt
    eq $I19, 1, rx440_restart1376
    gt rx440_pos, rx440_eos, rx440_fail1377
    repr_get_attr_int $I11, self, rx440_curclass, "$!from"
    ne $I11, -1, rxscan441_done1383
    goto rxscan441_scan1382
  rxscan441_loop1381:
    inc rx440_pos
    gt rx440_pos, rx440_eos, rx440_fail1377
    repr_bind_attr_int rx440_cur, rx440_curclass, "$!from", rx440_pos
  rxscan441_scan1382:
    nqp_rxmark rx440_bstack, rxscan441_loop1381, rx440_pos, 0
  rxscan441_done1383:
  alt442_01385:
    nqp_rxmark rx440_bstack, alt442_11387, rx440_pos, 0
    add $I11, rx440_pos, 1
    gt $I11, rx440_eos, rx440_fail1377
    substr $S10, rx440_tgt, rx440_pos, 1
    ne $S10, ucs4:"\\", rx440_fail1377
    add rx440_pos, 1
    repr_bind_attr_int rx440_cur, rx440_curclass, "$!pos", rx440_pos
    $P11 = rx440_cur."backslash"()
    repr_get_attr_int $I11, $P11, rx440_curclass, "$!pos"
    lt $I11, 0, rx440_fail1377
    nqp_rxmark rx440_bstack, rxsubrule443_pass1386, -1, 0
  rxsubrule443_pass1386:
    rx440_cstack = rx440_cur."!cursor_capture"($P11, "backslash")
    repr_get_attr_int rx440_pos, $P11, rx440_curclass, "$!pos"
    goto alt442_end1384
  alt442_11387:
    .const 'Sub' $P5001 = 'cuid_101_1367388594.4399' 
    capture_lex $P5001
    repr_bind_attr_int rx440_cur, rx440_curclass, "$!pos", rx440_pos
    $P11 = rx440_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx440_curclass, "$!pos"
    lt $I11, 0, rx440_fail1377
    nqp_rxmark rx440_bstack, rxsubrule447_pass1400, -1, 0
  rxsubrule447_pass1400:
    rx440_cstack = rx440_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx440_pos, $P11, rx440_curclass, "$!pos"
  alt442_end1384:
    rx440_cur."!cursor_pass"(rx440_pos, 'backtrack'=>1)
    .return (rx440_cur)
  rx440_restart1376:
    repr_get_attr_obj rx440_cstack, rx440_cur, rx440_curclass, "$!cstack"
  rx440_fail1377:
    unless rx440_bstack, rx440_done1375
    pop $I19, rx440_bstack
    if_null rx440_cstack, rx440_cstack_done1380
    unless rx440_cstack, rx440_cstack_done1380
    dec $I19
    set $P11, rx440_cstack[$I19]
  rx440_cstack_done1380:
    pop rx440_rep, rx440_bstack
    pop rx440_pos, rx440_bstack
    pop $I19, rx440_bstack
    lt rx440_pos, -1, rx440_done1375
    lt rx440_pos, 0, rx440_fail1377
    eq $I19, 0, rx440_fail1377
    nqp_islist $I20, rx440_cstack
    unless $I20, rx440_jump1378
    elements $I18, rx440_bstack
    le $I18, 0, rx440_cut1379
    dec $I18
    set $I18, rx440_bstack[$I18]
  rx440_cut1379:
    assign rx440_cstack, $I18
  rx440_jump1378:
    jump $I19
  rx440_done1375:
    rx440_cur."!cursor_fail"()
    .return (rx440_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_101_1367388594.4399") :anon :lex :outer("cuid_102_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx444_start
    .local string rx444_tgt
    .local int rx444_pos
    .local int rx444_off
    .local int rx444_eos
    .local int rx444_rep
    .local pmc rx444_cur
    .local pmc rx444_curclass
    .local pmc rx444_bstack
    .local pmc rx444_cstack
    rx444_start = self."!cursor_start_all"()
    set rx444_cur, rx444_start[0]
    set rx444_tgt, rx444_start[1]
    set rx444_pos, rx444_start[2]
    set rx444_curclass, rx444_start[3]
    set rx444_bstack, rx444_start[4]
    set $I19, rx444_start[5]
    store_lex unicode:"$\x{a2}", rx444_cur
    length rx444_eos, rx444_tgt
    eq $I19, 1, rx444_restart1390
    gt rx444_pos, rx444_eos, rx444_fail1391
    repr_get_attr_int $I11, self, rx444_curclass, "$!from"
    ne $I11, -1, rxscan445_done1397
    goto rxscan445_scan1396
  rxscan445_loop1395:
    inc rx444_pos
    gt rx444_pos, rx444_eos, rx444_fail1391
    repr_bind_attr_int rx444_cur, rx444_curclass, "$!from", rx444_pos
  rxscan445_scan1396:
    nqp_rxmark rx444_bstack, rxscan445_loop1395, rx444_pos, 0
  rxscan445_done1397:
    nqp_rxmark rx444_bstack, rxconj446_fail1398, rx444_pos, 0
    goto rxconj446_first1399
  rxconj446_fail1398:
    goto rx444_fail1391
  rxconj446_first1399:
    add $I11, rx444_pos, 1
    gt $I11, rx444_eos, rx444_fail1391
    substr $S10, rx444_tgt, rx444_pos, 1
    eq $S10, ucs4:"]", rx444_fail1391
    add rx444_pos, 1
    nqp_rxpeek $I19, rx444_bstack, rxconj446_fail1398
    inc $I19
    set $I11, rx444_bstack[$I19]
    nqp_rxmark rx444_bstack, rxconj446_fail1398, $I11, rx444_pos
    set rx444_pos, $I11
    add $I11, rx444_pos, 1
    gt $I11, rx444_eos, rx444_fail1391
    substr $S10, rx444_tgt, rx444_pos, 1
    eq $S10, ucs4:"\\", rx444_fail1391
    add rx444_pos, 1
    nqp_rxpeek $I19, rx444_bstack, rxconj446_fail1398
    inc $I19
    set $I11, rx444_bstack[$I19]
    inc $I19
    set $I12, rx444_bstack[$I19]
    ne rx444_pos, $I12, rx444_fail1391
    set rx444_pos, $I11
    ge rx444_pos, rx444_eos, rx444_fail1391
    add rx444_pos, 1
    rx444_cur."!cursor_pass"(rx444_pos, 'backtrack'=>1)
    .return (rx444_cur)
  rx444_restart1390:
    repr_get_attr_obj rx444_cstack, rx444_cur, rx444_curclass, "$!cstack"
  rx444_fail1391:
    unless rx444_bstack, rx444_done1389
    pop $I19, rx444_bstack
    if_null rx444_cstack, rx444_cstack_done1394
    unless rx444_cstack, rx444_cstack_done1394
    dec $I19
    set $P11, rx444_cstack[$I19]
  rx444_cstack_done1394:
    pop rx444_rep, rx444_bstack
    pop rx444_pos, rx444_bstack
    pop $I19, rx444_bstack
    lt rx444_pos, -1, rx444_done1389
    lt rx444_pos, 0, rx444_fail1391
    eq $I19, 0, rx444_fail1391
    nqp_islist $I20, rx444_cstack
    unless $I20, rx444_jump1392
    elements $I18, rx444_bstack
    le $I18, 0, rx444_cut1393
    dec $I18
    set $I18, rx444_bstack[$I18]
  rx444_cut1393:
    assign rx444_cstack, $I18
  rx444_jump1392:
    jump $I19
  rx444_done1389:
    rx444_cur."!cursor_fail"()
    .return (rx444_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_internal" :subid("cuid_104_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 302
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_105_1367388594.4399' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx460_start
    .local string rx460_tgt
    .local int rx460_pos
    .local int rx460_off
    .local int rx460_eos
    .local int rx460_rep
    .local pmc rx460_cur
    .local pmc rx460_curclass
    .local pmc rx460_bstack
    .local pmc rx460_cstack
    rx460_start = self."!cursor_start_all"()
    set rx460_cur, rx460_start[0]
    set rx460_tgt, rx460_start[1]
    set rx460_pos, rx460_start[2]
    set rx460_curclass, rx460_start[3]
    set rx460_bstack, rx460_start[4]
    set $I19, rx460_start[5]
    store_lex unicode:"$\x{a2}", rx460_cur
    length rx460_eos, rx460_tgt
    eq $I19, 1, rx460_restart1428
    gt rx460_pos, rx460_eos, rx460_fail1429
    repr_get_attr_int $I11, self, rx460_curclass, "$!from"
    ne $I11, -1, rxscan461_done1435
    goto rxscan461_scan1434
  rxscan461_loop1433:
    inc rx460_pos
    gt rx460_pos, rx460_eos, rx460_fail1429
    repr_bind_attr_int rx460_cur, rx460_curclass, "$!from", rx460_pos
  rxscan461_scan1434:
    nqp_rxmark rx460_bstack, rxscan461_loop1433, rx460_pos, 0
  rxscan461_done1435:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt462_01437
    nqp_push_label $P11, alt462_11459
    nqp_rxmark rx460_bstack, alt462_end1436, -1, 0
    rx460_cur."!alt"(rx460_pos, "alt_nfa__24_1367388595.85983", $P11)
    goto rx460_fail1429
  alt462_01437:
    add $I11, rx460_pos, 1
    gt $I11, rx460_eos, rx460_fail1429
    substr $S10, rx460_tgt, rx460_pos, 1
    ne $S10, ucs4:":", rx460_fail1429
    add rx460_pos, 1
    nqp_rxmark rx460_bstack, rxquantr463_done1439, -1, 0
  rxquantr463_loop1438:
    .const 'Sub' $P5001 = 'cuid_105_1367388594.4399' 
    capture_lex $P5001
    repr_bind_attr_int rx460_cur, rx460_curclass, "$!pos", rx460_pos
    $P11 = rx460_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx460_curclass, "$!pos"
    lt $I11, 0, rx460_fail1429
    goto rxsubrule468_pass1455
  rxsubrule468_back1456:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx460_curclass, "$!pos"
    lt $I11, 0, rx460_fail1429
  rxsubrule468_pass1455:
    rx460_cstack = rx460_cur."!cursor_capture"($P11, "n")
    set_addr $I11, rxsubrule468_back1456
    push rx460_bstack, $I11
    push rx460_bstack, 0
    push rx460_bstack, rx460_pos
    elements $I11, rx460_cstack
    push rx460_bstack, $I11
    repr_get_attr_int rx460_pos, $P11, rx460_curclass, "$!pos"
    nqp_rxpeek $I19, rx460_bstack, rxquantr463_done1439
    inc $I19
    inc $I19
    set rx460_rep, rx460_bstack[$I19]
    nqp_rxcommit rx460_bstack, rxquantr463_done1439
    inc rx460_rep
  rxquantr463_done1439:
    repr_bind_attr_int rx460_cur, rx460_curclass, "$!pos", rx460_pos
    $P11 = rx460_cur."mod_ident"()
    repr_get_attr_int $I11, $P11, rx460_curclass, "$!pos"
    lt $I11, 0, rx460_fail1429
    nqp_rxmark rx460_bstack, rxsubrule469_pass1457, -1, 0
  rxsubrule469_pass1457:
    rx460_cstack = rx460_cur."!cursor_capture"($P11, "mod_ident")
    repr_get_attr_int rx460_pos, $P11, rx460_curclass, "$!pos"
    le rx460_pos, 0, rx460_fail1429
    is_cclass $I11, .CCLASS_WORD, rx460_tgt, rx460_pos
    if $I11, rx460_fail1429
    sub $I11, rx460_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx460_tgt, $I11
    unless $I11, rx460_fail1429
    goto alt462_end1436
  alt462_11459:
    add $I11, rx460_pos, 1
    gt $I11, rx460_eos, rx460_fail1429
    substr $S10, rx460_tgt, rx460_pos, 1
    ne $S10, ucs4:":", rx460_fail1429
    add rx460_pos, 1
    repr_bind_attr_int rx460_cur, rx460_curclass, "$!pos", rx460_pos
    $P11 = rx460_cur."mod_ident"()
    repr_get_attr_int $I11, $P11, rx460_curclass, "$!pos"
    lt $I11, 0, rx460_fail1429
    nqp_rxmark rx460_bstack, rxsubrule471_pass1460, -1, 0
  rxsubrule471_pass1460:
    rx460_cstack = rx460_cur."!cursor_capture"($P11, "mod_ident")
    repr_get_attr_int rx460_pos, $P11, rx460_curclass, "$!pos"
    nqp_rxmark rx460_bstack, rxquantr472_done1462, rx460_pos, 0
  rxquantr472_loop1461:
    add $I11, rx460_pos, 1
    gt $I11, rx460_eos, rx460_fail1429
    substr $S10, rx460_tgt, rx460_pos, 1
    ne $S10, ucs4:"(", rx460_fail1429
    add rx460_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt473_01464
    nqp_push_label $P11, alt473_11469
    nqp_push_label $P11, alt473_21471
    nqp_rxmark rx460_bstack, alt473_end1463, -1, 0
    rx460_cur."!alt"(rx460_pos, "alt_nfa__23_1367388595.85933", $P11)
    goto rx460_fail1429
  alt473_01464:
    nqp_rxmark rx460_bstack, rxcap474_fail1466, rx460_pos, 0
    nqp_rxmark rx460_bstack, rxquantr475_done1468, -1, 0
  rxquantr475_loop1467:
    ge rx460_pos, rx460_eos, rx460_fail1429
    is_cclass $I11, .CCLASS_NUMERIC, rx460_tgt, rx460_pos
    unless $I11, rx460_fail1429
    add rx460_pos, 1
    nqp_rxpeek $I19, rx460_bstack, rxquantr475_done1468
    inc $I19
    inc $I19
    set rx460_rep, rx460_bstack[$I19]
    nqp_rxcommit rx460_bstack, rxquantr475_done1468
    inc rx460_rep
    nqp_rxmark rx460_bstack, rxquantr475_done1468, rx460_pos, rx460_rep
    goto rxquantr475_loop1467
  rxquantr475_done1468:
    nqp_rxpeek $I19, rx460_bstack, rxcap474_fail1466
    inc $I19
    set $I11, rx460_bstack[$I19]
    repr_bind_attr_int rx460_cur, rx460_curclass, "$!pos", rx460_pos
    $P11 = rx460_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx460_pos)
    rx460_cstack = rx460_cur."!cursor_capture"($P11, "n")
    goto rxcap474_done1465
  rxcap474_fail1466:
    goto rx460_fail1429
  rxcap474_done1465:
    goto alt473_end1463
  alt473_11469:
    ge rx460_pos, rx460_eos, rx460_fail1429
    substr $S11, rx460_tgt, rx460_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx460_fail1429
    repr_bind_attr_int rx460_cur, rx460_curclass, "$!pos", rx460_pos
    $P11 = rx460_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx460_curclass, "$!pos"
    lt $I11, 0, rx460_fail1429
    nqp_rxmark rx460_bstack, rxsubrule476_pass1470, -1, 0
  rxsubrule476_pass1470:
    rx460_cstack = rx460_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx460_pos, $P11, rx460_curclass, "$!pos"
    goto alt473_end1463
  alt473_21471:
    ge rx460_pos, rx460_eos, rx460_fail1429
    substr $S11, rx460_tgt, rx460_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx460_fail1429
    repr_bind_attr_int rx460_cur, rx460_curclass, "$!pos", rx460_pos
    $P11 = rx460_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx460_curclass, "$!pos"
    lt $I11, 0, rx460_fail1429
    nqp_rxmark rx460_bstack, rxsubrule477_pass1472, -1, 0
  rxsubrule477_pass1472:
    rx460_cstack = rx460_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx460_pos, $P11, rx460_curclass, "$!pos"
    goto alt473_end1463
  alt473_end1463:
    nqp_rxcommit rx460_bstack, alt473_end1463
    add $I11, rx460_pos, 1
    gt $I11, rx460_eos, rx460_fail1429
    substr $S10, rx460_tgt, rx460_pos, 1
    ne $S10, ucs4:")", rx460_fail1429
    add rx460_pos, 1
    nqp_rxpeek $I19, rx460_bstack, rxquantr472_done1462
    inc $I19
    inc $I19
    set rx460_rep, rx460_bstack[$I19]
    nqp_rxcommit rx460_bstack, rxquantr472_done1462
    inc rx460_rep
  rxquantr472_done1462:
    goto alt462_end1436
  alt462_end1436:
    nqp_rxcommit rx460_bstack, alt462_end1436
    rx460_cur."!cursor_pass"(rx460_pos, "mod_internal", 'backtrack'=>1)
    .return (rx460_cur)
  rx460_restart1428:
    repr_get_attr_obj rx460_cstack, rx460_cur, rx460_curclass, "$!cstack"
  rx460_fail1429:
    unless rx460_bstack, rx460_done1427
    pop $I19, rx460_bstack
    if_null rx460_cstack, rx460_cstack_done1432
    unless rx460_cstack, rx460_cstack_done1432
    dec $I19
    set $P11, rx460_cstack[$I19]
  rx460_cstack_done1432:
    pop rx460_rep, rx460_bstack
    pop rx460_pos, rx460_bstack
    pop $I19, rx460_bstack
    lt rx460_pos, -1, rx460_done1427
    lt rx460_pos, 0, rx460_fail1429
    eq $I19, 0, rx460_fail1429
    nqp_islist $I20, rx460_cstack
    unless $I20, rx460_jump1430
    elements $I18, rx460_bstack
    le $I18, 0, rx460_cut1431
    dec $I18
    set $I18, rx460_bstack[$I18]
  rx460_cut1431:
    assign rx460_cstack, $I18
  rx460_jump1430:
    jump $I19
  rx460_done1427:
    rx460_cur."!cursor_fail"()
    .return (rx460_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_105_1367388594.4399") :anon :lex :outer("cuid_104_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx464_start
    .local string rx464_tgt
    .local int rx464_pos
    .local int rx464_off
    .local int rx464_eos
    .local int rx464_rep
    .local pmc rx464_cur
    .local pmc rx464_curclass
    .local pmc rx464_bstack
    .local pmc rx464_cstack
    rx464_start = self."!cursor_start_all"()
    set rx464_cur, rx464_start[0]
    set rx464_tgt, rx464_start[1]
    set rx464_pos, rx464_start[2]
    set rx464_curclass, rx464_start[3]
    set rx464_bstack, rx464_start[4]
    set $I19, rx464_start[5]
    store_lex unicode:"$\x{a2}", rx464_cur
    length rx464_eos, rx464_tgt
    eq $I19, 1, rx464_restart1442
    gt rx464_pos, rx464_eos, rx464_fail1443
    repr_get_attr_int $I11, self, rx464_curclass, "$!from"
    ne $I11, -1, rxscan465_done1449
    goto rxscan465_scan1448
  rxscan465_loop1447:
    inc rx464_pos
    gt rx464_pos, rx464_eos, rx464_fail1443
    repr_bind_attr_int rx464_cur, rx464_curclass, "$!from", rx464_pos
  rxscan465_scan1448:
    nqp_rxmark rx464_bstack, rxscan465_loop1447, rx464_pos, 0
  rxscan465_done1449:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt466_01451
    nqp_push_label $P11, alt466_11452
    nqp_rxmark rx464_bstack, alt466_end1450, -1, 0
    rx464_cur."!alt"(rx464_pos, "alt_nfa__22_1367388595.83184", $P11)
    goto rx464_fail1443
  alt466_01451:
    add $I11, rx464_pos, 1
    gt $I11, rx464_eos, rx464_fail1443
    substr $S10, rx464_tgt, rx464_pos, 1
    ne $S10, ucs4:"!", rx464_fail1443
    add rx464_pos, 1
    goto alt466_end1450
  alt466_11452:
    nqp_rxmark rx464_bstack, rxquantr467_done1454, -1, 0
  rxquantr467_loop1453:
    ge rx464_pos, rx464_eos, rx464_fail1443
    is_cclass $I11, .CCLASS_NUMERIC, rx464_tgt, rx464_pos
    unless $I11, rx464_fail1443
    add rx464_pos, 1
    nqp_rxpeek $I19, rx464_bstack, rxquantr467_done1454
    inc $I19
    inc $I19
    set rx464_rep, rx464_bstack[$I19]
    nqp_rxcommit rx464_bstack, rxquantr467_done1454
    inc rx464_rep
    nqp_rxmark rx464_bstack, rxquantr467_done1454, rx464_pos, rx464_rep
    goto rxquantr467_loop1453
  rxquantr467_done1454:
    goto alt466_end1450
  alt466_end1450:
    rx464_cur."!cursor_pass"(rx464_pos, 'backtrack'=>1)
    .return (rx464_cur)
  rx464_restart1442:
    repr_get_attr_obj rx464_cstack, rx464_cur, rx464_curclass, "$!cstack"
  rx464_fail1443:
    unless rx464_bstack, rx464_done1441
    pop $I19, rx464_bstack
    if_null rx464_cstack, rx464_cstack_done1446
    unless rx464_cstack, rx464_cstack_done1446
    dec $I19
    set $P11, rx464_cstack[$I19]
  rx464_cstack_done1446:
    pop rx464_rep, rx464_bstack
    pop rx464_pos, rx464_bstack
    pop $I19, rx464_bstack
    lt rx464_pos, -1, rx464_done1441
    lt rx464_pos, 0, rx464_fail1443
    eq $I19, 0, rx464_fail1443
    nqp_islist $I20, rx464_cstack
    unless $I20, rx464_jump1444
    elements $I18, rx464_bstack
    le $I18, 0, rx464_cut1445
    dec $I18
    set $I18, rx464_bstack[$I18]
  rx464_cut1445:
    assign rx464_cstack, $I18
  rx464_jump1444:
    jump $I19
  rx464_done1441:
    rx464_cur."!cursor_fail"()
    .return (rx464_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident" :subid("cuid_106_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 318
    .param pmc self 
    $P5001 = self."!protoregex"("mod_ident")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<ignorecase>" :subid("cuid_107_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 319
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx478_start
    .local string rx478_tgt
    .local int rx478_pos
    .local int rx478_off
    .local int rx478_eos
    .local int rx478_rep
    .local pmc rx478_cur
    .local pmc rx478_curclass
    .local pmc rx478_bstack
    .local pmc rx478_cstack
    rx478_start = self."!cursor_start_all"()
    set rx478_cur, rx478_start[0]
    set rx478_tgt, rx478_start[1]
    set rx478_pos, rx478_start[2]
    set rx478_curclass, rx478_start[3]
    set rx478_bstack, rx478_start[4]
    set $I19, rx478_start[5]
    store_lex unicode:"$\x{a2}", rx478_cur
    length rx478_eos, rx478_tgt
    eq $I19, 1, rx478_restart1475
    gt rx478_pos, rx478_eos, rx478_fail1476
    repr_get_attr_int $I11, self, rx478_curclass, "$!from"
    ne $I11, -1, rxscan479_done1482
    goto rxscan479_scan1481
  rxscan479_loop1480:
    inc rx478_pos
    gt rx478_pos, rx478_eos, rx478_fail1476
    repr_bind_attr_int rx478_cur, rx478_curclass, "$!from", rx478_pos
  rxscan479_scan1481:
    nqp_rxmark rx478_bstack, rxscan479_loop1480, rx478_pos, 0
  rxscan479_done1482:
    nqp_rxmark rx478_bstack, rxcap480_fail1484, rx478_pos, 0
    add $I11, rx478_pos, 1
    gt $I11, rx478_eos, rx478_fail1476
    substr $S10, rx478_tgt, rx478_pos, 1
    ne $S10, ucs4:"i", rx478_fail1476
    add rx478_pos, 1
    nqp_rxpeek $I19, rx478_bstack, rxcap480_fail1484
    inc $I19
    set $I11, rx478_bstack[$I19]
    repr_bind_attr_int rx478_cur, rx478_curclass, "$!pos", rx478_pos
    $P11 = rx478_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx478_pos)
    rx478_cstack = rx478_cur."!cursor_capture"($P11, "sym")
    goto rxcap480_done1483
  rxcap480_fail1484:
    goto rx478_fail1476
  rxcap480_done1483:
    nqp_rxmark rx478_bstack, rxquantr481_done1486, rx478_pos, 0
  rxquantr481_loop1485:
    add $I11, rx478_pos, 9
    gt $I11, rx478_eos, rx478_fail1476
    substr $S10, rx478_tgt, rx478_pos, 9
    ne $S10, ucs4:"gnorecase", rx478_fail1476
    add rx478_pos, 9
    nqp_rxpeek $I19, rx478_bstack, rxquantr481_done1486
    inc $I19
    inc $I19
    set rx478_rep, rx478_bstack[$I19]
    nqp_rxcommit rx478_bstack, rxquantr481_done1486
    inc rx478_rep
  rxquantr481_done1486:
    le rx478_pos, 0, rx478_fail1476
    is_cclass $I11, .CCLASS_WORD, rx478_tgt, rx478_pos
    if $I11, rx478_fail1476
    sub $I11, rx478_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx478_tgt, $I11
    unless $I11, rx478_fail1476
    rx478_cur."!cursor_pass"(rx478_pos, "mod_ident:sym<ignorecase>", 'backtrack'=>1)
    .return (rx478_cur)
  rx478_restart1475:
    repr_get_attr_obj rx478_cstack, rx478_cur, rx478_curclass, "$!cstack"
  rx478_fail1476:
    unless rx478_bstack, rx478_done1474
    pop $I19, rx478_bstack
    if_null rx478_cstack, rx478_cstack_done1479
    unless rx478_cstack, rx478_cstack_done1479
    dec $I19
    set $P11, rx478_cstack[$I19]
  rx478_cstack_done1479:
    pop rx478_rep, rx478_bstack
    pop rx478_pos, rx478_bstack
    pop $I19, rx478_bstack
    lt rx478_pos, -1, rx478_done1474
    lt rx478_pos, 0, rx478_fail1476
    eq $I19, 0, rx478_fail1476
    nqp_islist $I20, rx478_cstack
    unless $I20, rx478_jump1477
    elements $I18, rx478_bstack
    le $I18, 0, rx478_cut1478
    dec $I18
    set $I18, rx478_bstack[$I18]
  rx478_cut1478:
    assign rx478_cstack, $I18
  rx478_jump1477:
    jump $I19
  rx478_done1474:
    rx478_cur."!cursor_fail"()
    .return (rx478_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<ratchet>" :subid("cuid_108_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 320
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx483_start
    .local string rx483_tgt
    .local int rx483_pos
    .local int rx483_off
    .local int rx483_eos
    .local int rx483_rep
    .local pmc rx483_cur
    .local pmc rx483_curclass
    .local pmc rx483_bstack
    .local pmc rx483_cstack
    rx483_start = self."!cursor_start_all"()
    set rx483_cur, rx483_start[0]
    set rx483_tgt, rx483_start[1]
    set rx483_pos, rx483_start[2]
    set rx483_curclass, rx483_start[3]
    set rx483_bstack, rx483_start[4]
    set $I19, rx483_start[5]
    store_lex unicode:"$\x{a2}", rx483_cur
    length rx483_eos, rx483_tgt
    eq $I19, 1, rx483_restart1490
    gt rx483_pos, rx483_eos, rx483_fail1491
    repr_get_attr_int $I11, self, rx483_curclass, "$!from"
    ne $I11, -1, rxscan484_done1497
    goto rxscan484_scan1496
  rxscan484_loop1495:
    inc rx483_pos
    gt rx483_pos, rx483_eos, rx483_fail1491
    repr_bind_attr_int rx483_cur, rx483_curclass, "$!from", rx483_pos
  rxscan484_scan1496:
    nqp_rxmark rx483_bstack, rxscan484_loop1495, rx483_pos, 0
  rxscan484_done1497:
    nqp_rxmark rx483_bstack, rxcap485_fail1499, rx483_pos, 0
    add $I11, rx483_pos, 1
    gt $I11, rx483_eos, rx483_fail1491
    substr $S10, rx483_tgt, rx483_pos, 1
    ne $S10, ucs4:"r", rx483_fail1491
    add rx483_pos, 1
    nqp_rxpeek $I19, rx483_bstack, rxcap485_fail1499
    inc $I19
    set $I11, rx483_bstack[$I19]
    repr_bind_attr_int rx483_cur, rx483_curclass, "$!pos", rx483_pos
    $P11 = rx483_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx483_pos)
    rx483_cstack = rx483_cur."!cursor_capture"($P11, "sym")
    goto rxcap485_done1498
  rxcap485_fail1499:
    goto rx483_fail1491
  rxcap485_done1498:
    nqp_rxmark rx483_bstack, rxquantr486_done1501, rx483_pos, 0
  rxquantr486_loop1500:
    add $I11, rx483_pos, 6
    gt $I11, rx483_eos, rx483_fail1491
    substr $S10, rx483_tgt, rx483_pos, 6
    ne $S10, ucs4:"atchet", rx483_fail1491
    add rx483_pos, 6
    nqp_rxpeek $I19, rx483_bstack, rxquantr486_done1501
    inc $I19
    inc $I19
    set rx483_rep, rx483_bstack[$I19]
    nqp_rxcommit rx483_bstack, rxquantr486_done1501
    inc rx483_rep
  rxquantr486_done1501:
    le rx483_pos, 0, rx483_fail1491
    is_cclass $I11, .CCLASS_WORD, rx483_tgt, rx483_pos
    if $I11, rx483_fail1491
    sub $I11, rx483_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx483_tgt, $I11
    unless $I11, rx483_fail1491
    rx483_cur."!cursor_pass"(rx483_pos, "mod_ident:sym<ratchet>", 'backtrack'=>1)
    .return (rx483_cur)
  rx483_restart1490:
    repr_get_attr_obj rx483_cstack, rx483_cur, rx483_curclass, "$!cstack"
  rx483_fail1491:
    unless rx483_bstack, rx483_done1489
    pop $I19, rx483_bstack
    if_null rx483_cstack, rx483_cstack_done1494
    unless rx483_cstack, rx483_cstack_done1494
    dec $I19
    set $P11, rx483_cstack[$I19]
  rx483_cstack_done1494:
    pop rx483_rep, rx483_bstack
    pop rx483_pos, rx483_bstack
    pop $I19, rx483_bstack
    lt rx483_pos, -1, rx483_done1489
    lt rx483_pos, 0, rx483_fail1491
    eq $I19, 0, rx483_fail1491
    nqp_islist $I20, rx483_cstack
    unless $I20, rx483_jump1492
    elements $I18, rx483_bstack
    le $I18, 0, rx483_cut1493
    dec $I18
    set $I18, rx483_bstack[$I18]
  rx483_cut1493:
    assign rx483_cstack, $I18
  rx483_jump1492:
    jump $I19
  rx483_done1489:
    rx483_cur."!cursor_fail"()
    .return (rx483_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<sigspace>" :subid("cuid_109_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 321
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx488_start
    .local string rx488_tgt
    .local int rx488_pos
    .local int rx488_off
    .local int rx488_eos
    .local int rx488_rep
    .local pmc rx488_cur
    .local pmc rx488_curclass
    .local pmc rx488_bstack
    .local pmc rx488_cstack
    rx488_start = self."!cursor_start_all"()
    set rx488_cur, rx488_start[0]
    set rx488_tgt, rx488_start[1]
    set rx488_pos, rx488_start[2]
    set rx488_curclass, rx488_start[3]
    set rx488_bstack, rx488_start[4]
    set $I19, rx488_start[5]
    store_lex unicode:"$\x{a2}", rx488_cur
    length rx488_eos, rx488_tgt
    eq $I19, 1, rx488_restart1505
    gt rx488_pos, rx488_eos, rx488_fail1506
    repr_get_attr_int $I11, self, rx488_curclass, "$!from"
    ne $I11, -1, rxscan489_done1512
    goto rxscan489_scan1511
  rxscan489_loop1510:
    inc rx488_pos
    gt rx488_pos, rx488_eos, rx488_fail1506
    repr_bind_attr_int rx488_cur, rx488_curclass, "$!from", rx488_pos
  rxscan489_scan1511:
    nqp_rxmark rx488_bstack, rxscan489_loop1510, rx488_pos, 0
  rxscan489_done1512:
    nqp_rxmark rx488_bstack, rxcap490_fail1514, rx488_pos, 0
    add $I11, rx488_pos, 1
    gt $I11, rx488_eos, rx488_fail1506
    substr $S10, rx488_tgt, rx488_pos, 1
    ne $S10, ucs4:"s", rx488_fail1506
    add rx488_pos, 1
    nqp_rxpeek $I19, rx488_bstack, rxcap490_fail1514
    inc $I19
    set $I11, rx488_bstack[$I19]
    repr_bind_attr_int rx488_cur, rx488_curclass, "$!pos", rx488_pos
    $P11 = rx488_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx488_pos)
    rx488_cstack = rx488_cur."!cursor_capture"($P11, "sym")
    goto rxcap490_done1513
  rxcap490_fail1514:
    goto rx488_fail1506
  rxcap490_done1513:
    nqp_rxmark rx488_bstack, rxquantr491_done1516, rx488_pos, 0
  rxquantr491_loop1515:
    add $I11, rx488_pos, 7
    gt $I11, rx488_eos, rx488_fail1506
    substr $S10, rx488_tgt, rx488_pos, 7
    ne $S10, ucs4:"igspace", rx488_fail1506
    add rx488_pos, 7
    nqp_rxpeek $I19, rx488_bstack, rxquantr491_done1516
    inc $I19
    inc $I19
    set rx488_rep, rx488_bstack[$I19]
    nqp_rxcommit rx488_bstack, rxquantr491_done1516
    inc rx488_rep
  rxquantr491_done1516:
    le rx488_pos, 0, rx488_fail1506
    is_cclass $I11, .CCLASS_WORD, rx488_tgt, rx488_pos
    if $I11, rx488_fail1506
    sub $I11, rx488_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx488_tgt, $I11
    unless $I11, rx488_fail1506
    rx488_cur."!cursor_pass"(rx488_pos, "mod_ident:sym<sigspace>", 'backtrack'=>1)
    .return (rx488_cur)
  rx488_restart1505:
    repr_get_attr_obj rx488_cstack, rx488_cur, rx488_curclass, "$!cstack"
  rx488_fail1506:
    unless rx488_bstack, rx488_done1504
    pop $I19, rx488_bstack
    if_null rx488_cstack, rx488_cstack_done1509
    unless rx488_cstack, rx488_cstack_done1509
    dec $I19
    set $P11, rx488_cstack[$I19]
  rx488_cstack_done1509:
    pop rx488_rep, rx488_bstack
    pop rx488_pos, rx488_bstack
    pop $I19, rx488_bstack
    lt rx488_pos, -1, rx488_done1504
    lt rx488_pos, 0, rx488_fail1506
    eq $I19, 0, rx488_fail1506
    nqp_islist $I20, rx488_cstack
    unless $I20, rx488_jump1507
    elements $I18, rx488_bstack
    le $I18, 0, rx488_cut1508
    dec $I18
    set $I18, rx488_bstack[$I18]
  rx488_cut1508:
    assign rx488_cstack, $I18
  rx488_jump1507:
    jump $I19
  rx488_done1504:
    rx488_cur."!cursor_fail"()
    .return (rx488_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<dba>" :subid("cuid_110_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 322
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx493_start
    .local string rx493_tgt
    .local int rx493_pos
    .local int rx493_off
    .local int rx493_eos
    .local int rx493_rep
    .local pmc rx493_cur
    .local pmc rx493_curclass
    .local pmc rx493_bstack
    .local pmc rx493_cstack
    rx493_start = self."!cursor_start_all"()
    set rx493_cur, rx493_start[0]
    set rx493_tgt, rx493_start[1]
    set rx493_pos, rx493_start[2]
    set rx493_curclass, rx493_start[3]
    set rx493_bstack, rx493_start[4]
    set $I19, rx493_start[5]
    store_lex unicode:"$\x{a2}", rx493_cur
    length rx493_eos, rx493_tgt
    eq $I19, 1, rx493_restart1520
    gt rx493_pos, rx493_eos, rx493_fail1521
    repr_get_attr_int $I11, self, rx493_curclass, "$!from"
    ne $I11, -1, rxscan494_done1527
    goto rxscan494_scan1526
  rxscan494_loop1525:
    inc rx493_pos
    gt rx493_pos, rx493_eos, rx493_fail1521
    repr_bind_attr_int rx493_cur, rx493_curclass, "$!from", rx493_pos
  rxscan494_scan1526:
    nqp_rxmark rx493_bstack, rxscan494_loop1525, rx493_pos, 0
  rxscan494_done1527:
    nqp_rxmark rx493_bstack, rxcap495_fail1529, rx493_pos, 0
    add $I11, rx493_pos, 3
    gt $I11, rx493_eos, rx493_fail1521
    substr $S10, rx493_tgt, rx493_pos, 3
    ne $S10, ucs4:"dba", rx493_fail1521
    add rx493_pos, 3
    nqp_rxpeek $I19, rx493_bstack, rxcap495_fail1529
    inc $I19
    set $I11, rx493_bstack[$I19]
    repr_bind_attr_int rx493_cur, rx493_curclass, "$!pos", rx493_pos
    $P11 = rx493_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx493_pos)
    rx493_cstack = rx493_cur."!cursor_capture"($P11, "sym")
    goto rxcap495_done1528
  rxcap495_fail1529:
    goto rx493_fail1521
  rxcap495_done1528:
    le rx493_pos, 0, rx493_fail1521
    is_cclass $I11, .CCLASS_WORD, rx493_tgt, rx493_pos
    if $I11, rx493_fail1521
    sub $I11, rx493_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx493_tgt, $I11
    unless $I11, rx493_fail1521
    rx493_cur."!cursor_pass"(rx493_pos, "mod_ident:sym<dba>", 'backtrack'=>1)
    .return (rx493_cur)
  rx493_restart1520:
    repr_get_attr_obj rx493_cstack, rx493_cur, rx493_curclass, "$!cstack"
  rx493_fail1521:
    unless rx493_bstack, rx493_done1519
    pop $I19, rx493_bstack
    if_null rx493_cstack, rx493_cstack_done1524
    unless rx493_cstack, rx493_cstack_done1524
    dec $I19
    set $P11, rx493_cstack[$I19]
  rx493_cstack_done1524:
    pop rx493_rep, rx493_bstack
    pop rx493_pos, rx493_bstack
    pop $I19, rx493_bstack
    lt rx493_pos, -1, rx493_done1519
    lt rx493_pos, 0, rx493_fail1521
    eq $I19, 0, rx493_fail1521
    nqp_islist $I20, rx493_cstack
    unless $I20, rx493_jump1522
    elements $I18, rx493_bstack
    le $I18, 0, rx493_cut1523
    dec $I18
    set $I18, rx493_bstack[$I18]
  rx493_cut1523:
    assign rx493_cstack, $I18
  rx493_jump1522:
    jump $I19
  rx493_done1519:
    rx493_cur."!cursor_fail"()
    .return (rx493_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<oops>" :subid("cuid_111_1367388594.4399") :anon :lex :outer("cuid_180_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 323
    .param pmc _lex_param_0 
    .const 'Sub' $P5008 = 'cuid_193_1367388594.4399' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_112_1367388594.4399' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_194_1367388594.4399' 
    capture_lex $P5008 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx497_start
    .local string rx497_tgt
    .local int rx497_pos
    .local int rx497_off
    .local int rx497_eos
    .local int rx497_rep
    .local pmc rx497_cur
    .local pmc rx497_curclass
    .local pmc rx497_bstack
    .local pmc rx497_cstack
    rx497_start = self."!cursor_start_all"()
    set rx497_cur, rx497_start[0]
    set rx497_tgt, rx497_start[1]
    set rx497_pos, rx497_start[2]
    set rx497_curclass, rx497_start[3]
    set rx497_bstack, rx497_start[4]
    set $I19, rx497_start[5]
    store_lex unicode:"$\x{a2}", rx497_cur
    length rx497_eos, rx497_tgt
    eq $I19, 1, rx497_restart1533
    gt rx497_pos, rx497_eos, rx497_fail1534
    repr_get_attr_int $I11, self, rx497_curclass, "$!from"
    ne $I11, -1, rxscan498_done1540
    goto rxscan498_scan1539
  rxscan498_loop1538:
    inc rx497_pos
    gt rx497_pos, rx497_eos, rx497_fail1534
    repr_bind_attr_int rx497_cur, rx497_curclass, "$!from", rx497_pos
  rxscan498_scan1539:
    nqp_rxmark rx497_bstack, rxscan498_loop1538, rx497_pos, 0
  rxscan498_done1540:
    repr_bind_attr_int rx497_cur, rx497_curclass, "$!pos", rx497_pos
    store_lex unicode:"$\x{a2}", rx497_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_193_1367388594.4399' 
    capture_lex $P5002
    $P5003 = $P5002()
    .const 'Sub' $P5004 = 'cuid_112_1367388594.4399' 
    capture_lex $P5004
    repr_bind_attr_int rx497_cur, rx497_curclass, "$!pos", rx497_pos
    $P11 = rx497_cur.$P5004()
    repr_get_attr_int $I11, $P11, rx497_curclass, "$!pos"
    lt $I11, 0, rx497_fail1534
    nqp_rxmark rx497_bstack, rxsubrule502_pass1553, -1, 0
  rxsubrule502_pass1553:
    rx497_cstack = rx497_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx497_pos, $P11, rx497_curclass, "$!pos"
    repr_bind_attr_int rx497_cur, rx497_curclass, "$!pos", rx497_pos
    store_lex unicode:"$\x{a2}", rx497_cur
    $P5005 = $P101."MATCH"()
    set $P102, $P5005
    .const 'Sub' $P5006 = 'cuid_194_1367388594.4399' 
    capture_lex $P5006
    $P5007 = $P5006()
    rx497_cur."!cursor_pass"(rx497_pos, "mod_ident:sym<oops>", 'backtrack'=>1)
    .return (rx497_cur)
  rx497_restart1533:
    repr_get_attr_obj rx497_cstack, rx497_cur, rx497_curclass, "$!cstack"
  rx497_fail1534:
    unless rx497_bstack, rx497_done1532
    pop $I19, rx497_bstack
    if_null rx497_cstack, rx497_cstack_done1537
    unless rx497_cstack, rx497_cstack_done1537
    dec $I19
    set $P11, rx497_cstack[$I19]
  rx497_cstack_done1537:
    pop rx497_rep, rx497_bstack
    pop rx497_pos, rx497_bstack
    pop $I19, rx497_bstack
    lt rx497_pos, -1, rx497_done1532
    lt rx497_pos, 0, rx497_fail1534
    eq $I19, 0, rx497_fail1534
    nqp_islist $I20, rx497_cstack
    unless $I20, rx497_jump1535
    elements $I18, rx497_bstack
    le $I18, 0, rx497_cut1536
    dec $I18
    set $I18, rx497_bstack[$I18]
  rx497_cut1536:
    assign rx497_cstack, $I18
  rx497_jump1535:
    jump $I19
  rx497_done1532:
    rx497_cur."!cursor_fail"()
    .return (rx497_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_193_1367388594.4399") :anon :lex :outer("cuid_111_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 323

    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_112_1367388594.4399") :anon :lex :outer("cuid_111_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx499_start
    .local string rx499_tgt
    .local int rx499_pos
    .local int rx499_off
    .local int rx499_eos
    .local int rx499_rep
    .local pmc rx499_cur
    .local pmc rx499_curclass
    .local pmc rx499_bstack
    .local pmc rx499_cstack
    rx499_start = self."!cursor_start_all"()
    set rx499_cur, rx499_start[0]
    set rx499_tgt, rx499_start[1]
    set rx499_pos, rx499_start[2]
    set rx499_curclass, rx499_start[3]
    set rx499_bstack, rx499_start[4]
    set $I19, rx499_start[5]
    store_lex unicode:"$\x{a2}", rx499_cur
    length rx499_eos, rx499_tgt
    eq $I19, 1, rx499_restart1543
    gt rx499_pos, rx499_eos, rx499_fail1544
    repr_get_attr_int $I11, self, rx499_curclass, "$!from"
    ne $I11, -1, rxscan500_done1550
    goto rxscan500_scan1549
  rxscan500_loop1548:
    inc rx499_pos
    gt rx499_pos, rx499_eos, rx499_fail1544
    repr_bind_attr_int rx499_cur, rx499_curclass, "$!from", rx499_pos
  rxscan500_scan1549:
    nqp_rxmark rx499_bstack, rxscan500_loop1548, rx499_pos, 0
  rxscan500_done1550:
    nqp_rxmark rx499_bstack, rxquantr501_done1552, -1, 0
  rxquantr501_loop1551:
    ge rx499_pos, rx499_eos, rx499_fail1544
    is_cclass $I11, .CCLASS_WORD, rx499_tgt, rx499_pos
    unless $I11, rx499_fail1544
    add rx499_pos, 1
    nqp_rxpeek $I19, rx499_bstack, rxquantr501_done1552
    inc $I19
    inc $I19
    set rx499_rep, rx499_bstack[$I19]
    nqp_rxcommit rx499_bstack, rxquantr501_done1552
    inc rx499_rep
    nqp_rxmark rx499_bstack, rxquantr501_done1552, rx499_pos, rx499_rep
    goto rxquantr501_loop1551
  rxquantr501_done1552:
    rx499_cur."!cursor_pass"(rx499_pos, 'backtrack'=>1)
    .return (rx499_cur)
  rx499_restart1543:
    repr_get_attr_obj rx499_cstack, rx499_cur, rx499_curclass, "$!cstack"
  rx499_fail1544:
    unless rx499_bstack, rx499_done1542
    pop $I19, rx499_bstack
    if_null rx499_cstack, rx499_cstack_done1547
    unless rx499_cstack, rx499_cstack_done1547
    dec $I19
    set $P11, rx499_cstack[$I19]
  rx499_cstack_done1547:
    pop rx499_rep, rx499_bstack
    pop rx499_pos, rx499_bstack
    pop $I19, rx499_bstack
    lt rx499_pos, -1, rx499_done1542
    lt rx499_pos, 0, rx499_fail1544
    eq $I19, 0, rx499_fail1544
    nqp_islist $I20, rx499_cstack
    unless $I20, rx499_jump1545
    elements $I18, rx499_bstack
    le $I18, 0, rx499_cut1546
    dec $I18
    set $I18, rx499_bstack[$I18]
  rx499_cut1546:
    assign rx499_cstack, $I18
  rx499_jump1545:
    jump $I19
  rx499_done1542:
    rx499_cur."!cursor_fail"()
    .return (rx499_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_194_1367388594.4399") :anon :lex :outer("cuid_111_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 323
    .local pmc fb_tmp_7 
    find_lex $P5001, "$/"
    $P5002 = $P5001."CURSOR"()
    find_lex $P5003, "$/"
    set fb_tmp_7, $P5003
    repr_defined $I5001, fb_tmp_7
    unless $I5001 goto if503_else1554 
    set $P5004, fb_tmp_7[0]
    set $P5006, $P5004
    goto if503_end1555
  if503_else1554:
    null $P5005
    set $P5006, $P5005
  if503_end1555:
    unless_null $P5006, vivi_5041556
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5006, $P5007
  vivi_5041556:
    $P5008 = $P5006."Str"()
    set $S5002, $P5008
    concat $S5001, "Unrecognized regex modifier :", $S5002
    $P5009 = $P5002."panic"($S5001)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_196_1367388594.4399") :anon :lex :outer("cuid_177_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 327
    .const 'Sub' $P5066 = 'cuid_195_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_199_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_113_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_114_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_115_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_116_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_117_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_118_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_119_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_120_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_121_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_122_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_123_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_124_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_125_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_126_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_127_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_128_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_129_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_130_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_131_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_132_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_133_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_134_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_135_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_136_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_137_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_138_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_139_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_140_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_141_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_142_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_143_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_144_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_145_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_146_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_147_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_148_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_149_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_150_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_151_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_152_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_153_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_154_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_155_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_156_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_157_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_158_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_159_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_160_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_161_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_162_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_163_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_164_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_165_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_166_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_167_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_168_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_169_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_170_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_171_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_172_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_173_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_174_1367388594.4399' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_175_1367388594.4399' 
    capture_lex $P5066 
    .lex "&backmod", $P101 
    .lex "&capnames", $P102 
    .lex "$?PACKAGE", $P103 
    .lex "$?CLASS", $P104 
    .const 'Sub' $P5001 = 'cuid_195_1367388594.4399' 
    capture_lex $P5001
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_199_1367388594.4399' 
    capture_lex $P5002
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_113_1367388594.4399' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_114_1367388594.4399' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_115_1367388594.4399' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_116_1367388594.4399' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_117_1367388594.4399' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_118_1367388594.4399' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_119_1367388594.4399' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_120_1367388594.4399' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_121_1367388594.4399' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_122_1367388594.4399' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_123_1367388594.4399' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_124_1367388594.4399' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_125_1367388594.4399' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_126_1367388594.4399' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_127_1367388594.4399' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_128_1367388594.4399' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_129_1367388594.4399' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_130_1367388594.4399' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_131_1367388594.4399' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_132_1367388594.4399' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_133_1367388594.4399' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_134_1367388594.4399' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_135_1367388594.4399' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_136_1367388594.4399' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_137_1367388594.4399' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_138_1367388594.4399' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_139_1367388594.4399' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_140_1367388594.4399' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_141_1367388594.4399' 
    capture_lex $P5031
    .const 'Sub' $P5032 = 'cuid_142_1367388594.4399' 
    capture_lex $P5032
    .const 'Sub' $P5033 = 'cuid_143_1367388594.4399' 
    capture_lex $P5033
    .const 'Sub' $P5034 = 'cuid_144_1367388594.4399' 
    capture_lex $P5034
    .const 'Sub' $P5035 = 'cuid_145_1367388594.4399' 
    capture_lex $P5035
    .const 'Sub' $P5036 = 'cuid_146_1367388594.4399' 
    capture_lex $P5036
    .const 'Sub' $P5037 = 'cuid_147_1367388594.4399' 
    capture_lex $P5037
    .const 'Sub' $P5038 = 'cuid_148_1367388594.4399' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_149_1367388594.4399' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_150_1367388594.4399' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_151_1367388594.4399' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_152_1367388594.4399' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_153_1367388594.4399' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_154_1367388594.4399' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_155_1367388594.4399' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_156_1367388594.4399' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_157_1367388594.4399' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_158_1367388594.4399' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_159_1367388594.4399' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_160_1367388594.4399' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_161_1367388594.4399' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_162_1367388594.4399' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_163_1367388594.4399' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_164_1367388594.4399' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_165_1367388594.4399' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_166_1367388594.4399' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_167_1367388594.4399' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_168_1367388594.4399' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_169_1367388594.4399' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_170_1367388594.4399' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_171_1367388594.4399' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_172_1367388594.4399' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_173_1367388594.4399' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_174_1367388594.4399' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_175_1367388594.4399' 
    capture_lex $P5065
    .return ($P5065) 
.end
.HLL "nqp"
.namespace []
.sub "backmod" :subid("cuid_195_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 877
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$ast", _lex_param_0 
    .lex "$backmod", _lex_param_1 
    set $S5001, _lex_param_1
    iseq $I5001, $S5001, ":"
    unless $I5001 goto if505_else1557 
.annotate 'line', 878
    $P5001 = _lex_param_0."backtrack"("r")
    goto if505_end1558
  if505_else1557:
    set $S5002, _lex_param_1
    iseq $I5002, $S5002, ":?"
    set $I5004, $I5002
    if $I5002 goto unless507_end1562 
    set $S5003, _lex_param_1
    iseq $I5003, $S5003, "?"
    set $I5004, $I5003
  unless507_end1562:
    unless $I5004 goto if506_else1559 
.annotate 'line', 879
    $P5002 = _lex_param_0."backtrack"("f")
    set $P5006, $P5002
    goto if506_end1560
  if506_else1559:
    set $S5004, _lex_param_1
    iseq $I5005, $S5004, ":!"
    set $I5007, $I5005
    if $I5005 goto unless509_end1566 
    set $S5005, _lex_param_1
    iseq $I5006, $S5005, "!"
    set $I5007, $I5006
  unless509_end1566:
    box $P5005, $I5007
    set $P5004, $P5005
    unless $I5007 goto if508_end1564 
.annotate 'line', 880
    $P5003 = _lex_param_0."backtrack"("g")
    set $P5004, $P5003
  if508_end1564:
    set $P5006, $P5004
  if506_end1560:
  if505_end1558:
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "capnames" :subid("cuid_199_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 921
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5024 = 'cuid_198_1367388594.4399' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_202_1367388594.4399' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_204_1367388594.4399' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_206_1367388594.4399' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_209_1367388594.4399' 
    capture_lex $P5024 
    .lex "%capnames", $P101 
    .lex "$rxtype", $P102 
    .lex "$ast", _lex_param_0 
    .lex "$count", _lex_param_1 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P102, $P5002
.annotate 'line', 923
    $P5003 = _lex_param_0."rxtype"()
    set $P102, $P5003
    set $S5001, $P102
    iseq $I5001, $S5001, "concat"
    unless $I5001 goto if510_else1567 
.annotate 'line', 924
.annotate 'line', 925
    $P5007 = _lex_param_0."list"()
    set $P5004, $P5007
    iter $P5006, $P5007
  for_next1578:
    unless $P5006, for_done1580
    shift $P5009, $P5006
  for_redo1579:
    .const 'Sub' $P5008 = 'cuid_198_1367388594.4399' 
    capture_lex $P5008
    $P5004 = $P5008($P5009)
    goto for_next1578
  for_done1580:
    goto if510_end1568
  if510_else1567:
    set $S5002, $P102
    iseq $I5002, $S5002, "altseq"
    set $I5004, $I5002
    if $I5002 goto unless516_end1584 
    set $S5003, $P102
    iseq $I5003, $S5003, "alt"
    set $I5004, $I5003
  unless516_end1584:
    unless $I5004 goto if515_else1581 
    .const 'Sub' $P5010 = 'cuid_202_1367388594.4399' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5023, $P5011
    goto if515_end1582
  if515_else1581:
    set $S5004, $P102
    iseq $I5005, $S5004, "subrule"
    set $I5007, $I5005
    unless $I5005 goto if529_end1612 
.annotate 'line', 942
    $P5012 = _lex_param_0."subtype"()
    set $S5005, $P5012
    iseq $I5006, $S5005, "capture"
    set $I5007, $I5006
  if529_end1612:
    unless $I5007 goto if528_else1609 
    .const 'Sub' $P5013 = 'cuid_204_1367388594.4399' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5022, $P5014
    goto if528_end1610
  if528_else1609:
    set $S5006, $P102
    iseq $I5008, $S5006, "subcapture"
    unless $I5008 goto if533_else1622 
    .const 'Sub' $P5015 = 'cuid_206_1367388594.4399' 
    capture_lex $P5015
    $P5016 = $P5015()
    set $P5021, $P5016
    goto if533_end1623
  if533_else1622:
    set $S5007, $P102
    iseq $I5009, $S5007, "quant"
    box $P5020, $I5009
    set $P5019, $P5020
    unless $I5009 goto if544_end1647 
    .const 'Sub' $P5017 = 'cuid_209_1367388594.4399' 
    capture_lex $P5017
    $P5018 = $P5017()
    set $P5019, $P5018
  if544_end1647:
    set $P5021, $P5019
  if533_end1623:
    set $P5022, $P5021
  if528_end1610:
    set $P5023, $P5022
  if515_end1582:
  if510_end1568:
    set $P101[""], _lex_param_1
    delete $P101["$!from"]
    delete $P101["$!to"]
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_198_1367388594.4399") :anon :lex :outer("cuid_199_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 925
    .param pmc _lex_param_0 
    .const 'Sub' $P5013 = 'cuid_197_1367388594.4399' 
    capture_lex $P5013 
    .lex "%x", $P101 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_9 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 926
    find_lex $P5002, "$count"
    $P5003 = "&capnames"(_lex_param_0, $P5002)
    set $P101, $P5003
    set $P5004, $P101
    iter $P5006, $P101
  for_next1572:
    unless $P5006, for_done1574
    shift $P5008, $P5006
  for_redo1573:
    .const 'Sub' $P5007 = 'cuid_197_1367388594.4399' 
    capture_lex $P5007
    $P5004 = $P5007($P5008)
    goto for_next1572
  for_done1574:
    set fb_tmp_9, $P101
    repr_defined $I5001, fb_tmp_9
    unless $I5001 goto if513_else1575 
    set $P5009, fb_tmp_9[""]
    set $P5011, $P5009
    goto if513_end1576
  if513_else1575:
    null $P5010
    set $P5011, $P5010
  if513_end1576:
    unless_null $P5011, vivi_5141577
    nqp_get_sc_object $P5012, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5011, $P5012
  vivi_5141577:
    store_lex "$count", $P5011
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_197_1367388594.4399") :anon :lex :outer("cuid_198_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 927
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_8 
    find_lex $P5001, "%capnames"
    $P5002 = _lex_param_0."key"()
    set $S5001, $P5002
    find_lex $P5003, "%capnames"
    set fb_tmp_8, $P5003
    repr_defined $I5001, fb_tmp_8
    unless $I5001 goto if511_else1569 
    $P5005 = _lex_param_0."key"()
    set $S5002, $P5005
    set $P5004, fb_tmp_8[$S5002]
    set $P5007, $P5004
    goto if511_end1570
  if511_else1569:
    null $P5006
    set $P5007, $P5006
  if511_end1570:
    unless_null $P5007, vivi_5121571
    nqp_get_sc_object $P5008, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5007, $P5008
  vivi_5121571:
    set $N5002, $P5007
    $P5009 = _lex_param_0."value"()
    set $N5003, $P5009
    add $N5001, $N5002, $N5003
    box $P5010, $N5001
    set $P5001[$S5001], $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_202_1367388594.4399") :anon :lex :outer("cuid_199_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 931
    .const 'Sub' $P5010 = 'cuid_201_1367388594.4399' 
    capture_lex $P5010 
    .lex "$max", $P101 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
    find_lex $P5002, "$count"
    set $P101, $P5002
.annotate 'line', 933
    find_lex $P5006, "$ast"
    $P5007 = $P5006."list"()
    set $P5003, $P5007
    iter $P5005, $P5007
  for_next1606:
    unless $P5005, for_done1608
    shift $P5009, $P5005
  for_redo1607:
    .const 'Sub' $P5008 = 'cuid_201_1367388594.4399' 
    capture_lex $P5008
    $P5003 = $P5008($P5009)
    goto for_next1606
  for_done1608:
    store_lex "$count", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_201_1367388594.4399") :anon :lex :outer("cuid_202_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 933
    .param pmc _lex_param_0 
    .const 'Sub' $P5020 = 'cuid_200_1367388594.4399' 
    capture_lex $P5020 
    .lex "%x", $P101 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_12 
    .local pmc fb_tmp_13 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 934
    find_lex $P5002, "$count"
    $P5003 = "&capnames"(_lex_param_0, $P5002)
    set $P101, $P5003
    set $P5004, $P101
    iter $P5006, $P101
  for_next1595:
    unless $P5006, for_done1597
    shift $P5008, $P5006
  for_redo1596:
    .const 'Sub' $P5007 = 'cuid_200_1367388594.4399' 
    capture_lex $P5007
    $P5004 = $P5007($P5008)
    goto for_next1595
  for_done1597:
    set fb_tmp_12, $P101
    repr_defined $I5002, fb_tmp_12
    unless $I5002 goto if524_else1600 
    set $P5009, fb_tmp_12[""]
    set $P5011, $P5009
    goto if524_end1601
  if524_else1600:
    null $P5010
    set $P5011, $P5010
  if524_end1601:
    unless_null $P5011, vivi_5251602
    nqp_get_sc_object $P5012, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5011, $P5012
  vivi_5251602:
    set $N5001, $P5011
    find_lex $P5013, "$max"
    set $N5002, $P5013
    isgt $I5001, $N5001, $N5002
    box $P5019, $I5001
    set $P5018, $P5019
    unless $I5001 goto if523_end1599 
    set fb_tmp_13, $P101
    repr_defined $I5003, fb_tmp_13
    unless $I5003 goto if526_else1603 
    set $P5014, fb_tmp_13[""]
    set $P5016, $P5014
    goto if526_end1604
  if526_else1603:
    null $P5015
    set $P5016, $P5015
  if526_end1604:
    unless_null $P5016, vivi_5271605
    nqp_get_sc_object $P5017, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5016, $P5017
  vivi_5271605:
    store_lex "$max", $P5016
    set $P5018, $P5016
  if523_end1599:
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_200_1367388594.4399") :anon :lex :outer("cuid_201_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 935
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_10 
    .local pmc fb_tmp_11 
    find_lex $P5001, "%capnames"
.annotate 'line', 936
    $P5002 = _lex_param_0."key"()
    set $S5001, $P5002
    find_lex $P5003, "%capnames"
    set fb_tmp_10, $P5003
    repr_defined $I5002, fb_tmp_10
    unless $I5002 goto if519_else1589 
    $P5005 = _lex_param_0."key"()
    set $S5002, $P5005
    set $P5004, fb_tmp_10[$S5002]
    set $P5007, $P5004
    goto if519_end1590
  if519_else1589:
    null $P5006
    set $P5007, $P5006
  if519_end1590:
    unless_null $P5007, vivi_5201591
    nqp_get_sc_object $P5008, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5007, $P5008
  vivi_5201591:
    set $N5001, $P5007
    set $N5002, 2
    islt $I5001, $N5001, $N5002
    set $I5005, $I5001
    unless $I5001 goto if518_end1588 
    find_lex $P5009, "%x"
    set fb_tmp_11, $P5009
    repr_defined $I5004, fb_tmp_11
    unless $I5004 goto if521_else1592 
    $P5011 = _lex_param_0."key"()
    set $S5003, $P5011
    set $P5010, fb_tmp_11[$S5003]
    set $P5013, $P5010
    goto if521_end1593
  if521_else1592:
    null $P5012
    set $P5013, $P5012
  if521_end1593:
    unless_null $P5013, vivi_5221594
    nqp_get_sc_object $P5014, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5013, $P5014
  vivi_5221594:
    set $N5003, $P5013
    set $N5004, 1
    iseq $I5003, $N5003, $N5004
    set $I5005, $I5003
  if518_end1588:
    unless $I5005 goto if517_else1585 
    set $I5006, 1
    goto if517_end1586
  if517_else1585:
    set $I5006, 2
  if517_end1586:
    box $P5015, $I5006
    set $P5001[$S5001], $P5015
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_204_1367388594.4399") :anon :lex :outer("cuid_199_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 942
    .const 'Sub' $P5014 = 'cuid_203_1367388594.4399' 
    capture_lex $P5014 
    .lex "$name", $P101 
    .lex "@names", $P102 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
.annotate 'line', 943
    find_lex $P5003, "$ast"
    $P5004 = $P5003."name"()
    set $P101, $P5004
    set $S5001, $P101
    iseq $I5001, $S5001, ""
    unless $I5001 goto if530_end1614 
.annotate 'line', 944
    find_lex $P5005, "$count"
    set $P101, $P5005
    find_lex $P5006, "$ast"
    $P5007 = $P5006."name"($P101)
  if530_end1614:
    set $S5002, $P101
    split $P5008, "=", $S5002
    set $P102, $P5008
    set $P5009, $P102
    iter $P5011, $P102
  for_next1619:
    unless $P5011, for_done1621
    shift $P5013, $P5011
  for_redo1620:
    .const 'Sub' $P5012 = 'cuid_203_1367388594.4399' 
    capture_lex $P5012
    $P5009 = $P5012($P5013)
    goto for_next1619
  for_done1621:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_203_1367388594.4399") :anon :lex :outer("cuid_204_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 946
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    set $S5001, _lex_param_0
    iseq $I5001, $S5001, "0"
    set $I5003, $I5001
    if $I5001 goto unless532_end1618 
    set $N5001, _lex_param_0
    set $N5002, 0
    isgt $I5002, $N5001, $N5002
    set $I5003, $I5002
  unless532_end1618:
    unless $I5003 goto if531_end1616 
.annotate 'line', 947
    set $N5004, _lex_param_0
    set $N5005, 1
    add $N5003, $N5004, $N5005
    box $P5001, $N5003
    store_lex "$count", $P5001
  if531_end1616:
    find_lex $P5002, "%capnames"
    set $S5002, _lex_param_0
    box $P5003, 1
    set $P5002[$S5002], $P5003
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_206_1367388594.4399") :anon :lex :outer("cuid_199_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 951
    .const 'Sub' $P5026 = 'cuid_205_1367388594.4399' 
    capture_lex $P5026 
    .const 'Sub' $P5026 = 'cuid_207_1367388594.4399' 
    capture_lex $P5026 
    .lex "%x", $P101 
    .local pmc fb_tmp_14 
    .local pmc fb_tmp_17 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 952
    find_lex $P5006, "$ast"
    $P5007 = $P5006."name"()
    set $S5001, $P5007
    split $P5005, " ", $S5001
    set $P5002, $P5005
    iter $P5004, $P5005
  for_next1628:
    unless $P5004, for_done1630
    shift $P5009, $P5004
  for_redo1629:
    .const 'Sub' $P5008 = 'cuid_205_1367388594.4399' 
    capture_lex $P5008
    $P5002 = $P5008($P5009)
    goto for_next1628
  for_done1630:
.annotate 'line', 956
    find_lex $P5010, "$ast"
    set fb_tmp_14, $P5010
    repr_defined $I5001, fb_tmp_14
    unless $I5001 goto if536_else1631 
    set $P5011, fb_tmp_14[0]
    set $P5013, $P5011
    goto if536_end1632
  if536_else1631:
    null $P5012
    set $P5013, $P5012
  if536_end1632:
    unless_null $P5013, vivi_5371633
    nqp_get_sc_object $P5014, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5013, $P5014
  vivi_5371633:
    find_lex $P5015, "$count"
    $P5016 = "&capnames"($P5013, $P5015)
    set $P101, $P5016
    set $P5017, $P101
    iter $P5019, $P101
  for_next1640:
    unless $P5019, for_done1642
    shift $P5021, $P5019
  for_redo1641:
    .const 'Sub' $P5020 = 'cuid_207_1367388594.4399' 
    capture_lex $P5020
    $P5017 = $P5020($P5021)
    goto for_next1640
  for_done1642:
    set fb_tmp_17, $P101
    repr_defined $I5002, fb_tmp_17
    unless $I5002 goto if542_else1643 
    set $P5022, fb_tmp_17[""]
    set $P5024, $P5022
    goto if542_end1644
  if542_else1643:
    null $P5023
    set $P5024, $P5023
  if542_end1644:
    unless_null $P5024, vivi_5431645
    nqp_get_sc_object $P5025, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5024, $P5025
  vivi_5431645:
    store_lex "$count", $P5024
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_205_1367388594.4399") :anon :lex :outer("cuid_206_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 952
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    set $S5001, _lex_param_0
    iseq $I5001, $S5001, "0"
    set $I5003, $I5001
    if $I5001 goto unless535_end1627 
    set $N5001, _lex_param_0
    set $N5002, 0
    isgt $I5002, $N5001, $N5002
    set $I5003, $I5002
  unless535_end1627:
    unless $I5003 goto if534_end1625 
.annotate 'line', 953
    set $N5004, _lex_param_0
    set $N5005, 1
    add $N5003, $N5004, $N5005
    box $P5001, $N5003
    store_lex "$count", $P5001
  if534_end1625:
    find_lex $P5002, "%capnames"
    set $S5002, _lex_param_0
    box $P5003, 1
    set $P5002[$S5002], $P5003
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_207_1367388594.4399") :anon :lex :outer("cuid_206_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 957
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_15 
    .local pmc fb_tmp_16 
    find_lex $P5001, "%capnames"
    $P5002 = _lex_param_0."key"()
    set $S5001, $P5002
    find_lex $P5003, "%capnames"
    set fb_tmp_15, $P5003
    repr_defined $I5001, fb_tmp_15
    unless $I5001 goto if538_else1634 
    $P5005 = _lex_param_0."key"()
    set $S5002, $P5005
    set $P5004, fb_tmp_15[$S5002]
    set $P5007, $P5004
    goto if538_end1635
  if538_else1634:
    null $P5006
    set $P5007, $P5006
  if538_end1635:
    unless_null $P5007, vivi_5391636
    nqp_get_sc_object $P5008, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5007, $P5008
  vivi_5391636:
    set $N5002, $P5007
    find_lex $P5009, "%x"
    set fb_tmp_16, $P5009
    repr_defined $I5002, fb_tmp_16
    unless $I5002 goto if540_else1637 
    $P5011 = _lex_param_0."key"()
    set $S5003, $P5011
    set $P5010, fb_tmp_16[$S5003]
    set $P5013, $P5010
    goto if540_end1638
  if540_else1637:
    null $P5012
    set $P5013, $P5012
  if540_end1638:
    unless_null $P5013, vivi_5411639
    nqp_get_sc_object $P5014, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5013, $P5014
  vivi_5411639:
    set $N5003, $P5013
    add $N5001, $N5002, $N5003
    box $P5015, $N5001
    set $P5001[$S5001], $P5015
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_209_1367388594.4399") :anon :lex :outer("cuid_199_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 960
    .const 'Sub' $P5022 = 'cuid_208_1367388594.4399' 
    capture_lex $P5022 
    .lex "%astcap", $P101 
    .lex "$ilist", $P102 
    .local pmc fb_tmp_18 
    .local pmc fb_tmp_19 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P102, $P5002
.annotate 'line', 961
    find_lex $P5003, "$ast"
    set fb_tmp_18, $P5003
    repr_defined $I5001, fb_tmp_18
    unless $I5001 goto if545_else1648 
    set $P5004, fb_tmp_18[0]
    set $P5006, $P5004
    goto if545_end1649
  if545_else1648:
    null $P5005
    set $P5006, $P5005
  if545_end1649:
    unless_null $P5006, vivi_5461650
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5006, $P5007
  vivi_5461650:
    find_lex $P5008, "$count"
    $P5009 = "&capnames"($P5006, $P5008)
    set $P101, $P5009
.annotate 'line', 962
    find_lex $P5010, "$ast"
    $P5011 = $P5010."subtype"()
    set $S5001, $P5011
    iseq $I5002, $S5001, "item"
    box $P5012, $I5002
    set $P102, $P5012
    set $P5013, $P101
    iter $P5015, $P101
  for_next1653:
    unless $P5015, for_done1655
    shift $P5017, $P5015
  for_redo1654:
    .const 'Sub' $P5016 = 'cuid_208_1367388594.4399' 
    capture_lex $P5016
    $P5013 = $P5016($P5017)
    goto for_next1653
  for_done1655:
    set fb_tmp_19, $P101
    repr_defined $I5003, fb_tmp_19
    unless $I5003 goto if548_else1656 
    set $P5018, fb_tmp_19[""]
    set $P5020, $P5018
    goto if548_end1657
  if548_else1656:
    null $P5019
    set $P5020, $P5019
  if548_end1657:
    unless_null $P5020, vivi_5491658
    nqp_get_sc_object $P5021, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5020, $P5021
  vivi_5491658:
    store_lex "$count", $P5020
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_208_1367388594.4399") :anon :lex :outer("cuid_209_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 963
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "%capnames"
    $P5002 = _lex_param_0."key"()
    set $S5001, $P5002
    find_lex $P5003, "$ilist"
    unless $P5003 goto if547_else1651 
    $P5004 = _lex_param_0."value"()
    set $P5005, $P5004
    goto if547_end1652
  if547_else1651:
    box $P5006, 2
    set $P5005, $P5006
  if547_end1652:
    set $P5001[$S5001], $P5005
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_113_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 328
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_20 
    .local pmc fb_tmp_21 
    .local pmc fb_tmp_22 
    .local pmc fb_tmp_23 
    .local pmc fb_tmp_24 
.annotate 'line', 329
    nqp_get_sc_object $P5001, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 114
.annotate 'line', 331
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback1659
    nqp_get_sc_object $P5004, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 0
    get_who $P5003, $P5004
    set fb_tmp_20, $P5003
    repr_defined $I5001, fb_tmp_20
    unless $I5001 goto if550_else1660 
    set $P5005, fb_tmp_20["$W"]
    set $P5007, $P5005
    goto if550_end1661
  if550_else1660:
    null $P5006
    set $P5007, $P5006
  if550_end1661:
    unless_null $P5007, vivi_5511662
    nqp_get_sc_object $P5008, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5007, $P5008
  vivi_5511662:
    unless_null $P5007, vivi_5521663
    die "Contextual $*W not found"
    box $P5009, "Contextual $*W not found"
    set $P5007, $P5009
  vivi_5521663:
    set $P5002, $P5007
  fallback1659:
    $P5010 = $P5002."sc"()
.annotate 'line', 332
    find_dynamic_lex $P5011, "$*W"
    unless_null $P5011, fallback1664
    nqp_get_sc_object $P5013, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 0
    get_who $P5012, $P5013
    set fb_tmp_21, $P5012
    repr_defined $I5002, fb_tmp_21
    unless $I5002 goto if553_else1665 
    set $P5014, fb_tmp_21["$W"]
    set $P5016, $P5014
    goto if553_end1666
  if553_else1665:
    null $P5015
    set $P5016, $P5015
  if553_end1666:
    unless_null $P5016, vivi_5541667
    nqp_get_sc_object $P5017, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5016, $P5017
  vivi_5541667:
    unless_null $P5016, vivi_5551668
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5016, $P5018
  vivi_5551668:
    set $P5011, $P5016
  fallback1664:
    $P5019 = $P5011."code_ref_blocks"()
.annotate 'line', 334
    find_dynamic_lex $P5020, "$*W"
    unless_null $P5020, fallback1669
    nqp_get_sc_object $P5022, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 0
    get_who $P5021, $P5022
    set fb_tmp_22, $P5021
    repr_defined $I5003, fb_tmp_22
    unless $I5003 goto if556_else1670 
    set $P5023, fb_tmp_22["$W"]
    set $P5025, $P5023
    goto if556_end1671
  if556_else1670:
    null $P5024
    set $P5025, $P5024
  if556_end1671:
    unless_null $P5025, vivi_5571672
    nqp_get_sc_object $P5026, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5025, $P5026
  vivi_5571672:
    unless_null $P5025, vivi_5581673
    die "Contextual $*W not found"
    box $P5027, "Contextual $*W not found"
    set $P5025, $P5027
  vivi_5581673:
    set $P5020, $P5025
  fallback1669:
    $P5028 = $P5020."load_dependency_tasks"()
.annotate 'line', 335
    find_dynamic_lex $P5029, "$*W"
    unless_null $P5029, fallback1674
    nqp_get_sc_object $P5031, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 0
    get_who $P5030, $P5031
    set fb_tmp_23, $P5030
    repr_defined $I5004, fb_tmp_23
    unless $I5004 goto if559_else1675 
    set $P5032, fb_tmp_23["$W"]
    set $P5034, $P5032
    goto if559_end1676
  if559_else1675:
    null $P5033
    set $P5034, $P5033
  if559_end1676:
    unless_null $P5034, vivi_5601677
    nqp_get_sc_object $P5035, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5034, $P5035
  vivi_5601677:
    unless_null $P5034, vivi_5611678
    die "Contextual $*W not found"
    box $P5036, "Contextual $*W not found"
    set $P5034, $P5036
  vivi_5611678:
    set $P5029, $P5034
  fallback1674:
    $P5037 = $P5029."fixup_tasks"()
.annotate 'line', 336
    nqp_decontainerize $P5038, _lex_param_0
    unless_null _lex_param_1, fallback1681
    nqp_get_sc_object $P5039, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5039
  fallback1681:
    set fb_tmp_24, _lex_param_1
    repr_defined $I5005, fb_tmp_24
    unless $I5005 goto if562_else1679 
    set $P5040, fb_tmp_24["nibbler"]
    set $P5042, $P5040
    goto if562_end1680
  if562_else1679:
    null $P5041
    set $P5042, $P5041
  if562_end1680:
    unless_null $P5042, vivi_5631682
    nqp_get_sc_object $P5043, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5042, $P5043
  vivi_5631682:
    $P5044 = $P5042."ast"()
    $P5045 = $P5038."qbuildsub"($P5044, 1 :named("anon"), 1 :named("addself"))
    $P5046 = $P5001."new"($P5045, "P6Regex" :named("hll"), $P5010 :named("sc"), $P5019 :named("code_ref_blocks"), 0 :named("compilation_mode"), $P5028 :named("pre_deserialize"), $P5037 :named("post_deserialize"))
    $P5047 = _lex_param_1."!make"($P5046)
    .return ($P5047) 
.end
.HLL "nqp"
.namespace []
.sub "nibbler" :subid("cuid_114_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 340
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_25 
    unless_null _lex_param_1, fallback1685
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5001
  fallback1685:
    set fb_tmp_25, _lex_param_1
    repr_defined $I5001, fb_tmp_25
    unless $I5001 goto if564_else1683 
    set $P5002, fb_tmp_25["termaltseq"]
    set $P5004, $P5002
    goto if564_end1684
  if564_else1683:
    null $P5003
    set $P5004, $P5003
  if564_end1684:
    unless_null $P5004, vivi_5651686
    nqp_get_sc_object $P5005, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5004, $P5005
  vivi_5651686:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "termaltseq" :subid("cuid_115_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 342
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_210_1367388594.4399' 
    capture_lex $P5030 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_26 
    .local pmc fb_tmp_27 
    .local pmc fb_tmp_28 
    .local pmc fb_tmp_29 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
.annotate 'line', 343
    unless_null _lex_param_1, fallback1691
    nqp_get_sc_object $P5002, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5002
  fallback1691:
    set fb_tmp_27, _lex_param_1
    repr_defined $I5002, fb_tmp_27
    unless $I5002 goto if567_else1689 
    set $P5003, fb_tmp_27["termconjseq"]
    set $P5005, $P5003
    goto if567_end1690
  if567_else1689:
    null $P5004
    set $P5005, $P5004
  if567_end1690:
    unless_null $P5005, vivi_5681692
    nqp_get_sc_object $P5006, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5005, $P5006
  vivi_5681692:
    set fb_tmp_26, $P5005
    repr_defined $I5001, fb_tmp_26
    unless $I5001 goto if566_else1687 
    set $P5007, fb_tmp_26[0]
    set $P5009, $P5007
    goto if566_end1688
  if566_else1687:
    null $P5008
    set $P5009, $P5008
  if566_end1688:
    unless_null $P5009, vivi_5691693
    nqp_get_sc_object $P5010, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5009, $P5010
  vivi_5691693:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
    unless_null _lex_param_1, fallback1698
    nqp_get_sc_object $P5012, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5012
  fallback1698:
    set fb_tmp_28, _lex_param_1
    repr_defined $I5004, fb_tmp_28
    unless $I5004 goto if571_else1696 
    set $P5013, fb_tmp_28["termconjseq"]
    set $P5015, $P5013
    goto if571_end1697
  if571_else1696:
    null $P5014
    set $P5015, $P5014
  if571_end1697:
    unless_null $P5015, vivi_5721699
    nqp_get_sc_object $P5016, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5015, $P5016
  vivi_5721699:
    set $N5001, $P5015
    set $N5002, 1
    isgt $I5003, $N5001, $N5002
    unless $I5003 goto if570_end1695 
.annotate 'line', 344
.annotate 'line', 345
    nqp_get_sc_object $P5017, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5018 = $P5017."new"("altseq" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5018
    unless_null _lex_param_1, fallback1702
    nqp_get_sc_object $P5022, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5022
  fallback1702:
    set fb_tmp_29, _lex_param_1
    repr_defined $I5005, fb_tmp_29
    unless $I5005 goto if573_else1700 
    set $P5023, fb_tmp_29["termconjseq"]
    set $P5025, $P5023
    goto if573_end1701
  if573_else1700:
    null $P5024
    set $P5025, $P5024
  if573_end1701:
    unless_null $P5025, vivi_5741703
    nqp_get_sc_object $P5026, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5025, $P5026
  vivi_5741703:
    set $P5019, $P5025
    iter $P5021, $P5025
  for_next1704:
    unless $P5021, for_done1706
    shift $P5028, $P5021
  for_redo1705:
    .const 'Sub' $P5027 = 'cuid_210_1367388594.4399' 
    capture_lex $P5027
    $P5019 = $P5027($P5028)
    goto for_next1704
  for_done1706:
  if570_end1695:
.annotate 'line', 348
    $P5029 = _lex_param_1."!make"($P101)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_210_1367388594.4399") :anon :lex :outer("cuid_115_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 346
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termconjseq" :subid("cuid_116_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 351
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_211_1367388594.4399' 
    capture_lex $P5030 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_30 
    .local pmc fb_tmp_31 
    .local pmc fb_tmp_32 
    .local pmc fb_tmp_33 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
.annotate 'line', 352
    unless_null _lex_param_1, fallback1711
    nqp_get_sc_object $P5002, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5002
  fallback1711:
    set fb_tmp_31, _lex_param_1
    repr_defined $I5002, fb_tmp_31
    unless $I5002 goto if576_else1709 
    set $P5003, fb_tmp_31["termalt"]
    set $P5005, $P5003
    goto if576_end1710
  if576_else1709:
    null $P5004
    set $P5005, $P5004
  if576_end1710:
    unless_null $P5005, vivi_5771712
    nqp_get_sc_object $P5006, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5005, $P5006
  vivi_5771712:
    set fb_tmp_30, $P5005
    repr_defined $I5001, fb_tmp_30
    unless $I5001 goto if575_else1707 
    set $P5007, fb_tmp_30[0]
    set $P5009, $P5007
    goto if575_end1708
  if575_else1707:
    null $P5008
    set $P5009, $P5008
  if575_end1708:
    unless_null $P5009, vivi_5781713
    nqp_get_sc_object $P5010, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5009, $P5010
  vivi_5781713:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
    unless_null _lex_param_1, fallback1718
    nqp_get_sc_object $P5012, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5012
  fallback1718:
    set fb_tmp_32, _lex_param_1
    repr_defined $I5004, fb_tmp_32
    unless $I5004 goto if580_else1716 
    set $P5013, fb_tmp_32["termalt"]
    set $P5015, $P5013
    goto if580_end1717
  if580_else1716:
    null $P5014
    set $P5015, $P5014
  if580_end1717:
    unless_null $P5015, vivi_5811719
    nqp_get_sc_object $P5016, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5015, $P5016
  vivi_5811719:
    set $N5001, $P5015
    set $N5002, 1
    isgt $I5003, $N5001, $N5002
    unless $I5003 goto if579_end1715 
.annotate 'line', 353
.annotate 'line', 354
    nqp_get_sc_object $P5017, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5018 = $P5017."new"("conjseq" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5018
    unless_null _lex_param_1, fallback1722
    nqp_get_sc_object $P5022, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5022
  fallback1722:
    set fb_tmp_33, _lex_param_1
    repr_defined $I5005, fb_tmp_33
    unless $I5005 goto if582_else1720 
    set $P5023, fb_tmp_33["termalt"]
    set $P5025, $P5023
    goto if582_end1721
  if582_else1720:
    null $P5024
    set $P5025, $P5024
  if582_end1721:
    unless_null $P5025, vivi_5831723
    nqp_get_sc_object $P5026, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5025, $P5026
  vivi_5831723:
    set $P5019, $P5025
    iter $P5021, $P5025
  for_next1724:
    unless $P5021, for_done1726
    shift $P5028, $P5021
  for_redo1725:
    .const 'Sub' $P5027 = 'cuid_211_1367388594.4399' 
    capture_lex $P5027
    $P5019 = $P5027($P5028)
    goto for_next1724
  for_done1726:
  if579_end1715:
.annotate 'line', 357
    $P5029 = _lex_param_1."!make"($P101)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_211_1367388594.4399") :anon :lex :outer("cuid_116_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 355
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termalt" :subid("cuid_117_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 360
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_212_1367388594.4399' 
    capture_lex $P5030 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_34 
    .local pmc fb_tmp_35 
    .local pmc fb_tmp_36 
    .local pmc fb_tmp_37 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
.annotate 'line', 361
    unless_null _lex_param_1, fallback1731
    nqp_get_sc_object $P5002, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5002
  fallback1731:
    set fb_tmp_35, _lex_param_1
    repr_defined $I5002, fb_tmp_35
    unless $I5002 goto if585_else1729 
    set $P5003, fb_tmp_35["termconj"]
    set $P5005, $P5003
    goto if585_end1730
  if585_else1729:
    null $P5004
    set $P5005, $P5004
  if585_end1730:
    unless_null $P5005, vivi_5861732
    nqp_get_sc_object $P5006, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5005, $P5006
  vivi_5861732:
    set fb_tmp_34, $P5005
    repr_defined $I5001, fb_tmp_34
    unless $I5001 goto if584_else1727 
    set $P5007, fb_tmp_34[0]
    set $P5009, $P5007
    goto if584_end1728
  if584_else1727:
    null $P5008
    set $P5009, $P5008
  if584_end1728:
    unless_null $P5009, vivi_5871733
    nqp_get_sc_object $P5010, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5009, $P5010
  vivi_5871733:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
    unless_null _lex_param_1, fallback1738
    nqp_get_sc_object $P5012, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5012
  fallback1738:
    set fb_tmp_36, _lex_param_1
    repr_defined $I5004, fb_tmp_36
    unless $I5004 goto if589_else1736 
    set $P5013, fb_tmp_36["termconj"]
    set $P5015, $P5013
    goto if589_end1737
  if589_else1736:
    null $P5014
    set $P5015, $P5014
  if589_end1737:
    unless_null $P5015, vivi_5901739
    nqp_get_sc_object $P5016, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5015, $P5016
  vivi_5901739:
    set $N5001, $P5015
    set $N5002, 1
    isgt $I5003, $N5001, $N5002
    unless $I5003 goto if588_end1735 
.annotate 'line', 362
.annotate 'line', 363
    nqp_get_sc_object $P5017, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5018 = $P5017."new"("alt" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5018
    unless_null _lex_param_1, fallback1742
    nqp_get_sc_object $P5022, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5022
  fallback1742:
    set fb_tmp_37, _lex_param_1
    repr_defined $I5005, fb_tmp_37
    unless $I5005 goto if591_else1740 
    set $P5023, fb_tmp_37["termconj"]
    set $P5025, $P5023
    goto if591_end1741
  if591_else1740:
    null $P5024
    set $P5025, $P5024
  if591_end1741:
    unless_null $P5025, vivi_5921743
    nqp_get_sc_object $P5026, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5025, $P5026
  vivi_5921743:
    set $P5019, $P5025
    iter $P5021, $P5025
  for_next1744:
    unless $P5021, for_done1746
    shift $P5028, $P5021
  for_redo1745:
    .const 'Sub' $P5027 = 'cuid_212_1367388594.4399' 
    capture_lex $P5027
    $P5019 = $P5027($P5028)
    goto for_next1744
  for_done1746:
  if588_end1735:
.annotate 'line', 366
    $P5029 = _lex_param_1."!make"($P101)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_212_1367388594.4399") :anon :lex :outer("cuid_117_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 364
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termconj" :subid("cuid_118_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 369
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_213_1367388594.4399' 
    capture_lex $P5030 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_38 
    .local pmc fb_tmp_39 
    .local pmc fb_tmp_40 
    .local pmc fb_tmp_41 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
.annotate 'line', 370
    unless_null _lex_param_1, fallback1751
    nqp_get_sc_object $P5002, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5002
  fallback1751:
    set fb_tmp_39, _lex_param_1
    repr_defined $I5002, fb_tmp_39
    unless $I5002 goto if594_else1749 
    set $P5003, fb_tmp_39["termish"]
    set $P5005, $P5003
    goto if594_end1750
  if594_else1749:
    null $P5004
    set $P5005, $P5004
  if594_end1750:
    unless_null $P5005, vivi_5951752
    nqp_get_sc_object $P5006, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5005, $P5006
  vivi_5951752:
    set fb_tmp_38, $P5005
    repr_defined $I5001, fb_tmp_38
    unless $I5001 goto if593_else1747 
    set $P5007, fb_tmp_38[0]
    set $P5009, $P5007
    goto if593_end1748
  if593_else1747:
    null $P5008
    set $P5009, $P5008
  if593_end1748:
    unless_null $P5009, vivi_5961753
    nqp_get_sc_object $P5010, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5009, $P5010
  vivi_5961753:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
    unless_null _lex_param_1, fallback1758
    nqp_get_sc_object $P5012, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5012
  fallback1758:
    set fb_tmp_40, _lex_param_1
    repr_defined $I5004, fb_tmp_40
    unless $I5004 goto if598_else1756 
    set $P5013, fb_tmp_40["termish"]
    set $P5015, $P5013
    goto if598_end1757
  if598_else1756:
    null $P5014
    set $P5015, $P5014
  if598_end1757:
    unless_null $P5015, vivi_5991759
    nqp_get_sc_object $P5016, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5015, $P5016
  vivi_5991759:
    set $N5001, $P5015
    set $N5002, 1
    isgt $I5003, $N5001, $N5002
    unless $I5003 goto if597_end1755 
.annotate 'line', 371
.annotate 'line', 372
    nqp_get_sc_object $P5017, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5018 = $P5017."new"("conj" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5018
    unless_null _lex_param_1, fallback1762
    nqp_get_sc_object $P5022, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5022
  fallback1762:
    set fb_tmp_41, _lex_param_1
    repr_defined $I5005, fb_tmp_41
    unless $I5005 goto if600_else1760 
    set $P5023, fb_tmp_41["termish"]
    set $P5025, $P5023
    goto if600_end1761
  if600_else1760:
    null $P5024
    set $P5025, $P5024
  if600_end1761:
    unless_null $P5025, vivi_6011763
    nqp_get_sc_object $P5026, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5025, $P5026
  vivi_6011763:
    set $P5019, $P5025
    iter $P5021, $P5025
  for_next1764:
    unless $P5021, for_done1766
    shift $P5028, $P5021
  for_redo1765:
    .const 'Sub' $P5027 = 'cuid_213_1367388594.4399' 
    capture_lex $P5027
    $P5019 = $P5027($P5028)
    goto for_next1764
  for_done1766:
  if597_end1755:
.annotate 'line', 375
    $P5029 = _lex_param_1."!make"($P101)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_213_1367388594.4399") :anon :lex :outer("cuid_118_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 373
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termish" :subid("cuid_119_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 378
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5017 = 'cuid_214_1367388594.4399' 
    capture_lex $P5017 
    .lex "$qast", $P101 
    .lex "$lastlit", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_42 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P102, $P5002
.annotate 'line', 379
    nqp_get_sc_object $P5003, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5004 = $P5003."new"("concat" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5004
    box $P5005, 0
    set $P102, $P5005
    unless_null _lex_param_1, fallback1769
    nqp_get_sc_object $P5009, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5009
  fallback1769:
    set fb_tmp_42, _lex_param_1
    repr_defined $I5001, fb_tmp_42
    unless $I5001 goto if602_else1767 
    set $P5010, fb_tmp_42["noun"]
    set $P5012, $P5010
    goto if602_end1768
  if602_else1767:
    null $P5011
    set $P5012, $P5011
  if602_end1768:
    unless_null $P5012, vivi_6031770
    nqp_get_sc_object $P5013, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5012, $P5013
  vivi_6031770:
    set $P5006, $P5012
    iter $P5008, $P5012
  for_next1795:
    unless $P5008, for_done1797
    shift $P5015, $P5008
  for_redo1796:
    .const 'Sub' $P5014 = 'cuid_214_1367388594.4399' 
    capture_lex $P5014
    $P5006 = $P5014($P5015)
    goto for_next1795
  for_done1797:
.annotate 'line', 396
    $P5016 = _lex_param_1."!make"($P101)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_214_1367388594.4399") :anon :lex :outer("cuid_119_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 381
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_43 
    .local pmc fb_tmp_44 
    .local pmc fb_tmp_45 
    .local pmc fb_tmp_46 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
.annotate 'line', 382
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
    set $P5038, $P101
    unless $P101 goto if604_end1772 
.annotate 'line', 383
    find_lex $P5003, "$lastlit"
    set $P5005, $P5003
    unless $P5003 goto if607_end1778 
.annotate 'line', 384
    $P5004 = $P101."rxtype"()
    set $S5001, $P5004
    iseq $I5001, $S5001, "literal"
    box $P5006, $I5001
    set $P5005, $P5006
  if607_end1778:
    set $P5013, $P5005
    unless $P5005 goto if606_end1776 
.annotate 'line', 385
    nqp_get_sc_object $P5007, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 12
    set fb_tmp_43, $P101
    repr_defined $I5003, fb_tmp_43
    unless $I5003 goto if608_else1779 
    set $P5008, fb_tmp_43[0]
    set $P5010, $P5008
    goto if608_end1780
  if608_else1779:
    null $P5009
    set $P5010, $P5009
  if608_end1780:
    unless_null $P5010, vivi_6091781
    nqp_get_sc_object $P5011, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5010, $P5011
  vivi_6091781:
    $P5012 = $P5007."ACCEPTS"($P5010)
    isfalse $I5002, $P5012
    box $P5014, $I5002
    set $P5013, $P5014
  if606_end1776:
    unless $P5013 goto if605_else1773 
    find_lex $P5015, "$lastlit"
    find_lex $P5016, "$lastlit"
    set fb_tmp_44, $P5016
    repr_defined $I5004, fb_tmp_44
    unless $I5004 goto if610_else1782 
    set $P5017, fb_tmp_44[0]
    set $P5019, $P5017
    goto if610_end1783
  if610_else1782:
    null $P5018
    set $P5019, $P5018
  if610_end1783:
    unless_null $P5019, vivi_6111784
    nqp_get_sc_object $P5020, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5019, $P5020
  vivi_6111784:
    set $S5003, $P5019
    set fb_tmp_45, $P101
    repr_defined $I5005, fb_tmp_45
    unless $I5005 goto if612_else1785 
    set $P5021, fb_tmp_45[0]
    set $P5023, $P5021
    goto if612_end1786
  if612_else1785:
    null $P5022
    set $P5023, $P5022
  if612_end1786:
    unless_null $P5023, vivi_6131787
    nqp_get_sc_object $P5024, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5023, $P5024
  vivi_6131787:
    set $S5004, $P5023
    concat $S5002, $S5003, $S5004
    box $P5025, $S5002
    set $P5015[0], $P5025
    set $P5037, $P5025
    goto if605_end1774
  if605_else1773:
.annotate 'line', 388
.annotate 'line', 389
    find_lex $P5026, "$qast"
    $P5027 = _lex_param_0."ast"()
    $P5026."push"($P5027)
.annotate 'line', 390
    $P5028 = $P101."rxtype"()
    set $S5005, $P5028
    iseq $I5006, $S5005, "literal"
    set $I5009, $I5006
    unless $I5006 goto if615_end1791 
.annotate 'line', 391
    nqp_get_sc_object $P5029, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 12
    set fb_tmp_46, $P101
    repr_defined $I5008, fb_tmp_46
    unless $I5008 goto if616_else1792 
    set $P5030, fb_tmp_46[0]
    set $P5032, $P5030
    goto if616_end1793
  if616_else1792:
    null $P5031
    set $P5032, $P5031
  if616_end1793:
    unless_null $P5032, vivi_6171794
    nqp_get_sc_object $P5033, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5032, $P5033
  vivi_6171794:
    $P5034 = $P5029."ACCEPTS"($P5032)
    isfalse $I5007, $P5034
    set $I5009, $I5007
  if615_end1791:
    unless $I5009 goto if614_else1788 
    set $P5035, $P101
    goto if614_end1789
  if614_else1788:
    box $P5036, 0
    set $P5035, $P5036
  if614_end1789:
    store_lex "$lastlit", $P5035
    set $P5037, $P5035
  if605_end1774:
    set $P5038, $P5037
  if604_end1772:
    .return ($P5038) 
.end
.HLL "nqp"
.namespace []
.sub "quantified_atom" :subid("cuid_120_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 399
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5110 = 'cuid_215_1367388594.4399' 
    capture_lex $P5110 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_47 
    .local pmc fb_tmp_48 
    .local pmc fb_tmp_51 
    .local pmc fb_tmp_52 
    .local pmc fb_tmp_53 
    .local pmc fb_tmp_54 
    .local pmc fb_tmp_55 
    .local pmc fb_tmp_56 
    .local pmc fb_tmp_57 
    .local pmc fb_tmp_58 
    .local pmc fb_tmp_59 
    .local pmc fb_tmp_60 
    .local pmc fb_tmp_61 
    .local pmc fb_tmp_62 
    .local pmc fb_tmp_63 
    .local pmc pkg_viv_tmp_4 
    .local pmc fb_tmp_64 
    .local pmc fb_tmp_65 
    .local pmc fb_tmp_66 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
.annotate 'line', 400
    unless_null _lex_param_1, fallback1800
    nqp_get_sc_object $P5002, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5002
  fallback1800:
    set fb_tmp_47, _lex_param_1
    repr_defined $I5001, fb_tmp_47
    unless $I5001 goto if618_else1798 
    set $P5003, fb_tmp_47["atom"]
    set $P5005, $P5003
    goto if618_end1799
  if618_else1798:
    null $P5004
    set $P5005, $P5004
  if618_end1799:
    unless_null $P5005, vivi_6191801
    nqp_get_sc_object $P5006, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5005, $P5006
  vivi_6191801:
    $P5007 = $P5005."ast"()
    set $P101, $P5007
    unless_null _lex_param_1, fallback1806
    nqp_get_sc_object $P5008, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5008
  fallback1806:
    set fb_tmp_48, _lex_param_1
    repr_defined $I5002, fb_tmp_48
    unless $I5002 goto if621_else1804 
    set $P5009, fb_tmp_48["quantifier"]
    set $P5011, $P5009
    goto if621_end1805
  if621_else1804:
    null $P5010
    set $P5011, $P5010
  if621_end1805:
    unless_null $P5011, vivi_6221807
    nqp_get_sc_object $P5012, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5011, $P5012
  vivi_6221807:
    unless $P5011 goto if620_end1803 
    .const 'Sub' $P5013 = 'cuid_215_1367388594.4399' 
    capture_lex $P5013
    $P5014 = $P5013()
  if620_end1803:
    unless_null _lex_param_1, fallback1819
    nqp_get_sc_object $P5015, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5015
  fallback1819:
    set fb_tmp_51, _lex_param_1
    repr_defined $I5003, fb_tmp_51
    unless $I5003 goto if628_else1817 
    set $P5016, fb_tmp_51["separator"]
    set $P5018, $P5016
    goto if628_end1818
  if628_else1817:
    null $P5017
    set $P5018, $P5017
  if628_end1818:
    unless_null $P5018, vivi_6291820
    nqp_get_sc_object $P5019, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5018, $P5019
  vivi_6291820:
    unless $P5018 goto if627_end1816 
.annotate 'line', 406
.annotate 'line', 407
    $P5020 = $P101."rxtype"()
    set $S5001, $P5020
    iseq $I5004, $S5001, "quant"
    if $I5004 goto unless630_end1822 
.annotate 'line', 408
    $P5021 = _lex_param_1."CURSOR"()
    unless_null _lex_param_1, fallback1829
    nqp_get_sc_object $P5022, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5022
  fallback1829:
    set fb_tmp_54, _lex_param_1
    repr_defined $I5007, fb_tmp_54
    unless $I5007 goto if633_else1827 
    set $P5023, fb_tmp_54["separator"]
    set $P5025, $P5023
    goto if633_end1828
  if633_else1827:
    null $P5024
    set $P5025, $P5024
  if633_end1828:
    unless_null $P5025, vivi_6341830
    nqp_get_sc_object $P5026, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5025, $P5026
  vivi_6341830:
    set fb_tmp_53, $P5025
    repr_defined $I5006, fb_tmp_53
    unless $I5006 goto if632_else1825 
    set $P5027, fb_tmp_53[0]
    set $P5029, $P5027
    goto if632_end1826
  if632_else1825:
    null $P5028
    set $P5029, $P5028
  if632_end1826:
    unless_null $P5029, vivi_6351831
    nqp_get_sc_object $P5030, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5029, $P5030
  vivi_6351831:
    set fb_tmp_52, $P5029
    repr_defined $I5005, fb_tmp_52
    unless $I5005 goto if631_else1823 
    set $P5031, fb_tmp_52["septype"]
    set $P5033, $P5031
    goto if631_end1824
  if631_else1823:
    null $P5032
    set $P5033, $P5032
  if631_end1824:
    unless_null $P5033, vivi_6361832
    nqp_get_sc_object $P5034, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5033, $P5034
  vivi_6361832:
    set $S5004, $P5033
    concat $S5003, "'", $S5004
    concat $S5002, $S5003, "' many only be used immediately following a quantifier"
    $P5035 = $P5021."panic"($S5002)
  unless630_end1822:
.annotate 'line', 411
    unless_null _lex_param_1, fallback1837
    nqp_get_sc_object $P5036, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5036
  fallback1837:
    set fb_tmp_56, _lex_param_1
    repr_defined $I5009, fb_tmp_56
    unless $I5009 goto if638_else1835 
    set $P5037, fb_tmp_56["separator"]
    set $P5039, $P5037
    goto if638_end1836
  if638_else1835:
    null $P5038
    set $P5039, $P5038
  if638_end1836:
    unless_null $P5039, vivi_6391838
    nqp_get_sc_object $P5040, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5039, $P5040
  vivi_6391838:
    set fb_tmp_55, $P5039
    repr_defined $I5008, fb_tmp_55
    unless $I5008 goto if637_else1833 
    set $P5041, fb_tmp_55[0]
    set $P5043, $P5041
    goto if637_end1834
  if637_else1833:
    null $P5042
    set $P5043, $P5042
  if637_end1834:
    unless_null $P5043, vivi_6401839
    nqp_get_sc_object $P5044, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5043, $P5044
  vivi_6401839:
    $P5045 = $P5043."ast"()
    $P101."push"($P5045)
    unless_null _lex_param_1, fallback1848
    nqp_get_sc_object $P5046, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5046
  fallback1848:
    set fb_tmp_59, _lex_param_1
    repr_defined $I5013, fb_tmp_59
    unless $I5013 goto if644_else1846 
    set $P5047, fb_tmp_59["separator"]
    set $P5049, $P5047
    goto if644_end1847
  if644_else1846:
    null $P5048
    set $P5049, $P5048
  if644_end1847:
    unless_null $P5049, vivi_6451849
    nqp_get_sc_object $P5050, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5049, $P5050
  vivi_6451849:
    set fb_tmp_58, $P5049
    repr_defined $I5012, fb_tmp_58
    unless $I5012 goto if643_else1844 
    set $P5051, fb_tmp_58[0]
    set $P5053, $P5051
    goto if643_end1845
  if643_else1844:
    null $P5052
    set $P5053, $P5052
  if643_end1845:
    unless_null $P5053, vivi_6461850
    nqp_get_sc_object $P5054, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5053, $P5054
  vivi_6461850:
    set fb_tmp_57, $P5053
    repr_defined $I5011, fb_tmp_57
    unless $I5011 goto if642_else1842 
    set $P5055, fb_tmp_57["septype"]
    set $P5057, $P5055
    goto if642_end1843
  if642_else1842:
    null $P5056
    set $P5057, $P5056
  if642_end1843:
    unless_null $P5057, vivi_6471851
    nqp_get_sc_object $P5058, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5057, $P5058
  vivi_6471851:
    set $S5005, $P5057
    iseq $I5010, $S5005, "%%"
    box $P5074, $I5010
    set $P5073, $P5074
    unless $I5010 goto if641_end1841 
.annotate 'line', 412
.annotate 'line', 413
    nqp_get_sc_object $P5059, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
.annotate 'line', 414
    nqp_get_sc_object $P5060, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    unless_null _lex_param_1, fallback1856
    nqp_get_sc_object $P5061, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5061
  fallback1856:
    set fb_tmp_61, _lex_param_1
    repr_defined $I5015, fb_tmp_61
    unless $I5015 goto if649_else1854 
    set $P5062, fb_tmp_61["separator"]
    set $P5064, $P5062
    goto if649_end1855
  if649_else1854:
    null $P5063
    set $P5064, $P5063
  if649_end1855:
    unless_null $P5064, vivi_6501857
    nqp_get_sc_object $P5065, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5064, $P5065
  vivi_6501857:
    set fb_tmp_60, $P5064
    repr_defined $I5014, fb_tmp_60
    unless $I5014 goto if648_else1852 
    set $P5066, fb_tmp_60[0]
    set $P5068, $P5066
    goto if648_end1853
  if648_else1852:
    null $P5067
    set $P5068, $P5067
  if648_end1853:
    unless_null $P5068, vivi_6511858
    nqp_get_sc_object $P5069, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5068, $P5069
  vivi_6511858:
    $P5070 = $P5068."ast"()
    $P5071 = $P5060."new"($P5070, "quant" :named("rxtype"), 0 :named("min"), 1 :named("max"))
    $P5072 = $P5059."new"($P101, $P5071, "concat" :named("rxtype"))
    set $P101, $P5072
    set $P5073, $P101
  if641_end1841:
  if627_end1816:
    set $P5076, $P101
    unless $P101 goto if654_end1864 
.annotate 'line', 417
    $P5075 = $P101."backtrack"()
    isfalse $I5016, $P5075
    box $P5077, $I5016
    set $P5076, $P5077
  if654_end1864:
    set $P5107, $P5076
    unless $P5076 goto if653_end1862 
    find_dynamic_lex $P5078, "%*RX"
    unless_null $P5078, fallback1869
    nqp_get_sc_object $P5080, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 0
    get_who $P5079, $P5080
    set pkg_viv_tmp_4, $P5079
    set fb_tmp_63, pkg_viv_tmp_4
    repr_defined $I5018, fb_tmp_63
    unless $I5018 goto if657_else1870 
    set $P5081, fb_tmp_63["%RX"]
    set $P5083, $P5081
    goto if657_end1871
  if657_else1870:
    null $P5082
    set $P5083, $P5082
  if657_end1871:
    unless_null $P5083, vivi_6581872
    new $P5084, 'Hash'
    set pkg_viv_tmp_4["%RX"], $P5084
    set $P5083, $P5084
  vivi_6581872:
    unless_null $P5083, vivi_6591873
    die "Contextual %*RX not found"
    box $P5085, "Contextual %*RX not found"
    set $P5083, $P5085
  vivi_6591873:
    set $P5078, $P5083
  fallback1869:
    set fb_tmp_62, $P5078
    repr_defined $I5017, fb_tmp_62
    unless $I5017 goto if656_else1867 
    set $P5086, fb_tmp_62["r"]
    set $P5088, $P5086
    goto if656_end1868
  if656_else1867:
    null $P5087
    set $P5088, $P5087
  if656_end1868:
    unless_null $P5088, vivi_6601874
    nqp_get_sc_object $P5089, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5088, $P5089
  vivi_6601874:
    set $P5106, $P5088
    if $P5088 goto unless655_end1866 
    unless_null _lex_param_1, fallback1879
    nqp_get_sc_object $P5090, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5090
  fallback1879:
    set fb_tmp_64, _lex_param_1
    repr_defined $I5019, fb_tmp_64
    unless $I5019 goto if662_else1877 
    set $P5091, fb_tmp_64["backmod"]
    set $P5093, $P5091
    goto if662_end1878
  if662_else1877:
    null $P5092
    set $P5093, $P5092
  if662_end1878:
    unless_null $P5093, vivi_6631880
    nqp_get_sc_object $P5094, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5093, $P5094
  vivi_6631880:
    set $P5104, $P5093
    unless $P5093 goto if661_end1876 
    unless_null _lex_param_1, fallback1885
    nqp_get_sc_object $P5095, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5095
  fallback1885:
    set fb_tmp_66, _lex_param_1
    repr_defined $I5022, fb_tmp_66
    unless $I5022 goto if665_else1883 
    set $P5096, fb_tmp_66["backmod"]
    set $P5098, $P5096
    goto if665_end1884
  if665_else1883:
    null $P5097
    set $P5098, $P5097
  if665_end1884:
    unless_null $P5098, vivi_6661886
    nqp_get_sc_object $P5099, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5098, $P5099
  vivi_6661886:
    set fb_tmp_65, $P5098
    repr_defined $I5021, fb_tmp_65
    unless $I5021 goto if664_else1881 
    set $P5100, fb_tmp_65[0]
    set $P5102, $P5100
    goto if664_end1882
  if664_else1881:
    null $P5101
    set $P5102, $P5101
  if664_end1882:
    unless_null $P5102, vivi_6671887
    nqp_get_sc_object $P5103, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5102, $P5103
  vivi_6671887:
    set $S5006, $P5102
    iseq $I5020, $S5006, ":"
    box $P5105, $I5020
    set $P5104, $P5105
  if661_end1876:
    set $P5106, $P5104
  unless655_end1866:
    set $P5107, $P5106
  if653_end1862:
    unless $P5107 goto if652_end1860 
    $P5108 = $P101."backtrack"("r")
  if652_end1860:
.annotate 'line', 419
    $P5109 = _lex_param_1."!make"($P101)
    .return ($P5109) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_215_1367388594.4399") :anon :lex :outer("cuid_120_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 401
    .lex "$ast", $P101 
    .local pmc fb_tmp_49 
    .local pmc fb_tmp_50 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
.annotate 'line', 402
    find_lex $P5002, "$/"
    unless_null $P5002, fallback1812
    nqp_get_sc_object $P5003, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5002, $P5003
  fallback1812:
    set fb_tmp_50, $P5002
    repr_defined $I5002, fb_tmp_50
    unless $I5002 goto if624_else1810 
    set $P5004, fb_tmp_50["quantifier"]
    set $P5006, $P5004
    goto if624_end1811
  if624_else1810:
    null $P5005
    set $P5006, $P5005
  if624_end1811:
    unless_null $P5006, vivi_6251813
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5006, $P5007
  vivi_6251813:
    set fb_tmp_49, $P5006
    repr_defined $I5001, fb_tmp_49
    unless $I5001 goto if623_else1808 
    set $P5008, fb_tmp_49[0]
    set $P5010, $P5008
    goto if623_end1809
  if623_else1808:
    null $P5009
    set $P5010, $P5009
  if623_end1809:
    unless_null $P5010, vivi_6261814
    nqp_get_sc_object $P5011, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5010, $P5011
  vivi_6261814:
    $P5012 = $P5010."ast"()
    set $P101, $P5012
.annotate 'line', 403
    find_lex $P5013, "$qast"
    $P101."unshift"($P5013)
    store_lex "$qast", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "separator" :subid("cuid_121_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 422
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_67 
.annotate 'line', 423
    unless_null _lex_param_1, fallback1890
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5001
  fallback1890:
    set fb_tmp_67, _lex_param_1
    repr_defined $I5001, fb_tmp_67
    unless $I5001 goto if668_else1888 
    set $P5002, fb_tmp_67["quantified_atom"]
    set $P5004, $P5002
    goto if668_end1889
  if668_else1888:
    null $P5003
    set $P5004, $P5003
  if668_end1889:
    unless_null $P5004, vivi_6691891
    nqp_get_sc_object $P5005, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5004, $P5005
  vivi_6691891:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "atom" :subid("cuid_122_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 426
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5016 = 'cuid_216_1367388594.4399' 
    capture_lex $P5016 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_68 
    .local pmc fb_tmp_69 
    unless_null _lex_param_1, fallback1896
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5001
  fallback1896:
    set fb_tmp_68, _lex_param_1
    repr_defined $I5001, fb_tmp_68
    unless $I5001 goto if671_else1894 
    set $P5002, fb_tmp_68["metachar"]
    set $P5004, $P5002
    goto if671_end1895
  if671_else1894:
    null $P5003
    set $P5004, $P5003
  if671_end1895:
    unless_null $P5004, vivi_6721897
    nqp_get_sc_object $P5005, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5004, $P5005
  vivi_6721897:
    unless $P5004 goto if670_else1892 
.annotate 'line', 427
.annotate 'line', 428
    unless_null _lex_param_1, fallback1900
    nqp_get_sc_object $P5006, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5006
  fallback1900:
    set fb_tmp_69, _lex_param_1
    repr_defined $I5002, fb_tmp_69
    unless $I5002 goto if673_else1898 
    set $P5007, fb_tmp_69["metachar"]
    set $P5009, $P5007
    goto if673_end1899
  if673_else1898:
    null $P5008
    set $P5009, $P5008
  if673_end1899:
    unless_null $P5009, vivi_6741901
    nqp_get_sc_object $P5010, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5009, $P5010
  vivi_6741901:
    $P5011 = $P5009."ast"()
    $P5012 = _lex_param_1."!make"($P5011)
    set $P5015, $P5012
    goto if670_end1893
  if670_else1892:
    .const 'Sub' $P5013 = 'cuid_216_1367388594.4399' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  if670_end1893:
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_216_1367388594.4399") :anon :lex :outer("cuid_122_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 430
    .lex "$qast", $P101 
    .local pmc fb_tmp_70 
    .local pmc fb_tmp_71 
    .local pmc pkg_viv_tmp_5 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
.annotate 'line', 431
    nqp_get_sc_object $P5002, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    find_lex $P5003, "$/"
    set $S5001, $P5003
    find_lex $P5004, "$/"
    $P5005 = $P5002."new"($S5001, "literal" :named("rxtype"), $P5004 :named("node"))
    set $P101, $P5005
    find_dynamic_lex $P5006, "%*RX"
    unless_null $P5006, fallback1906
    nqp_get_sc_object $P5008, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 0
    get_who $P5007, $P5008
    set pkg_viv_tmp_5, $P5007
    set fb_tmp_71, pkg_viv_tmp_5
    repr_defined $I5002, fb_tmp_71
    unless $I5002 goto if677_else1907 
    set $P5009, fb_tmp_71["%RX"]
    set $P5011, $P5009
    goto if677_end1908
  if677_else1907:
    null $P5010
    set $P5011, $P5010
  if677_end1908:
    unless_null $P5011, vivi_6781909
    new $P5012, 'Hash'
    set pkg_viv_tmp_5["%RX"], $P5012
    set $P5011, $P5012
  vivi_6781909:
    unless_null $P5011, vivi_6791910
    die "Contextual %*RX not found"
    box $P5013, "Contextual %*RX not found"
    set $P5011, $P5013
  vivi_6791910:
    set $P5006, $P5011
  fallback1906:
    set fb_tmp_70, $P5006
    repr_defined $I5001, fb_tmp_70
    unless $I5001 goto if676_else1904 
    set $P5014, fb_tmp_70["i"]
    set $P5016, $P5014
    goto if676_end1905
  if676_else1904:
    null $P5015
    set $P5016, $P5015
  if676_end1905:
    unless_null $P5016, vivi_6801911
    nqp_get_sc_object $P5017, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5016, $P5017
  vivi_6801911:
    unless $P5016 goto if675_end1903 
.annotate 'line', 432
    $P5018 = $P101."subtype"("ignorecase")
  if675_end1903:
.annotate 'line', 433
    find_dynamic_lex $P5019, "$/"
    $P5020 = $P5019."!make"($P101)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<*>" :subid("cuid_123_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 437
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_72 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
.annotate 'line', 438
    nqp_get_sc_object $P5002, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5003 = $P5002."new"("quant" :named("rxtype"), 0 :named("min"), -1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5003
.annotate 'line', 439
    unless_null _lex_param_1, fallback1914
    nqp_get_sc_object $P5004, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5004
  fallback1914:
    set fb_tmp_72, _lex_param_1
    repr_defined $I5001, fb_tmp_72
    unless $I5001 goto if681_else1912 
    set $P5005, fb_tmp_72["backmod"]
    set $P5007, $P5005
    goto if681_end1913
  if681_else1912:
    null $P5006
    set $P5007, $P5006
  if681_end1913:
    unless_null $P5007, vivi_6821915
    nqp_get_sc_object $P5008, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5007, $P5008
  vivi_6821915:
    $P5009 = "&backmod"($P101, $P5007)
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<+>" :subid("cuid_124_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 442
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_73 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
.annotate 'line', 443
    nqp_get_sc_object $P5002, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5003 = $P5002."new"("quant" :named("rxtype"), 1 :named("min"), -1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5003
.annotate 'line', 444
    unless_null _lex_param_1, fallback1918
    nqp_get_sc_object $P5004, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5004
  fallback1918:
    set fb_tmp_73, _lex_param_1
    repr_defined $I5001, fb_tmp_73
    unless $I5001 goto if683_else1916 
    set $P5005, fb_tmp_73["backmod"]
    set $P5007, $P5005
    goto if683_end1917
  if683_else1916:
    null $P5006
    set $P5007, $P5006
  if683_end1917:
    unless_null $P5007, vivi_6841919
    nqp_get_sc_object $P5008, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5007, $P5008
  vivi_6841919:
    $P5009 = "&backmod"($P101, $P5007)
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<?>" :subid("cuid_125_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 447
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_74 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
.annotate 'line', 448
    nqp_get_sc_object $P5002, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5003 = $P5002."new"("quant" :named("rxtype"), "item" :named("subtype"), 0 :named("min"), 1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5003
.annotate 'line', 449
    unless_null _lex_param_1, fallback1922
    nqp_get_sc_object $P5004, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5004
  fallback1922:
    set fb_tmp_74, _lex_param_1
    repr_defined $I5001, fb_tmp_74
    unless $I5001 goto if685_else1920 
    set $P5005, fb_tmp_74["backmod"]
    set $P5007, $P5005
    goto if685_end1921
  if685_else1920:
    null $P5006
    set $P5007, $P5006
  if685_end1921:
    unless_null $P5007, vivi_6861923
    nqp_get_sc_object $P5008, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5007, $P5008
  vivi_6861923:
    $P5009 = "&backmod"($P101, $P5007)
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<**>" :subid("cuid_126_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 452
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_75 
    .local pmc fb_tmp_76 
    .local pmc fb_tmp_77 
    .local pmc fb_tmp_78 
    .local pmc fb_tmp_79 
    .local pmc fb_tmp_80 
    .local pmc fb_tmp_81 
    .local pmc fb_tmp_82 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
.annotate 'line', 454
    nqp_get_sc_object $P5002, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    unless_null _lex_param_1, fallback1926
    nqp_get_sc_object $P5003, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5003
  fallback1926:
    set fb_tmp_75, _lex_param_1
    repr_defined $I5001, fb_tmp_75
    unless $I5001 goto if687_else1924 
    set $P5004, fb_tmp_75["min"]
    set $P5006, $P5004
    goto if687_end1925
  if687_else1924:
    null $P5005
    set $P5006, $P5005
  if687_end1925:
    unless_null $P5006, vivi_6881927
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5006, $P5007
  vivi_6881927:
    set $N5001, $P5006
    $P5008 = $P5002."new"("quant" :named("rxtype"), $N5001 :named("min"), -1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5008
    unless_null _lex_param_1, fallback1932
    nqp_get_sc_object $P5009, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5009
  fallback1932:
    set fb_tmp_76, _lex_param_1
    repr_defined $I5003, fb_tmp_76
    unless $I5003 goto if690_else1930 
    set $P5010, fb_tmp_76["max"]
    set $P5012, $P5010
    goto if690_end1931
  if690_else1930:
    null $P5011
    set $P5012, $P5011
  if690_end1931:
    unless_null $P5012, vivi_6911933
    nqp_get_sc_object $P5013, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5012, $P5013
  vivi_6911933:
    isfalse $I5002, $P5012
    unless $I5002 goto if689_else1928 
.annotate 'line', 455
    unless_null _lex_param_1, fallback1936
    nqp_get_sc_object $P5014, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5014
  fallback1936:
    set fb_tmp_77, _lex_param_1
    repr_defined $I5004, fb_tmp_77
    unless $I5004 goto if692_else1934 
    set $P5015, fb_tmp_77["min"]
    set $P5017, $P5015
    goto if692_end1935
  if692_else1934:
    null $P5016
    set $P5017, $P5016
  if692_end1935:
    unless_null $P5017, vivi_6931937
    nqp_get_sc_object $P5018, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5017, $P5018
  vivi_6931937:
    set $N5002, $P5017
    $P5019 = $P101."max"($N5002)
    goto if689_end1929
  if689_else1928:
    unless_null _lex_param_1, fallback1944
    nqp_get_sc_object $P5020, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5020
  fallback1944:
    set fb_tmp_79, _lex_param_1
    repr_defined $I5007, fb_tmp_79
    unless $I5007 goto if696_else1942 
    set $P5021, fb_tmp_79["max"]
    set $P5023, $P5021
    goto if696_end1943
  if696_else1942:
    null $P5022
    set $P5023, $P5022
  if696_end1943:
    unless_null $P5023, vivi_6971945
    nqp_get_sc_object $P5024, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5023, $P5024
  vivi_6971945:
    set fb_tmp_78, $P5023
    repr_defined $I5006, fb_tmp_78
    unless $I5006 goto if695_else1940 
    set $P5025, fb_tmp_78[0]
    set $P5027, $P5025
    goto if695_end1941
  if695_else1940:
    null $P5026
    set $P5027, $P5026
  if695_end1941:
    unless_null $P5027, vivi_6981946
    nqp_get_sc_object $P5028, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5027, $P5028
  vivi_6981946:
    set $S5001, $P5027
    isne $I5005, $S5001, "*"
    box $P5040, $I5005
    set $P5039, $P5040
    unless $I5005 goto if694_end1939 
.annotate 'line', 456
    unless_null _lex_param_1, fallback1951
    nqp_get_sc_object $P5029, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5029
  fallback1951:
    set fb_tmp_81, _lex_param_1
    repr_defined $I5009, fb_tmp_81
    unless $I5009 goto if700_else1949 
    set $P5030, fb_tmp_81["max"]
    set $P5032, $P5030
    goto if700_end1950
  if700_else1949:
    null $P5031
    set $P5032, $P5031
  if700_end1950:
    unless_null $P5032, vivi_7011952
    nqp_get_sc_object $P5033, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5032, $P5033
  vivi_7011952:
    set fb_tmp_80, $P5032
    repr_defined $I5008, fb_tmp_80
    unless $I5008 goto if699_else1947 
    set $P5034, fb_tmp_80[0]
    set $P5036, $P5034
    goto if699_end1948
  if699_else1947:
    null $P5035
    set $P5036, $P5035
  if699_end1948:
    unless_null $P5036, vivi_7021953
    nqp_get_sc_object $P5037, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5036, $P5037
  vivi_7021953:
    set $N5003, $P5036
    $P5038 = $P101."max"($N5003)
    set $P5039, $P5038
  if694_end1939:
  if689_end1929:
.annotate 'line', 457
    unless_null _lex_param_1, fallback1956
    nqp_get_sc_object $P5041, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5041
  fallback1956:
    set fb_tmp_82, _lex_param_1
    repr_defined $I5010, fb_tmp_82
    unless $I5010 goto if703_else1954 
    set $P5042, fb_tmp_82["backmod"]
    set $P5044, $P5042
    goto if703_end1955
  if703_else1954:
    null $P5043
    set $P5044, $P5043
  if703_end1955:
    unless_null $P5044, vivi_7041957
    nqp_get_sc_object $P5045, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5044, $P5045
  vivi_7041957:
    $P5046 = "&backmod"($P101, $P5044)
    $P5047 = _lex_param_1."!make"($P5046)
    .return ($P5047) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<ws>" :subid("cuid_127_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 460
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_83 
    .local pmc fb_tmp_84 
    .local pmc pkg_viv_tmp_6 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
    find_dynamic_lex $P5002, "%*RX"
    unless_null $P5002, fallback1962
    nqp_get_sc_object $P5004, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 0
    get_who $P5003, $P5004
    set pkg_viv_tmp_6, $P5003
    set fb_tmp_84, pkg_viv_tmp_6
    repr_defined $I5002, fb_tmp_84
    unless $I5002 goto if707_else1963 
    set $P5005, fb_tmp_84["%RX"]
    set $P5007, $P5005
    goto if707_end1964
  if707_else1963:
    null $P5006
    set $P5007, $P5006
  if707_end1964:
    unless_null $P5007, vivi_7081965
    new $P5008, 'Hash'
    set pkg_viv_tmp_6["%RX"], $P5008
    set $P5007, $P5008
  vivi_7081965:
    unless_null $P5007, vivi_7091966
    die "Contextual %*RX not found"
    box $P5009, "Contextual %*RX not found"
    set $P5007, $P5009
  vivi_7091966:
    set $P5002, $P5007
  fallback1962:
    set fb_tmp_83, $P5002
    repr_defined $I5001, fb_tmp_83
    unless $I5001 goto if706_else1960 
    set $P5010, fb_tmp_83["s"]
    set $P5012, $P5010
    goto if706_end1961
  if706_else1960:
    null $P5011
    set $P5012, $P5011
  if706_end1961:
    unless_null $P5012, vivi_7101967
    nqp_get_sc_object $P5013, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5012, $P5013
  vivi_7101967:
    unless $P5012 goto if705_else1958 
.annotate 'line', 462
    nqp_get_sc_object $P5014, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
.annotate 'line', 463
    nqp_get_sc_object $P5015, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 12
    nqp_get_sc_object $P5016, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 52
    $P5017 = $P5016."new"("ws" :named("value"))
    $P5018 = $P5015."new"($P5017)
    $P5019 = $P5014."new"($P5018, "ws" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    set $P5020, $P5019
    goto if705_end1959
  if705_else1958:
    box $P5021, 0
    set $P5020, $P5021
  if705_end1959:
    set $P101, $P5020
.annotate 'line', 465
    $P5022 = _lex_param_1."!make"($P101)
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<[ ]>" :subid("cuid_128_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 468
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_85 
.annotate 'line', 469
    unless_null _lex_param_1, fallback1970
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5001
  fallback1970:
    set fb_tmp_85, _lex_param_1
    repr_defined $I5001, fb_tmp_85
    unless $I5001 goto if711_else1968 
    set $P5002, fb_tmp_85["nibbler"]
    set $P5004, $P5002
    goto if711_end1969
  if711_else1968:
    null $P5003
    set $P5004, $P5003
  if711_end1969:
    unless_null $P5004, vivi_7121971
    nqp_get_sc_object $P5005, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5004, $P5005
  vivi_7121971:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<( )>" :subid("cuid_129_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 472
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$subpast", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_86 
    .local pmc fb_tmp_87 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P102, $P5002
.annotate 'line', 473
    nqp_get_sc_object $P5003, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 12
    nqp_decontainerize $P5004, _lex_param_0
    unless_null _lex_param_1, fallback1974
    nqp_get_sc_object $P5005, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5005
  fallback1974:
    set fb_tmp_86, _lex_param_1
    repr_defined $I5001, fb_tmp_86
    unless $I5001 goto if713_else1972 
    set $P5006, fb_tmp_86["nibbler"]
    set $P5008, $P5006
    goto if713_end1973
  if713_else1972:
    null $P5007
    set $P5008, $P5007
  if713_end1973:
    unless_null $P5008, vivi_7141975
    nqp_get_sc_object $P5009, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5008, $P5009
  vivi_7141975:
    $P5010 = $P5008."ast"()
    $P5011 = $P5004."qbuildsub"($P5010, 1 :named("anon"), 1 :named("addself"))
    $P5012 = $P5003."new"($P5011)
    set $P101, $P5012
.annotate 'line', 474
    nqp_get_sc_object $P5013, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    unless_null _lex_param_1, fallback1978
    nqp_get_sc_object $P5014, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5014
  fallback1978:
    set fb_tmp_87, _lex_param_1
    repr_defined $I5002, fb_tmp_87
    unless $I5002 goto if715_else1976 
    set $P5015, fb_tmp_87["nibbler"]
    set $P5017, $P5015
    goto if715_end1977
  if715_else1976:
    null $P5016
    set $P5017, $P5016
  if715_end1977:
    unless_null $P5017, vivi_7161979
    nqp_get_sc_object $P5018, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5017, $P5018
  vivi_7161979:
    $P5019 = $P5017."ast"()
    $P5020 = $P5013."new"($P101, $P5019, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"))
    set $P102, $P5020
.annotate 'line', 476
    $P5021 = _lex_param_1."!make"($P102)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<'>" :subid("cuid_130_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 479
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$quote", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_88 
    .local pmc fb_tmp_89 
    .local pmc fb_tmp_90 
    .local pmc pkg_viv_tmp_7 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P102, $P5002
.annotate 'line', 480
    unless_null _lex_param_1, fallback1982
    nqp_get_sc_object $P5003, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5003
  fallback1982:
    set fb_tmp_88, _lex_param_1
    repr_defined $I5001, fb_tmp_88
    unless $I5001 goto if717_else1980 
    set $P5004, fb_tmp_88["quote_EXPR"]
    set $P5006, $P5004
    goto if717_end1981
  if717_else1980:
    null $P5005
    set $P5006, $P5005
  if717_end1981:
    unless_null $P5006, vivi_7181983
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5006, $P5007
  vivi_7181983:
    $P5008 = $P5006."ast"()
    set $P101, $P5008
.annotate 'line', 481
    nqp_get_sc_object $P5009, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 52
    $P5010 = $P5009."ACCEPTS"($P101)
    unless $P5010 goto if719_end1985 
    $P5011 = $P101."value"()
    set $P101, $P5011
  if719_end1985:
.annotate 'line', 482
    nqp_get_sc_object $P5012, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5013 = $P5012."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P102, $P5013
    find_dynamic_lex $P5014, "%*RX"
    unless_null $P5014, fallback1990
    nqp_get_sc_object $P5016, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 0
    get_who $P5015, $P5016
    set pkg_viv_tmp_7, $P5015
    set fb_tmp_90, pkg_viv_tmp_7
    repr_defined $I5003, fb_tmp_90
    unless $I5003 goto if722_else1991 
    set $P5017, fb_tmp_90["%RX"]
    set $P5019, $P5017
    goto if722_end1992
  if722_else1991:
    null $P5018
    set $P5019, $P5018
  if722_end1992:
    unless_null $P5019, vivi_7231993
    new $P5020, 'Hash'
    set pkg_viv_tmp_7["%RX"], $P5020
    set $P5019, $P5020
  vivi_7231993:
    unless_null $P5019, vivi_7241994
    die "Contextual %*RX not found"
    box $P5021, "Contextual %*RX not found"
    set $P5019, $P5021
  vivi_7241994:
    set $P5014, $P5019
  fallback1990:
    set fb_tmp_89, $P5014
    repr_defined $I5002, fb_tmp_89
    unless $I5002 goto if721_else1988 
    set $P5022, fb_tmp_89["i"]
    set $P5024, $P5022
    goto if721_end1989
  if721_else1988:
    null $P5023
    set $P5024, $P5023
  if721_end1989:
    unless_null $P5024, vivi_7251995
    nqp_get_sc_object $P5025, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5024, $P5025
  vivi_7251995:
    unless $P5024 goto if720_end1987 
.annotate 'line', 483
    $P5026 = $P102."subtype"("ignorecase")
  if720_end1987:
.annotate 'line', 484
    $P5027 = _lex_param_1."!make"($P102)
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<\">" :subid("cuid_131_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 487
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$quote", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_91 
    .local pmc fb_tmp_92 
    .local pmc fb_tmp_93 
    .local pmc pkg_viv_tmp_8 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P102, $P5002
.annotate 'line', 488
    unless_null _lex_param_1, fallback1998
    nqp_get_sc_object $P5003, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5003
  fallback1998:
    set fb_tmp_91, _lex_param_1
    repr_defined $I5001, fb_tmp_91
    unless $I5001 goto if726_else1996 
    set $P5004, fb_tmp_91["quote_EXPR"]
    set $P5006, $P5004
    goto if726_end1997
  if726_else1996:
    null $P5005
    set $P5006, $P5005
  if726_end1997:
    unless_null $P5006, vivi_7271999
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5006, $P5007
  vivi_7271999:
    $P5008 = $P5006."ast"()
    set $P101, $P5008
.annotate 'line', 489
    nqp_get_sc_object $P5009, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 52
    $P5010 = $P5009."ACCEPTS"($P101)
    unless $P5010 goto if728_end2001 
    $P5011 = $P101."value"()
    set $P101, $P5011
  if728_end2001:
.annotate 'line', 490
    nqp_get_sc_object $P5012, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5013 = $P5012."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P102, $P5013
    find_dynamic_lex $P5014, "%*RX"
    unless_null $P5014, fallback2006
    nqp_get_sc_object $P5016, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 0
    get_who $P5015, $P5016
    set pkg_viv_tmp_8, $P5015
    set fb_tmp_93, pkg_viv_tmp_8
    repr_defined $I5003, fb_tmp_93
    unless $I5003 goto if731_else2007 
    set $P5017, fb_tmp_93["%RX"]
    set $P5019, $P5017
    goto if731_end2008
  if731_else2007:
    null $P5018
    set $P5019, $P5018
  if731_end2008:
    unless_null $P5019, vivi_7322009
    new $P5020, 'Hash'
    set pkg_viv_tmp_8["%RX"], $P5020
    set $P5019, $P5020
  vivi_7322009:
    unless_null $P5019, vivi_7332010
    die "Contextual %*RX not found"
    box $P5021, "Contextual %*RX not found"
    set $P5019, $P5021
  vivi_7332010:
    set $P5014, $P5019
  fallback2006:
    set fb_tmp_92, $P5014
    repr_defined $I5002, fb_tmp_92
    unless $I5002 goto if730_else2004 
    set $P5022, fb_tmp_92["i"]
    set $P5024, $P5022
    goto if730_end2005
  if730_else2004:
    null $P5023
    set $P5024, $P5023
  if730_end2005:
    unless_null $P5024, vivi_7342011
    nqp_get_sc_object $P5025, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5024, $P5025
  vivi_7342011:
    unless $P5024 goto if729_end2003 
.annotate 'line', 491
    $P5026 = $P102."subtype"("ignorecase")
  if729_end2003:
.annotate 'line', 492
    $P5027 = _lex_param_1."!make"($P102)
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<.>" :subid("cuid_132_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 495
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 496
    nqp_get_sc_object $P5001, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5002 = $P5001."new"("cclass" :named("rxtype"), "." :named("name"), _lex_param_1 :named("node"))
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^>" :subid("cuid_133_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 499
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 500
    nqp_get_sc_object $P5001, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5002 = $P5001."new"("anchor" :named("rxtype"), "bos" :named("subtype"), _lex_param_1 :named("node"))
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^^>" :subid("cuid_134_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 503
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 504
    nqp_get_sc_object $P5001, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5002 = $P5001."new"("anchor" :named("rxtype"), "bol" :named("subtype"), _lex_param_1 :named("node"))
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$>" :subid("cuid_135_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 507
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 508
    nqp_get_sc_object $P5001, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5002 = $P5001."new"("anchor" :named("rxtype"), "eos" :named("subtype"), _lex_param_1 :named("node"))
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$$>" :subid("cuid_136_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 511
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 512
    nqp_get_sc_object $P5001, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5002 = $P5001."new"("anchor" :named("rxtype"), "eol" :named("subtype"), _lex_param_1 :named("node"))
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<lwb>" :subid("cuid_137_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 515
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 516
    nqp_get_sc_object $P5001, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5002 = $P5001."new"("anchor" :named("rxtype"), "lwb" :named("subtype"), _lex_param_1 :named("node"))
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<rwb>" :subid("cuid_138_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 519
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 520
    nqp_get_sc_object $P5001, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5002 = $P5001."new"("anchor" :named("rxtype"), "rwb" :named("subtype"), _lex_param_1 :named("node"))
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<from>" :subid("cuid_139_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 523
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 524
    nqp_get_sc_object $P5001, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
.annotate 'line', 526
    nqp_get_sc_object $P5002, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 12
.annotate 'line', 527
    nqp_get_sc_object $P5003, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 52
    $P5004 = $P5003."new"("!LITERAL" :named("value"))
.annotate 'line', 528
    nqp_get_sc_object $P5005, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 52
    $P5006 = $P5005."new"("" :named("value"))
    $P5007 = $P5002."new"($P5004, $P5006)
    $P5008 = $P5001."new"($P5007, "subrule" :named("rxtype"), "capture" :named("subtype"), "r" :named("backtrack"), "$!from" :named("name"), _lex_param_1 :named("node"))
    $P5009 = _lex_param_1."!make"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<to>" :subid("cuid_140_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 531
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 532
    nqp_get_sc_object $P5001, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
.annotate 'line', 534
    nqp_get_sc_object $P5002, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 12
.annotate 'line', 535
    nqp_get_sc_object $P5003, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 52
    $P5004 = $P5003."new"("!LITERAL" :named("value"))
.annotate 'line', 536
    nqp_get_sc_object $P5005, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 52
    $P5006 = $P5005."new"("" :named("value"))
    $P5007 = $P5002."new"($P5004, $P5006)
    $P5008 = $P5001."new"($P5007, "subrule" :named("rxtype"), "capture" :named("subtype"), "r" :named("backtrack"), "$!to" :named("name"), _lex_param_1 :named("node"))
    $P5009 = _lex_param_1."!make"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<bs>" :subid("cuid_141_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 539
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_94 
.annotate 'line', 540
    unless_null _lex_param_1, fallback2014
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5001
  fallback2014:
    set fb_tmp_94, _lex_param_1
    repr_defined $I5001, fb_tmp_94
    unless $I5001 goto if735_else2012 
    set $P5002, fb_tmp_94["backslash"]
    set $P5004, $P5002
    goto if735_end2013
  if735_else2012:
    null $P5003
    set $P5004, $P5003
  if735_end2013:
    unless_null $P5004, vivi_7362015
    nqp_get_sc_object $P5005, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5004, $P5005
  vivi_7362015:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<assert>" :subid("cuid_142_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 543
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_95 
.annotate 'line', 544
    unless_null _lex_param_1, fallback2018
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5001
  fallback2018:
    set fb_tmp_95, _lex_param_1
    repr_defined $I5001, fb_tmp_95
    unless $I5001 goto if737_else2016 
    set $P5002, fb_tmp_95["assertion"]
    set $P5004, $P5002
    goto if737_end2017
  if737_else2016:
    null $P5003
    set $P5004, $P5003
  if737_end2017:
    unless_null $P5004, vivi_7382019
    nqp_get_sc_object $P5005, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5004, $P5005
  vivi_7382019:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<var>" :subid("cuid_143_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 547
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "$name", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_96 
    .local pmc fb_tmp_97 
    .local pmc fb_tmp_98 
    .local pmc fb_tmp_99 
    .local pmc fb_tmp_100 
    .local pmc fb_tmp_101 
    .local pmc fb_tmp_102 
    .local pmc fb_tmp_103 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P102, $P5002
    unless_null _lex_param_1, fallback2024
    nqp_get_sc_object $P5003, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5003
  fallback2024:
    set fb_tmp_96, _lex_param_1
    repr_defined $I5001, fb_tmp_96
    unless $I5001 goto if740_else2022 
    set $P5004, fb_tmp_96["pos"]
    set $P5006, $P5004
    goto if740_end2023
  if740_else2022:
    null $P5005
    set $P5006, $P5005
  if740_end2023:
    unless_null $P5006, vivi_7412025
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5006, $P5007
  vivi_7412025:
    unless $P5006 goto if739_else2020 
    unless_null _lex_param_1, fallback2028
    nqp_get_sc_object $P5008, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5008
  fallback2028:
    set fb_tmp_97, _lex_param_1
    repr_defined $I5002, fb_tmp_97
    unless $I5002 goto if742_else2026 
    set $P5009, fb_tmp_97["pos"]
    set $P5011, $P5009
    goto if742_end2027
  if742_else2026:
    null $P5010
    set $P5011, $P5010
  if742_end2027:
    unless_null $P5011, vivi_7432029
    nqp_get_sc_object $P5012, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5011, $P5012
  vivi_7432029:
    set $N5001, $P5011
    box $P5019, $N5001
    set $P5018, $P5019
    goto if739_end2021
  if739_else2020:
    unless_null _lex_param_1, fallback2032
    nqp_get_sc_object $P5013, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5013
  fallback2032:
    set fb_tmp_98, _lex_param_1
    repr_defined $I5003, fb_tmp_98
    unless $I5003 goto if744_else2030 
    set $P5014, fb_tmp_98["name"]
    set $P5016, $P5014
    goto if744_end2031
  if744_else2030:
    null $P5015
    set $P5016, $P5015
  if744_end2031:
    unless_null $P5016, vivi_7452033
    nqp_get_sc_object $P5017, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5016, $P5017
  vivi_7452033:
    set $S5001, $P5016
    box $P5020, $S5001
    set $P5018, $P5020
  if739_end2021:
    set $P102, $P5018
    unless_null _lex_param_1, fallback2038
    nqp_get_sc_object $P5021, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5021
  fallback2038:
    set fb_tmp_99, _lex_param_1
    repr_defined $I5004, fb_tmp_99
    unless $I5004 goto if747_else2036 
    set $P5022, fb_tmp_99["quantified_atom"]
    set $P5024, $P5022
    goto if747_end2037
  if747_else2036:
    null $P5023
    set $P5024, $P5023
  if747_end2037:
    unless_null $P5024, vivi_7482039
    nqp_get_sc_object $P5025, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5024, $P5025
  vivi_7482039:
    unless $P5024 goto if746_else2034 
.annotate 'line', 550
.annotate 'line', 551
    unless_null _lex_param_1, fallback2044
    nqp_get_sc_object $P5026, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5026
  fallback2044:
    set fb_tmp_101, _lex_param_1
    repr_defined $I5006, fb_tmp_101
    unless $I5006 goto if750_else2042 
    set $P5027, fb_tmp_101["quantified_atom"]
    set $P5029, $P5027
    goto if750_end2043
  if750_else2042:
    null $P5028
    set $P5029, $P5028
  if750_end2043:
    unless_null $P5029, vivi_7512045
    nqp_get_sc_object $P5030, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5029, $P5030
  vivi_7512045:
    set fb_tmp_100, $P5029
    repr_defined $I5005, fb_tmp_100
    unless $I5005 goto if749_else2040 
    set $P5031, fb_tmp_100[0]
    set $P5033, $P5031
    goto if749_end2041
  if749_else2040:
    null $P5032
    set $P5033, $P5032
  if749_end2041:
    unless_null $P5033, vivi_7522046
    nqp_get_sc_object $P5034, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5033, $P5034
  vivi_7522046:
    $P5035 = $P5033."ast"()
    set $P101, $P5035
.annotate 'line', 552
    $P5036 = $P101."rxtype"()
    set $S5002, $P5036
    iseq $I5007, $S5002, "quant"
    set $I5010, $I5007
    unless $I5007 goto if754_end2050 
    set fb_tmp_102, $P101
    repr_defined $I5009, fb_tmp_102
    unless $I5009 goto if755_else2051 
    set $P5037, fb_tmp_102[0]
    set $P5039, $P5037
    goto if755_end2052
  if755_else2051:
    null $P5038
    set $P5039, $P5038
  if755_end2052:
    unless_null $P5039, vivi_7562053
    nqp_get_sc_object $P5040, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5039, $P5040
  vivi_7562053:
    $P5041 = $P5039."rxtype"()
    set $S5003, $P5041
    iseq $I5008, $S5003, "subrule"
    set $I5010, $I5008
  if754_end2050:
    unless $I5010 goto if753_else2047 
.annotate 'line', 553
    nqp_decontainerize $P5042, _lex_param_0
    set fb_tmp_103, $P101
    repr_defined $I5011, fb_tmp_103
    unless $I5011 goto if757_else2054 
    set $P5043, fb_tmp_103[0]
    set $P5045, $P5043
    goto if757_end2055
  if757_else2054:
    null $P5044
    set $P5045, $P5044
  if757_end2055:
    unless_null $P5045, vivi_7582056
    nqp_get_sc_object $P5046, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5045, $P5046
  vivi_7582056:
    $P5047 = $P5042."subrule_alias"($P5045, $P102)
    set $P5054, $P5047
    goto if753_end2048
  if753_else2047:
.annotate 'line', 555
    $P5048 = $P101."rxtype"()
    set $S5004, $P5048
    iseq $I5012, $S5004, "subrule"
    unless $I5012 goto if759_else2057 
.annotate 'line', 556
    nqp_decontainerize $P5049, _lex_param_0
    $P5050 = $P5049."subrule_alias"($P101, $P102)
    set $P5053, $P5050
    goto if759_end2058
  if759_else2057:
.annotate 'line', 558
.annotate 'line', 559
    nqp_get_sc_object $P5051, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5052 = $P5051."new"($P101, $P102 :named("name"), "subcapture" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5052
    set $P5053, $P101
  if759_end2058:
    set $P5054, $P5053
  if753_end2048:
    goto if746_end2035
  if746_else2034:
.annotate 'line', 563
.annotate 'line', 564
    nqp_get_sc_object $P5055, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
.annotate 'line', 565
    nqp_get_sc_object $P5056, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 12
.annotate 'line', 566
    nqp_get_sc_object $P5057, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 52
    $P5058 = $P5057."new"("!BACKREF" :named("value"))
.annotate 'line', 567
    nqp_get_sc_object $P5059, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 52
    $P5060 = $P5059."new"($P102 :named("value"))
    $P5061 = $P5056."new"($P5058, $P5060)
    $P5062 = $P5055."new"($P5061, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    set $P101, $P5062
  if746_end2035:
.annotate 'line', 569
    $P5063 = _lex_param_1."!make"($P101)
    .return ($P5063) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<~>" :subid("cuid_144_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 572
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "@dba", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_104 
    .local pmc pkg_viv_tmp_10 
    .local pmc fb_tmp_105 
    .local pmc fb_tmp_106 
    .local pmc pkg_viv_tmp_9 
    .local pmc fb_tmp_107 
    .local pmc fb_tmp_108 
    .local pmc fb_tmp_109 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_dynamic_lex $P5002, "%*RX"
    unless_null $P5002, fallback2061
    nqp_get_sc_object $P5004, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 0
    get_who $P5003, $P5004
    set pkg_viv_tmp_10, $P5003
    set fb_tmp_104, pkg_viv_tmp_10
    repr_defined $I5002, fb_tmp_104
    unless $I5002 goto if761_else2062 
    set $P5005, fb_tmp_104["%RX"]
    set $P5007, $P5005
    goto if761_end2063
  if761_else2062:
    null $P5006
    set $P5007, $P5006
  if761_end2063:
    unless_null $P5007, vivi_7622064
    new $P5008, 'Hash'
    set pkg_viv_tmp_10["%RX"], $P5008
    set $P5007, $P5008
  vivi_7622064:
    unless_null $P5007, vivi_7632065
    die "Contextual %*RX not found"
    box $P5009, "Contextual %*RX not found"
    set $P5007, $P5009
  vivi_7632065:
    set $P5002, $P5007
  fallback2061:
    exists $I5001, $P5002["dba"]
    unless $I5001 goto if760_end2060 
    new $P5010, 'ResizablePMCArray'
.annotate 'line', 573
    nqp_get_sc_object $P5011, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 52
    find_dynamic_lex $P5012, "%*RX"
    unless_null $P5012, fallback2068
    nqp_get_sc_object $P5014, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 0
    get_who $P5013, $P5014
    set pkg_viv_tmp_9, $P5013
    set fb_tmp_106, pkg_viv_tmp_9
    repr_defined $I5004, fb_tmp_106
    unless $I5004 goto if765_else2069 
    set $P5015, fb_tmp_106["%RX"]
    set $P5017, $P5015
    goto if765_end2070
  if765_else2069:
    null $P5016
    set $P5017, $P5016
  if765_end2070:
    unless_null $P5017, vivi_7662071
    new $P5018, 'Hash'
    set pkg_viv_tmp_9["%RX"], $P5018
    set $P5017, $P5018
  vivi_7662071:
    unless_null $P5017, vivi_7672072
    die "Contextual %*RX not found"
    box $P5019, "Contextual %*RX not found"
    set $P5017, $P5019
  vivi_7672072:
    set $P5012, $P5017
  fallback2068:
    set fb_tmp_105, $P5012
    repr_defined $I5003, fb_tmp_105
    unless $I5003 goto if764_else2066 
    set $P5020, fb_tmp_105["dba"]
    set $P5022, $P5020
    goto if764_end2067
  if764_else2066:
    null $P5021
    set $P5022, $P5021
  if764_end2067:
    unless_null $P5022, vivi_7682073
    nqp_get_sc_object $P5023, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5022, $P5023
  vivi_7682073:
    $P5024 = $P5011."new"($P5022 :named("value"))
    push $P5010, $P5024
    set $P101, $P5010
  if760_end2060:
.annotate 'line', 574
    nqp_get_sc_object $P5025, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
.annotate 'line', 575
    unless_null _lex_param_1, fallback2076
    nqp_get_sc_object $P5026, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5026
  fallback2076:
    set fb_tmp_107, _lex_param_1
    repr_defined $I5005, fb_tmp_107
    unless $I5005 goto if769_else2074 
    set $P5027, fb_tmp_107["EXPR"]
    set $P5029, $P5027
    goto if769_end2075
  if769_else2074:
    null $P5028
    set $P5029, $P5028
  if769_end2075:
    unless_null $P5029, vivi_7702077
    nqp_get_sc_object $P5030, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5029, $P5030
  vivi_7702077:
    $P5031 = $P5029."ast"()
.annotate 'line', 576
    nqp_get_sc_object $P5032, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
.annotate 'line', 577
    unless_null _lex_param_1, fallback2080
    nqp_get_sc_object $P5033, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5033
  fallback2080:
    set fb_tmp_108, _lex_param_1
    repr_defined $I5006, fb_tmp_108
    unless $I5006 goto if771_else2078 
    set $P5034, fb_tmp_108["GOAL"]
    set $P5036, $P5034
    goto if771_end2079
  if771_else2078:
    null $P5035
    set $P5036, $P5035
  if771_end2079:
    unless_null $P5036, vivi_7722081
    nqp_get_sc_object $P5037, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5036, $P5037
  vivi_7722081:
    $P5038 = $P5036."ast"()
.annotate 'line', 578
    nqp_get_sc_object $P5039, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
.annotate 'line', 579
    nqp_get_sc_object $P5040, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 12
.annotate 'line', 580
    nqp_get_sc_object $P5041, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 52
    $P5042 = $P5041."new"("FAILGOAL" :named("value"))
.annotate 'line', 581
    nqp_get_sc_object $P5043, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 52
    unless_null _lex_param_1, fallback2084
    nqp_get_sc_object $P5044, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5044
  fallback2084:
    set fb_tmp_109, _lex_param_1
    repr_defined $I5007, fb_tmp_109
    unless $I5007 goto if773_else2082 
    set $P5045, fb_tmp_109["GOAL"]
    set $P5047, $P5045
    goto if773_end2083
  if773_else2082:
    null $P5046
    set $P5047, $P5046
  if773_end2083:
    unless_null $P5047, vivi_7742085
    nqp_get_sc_object $P5048, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5047, $P5048
  vivi_7742085:
    set $S5001, $P5047
    $P5049 = $P5043."new"($S5001 :named("value"))
    $P5050 = $P5040."new"($P5042, $P5049, $P101 :flat)
    $P5051 = $P5039."new"($P5050, "subrule" :named("rxtype"), "method" :named("subtype"))
    $P5052 = $P5032."new"($P5038, $P5051, "altseq" :named("rxtype"))
    $P5053 = $P5025."new"($P5031, $P5052, "concat" :named("rxtype"))
    $P5054 = _lex_param_1."!make"($P5053)
    .return ($P5054) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<mod>" :subid("cuid_145_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 589
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_110 
    unless_null _lex_param_1, fallback2088
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5001
  fallback2088:
    set fb_tmp_110, _lex_param_1
    repr_defined $I5001, fb_tmp_110
    unless $I5001 goto if775_else2086 
    set $P5002, fb_tmp_110["mod_internal"]
    set $P5004, $P5002
    goto if775_end2087
  if775_else2086:
    null $P5003
    set $P5004, $P5003
  if775_end2087:
    unless_null $P5004, vivi_7762089
    nqp_get_sc_object $P5005, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5004, $P5005
  vivi_7762089:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<s>" :subid("cuid_146_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 591
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_111 
    .local pmc fb_tmp_112 
.annotate 'line', 592
    nqp_get_sc_object $P5001, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    unless_null _lex_param_1, fallback2092
    nqp_get_sc_object $P5002, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5002
  fallback2092:
    set fb_tmp_111, _lex_param_1
    repr_defined $I5001, fb_tmp_111
    unless $I5001 goto if777_else2090 
    set $P5003, fb_tmp_111["sym"]
    set $P5005, $P5003
    goto if777_end2091
  if777_else2090:
    null $P5004
    set $P5005, $P5004
  if777_end2091:
    unless_null $P5005, vivi_7782093
    nqp_get_sc_object $P5006, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5005, $P5006
  vivi_7782093:
    set $S5002, $P5005
    downcase $S5001, $S5002
    unless_null _lex_param_1, fallback2096
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5007
  fallback2096:
    set fb_tmp_112, _lex_param_1
    repr_defined $I5003, fb_tmp_112
    unless $I5003 goto if779_else2094 
    set $P5008, fb_tmp_112["sym"]
    set $P5010, $P5008
    goto if779_end2095
  if779_else2094:
    null $P5009
    set $P5010, $P5009
  if779_end2095:
    unless_null $P5010, vivi_7802097
    nqp_get_sc_object $P5011, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5010, $P5011
  vivi_7802097:
    set $S5003, $P5010
    isle $I5002, $S5003, "Z"
    $P5012 = $P5001."new"("cclass" :named("rxtype"), $S5001 :named("name"), $I5002 :named("negate"), _lex_param_1 :named("node"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<b>" :subid("cuid_147_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 596
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_113 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
.annotate 'line', 597
    nqp_get_sc_object $P5002, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    unless_null _lex_param_1, fallback2100
    nqp_get_sc_object $P5003, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5003
  fallback2100:
    set fb_tmp_113, _lex_param_1
    repr_defined $I5002, fb_tmp_113
    unless $I5002 goto if781_else2098 
    set $P5004, fb_tmp_113["sym"]
    set $P5006, $P5004
    goto if781_end2099
  if781_else2098:
    null $P5005
    set $P5006, $P5005
  if781_end2099:
    unless_null $P5006, vivi_7822101
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5006, $P5007
  vivi_7822101:
    set $S5001, $P5006
    iseq $I5001, $S5001, "B"
    $P5008 = $P5002."new"("\b", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 599
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<e>" :subid("cuid_148_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 602
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_114 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
.annotate 'line', 603
    nqp_get_sc_object $P5002, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    unless_null _lex_param_1, fallback2104
    nqp_get_sc_object $P5003, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5003
  fallback2104:
    set fb_tmp_114, _lex_param_1
    repr_defined $I5002, fb_tmp_114
    unless $I5002 goto if783_else2102 
    set $P5004, fb_tmp_114["sym"]
    set $P5006, $P5004
    goto if783_end2103
  if783_else2102:
    null $P5005
    set $P5006, $P5005
  if783_end2103:
    unless_null $P5006, vivi_7842105
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5006, $P5007
  vivi_7842105:
    set $S5001, $P5006
    iseq $I5001, $S5001, "E"
    $P5008 = $P5002."new"("\e", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 605
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<f>" :subid("cuid_149_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 608
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_115 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
.annotate 'line', 609
    nqp_get_sc_object $P5002, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    unless_null _lex_param_1, fallback2108
    nqp_get_sc_object $P5003, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5003
  fallback2108:
    set fb_tmp_115, _lex_param_1
    repr_defined $I5002, fb_tmp_115
    unless $I5002 goto if785_else2106 
    set $P5004, fb_tmp_115["sym"]
    set $P5006, $P5004
    goto if785_end2107
  if785_else2106:
    null $P5005
    set $P5006, $P5005
  if785_end2107:
    unless_null $P5006, vivi_7862109
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5006, $P5007
  vivi_7862109:
    set $S5001, $P5006
    iseq $I5001, $S5001, "F"
    $P5008 = $P5002."new"("\f", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 611
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<h>" :subid("cuid_150_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 614
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_116 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
.annotate 'line', 615
    nqp_get_sc_object $P5002, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    unless_null _lex_param_1, fallback2112
    nqp_get_sc_object $P5003, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5003
  fallback2112:
    set fb_tmp_116, _lex_param_1
    repr_defined $I5002, fb_tmp_116
    unless $I5002 goto if787_else2110 
    set $P5004, fb_tmp_116["sym"]
    set $P5006, $P5004
    goto if787_end2111
  if787_else2110:
    null $P5005
    set $P5006, $P5005
  if787_end2111:
    unless_null $P5006, vivi_7882113
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5006, $P5007
  vivi_7882113:
    set $S5001, $P5006
    iseq $I5001, $S5001, "H"
    $P5008 = $P5002."new"(utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 617
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<r>" :subid("cuid_151_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 620
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_117 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
.annotate 'line', 621
    nqp_get_sc_object $P5002, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    unless_null _lex_param_1, fallback2116
    nqp_get_sc_object $P5003, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5003
  fallback2116:
    set fb_tmp_117, _lex_param_1
    repr_defined $I5002, fb_tmp_117
    unless $I5002 goto if789_else2114 
    set $P5004, fb_tmp_117["sym"]
    set $P5006, $P5004
    goto if789_end2115
  if789_else2114:
    null $P5005
    set $P5006, $P5005
  if789_end2115:
    unless_null $P5006, vivi_7902117
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5006, $P5007
  vivi_7902117:
    set $S5001, $P5006
    iseq $I5001, $S5001, "R"
    $P5008 = $P5002."new"("\r", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 623
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<t>" :subid("cuid_152_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 626
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_118 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
.annotate 'line', 627
    nqp_get_sc_object $P5002, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    unless_null _lex_param_1, fallback2120
    nqp_get_sc_object $P5003, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5003
  fallback2120:
    set fb_tmp_118, _lex_param_1
    repr_defined $I5002, fb_tmp_118
    unless $I5002 goto if791_else2118 
    set $P5004, fb_tmp_118["sym"]
    set $P5006, $P5004
    goto if791_end2119
  if791_else2118:
    null $P5005
    set $P5006, $P5005
  if791_end2119:
    unless_null $P5006, vivi_7922121
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5006, $P5007
  vivi_7922121:
    set $S5001, $P5006
    iseq $I5001, $S5001, "T"
    $P5008 = $P5002."new"("\t", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 629
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<v>" :subid("cuid_153_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 632
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_119 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
.annotate 'line', 633
    nqp_get_sc_object $P5002, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    unless_null _lex_param_1, fallback2124
    nqp_get_sc_object $P5003, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5003
  fallback2124:
    set fb_tmp_119, _lex_param_1
    repr_defined $I5002, fb_tmp_119
    unless $I5002 goto if793_else2122 
    set $P5004, fb_tmp_119["sym"]
    set $P5006, $P5004
    goto if793_end2123
  if793_else2122:
    null $P5005
    set $P5006, $P5005
  if793_end2123:
    unless_null $P5006, vivi_7942125
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5006, $P5007
  vivi_7942125:
    set $S5001, $P5006
    iseq $I5001, $S5001, "V"
    $P5008 = $P5002."new"(utf8:"\n\x{b}\f\r\x{85}\u2028\u2029", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 636
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<o>" :subid("cuid_154_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 639
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$octlit", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_120 
    .local pmc fb_tmp_121 
    .local pmc fb_tmp_122 
    .local pmc fb_tmp_123 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
.annotate 'line', 641
    nqp_get_sc_object $P5002, "CAD7667229FADB246BF8592D21A076CDE373EC5D-1367388566.32003", 68
    unless_null _lex_param_1, fallback2130
    nqp_get_sc_object $P5003, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5003
  fallback2130:
    set fb_tmp_120, _lex_param_1
    repr_defined $I5001, fb_tmp_120
    unless $I5001 goto if796_else2128 
    set $P5004, fb_tmp_120["octint"]
    set $P5006, $P5004
    goto if796_end2129
  if796_else2128:
    null $P5005
    set $P5006, $P5005
  if796_end2129:
    unless_null $P5006, vivi_7972131
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5006, $P5007
  vivi_7972131:
    set $P5017, $P5006
    if $P5006 goto unless795_end2127 
    unless_null _lex_param_1, fallback2136
    nqp_get_sc_object $P5008, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5008
  fallback2136:
    set fb_tmp_122, _lex_param_1
    repr_defined $I5003, fb_tmp_122
    unless $I5003 goto if799_else2134 
    set $P5009, fb_tmp_122["octints"]
    set $P5011, $P5009
    goto if799_end2135
  if799_else2134:
    null $P5010
    set $P5011, $P5010
  if799_end2135:
    unless_null $P5011, vivi_8002137
    nqp_get_sc_object $P5012, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5011, $P5012
  vivi_8002137:
    set fb_tmp_121, $P5011
    repr_defined $I5002, fb_tmp_121
    unless $I5002 goto if798_else2132 
    set $P5013, fb_tmp_121["octint"]
    set $P5015, $P5013
    goto if798_end2133
  if798_else2132:
    null $P5014
    set $P5015, $P5014
  if798_end2133:
    unless_null $P5015, vivi_8012138
    nqp_get_sc_object $P5016, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5015, $P5016
  vivi_8012138:
    set $P5017, $P5015
  unless795_end2127:
    $P5018 = $P5002."ints_to_string"($P5017)
    set $P101, $P5018
.annotate 'line', 642
    unless_null _lex_param_1, fallback2143
    nqp_get_sc_object $P5019, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5019
  fallback2143:
    set fb_tmp_123, _lex_param_1
    repr_defined $I5005, fb_tmp_123
    unless $I5005 goto if803_else2141 
    set $P5020, fb_tmp_123["sym"]
    set $P5022, $P5020
    goto if803_end2142
  if803_else2141:
    null $P5021
    set $P5022, $P5021
  if803_end2142:
    unless_null $P5022, vivi_8042144
    nqp_get_sc_object $P5023, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5022, $P5023
  vivi_8042144:
    set $S5001, $P5022
    iseq $I5004, $S5001, "O"
    unless $I5004 goto if802_else2139 
.annotate 'line', 643
    nqp_get_sc_object $P5024, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5025 = $P5024."new"($P101, "enumcharlist" :named("rxtype"), 1 :named("negate"), _lex_param_1 :named("node"))
    set $P5028, $P5025
    goto if802_end2140
  if802_else2139:
.annotate 'line', 645
    nqp_get_sc_object $P5026, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5027 = $P5026."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P5028, $P5027
  if802_end2140:
    $P5029 = _lex_param_1."!make"($P5028)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<x>" :subid("cuid_155_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 648
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$hexlit", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_124 
    .local pmc fb_tmp_125 
    .local pmc fb_tmp_126 
    .local pmc fb_tmp_127 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
.annotate 'line', 650
    nqp_get_sc_object $P5002, "CAD7667229FADB246BF8592D21A076CDE373EC5D-1367388566.32003", 68
    unless_null _lex_param_1, fallback2149
    nqp_get_sc_object $P5003, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5003
  fallback2149:
    set fb_tmp_124, _lex_param_1
    repr_defined $I5001, fb_tmp_124
    unless $I5001 goto if806_else2147 
    set $P5004, fb_tmp_124["hexint"]
    set $P5006, $P5004
    goto if806_end2148
  if806_else2147:
    null $P5005
    set $P5006, $P5005
  if806_end2148:
    unless_null $P5006, vivi_8072150
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5006, $P5007
  vivi_8072150:
    set $P5017, $P5006
    if $P5006 goto unless805_end2146 
    unless_null _lex_param_1, fallback2155
    nqp_get_sc_object $P5008, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5008
  fallback2155:
    set fb_tmp_126, _lex_param_1
    repr_defined $I5003, fb_tmp_126
    unless $I5003 goto if809_else2153 
    set $P5009, fb_tmp_126["hexints"]
    set $P5011, $P5009
    goto if809_end2154
  if809_else2153:
    null $P5010
    set $P5011, $P5010
  if809_end2154:
    unless_null $P5011, vivi_8102156
    nqp_get_sc_object $P5012, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5011, $P5012
  vivi_8102156:
    set fb_tmp_125, $P5011
    repr_defined $I5002, fb_tmp_125
    unless $I5002 goto if808_else2151 
    set $P5013, fb_tmp_125["hexint"]
    set $P5015, $P5013
    goto if808_end2152
  if808_else2151:
    null $P5014
    set $P5015, $P5014
  if808_end2152:
    unless_null $P5015, vivi_8112157
    nqp_get_sc_object $P5016, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5015, $P5016
  vivi_8112157:
    set $P5017, $P5015
  unless805_end2146:
    $P5018 = $P5002."ints_to_string"($P5017)
    set $P101, $P5018
.annotate 'line', 651
    unless_null _lex_param_1, fallback2162
    nqp_get_sc_object $P5019, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5019
  fallback2162:
    set fb_tmp_127, _lex_param_1
    repr_defined $I5005, fb_tmp_127
    unless $I5005 goto if813_else2160 
    set $P5020, fb_tmp_127["sym"]
    set $P5022, $P5020
    goto if813_end2161
  if813_else2160:
    null $P5021
    set $P5022, $P5021
  if813_end2161:
    unless_null $P5022, vivi_8142163
    nqp_get_sc_object $P5023, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5022, $P5023
  vivi_8142163:
    set $S5001, $P5022
    iseq $I5004, $S5001, "X"
    unless $I5004 goto if812_else2158 
.annotate 'line', 652
    nqp_get_sc_object $P5024, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5025 = $P5024."new"($P101, "enumcharlist" :named("rxtype"), 1 :named("negate"), _lex_param_1 :named("node"))
    set $P5028, $P5025
    goto if812_end2159
  if812_else2158:
.annotate 'line', 654
    nqp_get_sc_object $P5026, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5027 = $P5026."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P5028, $P5027
  if812_end2159:
    $P5029 = _lex_param_1."!make"($P5028)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<c>" :subid("cuid_156_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 657
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_128 
.annotate 'line', 658
    nqp_get_sc_object $P5001, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    unless_null _lex_param_1, fallback2166
    nqp_get_sc_object $P5002, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5002
  fallback2166:
    set fb_tmp_128, _lex_param_1
    repr_defined $I5001, fb_tmp_128
    unless $I5001 goto if815_else2164 
    set $P5003, fb_tmp_128["charspec"]
    set $P5005, $P5003
    goto if815_end2165
  if815_else2164:
    null $P5004
    set $P5005, $P5004
  if815_end2165:
    unless_null $P5005, vivi_8162167
    nqp_get_sc_object $P5006, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5005, $P5006
  vivi_8162167:
    $P5007 = $P5005."ast"()
    $P5008 = $P5001."new"($P5007, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    $P5009 = _lex_param_1."!make"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<misc>" :subid("cuid_157_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 661
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
.annotate 'line', 662
    nqp_get_sc_object $P5002, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    set $S5001, _lex_param_1
    $P5003 = $P5002."new"($S5001, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5003
.annotate 'line', 663
    $P5004 = _lex_param_1."!make"($P101)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_158_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 666
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_129 
    .local pmc fb_tmp_130 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
    unless_null _lex_param_1, fallback2172
    nqp_get_sc_object $P5002, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5002
  fallback2172:
    set fb_tmp_129, _lex_param_1
    repr_defined $I5001, fb_tmp_129
    unless $I5001 goto if818_else2170 
    set $P5003, fb_tmp_129["assertion"]
    set $P5005, $P5003
    goto if818_end2171
  if818_else2170:
    null $P5004
    set $P5005, $P5004
  if818_end2171:
    unless_null $P5005, vivi_8192173
    nqp_get_sc_object $P5006, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5005, $P5006
  vivi_8192173:
    unless $P5005 goto if817_else2168 
.annotate 'line', 668
.annotate 'line', 669
    unless_null _lex_param_1, fallback2176
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5007
  fallback2176:
    set fb_tmp_130, _lex_param_1
    repr_defined $I5002, fb_tmp_130
    unless $I5002 goto if820_else2174 
    set $P5008, fb_tmp_130["assertion"]
    set $P5010, $P5008
    goto if820_end2175
  if820_else2174:
    null $P5009
    set $P5010, $P5009
  if820_end2175:
    unless_null $P5010, vivi_8212177
    nqp_get_sc_object $P5011, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5010, $P5011
  vivi_8212177:
    $P5012 = $P5010."ast"()
    set $P101, $P5012
.annotate 'line', 670
    $P5013 = $P101."subtype"("zerowidth")
    goto if817_end2169
  if817_else2168:
.annotate 'line', 672
.annotate 'line', 673
    nqp_get_sc_object $P5014, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5015 = $P5014."new"("anchor" :named("rxtype"), "pass" :named("subtype"), _lex_param_1 :named("node"))
    set $P101, $P5015
  if817_end2169:
.annotate 'line', 675
    $P5016 = _lex_param_1."!make"($P101)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_159_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 678
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_131 
    .local pmc fb_tmp_132 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
    unless_null _lex_param_1, fallback2182
    nqp_get_sc_object $P5002, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5002
  fallback2182:
    set fb_tmp_131, _lex_param_1
    repr_defined $I5001, fb_tmp_131
    unless $I5001 goto if823_else2180 
    set $P5003, fb_tmp_131["assertion"]
    set $P5005, $P5003
    goto if823_end2181
  if823_else2180:
    null $P5004
    set $P5005, $P5004
  if823_end2181:
    unless_null $P5005, vivi_8242183
    nqp_get_sc_object $P5006, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5005, $P5006
  vivi_8242183:
    unless $P5005 goto if822_else2178 
.annotate 'line', 680
.annotate 'line', 681
    unless_null _lex_param_1, fallback2186
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5007
  fallback2186:
    set fb_tmp_132, _lex_param_1
    repr_defined $I5002, fb_tmp_132
    unless $I5002 goto if825_else2184 
    set $P5008, fb_tmp_132["assertion"]
    set $P5010, $P5008
    goto if825_end2185
  if825_else2184:
    null $P5009
    set $P5010, $P5009
  if825_end2185:
    unless_null $P5010, vivi_8262187
    nqp_get_sc_object $P5011, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5010, $P5011
  vivi_8262187:
    $P5012 = $P5010."ast"()
    set $P101, $P5012
.annotate 'line', 682
    $P5013 = $P101."negate"()
    isfalse $I5003, $P5013
    $P101."negate"($I5003)
.annotate 'line', 683
    $P5014 = $P101."subtype"("zerowidth")
    goto if822_end2179
  if822_else2178:
.annotate 'line', 685
.annotate 'line', 686
    nqp_get_sc_object $P5015, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5016 = $P5015."new"("anchor" :named("rxtype"), "fail" :named("subtype"), _lex_param_1 :named("node"))
    set $P101, $P5016
  if822_end2179:
.annotate 'line', 688
    $P5017 = _lex_param_1."!make"($P101)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<|>" :subid("cuid_160_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 691
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "$name", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_133 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P102, $P5002
    unless_null _lex_param_1, fallback2190
    nqp_get_sc_object $P5003, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5003
  fallback2190:
    set fb_tmp_133, _lex_param_1
    repr_defined $I5001, fb_tmp_133
    unless $I5001 goto if827_else2188 
    set $P5004, fb_tmp_133["identifier"]
    set $P5006, $P5004
    goto if827_end2189
  if827_else2188:
    null $P5005
    set $P5006, $P5005
  if827_end2189:
    unless_null $P5006, vivi_8282191
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5006, $P5007
  vivi_8282191:
    set $S5001, $P5006
    box $P5008, $S5001
    set $P102, $P5008
    set $S5002, $P102
    iseq $I5002, $S5002, "c"
    unless $I5002 goto if829_else2192 
.annotate 'line', 694
    box $P5009, 0
    set $P101, $P5009
    goto if829_end2193
  if829_else2192:
    set $S5003, $P102
    iseq $I5003, $S5003, "w"
    box $P5017, $I5003
    set $P5016, $P5017
    unless $I5003 goto if830_end2195 
.annotate 'line', 699
.annotate 'line', 700
    nqp_get_sc_object $P5010, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
.annotate 'line', 702
    nqp_get_sc_object $P5011, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 12
    nqp_get_sc_object $P5012, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 52
    $P5013 = $P5012."new"("wb" :named("value"))
    $P5014 = $P5011."new"($P5013)
    $P5015 = $P5010."new"($P5014, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"), "" :named("name"))
    set $P101, $P5015
    set $P5016, $P101
  if830_end2195:
  if829_end2193:
.annotate 'line', 704
    $P5018 = _lex_param_1."!make"($P101)
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<method>" :subid("cuid_161_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 707
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_134 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
.annotate 'line', 708
    unless_null _lex_param_1, fallback2198
    nqp_get_sc_object $P5002, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5002
  fallback2198:
    set fb_tmp_134, _lex_param_1
    repr_defined $I5001, fb_tmp_134
    unless $I5001 goto if831_else2196 
    set $P5003, fb_tmp_134["assertion"]
    set $P5005, $P5003
    goto if831_end2197
  if831_else2196:
    null $P5004
    set $P5005, $P5004
  if831_end2197:
    unless_null $P5005, vivi_8322199
    nqp_get_sc_object $P5006, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5005, $P5006
  vivi_8322199:
    $P5007 = $P5005."ast"()
    set $P101, $P5007
.annotate 'line', 709
    $P101."subtype"("method")
.annotate 'line', 710
    $P101."name"("")
.annotate 'line', 711
    $P5008 = _lex_param_1."!make"($P101)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_162_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 714
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5101 = 'cuid_217_1367388594.4399' 
    capture_lex $P5101 
    .const 'Sub' $P5101 = 'cuid_218_1367388594.4399' 
    capture_lex $P5101 
    .lex "$name", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_135 
    .local pmc fb_tmp_136 
    .local pmc fb_tmp_137 
    .local pmc fb_tmp_138 
    .local pmc fb_tmp_145 
    .local pmc fb_tmp_146 
    .local pmc fb_tmp_147 
    .local pmc fb_tmp_149 
    .local pmc fb_tmp_150 
    .local pmc fb_tmp_151 
    .local pmc fb_tmp_152 
    .local pmc fb_tmp_153 
    .local pmc fb_tmp_154 
    .local pmc fb_tmp_155 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P102, $P5002
    unless_null _lex_param_1, fallback2202
    nqp_get_sc_object $P5003, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5003
  fallback2202:
    set fb_tmp_135, _lex_param_1
    repr_defined $I5001, fb_tmp_135
    unless $I5001 goto if833_else2200 
    set $P5004, fb_tmp_135["longname"]
    set $P5006, $P5004
    goto if833_end2201
  if833_else2200:
    null $P5005
    set $P5006, $P5005
  if833_end2201:
    unless_null $P5006, vivi_8342203
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5006, $P5007
  vivi_8342203:
    set $S5001, $P5006
    box $P5008, $S5001
    set $P101, $P5008
    unless_null _lex_param_1, fallback2208
    nqp_get_sc_object $P5009, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5009
  fallback2208:
    set fb_tmp_136, _lex_param_1
    repr_defined $I5002, fb_tmp_136
    unless $I5002 goto if836_else2206 
    set $P5010, fb_tmp_136["assertion"]
    set $P5012, $P5010
    goto if836_end2207
  if836_else2206:
    null $P5011
    set $P5012, $P5011
  if836_end2207:
    unless_null $P5012, vivi_8372209
    nqp_get_sc_object $P5013, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5012, $P5013
  vivi_8372209:
    unless $P5012 goto if835_else2204 
.annotate 'line', 717
.annotate 'line', 718
    unless_null _lex_param_1, fallback2214
    nqp_get_sc_object $P5014, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5014
  fallback2214:
    set fb_tmp_138, _lex_param_1
    repr_defined $I5004, fb_tmp_138
    unless $I5004 goto if839_else2212 
    set $P5015, fb_tmp_138["assertion"]
    set $P5017, $P5015
    goto if839_end2213
  if839_else2212:
    null $P5016
    set $P5017, $P5016
  if839_end2213:
    unless_null $P5017, vivi_8402215
    nqp_get_sc_object $P5018, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5017, $P5018
  vivi_8402215:
    set fb_tmp_137, $P5017
    repr_defined $I5003, fb_tmp_137
    unless $I5003 goto if838_else2210 
    set $P5019, fb_tmp_137[0]
    set $P5021, $P5019
    goto if838_end2211
  if838_else2210:
    null $P5020
    set $P5021, $P5020
  if838_end2211:
    unless_null $P5021, vivi_8412216
    nqp_get_sc_object $P5022, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5021, $P5022
  vivi_8412216:
    $P5023 = $P5021."ast"()
    set $P102, $P5023
.annotate 'line', 719
    nqp_decontainerize $P5024, _lex_param_0
    $P5025 = $P5024."subrule_alias"($P102, $P101)
    goto if835_end2205
  if835_else2204:
    set $S5002, $P101
    iseq $I5005, $S5002, "sym"
    unless $I5005 goto if842_else2217 
    .const 'Sub' $P5026 = 'cuid_217_1367388594.4399' 
    capture_lex $P5026
    $P5027 = $P5026()
    set $P5099, $P5027
    goto if842_end2218
  if842_else2217:
.annotate 'line', 730
.annotate 'line', 731
    nqp_get_sc_object $P5028, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
.annotate 'line', 733
    nqp_get_sc_object $P5029, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 12
    nqp_get_sc_object $P5030, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 52
    $P5031 = $P5030."new"($P101 :named("value"))
    $P5032 = $P5029."new"($P5031)
    $P5033 = $P5028."new"($P5032, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"), $P101 :named("name"))
    set $P102, $P5033
    unless_null _lex_param_1, fallback2249
    nqp_get_sc_object $P5034, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5034
  fallback2249:
    set fb_tmp_145, _lex_param_1
    repr_defined $I5006, fb_tmp_145
    unless $I5006 goto if860_else2247 
    set $P5035, fb_tmp_145["arglist"]
    set $P5037, $P5035
    goto if860_end2248
  if860_else2247:
    null $P5036
    set $P5037, $P5036
  if860_end2248:
    unless_null $P5037, vivi_8612250
    nqp_get_sc_object $P5038, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5037, $P5038
  vivi_8612250:
    unless $P5037 goto if859_else2245 
.annotate 'line', 734
.annotate 'line', 735
    unless_null _lex_param_1, fallback2255
    nqp_get_sc_object $P5042, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5042
  fallback2255:
    set fb_tmp_147, _lex_param_1
    repr_defined $I5008, fb_tmp_147
    unless $I5008 goto if863_else2253 
    set $P5043, fb_tmp_147["arglist"]
    set $P5045, $P5043
    goto if863_end2254
  if863_else2253:
    null $P5044
    set $P5045, $P5044
  if863_end2254:
    unless_null $P5045, vivi_8642256
    nqp_get_sc_object $P5046, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5045, $P5046
  vivi_8642256:
    set fb_tmp_146, $P5045
    repr_defined $I5007, fb_tmp_146
    unless $I5007 goto if862_else2251 
    set $P5047, fb_tmp_146[0]
    set $P5049, $P5047
    goto if862_end2252
  if862_else2251:
    null $P5048
    set $P5049, $P5048
  if862_end2252:
    unless_null $P5049, vivi_8652257
    nqp_get_sc_object $P5050, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5049, $P5050
  vivi_8652257:
    $P5051 = $P5049."ast"()
    $P5052 = $P5051."list"()
    set $P5039, $P5052
    iter $P5041, $P5052
  for_next2261:
    unless $P5041, for_done2263
    shift $P5054, $P5041
  for_redo2262:
    .const 'Sub' $P5053 = 'cuid_218_1367388594.4399' 
    capture_lex $P5053
    $P5039 = $P5053($P5054)
    goto for_next2261
  for_done2263:
    set $P5098, $P5039
    goto if859_end2246
  if859_else2245:
    unless_null _lex_param_1, fallback2268
    nqp_get_sc_object $P5055, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5055
  fallback2268:
    set fb_tmp_149, _lex_param_1
    repr_defined $I5009, fb_tmp_149
    unless $I5009 goto if869_else2266 
    set $P5056, fb_tmp_149["nibbler"]
    set $P5058, $P5056
    goto if869_end2267
  if869_else2266:
    null $P5057
    set $P5058, $P5057
  if869_end2267:
    unless_null $P5058, vivi_8702269
    nqp_get_sc_object $P5059, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5058, $P5059
  vivi_8702269:
    set $P5097, $P5058
    unless $P5058 goto if868_end2265 
.annotate 'line', 737
    set $S5003, $P101
    iseq $I5010, $S5003, "after"
    unless $I5010 goto if871_else2270 
.annotate 'line', 739
    set fb_tmp_150, $P102
    repr_defined $I5011, fb_tmp_150
    unless $I5011 goto if872_else2272 
    set $P5060, fb_tmp_150[0]
    set $P5062, $P5060
    goto if872_end2273
  if872_else2272:
    null $P5061
    set $P5062, $P5061
  if872_end2273:
    unless_null $P5062, vivi_8732274
    nqp_get_sc_object $P5063, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5062, $P5063
  vivi_8732274:
    nqp_decontainerize $P5064, _lex_param_0
    nqp_decontainerize $P5065, _lex_param_0
    unless_null _lex_param_1, fallback2279
    nqp_get_sc_object $P5066, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5066
  fallback2279:
    set fb_tmp_152, _lex_param_1
    repr_defined $I5013, fb_tmp_152
    unless $I5013 goto if875_else2277 
    set $P5067, fb_tmp_152["nibbler"]
    set $P5069, $P5067
    goto if875_end2278
  if875_else2277:
    null $P5068
    set $P5069, $P5068
  if875_end2278:
    unless_null $P5069, vivi_8762280
    nqp_get_sc_object $P5070, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5069, $P5070
  vivi_8762280:
    set fb_tmp_151, $P5069
    repr_defined $I5012, fb_tmp_151
    unless $I5012 goto if874_else2275 
    set $P5071, fb_tmp_151[0]
    set $P5073, $P5071
    goto if874_end2276
  if874_else2275:
    null $P5072
    set $P5073, $P5072
  if874_end2276:
    unless_null $P5073, vivi_8772281
    nqp_get_sc_object $P5074, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5073, $P5074
  vivi_8772281:
    $P5075 = $P5073."ast"()
    $P5076 = $P5065."flip_ast"($P5075)
    $P5077 = $P5064."qbuildsub"($P5076, 1 :named("anon"), 1 :named("addself"))
    $P5078 = $P5062."push"($P5077)
    set $P5096, $P5078
    goto if871_end2271
  if871_else2270:
.annotate 'line', 740
    set fb_tmp_153, $P102
    repr_defined $I5014, fb_tmp_153
    unless $I5014 goto if878_else2282 
    set $P5079, fb_tmp_153[0]
    set $P5081, $P5079
    goto if878_end2283
  if878_else2282:
    null $P5080
    set $P5081, $P5080
  if878_end2283:
    unless_null $P5081, vivi_8792284
    nqp_get_sc_object $P5082, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5081, $P5082
  vivi_8792284:
    nqp_decontainerize $P5083, _lex_param_0
    unless_null _lex_param_1, fallback2289
    nqp_get_sc_object $P5084, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5084
  fallback2289:
    set fb_tmp_155, _lex_param_1
    repr_defined $I5016, fb_tmp_155
    unless $I5016 goto if881_else2287 
    set $P5085, fb_tmp_155["nibbler"]
    set $P5087, $P5085
    goto if881_end2288
  if881_else2287:
    null $P5086
    set $P5087, $P5086
  if881_end2288:
    unless_null $P5087, vivi_8822290
    nqp_get_sc_object $P5088, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5087, $P5088
  vivi_8822290:
    set fb_tmp_154, $P5087
    repr_defined $I5015, fb_tmp_154
    unless $I5015 goto if880_else2285 
    set $P5089, fb_tmp_154[0]
    set $P5091, $P5089
    goto if880_end2286
  if880_else2285:
    null $P5090
    set $P5091, $P5090
  if880_end2286:
    unless_null $P5091, vivi_8832291
    nqp_get_sc_object $P5092, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5091, $P5092
  vivi_8832291:
    $P5093 = $P5091."ast"()
    $P5094 = $P5083."qbuildsub"($P5093, 1 :named("anon"), 1 :named("addself"))
    $P5095 = $P5081."push"($P5094)
    set $P5096, $P5095
  if871_end2271:
    set $P5097, $P5096
  if868_end2265:
    set $P5098, $P5097
  if859_end2246:
    set $P5099, $P5098
  if842_end2218:
  if835_end2205:
.annotate 'line', 743
    $P5100 = _lex_param_1."!make"($P102)
    .return ($P5100) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_217_1367388594.4399") :anon :lex :outer("cuid_162_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 721
    .lex "$loc", $P101 
    .lex "$rxname", $P102 
    .local pmc fb_tmp_139 
    .local pmc fb_tmp_140 
    .local pmc pkg_viv_tmp_11 
    .local pmc fb_tmp_141 
    .local pmc fb_tmp_142 
    .local pmc pkg_viv_tmp_12 
    .local pmc fb_tmp_143 
    .local pmc fb_tmp_144 
    .local pmc pkg_viv_tmp_13 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P102, $P5002
    find_dynamic_lex $P5003, "%*RX"
    unless_null $P5003, fallback2221
    nqp_get_sc_object $P5005, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 0
    get_who $P5004, $P5005
    set pkg_viv_tmp_11, $P5004
    set fb_tmp_140, pkg_viv_tmp_11
    repr_defined $I5003, fb_tmp_140
    unless $I5003 goto if844_else2222 
    set $P5006, fb_tmp_140["%RX"]
    set $P5008, $P5006
    goto if844_end2223
  if844_else2222:
    null $P5007
    set $P5008, $P5007
  if844_end2223:
    unless_null $P5008, vivi_8452224
    new $P5009, 'Hash'
    set pkg_viv_tmp_11["%RX"], $P5009
    set $P5008, $P5009
  vivi_8452224:
    unless_null $P5008, vivi_8462225
    die "Contextual %*RX not found"
    box $P5010, "Contextual %*RX not found"
    set $P5008, $P5010
  vivi_8462225:
    set $P5003, $P5008
  fallback2221:
    set fb_tmp_139, $P5003
    repr_defined $I5002, fb_tmp_139
    unless $I5002 goto if843_else2219 
    set $P5011, fb_tmp_139["name"]
    set $P5013, $P5011
    goto if843_end2220
  if843_else2219:
    null $P5012
    set $P5013, $P5012
  if843_end2220:
    unless_null $P5013, vivi_8472226
    nqp_get_sc_object $P5014, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5013, $P5014
  vivi_8472226:
    set $S5001, $P5013
    index $I5001, $S5001, ":sym<", 0
    box $P5015, $I5001
    set $P101, $P5015
    set $N5001, $P101
    set $N5002, 0
    islt $I5004, $N5001, $N5002
    unless $I5004 goto if848_end2228 
    find_dynamic_lex $P5016, "%*RX"
    unless_null $P5016, fallback2231
    nqp_get_sc_object $P5018, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 0
    get_who $P5017, $P5018
    set pkg_viv_tmp_12, $P5017
    set fb_tmp_142, pkg_viv_tmp_12
    repr_defined $I5007, fb_tmp_142
    unless $I5007 goto if850_else2232 
    set $P5019, fb_tmp_142["%RX"]
    set $P5021, $P5019
    goto if850_end2233
  if850_else2232:
    null $P5020
    set $P5021, $P5020
  if850_end2233:
    unless_null $P5021, vivi_8512234
    new $P5022, 'Hash'
    set pkg_viv_tmp_12["%RX"], $P5022
    set $P5021, $P5022
  vivi_8512234:
    unless_null $P5021, vivi_8522235
    die "Contextual %*RX not found"
    box $P5023, "Contextual %*RX not found"
    set $P5021, $P5023
  vivi_8522235:
    set $P5016, $P5021
  fallback2231:
    set fb_tmp_141, $P5016
    repr_defined $I5006, fb_tmp_141
    unless $I5006 goto if849_else2229 
    set $P5024, fb_tmp_141["name"]
    set $P5026, $P5024
    goto if849_end2230
  if849_else2229:
    null $P5025
    set $P5026, $P5025
  if849_end2230:
    unless_null $P5026, vivi_8532236
    nqp_get_sc_object $P5027, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5026, $P5027
  vivi_8532236:
    set $S5002, $P5026
    index $I5005, $S5002, utf8:":sym\x{ab}", 0
    box $P5028, $I5005
    set $P101, $P5028
  if848_end2228:
    find_dynamic_lex $P5029, "%*RX"
    unless_null $P5029, fallback2239
    nqp_get_sc_object $P5031, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 0
    get_who $P5030, $P5031
    set pkg_viv_tmp_13, $P5030
    set fb_tmp_144, pkg_viv_tmp_13
    repr_defined $I5009, fb_tmp_144
    unless $I5009 goto if855_else2240 
    set $P5032, fb_tmp_144["%RX"]
    set $P5034, $P5032
    goto if855_end2241
  if855_else2240:
    null $P5033
    set $P5034, $P5033
  if855_end2241:
    unless_null $P5034, vivi_8562242
    new $P5035, 'Hash'
    set pkg_viv_tmp_13["%RX"], $P5035
    set $P5034, $P5035
  vivi_8562242:
    unless_null $P5034, vivi_8572243
    die "Contextual %*RX not found"
    box $P5036, "Contextual %*RX not found"
    set $P5034, $P5036
  vivi_8572243:
    set $P5029, $P5034
  fallback2239:
    set fb_tmp_143, $P5029
    repr_defined $I5008, fb_tmp_143
    unless $I5008 goto if854_else2237 
    set $P5037, fb_tmp_143["name"]
    set $P5039, $P5037
    goto if854_end2238
  if854_else2237:
    null $P5038
    set $P5039, $P5038
  if854_end2238:
    unless_null $P5039, vivi_8582244
    nqp_get_sc_object $P5040, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5039, $P5040
  vivi_8582244:
    set $S5004, $P5039
    set $N5004, $P101
    set $N5005, 5
    add $N5003, $N5004, $N5005
    set $I5010, $N5003
    substr $S5003, $S5004, $I5010
    box $P5041, $S5003
    set $P102, $P5041
    set $S5006, $P102
    set $S5007, $P102
    length $I5011, $S5007
    set $N5007, $I5011
    set $N5008, 1
    sub $N5006, $N5007, $N5008
    set $I5012, $N5006
    substr $S5005, $S5006, 0, $I5012
    box $P5042, $S5005
    set $P102, $P5042
.annotate 'line', 727
    nqp_get_sc_object $P5043, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    find_lex $P5044, "$/"
.annotate 'line', 728
    nqp_get_sc_object $P5045, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    find_lex $P5046, "$/"
    $P5047 = $P5045."new"($P102, "literal" :named("rxtype"), $P5046 :named("node"))
    $P5048 = $P5043."new"($P5047, "sym" :named("name"), "subcapture" :named("rxtype"), $P5044 :named("node"))
    store_lex "$qast", $P5048
    .return ($P5048) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_218_1367388594.4399") :anon :lex :outer("cuid_162_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 735
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_148 
    find_lex $P5001, "$qast"
    set fb_tmp_148, $P5001
    repr_defined $I5001, fb_tmp_148
    unless $I5001 goto if866_else2258 
    set $P5002, fb_tmp_148[0]
    set $P5004, $P5002
    goto if866_end2259
  if866_else2258:
    null $P5003
    set $P5004, $P5003
  if866_end2259:
    unless_null $P5004, vivi_8672260
    nqp_get_sc_object $P5005, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5004, $P5005
  vivi_8672260:
    $P5006 = $P5004."push"(_lex_param_0)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<[>" :subid("cuid_163_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 746
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_219_1367388594.4399' 
    capture_lex $P5030 
    .lex "$clist", $P101 
    .lex "$qast", $P102 
    .lex "$i", $P103 
    .lex "$n", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_156 
    .local pmc fb_tmp_157 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P103, $P5003
    nqp_get_sc_object $P5004, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P104, $P5004
    unless_null _lex_param_1, fallback2294
    nqp_get_sc_object $P5005, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5005
  fallback2294:
    set fb_tmp_156, _lex_param_1
    repr_defined $I5001, fb_tmp_156
    unless $I5001 goto if884_else2292 
    set $P5006, fb_tmp_156["cclass_elem"]
    set $P5008, $P5006
    goto if884_end2293
  if884_else2292:
    null $P5007
    set $P5008, $P5007
  if884_end2293:
    unless_null $P5008, vivi_8852295
    nqp_get_sc_object $P5009, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5008, $P5009
  vivi_8852295:
    set $P101, $P5008
.annotate 'line', 748
    set fb_tmp_157, $P101
    repr_defined $I5002, fb_tmp_157
    unless $I5002 goto if886_else2296 
    set $P5010, fb_tmp_157[0]
    set $P5012, $P5010
    goto if886_end2297
  if886_else2296:
    null $P5011
    set $P5012, $P5011
  if886_end2297:
    unless_null $P5012, vivi_8872298
    nqp_get_sc_object $P5013, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5012, $P5013
  vivi_8872298:
    $P5014 = $P5012."ast"()
    set $P102, $P5014
.annotate 'line', 749
    $P5015 = $P102."negate"()
    set $P5017, $P5015
    unless $P5015 goto if889_end2302 
    $P5016 = $P102."rxtype"()
    set $S5001, $P5016
    iseq $I5003, $S5001, "subrule"
    box $P5018, $I5003
    set $P5017, $P5018
  if889_end2302:
    unless $P5017 goto if888_end2300 
.annotate 'line', 750
    $P102."subtype"("zerowidth")
.annotate 'line', 751
    nqp_get_sc_object $P5019, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
.annotate 'line', 753
    nqp_get_sc_object $P5020, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5021 = $P5020."new"("cclass" :named("rxtype"), "." :named("name"))
    $P5022 = $P5019."new"($P102, $P5021, "concat" :named("rxtype"), _lex_param_1 :named("node"))
    set $P102, $P5022
  if888_end2300:
    box $P5023, 1
    set $P103, $P5023
    set $N5001, $P101
    box $P5024, $N5001
    set $P104, $P5024
  while890_test2303:
    set $N5002, $P103
    set $N5003, $P104
    islt $I5004, $N5002, $N5003
    box $P5028, $I5004
    set $P5027, $P5028
    unless $I5004 goto while890_done2307 
  while890_redo2305:
    .const 'Sub' $P5025 = 'cuid_219_1367388594.4399' 
    capture_lex $P5025
    $P5026 = $P5025()
    set $P5027, $P5026
    goto while890_test2303 
  while890_done2307:
.annotate 'line', 771
    $P5029 = _lex_param_1."!make"($P102)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_219_1367388594.4399") :anon :lex :outer("cuid_163_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 758
    .lex "$ast", $P101 
    .local pmc fb_tmp_158 
    .local pmc tmp_2 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
.annotate 'line', 759
    find_lex $P5002, "$clist"
    set fb_tmp_158, $P5002
    repr_defined $I5001, fb_tmp_158
    unless $I5001 goto if891_else2308 
    find_lex $P5004, "$i"
    set $I5002, $P5004
    set $P5003, fb_tmp_158[$I5002]
    set $P5006, $P5003
    goto if891_end2309
  if891_else2308:
    null $P5005
    set $P5006, $P5005
  if891_end2309:
    unless_null $P5006, vivi_8922310
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5006, $P5007
  vivi_8922310:
    $P5008 = $P5006."ast"()
    set $P101, $P5008
.annotate 'line', 760
    $P5009 = $P101."negate"()
    set $P5012, $P5009
    if $P5009 goto unless894_end2314 
    $P5010 = $P101."rxtype"()
    set $S5001, $P5010
    iseq $I5003, $S5001, "cclass"
    set $I5005, $I5003
    unless $I5003 goto if895_end2316 
    $P5011 = $P101."node"()
    set $S5002, $P5011
    isle $I5004, $S5002, "Z"
    set $I5005, $I5004
  if895_end2316:
    box $P5013, $I5005
    set $P5012, $P5013
  unless894_end2314:
    unless $P5012 goto if893_else2311 
.annotate 'line', 761
    $P101."subtype"("zerowidth")
.annotate 'line', 762
    nqp_get_sc_object $P5014, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    find_lex $P5015, "$/"
.annotate 'line', 763
    nqp_get_sc_object $P5016, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5017 = $P5016."new"($P101, "conj" :named("rxtype"), "zerowidth" :named("subtype"))
    find_lex $P5018, "$qast"
    $P5019 = $P5014."new"($P5017, $P5018, "concat" :named("rxtype"), $P5015 :named("node"), "zerowidth" :named("subtype"), 1 :named("negate"))
    store_lex "$qast", $P5019
    goto if893_end2312
  if893_else2311:
.annotate 'line', 766
.annotate 'line', 767
    nqp_get_sc_object $P5020, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    find_lex $P5021, "$qast"
    find_lex $P5022, "$/"
    $P5023 = $P5020."new"($P5021, $P101, "altseq" :named("rxtype"), $P5022 :named("node"))
    store_lex "$qast", $P5023
  if893_end2312:
    find_lex $P5024, "$i"
    set tmp_2, $P5024
    set $N5002, tmp_2
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5025, $N5001
    store_lex "$i", $P5025
    .return (tmp_2) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_164_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 774
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_159 
    .local pmc fb_tmp_160 
    .local pmc fb_tmp_161 
.annotate 'line', 775
    unless_null _lex_param_1, fallback2321
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5001
  fallback2321:
    set fb_tmp_159, _lex_param_1
    repr_defined $I5001, fb_tmp_159
    unless $I5001 goto if897_else2319 
    set $P5002, fb_tmp_159["quote_EXPR"]
    set $P5004, $P5002
    goto if897_end2320
  if897_else2319:
    null $P5003
    set $P5004, $P5003
  if897_end2320:
    unless_null $P5004, vivi_8982322
    nqp_get_sc_object $P5005, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5004, $P5005
  vivi_8982322:
    unless $P5004 goto if896_else2317 
.annotate 'line', 776
    unless_null _lex_param_1, fallback2325
    nqp_get_sc_object $P5006, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5006
  fallback2325:
    set fb_tmp_160, _lex_param_1
    repr_defined $I5002, fb_tmp_160
    unless $I5002 goto if899_else2323 
    set $P5007, fb_tmp_160["quote_EXPR"]
    set $P5009, $P5007
    goto if899_end2324
  if899_else2323:
    null $P5008
    set $P5009, $P5008
  if899_end2324:
    unless_null $P5009, vivi_9002326
    nqp_get_sc_object $P5010, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5009, $P5010
  vivi_9002326:
    $P5011 = $P5009."ast"()
    set $P5019, $P5011
    goto if896_end2318
  if896_else2317:
.annotate 'line', 777
    nqp_get_sc_object $P5012, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 47
    unless_null _lex_param_1, fallback2329
    nqp_get_sc_object $P5013, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5013
  fallback2329:
    set fb_tmp_161, _lex_param_1
    repr_defined $I5003, fb_tmp_161
    unless $I5003 goto if901_else2327 
    set $P5014, fb_tmp_161["val"]
    set $P5016, $P5014
    goto if901_end2328
  if901_else2327:
    null $P5015
    set $P5016, $P5015
  if901_end2328:
    unless_null $P5016, vivi_9022330
    nqp_get_sc_object $P5017, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5016, $P5017
  vivi_9022330:
    set $N5001, $P5016
    $P5018 = $P5012."new"($N5001 :named("value"))
    set $P5019, $P5018
  if896_end2318:
    $P5020 = _lex_param_1."!make"($P5019)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_165_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 780
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5015 = 'cuid_220_1367388594.4399' 
    capture_lex $P5015 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_162 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
.annotate 'line', 781
    nqp_get_sc_object $P5002, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 82
    $P5003 = $P5002."new"("list" :named("op"))
    set $P101, $P5003
    unless_null _lex_param_1, fallback2333
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5007
  fallback2333:
    set fb_tmp_162, _lex_param_1
    repr_defined $I5001, fb_tmp_162
    unless $I5001 goto if903_else2331 
    set $P5008, fb_tmp_162["arg"]
    set $P5010, $P5008
    goto if903_end2332
  if903_else2331:
    null $P5009
    set $P5010, $P5009
  if903_end2332:
    unless_null $P5010, vivi_9042334
    nqp_get_sc_object $P5011, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5010, $P5011
  vivi_9042334:
    set $P5004, $P5010
    iter $P5006, $P5010
  for_next2335:
    unless $P5006, for_done2337
    shift $P5013, $P5006
  for_redo2336:
    .const 'Sub' $P5012 = 'cuid_220_1367388594.4399' 
    capture_lex $P5012
    $P5004 = $P5012($P5013)
    goto for_next2335
  for_done2337:
.annotate 'line', 783
    $P5014 = _lex_param_1."!make"($P101)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_220_1367388594.4399") :anon :lex :outer("cuid_165_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 782
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$past"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_elem" :subid("cuid_166_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 786
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5022 = 'cuid_221_1367388594.4399' 
    capture_lex $P5022 
    .const 'Sub' $P5022 = 'cuid_222_1367388594.4399' 
    capture_lex $P5022 
    .const 'Sub' $P5022 = 'cuid_227_1367388594.4399' 
    capture_lex $P5022 
    .lex "$str", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_163 
    .local pmc fb_tmp_166 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P102, $P5002
    box $P5003, ""
    set $P101, $P5003
    unless_null _lex_param_1, fallback2342
    nqp_get_sc_object $P5004, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5004
  fallback2342:
    set fb_tmp_163, _lex_param_1
    repr_defined $I5001, fb_tmp_163
    unless $I5001 goto if906_else2340 
    set $P5005, fb_tmp_163["name"]
    set $P5007, $P5005
    goto if906_end2341
  if906_else2340:
    null $P5006
    set $P5007, $P5006
  if906_end2341:
    unless_null $P5007, vivi_9072343
    nqp_get_sc_object $P5008, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5007, $P5008
  vivi_9072343:
    unless $P5007 goto if905_else2338 
    .const 'Sub' $P5009 = 'cuid_221_1367388594.4399' 
    capture_lex $P5009
    $P5010 = $P5009()
    goto if905_end2339
  if905_else2338:
    unless_null _lex_param_1, fallback2356
    nqp_get_sc_object $P5011, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5011
  fallback2356:
    set fb_tmp_166, _lex_param_1
    repr_defined $I5002, fb_tmp_166
    unless $I5002 goto if913_else2354 
    set $P5012, fb_tmp_166["uniprop"]
    set $P5014, $P5012
    goto if913_end2355
  if913_else2354:
    null $P5013
    set $P5014, $P5013
  if913_end2355:
    unless_null $P5014, vivi_9142357
    nqp_get_sc_object $P5015, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5014, $P5015
  vivi_9142357:
    unless $P5014 goto if912_else2352 
    .const 'Sub' $P5016 = 'cuid_222_1367388594.4399' 
    capture_lex $P5016
    $P5017 = $P5016()
    set $P5020, $P5017
    goto if912_end2353
  if912_else2352:
    .const 'Sub' $P5018 = 'cuid_227_1367388594.4399' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5020, $P5019
  if912_end2353:
  if905_end2339:
.annotate 'line', 853
    $P5021 = _lex_param_1."!make"($P102)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_221_1367388594.4399") :anon :lex :outer("cuid_166_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 789
    .lex "$name", $P101 
    .local pmc fb_tmp_164 
    .local pmc fb_tmp_165 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
    find_lex $P5002, "$/"
    unless_null $P5002, fallback2346
    nqp_get_sc_object $P5003, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5002, $P5003
  fallback2346:
    set fb_tmp_164, $P5002
    repr_defined $I5001, fb_tmp_164
    unless $I5001 goto if908_else2344 
    set $P5004, fb_tmp_164["name"]
    set $P5006, $P5004
    goto if908_end2345
  if908_else2344:
    null $P5005
    set $P5006, $P5005
  if908_end2345:
    unless_null $P5006, vivi_9092347
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5006, $P5007
  vivi_9092347:
    set $S5001, $P5006
    box $P5008, $S5001
    set $P101, $P5008
.annotate 'line', 791
    nqp_get_sc_object $P5009, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    find_lex $P5010, "$/"
    unless_null $P5010, fallback2350
    nqp_get_sc_object $P5011, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5010, $P5011
  fallback2350:
    set fb_tmp_165, $P5010
    repr_defined $I5003, fb_tmp_165
    unless $I5003 goto if910_else2348 
    set $P5012, fb_tmp_165["sign"]
    set $P5014, $P5012
    goto if910_end2349
  if910_else2348:
    null $P5013
    set $P5014, $P5013
  if910_end2349:
    unless_null $P5014, vivi_9112351
    nqp_get_sc_object $P5015, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5014, $P5015
  vivi_9112351:
    set $S5002, $P5014
    iseq $I5002, $S5002, "-"
    find_lex $P5016, "$/"
.annotate 'line', 793
    nqp_get_sc_object $P5017, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 12
    nqp_get_sc_object $P5018, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 52
    $P5019 = $P5018."new"($P101 :named("value"))
    $P5020 = $P5017."new"($P5019)
    $P5021 = $P5009."new"($P5020, "subrule" :named("rxtype"), "method" :named("subtype"), $I5002 :named("negate"), $P5016 :named("node"))
    store_lex "$qast", $P5021
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_222_1367388594.4399") :anon :lex :outer("cuid_166_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 795
    .lex "$uniprop", $P101 
    .local pmc fb_tmp_167 
    .local pmc fb_tmp_168 
    .local pmc fb_tmp_169 
    .local pmc fb_tmp_170 
    .local pmc fb_tmp_171 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
    find_lex $P5002, "$/"
    unless_null $P5002, fallback2360
    nqp_get_sc_object $P5003, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5002, $P5003
  fallback2360:
    set fb_tmp_167, $P5002
    repr_defined $I5001, fb_tmp_167
    unless $I5001 goto if915_else2358 
    set $P5004, fb_tmp_167["uniprop"]
    set $P5006, $P5004
    goto if915_end2359
  if915_else2358:
    null $P5005
    set $P5006, $P5005
  if915_end2359:
    unless_null $P5006, vivi_9162361
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5006, $P5007
  vivi_9162361:
    set $S5001, $P5006
    box $P5008, $S5001
    set $P101, $P5008
.annotate 'line', 797
    nqp_get_sc_object $P5009, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    find_lex $P5010, "$/"
    unless_null $P5010, fallback2368
    nqp_get_sc_object $P5011, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5010, $P5011
  fallback2368:
    set fb_tmp_168, $P5010
    repr_defined $I5003, fb_tmp_168
    unless $I5003 goto if919_else2366 
    set $P5012, fb_tmp_168["sign"]
    set $P5014, $P5012
    goto if919_end2367
  if919_else2366:
    null $P5013
    set $P5014, $P5013
  if919_end2367:
    unless_null $P5014, vivi_9202369
    nqp_get_sc_object $P5015, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5014, $P5015
  vivi_9202369:
    set $S5002, $P5014
    iseq $I5002, $S5002, "-"
    set $I5006, $I5002
    unless $I5002 goto if918_end2365 
    find_lex $P5016, "$/"
    unless_null $P5016, fallback2372
    nqp_get_sc_object $P5017, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5016, $P5017
  fallback2372:
    set fb_tmp_169, $P5016
    repr_defined $I5005, fb_tmp_169
    unless $I5005 goto if921_else2370 
    set $P5018, fb_tmp_169["invert"]
    set $P5020, $P5018
    goto if921_end2371
  if921_else2370:
    null $P5019
    set $P5020, $P5019
  if921_end2371:
    unless_null $P5020, vivi_9222373
    nqp_get_sc_object $P5021, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5020, $P5021
  vivi_9222373:
    set $S5003, $P5020
    isne $I5004, $S5003, "!"
    set $I5006, $I5004
  if918_end2365:
    set $I5012, $I5006
    if $I5006 goto unless917_end2363 
    find_lex $P5022, "$/"
    unless_null $P5022, fallback2378
    nqp_get_sc_object $P5023, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5022, $P5023
  fallback2378:
    set fb_tmp_170, $P5022
    repr_defined $I5008, fb_tmp_170
    unless $I5008 goto if924_else2376 
    set $P5024, fb_tmp_170["sign"]
    set $P5026, $P5024
    goto if924_end2377
  if924_else2376:
    null $P5025
    set $P5026, $P5025
  if924_end2377:
    unless_null $P5026, vivi_9252379
    nqp_get_sc_object $P5027, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5026, $P5027
  vivi_9252379:
    set $S5004, $P5026
    isne $I5007, $S5004, "-"
    set $I5011, $I5007
    unless $I5007 goto if923_end2375 
    find_lex $P5028, "$/"
    unless_null $P5028, fallback2382
    nqp_get_sc_object $P5029, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5028, $P5029
  fallback2382:
    set fb_tmp_171, $P5028
    repr_defined $I5010, fb_tmp_171
    unless $I5010 goto if926_else2380 
    set $P5030, fb_tmp_171["invert"]
    set $P5032, $P5030
    goto if926_end2381
  if926_else2380:
    null $P5031
    set $P5032, $P5031
  if926_end2381:
    unless_null $P5032, vivi_9272383
    nqp_get_sc_object $P5033, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5032, $P5033
  vivi_9272383:
    set $S5005, $P5032
    iseq $I5009, $S5005, "!"
    set $I5011, $I5009
  if923_end2375:
    set $I5012, $I5011
  unless917_end2363:
    find_lex $P5034, "$/"
    $P5035 = $P5009."new"($P101, "uniprop" :named("rxtype"), $I5012 :named("negate"), $P5034 :named("node"))
    store_lex "$qast", $P5035
    .return ($P5035) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_227_1367388594.4399") :anon :lex :outer("cuid_166_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 801
    .const 'Sub' $P5046 = 'cuid_224_1367388594.4399' 
    capture_lex $P5046 
    .lex "@alts", $P101 
    .local pmc fb_tmp_172 
    .local pmc fb_tmp_201 
    .local pmc fb_tmp_202 
    .local pmc fb_tmp_203 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_lex $P5005, "$/"
    unless_null $P5005, fallback2386
    nqp_get_sc_object $P5006, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5005, $P5006
  fallback2386:
    set fb_tmp_172, $P5005
    repr_defined $I5001, fb_tmp_172
    unless $I5001 goto if928_else2384 
    set $P5007, fb_tmp_172["charspec"]
    set $P5009, $P5007
    goto if928_end2385
  if928_else2384:
    null $P5008
    set $P5009, $P5008
  if928_end2385:
    unless_null $P5009, vivi_9292387
    nqp_get_sc_object $P5010, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5009, $P5010
  vivi_9292387:
    set $P5002, $P5009
    iter $P5004, $P5009
  for_next2510:
    unless $P5004, for_done2512
    shift $P5012, $P5004
  for_redo2511:
    .const 'Sub' $P5011 = 'cuid_224_1367388594.4399' 
    capture_lex $P5011
    $P5002 = $P5011($P5012)
    goto for_next2510
  for_done2512:
    find_lex $P5013, "$str"
    set $S5001, $P5013
    length $I5002, $S5001
    unless $I5002 goto if1003_end2514 
.annotate 'line', 844
    nqp_get_sc_object $P5014, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    find_lex $P5015, "$str"
    find_lex $P5016, "$/"
    find_lex $P5017, "$/"
    unless_null $P5017, fallback2517
    nqp_get_sc_object $P5018, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5017, $P5018
  fallback2517:
    set fb_tmp_201, $P5017
    repr_defined $I5004, fb_tmp_201
    unless $I5004 goto if1004_else2515 
    set $P5019, fb_tmp_201["sign"]
    set $P5021, $P5019
    goto if1004_end2516
  if1004_else2515:
    null $P5020
    set $P5021, $P5020
  if1004_end2516:
    unless_null $P5021, vivi_10052518
    nqp_get_sc_object $P5022, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5021, $P5022
  vivi_10052518:
    set $S5002, $P5021
    iseq $I5003, $S5002, "-"
    $P5023 = $P5014."new"($P5015, "enumcharlist" :named("rxtype"), $P5016 :named("node"), $I5003 :named("negate"))
    $P5024 = $P101."push"($P5023)
  if1003_end2514:
    set $N5001, $P101
    set $N5002, 1
    iseq $I5005, $N5001, $N5002
    unless $I5005 goto if1006_else2519 
    set fb_tmp_202, $P101
    repr_defined $I5006, fb_tmp_202
    unless $I5006 goto if1007_else2521 
    set $P5025, fb_tmp_202[0]
    set $P5027, $P5025
    goto if1007_end2522
  if1007_else2521:
    null $P5026
    set $P5027, $P5026
  if1007_end2522:
    unless_null $P5027, vivi_10082523
    nqp_get_sc_object $P5028, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5027, $P5028
  vivi_10082523:
    set $P5045, $P5027
    goto if1006_end2520
  if1006_else2519:
    find_lex $P5029, "$/"
    unless_null $P5029, fallback2528
    nqp_get_sc_object $P5030, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5029, $P5030
  fallback2528:
    set fb_tmp_203, $P5029
    repr_defined $I5008, fb_tmp_203
    unless $I5008 goto if1010_else2526 
    set $P5031, fb_tmp_203["sign"]
    set $P5033, $P5031
    goto if1010_end2527
  if1010_else2526:
    null $P5032
    set $P5033, $P5032
  if1010_end2527:
    unless_null $P5033, vivi_10112529
    nqp_get_sc_object $P5034, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5033, $P5034
  vivi_10112529:
    set $S5003, $P5033
    iseq $I5007, $S5003, "-"
    unless $I5007 goto if1009_else2524 
.annotate 'line', 848
    nqp_get_sc_object $P5035, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    find_lex $P5036, "$/"
.annotate 'line', 849
    nqp_get_sc_object $P5037, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5038 = $P5037."new"($P101 :flat, "conj" :named("rxtype"), "zerowidth" :named("subtype"))
.annotate 'line', 850
    nqp_get_sc_object $P5039, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5040 = $P5039."new"("cclass" :named("rxtype"), "." :named("name"))
    $P5041 = $P5035."new"($P5038, $P5040, "concat" :named("rxtype"), $P5036 :named("node"), 1 :named("negate"))
    set $P5044, $P5041
    goto if1009_end2525
  if1009_else2524:
.annotate 'line', 851
    nqp_get_sc_object $P5042, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5043 = $P5042."new"($P101 :flat, "altseq" :named("rxtype"))
    set $P5044, $P5043
  if1009_end2525:
    set $P5045, $P5044
  if1006_end2520:
    store_lex "$qast", $P5045
    .return ($P5045) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_224_1367388594.4399") :anon :lex :outer("cuid_227_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 803
    .param pmc _lex_param_0 
    .const 'Sub' $P5021 = 'cuid_223_1367388594.4399' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_225_1367388594.4399' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_226_1367388594.4399' 
    capture_lex $P5021 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_173 
    .local pmc fb_tmp_193 
    .local pmc fb_tmp_194 
    set fb_tmp_173, _lex_param_0
    repr_defined $I5001, fb_tmp_173
    unless $I5001 goto if931_else2390 
    set $P5001, fb_tmp_173[1]
    set $P5003, $P5001
    goto if931_end2391
  if931_else2390:
    null $P5002
    set $P5003, $P5002
  if931_end2391:
    unless_null $P5003, vivi_9322392
    nqp_get_sc_object $P5004, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5003, $P5004
  vivi_9322392:
    unless $P5003 goto if930_else2388 
    .const 'Sub' $P5005 = 'cuid_223_1367388594.4399' 
    capture_lex $P5005
    $P5006 = $P5005()
    set $P5020, $P5006
    goto if930_end2389
  if930_else2388:
    set fb_tmp_194, _lex_param_0
    repr_defined $I5003, fb_tmp_194
    unless $I5003 goto if985_else2481 
    set $P5007, fb_tmp_194[0]
    set $P5009, $P5007
    goto if985_end2482
  if985_else2481:
    null $P5008
    set $P5009, $P5008
  if985_end2482:
    unless_null $P5009, vivi_9862483
    nqp_get_sc_object $P5010, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5009, $P5010
  vivi_9862483:
    set fb_tmp_193, $P5009
    repr_defined $I5002, fb_tmp_193
    unless $I5002 goto if984_else2479 
    set $P5011, fb_tmp_193["backslash"]
    set $P5013, $P5011
    goto if984_end2480
  if984_else2479:
    null $P5012
    set $P5013, $P5012
  if984_end2480:
    unless_null $P5013, vivi_9872484
    nqp_get_sc_object $P5014, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5013, $P5014
  vivi_9872484:
    unless $P5013 goto if983_else2477 
    .const 'Sub' $P5015 = 'cuid_225_1367388594.4399' 
    capture_lex $P5015
    $P5016 = $P5015()
    set $P5019, $P5016
    goto if983_end2478
  if983_else2477:
    .const 'Sub' $P5017 = 'cuid_226_1367388594.4399' 
    capture_lex $P5017
    $P5018 = $P5017()
    set $P5019, $P5018
  if983_end2478:
    set $P5020, $P5019
  if930_end2389:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_223_1367388594.4399") :anon :lex :outer("cuid_224_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 804
    .lex "$node", $P101 
    .lex "$lhs", $P102 
    .lex "$rhs", $P103 
    .lex "$ord0", $P104 
    .lex "$ord1", $P105 
    .local pmc fb_tmp_174 
    .local pmc fb_tmp_175 
    .local pmc fb_tmp_176 
    .local pmc fb_tmp_177 
    .local pmc fb_tmp_178 
    .local pmc fb_tmp_179 
    .local pmc fb_tmp_180 
    .local pmc fb_tmp_181 
    .local pmc fb_tmp_182 
    .local pmc fb_tmp_183 
    .local pmc fb_tmp_184 
    .local pmc fb_tmp_185 
    .local pmc fb_tmp_186 
    .local pmc fb_tmp_187 
    .local pmc fb_tmp_188 
    .local pmc fb_tmp_189 
    .local pmc fb_tmp_190 
    .local pmc fb_tmp_191 
    .local pmc fb_tmp_192 
    .local pmc tmp_3 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P103, $P5003
    nqp_get_sc_object $P5004, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P104, $P5004
    nqp_get_sc_object $P5005, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P105, $P5005
    find_lex $P5006, "$_"
    set fb_tmp_175, $P5006
    repr_defined $I5002, fb_tmp_175
    unless $I5002 goto if935_else2397 
    set $P5007, fb_tmp_175[0]
    set $P5009, $P5007
    goto if935_end2398
  if935_else2397:
    null $P5008
    set $P5009, $P5008
  if935_end2398:
    unless_null $P5009, vivi_9362399
    nqp_get_sc_object $P5010, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5009, $P5010
  vivi_9362399:
    set fb_tmp_174, $P5009
    repr_defined $I5001, fb_tmp_174
    unless $I5001 goto if934_else2395 
    set $P5011, fb_tmp_174["backslash"]
    set $P5013, $P5011
    goto if934_end2396
  if934_else2395:
    null $P5012
    set $P5013, $P5012
  if934_end2396:
    unless_null $P5013, vivi_9372400
    nqp_get_sc_object $P5014, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5013, $P5014
  vivi_9372400:
    unless $P5013 goto if933_else2393 
.annotate 'line', 808
.annotate 'line', 809
    find_lex $P5015, "$_"
    set fb_tmp_177, $P5015
    repr_defined $I5004, fb_tmp_177
    unless $I5004 goto if939_else2403 
    set $P5016, fb_tmp_177[0]
    set $P5018, $P5016
    goto if939_end2404
  if939_else2403:
    null $P5017
    set $P5018, $P5017
  if939_end2404:
    unless_null $P5018, vivi_9402405
    nqp_get_sc_object $P5019, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5018, $P5019
  vivi_9402405:
    set fb_tmp_176, $P5018
    repr_defined $I5003, fb_tmp_176
    unless $I5003 goto if938_else2401 
    set $P5020, fb_tmp_176["backslash"]
    set $P5022, $P5020
    goto if938_end2402
  if938_else2401:
    null $P5021
    set $P5022, $P5021
  if938_end2402:
    unless_null $P5022, vivi_9412406
    nqp_get_sc_object $P5023, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5022, $P5023
  vivi_9412406:
    $P5024 = $P5022."ast"()
    set $P101, $P5024
.annotate 'line', 811
    $P5025 = $P101."rxtype"()
    set $S5001, $P5025
    isne $I5005, $S5001, "literal"
    set $I5007, $I5005
    unless $I5005 goto if945_end2414 
    $P5026 = $P101."rxtype"()
    set $S5002, $P5026
    isne $I5006, $S5002, "enumcharlist"
    set $I5007, $I5006
  if945_end2414:
    box $P5029, $I5007
    set $P5028, $P5029
    if $I5007 goto unless944_end2412 
.annotate 'line', 812
    $P5027 = $P101."negate"()
    set $P5028, $P5027
  unless944_end2412:
    set $P5034, $P5028
    if $P5028 goto unless943_end2410 
    set fb_tmp_178, $P101
    repr_defined $I5010, fb_tmp_178
    unless $I5010 goto if946_else2415 
    set $P5030, fb_tmp_178[0]
    set $P5032, $P5030
    goto if946_end2416
  if946_else2415:
    null $P5031
    set $P5032, $P5031
  if946_end2416:
    unless_null $P5032, vivi_9472417
    nqp_get_sc_object $P5033, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5032, $P5033
  vivi_9472417:
    set $S5003, $P5032
    length $I5009, $S5003
    set $N5001, $I5009
    set $N5002, 1
    isne $I5008, $N5001, $N5002
    box $P5035, $I5008
    set $P5034, $P5035
  unless943_end2410:
    unless $P5034 goto if942_end2408 
.annotate 'line', 810
    find_lex $P5036, "$/"
    $P5037 = $P5036."CURSOR"()
    find_lex $P5038, "$_"
    set $S5005, $P5038
    concat $S5004, "Illegal range endpoint in regex: ", $S5005
    $P5039 = $P5037."panic"($S5004)
  if942_end2408:
    set fb_tmp_179, $P101
    repr_defined $I5011, fb_tmp_179
    unless $I5011 goto if948_else2418 
    set $P5040, fb_tmp_179[0]
    set $P5042, $P5040
    goto if948_end2419
  if948_else2418:
    null $P5041
    set $P5042, $P5041
  if948_end2419:
    unless_null $P5042, vivi_9492420
    nqp_get_sc_object $P5043, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5042, $P5043
  vivi_9492420:
    set $P102, $P5042
    goto if933_end2394
  if933_else2393:
.annotate 'line', 815
    find_lex $P5044, "$_"
    set fb_tmp_181, $P5044
    repr_defined $I5013, fb_tmp_181
    unless $I5013 goto if951_else2423 
    set $P5045, fb_tmp_181[0]
    set $P5047, $P5045
    goto if951_end2424
  if951_else2423:
    null $P5046
    set $P5047, $P5046
  if951_end2424:
    unless_null $P5047, vivi_9522425
    nqp_get_sc_object $P5048, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5047, $P5048
  vivi_9522425:
    set fb_tmp_180, $P5047
    repr_defined $I5012, fb_tmp_180
    unless $I5012 goto if950_else2421 
    set $P5049, fb_tmp_180[0]
    set $P5051, $P5049
    goto if950_end2422
  if950_else2421:
    null $P5050
    set $P5051, $P5050
  if950_end2422:
    unless_null $P5051, vivi_9532426
    nqp_get_sc_object $P5052, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5051, $P5052
  vivi_9532426:
    set $S5006, $P5051
    box $P5053, $S5006
    set $P102, $P5053
  if933_end2394:
    find_lex $P5054, "$_"
    set fb_tmp_184, $P5054
    repr_defined $I5016, fb_tmp_184
    unless $I5016 goto if957_else2433 
    set $P5055, fb_tmp_184[1]
    set $P5057, $P5055
    goto if957_end2434
  if957_else2433:
    null $P5056
    set $P5057, $P5056
  if957_end2434:
    unless_null $P5057, vivi_9582435
    nqp_get_sc_object $P5058, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5057, $P5058
  vivi_9582435:
    set fb_tmp_183, $P5057
    repr_defined $I5015, fb_tmp_183
    unless $I5015 goto if956_else2431 
    set $P5059, fb_tmp_183[0]
    set $P5061, $P5059
    goto if956_end2432
  if956_else2431:
    null $P5060
    set $P5061, $P5060
  if956_end2432:
    unless_null $P5061, vivi_9592436
    nqp_get_sc_object $P5062, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5061, $P5062
  vivi_9592436:
    set fb_tmp_182, $P5061
    repr_defined $I5014, fb_tmp_182
    unless $I5014 goto if955_else2429 
    set $P5063, fb_tmp_182["backslash"]
    set $P5065, $P5063
    goto if955_end2430
  if955_else2429:
    null $P5064
    set $P5065, $P5064
  if955_end2430:
    unless_null $P5065, vivi_9602437
    nqp_get_sc_object $P5066, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5065, $P5066
  vivi_9602437:
    unless $P5065 goto if954_else2427 
.annotate 'line', 818
.annotate 'line', 819
    find_lex $P5067, "$_"
    set fb_tmp_187, $P5067
    repr_defined $I5019, fb_tmp_187
    unless $I5019 goto if963_else2442 
    set $P5068, fb_tmp_187[1]
    set $P5070, $P5068
    goto if963_end2443
  if963_else2442:
    null $P5069
    set $P5070, $P5069
  if963_end2443:
    unless_null $P5070, vivi_9642444
    nqp_get_sc_object $P5071, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5070, $P5071
  vivi_9642444:
    set fb_tmp_186, $P5070
    repr_defined $I5018, fb_tmp_186
    unless $I5018 goto if962_else2440 
    set $P5072, fb_tmp_186[0]
    set $P5074, $P5072
    goto if962_end2441
  if962_else2440:
    null $P5073
    set $P5074, $P5073
  if962_end2441:
    unless_null $P5074, vivi_9652445
    nqp_get_sc_object $P5075, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5074, $P5075
  vivi_9652445:
    set fb_tmp_185, $P5074
    repr_defined $I5017, fb_tmp_185
    unless $I5017 goto if961_else2438 
    set $P5076, fb_tmp_185["backslash"]
    set $P5078, $P5076
    goto if961_end2439
  if961_else2438:
    null $P5077
    set $P5078, $P5077
  if961_end2439:
    unless_null $P5078, vivi_9662446
    nqp_get_sc_object $P5079, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5078, $P5079
  vivi_9662446:
    $P5080 = $P5078."ast"()
    set $P101, $P5080
.annotate 'line', 821
    $P5081 = $P101."rxtype"()
    set $S5007, $P5081
    isne $I5020, $S5007, "literal"
    set $I5022, $I5020
    unless $I5020 goto if970_end2454 
    $P5082 = $P101."rxtype"()
    set $S5008, $P5082
    isne $I5021, $S5008, "enumcharlist"
    set $I5022, $I5021
  if970_end2454:
    box $P5085, $I5022
    set $P5084, $P5085
    if $I5022 goto unless969_end2452 
.annotate 'line', 822
    $P5083 = $P101."negate"()
    set $P5084, $P5083
  unless969_end2452:
    set $P5090, $P5084
    if $P5084 goto unless968_end2450 
    set fb_tmp_188, $P101
    repr_defined $I5025, fb_tmp_188
    unless $I5025 goto if971_else2455 
    set $P5086, fb_tmp_188[0]
    set $P5088, $P5086
    goto if971_end2456
  if971_else2455:
    null $P5087
    set $P5088, $P5087
  if971_end2456:
    unless_null $P5088, vivi_9722457
    nqp_get_sc_object $P5089, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5088, $P5089
  vivi_9722457:
    set $S5009, $P5088
    length $I5024, $S5009
    set $N5003, $I5024
    set $N5004, 1
    isne $I5023, $N5003, $N5004
    box $P5091, $I5023
    set $P5090, $P5091
  unless968_end2450:
    unless $P5090 goto if967_end2448 
.annotate 'line', 820
    find_lex $P5092, "$/"
    $P5093 = $P5092."CURSOR"()
    find_lex $P5094, "$_"
    set $S5011, $P5094
    concat $S5010, "Illegal range endpoint in regex: ", $S5011
    $P5095 = $P5093."panic"($S5010)
  if967_end2448:
    set fb_tmp_189, $P101
    repr_defined $I5026, fb_tmp_189
    unless $I5026 goto if973_else2458 
    set $P5096, fb_tmp_189[0]
    set $P5098, $P5096
    goto if973_end2459
  if973_else2458:
    null $P5097
    set $P5098, $P5097
  if973_end2459:
    unless_null $P5098, vivi_9742460
    nqp_get_sc_object $P5099, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5098, $P5099
  vivi_9742460:
    set $P103, $P5098
    goto if954_end2428
  if954_else2427:
.annotate 'line', 825
    find_lex $P5100, "$_"
    set fb_tmp_192, $P5100
    repr_defined $I5029, fb_tmp_192
    unless $I5029 goto if977_else2465 
    set $P5101, fb_tmp_192[1]
    set $P5103, $P5101
    goto if977_end2466
  if977_else2465:
    null $P5102
    set $P5103, $P5102
  if977_end2466:
    unless_null $P5103, vivi_9782467
    nqp_get_sc_object $P5104, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5103, $P5104
  vivi_9782467:
    set fb_tmp_191, $P5103
    repr_defined $I5028, fb_tmp_191
    unless $I5028 goto if976_else2463 
    set $P5105, fb_tmp_191[0]
    set $P5107, $P5105
    goto if976_end2464
  if976_else2463:
    null $P5106
    set $P5107, $P5106
  if976_end2464:
    unless_null $P5107, vivi_9792468
    nqp_get_sc_object $P5108, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5107, $P5108
  vivi_9792468:
    set fb_tmp_190, $P5107
    repr_defined $I5027, fb_tmp_190
    unless $I5027 goto if975_else2461 
    set $P5109, fb_tmp_190[0]
    set $P5111, $P5109
    goto if975_end2462
  if975_else2461:
    null $P5110
    set $P5111, $P5110
  if975_end2462:
    unless_null $P5111, vivi_9802469
    nqp_get_sc_object $P5112, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5111, $P5112
  vivi_9802469:
    set $S5012, $P5111
    box $P5113, $S5012
    set $P103, $P5113
  if954_end2428:
    set $S5013, $P102
    ord $I5030, $S5013
    box $P5114, $I5030
    set $P104, $P5114
    set $S5014, $P103
    ord $I5031, $S5014
    box $P5115, $I5031
    set $P105, $P5115
    set $N5005, $P104
    set $N5006, $P105
    isgt $I5032, $N5005, $N5006
    unless $I5032 goto if981_end2471 
.annotate 'line', 830
    find_lex $P5116, "$/"
    $P5117 = $P5116."CURSOR"()
    find_lex $P5118, "$_"
    set $S5016, $P5118
    concat $S5015, "Illegal reversed character range in regex: ", $S5016
    $P5119 = $P5117."panic"($S5015)
  if981_end2471:
    new $P5123, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5123, while982_handlers2475
    push_eh $P5123
  while982_test2472:
    set $N5007, $P104
    set $N5008, $P105
    isle $I5033, $N5007, $N5008
    box $P5124, $I5033
    set $P5122, $P5124
    unless $I5033 goto while982_done2476 
  while982_redo2474:
    find_lex $P5120, "$str"
    set $S5018, $P5120
    set tmp_3, $P104
    set $N5010, tmp_3
    set $N5011, 1
    add $N5009, $N5010, $N5011
    box $P5121, $N5009
    set $P104, $P5121
    set $I5034, tmp_3
    chr $S5019, $I5034
    concat $S5017, $S5018, $S5019
    box $P5121, $S5017
    store_lex "$str", $P5121
    set $P5122, $P5121
    goto while982_test2472 
  while982_handlers2475:
    .get_results ($P5123)
    pop_upto_eh $P5123
    getattribute $P5123, $P5123, 'type'
    eq $P5123, .CONTROL_LOOP_NEXT, while982_test2472
    eq $P5123, .CONTROL_LOOP_REDO, while982_redo2474
  while982_done2476:
    pop_eh 
    .return ($P5122) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_225_1367388594.4399") :anon :lex :outer("cuid_224_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 834
    .lex "$bs", $P101 
    .local pmc fb_tmp_195 
    .local pmc fb_tmp_196 
    .local pmc fb_tmp_197 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
.annotate 'line', 835
    find_lex $P5002, "$_"
    set fb_tmp_196, $P5002
    repr_defined $I5002, fb_tmp_196
    unless $I5002 goto if989_else2487 
    set $P5003, fb_tmp_196[0]
    set $P5005, $P5003
    goto if989_end2488
  if989_else2487:
    null $P5004
    set $P5005, $P5004
  if989_end2488:
    unless_null $P5005, vivi_9902489
    nqp_get_sc_object $P5006, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5005, $P5006
  vivi_9902489:
    set fb_tmp_195, $P5005
    repr_defined $I5001, fb_tmp_195
    unless $I5001 goto if988_else2485 
    set $P5007, fb_tmp_195["backslash"]
    set $P5009, $P5007
    goto if988_end2486
  if988_else2485:
    null $P5008
    set $P5009, $P5008
  if988_end2486:
    unless_null $P5009, vivi_9912490
    nqp_get_sc_object $P5010, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5009, $P5010
  vivi_9912490:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
    find_lex $P5012, "$/"
    unless_null $P5012, fallback2495
    nqp_get_sc_object $P5013, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5012, $P5013
  fallback2495:
    set fb_tmp_197, $P5012
    repr_defined $I5004, fb_tmp_197
    unless $I5004 goto if993_else2493 
    set $P5014, fb_tmp_197["sign"]
    set $P5016, $P5014
    goto if993_end2494
  if993_else2493:
    null $P5015
    set $P5016, $P5015
  if993_end2494:
    unless_null $P5016, vivi_9942496
    nqp_get_sc_object $P5017, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5016, $P5017
  vivi_9942496:
    set $S5001, $P5016
    iseq $I5003, $S5001, "-"
    unless $I5003 goto if992_end2492 
.annotate 'line', 836
    $P5018 = $P101."negate"()
    isfalse $I5005, $P5018
    $P5019 = $P101."negate"($I5005)
  if992_end2492:
.annotate 'line', 837
    find_lex $P5020, "@alts"
    $P5021 = $P5020."push"($P101)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_226_1367388594.4399") :anon :lex :outer("cuid_224_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 839
    .lex "$c", $P101 
    .local pmc fb_tmp_198 
    .local pmc fb_tmp_199 
    .local pmc fb_tmp_200 
    .local pmc pkg_viv_tmp_14 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
    find_lex $P5002, "$_"
    set fb_tmp_198, $P5002
    repr_defined $I5001, fb_tmp_198
    unless $I5001 goto if995_else2497 
    set $P5003, fb_tmp_198[0]
    set $P5005, $P5003
    goto if995_end2498
  if995_else2497:
    null $P5004
    set $P5005, $P5004
  if995_end2498:
    unless_null $P5005, vivi_9962499
    nqp_get_sc_object $P5006, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5005, $P5006
  vivi_9962499:
    set $S5001, $P5005
    box $P5007, $S5001
    set $P101, $P5007
    find_lex $P5008, "$str"
    set $S5003, $P5008
    find_dynamic_lex $P5009, "%*RX"
    unless_null $P5009, fallback2504
    nqp_get_sc_object $P5011, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 0
    get_who $P5010, $P5011
    set pkg_viv_tmp_14, $P5010
    set fb_tmp_200, pkg_viv_tmp_14
    repr_defined $I5003, fb_tmp_200
    unless $I5003 goto if999_else2505 
    set $P5012, fb_tmp_200["%RX"]
    set $P5014, $P5012
    goto if999_end2506
  if999_else2505:
    null $P5013
    set $P5014, $P5013
  if999_end2506:
    unless_null $P5014, vivi_10002507
    new $P5015, 'Hash'
    set pkg_viv_tmp_14["%RX"], $P5015
    set $P5014, $P5015
  vivi_10002507:
    unless_null $P5014, vivi_10012508
    die "Contextual %*RX not found"
    box $P5016, "Contextual %*RX not found"
    set $P5014, $P5016
  vivi_10012508:
    set $P5009, $P5014
  fallback2504:
    set fb_tmp_199, $P5009
    repr_defined $I5002, fb_tmp_199
    unless $I5002 goto if998_else2502 
    set $P5017, fb_tmp_199["i"]
    set $P5019, $P5017
    goto if998_end2503
  if998_else2502:
    null $P5018
    set $P5019, $P5018
  if998_end2503:
    unless_null $P5019, vivi_10022509
    nqp_get_sc_object $P5020, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5019, $P5020
  vivi_10022509:
    unless $P5019 goto if997_else2500 
    set $S5006, $P101
    downcase $S5005, $S5006
    set $S5008, $P101
    upcase $S5007, $S5008
    concat $S5004, $S5005, $S5007
    box $P5022, $S5004
    set $P5021, $P5022
    goto if997_end2501
  if997_else2500:
    set $P5021, $P101
  if997_end2501:
    set $S5009, $P5021
    concat $S5002, $S5003, $S5009
    box $P5023, $S5002
    store_lex "$str", $P5023
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "mod_internal" :subid("cuid_167_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 856
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5026 = 'cuid_228_1367388594.4399' 
    capture_lex $P5026 
    .const 'Sub' $P5026 = 'cuid_229_1367388594.4399' 
    capture_lex $P5026 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_204 
    .local pmc fb_tmp_205 
    .local pmc fb_tmp_206 
    unless_null _lex_param_1, fallback2534
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5001
  fallback2534:
    set fb_tmp_204, _lex_param_1
    repr_defined $I5001, fb_tmp_204
    unless $I5001 goto if1013_else2532 
    set $P5002, fb_tmp_204["quote_EXPR"]
    set $P5004, $P5002
    goto if1013_end2533
  if1013_else2532:
    null $P5003
    set $P5004, $P5003
  if1013_end2533:
    unless_null $P5004, vivi_10142535
    nqp_get_sc_object $P5005, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5004, $P5005
  vivi_10142535:
    unless $P5004 goto if1012_else2530 
.annotate 'line', 857
.annotate 'line', 858
    nqp_get_sc_object $P5006, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 52
    unless_null _lex_param_1, fallback2542
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_1, $P5007
  fallback2542:
    set fb_tmp_206, _lex_param_1
    repr_defined $I5003, fb_tmp_206
    unless $I5003 goto if1017_else2540 
    set $P5008, fb_tmp_206["quote_EXPR"]
    set $P5010, $P5008
    goto if1017_end2541
  if1017_else2540:
    null $P5009
    set $P5010, $P5009
  if1017_end2541:
    unless_null $P5010, vivi_10182543
    nqp_get_sc_object $P5011, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5010, $P5011
  vivi_10182543:
    set fb_tmp_205, $P5010
    repr_defined $I5002, fb_tmp_205
    unless $I5002 goto if1016_else2538 
    set $P5012, fb_tmp_205[0]
    set $P5014, $P5012
    goto if1016_end2539
  if1016_else2538:
    null $P5013
    set $P5014, $P5013
  if1016_end2539:
    unless_null $P5014, vivi_10192544
    nqp_get_sc_object $P5015, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5014, $P5015
  vivi_10192544:
    $P5016 = $P5014."ast"()
    $P5017 = $P5006."ACCEPTS"($P5016)
    unless $P5017 goto if1015_else2536 
    .const 'Sub' $P5018 = 'cuid_228_1367388594.4399' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5022, $P5019
    goto if1015_end2537
  if1015_else2536:
.annotate 'line', 866
.annotate 'line', 867
    $P5020 = _lex_param_1."CURSOR"()
    $P5021 = $P5020."panic"("Internal modifier strings must be literals")
    set $P5022, $P5021
  if1015_end2537:
    set $P5025, $P5022
    goto if1012_end2531
  if1012_else2530:
    .const 'Sub' $P5023 = 'cuid_229_1367388594.4399' 
    capture_lex $P5023
    $P5024 = $P5023()
    set $P5025, $P5024
  if1012_end2531:
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_228_1367388594.4399") :anon :lex :outer("cuid_167_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 858
    .lex "$key", $P101 
    .lex "$val", $P102 
    .local pmc fb_tmp_207 
    .local pmc fb_tmp_208 
    .local pmc fb_tmp_209 
    .local pmc fb_tmp_210 
    .local pmc fb_tmp_211 
    .local pmc pkg_viv_tmp_15 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P102, $P5002
    find_lex $P5003, "$/"
    unless_null $P5003, fallback2549
    nqp_get_sc_object $P5004, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5003, $P5004
  fallback2549:
    set fb_tmp_208, $P5003
    repr_defined $I5002, fb_tmp_208
    unless $I5002 goto if1021_else2547 
    set $P5005, fb_tmp_208["mod_ident"]
    set $P5007, $P5005
    goto if1021_end2548
  if1021_else2547:
    null $P5006
    set $P5007, $P5006
  if1021_end2548:
    unless_null $P5007, vivi_10222550
    nqp_get_sc_object $P5008, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5007, $P5008
  vivi_10222550:
    set fb_tmp_207, $P5007
    repr_defined $I5001, fb_tmp_207
    unless $I5001 goto if1020_else2545 
    set $P5009, fb_tmp_207["sym"]
    set $P5011, $P5009
    goto if1020_end2546
  if1020_else2545:
    null $P5010
    set $P5011, $P5010
  if1020_end2546:
    unless_null $P5011, vivi_10232551
    nqp_get_sc_object $P5012, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5011, $P5012
  vivi_10232551:
    set $S5001, $P5011
    box $P5013, $S5001
    set $P101, $P5013
.annotate 'line', 860
    find_lex $P5014, "$/"
    unless_null $P5014, fallback2556
    nqp_get_sc_object $P5015, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5014, $P5015
  fallback2556:
    set fb_tmp_210, $P5014
    repr_defined $I5004, fb_tmp_210
    unless $I5004 goto if1025_else2554 
    set $P5016, fb_tmp_210["quote_EXPR"]
    set $P5018, $P5016
    goto if1025_end2555
  if1025_else2554:
    null $P5017
    set $P5018, $P5017
  if1025_end2555:
    unless_null $P5018, vivi_10262557
    nqp_get_sc_object $P5019, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5018, $P5019
  vivi_10262557:
    set fb_tmp_209, $P5018
    repr_defined $I5003, fb_tmp_209
    unless $I5003 goto if1024_else2552 
    set $P5020, fb_tmp_209[0]
    set $P5022, $P5020
    goto if1024_end2553
  if1024_else2552:
    null $P5021
    set $P5022, $P5021
  if1024_end2553:
    unless_null $P5022, vivi_10272558
    nqp_get_sc_object $P5023, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5022, $P5023
  vivi_10272558:
    $P5024 = $P5022."ast"()
    $P5025 = $P5024."value"()
    set $P102, $P5025
    find_dynamic_lex $P5026, "%*RX"
    unless_null $P5026, fallback2559
    nqp_get_sc_object $P5028, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 0
    get_who $P5027, $P5028
    set pkg_viv_tmp_15, $P5027
    set fb_tmp_211, pkg_viv_tmp_15
    repr_defined $I5005, fb_tmp_211
    unless $I5005 goto if1028_else2560 
    set $P5029, fb_tmp_211["%RX"]
    set $P5031, $P5029
    goto if1028_end2561
  if1028_else2560:
    null $P5030
    set $P5031, $P5030
  if1028_end2561:
    unless_null $P5031, vivi_10292562
    new $P5032, 'Hash'
    set pkg_viv_tmp_15["%RX"], $P5032
    set $P5031, $P5032
  vivi_10292562:
    unless_null $P5031, vivi_10302563
    die "Contextual %*RX not found"
    box $P5033, "Contextual %*RX not found"
    set $P5031, $P5033
  vivi_10302563:
    set $P5026, $P5031
  fallback2559:
    set $S5002, $P101
    set $P5026[$S5002], $P102
.annotate 'line', 862
    find_dynamic_lex $P5034, "$/"
    set $S5003, $P101
    iseq $I5006, $S5003, "dba"
    unless $I5006 goto if1031_else2564 
.annotate 'line', 863
    nqp_get_sc_object $P5035, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5036 = $P5035."new"("dba" :named("rxtype"), $P102 :named("name"))
    set $P5037, $P5036
    goto if1031_end2565
  if1031_else2564:
    box $P5038, 0
    set $P5037, $P5038
  if1031_end2565:
    $P5039 = $P5034."!make"($P5037)
    .return ($P5039) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_229_1367388594.4399") :anon :lex :outer("cuid_167_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 870
    .lex "$n", $P101 
    .local pmc fb_tmp_212 
    .local pmc fb_tmp_213 
    .local pmc fb_tmp_214 
    .local pmc fb_tmp_215 
    .local pmc fb_tmp_216 
    .local pmc pkg_viv_tmp_16 
    .local pmc fb_tmp_217 
    .local pmc fb_tmp_218 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
    find_lex $P5002, "$/"
    unless_null $P5002, fallback2572
    nqp_get_sc_object $P5003, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5002, $P5003
  fallback2572:
    set fb_tmp_213, $P5002
    repr_defined $I5003, fb_tmp_213
    unless $I5003 goto if1034_else2570 
    set $P5004, fb_tmp_213["n"]
    set $P5006, $P5004
    goto if1034_end2571
  if1034_else2570:
    null $P5005
    set $P5006, $P5005
  if1034_end2571:
    unless_null $P5006, vivi_10352573
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5006, $P5007
  vivi_10352573:
    set fb_tmp_212, $P5006
    repr_defined $I5002, fb_tmp_212
    unless $I5002 goto if1033_else2568 
    set $P5008, fb_tmp_212[0]
    set $P5010, $P5008
    goto if1033_end2569
  if1033_else2568:
    null $P5009
    set $P5010, $P5009
  if1033_end2569:
    unless_null $P5010, vivi_10362574
    nqp_get_sc_object $P5011, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5010, $P5011
  vivi_10362574:
    set $S5001, $P5010
    isgt $I5001, $S5001, ""
    unless $I5001 goto if1032_else2566 
    find_lex $P5012, "$/"
    unless_null $P5012, fallback2579
    nqp_get_sc_object $P5013, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5012, $P5013
  fallback2579:
    set fb_tmp_215, $P5012
    repr_defined $I5005, fb_tmp_215
    unless $I5005 goto if1038_else2577 
    set $P5014, fb_tmp_215["n"]
    set $P5016, $P5014
    goto if1038_end2578
  if1038_else2577:
    null $P5015
    set $P5016, $P5015
  if1038_end2578:
    unless_null $P5016, vivi_10392580
    nqp_get_sc_object $P5017, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5016, $P5017
  vivi_10392580:
    set fb_tmp_214, $P5016
    repr_defined $I5004, fb_tmp_214
    unless $I5004 goto if1037_else2575 
    set $P5018, fb_tmp_214[0]
    set $P5020, $P5018
    goto if1037_end2576
  if1037_else2575:
    null $P5019
    set $P5020, $P5019
  if1037_end2576:
    unless_null $P5020, vivi_10402581
    nqp_get_sc_object $P5021, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5020, $P5021
  vivi_10402581:
    set $N5001, $P5020
    box $P5023, $N5001
    set $P5022, $P5023
    goto if1032_end2567
  if1032_else2566:
    box $P5024, 1
    set $P5022, $P5024
  if1032_end2567:
    set $P101, $P5022
    find_dynamic_lex $P5025, "%*RX"
    unless_null $P5025, fallback2582
    nqp_get_sc_object $P5027, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 0
    get_who $P5026, $P5027
    set pkg_viv_tmp_16, $P5026
    set fb_tmp_216, pkg_viv_tmp_16
    repr_defined $I5006, fb_tmp_216
    unless $I5006 goto if1041_else2583 
    set $P5028, fb_tmp_216["%RX"]
    set $P5030, $P5028
    goto if1041_end2584
  if1041_else2583:
    null $P5029
    set $P5030, $P5029
  if1041_end2584:
    unless_null $P5030, vivi_10422585
    new $P5031, 'Hash'
    set pkg_viv_tmp_16["%RX"], $P5031
    set $P5030, $P5031
  vivi_10422585:
    unless_null $P5030, vivi_10432586
    die "Contextual %*RX not found"
    box $P5032, "Contextual %*RX not found"
    set $P5030, $P5032
  vivi_10432586:
    set $P5025, $P5030
  fallback2582:
    find_lex $P5033, "$/"
    unless_null $P5033, fallback2591
    nqp_get_sc_object $P5034, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5033, $P5034
  fallback2591:
    set fb_tmp_218, $P5033
    repr_defined $I5008, fb_tmp_218
    unless $I5008 goto if1045_else2589 
    set $P5035, fb_tmp_218["mod_ident"]
    set $P5037, $P5035
    goto if1045_end2590
  if1045_else2589:
    null $P5036
    set $P5037, $P5036
  if1045_end2590:
    unless_null $P5037, vivi_10462592
    nqp_get_sc_object $P5038, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5037, $P5038
  vivi_10462592:
    set fb_tmp_217, $P5037
    repr_defined $I5007, fb_tmp_217
    unless $I5007 goto if1044_else2587 
    set $P5039, fb_tmp_217["sym"]
    set $P5041, $P5039
    goto if1044_end2588
  if1044_else2587:
    null $P5040
    set $P5041, $P5040
  if1044_end2588:
    unless_null $P5041, vivi_10472593
    nqp_get_sc_object $P5042, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5041, $P5042
  vivi_10472593:
    set $S5002, $P5041
    set $P5025[$S5002], $P101
.annotate 'line', 873
    find_dynamic_lex $P5043, "$/"
    $P5044 = $P5043."!make"(0)
    .return ($P5044) 
.end
.HLL "nqp"
.namespace []
.sub "qbuildsub" :subid("cuid_168_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 884
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_2 :opt_flag 
    .param pmc _lex_param_3 :named("anon") :optional 
    .param int haz_param_3 :opt_flag 
    .param pmc _lex_param_4 :named("addself") :optional 
    .param int haz_param_4 :opt_flag 
    .param pmc _lex_param_5 :slurpy :named 
    .lex "$code_obj", $P101 
    .lex "self", _lex_param_0 
    .lex "$qast", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$anon", _lex_param_3 
    .lex "$addself", _lex_param_4 
    .lex "%rest", _lex_param_5 
    .local pmc fb_tmp_219 
    .local pmc fb_tmp_220 
    .local pmc fb_tmp_221 
    .local pmc pkg_viv_tmp_17 
    .local pmc fb_tmp_222 
    .local pmc fb_tmp_223 
    .local pmc pkg_viv_tmp_18 
    .local pmc fb_tmp_224 
    .local pmc fb_tmp_225 
    .local pmc pkg_viv_tmp_19 
    if haz_param_2, default2631
    nqp_get_sc_object $P5073, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 103
    $P5074 = $P5073."new"()
    set _lex_param_2, $P5074
  default2631:
    if haz_param_3, default2632
    nqp_get_sc_object $P5075, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_3, $P5075
  default2632:
    if haz_param_4, default2633
    nqp_get_sc_object $P5076, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set _lex_param_4, $P5076
  default2633:
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
    exists $I5001, _lex_param_5["code_obj"]
    unless $I5001 goto if1048_else2594 
    set fb_tmp_219, _lex_param_5
    repr_defined $I5002, fb_tmp_219
    unless $I5002 goto if1049_else2596 
    set $P5002, fb_tmp_219["code_obj"]
    set $P5004, $P5002
    goto if1049_end2597
  if1049_else2596:
    null $P5003
    set $P5004, $P5003
  if1049_end2597:
    unless_null $P5004, vivi_10502598
    nqp_get_sc_object $P5005, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5004, $P5005
  vivi_10502598:
    set $P5008, $P5004
    goto if1048_end2595
  if1048_else2594:
.annotate 'line', 887
    nqp_decontainerize $P5006, _lex_param_0
    $P5007 = $P5006."create_regex_code_object"(_lex_param_2)
    set $P5008, $P5007
  if1048_end2595:
    set $P101, $P5008
    unless _lex_param_4 goto if1051_end2600 
.annotate 'line', 889
.annotate 'line', 890
    nqp_get_sc_object $P5009, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 71
    $P5010 = $P5009."new"("self" :named("name"), "local" :named("scope"), "param" :named("decl"))
    $P5011 = _lex_param_2."push"($P5010)
  if1051_end2600:
.annotate 'line', 892
    $P5012 = _lex_param_2."symbol"(utf8:"$\x{a2}")
    if $P5012 goto unless1052_end2602 
.annotate 'line', 893
    nqp_get_sc_object $P5013, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 71
    $P5014 = $P5013."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    _lex_param_2."push"($P5014)
.annotate 'line', 894
    $P5015 = _lex_param_2."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
  unless1052_end2602:
.annotate 'line', 897
    nqp_decontainerize $P5016, _lex_param_0
    $P5017 = "&capnames"(_lex_param_1, 0)
    $P5016."store_regex_caps"($P101, _lex_param_2, $P5017)
.annotate 'line', 898
    nqp_decontainerize $P5018, _lex_param_0
    nqp_get_sc_object $P5019, "8FFA7946C43E61F88541F98801326AC6461610E9-1367388560.19962", 3
    $P5020 = $P5019."new"()
    $P5021 = $P5020."addnode"(_lex_param_1)
    $P5018."store_regex_nfa"($P101, _lex_param_2, $P5021)
.annotate 'line', 899
    nqp_decontainerize $P5022, _lex_param_0
    $P5022."alt_nfas"($P101, _lex_param_2, _lex_param_1)
    set _lex_param_2["orig_qast"], _lex_param_1
.annotate 'line', 902
    nqp_get_sc_object $P5023, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
.annotate 'line', 903
    nqp_get_sc_object $P5024, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5025 = $P5024."new"("scan" :named("rxtype"))
    unless _lex_param_3 goto if1053_else2603 
.annotate 'line', 906
    nqp_get_sc_object $P5026, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    $P5027 = $P5026."new"("pass" :named("rxtype"))
    set $P5071, $P5027
    goto if1053_end2604
  if1053_else2603:
    find_dynamic_lex $P5028, "%*RX"
    unless_null $P5028, fallback2609
    nqp_get_sc_object $P5030, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 0
    get_who $P5029, $P5030
    set pkg_viv_tmp_17, $P5029
    set fb_tmp_221, pkg_viv_tmp_17
    repr_defined $I5005, fb_tmp_221
    unless $I5005 goto if1056_else2610 
    set $P5031, fb_tmp_221["%RX"]
    set $P5033, $P5031
    goto if1056_end2611
  if1056_else2610:
    null $P5032
    set $P5033, $P5032
  if1056_end2611:
    unless_null $P5033, vivi_10572612
    new $P5034, 'Hash'
    set pkg_viv_tmp_17["%RX"], $P5034
    set $P5033, $P5034
  vivi_10572612:
    unless_null $P5033, vivi_10582613
    die "Contextual %*RX not found"
    box $P5035, "Contextual %*RX not found"
    set $P5033, $P5035
  vivi_10582613:
    set $P5028, $P5033
  fallback2609:
    set fb_tmp_220, $P5028
    repr_defined $I5004, fb_tmp_220
    unless $I5004 goto if1055_else2607 
    set $P5036, fb_tmp_220["name"]
    set $P5038, $P5036
    goto if1055_end2608
  if1055_else2607:
    null $P5037
    set $P5038, $P5037
  if1055_end2608:
    unless_null $P5038, vivi_10592614
    nqp_get_sc_object $P5039, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5038, $P5039
  vivi_10592614:
    set $S5002, $P5038
    substr $S5001, $S5002, 0, 12
    isne $I5003, $S5001, "!!LATENAME!!"
    unless $I5003 goto if1054_else2605 
.annotate 'line', 908
    nqp_get_sc_object $P5040, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    find_dynamic_lex $P5041, "%*RX"
    unless_null $P5041, fallback2617
    nqp_get_sc_object $P5043, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 0
    get_who $P5042, $P5043
    set pkg_viv_tmp_18, $P5042
    set fb_tmp_223, pkg_viv_tmp_18
    repr_defined $I5007, fb_tmp_223
    unless $I5007 goto if1061_else2618 
    set $P5044, fb_tmp_223["%RX"]
    set $P5046, $P5044
    goto if1061_end2619
  if1061_else2618:
    null $P5045
    set $P5046, $P5045
  if1061_end2619:
    unless_null $P5046, vivi_10622620
    new $P5047, 'Hash'
    set pkg_viv_tmp_18["%RX"], $P5047
    set $P5046, $P5047
  vivi_10622620:
    unless_null $P5046, vivi_10632621
    die "Contextual %*RX not found"
    box $P5048, "Contextual %*RX not found"
    set $P5046, $P5048
  vivi_10632621:
    set $P5041, $P5046
  fallback2617:
    set fb_tmp_222, $P5041
    repr_defined $I5006, fb_tmp_222
    unless $I5006 goto if1060_else2615 
    set $P5049, fb_tmp_222["name"]
    set $P5051, $P5049
    goto if1060_end2616
  if1060_else2615:
    null $P5050
    set $P5051, $P5050
  if1060_end2616:
    unless_null $P5051, vivi_10642622
    nqp_get_sc_object $P5052, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5051, $P5052
  vivi_10642622:
    $P5053 = $P5040."new"("pass" :named("rxtype"), $P5051 :named("name"))
    set $P5070, $P5053
    goto if1054_end2606
  if1054_else2605:
.annotate 'line', 909
    nqp_get_sc_object $P5054, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
.annotate 'line', 910
    nqp_get_sc_object $P5055, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 71
    find_dynamic_lex $P5056, "%*RX"
    unless_null $P5056, fallback2625
    nqp_get_sc_object $P5058, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 0
    get_who $P5057, $P5058
    set pkg_viv_tmp_19, $P5057
    set fb_tmp_225, pkg_viv_tmp_19
    repr_defined $I5009, fb_tmp_225
    unless $I5009 goto if1066_else2626 
    set $P5059, fb_tmp_225["%RX"]
    set $P5061, $P5059
    goto if1066_end2627
  if1066_else2626:
    null $P5060
    set $P5061, $P5060
  if1066_end2627:
    unless_null $P5061, vivi_10672628
    new $P5062, 'Hash'
    set pkg_viv_tmp_19["%RX"], $P5062
    set $P5061, $P5062
  vivi_10672628:
    unless_null $P5061, vivi_10682629
    die "Contextual %*RX not found"
    box $P5063, "Contextual %*RX not found"
    set $P5061, $P5063
  vivi_10682629:
    set $P5056, $P5061
  fallback2625:
    set fb_tmp_224, $P5056
    repr_defined $I5008, fb_tmp_224
    unless $I5008 goto if1065_else2623 
    set $P5064, fb_tmp_224["name"]
    set $P5066, $P5064
    goto if1065_end2624
  if1065_else2623:
    null $P5065
    set $P5066, $P5065
  if1065_end2624:
    unless_null $P5066, vivi_10692630
    nqp_get_sc_object $P5067, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5066, $P5067
  vivi_10692630:
    set $S5004, $P5066
    substr $S5003, $S5004, 12
    $P5068 = $P5055."new"($S5003 :named("name"), "lexical" :named("scope"))
    $P5069 = $P5054."new"($P5068, "pass" :named("rxtype"))
    set $P5070, $P5069
  if1054_end2606:
    set $P5071, $P5070
  if1053_end2604:
    $P5072 = $P5023."new"($P5025, _lex_param_1, $P5071, "concat" :named("rxtype"))
    set _lex_param_1, $P5072
.annotate 'line', 916
    _lex_param_2."push"(_lex_param_1)
    .return (_lex_param_2) 
.end
.HLL "nqp"
.namespace []
.sub "alt_nfas" :subid("cuid_169_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 972
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P5021 = 'cuid_231_1367388594.4399' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_232_1367388594.4399' 
    capture_lex $P5021 
    .lex "$rxtype", $P101 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$ast", _lex_param_3 
    .local pmc fb_tmp_226 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P101, $P5001
.annotate 'line', 973
    $P5002 = _lex_param_3."rxtype"()
    set $P101, $P5002
    set $S5001, $P101
    iseq $I5001, $S5001, "alt"
    unless $I5001 goto if1070_else2634 
    .const 'Sub' $P5003 = 'cuid_231_1367388594.4399' 
    capture_lex $P5003
    $P5004 = $P5003()
    set $P5020, $P5004
    goto if1070_end2635
  if1070_else2634:
    set $S5002, $P101
    iseq $I5002, $S5002, "subcapture"
    set $I5004, $I5002
    if $I5002 goto unless1072_end2642 
    set $S5003, $P101
    iseq $I5003, $S5003, "quant"
    set $I5004, $I5003
  unless1072_end2642:
    unless $I5004 goto if1071_else2639 
.annotate 'line', 983
.annotate 'line', 984
    nqp_decontainerize $P5005, _lex_param_0
    set fb_tmp_226, _lex_param_3
    repr_defined $I5005, fb_tmp_226
    unless $I5005 goto if1073_else2643 
    set $P5006, fb_tmp_226[0]
    set $P5008, $P5006
    goto if1073_end2644
  if1073_else2643:
    null $P5007
    set $P5008, $P5007
  if1073_end2644:
    unless_null $P5008, vivi_10742645
    nqp_get_sc_object $P5009, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5008, $P5009
  vivi_10742645:
    $P5010 = $P5005."alt_nfas"(_lex_param_1, _lex_param_2, $P5008)
    set $P5019, $P5010
    goto if1071_end2640
  if1071_else2639:
    set $S5004, $P101
    iseq $I5006, $S5004, "concat"
    set $I5008, $I5006
    if $I5006 goto unless1078_end2653 
    set $S5005, $P101
    iseq $I5007, $S5005, "altseq"
    set $I5008, $I5007
  unless1078_end2653:
    set $I5010, $I5008
    if $I5008 goto unless1077_end2651 
    set $S5006, $P101
    iseq $I5009, $S5006, "conj"
    set $I5010, $I5009
  unless1077_end2651:
    set $I5012, $I5010
    if $I5010 goto unless1076_end2649 
    set $S5007, $P101
    iseq $I5011, $S5007, "conjseq"
    set $I5012, $I5011
  unless1076_end2649:
    box $P5018, $I5012
    set $P5017, $P5018
    unless $I5012 goto if1075_end2647 
.annotate 'line', 986
.annotate 'line', 987
    $P5014 = _lex_param_3."list"()
    set $P5011, $P5014
    iter $P5013, $P5014
  for_next2654:
    unless $P5013, for_done2656
    shift $P5016, $P5013
  for_redo2655:
    .const 'Sub' $P5015 = 'cuid_232_1367388594.4399' 
    capture_lex $P5015
    $P5011 = $P5015($P5016)
    goto for_next2654
  for_done2656:
    set $P5017, $P5011
  if1075_end2647:
    set $P5019, $P5017
  if1071_end2640:
    set $P5020, $P5019
  if1070_end2635:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_231_1367388594.4399") :anon :lex :outer("cuid_169_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 974
    .const 'Sub' $P5019 = 'cuid_230_1367388594.4399' 
    capture_lex $P5019 
    .lex "@alternatives", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 976
    find_lex $P5005, "$ast"
    $P5006 = $P5005."list"()
    set $P5002, $P5006
    iter $P5004, $P5006
  for_next2636:
    unless $P5004, for_done2638
    shift $P5008, $P5004
  for_redo2637:
    .const 'Sub' $P5007 = 'cuid_230_1367388594.4399' 
    capture_lex $P5007
    $P5002 = $P5007($P5008)
    goto for_next2636
  for_done2638:
.annotate 'line', 980
    find_lex $P5009, "$ast"
    nqp_get_sc_object $P5010, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 12
    $P5011 = $P5010."unique"("alt_nfa_")
    set $S5003, $P5011
    concat $S5002, $S5003, "_"
    time $N5001
    set $S5004, $N5001
    concat $S5001, $S5002, $S5004
    $P5009."name"($S5001)
.annotate 'line', 981
    find_lex $P5013, "self"
    nqp_decontainerize $P5012, $P5013
    find_lex $P5014, "$code_obj"
    find_lex $P5015, "$block"
    find_lex $P5016, "$ast"
    $P5017 = $P5016."name"()
    $P5018 = $P5012."store_regex_alt_nfa"($P5014, $P5015, $P5017, $P101)
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_230_1367388594.4399") :anon :lex :outer("cuid_231_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 976
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 977
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$code_obj"
    find_lex $P5004, "$block"
    $P5001."alt_nfas"($P5003, $P5004, _lex_param_0)
    find_lex $P5005, "@alternatives"
.annotate 'line', 978
    nqp_get_sc_object $P5006, "8FFA7946C43E61F88541F98801326AC6461610E9-1367388560.19962", 3
    $P5007 = $P5006."new"()
    $P5008 = $P5007."addnode"(_lex_param_0)
    push $P5005, $P5008
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_232_1367388594.4399") :anon :lex :outer("cuid_169_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 987
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$code_obj"
    find_lex $P5004, "$block"
    $P5005 = $P5001."alt_nfas"($P5003, $P5004, _lex_param_0)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "subrule_alias" :subid("cuid_170_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 991
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "self", _lex_param_0 
    .lex "$ast", _lex_param_1 
    .lex "$name", _lex_param_2 
.annotate 'line', 992
    $P5001 = _lex_param_1."name"()
    set $S5001, $P5001
    isgt $I5001, $S5001, ""
    unless $I5001 goto if1079_else2657 
    set $S5004, _lex_param_2
    concat $S5003, $S5004, "="
    $P5002 = _lex_param_1."name"()
    set $S5005, $P5002
    concat $S5002, $S5003, $S5005
    $P5003 = _lex_param_1."name"($S5002)
    goto if1079_end2658
  if1079_else2657:
.annotate 'line', 993
    $P5004 = _lex_param_1."name"(_lex_param_2)
  if1079_end2658:
.annotate 'line', 994
    $P5005 = _lex_param_1."subtype"("capture")
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "flip_ast" :subid("cuid_171_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 997
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5019 = 'cuid_233_1367388594.4399' 
    capture_lex $P5019 
    .const 'Sub' $P5019 = 'cuid_234_1367388594.4399' 
    capture_lex $P5019 
    .lex "self", _lex_param_0 
    .lex "$qast", _lex_param_1 
    .local pmc fb_tmp_227 
    root_new $P101, ['parrot';'Continuation']
    set_label $P101, lexotic_2659
    .lex "RETURN", $P101
    nqp_get_sc_object $P5001, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108", 34
    type_check $I5001, _lex_param_1, $P5001
    if $I5001 goto unless1080_end2662 
    $P5002 = "RETURN"(_lex_param_1)
  unless1080_end2662:
.annotate 'line', 999
    $P5003 = _lex_param_1."rxtype"()
    set $S5001, $P5003
    iseq $I5002, $S5001, "literal"
    unless $I5002 goto if1081_else2663 
.annotate 'line', 1000
    set fb_tmp_227, _lex_param_1
    repr_defined $I5003, fb_tmp_227
    unless $I5003 goto if1082_else2665 
    set $P5004, fb_tmp_227[0]
    set $P5006, $P5004
    goto if1082_end2666
  if1082_else2665:
    null $P5005
    set $P5006, $P5005
  if1082_end2666:
    unless_null $P5006, vivi_10832667
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5006, $P5007
  vivi_10832667:
    $P5008 = $P5006."reverse"()
    set _lex_param_1[0], $P5008
    goto if1081_end2664
  if1081_else2663:
.annotate 'line', 1002
    $P5009 = _lex_param_1."rxtype"()
    set $S5002, $P5009
    iseq $I5004, $S5002, "concat"
    unless $I5004 goto if1084_else2668 
    .const 'Sub' $P5010 = 'cuid_233_1367388594.4399' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5018, $P5011
    goto if1084_end2669
  if1084_else2668:
.annotate 'line', 1007
    $P5015 = _lex_param_1."list"()
    set $P5012, $P5015
    iter $P5014, $P5015
  for_next2680:
    unless $P5014, for_done2682
    shift $P5017, $P5014
  for_redo2681:
    .const 'Sub' $P5016 = 'cuid_234_1367388594.4399' 
    capture_lex $P5016
    $P5012 = $P5016($P5017)
    goto for_next2680
  for_done2682:
    set $P5018, $P5012
  if1084_end2669:
  if1081_end2664:
    goto lexotic_2660
  lexotic_2659:
    .get_results (_lex_param_1)
  lexotic_2660:
    .return (_lex_param_1) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_233_1367388594.4399") :anon :lex :outer("cuid_171_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1002
    .lex "@tmp", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
  while1085_test2670:
    find_lex $P5002, "$qast"
    $P5003 = $P5002."list"()
    set $N5001, $P5003
    box $P5009, $N5001
    set $P5008, $P5009
    unless $N5001 goto while1085_done2674 
  while1085_redo2672:
.annotate 'line', 1004
    find_lex $P5004, "$qast"
    $P5005 = $P5004."list"()
    $P5006 = $P5005."shift"()
    $P5007 = $P101."push"($P5006)
    set $P5008, $P5007
    goto while1085_test2670 
  while1085_done2674:
  while1086_test2675:
    set $P5017, $P101
    unless $P101 goto while1086_done2679 
  while1086_redo2677:
.annotate 'line', 1005
    find_lex $P5010, "$qast"
    $P5011 = $P5010."list"()
    find_lex $P5013, "self"
    nqp_decontainerize $P5012, $P5013
    $P5014 = $P101."pop"()
    $P5015 = $P5012."flip_ast"($P5014)
    $P5016 = $P5011."push"($P5015)
    set $P5017, $P5016
    goto while1086_test2675 
  while1086_done2679:
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_234_1367388594.4399") :anon :lex :outer("cuid_171_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1008
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    $P5003 = $P5001."flip_ast"(_lex_param_0)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "create_regex_code_object" :subid("cuid_172_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1015
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
    .local pmc fb_tmp_228 
.annotate 'line', 1016
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback2683
    nqp_get_sc_object $P5003, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 0
    get_who $P5002, $P5003
    set fb_tmp_228, $P5002
    repr_defined $I5001, fb_tmp_228
    unless $I5001 goto if1087_else2684 
    set $P5004, fb_tmp_228["$W"]
    set $P5006, $P5004
    goto if1087_end2685
  if1087_else2684:
    null $P5005
    set $P5006, $P5005
  if1087_end2685:
    unless_null $P5006, vivi_10882686
    nqp_get_sc_object $P5007, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    set $P5006, $P5007
  vivi_10882686:
    unless_null $P5006, vivi_10892687
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5006, $P5008
  vivi_10892687:
    set $P5001, $P5006
  fallback2683:
    $P5009 = _lex_param_1."name"()
    $P5010 = $P5001."create_code"(_lex_param_1, $P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_caps" :subid("cuid_173_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1020
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "%caps", _lex_param_3 
.annotate 'line', 1021
    $P5001 = _lex_param_1."SET_CAPS"(_lex_param_3)
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_nfa" :subid("cuid_174_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1025
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$nfa", _lex_param_3 
.annotate 'line', 1026
    $P5001 = _lex_param_3."save"()
    $P5002 = _lex_param_1."SET_NFA"($P5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_alt_nfa" :subid("cuid_175_1367388594.4399") :anon :lex :outer("cuid_196_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1030
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .const 'Sub' $P5008 = 'cuid_235_1367388594.4399' 
    capture_lex $P5008 
    .lex "@saved", $P101 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$key", _lex_param_3 
    .lex "@alternatives", _lex_param_4 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    set $P5002, _lex_param_4
    iter $P5004, _lex_param_4
  for_next2688:
    unless $P5004, for_done2690
    shift $P5006, $P5004
  for_redo2689:
    .const 'Sub' $P5005 = 'cuid_235_1367388594.4399' 
    capture_lex $P5005
    $P5002 = $P5005($P5006)
    goto for_next2688
  for_done2690:
.annotate 'line', 1035
    $P5007 = _lex_param_1."SET_ALT_NFA"(_lex_param_3, $P101)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_235_1367388594.4399") :anon :lex :outer("cuid_175_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1032
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 1033
    find_lex $P5001, "@saved"
    $P5002 = _lex_param_0."save"(1 :named("non_empty"))
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_236_1367388594.4399") :anon :lex :outer("cuid_177_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1040
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    nqp_get_sc_object $P5001, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205", 26
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_238_1367388594.4399") :load :init
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .const 'Sub' $P5001 = 'cuid_237_1367388594.4399' 
    capture_lex $P5001 
    .local pmc cur_sc 
    .local pmc conflicts 
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P5001
    get_class $P5002, "LexPad"
    get_class $P5003, "NQPLexPad"
    $P5004 = $P5001."hll_map"($P5002, $P5003)
    load_bytecode "ModuleLoader.pbc"
    .const 'Sub' $P5001 = "cuid_177_1367388594.4399" 
    get_hll_global $P5002, "ModuleLoader"
    $P5003 = $P5002."load_setting"("NQPCORE")
    $P5004 = $P5001."set_outer_ctx"($P5003)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("NQPHLL")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QAST")
    nqp_create_sc $P5001, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346"
    set cur_sc, $P5001
    $P5002 = cur_sc."set_description"("src/stage2/gen/NQPP6QRegex.nqp")
    new $P5003, 'ResizablePMCArray'
    set conflicts, $P5003
    new $P5004, 'ResizableStringArray'
    null $S5001
    push $P5004, $S5001
    push $P5004, "P6opaque"
    push $P5004, "QAST"
    push $P5004, "QRegex"
    push $P5004, "NQPCursorRole"
    push $P5004, "8FFA7946C43E61F88541F98801326AC6461610E9-1367388560.19962"
    push $P5004, "src/stage2/QRegex.nqp"
    push $P5004, "NQPMatch"
    push $P5004, "NQPCursor"
    push $P5004, "NQPRegexMethod"
    push $P5004, "NQPRegex"
    push $P5004, "HLL"
    push $P5004, "PIRT"
    push $P5004, "DEFAULT"
    push $P5004, "CREATE"
    push $P5004, "7F84F8382504A31A75E1C1CEC98F637F8AC4A313-1367388555.16205"
    push $P5004, "src/stage2/NQPCORE.setting"
    push $P5004, "bless"
    push $P5004, "BUILDALL"
    push $P5004, "new"
    push $P5004, "Str"
    push $P5004, "Numeric"
    push $P5004, "Int"
    push $P5004, "defined"
    push $P5004, "ACCEPTS"
    push $P5004, "isa"
    push $P5004, "BUILD"
    push $P5004, "CAD7667229FADB246BF8592D21A076CDE373EC5D-1367388566.32003"
    push $P5004, "src/stage2/gen/NQPHLL.nqp"
    push $P5004, "slot_for_object"
    push $P5004, "add_object"
    push $P5004, "add_root_code_ref"
    push $P5004, "update_root_code_ref"
    push $P5004, "is_precompilation_mode"
    push $P5004, "add_load_dependency_task"
    push $P5004, "add_fixup_task"
    push $P5004, "sc"
    push $P5004, "handle"
    push $P5004, "code_ref_blocks"
    push $P5004, "load_dependency_tasks"
    push $P5004, "fixup_tasks"
    push $P5004, "create_code"
    push $P5004, "$!sc"
    push $P5004, "$!handle"
    push $P5004, "$!precomp_mode"
    push $P5004, "$!num_code_refs"
    push $P5004, "$!code_ref_blocks"
    push $P5004, "@!load_dependency_tasks"
    push $P5004, "@!fixup_tasks"
    push $P5004, "%!addr_to_slot"
    push $P5004, "MATCH"
    push $P5004, "Bool"
    push $P5004, "parse"
    push $P5004, "!INTERPOLATE"
    push $P5004, "!INTERPOLATE_REGEX"
    push $P5004, "orig"
    push $P5004, "target"
    push $P5004, "from"
    push $P5004, "pos"
    push $P5004, "CAPHASH"
    push $P5004, "!cursor_init"
    push $P5004, "!cursor_start_all"
    push $P5004, "!cursor_start_cur"
    push $P5004, "!cursor_start_subcapture"
    push $P5004, "!cursor_capture"
    push $P5004, "!cursor_push_cstack"
    push $P5004, "!cursor_pass"
    push $P5004, "!cursor_fail"
    push $P5004, "!cursor_pos"
    push $P5004, "!cursor_next"
    push $P5004, "!cursor_more"
    push $P5004, "!reduce"
    push $P5004, "!reduce_with_match"
    push $P5004, "!shared"
    push $P5004, "!protoregex"
    push $P5004, "!protoregex_nfa"
    push $P5004, "!protoregex_table"
    push $P5004, "!alt"
    push $P5004, "!alt_nfa"
    push $P5004, "!precompute_nfas"
    push $P5004, "!dba"
    push $P5004, "!highwater"
    push $P5004, "!highexpect"
    push $P5004, "!fresh_highexpect"
    push $P5004, "!set_highexpect"
    push $P5004, "!clear_highwater"
    push $P5004, "!BACKREF"
    push $P5004, "!LITERAL"
    push $P5004, "at"
    push $P5004, "before"
    push $P5004, "after"
    push $P5004, "ws"
    push $P5004, "ww"
    push $P5004, "wb"
    push $P5004, "ident"
    push $P5004, "alpha"
    push $P5004, "alnum"
    push $P5004, "upper"
    push $P5004, "lower"
    push $P5004, "digit"
    push $P5004, "xdigit"
    push $P5004, "space"
    push $P5004, "blank"
    push $P5004, "cntrl"
    push $P5004, "punct"
    push $P5004, "FAILGOAL"
    push $P5004, "throw_unrecog_backslash_seq"
    push $P5004, "termish"
    push $P5004, "term"
    push $P5004, "infix"
    push $P5004, "prefix"
    push $P5004, "postfix"
    push $P5004, "circumfix"
    push $P5004, "postcircumfix"
    push $P5004, "term:sym<circumfix>"
    push $P5004, "infixish"
    push $P5004, "prefixish"
    push $P5004, "postfixish"
    push $P5004, "nullterm"
    push $P5004, "nullterm_alt"
    push $P5004, "nulltermish"
    push $P5004, "quote_delimited"
    push $P5004, "quote_atom"
    push $P5004, "decint"
    push $P5004, "decints"
    push $P5004, "hexint"
    push $P5004, "hexints"
    push $P5004, "octint"
    push $P5004, "octints"
    push $P5004, "binint"
    push $P5004, "binints"
    push $P5004, "integer"
    push $P5004, "dec_number"
    push $P5004, "escale"
    push $P5004, "quote_escape"
    push $P5004, "quote_escape:sym<backslash>"
    push $P5004, "quote_escape:sym<stopper>"
    push $P5004, "quote_escape:sym<bs>"
    push $P5004, "quote_escape:sym<nl>"
    push $P5004, "quote_escape:sym<cr>"
    push $P5004, "quote_escape:sym<tab>"
    push $P5004, "quote_escape:sym<ff>"
    push $P5004, "quote_escape:sym<esc>"
    push $P5004, "quote_escape:sym<hex>"
    push $P5004, "quote_escape:sym<oct>"
    push $P5004, "quote_escape:sym<chr>"
    push $P5004, "quote_escape:sym<0>"
    push $P5004, "quote_escape:sym<misc>"
    push $P5004, "charname"
    push $P5004, "charnames"
    push $P5004, "charspec"
    push $P5004, "O"
    push $P5004, "panic"
    push $P5004, "peek_delimiters"
    push $P5004, "quote_EXPR"
    push $P5004, "quotemod_check"
    push $P5004, "starter"
    push $P5004, "stopper"
    push $P5004, "split_words"
    push $P5004, "EXPR"
    push $P5004, "EXPR_reduce"
    push $P5004, "EXPR_nonassoc"
    push $P5004, "ternary"
    push $P5004, "MARKER"
    push $P5004, "MARKED"
    push $P5004, "LANG"
    push $P5004, "obs"
    push $P5004, "throw_unrecognized_metachar"
    push $P5004, "throw_null_pattern"
    push $P5004, "normspace"
    push $P5004, "identifier"
    push $P5004, "arg"
    push $P5004, "arglist"
    push $P5004, "TOP"
    push $P5004, "nibbler"
    push $P5004, "infixstopper"
    push $P5004, "rxstopper"
    push $P5004, "termaltseq"
    push $P5004, "termconjseq"
    push $P5004, "termalt"
    push $P5004, "termconj"
    push $P5004, "quantified_atom"
    push $P5004, "separator"
    push $P5004, "atom"
    push $P5004, "quantifier"
    push $P5004, "quantifier:sym<*>"
    push $P5004, "quantifier:sym<+>"
    push $P5004, "quantifier:sym<?>"
    push $P5004, "quantifier:sym<{N,M}>"
    push $P5004, "quantifier:sym<**>"
    push $P5004, "backmod"
    push $P5004, "metachar"
    push $P5004, "metachar:sym<ws>"
    push $P5004, "metachar:sym<[ ]>"
    push $P5004, "metachar:sym<( )>"
    push $P5004, "metachar:sym<'>"
    push $P5004, "metachar:sym<\">"
    push $P5004, "metachar:sym<.>"
    push $P5004, "metachar:sym<^>"
    push $P5004, "metachar:sym<^^>"
    push $P5004, "metachar:sym<$>"
    push $P5004, "metachar:sym<$$>"
    push $P5004, "metachar:sym<:::>"
    push $P5004, "metachar:sym<::>"
    push $P5004, "metachar:sym<lwb>"
    push $P5004, "metachar:sym<rwb>"
    push $P5004, "metachar:sym<from>"
    push $P5004, "metachar:sym<to>"
    push $P5004, "metachar:sym<bs>"
    push $P5004, "metachar:sym<mod>"
    push $P5004, "metachar:sym<quantifier>"
    push $P5004, "metachar:sym<~>"
    push $P5004, "metachar:sym<{*}>"
    push $P5004, "metachar:sym<assert>"
    push $P5004, "sigil"
    push $P5004, "metachar:sym<var>"
    push $P5004, "backslash"
    push $P5004, "backslash:sym<s>"
    push $P5004, "backslash:sym<b>"
    push $P5004, "backslash:sym<e>"
    push $P5004, "backslash:sym<f>"
    push $P5004, "backslash:sym<h>"
    push $P5004, "backslash:sym<r>"
    push $P5004, "backslash:sym<t>"
    push $P5004, "backslash:sym<v>"
    push $P5004, "backslash:sym<o>"
    push $P5004, "backslash:sym<x>"
    push $P5004, "backslash:sym<c>"
    push $P5004, "backslash:sym<A>"
    push $P5004, "backslash:sym<z>"
    push $P5004, "backslash:sym<Z>"
    push $P5004, "backslash:sym<Q>"
    push $P5004, "backslash:sym<unrec>"
    push $P5004, "backslash:sym<misc>"
    push $P5004, "assertion"
    push $P5004, "assertion:sym<?>"
    push $P5004, "assertion:sym<!>"
    push $P5004, "assertion:sym<|>"
    push $P5004, "assertion:sym<method>"
    push $P5004, "assertion:sym<name>"
    push $P5004, "assertion:sym<[>"
    push $P5004, "cclass_elem"
    push $P5004, "mod_internal"
    push $P5004, "mod_ident"
    push $P5004, "mod_ident:sym<ignorecase>"
    push $P5004, "mod_ident:sym<ratchet>"
    push $P5004, "mod_ident:sym<sigspace>"
    push $P5004, "mod_ident:sym<dba>"
    push $P5004, "mod_ident:sym<oops>"
    push $P5004, "$!shared"
    push $P5004, "$!from"
    push $P5004, "$!pos"
    push $P5004, "$!match"
    push $P5004, "$!name"
    push $P5004, "$!bstack"
    push $P5004, "$!cstack"
    push $P5004, "$!regexsub"
    push $P5004, "$!restart"
    push $P5004, "string_to_int"
    push $P5004, "ints_to_string"
    push $P5004, "CTXSAVE"
    push $P5004, "SET_BLOCK_OUTER_CTX"
    push $P5004, "qbuildsub"
    push $P5004, "alt_nfas"
    push $P5004, "subrule_alias"
    push $P5004, "flip_ast"
    push $P5004, "create_regex_code_object"
    push $P5004, "store_regex_caps"
    push $P5004, "store_regex_nfa"
    push $P5004, "store_regex_alt_nfa"
    push $P5004, "backend"
    push $P5004, "language"
    push $P5004, "compiler"
    push $P5004, "config"
    push $P5004, "autoprint"
    push $P5004, "interactive"
    push $P5004, "interactive_result"
    push $P5004, "interactive_exception"
    push $P5004, "eval"
    push $P5004, "ctxsave"
    push $P5004, "stages"
    push $P5004, "parsegrammar"
    push $P5004, "parseactions"
    push $P5004, "interactive_banner"
    push $P5004, "interactive_prompt"
    push $P5004, "compiler_progname"
    push $P5004, "commandline_options"
    push $P5004, "command_line"
    push $P5004, "command_eval"
    push $P5004, "process_args"
    push $P5004, "evalfiles"
    push $P5004, "exists_stage"
    push $P5004, "compile"
    push $P5004, "start"
    push $P5004, "ast"
    push $P5004, "dumper"
    push $P5004, "usage"
    push $P5004, "version"
    push $P5004, "show-config"
    push $P5004, "verbose-config"
    push $P5004, "nqpevent"
    push $P5004, "removestage"
    push $P5004, "addstage"
    push $P5004, "parse_name"
    push $P5004, "lineof"
    push $P5004, "user-progname"
    push $P5004, "cli-options"
    push $P5004, "cli-arguments"
    push $P5004, "default_backend"
    push $P5004, "@!stages"
    push $P5004, "$!parsegrammar"
    push $P5004, "$!parseactions"
    push $P5004, "@!cmdoptions"
    push $P5004, "$!usage"
    push $P5004, "$!compiler_progname"
    push $P5004, "$!language"
    push $P5004, "%!config"
    push $P5004, "$!user_progname"
    push $P5004, "@!cli-arguments"
    push $P5004, "%!cli-options"
    push $P5004, "$!backend"
    push $P5004, ""
    push $P5004, "alt_nfa__1_1367388594.66098"
    push $P5004, "alt_nfa__2_1367388594.66922"
    push $P5004, "val"
    push $P5004, "'"
    push $P5004, "\""
    push $P5004, "alt_nfa__3_1367388594.70242"
    push $P5004, "0"
    push $P5004, "alt_nfa__4_1367388594.8146"
    push $P5004, ">"
    push $P5004, "alt_nfa__5_1367388594.84029"
    push $P5004, "|"
    push $P5004, "&"
    push $P5004, "noun"
    push $P5004, "&|~"
    push $P5004, "alt_nfa__6_1367388594.93467"
    push $P5004, "alt_nfa__7_1367388594.97169"
    push $P5004, "septype"
    push $P5004, "alt_nfa__8_1367388594.99956"
    push $P5004, "sym"
    push $P5004, "1"
    push $P5004, "2"
    push $P5004, "min"
    push $P5004, "max"
    push $P5004, "alt_nfa__9_1367388595.20845"
    push $P5004, "alt_nfa__10_1367388595.29965"
    push $P5004, "alt_nfa__11_1367388595.30832"
    push $P5004, "GOAL"
    push $P5004, "key"
    push $P5004, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5004, "$@%&"
    push $P5004, "name"
    push $P5004, "alt_nfa__12_1367388595.41314"
    push $P5004, "dDnNsSwW"
    push $P5004, "bB"
    push $P5004, "eE"
    push $P5004, "fF"
    push $P5004, "hH"
    push $P5004, "rR"
    push $P5004, "tT"
    push $P5004, "vV"
    push $P5004, "oO"
    push $P5004, "alt_nfa__13_1367388595.48764"
    push $P5004, "xX"
    push $P5004, "alt_nfa__14_1367388595.50225"
    push $P5004, "cC"
    push $P5004, "alt_nfa__15_1367388595.58652"
    push $P5004, "alt_nfa__16_1367388595.5999"
    push $P5004, "longname"
    push $P5004, "alt_nfa__17_1367388595.64171"
    push $P5004, "alt_nfa__18_1367388595.6532"
    push $P5004, "sign"
    push $P5004, "invert"
    push $P5004, "uniprop"
    push $P5004, "alt_nfa__19_1367388595.82183"
    push $P5004, "alt_nfa__20_1367388595.82252"
    push $P5004, "alt_nfa__21_1367388595.82285"
    push $P5004, "n"
    push $P5004, "alt_nfa__23_1367388595.85933"
    push $P5004, "alt_nfa__24_1367388595.85983"
    push $P5004, "alt_nfa__22_1367388595.83184"
    push $P5004, "__6MODEL_CORE__"
    push $P5004, "GLOBALish"
    push $P5004, "EXPORT"
    push $P5004, "EB4CFE3B370DC9D11C7FABA2BC19713A2F558480-1367388550.21637"
    push $P5004, "src/stage2/gen/nqp-mo.nqp"
    push $P5004, "QRegex::P6Regex::World"
    push $P5004, "QRegex::P6Regex::Grammar"
    push $P5004, "alt_nfa__1_1367388566.47589"
    push $P5004, "alt_nfa__2_1367388566.51825"
    push $P5004, "alt_nfa__3_1367388566.61209"
    push $P5004, "alt_nfa__4_1367388566.61276"
    push $P5004, "alt_nfa__5_1367388566.63983"
    push $P5004, "alt_nfa__6_1367388566.74481"
    push $P5004, "alt_nfa__7_1367388566.76308"
    push $P5004, "alt_nfa__8_1367388566.81512"
    push $P5004, "alt_nfa__9_1367388566.86965"
    push $P5004, "shared"
    push $P5004, "match"
    push $P5004, "bstack"
    push $P5004, "cstack"
    push $P5004, "regexsub"
    push $P5004, "restart"
    push $P5004, "QRegex::P6Regex::Actions"
    push $P5004, "QRegex::P6Regex::Compiler"
    push $P5004, "CompileTimeValue"
    push $P5004, "6F03D67C6A0A511F6F9FDA0C4D1E063D61830D12-1367388557.72108"
    push $P5004, "src/stage2/QASTNode.nqp"
    push $P5004, "SpecialArg"
    push $P5004, "Node"
    push $P5004, "Regex"
    push $P5004, "IVal"
    push $P5004, "NVal"
    push $P5004, "SVal"
    push $P5004, "BVal"
    push $P5004, "WVal"
    push $P5004, "Want"
    push $P5004, "Var"
    push $P5004, "VarWithFallback"
    push $P5004, "Op"
    push $P5004, "VM"
    push $P5004, "Stmts"
    push $P5004, "Stmt"
    push $P5004, "Block"
    push $P5004, "Unquote"
    push $P5004, "CompUnit"
    push $P5004, "InlinePlaceholder"
    push $P5004, "Operations"
    push $P5004, "1F55543DEC645FFA20AB3FBDCAAD529102443B83-1367388573.57212"
    push $P5004, "src/stage2/QAST.nqp"
    push $P5004, "Compiler"
    push $P5004, "NFA"
    push $P5004, "P6Regex"
    push $P5004, "Grammar"
    push $P5004, "Actions"
    push $P5004, "Backend"
    push $P5004, "CommandLine"
    push $P5004, "World"
    push $P5004, "CallResult"
    push $P5004, "Sub"
    push $P5004, "Ops"
    push $P5004, "Label"
    push $P5004, "01234567"
    push $P5004, "0123456789abcdefABCDEF"
    push $P5004, "?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    push $P5004, "01"
    push $P5004, "Ee"
    .const 'Sub' $P5005 = 'cuid_237_1367388594.4399' 
    capture_lex $P5005
    $P5006 = $P5005()
    nqp_deserialize_sc "", cur_sc, $P5004, $P5006, conflicts
    unless conflicts goto if1091_end2694 
    die "Repossession conflicts occurred during deserialization"
  if1091_end2694:
    .const "LexInfo" $P5001 = "cuid_177_1367388594.4399"
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 0
    $P5001."set_static_lexpad_value"("GLOBALish", $P5002)
    .const "LexInfo" $P5003 = "cuid_177_1367388594.4399"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_177_1367388594.4399"
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 0
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_177_1367388594.4399"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_177_1367388594.4399"
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 1
    $P5001."set_static_lexpad_value"("EXPORT", $P5002)
    .const "LexInfo" $P5003 = "cuid_177_1367388594.4399"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_177_1367388594.4399"
    nqp_get_sc_object $P5002, "8FFA7946C43E61F88541F98801326AC6461610E9-1367388560.19962", 32
    $P5001."set_static_lexpad_value"("ParseShared", $P5002)
    .const "LexInfo" $P5003 = "cuid_177_1367388594.4399"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_177_1367388594.4399"
    nqp_get_sc_object $P5002, "8FFA7946C43E61F88541F98801326AC6461610E9-1367388560.19962", 33
    $P5001."set_static_lexpad_value"("NQPCursorRole", $P5002)
    .const "LexInfo" $P5003 = "cuid_177_1367388594.4399"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_1_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 4
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_179_1367388594.4399"
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 3
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_179_1367388594.4399"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_179_1367388594.4399"
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 3
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_179_1367388594.4399"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_2_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 6
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_3_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 7
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_4_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 8
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_5_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 9
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_6_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 10
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_7_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 11
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_8_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 12
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_9_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 13
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_10_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 14
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_11_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 15
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_12_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 16
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_13_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 17
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_14_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 18
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_15_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 19
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_16_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 20
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_17_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 21
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_18_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 22
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_19_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 23
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_20_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 24
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_21_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 25
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_22_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 26
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_23_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 27
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_24_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 28
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_25_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 29
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_26_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 30
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_27_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 31
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_28_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 32
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_29_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 33
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_30_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 34
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_31_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 35
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_32_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 36
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_33_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 37
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_34_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 38
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_35_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 39
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_36_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 40
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_37_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 41
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_38_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 42
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_39_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 43
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_40_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 44
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_41_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 45
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_42_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 46
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_43_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 47
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_44_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 48
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_45_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 49
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_46_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 50
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_47_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 51
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_48_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 52
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_49_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 53
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_50_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 54
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_51_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 55
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_52_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 56
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_53_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 57
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_54_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 58
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_55_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 59
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_56_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 60
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_57_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 61
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_58_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 62
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_59_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 63
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_60_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 64
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_61_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 65
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_62_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 66
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_63_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 67
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_64_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 68
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_65_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 69
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_66_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 70
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_67_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 71
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_68_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 72
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_69_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 73
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_70_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 74
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_71_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 75
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_72_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 76
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_73_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 77
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_74_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 78
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_75_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 79
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_76_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 80
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_77_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 81
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_78_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 82
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_79_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 83
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_80_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 84
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_81_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 85
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_82_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 86
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_83_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 87
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_84_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 88
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_85_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 89
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_86_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 90
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_87_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 91
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_88_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 92
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_89_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 93
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_90_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 94
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_91_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 95
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_92_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 96
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_93_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 97
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_94_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 98
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_95_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 99
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_96_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 100
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_97_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 101
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_98_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 102
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_99_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 103
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_100_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 104
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_101_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 105
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_102_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 106
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_103_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 107
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_104_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 108
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_105_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 109
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_106_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 110
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_107_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 111
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_108_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 112
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_109_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 113
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_110_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 114
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_111_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 115
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_112_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 116
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_180_1367388594.4399"
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 5
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_180_1367388594.4399"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_180_1367388594.4399"
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 5
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_180_1367388594.4399"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_113_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 118
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_114_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 119
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_115_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 120
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_116_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 121
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_117_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 122
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_118_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 123
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_119_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 124
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_120_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 125
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_121_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 126
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_122_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 127
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_123_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 128
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_124_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 129
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_125_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 130
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_126_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 131
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_127_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 132
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_128_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 133
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_129_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 134
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_130_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 135
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_131_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 136
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_132_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 137
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_133_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 138
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_134_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 139
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_135_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 140
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_136_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 141
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_137_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 142
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_138_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 143
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_139_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 144
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_140_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 145
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_141_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 146
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_142_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 147
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_143_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 148
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_144_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 149
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_145_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 150
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_146_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 151
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_147_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 152
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_148_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 153
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_149_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 154
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_150_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 155
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_151_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 156
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_152_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 157
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_153_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 158
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_154_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 159
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_155_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 160
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_156_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 161
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_157_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 162
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_158_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 163
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_159_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 164
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_160_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 165
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_161_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 166
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_162_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 167
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_163_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 168
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_164_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 169
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_165_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 170
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_166_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 171
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_167_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 172
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_168_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 173
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_169_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 174
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_170_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 175
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_171_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 176
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_172_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 177
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_173_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 178
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_174_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 179
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_175_1367388594.4399" 
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 180
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_196_1367388594.4399"
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 117
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_196_1367388594.4399"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_196_1367388594.4399"
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 117
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_196_1367388594.4399"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_236_1367388594.4399"
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 181
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_236_1367388594.4399"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_236_1367388594.4399"
    nqp_get_sc_object $P5002, "16445D4686A72BC34373CEFACF559476DD012ACF-1367388594.47346", 181
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_236_1367388594.4399"
    $P5004 = $P5003."finish_static_lexpad"()
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_237_1367388594.4399") :anon :lex :outer("cuid_238_1367388594.4399")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    new $P5001, 'ResizablePMCArray'
    .const 'Sub' $P5002 = "cuid_1_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_2_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_3_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_4_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_5_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_6_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_7_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_8_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_9_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_10_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_11_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_12_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_13_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_14_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_15_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_16_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_17_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_18_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_19_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_20_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_21_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_22_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_23_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_24_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_25_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_26_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_27_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_28_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_29_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_30_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_31_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_32_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_33_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_34_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_35_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_36_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_37_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_38_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_39_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_40_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_41_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_42_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_43_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_44_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_45_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_46_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_47_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_48_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_49_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_50_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_51_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_52_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_53_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_54_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_55_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_56_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_57_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_58_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_59_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_60_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_61_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_62_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_63_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_64_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_65_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_66_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_67_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_68_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_69_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_70_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_71_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_72_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_73_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_74_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_75_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_76_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_77_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_78_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_79_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_80_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_81_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_82_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_83_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_84_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_85_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_86_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_87_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_88_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_89_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_90_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_91_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_92_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_93_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_94_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_95_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_96_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_97_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_98_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_99_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_100_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_101_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_102_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_103_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_104_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_105_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_106_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_107_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_108_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_109_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_110_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_111_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_112_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_113_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_114_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_115_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_116_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_117_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_118_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_119_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_120_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_121_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_122_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_123_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_124_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_125_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_126_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_127_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_128_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_129_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_130_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_131_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_132_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_133_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_134_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_135_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_136_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_137_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_138_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_139_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_140_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_141_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_142_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_143_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_144_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_145_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_146_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_147_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_148_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_149_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_150_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_151_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_152_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_153_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_154_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_155_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_156_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_157_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_158_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_159_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_160_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_161_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_162_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_163_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_164_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_165_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_166_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_167_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_168_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_169_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_170_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_171_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_172_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_173_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_174_1367388594.4399" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_175_1367388594.4399" 
    push $P5001, $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_239_1367388594.4399") :load
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .const 'Sub' $P5001 = "cuid_177_1367388594.4399" 
    $P5002 = $P5001()
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_240_1367388594.4399") :main
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc ARGS :slurpy 
    .const 'Sub' $P5001 = "cuid_177_1367388594.4399" 
    $P5002 = $P5001(ARGS :flat)
    .return ($P5002) 
.end