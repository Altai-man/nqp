/* A RakudoObject PMC is what actually represents an object so far as
 * the actual end user is concerned. While STable and REPR exist as
 * PMCs, they are not designed to ever really leak into user space.
 * This, on the other hand, is. In fact, pretty much everything that
 * the user ever touches will be an instance of this PMC.
 *
 * This PMC itself, however, doesn't actually contain much logic at
 * all. Mostly, it maps the Parrot world view to the Perl 6 object
 * model one. Actual object semantics are provided by the intersection
 * of the REPR and the HOW, both of which are pointed at by the STable.
 * The only thing that you can be sure of if you have a RakudoObject
 * PMC is that:
 *     PMC_data(SELF)[0]
 * Will give you the address of an STable PMC. Thus everything in here
 * should work with little more than this assumption.
 *
 * Note that this PMC is also never created directly. Instead, only a
 * REPR can create it, and in doing so it will set the data pointer to
 * point to something that can store the attributes etc and that has its
 * first element being a pointer to the STable. Thus even GC marking is
 * delegated to the REPR, since only it knows how a given object is laid
 * out (since that depends on the representation).
 */

#include "../metamodel/rakudoobject.h"

pmclass RakudoObject manual_attrs dynpmc group nqp {
    /* ********************************************** *
     * These methods are mapped to 6model primitives. *
     * ********************************************** */

    VTABLE void mark() {
        /* Delegate to the representation. */
        REPR(SELF)->gc_mark(interp, REPR_PMC(SELF), SELF);
    }

    VTABLE void destroy() {
        /* Delegate to the representation. */
        REPR(SELF)->gc_free(interp, REPR_PMC(SELF), SELF);
    }

    VTABLE PMC * find_method(STRING *name) {
        return STABLE(SELF)->find_method(interp, SELF, name, NO_HINT);
    }

    VTABLE PMC* get_attr_keyed(PMC *class_handle, STRING *name) {
        return REPR(SELF)->get_attribute(interp, REPR_PMC(SELF), SELF, class_handle, name, NO_HINT);
    }

    VTABLE void set_attr_keyed(PMC *class_handle, STRING *name, PMC* value) {
        REPR(SELF)->bind_attribute(interp, REPR_PMC(SELF), SELF, class_handle, name, NO_HINT, value);
    }

    /* ********************************************************* *
     * These v-table methods are overridable by a 6model object. *
     * ********************************************************* */

    VTABLE FLOATVAL get_number() {
        PMC **vt = STABLE(SELF)->parrot_vtable_mapping;
        PMC *meth;
        if (vt && !PMC_IS_NULL(meth = vt[PARROT_VTABLE_SLOT_GET_NUMBER])) {
            PMC *old_ctx = Parrot_pcc_get_signature(interp, CURRENT_CONTEXT(interp));
            PMC *cappy   = Parrot_pmc_new(interp, enum_class_CallContext);
            VTABLE_push_pmc(interp, cappy, SELF);
            Parrot_pcc_invoke_from_sig_object(interp, meth, cappy);
            cappy = Parrot_pcc_get_signature(interp, CURRENT_CONTEXT(interp));
            Parrot_pcc_set_signature(interp, CURRENT_CONTEXT(interp), old_ctx);
            return VTABLE_get_number_keyed_int(interp, cappy, 0);
        }
        else
            return SUPER();
    }

    VTABLE INTVAL get_integer() {
        PMC **vt = STABLE(SELF)->parrot_vtable_mapping;
        PMC *meth;
        if (vt && !PMC_IS_NULL(meth = vt[PARROT_VTABLE_SLOT_GET_INTEGER])) {
            PMC *old_ctx = Parrot_pcc_get_signature(interp, CURRENT_CONTEXT(interp));
            PMC *cappy   = Parrot_pmc_new(interp, enum_class_CallContext);
            VTABLE_push_pmc(interp, cappy, SELF);
            Parrot_pcc_invoke_from_sig_object(interp, meth, cappy);
            cappy = Parrot_pcc_get_signature(interp, CURRENT_CONTEXT(interp));
            Parrot_pcc_set_signature(interp, CURRENT_CONTEXT(interp), old_ctx);
            return VTABLE_get_integer_keyed_int(interp, cappy, 0);
        }
        else
            return SUPER();
    }

    VTABLE STRING * get_string() {
        PMC **vt = STABLE(SELF)->parrot_vtable_mapping;
        PMC *meth;
        if (vt && !PMC_IS_NULL(meth = vt[PARROT_VTABLE_SLOT_GET_STRING])) {
            PMC *old_ctx = Parrot_pcc_get_signature(interp, CURRENT_CONTEXT(interp));
            PMC *cappy   = Parrot_pmc_new(interp, enum_class_CallContext);
            VTABLE_push_pmc(interp, cappy, SELF);
            Parrot_pcc_invoke_from_sig_object(interp, meth, cappy);
            cappy = Parrot_pcc_get_signature(interp, CURRENT_CONTEXT(interp));
            Parrot_pcc_set_signature(interp, CURRENT_CONTEXT(interp), old_ctx);
            return VTABLE_get_string_keyed_int(interp, cappy, 0);
        }
        else
            return SUPER();
    }

    VTABLE INTVAL get_bool() {
        PMC **vt = STABLE(SELF)->parrot_vtable_mapping;
        PMC *meth;
        if (vt && !PMC_IS_NULL(meth = vt[PARROT_VTABLE_SLOT_GET_BOOL])) {
            PMC *old_ctx = Parrot_pcc_get_signature(interp, CURRENT_CONTEXT(interp));
            PMC *cappy   = Parrot_pmc_new(interp, enum_class_CallContext);
            VTABLE_push_pmc(interp, cappy, SELF);
            Parrot_pcc_invoke_from_sig_object(interp, meth, cappy);
            cappy = Parrot_pcc_get_signature(interp, CURRENT_CONTEXT(interp));
            Parrot_pcc_set_signature(interp, CURRENT_CONTEXT(interp), old_ctx);
            return VTABLE_get_bool(interp, VTABLE_get_pmc_keyed_int(interp, cappy, 0));
        }
        else
            return SUPER();
    }
    
    VTABLE PMC * get_pmc_keyed(PMC *key) {
        if (key->vtable->base_type == enum_class_Key) {
            if (PObj_get_FLAGS(key) & KEY_integer_FLAG)
                return SELF.get_pmc_keyed_int(VTABLE_get_integer(interp, key));
            else
                return SELF.get_pmc_keyed_str(VTABLE_get_string(interp, key));
        }
        else {
            PMC **vt = STABLE(SELF)->parrot_vtable_mapping;
            PMC *meth;
            if (vt && !PMC_IS_NULL(meth = vt[PARROT_VTABLE_SLOT_GET_PMC_KEYED])) {
                PMC *old_ctx = Parrot_pcc_get_signature(interp, CURRENT_CONTEXT(interp));
                PMC *cappy   = Parrot_pmc_new(interp, enum_class_CallContext);
                VTABLE_push_pmc(interp, cappy, SELF);
                VTABLE_push_pmc(interp, cappy, key);
                Parrot_pcc_invoke_from_sig_object(interp, meth, cappy);
                cappy = Parrot_pcc_get_signature(interp, CURRENT_CONTEXT(interp));
                Parrot_pcc_set_signature(interp, CURRENT_CONTEXT(interp), old_ctx);
                return VTABLE_get_pmc_keyed_int(interp, cappy, 0);
            }
            else
                return SUPER(key);
        }
    }
    
    VTABLE PMC * get_pmc_keyed_int(INTVAL key) {
        PMC **vt = STABLE(SELF)->parrot_vtable_mapping;
        PMC *meth;
        if (vt && !PMC_IS_NULL(meth = vt[PARROT_VTABLE_SLOT_GET_PMC_KEYED_INT])) {
            PMC *old_ctx = Parrot_pcc_get_signature(interp, CURRENT_CONTEXT(interp));
            PMC *cappy   = Parrot_pmc_new(interp, enum_class_CallContext);
            VTABLE_push_pmc(interp, cappy, SELF);
            VTABLE_push_integer(interp, cappy, key);
            Parrot_pcc_invoke_from_sig_object(interp, meth, cappy);
            cappy = Parrot_pcc_get_signature(interp, CURRENT_CONTEXT(interp));
            Parrot_pcc_set_signature(interp, CURRENT_CONTEXT(interp), old_ctx);
            return VTABLE_get_pmc_keyed_int(interp, cappy, 0);
        }
        else
            return SUPER(key);
    }
    
    VTABLE PMC * get_pmc_keyed_str(STRING *key) {
        PMC **vt = STABLE(SELF)->parrot_vtable_mapping;
        PMC *meth;
        if (vt && !PMC_IS_NULL(meth = vt[PARROT_VTABLE_SLOT_GET_PMC_KEYED_STR])) {
            PMC *old_ctx = Parrot_pcc_get_signature(interp, CURRENT_CONTEXT(interp));
            PMC *cappy   = Parrot_pmc_new(interp, enum_class_CallContext);
            VTABLE_push_pmc(interp, cappy, SELF);
            VTABLE_push_string(interp, cappy, key);
            Parrot_pcc_invoke_from_sig_object(interp, meth, cappy);
            cappy = Parrot_pcc_get_signature(interp, CURRENT_CONTEXT(interp));
            Parrot_pcc_set_signature(interp, CURRENT_CONTEXT(interp), old_ctx);
            return VTABLE_get_pmc_keyed_int(interp, cappy, 0);
        }
        else
            return SUPER(key);
    }
    
    VTABLE void set_pmc_keyed(PMC *key, PMC *value) {
        if (key->vtable->base_type == enum_class_Key) {
            if (PObj_get_FLAGS(key) & KEY_integer_FLAG)
                SELF.set_pmc_keyed_int(VTABLE_get_integer(interp, key), value);
            else
                SELF.set_pmc_keyed_str(VTABLE_get_string(interp, key), value);
        }
        else {
            PMC **vt = STABLE(SELF)->parrot_vtable_mapping;
            PMC *meth;
            if (vt && !PMC_IS_NULL(meth = vt[PARROT_VTABLE_SLOT_SET_PMC_KEYED])) {
                PMC *old_ctx = Parrot_pcc_get_signature(interp, CURRENT_CONTEXT(interp));
                PMC *cappy   = Parrot_pmc_new(interp, enum_class_CallContext);
                VTABLE_push_pmc(interp, cappy, SELF);
                VTABLE_push_pmc(interp, cappy, key);
                VTABLE_push_pmc(interp, cappy, value);
                Parrot_pcc_invoke_from_sig_object(interp, meth, cappy);
                Parrot_pcc_set_signature(interp, CURRENT_CONTEXT(interp), old_ctx);
            }
            else
                SUPER(key, value);
        }
    }
    
    VTABLE void set_pmc_keyed_int(INTVAL key, PMC *value) {
        PMC **vt = STABLE(SELF)->parrot_vtable_mapping;
        PMC *meth;
        if (vt && !PMC_IS_NULL(meth = vt[PARROT_VTABLE_SLOT_SET_PMC_KEYED_INT])) {
            PMC *old_ctx = Parrot_pcc_get_signature(interp, CURRENT_CONTEXT(interp));
            PMC *cappy   = Parrot_pmc_new(interp, enum_class_CallContext);
            VTABLE_push_pmc(interp, cappy, SELF);
            VTABLE_push_integer(interp, cappy, key);
            VTABLE_push_pmc(interp, cappy, value);
            Parrot_pcc_invoke_from_sig_object(interp, meth, cappy);
            Parrot_pcc_set_signature(interp, CURRENT_CONTEXT(interp), old_ctx);
        }
        else
            SUPER(key, value);
    }
    
    VTABLE void set_pmc_keyed_str(STRING *key, PMC *value) {
        PMC **vt = STABLE(SELF)->parrot_vtable_mapping;
        PMC *meth;
        if (vt && !PMC_IS_NULL(meth = vt[PARROT_VTABLE_SLOT_SET_PMC_KEYED_STR])) {
            PMC *old_ctx = Parrot_pcc_get_signature(interp, CURRENT_CONTEXT(interp));
            PMC *cappy   = Parrot_pmc_new(interp, enum_class_CallContext);
            VTABLE_push_pmc(interp, cappy, SELF);
            VTABLE_push_string(interp, cappy, key);
            VTABLE_push_pmc(interp, cappy, value);
            Parrot_pcc_invoke_from_sig_object(interp, meth, cappy);
            Parrot_pcc_set_signature(interp, CURRENT_CONTEXT(interp), old_ctx);
        }
        else
            SUPER(key, value);
    }
}
