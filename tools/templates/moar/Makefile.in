BAT          = @bat@
M_RUNNER     = nqp-m$(BAT)
M_RUNNER_BIN = $(BASE_DIR)/$(M_RUNNER)
# It's ok to shell quote this one as it only used in a command line
M_GEN_CAT    = @shquot(@script(gen-cat.pl)@)@ moar

M_STAGE0_DIR = @moar_stage0@
M_STAGE1_DIR = @nfp(gen/moar/stage1)@
M_STAGE2_DIR = @nfp(gen/moar/stage2)@

M_STAGE0_NQP = @q(@moar@)@ --libpath=$(M_STAGE0_DIR) @nfp($(M_STAGE0_DIR)/nqp.moarvm)@ --bootstrap
M_STAGE1_NQP = @q(@moar@)@ --libpath=$(M_STAGE1_DIR) @nfp($(M_STAGE1_DIR)/nqp.moarvm)@ --bootstrap

NQP_MO_MOAR     = nqpmo.moarvm

MODULE_LOADER_MOAR = ModuleLoader.moarvm

CORE_SETTING_MOAR     = NQPCORE.setting.moarvm

QASTNODE_MOAR     = QASTNode.moarvm

QREGEX_MOAR     = QRegex.moarvm

HLL_MOAR       = NQPHLL.moarvm
M_HLL_SOURCES  = @nfp(src/vm/moar/HLL/Backend.nqp)@ $(COMMON_HLL_SOURCES)

MASTOPS_MOAR   = MASTOps.moarvm
MASTNODES_MOAR = MASTNodes.moarvm

QAST_MOAR     = QAST.moarvm
M_QAST_SOURCES  = \
  @nfp(src/vm/moar/QAST/QASTRegexCompilerMAST.nqp)@ \
  @nfp(src/vm/moar/QAST/QASTOperationsMAST.nqp)@ \
  @nfp(src/vm/moar/QAST/QASTCompilerMAST.nqp)@

P6QREGEX_MOAR     = NQPP6QRegex.moarvm

P5QREGEX_MOAR     = NQPP5QRegex.moarvm

NQP_MOAR     = nqp.moarvm
M_NQP_SOURCES= @nfp(src/vm/moar/NQP/Ops.nqp)@ $(COMMON_NQP_SOURCES)

M_SOURCES = \
  $(COMMON_SOURCES) \
  $(M_QAST_SOURCES) \
  $(M_HLL_SOURCES) \
  $(M_NQP_SOURCES) \
  @nfp(src/vm/moar/ModuleLoader.nqp)@ \

M_STAGE1_OUTPUT = \
  @nfp($(M_STAGE1_DIR)/$(NQP_MO_MOAR))@ \
  @nfp($(M_STAGE1_DIR)/$(MODULE_LOADER_MOAR))@ \
  @nfp($(M_STAGE1_DIR)/$(CORE_SETTING_MOAR))@ \
  @nfp($(M_STAGE1_DIR)/$(QASTNODE_MOAR))@ \
  @nfp($(M_STAGE1_DIR)/$(QREGEX_MOAR))@ \
  @nfp($(M_STAGE1_DIR)/$(HLL_MOAR))@ \
  @nfp($(M_STAGE1_DIR)/$(MASTOPS_MOAR))@ \
  @nfp($(M_STAGE1_DIR)/$(MASTNODES_MOAR))@ \
  @nfp($(M_STAGE1_DIR)/$(QAST_MOAR))@ \
  @nfp($(M_STAGE1_DIR)/$(P6QREGEX_MOAR))@ \
  @nfp($(M_STAGE1_DIR)/$(NQP_MOAR))@ \

M_STAGE2_OUTPUT = \
  @nfpl($(M_STAGE2_DIR)/$(NQP_MO_MOAR) $(M_STAGE2_DIR)/$(MODULE_LOADER_MOAR))@ \
  @nfpl($(M_STAGE2_DIR)/$(CORE_SETTING_MOAR) $(M_STAGE2_DIR)/$(QASTNODE_MOAR))@ \
  @nfpl($(M_STAGE2_DIR)/$(QREGEX_MOAR) $(M_STAGE2_DIR)/$(HLL_MOAR))@ \
  @nfpl($(M_STAGE2_DIR)/$(MASTOPS_MOAR) $(M_STAGE2_DIR)/$(MASTNODES_MOAR))@ \
  @nfpl($(M_STAGE2_DIR)/$(QAST_MOAR) $(M_STAGE2_DIR)/$(P6QREGEX_MOAR))@ \
  @nfpl($(M_STAGE2_DIR)/$(NQP_MOAR))@ \

manifest:
	echo MANIFEST >MANIFEST
	git ls-files >>MANIFEST

release: manifest
	[ -n "$(VERSION)" ] || ( echo "\nTry 'make release VERSION=yyyy.mm'\n\n"; exit 1 )
	bash -c '[ "$$(cat VERSION)" == "$(VERSION)" ] || ( echo -e "\nVersion on command line and in VERSION file differ\n"; exit 1 )'
	[ -d nqp-$(VERSION) ] || ln -s . nqp-$(VERSION)
	$(PERL5) -ne 'print "nqp-$(VERSION)/$$_"' MANIFEST |\
	    tar -zcv --owner=0 --group=0 --numeric-owner -T - -f nqp-$(VERSION).tar.gz
	rm nqp-$(VERSION)

distclean: realclean

realclean: clean
	$(RM_F) Makefile MANIFEST config.status nqp$(BAT)

testclean:

m-all: $(NQP_MOAR) $(M_RUNNER) $(P5QREGEX_MOAR)

m-install: m-all
	$(MKPATH) @q($(DESTDIR)$(BIN_DIR))@
	$(MKPATH) @q($(DESTDIR)$(NQP_LIB_DIR))@
	$(MKPATH) @nfpq($(DESTDIR)$(NQP_LIB_DIR)/profiler)@
	$(CP) $(NQP_MO_MOAR) @q($(DESTDIR)$(NQP_LIB_DIR))@
	$(CP) $(MODULE_LOADER_MOAR) @q($(DESTDIR)$(NQP_LIB_DIR))@
	$(CP) $(CORE_SETTING_MOAR) @q($(DESTDIR)$(NQP_LIB_DIR))@
	$(CP) $(QASTNODE_MOAR) @q($(DESTDIR)$(NQP_LIB_DIR))@
	$(CP) $(QREGEX_MOAR) @q($(DESTDIR)$(NQP_LIB_DIR))@
	$(CP) $(HLL_MOAR) @q($(DESTDIR)$(NQP_LIB_DIR))@
	$(CP) $(MASTOPS_MOAR) @q($(DESTDIR)$(NQP_LIB_DIR))@
	$(CP) $(MASTNODES_MOAR) @q($(DESTDIR)$(NQP_LIB_DIR))@
	$(CP) $(QAST_MOAR) @q($(DESTDIR)$(NQP_LIB_DIR))@
	$(CP) $(P6QREGEX_MOAR) @q($(DESTDIR)$(NQP_LIB_DIR))@
	$(CP) $(NQP_MOAR) @q($(DESTDIR)$(NQP_LIB_DIR))@
	$(CP) $(P5QREGEX_MOAR) @q($(DESTDIR)$(NQP_LIB_DIR))@
	$(CP) @nfp(src/vm/moar/profiler/template.html)@ @nfpq($(DESTDIR)$(NQP_LIB_DIR)/profiler/template.html)@
	$(PERL5) @shquot(@script(install-moar-runner.pl)@)@ "$(DESTDIR)" @q($(PREFIX))@ @q($(NQP_LIB_DIR))@ @nfpq(@moar@)@

# FIXME:
M_CLEANUPS = *.moarvm  @nfp(gen/moar/*)@ $(M_RUNNER)

m-clean:
	$(RM_RF) $(M_CLEANUPS)

$(M_STAGE1_DIR): $(M_STAGE1_OUTPUT)

@nfp($(M_STAGE1_DIR)/$(NQP_MO_MOAR))@: $(M_STAGE0_DIR) $(NQP_MO_SOURCES)
	$(MKPATH) @nfpq($(M_STAGE1_DIR)/gen)@
	$(PERL5) $(M_GEN_CAT) $(NQP_MO_SOURCES) > @nfpq($(M_STAGE1_DIR)/$(NQP_MO_COMBINED))@
	$(M_STAGE0_NQP) --setting=NULL --no-regex-lib --target=mbc --stable-sc=stage1 \
	    --output=@nfpq($(M_STAGE1_DIR)/$(NQP_MO_MOAR))@ @nfpq($(M_STAGE1_DIR)/$(NQP_MO_COMBINED))@

@nfp($(M_STAGE1_DIR)/$(MODULE_LOADER_MOAR))@: $(M_STAGE0_DIR) @nfp(src/vm/moar/ModuleLoader.nqp)@
	$(M_STAGE0_NQP) --setting=NULL --no-regex-lib --target=mbc --stable-sc=stage1 \
	    --output=@nfpq($(M_STAGE1_DIR)/$(MODULE_LOADER_MOAR))@ @nfp(src/vm/moar/ModuleLoader.nqp)@

@nfp($(M_STAGE1_DIR)/$(CORE_SETTING_MOAR))@: $(M_STAGE0_DIR) $(CORE_SETTING_SOURCES) @nfp($(M_STAGE1_DIR)/$(NQP_MO_MOAR))@ @nfp($(M_STAGE1_DIR)/$(MODULE_LOADER_MOAR))@
	$(MKPATH) @nfpq($(M_STAGE1_DIR)/gen)@
	$(PERL5) $(M_GEN_CAT) $(CORE_SETTING_SOURCES) > @nfpq($(M_STAGE1_DIR)/$(CORE_SETTING_COMBINED))@
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1_DIR) --setting=NULL --no-regex-lib --target=mbc --stable-sc=stage1 \
	    --output=@nfpq($(M_STAGE1_DIR)/$(CORE_SETTING_MOAR))@ @nfpq($(M_STAGE1_DIR)/$(CORE_SETTING_COMBINED))@

@nfp($(M_STAGE1_DIR)/$(QASTNODE_MOAR):)@ $(M_STAGE0_DIR) $(QASTNODE_SOURCES) @nfp($(M_STAGE1_DIR)/$(CORE_SETTING_MOAR))@
	$(MKPATH) @nfpq($(M_STAGE1_DIR)/gen)@
	$(PERL5) $(M_GEN_CAT) $(QASTNODE_SOURCES) > @nfpq($(M_STAGE1_DIR)/$(QASTNODE_COMBINED))@
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1_DIR) --setting-path=$(M_STAGE1_DIR) --stable-sc=stage1 \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=@nfpq($(M_STAGE1_DIR)/$(QASTNODE_MOAR))@ @nfpq($(M_STAGE1_DIR)/$(QASTNODE_COMBINED))@

@nfp($(M_STAGE1_DIR)/$(QREGEX_MOAR):)@ $(M_STAGE0_DIR) $(QREGEX_SOURCES) @nfp($(M_STAGE1_DIR)/$(QASTNODE_MOAR))@
	$(MKPATH) @nfpq($(M_STAGE1_DIR)/gen)@
	$(PERL5) $(M_GEN_CAT) $(QREGEX_SOURCES) > @nfpq($(M_STAGE1_DIR)/$(QREGEX_COMBINED))@
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1_DIR) --setting-path=$(M_STAGE1_DIR) --stable-sc=stage1 \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=@nfpq($(M_STAGE1_DIR)/$(QREGEX_MOAR))@ @nfpq($(M_STAGE1_DIR)/$(QREGEX_COMBINED))@

@nfp($(M_STAGE1_DIR)/$(HLL_MOAR):)@ $(M_STAGE0_DIR) $(M_HLL_SOURCES) @nfp($(M_STAGE1_DIR)/$(QREGEX_MOAR))@
	$(MKPATH) @nfpq($(M_STAGE1_DIR)/gen)@
	$(PERL5) $(M_GEN_CAT) $(M_HLL_SOURCES) > @nfpq($(M_STAGE1_DIR)/$(HLL_COMBINED))@
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1_DIR) --setting-path=$(M_STAGE1_DIR) \
	    --setting=NQPCORE --no-regex-lib --target=mbc --stable-sc=stage1 \
	    --output=@nfpq($(M_STAGE1_DIR)/$(HLL_MOAR))@ @nfpq($(M_STAGE1_DIR)/$(HLL_COMBINED))@

@nfp($(M_STAGE1_DIR)/$(MASTOPS_MOAR):)@ $(M_STAGE0_DIR) @nfp($(M_STAGE1_DIR)/$(CORE_SETTING_MOAR))@ @@nfp(@moar_prefix@/share/nqp/lib/MAST/Ops.nqp)@@
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1_DIR) --setting-path=$(M_STAGE1_DIR) \
	    --setting=NQPCORE --no-regex-lib --target=mbc --stable-sc=stage1 \
	    --output=@nfpq($(M_STAGE1_DIR)/$(MASTOPS_MOAR))@ @nfpq(@moar_prefix@/share/nqp/lib/MAST/Ops.nqp)@

@nfp($(M_STAGE1_DIR)/$(MASTNODES_MOAR):)@ $(M_STAGE0_DIR) @nfp($(M_STAGE1_DIR)/$(MASTOPS_MOAR))@ @@nfp(@moar_prefix@/share/nqp/lib/MAST/Nodes.nqp)@@
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1_DIR) --setting-path=$(M_STAGE1_DIR) \
	    --setting=NQPCORE --no-regex-lib --target=mbc --stable-sc=stage1 \
	    --output=@nfpq($(M_STAGE1_DIR)/$(MASTNODES_MOAR))@ @nfpq(@moar_prefix@/share/nqp/lib/MAST/Nodes.nqp)@

@nfp($(M_STAGE1_DIR)/$(QAST_MOAR):)@ $(M_STAGE0_DIR) $(M_QAST_SOURCES) @nfp($(M_STAGE1_DIR)/$(HLL_MOAR))@ @nfp($(M_STAGE1_DIR)/$(MASTNODES_MOAR))@ @nfp($(M_STAGE1_DIR)/$(MASTOPS_MOAR))@ @nfp($(M_STAGE1_DIR)/$(QREGEX_MOAR))@ @nfp($(M_STAGE1_DIR)/$(QASTNODE_MOAR))@
	$(MKPATH) @nfpq($(M_STAGE1_DIR)/gen)@
	$(PERL5) $(M_GEN_CAT) $(M_QAST_SOURCES) > @nfpq($(M_STAGE1_DIR)/$(QAST_COMBINED))@
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1_DIR) --setting-path=$(M_STAGE1_DIR) \
	    --setting=NQPCORE --no-regex-lib --target=mbc --stable-sc=stage1 \
	    --output=@nfpq($(M_STAGE1_DIR)/$(QAST_MOAR))@ @nfpq($(M_STAGE1_DIR)/$(QAST_COMBINED))@

@nfp($(M_STAGE1_DIR)/$(P6QREGEX_MOAR):)@ $(M_STAGE0_DIR) $(P6QREGEX_SOURCES) @nfp($(M_STAGE1_DIR)/$(QAST_MOAR))@ @nfp($(M_STAGE1_DIR)/$(QREGEX_MOAR))@ @nfp($(M_STAGE1_DIR)/$(HLL_MOAR))@
	$(MKPATH) @nfpq($(M_STAGE1_DIR)/gen)@
	$(PERL5) $(M_GEN_CAT) $(P6QREGEX_SOURCES) > @nfpq($(M_STAGE1_DIR)/$(P6QREGEX_COMBINED))@
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1_DIR) --setting-path=$(M_STAGE1_DIR) \
	    --setting=NQPCORE --no-regex-lib --target=mbc --stable-sc=stage1 \
	    --output=@nfpq($(M_STAGE1_DIR)/$(P6QREGEX_MOAR))@ @nfpq($(M_STAGE1_DIR)/$(P6QREGEX_COMBINED))@

@nfp($(M_STAGE1_DIR)/$(NQP_MOAR):)@ $(M_STAGE0_DIR) @nfp($(M_STAGE1_DIR)/$(P6QREGEX_MOAR))@ @nfp($(M_STAGE1_DIR)/$(QAST_MOAR))@ $(M_SOURCES)
	$(MKPATH) @nfpq($(M_STAGE1_DIR)/gen)@
	$(PERL5) @shquot(@script(gen-version.pl)@)@ @q($(PREFIX))@ @q($(NQP_LIB_DIR))@ > @nfpq($(M_STAGE1_DIR)/nqp-config.nqp)@
	$(PERL5) $(M_GEN_CAT) $(M_NQP_SOURCES) @nfpq($(M_STAGE1_DIR)/nqp-config.nqp)@ > @nfpq($(M_STAGE1_DIR)/$(NQP_COMBINED))@
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1_DIR) --setting-path=$(M_STAGE1_DIR) \
	    --setting=NQPCORE --target=mbc --no-regex-lib --stable-sc=stage1 \
	    --output=@nfpq($(M_STAGE1_DIR)/$(NQP_MOAR))@ @nfpq($(M_STAGE1_DIR)/$(NQP_COMBINED))@

$(M_STAGE2_DIR): $(M_STAGE1_OUTPUT)

@nfp($(M_STAGE2_DIR)/$(NQP_MO_MOAR):)@ $(M_STAGE1_DIR) $(NQP_MO_SOURCES)
	$(MKPATH) @nfp($(M_STAGE2_DIR)/gen)@
	$(PERL5) $(M_GEN_CAT) $(NQP_MO_SOURCES) > @nfpq($(M_STAGE2_DIR)/$(NQP_MO_COMBINED))@
	$(M_STAGE1_NQP) --setting=NULL --no-regex-lib --target=mbc \
	    --output=@nfpq($(M_STAGE2_DIR)/$(NQP_MO_MOAR))@ @nfpq($(M_STAGE2_DIR)/$(NQP_MO_COMBINED))@

@nfp($(M_STAGE2_DIR)/$(MODULE_LOADER_MOAR):)@ $(M_STAGE1_DIR) @nfp(src/vm/moar/ModuleLoader.nqp)@
	$(M_STAGE1_NQP) --setting=NULL --no-regex-lib --target=mbc \
	    --output=@nfpq($(M_STAGE2_DIR)/$(MODULE_LOADER_MOAR))@ @nfp(src/vm/moar/ModuleLoader.nqp)@

@nfp($(M_STAGE2_DIR)/$(CORE_SETTING_MOAR):)@ $(M_STAGE1_DIR) $(CORE_SETTING_SOURCES) @nfp($(M_STAGE2_DIR)/$(NQP_MO_MOAR))@ @nfp($(M_STAGE2_DIR)/$(MODULE_LOADER_MOAR))@
	$(MKPATH) @nfpq($(M_STAGE2_DIR)/gen)@
	$(PERL5) $(M_GEN_CAT) $(CORE_SETTING_SOURCES) > @nfpq($(M_STAGE2_DIR)/$(CORE_SETTING_COMBINED))@
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2_DIR) --setting=NULL --no-regex-lib --target=mbc \
	    --output=@nfpq($(M_STAGE2_DIR)/$(CORE_SETTING_MOAR))@ @nfpq($(M_STAGE2_DIR)/$(CORE_SETTING_COMBINED))@

@nfp($(M_STAGE2_DIR)/$(QASTNODE_MOAR):)@ $(M_STAGE1_DIR) $(QASTNODE_SOURCES) @nfp($(M_STAGE2_DIR)/$(CORE_SETTING_MOAR))@
	$(MKPATH) @nfpq($(M_STAGE2_DIR)/gen)@
	$(PERL5) $(M_GEN_CAT) $(QASTNODE_SOURCES) > @nfpq($(M_STAGE2_DIR)/$(QASTNODE_COMBINED))@
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2_DIR) --setting-path=$(M_STAGE2_DIR) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=@nfpq($(M_STAGE2_DIR)/$(QASTNODE_MOAR))@ @nfpq($(M_STAGE2_DIR)/$(QASTNODE_COMBINED))@

@nfp($(M_STAGE2_DIR)/$(QREGEX_MOAR):)@ $(M_STAGE1_DIR) $(QREGEX_SOURCES) @nfp($(M_STAGE2_DIR)/$(QASTNODE_MOAR))@
	$(MKPATH) @nfpq($(M_STAGE2_DIR)/gen)@
	$(PERL5) $(M_GEN_CAT) $(QREGEX_SOURCES) > @nfpq($(M_STAGE2_DIR)/$(QREGEX_COMBINED))@
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2_DIR) --setting-path=$(M_STAGE2_DIR) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=@nfpq($(M_STAGE2_DIR)/$(QREGEX_MOAR))@ @nfpq($(M_STAGE2_DIR)/$(QREGEX_COMBINED))@

@nfp($(M_STAGE2_DIR)/$(HLL_MOAR):)@ $(M_STAGE1_DIR) $(M_HLL_SOURCES) @nfp($(M_STAGE2_DIR)/$(QREGEX_MOAR))@
	$(MKPATH) @nfpq($(M_STAGE2_DIR)/gen)@
	$(PERL5) $(M_GEN_CAT) $(M_HLL_SOURCES) > @nfpq($(M_STAGE2_DIR)/$(HLL_COMBINED))@
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2_DIR) --setting-path=$(M_STAGE2_DIR) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=@nfpq($(M_STAGE2_DIR)/$(HLL_MOAR))@ @nfpq($(M_STAGE2_DIR)/$(HLL_COMBINED))@

@nfp($(M_STAGE2_DIR)/$(MASTOPS_MOAR):)@ $(M_STAGE1_DIR) @nfp($(M_STAGE2_DIR)/$(CORE_SETTING_MOAR))@ @@nfp(@moar_prefix@/share/nqp/lib/MAST/Ops.nqp)@@
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2_DIR) --setting-path=$(M_STAGE2_DIR) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=@nfpq($(M_STAGE2_DIR)/$(MASTOPS_MOAR))@ @nfpq(@moar_prefix@/share/nqp/lib/MAST/Ops.nqp)@

@nfp($(M_STAGE2_DIR)/$(MASTNODES_MOAR):)@ $(M_STAGE1_DIR) @nfp($(M_STAGE2_DIR)/$(MASTOPS_MOAR))@ @@nfp(@moar_prefix@/share/nqp/lib/MAST/Nodes.nqp)@@
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2_DIR) --setting-path=$(M_STAGE2_DIR) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=@nfpq($(M_STAGE2_DIR)/$(MASTNODES_MOAR))@ @nfpq(@moar_prefix@/share/nqp/lib/MAST/Nodes.nqp)@

@nfp($(M_STAGE2_DIR)/$(QAST_MOAR):)@ $(M_STAGE1_DIR) $(M_QAST_SOURCES) @nfp($(M_STAGE2_DIR)/$(HLL_MOAR))@ @nfp($(M_STAGE2_DIR)/$(MASTNODES_MOAR))@ @nfp($(M_STAGE1_DIR)/$(MASTOPS_MOAR))@ @nfp($(M_STAGE1_DIR)/$(QREGEX_MOAR))@ @nfp($(M_STAGE1_DIR)/$(QASTNODE_MOAR))@
	$(MKPATH) @nfpq($(M_STAGE2_DIR)/gen)@
	$(PERL5) $(M_GEN_CAT) $(M_QAST_SOURCES) > @nfpq($(M_STAGE2_DIR)/$(QAST_COMBINED))@
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2_DIR) --setting-path=$(M_STAGE2_DIR) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=@nfpq($(M_STAGE2_DIR)/$(QAST_MOAR))@ @nfpq($(M_STAGE2_DIR)/$(QAST_COMBINED))@

@nfp($(M_STAGE2_DIR)/$(P6QREGEX_MOAR):)@ $(M_STAGE1_DIR) $(P6QREGEX_SOURCES) @nfp($(M_STAGE2_DIR)/$(QAST_MOAR))@ @nfp($(M_STAGE2_DIR)/$(QREGEX_MOAR))@ @nfp($(M_STAGE2_DIR)/$(HLL_MOAR))@
	$(MKPATH) @nfpq($(M_STAGE2_DIR)/gen)@
	$(PERL5) $(M_GEN_CAT) $(P6QREGEX_SOURCES) > @nfpq($(M_STAGE2_DIR)/$(P6QREGEX_COMBINED))@
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2_DIR) --setting-path=$(M_STAGE2_DIR) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=@nfpq($(M_STAGE2_DIR)/$(P6QREGEX_MOAR))@ @nfpq($(M_STAGE2_DIR)/$(P6QREGEX_COMBINED))@

@nfp($(M_STAGE2_DIR)/$(NQP_MOAR):)@ $(M_STAGE1_DIR) @nfp($(M_STAGE2_DIR)/$(QAST_MOAR))@ @nfp($(M_STAGE2_DIR)/$(P6QREGEX_MOAR))@ $(M_SOURCES)
	$(MKPATH) @nfpq($(M_STAGE2_DIR)/gen)@
	$(PERL5) @shquot(@script(gen-version.pl)@)@ $(PREFIX) $(NQP_LIB_DIR) > @nfpq($(M_STAGE2_DIR)/nqp-config.nqp)@
	$(PERL5) $(M_GEN_CAT) $(M_NQP_SOURCES) @nfpq($(M_STAGE2_DIR)/nqp-config.nqp)@ > @nfpq($(M_STAGE2_DIR)/$(NQP_COMBINED))@
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2_DIR) --setting-path=$(M_STAGE2_DIR) \
	    --setting=NQPCORE --target=mbc --no-regex-lib \
	    --output=@nfpq($(M_STAGE2_DIR)/$(NQP_MOAR))@ @nfpq($(M_STAGE2_DIR)/$(NQP_COMBINED))@

$(NQP_MOAR): $(M_STAGE2_OUTPUT)
	$(CP) @nfpq($(M_STAGE2_DIR)/$(NQP_MO_MOAR))@ .
	$(CP) @nfpq($(M_STAGE2_DIR)/$(MODULE_LOADER_MOAR))@ .
	$(CP) @nfpq($(M_STAGE2_DIR)/$(CORE_SETTING_MOAR))@ .
	$(CP) @nfpq($(M_STAGE2_DIR)/$(QASTNODE_MOAR))@ .
	$(CP) @nfpq($(M_STAGE2_DIR)/$(QREGEX_MOAR))@ .
	$(CP) @nfpq($(M_STAGE2_DIR)/$(HLL_MOAR))@ .
	$(CP) @nfpq($(M_STAGE2_DIR)/$(MASTOPS_MOAR))@ .
	$(CP) @nfpq($(M_STAGE2_DIR)/$(MASTNODES_MOAR))@ .
	$(CP) @nfpq($(M_STAGE2_DIR)/$(QAST_MOAR))@ .
	$(CP) @nfpq($(M_STAGE2_DIR)/$(P6QREGEX_MOAR))@ .
	$(CP) @nfpq($(M_STAGE2_DIR)/$(NQP_MOAR))@ .

$(M_RUNNER): @@configure_script@@ @@nfp(@templates_dir@/@platform@/nqp-m)@@
	$(PERL5) @shquot(@configure_script@)@ @configure_opts()@ --expand=@nfpq(@templates_dir@/@platform@/nqp-m)@ --out=@q($(M_RUNNER))@
	$(CHMOD) 0755 @q($(M_RUNNER))@

m-runner-default: m-all
	$(CP) @q($(M_RUNNER))@ @nfpq($(BASE_DIR)/nqp$(BAT))@
	$(CHMOD) 0755 nqp$(BAT)

m-runner-default-install: m-runner-default m-install
	$(CP) @nfpq($(DESTDIR)$(BIN_DIR)/$(M_RUNNER))@ @nfpq($(DESTDIR)$(BIN_DIR)/nqp$(BAT))@
	$(CHMOD) 0755 @nfpq($(DESTDIR)$(BIN_DIR)/nqp$(BAT))@

$(P5QREGEX_MOAR): $(P5QREGEX_SOURCES) $(NQP_MOAR) $(M_RUNNER)
	$(MKPATH) @nfpq($(M_STAGE2_DIR)/gen)@
	$(PERL5) $(M_GEN_CAT) $(P5QREGEX_SOURCES) > @nfpq($(M_STAGE2_DIR)/$(P5QREGEX_COMBINED))@
	@nfpq($(M_RUNNER_BIN))@ --target=mbc --output=$(P5QREGEX_MOAR) \
	    @nfpq($(M_STAGE2_DIR)/$(P5QREGEX_COMBINED))@

m-bootstrap-files: $(M_STAGE2_OUTPUT)
	$(CP) @nfpq($(M_STAGE2_DIR)/$(NQP_MO_MOAR))@ $(M_STAGE0_DIR)
	$(CP) @nfpq($(M_STAGE2_DIR)/$(MODULE_LOADER_MOAR))@ $(M_STAGE0_DIR)
	$(CP) @nfpq($(M_STAGE2_DIR)/$(CORE_SETTING_MOAR))@ $(M_STAGE0_DIR)
	$(CP) @nfpq($(M_STAGE2_DIR)/$(QASTNODE_MOAR))@ $(M_STAGE0_DIR)
	$(CP) @nfpq($(M_STAGE2_DIR)/$(QREGEX_MOAR))@ $(M_STAGE0_DIR)
	$(CP) @nfpq($(M_STAGE2_DIR)/$(HLL_MOAR))@ $(M_STAGE0_DIR)
	$(CP) @nfpq($(M_STAGE2_DIR)/$(MASTOPS_MOAR))@ $(M_STAGE0_DIR)
	$(CP) @nfpq($(M_STAGE2_DIR)/$(MASTNODES_MOAR))@ $(M_STAGE0_DIR)
	$(CP) @nfpq($(M_STAGE2_DIR)/$(QAST_MOAR))@ $(M_STAGE0_DIR)
	$(CP) @nfpq($(M_STAGE2_DIR)/$(P6QREGEX_MOAR))@ $(M_STAGE0_DIR)
	$(CP) @nfpq($(M_STAGE2_DIR)/$(NQP_MOAR))@ $(M_STAGE0_DIR)

## testing

m-test: m-all
	$(PROVE) -r --exec @nfpq($(M_RUNNER_BIN))@ @nfpl(t/nqp t/hll t/qregex t/p5regex t/qast t/moar t/serialization t/nativecall t/concurrency)@

m-test-loud: m-all
	$(PROVE) -r -v --exec @nfpq($(M_RUNNER_BIN))@ @nfpl(t/nqp t/hll t/qregex t/p5regex t/qast t/moar t/serialization t/nativecall t/concurrency)@

m-core-test: $(M_RUNNER)
	$(PROVE) -r --exec @nfpq($(M_RUNNER))@ @nfp(t/nqp)@

m-core-test-loud: $(M_RUNNER)
	$(PROVE) -r -v --exec @nfpq($(M_RUNNER))@ @nfp(t/nqp)@

m-qregex-test: $(M_RUNNER)
	$(PROVE) -r --exec @nfpq($(M_RUNNER))@ @nfp(t/qregex)@

m-qregex-test-loud: $(M_RUNNER)
	$(PROVE) -r -v --exec @nfpq($(M_RUNNER))@ @nfp(t/qregex)@

# vim: ft=make noexpandtab ts=4 sw=4
