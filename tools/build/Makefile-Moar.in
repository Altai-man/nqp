MOAR         = $(BIN_DIR)/moar
RUNNER       = @runner@

M_STAGE0 = src/vm/moar/stage0
M_STAGE1 = gen/moar/stage1
M_STAGE2 = gen/moar/stage2

M_STAGE0_NQP = $(MOAR) --libpath=$(M_STAGE0) $(M_STAGE0)/nqp.moarvm --bootstrap
M_STAGE1_NQP = $(MOAR) --libpath=$(M_STAGE1) $(M_STAGE1)/nqp.moarvm --bootstrap

NQP_MO_MOAR     = nqpmo.moarvm

MODULE_LOADER_MOAR = ModuleLoader.moarvm

CORE_SETTING_MOAR     = NQPCORE.setting.moarvm

QASTNODE_MOAR     = QASTNode.moarvm

QREGEX_MOAR     = QRegex.moarvm

HLL_MOAR       = NQPHLL.moarvm
M_HLL_SOURCES  = src/vm/moar/HLL/Backend.nqp $(COMMON_HLL_SOURCES)

MASTOPS_MOAR   = MASTOps.moarvm
MASTNODES_MOAR = MASTNodes.moarvm

QAST_MOAR     = QAST.moarvm
M_QAST_SOURCES  = \
  src/vm/moar/QAST/QASTRegexCompilerMAST.nqp \
  src/vm/moar/QAST/QASTOperationsMAST.nqp \
  src/vm/moar/QAST/QASTCompilerMAST.nqp \

P6QREGEX_MOAR     = NQPP6QRegex.moarvm

P5QREGEX_MOAR     = NQPP5QRegex.moarvm

NQP_MOAR     = nqp.moarvm
M_NQP_SOURCES= src/vm/moar/NQP/Ops.nqp $(COMMON_NQP_SOURCES)

M_STAGE1_OUTPUT = $(M_STAGE1)/$(NQP_MO_MOAR) $(M_STAGE1)/$(MODULE_LOADER_MOAR) \
                $(M_STAGE1)/$(CORE_SETTING_MOAR) $(M_STAGE1)/$(QASTNODE_MOAR) \
                $(M_STAGE1)/$(QREGEX_MOAR) $(M_STAGE1)/$(HLL_MOAR) \
                $(M_STAGE1)/$(MASTOPS_MOAR) $(M_STAGE1)/$(MASTNODES_MOAR) \
                $(M_STAGE1)/$(QAST_MOAR) $(M_STAGE1)/$(P6QREGEX_MOAR) \
                $(M_STAGE1)/$(NQP_MOAR)

M_STAGE2_OUTPUT = $(M_STAGE2)/$(NQP_MO_MOAR) $(M_STAGE2)/$(MODULE_LOADER_MOAR) \
                $(M_STAGE2)/$(CORE_SETTING_MOAR) $(M_STAGE2)/$(QASTNODE_MOAR) \
                $(M_STAGE2)/$(QREGEX_MOAR) $(M_STAGE2)/$(HLL_MOAR) \
                $(M_STAGE2)/$(MASTOPS_MOAR) $(M_STAGE2)/$(MASTNODES_MOAR) \
                $(M_STAGE2)/$(QAST_MOAR) $(M_STAGE2)/$(P6QREGEX_MOAR) \
                $(M_STAGE2)/$(NQP_MOAR)

all: $(NQP_MOAR) $(RUNNER) $(P5QREGEX_MOAR)

install: all
	$(MKPATH) $(BIN_DIR)
	$(MKPATH) $(NQP_LIB_DIR)
	$(CP) $(NQP_MO_MOAR) $(NQP_LIB_DIR)
	$(CP) $(MODULE_LOADER_MOAR) $(NQP_LIB_DIR)
	$(CP) $(CORE_SETTING_MOAR) $(NQP_LIB_DIR)
	$(CP) $(QASTNODE_MOAR) $(NQP_LIB_DIR)
	$(CP) $(QREGEX_MOAR) $(NQP_LIB_DIR)
	$(CP) $(HLL_MOAR) $(NQP_LIB_DIR)
	$(CP) $(MASTOPS_MOAR) $(NQP_LIB_DIR)
	$(CP) $(MASTNODES_MOAR) $(NQP_LIB_DIR)
	$(CP) $(QAST_MOAR) $(NQP_LIB_DIR)
	$(CP) $(P6QREGEX_MOAR) $(NQP_LIB_DIR)
	$(CP) $(NQP_MOAR) $(NQP_LIB_DIR)
	$(CP) $(P5QREGEX_MOAR) $(NQP_LIB_DIR)
	$(PERL) tools/build/install-moar-runner.pl $(PREFIX)

clean:
	$(PERL) -MExtUtils::Command -e rm_rf *.moarvm src/stage1 src/stage2 nqp nqp.bat

$(M_STAGE1): $(M_STAGE1_OUTPUT)

$(M_STAGE1)/$(NQP_MO_MOAR): $(M_STAGE0) $(NQP_MO_SOURCES)
	$(MKPATH) $(M_STAGE1)/gen
	$(PERL) tools/build/gen-cat.pl moar $(NQP_MO_SOURCES) > $(M_STAGE1)/$(NQP_MO_COMBINED)
	$(M_STAGE0_NQP) --setting=NULL --no-regex-lib --target=mbc \
	    --output=$(M_STAGE1)/$(NQP_MO_MOAR) $(M_STAGE1)/$(NQP_MO_COMBINED)

$(M_STAGE1)/$(MODULE_LOADER_MOAR): $(M_STAGE0) src/vm/moar/ModuleLoader.nqp
	$(M_STAGE0_NQP) --setting=NULL --no-regex-lib --target=mbc \
	    --output=$(M_STAGE1)/$(MODULE_LOADER_MOAR) src/vm/moar/ModuleLoader.nqp

$(M_STAGE1)/$(CORE_SETTING_MOAR): $(M_STAGE0) $(CORE_SETTING_SOURCES) $(M_STAGE1)/$(NQP_MO_MOAR) $(M_STAGE1)/$(MODULE_LOADER_MOAR)
	$(MKPATH) $(M_STAGE1)/gen
	$(PERL) tools/build/gen-cat.pl moar $(CORE_SETTING_SOURCES) > $(M_STAGE1)/$(CORE_SETTING_COMBINED)
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1) --setting=NULL --no-regex-lib --target=mbc \
	    --output=$(M_STAGE1)/$(CORE_SETTING_MOAR) $(M_STAGE1)/$(CORE_SETTING_COMBINED)

$(M_STAGE1)/$(QASTNODE_MOAR): $(M_STAGE0) $(QASTNODE_SOURCES) $(M_STAGE1)/$(CORE_SETTING_MOAR)
	$(MKPATH) $(M_STAGE1)/gen
	$(PERL) tools/build/gen-cat.pl moar $(QASTNODE_SOURCES) > $(M_STAGE1)/$(QASTNODE_COMBINED)
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1) --setting-path=$(M_STAGE1) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE1)/$(QASTNODE_MOAR) $(M_STAGE1)/$(QASTNODE_COMBINED)

$(M_STAGE1)/$(QREGEX_MOAR): $(M_STAGE0) $(QREGEX_SOURCES) $(M_STAGE1)/$(QASTNODE_MOAR)
	$(MKPATH) $(M_STAGE1)/gen
	$(PERL) tools/build/gen-cat.pl moar $(QREGEX_SOURCES) > $(M_STAGE1)/$(QREGEX_COMBINED)
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1) --setting-path=$(M_STAGE1) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE1)/$(QREGEX_MOAR) $(M_STAGE1)/$(QREGEX_COMBINED)

$(M_STAGE1)/$(HLL_MOAR): $(M_STAGE0) $(M_HLL_SOURCES) $(M_STAGE1)/$(QREGEX_MOAR)
	$(MKPATH) $(M_STAGE1)/gen
	$(PERL) tools/build/gen-cat.pl moar $(M_HLL_SOURCES) > $(M_STAGE1)/$(HLL_COMBINED)
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1) --setting-path=$(M_STAGE1) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE1)/$(HLL_MOAR) $(M_STAGE1)/$(HLL_COMBINED)

$(M_STAGE1)/$(MASTOPS_MOAR): $(M_STAGE0) $(M_STAGE1)/$(CORE_SETTING_MOAR) $(PREFIX)/lib/MAST/Ops.nqp
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1) --setting-path=$(M_STAGE1) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE1)/$(MASTOPS_MOAR) $(PREFIX)/lib/MAST/Ops.nqp

$(M_STAGE1)/$(MASTNODES_MOAR): $(M_STAGE0) $(M_STAGE1)/$(MASTOPS_MOAR) $(PREFIX)/lib/MAST/Nodes.nqp
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1) --setting-path=$(M_STAGE1) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE1)/$(MASTNODES_MOAR) $(PREFIX)/lib/MAST/Nodes.nqp

$(M_STAGE1)/$(QAST_MOAR): $(M_STAGE0) $(M_QAST_SOURCES) $(M_STAGE1)/$(HLL_MOAR) $(M_STAGE1)/$(MASTNODES_MOAR)
	$(MKPATH) $(M_STAGE1)/gen
	$(PERL) tools/build/gen-cat.pl moar $(M_QAST_SOURCES) > $(M_STAGE1)/$(QAST_COMBINED)
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1) --setting-path=$(M_STAGE1) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE1)/$(QAST_MOAR) $(M_STAGE1)/$(QAST_COMBINED)

$(M_STAGE1)/$(P6QREGEX_MOAR): $(M_STAGE0) $(P6QREGEX_SOURCES) $(M_STAGE1)/$(QAST_MOAR)
	$(MKPATH) $(M_STAGE1)/gen
	$(PERL) tools/build/gen-cat.pl moar $(P6QREGEX_SOURCES) > $(M_STAGE1)/$(P6QREGEX_COMBINED)
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1) --setting-path=$(M_STAGE1) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE1)/$(P6QREGEX_MOAR) $(M_STAGE1)/$(P6QREGEX_COMBINED)

$(M_STAGE1)/$(NQP_MOAR): $(M_STAGE0) $(M_NQP_SOURCES) $(M_STAGE1)/$(P6QREGEX_MOAR)
	$(MKPATH) $(M_STAGE1)/gen
	$(PERL) tools/build/gen-version.pl > $(M_STAGE1)/nqp-config.nqp
	$(PERL) tools/build/gen-cat.pl moar $(M_NQP_SOURCES) $(M_STAGE1)/nqp-config.nqp > $(M_STAGE1)/$(NQP_COMBINED)
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1) --setting-path=$(M_STAGE1) \
	    --setting=NQPCORE --target=mbc --no-regex-lib \
	    --output=$(M_STAGE1)/$(NQP_MOAR) $(M_STAGE1)/$(NQP_COMBINED)

$(M_STAGE2): $(M_STAGE1_OUTPUT)

$(M_STAGE2)/$(NQP_MO_MOAR): $(M_STAGE1) $(NQP_MO_SOURCES)
	$(MKPATH) $(M_STAGE2)/gen
	$(PERL) tools/build/gen-cat.pl moar $(NQP_MO_SOURCES) > $(M_STAGE2)/$(NQP_MO_COMBINED)
	$(M_STAGE1_NQP) --setting=NULL --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2)/$(NQP_MO_MOAR) $(M_STAGE2)/$(NQP_MO_COMBINED)

$(M_STAGE2)/$(MODULE_LOADER_MOAR): $(M_STAGE1) src/vm/moar/ModuleLoader.nqp
	$(M_STAGE1_NQP) --setting=NULL --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2)/$(MODULE_LOADER_MOAR) src/vm/moar/ModuleLoader.nqp

$(M_STAGE2)/$(CORE_SETTING_MOAR): $(M_STAGE1) $(CORE_SETTING_SOURCES) $(M_STAGE2)/$(NQP_MO_MOAR) $(M_STAGE2)/$(MODULE_LOADER_MOAR)
	$(MKPATH) $(M_STAGE2)/gen
	$(PERL) tools/build/gen-cat.pl moar $(CORE_SETTING_SOURCES) > $(M_STAGE2)/$(CORE_SETTING_COMBINED)
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2) --setting=NULL --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2)/$(CORE_SETTING_MOAR) $(M_STAGE2)/$(CORE_SETTING_COMBINED)

$(M_STAGE2)/$(QASTNODE_MOAR): $(M_STAGE1) $(QASTNODE_SOURCES) $(M_STAGE2)/$(CORE_SETTING_MOAR)
	$(MKPATH) $(M_STAGE2)/gen
	$(PERL) tools/build/gen-cat.pl moar $(QASTNODE_SOURCES) > $(M_STAGE2)/$(QASTNODE_COMBINED)
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2) --setting-path=$(M_STAGE2) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2)/$(QASTNODE_MOAR) $(M_STAGE2)/$(QASTNODE_COMBINED)

$(M_STAGE2)/$(QREGEX_MOAR): $(M_STAGE1) $(QREGEX_SOURCES) $(M_STAGE2)/$(QASTNODE_MOAR)
	$(MKPATH) $(M_STAGE2)/gen
	$(PERL) tools/build/gen-cat.pl moar $(QREGEX_SOURCES) > $(M_STAGE2)/$(QREGEX_COMBINED)
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2) --setting-path=$(M_STAGE2) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2)/$(QREGEX_MOAR) $(M_STAGE2)/$(QREGEX_COMBINED)

$(M_STAGE2)/$(HLL_MOAR): $(M_STAGE1) $(M_HLL_SOURCES) $(M_STAGE2)/$(QREGEX_MOAR)
	$(MKPATH) $(M_STAGE2)/gen
	$(PERL) tools/build/gen-cat.pl moar $(M_HLL_SOURCES) > $(M_STAGE2)/$(HLL_COMBINED)
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2) --setting-path=$(M_STAGE2) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2)/$(HLL_MOAR) $(M_STAGE2)/$(HLL_COMBINED)

$(M_STAGE2)/$(MASTOPS_MOAR): $(M_STAGE1) $(M_STAGE2)/$(CORE_SETTING_MOAR) $(PREFIX)/lib/MAST/Ops.nqp
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2) --setting-path=$(M_STAGE2) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2)/$(MASTOPS_MOAR) $(PREFIX)/lib/MAST/Ops.nqp

$(M_STAGE2)/$(MASTNODES_MOAR): $(M_STAGE1) $(M_STAGE2)/$(MASTOPS_MOAR) $(PREFIX)/lib/MAST/Nodes.nqp
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2) --setting-path=$(M_STAGE2) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2)/$(MASTNODES_MOAR) $(PREFIX)/lib/MAST/Nodes.nqp

$(M_STAGE2)/$(QAST_MOAR): $(M_STAGE1) $(M_QAST_SOURCES) $(M_STAGE2)/$(HLL_MOAR) $(M_STAGE2)/$(MASTNODES_MOAR)
	$(MKPATH) $(M_STAGE2)/gen
	$(PERL) tools/build/gen-cat.pl moar $(M_QAST_SOURCES) > $(M_STAGE2)/$(QAST_COMBINED)
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2) --setting-path=$(M_STAGE2) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2)/$(QAST_MOAR) $(M_STAGE2)/$(QAST_COMBINED)

$(M_STAGE2)/$(P6QREGEX_MOAR): $(M_STAGE1) $(P6QREGEX_SOURCES) $(M_STAGE2)/$(QAST_MOAR)
	$(MKPATH) $(M_STAGE2)/gen
	$(PERL) tools/build/gen-cat.pl moar $(P6QREGEX_SOURCES) > $(M_STAGE2)/$(P6QREGEX_COMBINED)
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2) --setting-path=$(M_STAGE2) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2)/$(P6QREGEX_MOAR) $(M_STAGE2)/$(P6QREGEX_COMBINED)

$(M_STAGE2)/$(NQP_MOAR): $(M_STAGE1) $(M_NQP_SOURCES) $(M_STAGE2)/$(P6QREGEX_MOAR)
	$(MKPATH) $(M_STAGE2)/gen
	$(PERL) tools/build/gen-version.pl > $(M_STAGE2)/nqp-config.nqp
	$(PERL) tools/build/gen-cat.pl moar $(M_NQP_SOURCES) $(M_STAGE2)/nqp-config.nqp > $(M_STAGE2)/$(NQP_COMBINED)
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2) --setting-path=$(M_STAGE2) \
	    --setting=NQPCORE --target=mbc --no-regex-lib \
	    --output=$(M_STAGE2)/$(NQP_MOAR) $(M_STAGE2)/$(NQP_COMBINED)

$(NQP_MOAR): $(M_STAGE2_OUTPUT)
	$(CP) $(M_STAGE2)/$(NQP_MO_MOAR) .
	$(CP) $(M_STAGE2)/$(MODULE_LOADER_MOAR) .
	$(CP) $(M_STAGE2)/$(CORE_SETTING_MOAR) .
	$(CP) $(M_STAGE2)/$(QASTNODE_MOAR) .
	$(CP) $(M_STAGE2)/$(QREGEX_MOAR) .
	$(CP) $(M_STAGE2)/$(HLL_MOAR) .
	$(CP) $(M_STAGE2)/$(MASTOPS_MOAR) .
	$(CP) $(M_STAGE2)/$(MASTNODES_MOAR) .
	$(CP) $(M_STAGE2)/$(QAST_MOAR) .
	$(CP) $(M_STAGE2)/$(P6QREGEX_MOAR) .
	$(CP) $(M_STAGE2)/$(NQP_MOAR) .

$(RUNNER): tools/build/gen-moar-runner.pl
	$(PERL) tools/build/gen-moar-runner.pl "$(MOAR)"

$(P5QREGEX_MOAR): $(P5QREGEX_SOURCES) $(NQP_MOAR) $(RUNNER)
	$(MKPATH) $(M_STAGE2)/gen
	$(PERL) tools/build/gen-cat.pl moar $(P5QREGEX_SOURCES) > $(M_STAGE2)/$(P5QREGEX_COMBINED)
	.@slash@$(RUNNER) --target=mbc --output=$(P5QREGEX_MOAR) \
	    $(M_STAGE2)/$(P5QREGEX_COMBINED)

## testing

t/*/*.t: all
	prove -r -v --exec ".@slash@$(RUNNER)" $@

test: all
	prove -r --exec ".@slash@$(RUNNER)" t/nqp t/qregex t/p5regex t/qast t/serialization

test-loud: all
	prove -r -v --exec ".@slash@$(RUNNER)" t/nqp t/qregex t/p5regex t/qast t/serialization

core-test: $(RUNNER)
	prove -r --exec ".@slash@$(RUNNER)" t/nqp

core-test-loud: $(RUNNER)
	prove -r -v --exec ".@slash@$(RUNNER)" t/nqp

qregex-test: $(RUNNER)
	prove -r --exec ".@slash@$(RUNNER)" t/qregex

qregex-test-loud: $(RUNNER)
	prove -r -v --exec ".@slash@$(RUNNER)" t/qregex

# nqp::makefile <-- tells NQP::Configure to treat this file as a makefile,
#                   performing win32 slash and makefile conversions
